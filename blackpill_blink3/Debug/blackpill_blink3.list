
blackpill_blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000243c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  00004070  2**0
                  CONTENTS
  4 .ARM          00000008  08002674  08002674  00003674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800267c  0800267c  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800267c  0800267c  0000367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002680  08002680  00003680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002684  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  080026f4  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080026f4  0000422c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000949f  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001792  00000000  00000000  0000d53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00003adb  00000000  00000000  0000ecd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  000127b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051a  00000000  00000000  00012e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016277  00000000  00000000  0001339a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a739  00000000  00000000  00029611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000875b1  00000000  00000000  00033d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bb2fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001864  00000000  00000000  000bb340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000bcba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080025c4 	.word	0x080025c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080025c4 	.word	0x080025c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b089      	sub	sp, #36	@ 0x24
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000574:	2400      	movs	r4, #0
 8000576:	9403      	str	r4, [sp, #12]
 8000578:	9404      	str	r4, [sp, #16]
 800057a:	9405      	str	r4, [sp, #20]
 800057c:	9406      	str	r4, [sp, #24]
 800057e:	9407      	str	r4, [sp, #28]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	9400      	str	r4, [sp, #0]
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_GPIO_Init+0x9c>)
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f042 0204 	orr.w	r2, r2, #4
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f002 0204 	and.w	r2, r2, #4
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	9401      	str	r4, [sp, #4]
 8000598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9402      	str	r4, [sp, #8]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f042 0201 	orr.w	r2, r2, #1
 80005b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	9b02      	ldr	r3, [sp, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005be:	4d14      	ldr	r5, [pc, #80]	@ (8000610 <MX_GPIO_Init+0xa0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c6:	4628      	mov	r0, r5
 80005c8:	f000 fb9a 	bl	8000d00 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80005cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005d2:	2311      	movs	r3, #17
 80005d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005da:	a903      	add	r1, sp, #12
 80005dc:	4628      	mov	r0, r5
 80005de:	f000 faab 	bl	8000b38 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 80005e2:	2301      	movs	r3, #1
 80005e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e6:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
 80005ea:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80005ee:	a903      	add	r1, sp, #12
 80005f0:	4808      	ldr	r0, [pc, #32]	@ (8000614 <MX_GPIO_Init+0xa4>)
 80005f2:	f000 faa1 	bl	8000b38 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005f6:	4622      	mov	r2, r4
 80005f8:	4621      	mov	r1, r4
 80005fa:	2006      	movs	r0, #6
 80005fc:	f000 fa74 	bl	8000ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000600:	2006      	movs	r0, #6
 8000602:	f000 fa81 	bl	8000b08 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	b009      	add	sp, #36	@ 0x24
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40020800 	.word	0x40020800
 8000614:	40020000 	.word	0x40020000

08000618 <_write>:
    if (fd == 1 || fd == 2) {
 8000618:	3801      	subs	r0, #1
 800061a:	2801      	cmp	r0, #1
 800061c:	d80a      	bhi.n	8000634 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800061e:	b510      	push	{r4, lr}
 8000620:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000626:	b292      	uxth	r2, r2
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <_write+0x28>)
 800062a:	f000 ffd6 	bl	80015da <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800062e:	b920      	cbnz	r0, 800063a <_write+0x22>
            return len;
 8000630:	4620      	mov	r0, r4
}
 8000632:	bd10      	pop	{r4, pc}
    return -1;
 8000634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000638:	4770      	bx	lr
            return -1;
 800063a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800063e:	e7f8      	b.n	8000632 <_write+0x1a>
 8000640:	20000090 	.word	0x20000090

08000644 <HAL_GPIO_EXTI_Callback>:
    if (GPIO_Pin == BTN_Pin) {
 8000644:	2801      	cmp	r0, #1
 8000646:	d000      	beq.n	800064a <HAL_GPIO_EXTI_Callback+0x6>
}
 8000648:	4770      	bx	lr
        btn_press = 1;
 800064a:	4b02      	ldr	r3, [pc, #8]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x10>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	e7fa      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0x4>
 8000652:	bf00      	nop
 8000654:	2000008d 	.word	0x2000008d

08000658 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800065a:	e7fe      	b.n	800065a <Error_Handler+0x2>

0800065c <MX_USART1_UART_Init>:
{
 800065c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800065e:	480a      	ldr	r0, [pc, #40]	@ (8000688 <MX_USART1_UART_Init+0x2c>)
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_USART1_UART_Init+0x30>)
 8000662:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000664:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000668:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	2300      	movs	r3, #0
 800066c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800066e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000670:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000672:	220c      	movs	r2, #12
 8000674:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800067a:	f000 ff7e 	bl	800157a <HAL_UART_Init>
 800067e:	b900      	cbnz	r0, 8000682 <MX_USART1_UART_Init+0x26>
}
 8000680:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000682:	f7ff ffe9 	bl	8000658 <Error_Handler>
 8000686:	bf00      	nop
 8000688:	20000090 	.word	0x20000090
 800068c:	40011000 	.word	0x40011000

08000690 <SystemClock_Config>:
{
 8000690:	b500      	push	{lr}
 8000692:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000694:	2230      	movs	r2, #48	@ 0x30
 8000696:	2100      	movs	r1, #0
 8000698:	a808      	add	r0, sp, #32
 800069a:	f001 fa0f 	bl	8001abc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	9304      	str	r3, [sp, #16]
 80006a4:	9305      	str	r3, [sp, #20]
 80006a6:	9306      	str	r3, [sp, #24]
 80006a8:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	4a1f      	ldr	r2, [pc, #124]	@ (800072c <SystemClock_Config+0x9c>)
 80006ae:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80006b0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80006b4:	6411      	str	r1, [r2, #64]	@ 0x40
 80006b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80006b8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80006bc:	9201      	str	r2, [sp, #4]
 80006be:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <SystemClock_Config+0xa0>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006de:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006e8:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 80006ea:	220c      	movs	r2, #12
 80006ec:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 80006ee:	2260      	movs	r2, #96	@ 0x60
 80006f0:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	a808      	add	r0, sp, #32
 80006fa:	f000 fb1f 	bl	8000d3c <HAL_RCC_OscConfig>
 80006fe:	b988      	cbnz	r0, 8000724 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000710:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000714:	2103      	movs	r1, #3
 8000716:	a803      	add	r0, sp, #12
 8000718:	f000 fd60 	bl	80011dc <HAL_RCC_ClockConfig>
 800071c:	b920      	cbnz	r0, 8000728 <SystemClock_Config+0x98>
}
 800071e:	b015      	add	sp, #84	@ 0x54
 8000720:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000724:	f7ff ff98 	bl	8000658 <Error_Handler>
        Error_Handler();
 8000728:	f7ff ff96 	bl	8000658 <Error_Handler>
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <main>:
{
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_Init();
 8000736:	f000 f957 	bl	80009e8 <HAL_Init>
    SystemClock_Config();
 800073a:	f7ff ffa9 	bl	8000690 <SystemClock_Config>
    MX_GPIO_Init();
 800073e:	f7ff ff17 	bl	8000570 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000742:	f7ff ff8b 	bl	800065c <MX_USART1_UART_Init>
    printf("Starting blackpill_blink3\n");
 8000746:	481f      	ldr	r0, [pc, #124]	@ (80007c4 <main+0x90>)
 8000748:	f001 f8d8 	bl	80018fc <puts>
    uint32_t now = 0, next_blink = 500, next_tick = 1000, loop_cnt = 0;
 800074c:	2500      	movs	r5, #0
 800074e:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 8000752:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8000756:	e01b      	b.n	8000790 <main+0x5c>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075c:	481a      	ldr	r0, [pc, #104]	@ (80007c8 <main+0x94>)
 800075e:	f000 fad5 	bl	8000d0c <HAL_GPIO_TogglePin>
            next_blink = now + blink_delays[blink_delay];
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <main+0x98>)
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <main+0x9c>)
 8000768:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
 800076c:	4426      	add	r6, r4
 800076e:	e014      	b.n	800079a <main+0x66>
            printf("Tick %lu (loop count = %lu)\n", now / 1000, loop_cnt);
 8000770:	4918      	ldr	r1, [pc, #96]	@ (80007d4 <main+0xa0>)
 8000772:	fba1 3104 	umull	r3, r1, r1, r4
 8000776:	462a      	mov	r2, r5
 8000778:	0989      	lsrs	r1, r1, #6
 800077a:	4817      	ldr	r0, [pc, #92]	@ (80007d8 <main+0xa4>)
 800077c:	f001 f856 	bl	800182c <iprintf>
            next_tick = now + 1000;
 8000780:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
            loop_cnt = 0;
 8000784:	2500      	movs	r5, #0
 8000786:	e00a      	b.n	800079e <main+0x6a>
            btn_press = 0;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <main+0xa8>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
        ++loop_cnt;
 800078e:	3501      	adds	r5, #1
        now = HAL_GetTick();
 8000790:	f000 f950 	bl	8000a34 <HAL_GetTick>
 8000794:	4604      	mov	r4, r0
        if (now >= next_blink) {
 8000796:	4286      	cmp	r6, r0
 8000798:	d9de      	bls.n	8000758 <main+0x24>
        if (now >= next_tick) {
 800079a:	42a7      	cmp	r7, r4
 800079c:	d9e8      	bls.n	8000770 <main+0x3c>
        if (btn_press) {
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <main+0xa8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f3      	beq.n	800078e <main+0x5a>
            printf("Button pressed\n");
 80007a6:	480e      	ldr	r0, [pc, #56]	@ (80007e0 <main+0xac>)
 80007a8:	f001 f8a8 	bl	80018fc <puts>
            ++blink_delay;
 80007ac:	4a07      	ldr	r2, [pc, #28]	@ (80007cc <main+0x98>)
 80007ae:	7813      	ldrb	r3, [r2, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7013      	strb	r3, [r2, #0]
            if (blink_delay >= sizeof(blink_delays) / sizeof(blink_delays[0]))
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d9e6      	bls.n	8000788 <main+0x54>
                blink_delay = 0;
 80007ba:	4613      	mov	r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	e7e2      	b.n	8000788 <main+0x54>
 80007c2:	bf00      	nop
 80007c4:	080025dc 	.word	0x080025dc
 80007c8:	40020800 	.word	0x40020800
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	20000000 	.word	0x20000000
 80007d4:	10624dd3 	.word	0x10624dd3
 80007d8:	080025f8 	.word	0x080025f8
 80007dc:	2000008d 	.word	0x2000008d
 80007e0:	08002618 	.word	0x08002618

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2100      	movs	r1, #0
 80007e8:	9100      	str	r1, [sp, #0]
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <HAL_MspInit+0x34>)
 80007ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80007f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007f6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	9101      	str	r1, [sp, #4]
 8000800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000802:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000806:	641a      	str	r2, [r3, #64]	@ 0x40
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	b002      	add	sp, #8
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b500      	push	{lr}
 800081e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	2300      	movs	r3, #0
 8000822:	9303      	str	r3, [sp, #12]
 8000824:	9304      	str	r3, [sp, #16]
 8000826:	9305      	str	r3, [sp, #20]
 8000828:	9306      	str	r3, [sp, #24]
 800082a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800082c:	6802      	ldr	r2, [r0, #0]
 800082e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000832:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000836:	429a      	cmp	r2, r3
 8000838:	d002      	beq.n	8000840 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800083a:	b009      	add	sp, #36	@ 0x24
 800083c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000840:	2100      	movs	r1, #0
 8000842:	9101      	str	r1, [sp, #4]
 8000844:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800084a:	f042 0210 	orr.w	r2, r2, #16
 800084e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000852:	f002 0210 	and.w	r2, r2, #16
 8000856:	9201      	str	r2, [sp, #4]
 8000858:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	9102      	str	r1, [sp, #8]
 800085c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800085e:	f042 0201 	orr.w	r2, r2, #1
 8000862:	631a      	str	r2, [r3, #48]	@ 0x30
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000872:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800087c:	2307      	movs	r3, #7
 800087e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	a903      	add	r1, sp, #12
 8000882:	4802      	ldr	r0, [pc, #8]	@ (800088c <HAL_UART_MspInit+0x70>)
 8000884:	f000 f958 	bl	8000b38 <HAL_GPIO_Init>
}
 8000888:	e7d7      	b.n	800083a <HAL_UART_MspInit+0x1e>
 800088a:	bf00      	nop
 800088c:	40020000 	.word	0x40020000

08000890 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler>

08000892 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler>

08000894 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler>

08000896 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler>

08000898 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler>

0800089a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 f8bb 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bd08      	pop	{r3, pc}

080008a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fa38 	bl	8000d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008b0:	bd08      	pop	{r3, pc}

080008b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b2:	b570      	push	{r4, r5, r6, lr}
 80008b4:	460c      	mov	r4, r1
 80008b6:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	2500      	movs	r5, #0
 80008ba:	e006      	b.n	80008ca <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80008bc:	f3af 8000 	nop.w
 80008c0:	4621      	mov	r1, r4
 80008c2:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80008c8:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	42b5      	cmp	r5, r6
 80008cc:	dbf6      	blt.n	80008bc <_read+0xa>
  }

  return len;
}
 80008ce:	4630      	mov	r0, r6
 80008d0:	bd70      	pop	{r4, r5, r6, pc}

080008d2 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80008d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d6:	4770      	bx	lr

080008d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80008d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008dc:	604b      	str	r3, [r1, #4]
  return 0;
}
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr

080008e2 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80008e2:	2001      	movs	r0, #1
 80008e4:	4770      	bx	lr

080008e6 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80008e6:	2000      	movs	r0, #0
 80008e8:	4770      	bx	lr
	...

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b510      	push	{r4, lr}
 80008ee:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <_sbrk+0x38>)
 80008f2:	490d      	ldr	r1, [pc, #52]	@ (8000928 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <_sbrk+0x40>)
 80008f6:	6800      	ldr	r0, [r0, #0]
 80008f8:	b140      	cbz	r0, 800090c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	480c      	ldr	r0, [pc, #48]	@ (800092c <_sbrk+0x40>)
 80008fc:	6800      	ldr	r0, [r0, #0]
 80008fe:	4403      	add	r3, r0
 8000900:	1a52      	subs	r2, r2, r1
 8000902:	4293      	cmp	r3, r2
 8000904:	d806      	bhi.n	8000914 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <_sbrk+0x40>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800090a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <_sbrk+0x40>)
 800090e:	4c08      	ldr	r4, [pc, #32]	@ (8000930 <_sbrk+0x44>)
 8000910:	6004      	str	r4, [r0, #0]
 8000912:	e7f2      	b.n	80008fa <_sbrk+0xe>
    errno = ENOMEM;
 8000914:	f001 f920 	bl	8001b58 <__errno>
 8000918:	230c      	movs	r3, #12
 800091a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000920:	e7f3      	b.n	800090a <_sbrk+0x1e>
 8000922:	bf00      	nop
 8000924:	20020000 	.word	0x20020000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000d8 	.word	0x200000d8
 8000930:	20000230 	.word	0x20000230

08000934 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4a03      	ldr	r2, [pc, #12]	@ (8000944 <SystemInit+0x10>)
 8000936:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800093a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000980 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800094c:	f7ff fff2 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	@ (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	@ (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f001 f8f5 	bl	8001b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fedb 	bl	8000734 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800098c:	08002684 	.word	0x08002684
  ldr r2, =_sbss
 8000990:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000994:	2000022c 	.word	0x2000022c

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b510      	push	{r4, lr}
 800099e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_InitTick+0x40>)
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80009ac:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <HAL_InitTick+0x44>)
 80009ae:	6810      	ldr	r0, [r2, #0]
 80009b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009b4:	f000 f8ac 	bl	8000b10 <HAL_SYSTICK_Config>
 80009b8:	b968      	cbnz	r0, 80009d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	2c0f      	cmp	r4, #15
 80009bc:	d901      	bls.n	80009c2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
 80009c0:	e00a      	b.n	80009d8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c2:	2200      	movs	r2, #0
 80009c4:	4621      	mov	r1, r4
 80009c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ca:	f000 f88d 	bl	8000ae8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_InitTick+0x48>)
 80009d0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2000      	movs	r0, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80009d6:	2001      	movs	r0, #1
}
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000010 	.word	0x20000010

080009e8 <HAL_Init>:
{
 80009e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_Init+0x30>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f85d 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f7ff ffc6 	bl	800099c <HAL_InitTick>
  HAL_MspInit();
 8000a10:	f7ff fee8 	bl	80007e4 <HAL_MspInit>
}
 8000a14:	2000      	movs	r0, #0
 8000a16:	bd08      	pop	{r3, pc}
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a1c:	4a03      	ldr	r2, [pc, #12]	@ (8000a2c <HAL_IncTick+0x10>)
 8000a1e:	6811      	ldr	r1, [r2, #0]
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <HAL_IncTick+0x14>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	440b      	add	r3, r1
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000dc 	.word	0x200000dc
 8000a30:	2000000c 	.word	0x2000000c

08000a34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a34:	4b01      	ldr	r3, [pc, #4]	@ (8000a3c <HAL_GetTick+0x8>)
 8000a36:	6818      	ldr	r0, [r3, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200000dc 	.word	0x200000dc

08000a40 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000a40:	2800      	cmp	r0, #0
 8000a42:	db07      	blt.n	8000a54 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a44:	f000 021f 	and.w	r2, r0, #31
 8000a48:	0940      	lsrs	r0, r0, #5
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	4a02      	ldr	r2, [pc, #8]	@ (8000a58 <__NVIC_EnableIRQ+0x18>)
 8000a50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	db08      	blt.n	8000a72 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	0109      	lsls	r1, r1, #4
 8000a62:	b2c9      	uxtb	r1, r1
 8000a64:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000a68:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000a6c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000a70:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	f000 000f 	and.w	r0, r0, #15
 8000a76:	0109      	lsls	r1, r1, #4
 8000a78:	b2c9      	uxtb	r1, r1
 8000a7a:	4b01      	ldr	r3, [pc, #4]	@ (8000a80 <__NVIC_SetPriority+0x24>)
 8000a7c:	5419      	strb	r1, [r3, r0]
  }
}
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed14 	.word	0xe000ed14

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a86:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8a:	f1c0 0c07 	rsb	ip, r0, #7
 8000a8e:	f1bc 0f04 	cmp.w	ip, #4
 8000a92:	bf28      	it	cs
 8000a94:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a98:	1d03      	adds	r3, r0, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d90f      	bls.n	8000abe <NVIC_EncodePriority+0x3a>
 8000a9e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000aa4:	fa0e f00c 	lsl.w	r0, lr, ip
 8000aa8:	ea21 0100 	bic.w	r1, r1, r0
 8000aac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aae:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ab2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000ab6:	ea41 0002 	orr.w	r0, r1, r2
 8000aba:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e7ee      	b.n	8000aa0 <NVIC_EncodePriority+0x1c>
	...

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ac6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	0200      	lsls	r0, r0, #8
 8000ad2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000ae0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_NVIC_SetPriority+0x1c>)
 8000aee:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000af4:	f7ff ffc6 	bl	8000a84 <NVIC_EncodePriority>
 8000af8:	4601      	mov	r1, r0
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff ffae 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0a:	f7ff ff99 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000b0e:	bd08      	pop	{r3, pc}

08000b10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	3801      	subs	r0, #1
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d20b      	bcs.n	8000b30 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b1c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <HAL_SYSTICK_Config+0x24>)
 8000b20:	21f0      	movs	r1, #240	@ 0xf0
 8000b22:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b26:	2000      	movs	r0, #0
 8000b28:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b30:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	f200 80d7 	bhi.w	8000cee <HAL_GPIO_Init+0x1b6>
{
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	e065      	b.n	8000c12 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b46:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b48:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b4c:	2403      	movs	r4, #3
 8000b4e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b52:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b56:	68cc      	ldr	r4, [r1, #12]
 8000b58:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b5c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000b5e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b60:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b62:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b66:	684a      	ldr	r2, [r1, #4]
 8000b68:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000b70:	6042      	str	r2, [r0, #4]
 8000b72:	e05c      	b.n	8000c2e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b74:	08dc      	lsrs	r4, r3, #3
 8000b76:	3408      	adds	r4, #8
 8000b78:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b7c:	f003 0507 	and.w	r5, r3, #7
 8000b80:	00ad      	lsls	r5, r5, #2
 8000b82:	f04f 0e0f 	mov.w	lr, #15
 8000b86:	fa0e fe05 	lsl.w	lr, lr, r5
 8000b8a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b8e:	690a      	ldr	r2, [r1, #16]
 8000b90:	40aa      	lsls	r2, r5
 8000b92:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b96:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000b9a:	e05c      	b.n	8000c56 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x6a>
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ba6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba8:	3402      	adds	r4, #2
 8000baa:	4d51      	ldr	r5, [pc, #324]	@ (8000cf0 <HAL_GPIO_Init+0x1b8>)
 8000bac:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb0:	4a50      	ldr	r2, [pc, #320]	@ (8000cf4 <HAL_GPIO_Init+0x1bc>)
 8000bb2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	ea6f 020c 	mvn.w	r2, ip
 8000bb8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bbc:	684e      	ldr	r6, [r1, #4]
 8000bbe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000bc2:	d001      	beq.n	8000bc8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000bc4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000bc8:	4c4a      	ldr	r4, [pc, #296]	@ (8000cf4 <HAL_GPIO_Init+0x1bc>)
 8000bca:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000bcc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bce:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bd2:	684e      	ldr	r6, [r1, #4]
 8000bd4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000bd8:	d001      	beq.n	8000bde <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000bda:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000bde:	4c45      	ldr	r4, [pc, #276]	@ (8000cf4 <HAL_GPIO_Init+0x1bc>)
 8000be0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000be2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000be4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000be8:	684e      	ldr	r6, [r1, #4]
 8000bea:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000bee:	d001      	beq.n	8000bf4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000bf0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000bf4:	4c3f      	ldr	r4, [pc, #252]	@ (8000cf4 <HAL_GPIO_Init+0x1bc>)
 8000bf6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bf8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bfc:	684d      	ldr	r5, [r1, #4]
 8000bfe:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000c02:	d001      	beq.n	8000c08 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000c04:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000c08:	4c3a      	ldr	r4, [pc, #232]	@ (8000cf4 <HAL_GPIO_Init+0x1bc>)
 8000c0a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	d86b      	bhi.n	8000cea <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000c12:	2201      	movs	r2, #1
 8000c14:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	680c      	ldr	r4, [r1, #0]
 8000c18:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c1c:	ea32 0404 	bics.w	r4, r2, r4
 8000c20:	d1f4      	bne.n	8000c0c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	684c      	ldr	r4, [r1, #4]
 8000c24:	f004 0403 	and.w	r4, r4, #3
 8000c28:	3c01      	subs	r4, #1
 8000c2a:	2c01      	cmp	r4, #1
 8000c2c:	d98b      	bls.n	8000b46 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2e:	684a      	ldr	r2, [r1, #4]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	2a03      	cmp	r2, #3
 8000c36:	d009      	beq.n	8000c4c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000c38:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3a:	005d      	lsls	r5, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	40aa      	lsls	r2, r5
 8000c40:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c44:	688a      	ldr	r2, [r1, #8]
 8000c46:	40aa      	lsls	r2, r5
 8000c48:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000c4a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	f002 0203 	and.w	r2, r2, #3
 8000c52:	2a02      	cmp	r2, #2
 8000c54:	d08e      	beq.n	8000b74 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000c56:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c58:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c62:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c66:	684a      	ldr	r2, [r1, #4]
 8000c68:	f002 0203 	and.w	r2, r2, #3
 8000c6c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c70:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000c72:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c74:	684a      	ldr	r2, [r1, #4]
 8000c76:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000c7a:	d0c7      	beq.n	8000c0c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	9201      	str	r2, [sp, #4]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf8 <HAL_GPIO_Init+0x1c0>)
 8000c82:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000c84:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000c88:	6454      	str	r4, [r2, #68]	@ 0x44
 8000c8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000c8c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000c90:	9201      	str	r2, [sp, #4]
 8000c92:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c94:	089c      	lsrs	r4, r3, #2
 8000c96:	1ca5      	adds	r5, r4, #2
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <HAL_GPIO_Init+0x1b8>)
 8000c9a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c9e:	f003 0e03 	and.w	lr, r3, #3
 8000ca2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cac:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb0:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <HAL_GPIO_Init+0x1c4>)
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f43f af74 	beq.w	8000ba0 <HAL_GPIO_Init+0x68>
 8000cb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d00e      	beq.n	8000cde <HAL_GPIO_Init+0x1a6>
 8000cc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d00c      	beq.n	8000ce2 <HAL_GPIO_Init+0x1aa>
 8000cc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d00a      	beq.n	8000ce6 <HAL_GPIO_Init+0x1ae>
 8000cd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f43f af61 	beq.w	8000b9c <HAL_GPIO_Init+0x64>
 8000cda:	2207      	movs	r2, #7
 8000cdc:	e761      	b.n	8000ba2 <HAL_GPIO_Init+0x6a>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	e75f      	b.n	8000ba2 <HAL_GPIO_Init+0x6a>
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	e75d      	b.n	8000ba2 <HAL_GPIO_Init+0x6a>
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	e75b      	b.n	8000ba2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000cea:	b002      	add	sp, #8
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	4770      	bx	lr
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40013c00 	.word	0x40013c00
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d00:	b10a      	cbz	r2, 8000d06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	6181      	str	r1, [r0, #24]
 8000d04:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d06:	0409      	lsls	r1, r1, #16
 8000d08:	6181      	str	r1, [r0, #24]
  }
}
 8000d0a:	4770      	bx	lr

08000d0c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d0c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0e:	ea01 0203 	and.w	r2, r1, r3
 8000d12:	ea21 0103 	bic.w	r1, r1, r3
 8000d16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d1a:	6181      	str	r1, [r0, #24]
}
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d20:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4203      	tst	r3, r0
 8000d28:	d100      	bne.n	8000d2c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000d2a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d2c:	4b02      	ldr	r3, [pc, #8]	@ (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000d2e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d30:	f7ff fc88 	bl	8000644 <HAL_GPIO_EXTI_Callback>
}
 8000d34:	e7f9      	b.n	8000d2a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000d36:	bf00      	nop
 8000d38:	40013c00 	.word	0x40013c00

08000d3c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	f000 81e0 	beq.w	8001102 <HAL_RCC_OscConfig+0x3c6>
{
 8000d42:	b570      	push	{r4, r5, r6, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d48:	6803      	ldr	r3, [r0, #0]
 8000d4a:	f013 0f01 	tst.w	r3, #1
 8000d4e:	d03b      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d50:	4b9f      	ldr	r3, [pc, #636]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d02c      	beq.n	8000db6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d021      	beq.n	8000dac <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d6e:	d04f      	beq.n	8000e10 <HAL_RCC_OscConfig+0xd4>
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d74:	d052      	beq.n	8000e1c <HAL_RCC_OscConfig+0xe0>
 8000d76:	4b96      	ldr	r3, [pc, #600]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d050      	beq.n	8000e30 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fe51 	bl	8000a34 <HAL_GetTick>
 8000d92:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d94:	4b8e      	ldr	r3, [pc, #568]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d9c:	d114      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fe49 	bl	8000a34 <HAL_GetTick>
 8000da2:	1b40      	subs	r0, r0, r5
 8000da4:	2864      	cmp	r0, #100	@ 0x64
 8000da6:	d9f5      	bls.n	8000d94 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000da8:	2003      	movs	r0, #3
 8000daa:	e1b1      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dac:	4b88      	ldr	r3, [pc, #544]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000db4:	d0d8      	beq.n	8000d68 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	4b86      	ldr	r3, [pc, #536]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000dbe:	d003      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x8c>
 8000dc0:	6863      	ldr	r3, [r4, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 819f 	beq.w	8001106 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f013 0f02 	tst.w	r3, #2
 8000dce:	d054      	beq.n	8000e7a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000dd0:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f013 0f0c 	tst.w	r3, #12
 8000dd8:	d03e      	beq.n	8000e58 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dda:	4b7d      	ldr	r3, [pc, #500]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d033      	beq.n	8000e4e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000de6:	68e3      	ldr	r3, [r4, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d068      	beq.n	8000ebe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dec:	4b79      	ldr	r3, [pc, #484]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df2:	f7ff fe1f 	bl	8000a34 <HAL_GetTick>
 8000df6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	4b75      	ldr	r3, [pc, #468]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f013 0f02 	tst.w	r3, #2
 8000e00:	d154      	bne.n	8000eac <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e02:	f7ff fe17 	bl	8000a34 <HAL_GetTick>
 8000e06:	1b40      	subs	r0, r0, r5
 8000e08:	2802      	cmp	r0, #2
 8000e0a:	d9f5      	bls.n	8000df8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	e17f      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e10:	4a6f      	ldr	r2, [pc, #444]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e7b5      	b.n	8000d88 <HAL_RCC_OscConfig+0x4c>
 8000e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e7ab      	b.n	8000d88 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000e30:	f7ff fe00 	bl	8000a34 <HAL_GetTick>
 8000e34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	4b66      	ldr	r3, [pc, #408]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e3e:	d0c3      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fdf8 	bl	8000a34 <HAL_GetTick>
 8000e44:	1b40      	subs	r0, r0, r5
 8000e46:	2864      	cmp	r0, #100	@ 0x64
 8000e48:	d9f5      	bls.n	8000e36 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e160      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e4e:	4b60      	ldr	r3, [pc, #384]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e56:	d1c6      	bne.n	8000de6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e58:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f013 0f02 	tst.w	r3, #2
 8000e60:	d003      	beq.n	8000e6a <HAL_RCC_OscConfig+0x12e>
 8000e62:	68e3      	ldr	r3, [r4, #12]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	f040 8150 	bne.w	800110a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4a59      	ldr	r2, [pc, #356]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e72:	6921      	ldr	r1, [r4, #16]
 8000e74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e78:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f013 0f08 	tst.w	r3, #8
 8000e80:	d042      	beq.n	8000f08 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e82:	6963      	ldr	r3, [r4, #20]
 8000e84:	b36b      	cbz	r3, 8000ee2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b53      	ldr	r3, [pc, #332]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fdd1 	bl	8000a34 <HAL_GetTick>
 8000e92:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e94:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e98:	f013 0f02 	tst.w	r3, #2
 8000e9c:	d134      	bne.n	8000f08 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fdc9 	bl	8000a34 <HAL_GetTick>
 8000ea2:	1b40      	subs	r0, r0, r5
 8000ea4:	2802      	cmp	r0, #2
 8000ea6:	d9f5      	bls.n	8000e94 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	e131      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	4a48      	ldr	r2, [pc, #288]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000eb4:	6921      	ldr	r1, [r4, #16]
 8000eb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e7dd      	b.n	8000e7a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000ebe:	4b45      	ldr	r3, [pc, #276]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fdb6 	bl	8000a34 <HAL_GetTick>
 8000ec8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b41      	ldr	r3, [pc, #260]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f013 0f02 	tst.w	r3, #2
 8000ed2:	d0d2      	beq.n	8000e7a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fdae 	bl	8000a34 <HAL_GetTick>
 8000ed8:	1b40      	subs	r0, r0, r5
 8000eda:	2802      	cmp	r0, #2
 8000edc:	d9f5      	bls.n	8000eca <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000ede:	2003      	movs	r0, #3
 8000ee0:	e116      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fda3 	bl	8000a34 <HAL_GetTick>
 8000eee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ef4:	f013 0f02 	tst.w	r3, #2
 8000ef8:	d006      	beq.n	8000f08 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fd9b 	bl	8000a34 <HAL_GetTick>
 8000efe:	1b40      	subs	r0, r0, r5
 8000f00:	2802      	cmp	r0, #2
 8000f02:	d9f5      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000f04:	2003      	movs	r0, #3
 8000f06:	e103      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	f013 0f04 	tst.w	r3, #4
 8000f0e:	d077      	beq.n	8001000 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000f18:	d133      	bne.n	8000f82 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f26:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f32:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f3c:	d023      	beq.n	8000f86 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3e:	68a3      	ldr	r3, [r4, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d034      	beq.n	8000fae <HAL_RCC_OscConfig+0x272>
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d038      	beq.n	8000fba <HAL_RCC_OscConfig+0x27e>
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000f4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f54:	f022 0204 	bic.w	r2, r2, #4
 8000f58:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f5a:	68a3      	ldr	r3, [r4, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d03d      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f60:	f7ff fd68 	bl	8000a34 <HAL_GetTick>
 8000f64:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f6a:	f013 0f02 	tst.w	r3, #2
 8000f6e:	d146      	bne.n	8000ffe <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f70:	f7ff fd60 	bl	8000a34 <HAL_GetTick>
 8000f74:	1b80      	subs	r0, r0, r6
 8000f76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f7a:	4298      	cmp	r0, r3
 8000f7c:	d9f3      	bls.n	8000f66 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000f7e:	2003      	movs	r0, #3
 8000f80:	e0c6      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000f82:	2500      	movs	r5, #0
 8000f84:	e7d6      	b.n	8000f34 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f86:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f90:	f7ff fd50 	bl	8000a34 <HAL_GetTick>
 8000f94:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f9e:	d1ce      	bne.n	8000f3e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa0:	f7ff fd48 	bl	8000a34 <HAL_GetTick>
 8000fa4:	1b80      	subs	r0, r0, r6
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9f5      	bls.n	8000f96 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000faa:	2003      	movs	r0, #3
 8000fac:	e0b0      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fae:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000fb0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fb8:	e7cf      	b.n	8000f5a <HAL_RCC_OscConfig+0x21e>
 8000fba:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <HAL_RCC_OscConfig+0x294>)
 8000fbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000fbe:	f042 0204 	orr.w	r2, r2, #4
 8000fc2:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fcc:	e7c5      	b.n	8000f5a <HAL_RCC_OscConfig+0x21e>
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	42470000 	.word	0x42470000
 8000fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fd2a 	bl	8000a34 <HAL_GetTick>
 8000fe0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe2:	4b52      	ldr	r3, [pc, #328]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe6:	f013 0f02 	tst.w	r3, #2
 8000fea:	d008      	beq.n	8000ffe <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fec:	f7ff fd22 	bl	8000a34 <HAL_GetTick>
 8000ff0:	1b80      	subs	r0, r0, r6
 8000ff2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	d9f3      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	e088      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000ffe:	b9ed      	cbnz	r5, 800103c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001000:	69a3      	ldr	r3, [r4, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8083 	beq.w	800110e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001008:	4a48      	ldr	r2, [pc, #288]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 800100a:	6892      	ldr	r2, [r2, #8]
 800100c:	f002 020c 	and.w	r2, r2, #12
 8001010:	2a08      	cmp	r2, #8
 8001012:	d051      	beq.n	80010b8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001014:	2b02      	cmp	r3, #2
 8001016:	d017      	beq.n	8001048 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001018:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <HAL_RCC_OscConfig+0x3f4>)
 800101a:	2200      	movs	r2, #0
 800101c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fd09 	bl	8000a34 <HAL_GetTick>
 8001022:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001024:	4b41      	ldr	r3, [pc, #260]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800102c:	d042      	beq.n	80010b4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fd01 	bl	8000a34 <HAL_GetTick>
 8001032:	1b00      	subs	r0, r0, r4
 8001034:	2802      	cmp	r0, #2
 8001036:	d9f5      	bls.n	8001024 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001038:	2003      	movs	r0, #3
 800103a:	e069      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800103c:	4a3b      	ldr	r2, [pc, #236]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 800103e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	e7db      	b.n	8001000 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001048:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <HAL_RCC_OscConfig+0x3f4>)
 800104a:	2200      	movs	r2, #0
 800104c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800104e:	f7ff fcf1 	bl	8000a34 <HAL_GetTick>
 8001052:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001054:	4b35      	ldr	r3, [pc, #212]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800105c:	d006      	beq.n	800106c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff fce9 	bl	8000a34 <HAL_GetTick>
 8001062:	1b40      	subs	r0, r0, r5
 8001064:	2802      	cmp	r0, #2
 8001066:	d9f5      	bls.n	8001054 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001068:	2003      	movs	r0, #3
 800106a:	e051      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800106c:	69e3      	ldr	r3, [r4, #28]
 800106e:	6a22      	ldr	r2, [r4, #32]
 8001070:	4313      	orrs	r3, r2
 8001072:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001074:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001078:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800107a:	0852      	lsrs	r2, r2, #1
 800107c:	3a01      	subs	r2, #1
 800107e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001082:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001084:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001088:	4a28      	ldr	r2, [pc, #160]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 800108a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <HAL_RCC_OscConfig+0x3f4>)
 800108e:	2201      	movs	r2, #1
 8001090:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001092:	f7ff fccf 	bl	8000a34 <HAL_GetTick>
 8001096:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001098:	4b24      	ldr	r3, [pc, #144]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a2:	f7ff fcc7 	bl	8000a34 <HAL_GetTick>
 80010a6:	1b00      	subs	r0, r0, r4
 80010a8:	2802      	cmp	r0, #2
 80010aa:	d9f5      	bls.n	8001098 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80010ac:	2003      	movs	r0, #3
 80010ae:	e02f      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80010b0:	2000      	movs	r0, #0
 80010b2:	e02d      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
 80010b4:	2000      	movs	r0, #0
 80010b6:	e02b      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d02b      	beq.n	8001114 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_RCC_OscConfig+0x3f0>)
 80010be:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80010c4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010c6:	4291      	cmp	r1, r2
 80010c8:	d126      	bne.n	8001118 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80010ce:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d123      	bne.n	800111c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010d6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80010da:	401a      	ands	r2, r3
 80010dc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80010e0:	d11e      	bne.n	8001120 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010e2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80010e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80010e8:	0852      	lsrs	r2, r2, #1
 80010ea:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ec:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80010f0:	d118      	bne.n	8001124 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010f2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80010f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80010fc:	d114      	bne.n	8001128 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80010fe:	2000      	movs	r0, #0
 8001100:	e006      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001102:	2001      	movs	r0, #1
}
 8001104:	4770      	bx	lr
        return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e002      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800110a:	2001      	movs	r0, #1
 800110c:	e000      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800110e:	2000      	movs	r0, #0
}
 8001110:	b002      	add	sp, #8
 8001112:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e7fb      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001118:	2001      	movs	r0, #1
 800111a:	e7f9      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
 800111c:	2001      	movs	r0, #1
 800111e:	e7f7      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
 8001120:	2001      	movs	r0, #1
 8001122:	e7f5      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
 8001124:	2001      	movs	r0, #1
 8001126:	e7f3      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
 8001128:	2001      	movs	r0, #1
 800112a:	e7f1      	b.n	8001110 <HAL_RCC_OscConfig+0x3d4>
 800112c:	40023800 	.word	0x40023800
 8001130:	42470000 	.word	0x42470000

08001134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001134:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d041      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x92>
 8001142:	2b08      	cmp	r3, #8
 8001144:	d141      	bne.n	80011ca <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001146:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001154:	d012      	beq.n	800117c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001156:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001158:	6859      	ldr	r1, [r3, #4]
 800115a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800115e:	481d      	ldr	r0, [pc, #116]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001160:	2300      	movs	r3, #0
 8001162:	fba1 0100 	umull	r0, r1, r1, r0
 8001166:	f7ff f88b 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001172:	3301      	adds	r3, #1
 8001174:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001176:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800117a:	e027      	b.n	80011cc <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800117e:	6858      	ldr	r0, [r3, #4]
 8001180:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001184:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001188:	ebbc 0c00 	subs.w	ip, ip, r0
 800118c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001190:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001194:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001198:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800119c:	ebb1 010c 	subs.w	r1, r1, ip
 80011a0:	eb63 030e 	sbc.w	r3, r3, lr
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011aa:	00c9      	lsls	r1, r1, #3
 80011ac:	eb11 0c00 	adds.w	ip, r1, r0
 80011b0:	f143 0300 	adc.w	r3, r3, #0
 80011b4:	0299      	lsls	r1, r3, #10
 80011b6:	2300      	movs	r3, #0
 80011b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80011bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80011c0:	f7ff f85e 	bl	8000280 <__aeabi_uldivmod>
 80011c4:	e7d1      	b.n	800116a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011c8:	e000      	b.n	80011cc <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ca:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011cc:	bd08      	pop	{r3, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	017d7840 	.word	0x017d7840
 80011d8:	00f42400 	.word	0x00f42400

080011dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011dc:	2800      	cmp	r0, #0
 80011de:	f000 809b 	beq.w	8001318 <HAL_RCC_ClockConfig+0x13c>
{
 80011e2:	b570      	push	{r4, r5, r6, lr}
 80011e4:	460d      	mov	r5, r1
 80011e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001328 <HAL_RCC_ClockConfig+0x14c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d208      	bcs.n	8001206 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f4:	b2cb      	uxtb	r3, r1
 80011f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_RCC_ClockConfig+0x14c>)
 80011f8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	428b      	cmp	r3, r1
 8001202:	f040 808b 	bne.w	800131c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f013 0f02 	tst.w	r3, #2
 800120c:	d017      	beq.n	800123e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120e:	f013 0f04 	tst.w	r3, #4
 8001212:	d004      	beq.n	800121e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4a45      	ldr	r2, [pc, #276]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 8001216:	6893      	ldr	r3, [r2, #8]
 8001218:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800121c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	f013 0f08 	tst.w	r3, #8
 8001224:	d004      	beq.n	8001230 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001226:	4a41      	ldr	r2, [pc, #260]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 8001228:	6893      	ldr	r3, [r2, #8]
 800122a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800122e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001230:	4a3e      	ldr	r2, [pc, #248]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 8001232:	6893      	ldr	r3, [r2, #8]
 8001234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001238:	68a1      	ldr	r1, [r4, #8]
 800123a:	430b      	orrs	r3, r1
 800123c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	f013 0f01 	tst.w	r3, #1
 8001244:	d032      	beq.n	80012ac <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	6863      	ldr	r3, [r4, #4]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d021      	beq.n	8001290 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124c:	1e9a      	subs	r2, r3, #2
 800124e:	2a01      	cmp	r2, #1
 8001250:	d925      	bls.n	800129e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4a36      	ldr	r2, [pc, #216]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	f012 0f02 	tst.w	r2, #2
 800125a:	d061      	beq.n	8001320 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125c:	4933      	ldr	r1, [pc, #204]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 800125e:	688a      	ldr	r2, [r1, #8]
 8001260:	f022 0203 	bic.w	r2, r2, #3
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001268:	f7ff fbe4 	bl	8000a34 <HAL_GetTick>
 800126c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	6862      	ldr	r2, [r4, #4]
 8001278:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800127c:	d016      	beq.n	80012ac <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127e:	f7ff fbd9 	bl	8000a34 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001288:	4298      	cmp	r0, r3
 800128a:	d9f0      	bls.n	800126e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800128c:	2003      	movs	r0, #3
 800128e:	e042      	b.n	8001316 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001290:	4a26      	ldr	r2, [pc, #152]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001298:	d1e0      	bne.n	800125c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
 800129c:	e03b      	b.n	8001316 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129e:	4a23      	ldr	r2, [pc, #140]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80012a6:	d1d9      	bne.n	800125c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012a8:	2001      	movs	r0, #1
 80012aa:	e034      	b.n	8001316 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <HAL_RCC_ClockConfig+0x14c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	42ab      	cmp	r3, r5
 80012b6:	d907      	bls.n	80012c8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b8:	b2ea      	uxtb	r2, r5
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_RCC_ClockConfig+0x14c>)
 80012bc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	42ab      	cmp	r3, r5
 80012c6:	d12d      	bne.n	8001324 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	f013 0f04 	tst.w	r3, #4
 80012ce:	d006      	beq.n	80012de <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d0:	4a16      	ldr	r2, [pc, #88]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 80012d2:	6893      	ldr	r3, [r2, #8]
 80012d4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80012d8:	68e1      	ldr	r1, [r4, #12]
 80012da:	430b      	orrs	r3, r1
 80012dc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	f013 0f08 	tst.w	r3, #8
 80012e4:	d007      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e6:	4a11      	ldr	r2, [pc, #68]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 80012e8:	6893      	ldr	r3, [r2, #8]
 80012ea:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80012ee:	6921      	ldr	r1, [r4, #16]
 80012f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012f6:	f7ff ff1d 	bl	8001134 <HAL_RCC_GetSysClockFreq>
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_RCC_ClockConfig+0x150>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_RCC_ClockConfig+0x154>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	40d8      	lsrs	r0, r3
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_RCC_ClockConfig+0x158>)
 800130a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_RCC_ClockConfig+0x15c>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f7ff fb44 	bl	800099c <HAL_InitTick>
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
}
 8001316:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001318:	2001      	movs	r0, #1
}
 800131a:	4770      	bx	lr
      return HAL_ERROR;
 800131c:	2001      	movs	r0, #1
 800131e:	e7fa      	b.n	8001316 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	e7f8      	b.n	8001316 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
 8001326:	e7f6      	b.n	8001316 <HAL_RCC_ClockConfig+0x13a>
 8001328:	40023c00 	.word	0x40023c00
 800132c:	40023800 	.word	0x40023800
 8001330:	08002630 	.word	0x08002630
 8001334:	20000008 	.word	0x20000008
 8001338:	20000010 	.word	0x20000010

0800133c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800133c:	4b01      	ldr	r3, [pc, #4]	@ (8001344 <HAL_RCC_GetHCLKFreq+0x8>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800134a:	f7ff fff7 	bl	800133c <HAL_RCC_GetHCLKFreq>
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001356:	4a03      	ldr	r2, [pc, #12]	@ (8001364 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
}
 800135a:	40d8      	lsrs	r0, r3
 800135c:	bd08      	pop	{r3, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	08002628 	.word	0x08002628

08001368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001368:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800136a:	f7ff ffe7 	bl	800133c <HAL_RCC_GetHCLKFreq>
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001376:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
}
 800137a:	40d8      	lsrs	r0, r3
 800137c:	bd08      	pop	{r3, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	08002628 	.word	0x08002628

08001388 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001388:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800138a:	f102 030c 	add.w	r3, r2, #12
 800138e:	e853 3f00 	ldrex	r3, [r3]
 8001392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001396:	320c      	adds	r2, #12
 8001398:	e842 3100 	strex	r1, r3, [r2]
 800139c:	2900      	cmp	r1, #0
 800139e:	d1f3      	bne.n	8001388 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013a2:	f102 0314 	add.w	r3, r2, #20
 80013a6:	e853 3f00 	ldrex	r3, [r3]
 80013aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013ae:	3214      	adds	r2, #20
 80013b0:	e842 3100 	strex	r1, r3, [r2]
 80013b4:	2900      	cmp	r1, #0
 80013b6:	d1f3      	bne.n	80013a0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d005      	beq.n	80013ca <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013be:	2320      	movs	r3, #32
 80013c0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013c4:	2300      	movs	r3, #0
 80013c6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80013c8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013cc:	f102 030c 	add.w	r3, r2, #12
 80013d0:	e853 3f00 	ldrex	r3, [r3]
 80013d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013d8:	320c      	adds	r2, #12
 80013da:	e842 3100 	strex	r1, r3, [r2]
 80013de:	2900      	cmp	r1, #0
 80013e0:	d1f3      	bne.n	80013ca <UART_EndRxTransfer+0x42>
 80013e2:	e7ec      	b.n	80013be <UART_EndRxTransfer+0x36>

080013e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013e4:	b510      	push	{r4, lr}
 80013e6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	6913      	ldr	r3, [r2, #16]
 80013ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013f0:	68c1      	ldr	r1, [r0, #12]
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013f6:	6883      	ldr	r3, [r0, #8]
 80013f8:	6902      	ldr	r2, [r0, #16]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	6943      	ldr	r3, [r0, #20]
 80013fe:	431a      	orrs	r2, r3
 8001400:	69c3      	ldr	r3, [r0, #28]
 8001402:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001404:	6801      	ldr	r1, [r0, #0]
 8001406:	68cb      	ldr	r3, [r1, #12]
 8001408:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800140c:	f023 030c 	bic.w	r3, r3, #12
 8001410:	4313      	orrs	r3, r2
 8001412:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001414:	6802      	ldr	r2, [r0, #0]
 8001416:	6953      	ldr	r3, [r2, #20]
 8001418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800141c:	6981      	ldr	r1, [r0, #24]
 800141e:	430b      	orrs	r3, r1
 8001420:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001422:	6803      	ldr	r3, [r0, #0]
 8001424:	4a31      	ldr	r2, [pc, #196]	@ (80014ec <UART_SetConfig+0x108>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d006      	beq.n	8001438 <UART_SetConfig+0x54>
 800142a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800142e:	4293      	cmp	r3, r2
 8001430:	d002      	beq.n	8001438 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001432:	f7ff ff89 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8001436:	e001      	b.n	800143c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001438:	f7ff ff96 	bl	8001368 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800143c:	69e3      	ldr	r3, [r4, #28]
 800143e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001442:	d029      	beq.n	8001498 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001444:	2100      	movs	r1, #0
 8001446:	1803      	adds	r3, r0, r0
 8001448:	4149      	adcs	r1, r1
 800144a:	181b      	adds	r3, r3, r0
 800144c:	f141 0100 	adc.w	r1, r1, #0
 8001450:	00c9      	lsls	r1, r1, #3
 8001452:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	1818      	adds	r0, r3, r0
 800145a:	6863      	ldr	r3, [r4, #4]
 800145c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001460:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001464:	f141 0100 	adc.w	r1, r1, #0
 8001468:	f7fe ff0a 	bl	8000280 <__aeabi_uldivmod>
 800146c:	4a20      	ldr	r2, [pc, #128]	@ (80014f0 <UART_SetConfig+0x10c>)
 800146e:	fba2 3100 	umull	r3, r1, r2, r0
 8001472:	0949      	lsrs	r1, r1, #5
 8001474:	2364      	movs	r3, #100	@ 0x64
 8001476:	fb03 0311 	mls	r3, r3, r1, r0
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	3332      	adds	r3, #50	@ 0x32
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001488:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	6821      	ldr	r1, [r4, #0]
 8001492:	4413      	add	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }
}
 8001496:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001498:	2300      	movs	r3, #0
 800149a:	1802      	adds	r2, r0, r0
 800149c:	eb43 0103 	adc.w	r1, r3, r3
 80014a0:	1812      	adds	r2, r2, r0
 80014a2:	f141 0100 	adc.w	r1, r1, #0
 80014a6:	00c9      	lsls	r1, r1, #3
 80014a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	1810      	adds	r0, r2, r0
 80014b0:	f141 0100 	adc.w	r1, r1, #0
 80014b4:	6862      	ldr	r2, [r4, #4]
 80014b6:	1892      	adds	r2, r2, r2
 80014b8:	415b      	adcs	r3, r3
 80014ba:	f7fe fee1 	bl	8000280 <__aeabi_uldivmod>
 80014be:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <UART_SetConfig+0x10c>)
 80014c0:	fba2 3100 	umull	r3, r1, r2, r0
 80014c4:	0949      	lsrs	r1, r1, #5
 80014c6:	2364      	movs	r3, #100	@ 0x64
 80014c8:	fb03 0311 	mls	r3, r3, r1, r0
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	3332      	adds	r3, #50	@ 0x32
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	095b      	lsrs	r3, r3, #5
 80014d6:	005a      	lsls	r2, r3, #1
 80014d8:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80014dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	6821      	ldr	r1, [r4, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
 80014ea:	e7d4      	b.n	8001496 <UART_SetConfig+0xb2>
 80014ec:	40011000 	.word	0x40011000
 80014f0:	51eb851f 	.word	0x51eb851f

080014f4 <UART_WaitOnFlagUntilTimeout>:
{
 80014f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f8:	b083      	sub	sp, #12
 80014fa:	4605      	mov	r5, r0
 80014fc:	460e      	mov	r6, r1
 80014fe:	4617      	mov	r7, r2
 8001500:	4699      	mov	r9, r3
 8001502:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	681c      	ldr	r4, [r3, #0]
 800150a:	ea36 0404 	bics.w	r4, r6, r4
 800150e:	bf0c      	ite	eq
 8001510:	2401      	moveq	r4, #1
 8001512:	2400      	movne	r4, #0
 8001514:	42bc      	cmp	r4, r7
 8001516:	d128      	bne.n	800156a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001518:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800151c:	d0f3      	beq.n	8001506 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151e:	f7ff fa89 	bl	8000a34 <HAL_GetTick>
 8001522:	eba0 0009 	sub.w	r0, r0, r9
 8001526:	4540      	cmp	r0, r8
 8001528:	d823      	bhi.n	8001572 <UART_WaitOnFlagUntilTimeout+0x7e>
 800152a:	f1b8 0f00 	cmp.w	r8, #0
 800152e:	d022      	beq.n	8001576 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	f012 0f04 	tst.w	r2, #4
 8001538:	d0e5      	beq.n	8001506 <UART_WaitOnFlagUntilTimeout+0x12>
 800153a:	2e80      	cmp	r6, #128	@ 0x80
 800153c:	d0e3      	beq.n	8001506 <UART_WaitOnFlagUntilTimeout+0x12>
 800153e:	2e40      	cmp	r6, #64	@ 0x40
 8001540:	d0e1      	beq.n	8001506 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f012 0f08 	tst.w	r2, #8
 8001548:	d0dd      	beq.n	8001506 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800154a:	2400      	movs	r4, #0
 800154c:	9401      	str	r4, [sp, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001558:	4628      	mov	r0, r5
 800155a:	f7ff ff15 	bl	8001388 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800155e:	2308      	movs	r3, #8
 8001560:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001562:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
 8001568:	e000      	b.n	800156c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800156a:	2000      	movs	r0, #0
}
 800156c:	b003      	add	sp, #12
 800156e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001572:	2003      	movs	r0, #3
 8001574:	e7fa      	b.n	800156c <UART_WaitOnFlagUntilTimeout+0x78>
 8001576:	2003      	movs	r0, #3
 8001578:	e7f8      	b.n	800156c <UART_WaitOnFlagUntilTimeout+0x78>

0800157a <HAL_UART_Init>:
  if (huart == NULL)
 800157a:	b360      	cbz	r0, 80015d6 <HAL_UART_Init+0x5c>
{
 800157c:	b510      	push	{r4, lr}
 800157e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001580:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001584:	b313      	cbz	r3, 80015cc <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001586:	2324      	movs	r3, #36	@ 0x24
 8001588:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	68d3      	ldr	r3, [r2, #12]
 8001590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001594:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff ff24 	bl	80013e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	6913      	ldr	r3, [r2, #16]
 80015a0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80015a4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	6953      	ldr	r3, [r2, #20]
 80015aa:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80015ae:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	68d3      	ldr	r3, [r2, #12]
 80015b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ba:	2000      	movs	r0, #0
 80015bc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015be:	2320      	movs	r3, #32
 80015c0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80015c8:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80015ca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80015cc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80015d0:	f7ff f924 	bl	800081c <HAL_UART_MspInit>
 80015d4:	e7d7      	b.n	8001586 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
}
 80015d8:	4770      	bx	lr

080015da <HAL_UART_Transmit>:
{
 80015da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80015e2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d156      	bne.n	800169a <HAL_UART_Transmit+0xc0>
 80015ec:	4604      	mov	r4, r0
 80015ee:	460d      	mov	r5, r1
 80015f0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80015f2:	2900      	cmp	r1, #0
 80015f4:	d055      	beq.n	80016a2 <HAL_UART_Transmit+0xc8>
 80015f6:	b90a      	cbnz	r2, 80015fc <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
 80015fa:	e04f      	b.n	800169c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001600:	2321      	movs	r3, #33	@ 0x21
 8001602:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001606:	f7ff fa15 	bl	8000a34 <HAL_GetTick>
 800160a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800160c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001610:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001614:	68a3      	ldr	r3, [r4, #8]
 8001616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800161a:	d002      	beq.n	8001622 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800161c:	f04f 0800 	mov.w	r8, #0
 8001620:	e014      	b.n	800164c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001622:	6923      	ldr	r3, [r4, #16]
 8001624:	b32b      	cbz	r3, 8001672 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001626:	f04f 0800 	mov.w	r8, #0
 800162a:	e00f      	b.n	800164c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 800162c:	2320      	movs	r3, #32
 800162e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001632:	2003      	movs	r0, #3
 8001634:	e032      	b.n	800169c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001636:	f838 3b02 	ldrh.w	r3, [r8], #2
 800163a:	6822      	ldr	r2, [r4, #0]
 800163c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001640:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001642:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001644:	b292      	uxth	r2, r2
 8001646:	3a01      	subs	r2, #1
 8001648:	b292      	uxth	r2, r2
 800164a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800164c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800164e:	b29b      	uxth	r3, r3
 8001650:	b193      	cbz	r3, 8001678 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001652:	9600      	str	r6, [sp, #0]
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff ff4a 	bl	80014f4 <UART_WaitOnFlagUntilTimeout>
 8001660:	2800      	cmp	r0, #0
 8001662:	d1e3      	bne.n	800162c <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001664:	2d00      	cmp	r5, #0
 8001666:	d0e6      	beq.n	8001636 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001668:	f815 2b01 	ldrb.w	r2, [r5], #1
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001670:	e7e7      	b.n	8001642 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001672:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001674:	2500      	movs	r5, #0
 8001676:	e7e9      	b.n	800164c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001678:	9600      	str	r6, [sp, #0]
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff ff37 	bl	80014f4 <UART_WaitOnFlagUntilTimeout>
 8001686:	b918      	cbnz	r0, 8001690 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001688:	2320      	movs	r3, #32
 800168a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800168e:	e005      	b.n	800169c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001690:	2320      	movs	r3, #32
 8001692:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001696:	2003      	movs	r0, #3
 8001698:	e000      	b.n	800169c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800169a:	2002      	movs	r0, #2
}
 800169c:	b002      	add	sp, #8
 800169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
 80016a4:	e7fa      	b.n	800169c <HAL_UART_Transmit+0xc2>
	...

080016a8 <std>:
 80016a8:	2300      	movs	r3, #0
 80016aa:	b510      	push	{r4, lr}
 80016ac:	4604      	mov	r4, r0
 80016ae:	e9c0 3300 	strd	r3, r3, [r0]
 80016b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016b6:	6083      	str	r3, [r0, #8]
 80016b8:	8181      	strh	r1, [r0, #12]
 80016ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80016bc:	81c2      	strh	r2, [r0, #14]
 80016be:	6183      	str	r3, [r0, #24]
 80016c0:	4619      	mov	r1, r3
 80016c2:	2208      	movs	r2, #8
 80016c4:	305c      	adds	r0, #92	@ 0x5c
 80016c6:	f000 f9f9 	bl	8001abc <memset>
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <std+0x58>)
 80016cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <std+0x5c>)
 80016d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <std+0x60>)
 80016d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <std+0x64>)
 80016d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <std+0x68>)
 80016dc:	6224      	str	r4, [r4, #32]
 80016de:	429c      	cmp	r4, r3
 80016e0:	d006      	beq.n	80016f0 <std+0x48>
 80016e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016e6:	4294      	cmp	r4, r2
 80016e8:	d002      	beq.n	80016f0 <std+0x48>
 80016ea:	33d0      	adds	r3, #208	@ 0xd0
 80016ec:	429c      	cmp	r4, r3
 80016ee:	d105      	bne.n	80016fc <std+0x54>
 80016f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016f8:	f000 ba58 	b.w	8001bac <__retarget_lock_init_recursive>
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	bf00      	nop
 8001700:	0800190d 	.word	0x0800190d
 8001704:	0800192f 	.word	0x0800192f
 8001708:	08001967 	.word	0x08001967
 800170c:	0800198b 	.word	0x0800198b
 8001710:	200000e0 	.word	0x200000e0

08001714 <stdio_exit_handler>:
 8001714:	4a02      	ldr	r2, [pc, #8]	@ (8001720 <stdio_exit_handler+0xc>)
 8001716:	4903      	ldr	r1, [pc, #12]	@ (8001724 <stdio_exit_handler+0x10>)
 8001718:	4803      	ldr	r0, [pc, #12]	@ (8001728 <stdio_exit_handler+0x14>)
 800171a:	f000 b869 	b.w	80017f0 <_fwalk_sglue>
 800171e:	bf00      	nop
 8001720:	20000014 	.word	0x20000014
 8001724:	0800244d 	.word	0x0800244d
 8001728:	20000024 	.word	0x20000024

0800172c <cleanup_stdio>:
 800172c:	6841      	ldr	r1, [r0, #4]
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <cleanup_stdio+0x34>)
 8001730:	4299      	cmp	r1, r3
 8001732:	b510      	push	{r4, lr}
 8001734:	4604      	mov	r4, r0
 8001736:	d001      	beq.n	800173c <cleanup_stdio+0x10>
 8001738:	f000 fe88 	bl	800244c <_fflush_r>
 800173c:	68a1      	ldr	r1, [r4, #8]
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <cleanup_stdio+0x38>)
 8001740:	4299      	cmp	r1, r3
 8001742:	d002      	beq.n	800174a <cleanup_stdio+0x1e>
 8001744:	4620      	mov	r0, r4
 8001746:	f000 fe81 	bl	800244c <_fflush_r>
 800174a:	68e1      	ldr	r1, [r4, #12]
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <cleanup_stdio+0x3c>)
 800174e:	4299      	cmp	r1, r3
 8001750:	d004      	beq.n	800175c <cleanup_stdio+0x30>
 8001752:	4620      	mov	r0, r4
 8001754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001758:	f000 be78 	b.w	800244c <_fflush_r>
 800175c:	bd10      	pop	{r4, pc}
 800175e:	bf00      	nop
 8001760:	200000e0 	.word	0x200000e0
 8001764:	20000148 	.word	0x20000148
 8001768:	200001b0 	.word	0x200001b0

0800176c <global_stdio_init.part.0>:
 800176c:	b510      	push	{r4, lr}
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <global_stdio_init.part.0+0x30>)
 8001770:	4c0b      	ldr	r4, [pc, #44]	@ (80017a0 <global_stdio_init.part.0+0x34>)
 8001772:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <global_stdio_init.part.0+0x38>)
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	4620      	mov	r0, r4
 8001778:	2200      	movs	r2, #0
 800177a:	2104      	movs	r1, #4
 800177c:	f7ff ff94 	bl	80016a8 <std>
 8001780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001784:	2201      	movs	r2, #1
 8001786:	2109      	movs	r1, #9
 8001788:	f7ff ff8e 	bl	80016a8 <std>
 800178c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001790:	2202      	movs	r2, #2
 8001792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001796:	2112      	movs	r1, #18
 8001798:	f7ff bf86 	b.w	80016a8 <std>
 800179c:	20000218 	.word	0x20000218
 80017a0:	200000e0 	.word	0x200000e0
 80017a4:	08001715 	.word	0x08001715

080017a8 <__sfp_lock_acquire>:
 80017a8:	4801      	ldr	r0, [pc, #4]	@ (80017b0 <__sfp_lock_acquire+0x8>)
 80017aa:	f000 ba00 	b.w	8001bae <__retarget_lock_acquire_recursive>
 80017ae:	bf00      	nop
 80017b0:	20000221 	.word	0x20000221

080017b4 <__sfp_lock_release>:
 80017b4:	4801      	ldr	r0, [pc, #4]	@ (80017bc <__sfp_lock_release+0x8>)
 80017b6:	f000 b9fb 	b.w	8001bb0 <__retarget_lock_release_recursive>
 80017ba:	bf00      	nop
 80017bc:	20000221 	.word	0x20000221

080017c0 <__sinit>:
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	f7ff fff0 	bl	80017a8 <__sfp_lock_acquire>
 80017c8:	6a23      	ldr	r3, [r4, #32]
 80017ca:	b11b      	cbz	r3, 80017d4 <__sinit+0x14>
 80017cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d0:	f7ff bff0 	b.w	80017b4 <__sfp_lock_release>
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__sinit+0x28>)
 80017d6:	6223      	str	r3, [r4, #32]
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <__sinit+0x2c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f5      	bne.n	80017cc <__sinit+0xc>
 80017e0:	f7ff ffc4 	bl	800176c <global_stdio_init.part.0>
 80017e4:	e7f2      	b.n	80017cc <__sinit+0xc>
 80017e6:	bf00      	nop
 80017e8:	0800172d 	.word	0x0800172d
 80017ec:	20000218 	.word	0x20000218

080017f0 <_fwalk_sglue>:
 80017f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f4:	4607      	mov	r7, r0
 80017f6:	4688      	mov	r8, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	2600      	movs	r6, #0
 80017fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001800:	f1b9 0901 	subs.w	r9, r9, #1
 8001804:	d505      	bpl.n	8001812 <_fwalk_sglue+0x22>
 8001806:	6824      	ldr	r4, [r4, #0]
 8001808:	2c00      	cmp	r4, #0
 800180a:	d1f7      	bne.n	80017fc <_fwalk_sglue+0xc>
 800180c:	4630      	mov	r0, r6
 800180e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001812:	89ab      	ldrh	r3, [r5, #12]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d907      	bls.n	8001828 <_fwalk_sglue+0x38>
 8001818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800181c:	3301      	adds	r3, #1
 800181e:	d003      	beq.n	8001828 <_fwalk_sglue+0x38>
 8001820:	4629      	mov	r1, r5
 8001822:	4638      	mov	r0, r7
 8001824:	47c0      	blx	r8
 8001826:	4306      	orrs	r6, r0
 8001828:	3568      	adds	r5, #104	@ 0x68
 800182a:	e7e9      	b.n	8001800 <_fwalk_sglue+0x10>

0800182c <iprintf>:
 800182c:	b40f      	push	{r0, r1, r2, r3}
 800182e:	b507      	push	{r0, r1, r2, lr}
 8001830:	4906      	ldr	r1, [pc, #24]	@ (800184c <iprintf+0x20>)
 8001832:	ab04      	add	r3, sp, #16
 8001834:	6808      	ldr	r0, [r1, #0]
 8001836:	f853 2b04 	ldr.w	r2, [r3], #4
 800183a:	6881      	ldr	r1, [r0, #8]
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	f000 fadb 	bl	8001df8 <_vfiprintf_r>
 8001842:	b003      	add	sp, #12
 8001844:	f85d eb04 	ldr.w	lr, [sp], #4
 8001848:	b004      	add	sp, #16
 800184a:	4770      	bx	lr
 800184c:	20000020 	.word	0x20000020

08001850 <_puts_r>:
 8001850:	6a03      	ldr	r3, [r0, #32]
 8001852:	b570      	push	{r4, r5, r6, lr}
 8001854:	6884      	ldr	r4, [r0, #8]
 8001856:	4605      	mov	r5, r0
 8001858:	460e      	mov	r6, r1
 800185a:	b90b      	cbnz	r3, 8001860 <_puts_r+0x10>
 800185c:	f7ff ffb0 	bl	80017c0 <__sinit>
 8001860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001862:	07db      	lsls	r3, r3, #31
 8001864:	d405      	bmi.n	8001872 <_puts_r+0x22>
 8001866:	89a3      	ldrh	r3, [r4, #12]
 8001868:	0598      	lsls	r0, r3, #22
 800186a:	d402      	bmi.n	8001872 <_puts_r+0x22>
 800186c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800186e:	f000 f99e 	bl	8001bae <__retarget_lock_acquire_recursive>
 8001872:	89a3      	ldrh	r3, [r4, #12]
 8001874:	0719      	lsls	r1, r3, #28
 8001876:	d502      	bpl.n	800187e <_puts_r+0x2e>
 8001878:	6923      	ldr	r3, [r4, #16]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d135      	bne.n	80018ea <_puts_r+0x9a>
 800187e:	4621      	mov	r1, r4
 8001880:	4628      	mov	r0, r5
 8001882:	f000 f8c5 	bl	8001a10 <__swsetup_r>
 8001886:	b380      	cbz	r0, 80018ea <_puts_r+0x9a>
 8001888:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800188c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800188e:	07da      	lsls	r2, r3, #31
 8001890:	d405      	bmi.n	800189e <_puts_r+0x4e>
 8001892:	89a3      	ldrh	r3, [r4, #12]
 8001894:	059b      	lsls	r3, r3, #22
 8001896:	d402      	bmi.n	800189e <_puts_r+0x4e>
 8001898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800189a:	f000 f989 	bl	8001bb0 <__retarget_lock_release_recursive>
 800189e:	4628      	mov	r0, r5
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da04      	bge.n	80018b0 <_puts_r+0x60>
 80018a6:	69a2      	ldr	r2, [r4, #24]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dc17      	bgt.n	80018dc <_puts_r+0x8c>
 80018ac:	290a      	cmp	r1, #10
 80018ae:	d015      	beq.n	80018dc <_puts_r+0x8c>
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	6022      	str	r2, [r4, #0]
 80018b6:	7019      	strb	r1, [r3, #0]
 80018b8:	68a3      	ldr	r3, [r4, #8]
 80018ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80018be:	3b01      	subs	r3, #1
 80018c0:	60a3      	str	r3, [r4, #8]
 80018c2:	2900      	cmp	r1, #0
 80018c4:	d1ed      	bne.n	80018a2 <_puts_r+0x52>
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da11      	bge.n	80018ee <_puts_r+0x9e>
 80018ca:	4622      	mov	r2, r4
 80018cc:	210a      	movs	r1, #10
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 f85f 	bl	8001992 <__swbuf_r>
 80018d4:	3001      	adds	r0, #1
 80018d6:	d0d7      	beq.n	8001888 <_puts_r+0x38>
 80018d8:	250a      	movs	r5, #10
 80018da:	e7d7      	b.n	800188c <_puts_r+0x3c>
 80018dc:	4622      	mov	r2, r4
 80018de:	4628      	mov	r0, r5
 80018e0:	f000 f857 	bl	8001992 <__swbuf_r>
 80018e4:	3001      	adds	r0, #1
 80018e6:	d1e7      	bne.n	80018b8 <_puts_r+0x68>
 80018e8:	e7ce      	b.n	8001888 <_puts_r+0x38>
 80018ea:	3e01      	subs	r6, #1
 80018ec:	e7e4      	b.n	80018b8 <_puts_r+0x68>
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	6022      	str	r2, [r4, #0]
 80018f4:	220a      	movs	r2, #10
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e7ee      	b.n	80018d8 <_puts_r+0x88>
	...

080018fc <puts>:
 80018fc:	4b02      	ldr	r3, [pc, #8]	@ (8001908 <puts+0xc>)
 80018fe:	4601      	mov	r1, r0
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f7ff bfa5 	b.w	8001850 <_puts_r>
 8001906:	bf00      	nop
 8001908:	20000020 	.word	0x20000020

0800190c <__sread>:
 800190c:	b510      	push	{r4, lr}
 800190e:	460c      	mov	r4, r1
 8001910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001914:	f000 f8fc 	bl	8001b10 <_read_r>
 8001918:	2800      	cmp	r0, #0
 800191a:	bfab      	itete	ge
 800191c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800191e:	89a3      	ldrhlt	r3, [r4, #12]
 8001920:	181b      	addge	r3, r3, r0
 8001922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001926:	bfac      	ite	ge
 8001928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800192a:	81a3      	strhlt	r3, [r4, #12]
 800192c:	bd10      	pop	{r4, pc}

0800192e <__swrite>:
 800192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001932:	461f      	mov	r7, r3
 8001934:	898b      	ldrh	r3, [r1, #12]
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	4605      	mov	r5, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4616      	mov	r6, r2
 800193e:	d505      	bpl.n	800194c <__swrite+0x1e>
 8001940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001944:	2302      	movs	r3, #2
 8001946:	2200      	movs	r2, #0
 8001948:	f000 f8d0 	bl	8001aec <_lseek_r>
 800194c:	89a3      	ldrh	r3, [r4, #12]
 800194e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001956:	81a3      	strh	r3, [r4, #12]
 8001958:	4632      	mov	r2, r6
 800195a:	463b      	mov	r3, r7
 800195c:	4628      	mov	r0, r5
 800195e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001962:	f000 b8e7 	b.w	8001b34 <_write_r>

08001966 <__sseek>:
 8001966:	b510      	push	{r4, lr}
 8001968:	460c      	mov	r4, r1
 800196a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800196e:	f000 f8bd 	bl	8001aec <_lseek_r>
 8001972:	1c43      	adds	r3, r0, #1
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	bf15      	itete	ne
 8001978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800197a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800197e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001982:	81a3      	strheq	r3, [r4, #12]
 8001984:	bf18      	it	ne
 8001986:	81a3      	strhne	r3, [r4, #12]
 8001988:	bd10      	pop	{r4, pc}

0800198a <__sclose>:
 800198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198e:	f000 b89d 	b.w	8001acc <_close_r>

08001992 <__swbuf_r>:
 8001992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001994:	460e      	mov	r6, r1
 8001996:	4614      	mov	r4, r2
 8001998:	4605      	mov	r5, r0
 800199a:	b118      	cbz	r0, 80019a4 <__swbuf_r+0x12>
 800199c:	6a03      	ldr	r3, [r0, #32]
 800199e:	b90b      	cbnz	r3, 80019a4 <__swbuf_r+0x12>
 80019a0:	f7ff ff0e 	bl	80017c0 <__sinit>
 80019a4:	69a3      	ldr	r3, [r4, #24]
 80019a6:	60a3      	str	r3, [r4, #8]
 80019a8:	89a3      	ldrh	r3, [r4, #12]
 80019aa:	071a      	lsls	r2, r3, #28
 80019ac:	d501      	bpl.n	80019b2 <__swbuf_r+0x20>
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	b943      	cbnz	r3, 80019c4 <__swbuf_r+0x32>
 80019b2:	4621      	mov	r1, r4
 80019b4:	4628      	mov	r0, r5
 80019b6:	f000 f82b 	bl	8001a10 <__swsetup_r>
 80019ba:	b118      	cbz	r0, 80019c4 <__swbuf_r+0x32>
 80019bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80019c0:	4638      	mov	r0, r7
 80019c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	6922      	ldr	r2, [r4, #16]
 80019c8:	1a98      	subs	r0, r3, r2
 80019ca:	6963      	ldr	r3, [r4, #20]
 80019cc:	b2f6      	uxtb	r6, r6
 80019ce:	4283      	cmp	r3, r0
 80019d0:	4637      	mov	r7, r6
 80019d2:	dc05      	bgt.n	80019e0 <__swbuf_r+0x4e>
 80019d4:	4621      	mov	r1, r4
 80019d6:	4628      	mov	r0, r5
 80019d8:	f000 fd38 	bl	800244c <_fflush_r>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1ed      	bne.n	80019bc <__swbuf_r+0x2a>
 80019e0:	68a3      	ldr	r3, [r4, #8]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	60a3      	str	r3, [r4, #8]
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	6022      	str	r2, [r4, #0]
 80019ec:	701e      	strb	r6, [r3, #0]
 80019ee:	6962      	ldr	r2, [r4, #20]
 80019f0:	1c43      	adds	r3, r0, #1
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d004      	beq.n	8001a00 <__swbuf_r+0x6e>
 80019f6:	89a3      	ldrh	r3, [r4, #12]
 80019f8:	07db      	lsls	r3, r3, #31
 80019fa:	d5e1      	bpl.n	80019c0 <__swbuf_r+0x2e>
 80019fc:	2e0a      	cmp	r6, #10
 80019fe:	d1df      	bne.n	80019c0 <__swbuf_r+0x2e>
 8001a00:	4621      	mov	r1, r4
 8001a02:	4628      	mov	r0, r5
 8001a04:	f000 fd22 	bl	800244c <_fflush_r>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d0d9      	beq.n	80019c0 <__swbuf_r+0x2e>
 8001a0c:	e7d6      	b.n	80019bc <__swbuf_r+0x2a>
	...

08001a10 <__swsetup_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <__swsetup_r+0xa8>)
 8001a14:	4605      	mov	r5, r0
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	460c      	mov	r4, r1
 8001a1a:	b118      	cbz	r0, 8001a24 <__swsetup_r+0x14>
 8001a1c:	6a03      	ldr	r3, [r0, #32]
 8001a1e:	b90b      	cbnz	r3, 8001a24 <__swsetup_r+0x14>
 8001a20:	f7ff fece 	bl	80017c0 <__sinit>
 8001a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a28:	0719      	lsls	r1, r3, #28
 8001a2a:	d422      	bmi.n	8001a72 <__swsetup_r+0x62>
 8001a2c:	06da      	lsls	r2, r3, #27
 8001a2e:	d407      	bmi.n	8001a40 <__swsetup_r+0x30>
 8001a30:	2209      	movs	r2, #9
 8001a32:	602a      	str	r2, [r5, #0]
 8001a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a3e:	e033      	b.n	8001aa8 <__swsetup_r+0x98>
 8001a40:	0758      	lsls	r0, r3, #29
 8001a42:	d512      	bpl.n	8001a6a <__swsetup_r+0x5a>
 8001a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a46:	b141      	cbz	r1, 8001a5a <__swsetup_r+0x4a>
 8001a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	d002      	beq.n	8001a56 <__swsetup_r+0x46>
 8001a50:	4628      	mov	r0, r5
 8001a52:	f000 f8af 	bl	8001bb4 <_free_r>
 8001a56:	2300      	movs	r3, #0
 8001a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a5a:	89a3      	ldrh	r3, [r4, #12]
 8001a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a60:	81a3      	strh	r3, [r4, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	6063      	str	r3, [r4, #4]
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	6923      	ldr	r3, [r4, #16]
 8001a74:	b94b      	cbnz	r3, 8001a8a <__swsetup_r+0x7a>
 8001a76:	89a3      	ldrh	r3, [r4, #12]
 8001a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a80:	d003      	beq.n	8001a8a <__swsetup_r+0x7a>
 8001a82:	4621      	mov	r1, r4
 8001a84:	4628      	mov	r0, r5
 8001a86:	f000 fd2f 	bl	80024e8 <__smakebuf_r>
 8001a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a8e:	f013 0201 	ands.w	r2, r3, #1
 8001a92:	d00a      	beq.n	8001aaa <__swsetup_r+0x9a>
 8001a94:	2200      	movs	r2, #0
 8001a96:	60a2      	str	r2, [r4, #8]
 8001a98:	6962      	ldr	r2, [r4, #20]
 8001a9a:	4252      	negs	r2, r2
 8001a9c:	61a2      	str	r2, [r4, #24]
 8001a9e:	6922      	ldr	r2, [r4, #16]
 8001aa0:	b942      	cbnz	r2, 8001ab4 <__swsetup_r+0xa4>
 8001aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001aa6:	d1c5      	bne.n	8001a34 <__swsetup_r+0x24>
 8001aa8:	bd38      	pop	{r3, r4, r5, pc}
 8001aaa:	0799      	lsls	r1, r3, #30
 8001aac:	bf58      	it	pl
 8001aae:	6962      	ldrpl	r2, [r4, #20]
 8001ab0:	60a2      	str	r2, [r4, #8]
 8001ab2:	e7f4      	b.n	8001a9e <__swsetup_r+0x8e>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e7f7      	b.n	8001aa8 <__swsetup_r+0x98>
 8001ab8:	20000020 	.word	0x20000020

08001abc <memset>:
 8001abc:	4402      	add	r2, r0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d100      	bne.n	8001ac6 <memset+0xa>
 8001ac4:	4770      	bx	lr
 8001ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8001aca:	e7f9      	b.n	8001ac0 <memset+0x4>

08001acc <_close_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4d06      	ldr	r5, [pc, #24]	@ (8001ae8 <_close_r+0x1c>)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	602b      	str	r3, [r5, #0]
 8001ad8:	f7fe fefb 	bl	80008d2 <_close>
 8001adc:	1c43      	adds	r3, r0, #1
 8001ade:	d102      	bne.n	8001ae6 <_close_r+0x1a>
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	b103      	cbz	r3, 8001ae6 <_close_r+0x1a>
 8001ae4:	6023      	str	r3, [r4, #0]
 8001ae6:	bd38      	pop	{r3, r4, r5, pc}
 8001ae8:	2000021c 	.word	0x2000021c

08001aec <_lseek_r>:
 8001aec:	b538      	push	{r3, r4, r5, lr}
 8001aee:	4d07      	ldr	r5, [pc, #28]	@ (8001b0c <_lseek_r+0x20>)
 8001af0:	4604      	mov	r4, r0
 8001af2:	4608      	mov	r0, r1
 8001af4:	4611      	mov	r1, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	602a      	str	r2, [r5, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7fe fef3 	bl	80008e6 <_lseek>
 8001b00:	1c43      	adds	r3, r0, #1
 8001b02:	d102      	bne.n	8001b0a <_lseek_r+0x1e>
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	b103      	cbz	r3, 8001b0a <_lseek_r+0x1e>
 8001b08:	6023      	str	r3, [r4, #0]
 8001b0a:	bd38      	pop	{r3, r4, r5, pc}
 8001b0c:	2000021c 	.word	0x2000021c

08001b10 <_read_r>:
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4d07      	ldr	r5, [pc, #28]	@ (8001b30 <_read_r+0x20>)
 8001b14:	4604      	mov	r4, r0
 8001b16:	4608      	mov	r0, r1
 8001b18:	4611      	mov	r1, r2
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	602a      	str	r2, [r5, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f7fe fec7 	bl	80008b2 <_read>
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	d102      	bne.n	8001b2e <_read_r+0x1e>
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	b103      	cbz	r3, 8001b2e <_read_r+0x1e>
 8001b2c:	6023      	str	r3, [r4, #0]
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	2000021c 	.word	0x2000021c

08001b34 <_write_r>:
 8001b34:	b538      	push	{r3, r4, r5, lr}
 8001b36:	4d07      	ldr	r5, [pc, #28]	@ (8001b54 <_write_r+0x20>)
 8001b38:	4604      	mov	r4, r0
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	602a      	str	r2, [r5, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f7fe fd68 	bl	8000618 <_write>
 8001b48:	1c43      	adds	r3, r0, #1
 8001b4a:	d102      	bne.n	8001b52 <_write_r+0x1e>
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	b103      	cbz	r3, 8001b52 <_write_r+0x1e>
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
 8001b54:	2000021c 	.word	0x2000021c

08001b58 <__errno>:
 8001b58:	4b01      	ldr	r3, [pc, #4]	@ (8001b60 <__errno+0x8>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000020 	.word	0x20000020

08001b64 <__libc_init_array>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	4d0d      	ldr	r5, [pc, #52]	@ (8001b9c <__libc_init_array+0x38>)
 8001b68:	4c0d      	ldr	r4, [pc, #52]	@ (8001ba0 <__libc_init_array+0x3c>)
 8001b6a:	1b64      	subs	r4, r4, r5
 8001b6c:	10a4      	asrs	r4, r4, #2
 8001b6e:	2600      	movs	r6, #0
 8001b70:	42a6      	cmp	r6, r4
 8001b72:	d109      	bne.n	8001b88 <__libc_init_array+0x24>
 8001b74:	4d0b      	ldr	r5, [pc, #44]	@ (8001ba4 <__libc_init_array+0x40>)
 8001b76:	4c0c      	ldr	r4, [pc, #48]	@ (8001ba8 <__libc_init_array+0x44>)
 8001b78:	f000 fd24 	bl	80025c4 <_init>
 8001b7c:	1b64      	subs	r4, r4, r5
 8001b7e:	10a4      	asrs	r4, r4, #2
 8001b80:	2600      	movs	r6, #0
 8001b82:	42a6      	cmp	r6, r4
 8001b84:	d105      	bne.n	8001b92 <__libc_init_array+0x2e>
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
 8001b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b8c:	4798      	blx	r3
 8001b8e:	3601      	adds	r6, #1
 8001b90:	e7ee      	b.n	8001b70 <__libc_init_array+0xc>
 8001b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b96:	4798      	blx	r3
 8001b98:	3601      	adds	r6, #1
 8001b9a:	e7f2      	b.n	8001b82 <__libc_init_array+0x1e>
 8001b9c:	0800267c 	.word	0x0800267c
 8001ba0:	0800267c 	.word	0x0800267c
 8001ba4:	0800267c 	.word	0x0800267c
 8001ba8:	08002680 	.word	0x08002680

08001bac <__retarget_lock_init_recursive>:
 8001bac:	4770      	bx	lr

08001bae <__retarget_lock_acquire_recursive>:
 8001bae:	4770      	bx	lr

08001bb0 <__retarget_lock_release_recursive>:
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_free_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	2900      	cmp	r1, #0
 8001bba:	d041      	beq.n	8001c40 <_free_r+0x8c>
 8001bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bc0:	1f0c      	subs	r4, r1, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bfb8      	it	lt
 8001bc6:	18e4      	addlt	r4, r4, r3
 8001bc8:	f000 f8e0 	bl	8001d8c <__malloc_lock>
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_free_r+0x90>)
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	b933      	cbnz	r3, 8001be0 <_free_r+0x2c>
 8001bd2:	6063      	str	r3, [r4, #4]
 8001bd4:	6014      	str	r4, [r2, #0]
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bdc:	f000 b8dc 	b.w	8001d98 <__malloc_unlock>
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	d908      	bls.n	8001bf6 <_free_r+0x42>
 8001be4:	6820      	ldr	r0, [r4, #0]
 8001be6:	1821      	adds	r1, r4, r0
 8001be8:	428b      	cmp	r3, r1
 8001bea:	bf01      	itttt	eq
 8001bec:	6819      	ldreq	r1, [r3, #0]
 8001bee:	685b      	ldreq	r3, [r3, #4]
 8001bf0:	1809      	addeq	r1, r1, r0
 8001bf2:	6021      	streq	r1, [r4, #0]
 8001bf4:	e7ed      	b.n	8001bd2 <_free_r+0x1e>
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	b10b      	cbz	r3, 8001c00 <_free_r+0x4c>
 8001bfc:	42a3      	cmp	r3, r4
 8001bfe:	d9fa      	bls.n	8001bf6 <_free_r+0x42>
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	1850      	adds	r0, r2, r1
 8001c04:	42a0      	cmp	r0, r4
 8001c06:	d10b      	bne.n	8001c20 <_free_r+0x6c>
 8001c08:	6820      	ldr	r0, [r4, #0]
 8001c0a:	4401      	add	r1, r0
 8001c0c:	1850      	adds	r0, r2, r1
 8001c0e:	4283      	cmp	r3, r0
 8001c10:	6011      	str	r1, [r2, #0]
 8001c12:	d1e0      	bne.n	8001bd6 <_free_r+0x22>
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	6053      	str	r3, [r2, #4]
 8001c1a:	4408      	add	r0, r1
 8001c1c:	6010      	str	r0, [r2, #0]
 8001c1e:	e7da      	b.n	8001bd6 <_free_r+0x22>
 8001c20:	d902      	bls.n	8001c28 <_free_r+0x74>
 8001c22:	230c      	movs	r3, #12
 8001c24:	602b      	str	r3, [r5, #0]
 8001c26:	e7d6      	b.n	8001bd6 <_free_r+0x22>
 8001c28:	6820      	ldr	r0, [r4, #0]
 8001c2a:	1821      	adds	r1, r4, r0
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	bf04      	itt	eq
 8001c30:	6819      	ldreq	r1, [r3, #0]
 8001c32:	685b      	ldreq	r3, [r3, #4]
 8001c34:	6063      	str	r3, [r4, #4]
 8001c36:	bf04      	itt	eq
 8001c38:	1809      	addeq	r1, r1, r0
 8001c3a:	6021      	streq	r1, [r4, #0]
 8001c3c:	6054      	str	r4, [r2, #4]
 8001c3e:	e7ca      	b.n	8001bd6 <_free_r+0x22>
 8001c40:	bd38      	pop	{r3, r4, r5, pc}
 8001c42:	bf00      	nop
 8001c44:	20000228 	.word	0x20000228

08001c48 <sbrk_aligned>:
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8001c88 <sbrk_aligned+0x40>)
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	6831      	ldr	r1, [r6, #0]
 8001c50:	4605      	mov	r5, r0
 8001c52:	b911      	cbnz	r1, 8001c5a <sbrk_aligned+0x12>
 8001c54:	f000 fca6 	bl	80025a4 <_sbrk_r>
 8001c58:	6030      	str	r0, [r6, #0]
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f000 fca1 	bl	80025a4 <_sbrk_r>
 8001c62:	1c43      	adds	r3, r0, #1
 8001c64:	d103      	bne.n	8001c6e <sbrk_aligned+0x26>
 8001c66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
 8001c6e:	1cc4      	adds	r4, r0, #3
 8001c70:	f024 0403 	bic.w	r4, r4, #3
 8001c74:	42a0      	cmp	r0, r4
 8001c76:	d0f8      	beq.n	8001c6a <sbrk_aligned+0x22>
 8001c78:	1a21      	subs	r1, r4, r0
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f000 fc92 	bl	80025a4 <_sbrk_r>
 8001c80:	3001      	adds	r0, #1
 8001c82:	d1f2      	bne.n	8001c6a <sbrk_aligned+0x22>
 8001c84:	e7ef      	b.n	8001c66 <sbrk_aligned+0x1e>
 8001c86:	bf00      	nop
 8001c88:	20000224 	.word	0x20000224

08001c8c <_malloc_r>:
 8001c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c90:	1ccd      	adds	r5, r1, #3
 8001c92:	f025 0503 	bic.w	r5, r5, #3
 8001c96:	3508      	adds	r5, #8
 8001c98:	2d0c      	cmp	r5, #12
 8001c9a:	bf38      	it	cc
 8001c9c:	250c      	movcc	r5, #12
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	4606      	mov	r6, r0
 8001ca2:	db01      	blt.n	8001ca8 <_malloc_r+0x1c>
 8001ca4:	42a9      	cmp	r1, r5
 8001ca6:	d904      	bls.n	8001cb2 <_malloc_r+0x26>
 8001ca8:	230c      	movs	r3, #12
 8001caa:	6033      	str	r3, [r6, #0]
 8001cac:	2000      	movs	r0, #0
 8001cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d88 <_malloc_r+0xfc>
 8001cb6:	f000 f869 	bl	8001d8c <__malloc_lock>
 8001cba:	f8d8 3000 	ldr.w	r3, [r8]
 8001cbe:	461c      	mov	r4, r3
 8001cc0:	bb44      	cbnz	r4, 8001d14 <_malloc_r+0x88>
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff ffbf 	bl	8001c48 <sbrk_aligned>
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	4604      	mov	r4, r0
 8001cce:	d158      	bne.n	8001d82 <_malloc_r+0xf6>
 8001cd0:	f8d8 4000 	ldr.w	r4, [r8]
 8001cd4:	4627      	mov	r7, r4
 8001cd6:	2f00      	cmp	r7, #0
 8001cd8:	d143      	bne.n	8001d62 <_malloc_r+0xd6>
 8001cda:	2c00      	cmp	r4, #0
 8001cdc:	d04b      	beq.n	8001d76 <_malloc_r+0xea>
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	4639      	mov	r1, r7
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	eb04 0903 	add.w	r9, r4, r3
 8001ce8:	f000 fc5c 	bl	80025a4 <_sbrk_r>
 8001cec:	4581      	cmp	r9, r0
 8001cee:	d142      	bne.n	8001d76 <_malloc_r+0xea>
 8001cf0:	6821      	ldr	r1, [r4, #0]
 8001cf2:	1a6d      	subs	r5, r5, r1
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f7ff ffa6 	bl	8001c48 <sbrk_aligned>
 8001cfc:	3001      	adds	r0, #1
 8001cfe:	d03a      	beq.n	8001d76 <_malloc_r+0xea>
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	442b      	add	r3, r5
 8001d04:	6023      	str	r3, [r4, #0]
 8001d06:	f8d8 3000 	ldr.w	r3, [r8]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	bb62      	cbnz	r2, 8001d68 <_malloc_r+0xdc>
 8001d0e:	f8c8 7000 	str.w	r7, [r8]
 8001d12:	e00f      	b.n	8001d34 <_malloc_r+0xa8>
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	1b52      	subs	r2, r2, r5
 8001d18:	d420      	bmi.n	8001d5c <_malloc_r+0xd0>
 8001d1a:	2a0b      	cmp	r2, #11
 8001d1c:	d917      	bls.n	8001d4e <_malloc_r+0xc2>
 8001d1e:	1961      	adds	r1, r4, r5
 8001d20:	42a3      	cmp	r3, r4
 8001d22:	6025      	str	r5, [r4, #0]
 8001d24:	bf18      	it	ne
 8001d26:	6059      	strne	r1, [r3, #4]
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	bf08      	it	eq
 8001d2c:	f8c8 1000 	streq.w	r1, [r8]
 8001d30:	5162      	str	r2, [r4, r5]
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	4630      	mov	r0, r6
 8001d36:	f000 f82f 	bl	8001d98 <__malloc_unlock>
 8001d3a:	f104 000b 	add.w	r0, r4, #11
 8001d3e:	1d23      	adds	r3, r4, #4
 8001d40:	f020 0007 	bic.w	r0, r0, #7
 8001d44:	1ac2      	subs	r2, r0, r3
 8001d46:	bf1c      	itt	ne
 8001d48:	1a1b      	subne	r3, r3, r0
 8001d4a:	50a3      	strne	r3, [r4, r2]
 8001d4c:	e7af      	b.n	8001cae <_malloc_r+0x22>
 8001d4e:	6862      	ldr	r2, [r4, #4]
 8001d50:	42a3      	cmp	r3, r4
 8001d52:	bf0c      	ite	eq
 8001d54:	f8c8 2000 	streq.w	r2, [r8]
 8001d58:	605a      	strne	r2, [r3, #4]
 8001d5a:	e7eb      	b.n	8001d34 <_malloc_r+0xa8>
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	6864      	ldr	r4, [r4, #4]
 8001d60:	e7ae      	b.n	8001cc0 <_malloc_r+0x34>
 8001d62:	463c      	mov	r4, r7
 8001d64:	687f      	ldr	r7, [r7, #4]
 8001d66:	e7b6      	b.n	8001cd6 <_malloc_r+0x4a>
 8001d68:	461a      	mov	r2, r3
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	d1fb      	bne.n	8001d68 <_malloc_r+0xdc>
 8001d70:	2300      	movs	r3, #0
 8001d72:	6053      	str	r3, [r2, #4]
 8001d74:	e7de      	b.n	8001d34 <_malloc_r+0xa8>
 8001d76:	230c      	movs	r3, #12
 8001d78:	6033      	str	r3, [r6, #0]
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f000 f80c 	bl	8001d98 <__malloc_unlock>
 8001d80:	e794      	b.n	8001cac <_malloc_r+0x20>
 8001d82:	6005      	str	r5, [r0, #0]
 8001d84:	e7d6      	b.n	8001d34 <_malloc_r+0xa8>
 8001d86:	bf00      	nop
 8001d88:	20000228 	.word	0x20000228

08001d8c <__malloc_lock>:
 8001d8c:	4801      	ldr	r0, [pc, #4]	@ (8001d94 <__malloc_lock+0x8>)
 8001d8e:	f7ff bf0e 	b.w	8001bae <__retarget_lock_acquire_recursive>
 8001d92:	bf00      	nop
 8001d94:	20000220 	.word	0x20000220

08001d98 <__malloc_unlock>:
 8001d98:	4801      	ldr	r0, [pc, #4]	@ (8001da0 <__malloc_unlock+0x8>)
 8001d9a:	f7ff bf09 	b.w	8001bb0 <__retarget_lock_release_recursive>
 8001d9e:	bf00      	nop
 8001da0:	20000220 	.word	0x20000220

08001da4 <__sfputc_r>:
 8001da4:	6893      	ldr	r3, [r2, #8]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	b410      	push	{r4}
 8001dac:	6093      	str	r3, [r2, #8]
 8001dae:	da08      	bge.n	8001dc2 <__sfputc_r+0x1e>
 8001db0:	6994      	ldr	r4, [r2, #24]
 8001db2:	42a3      	cmp	r3, r4
 8001db4:	db01      	blt.n	8001dba <__sfputc_r+0x16>
 8001db6:	290a      	cmp	r1, #10
 8001db8:	d103      	bne.n	8001dc2 <__sfputc_r+0x1e>
 8001dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dbe:	f7ff bde8 	b.w	8001992 <__swbuf_r>
 8001dc2:	6813      	ldr	r3, [r2, #0]
 8001dc4:	1c58      	adds	r0, r3, #1
 8001dc6:	6010      	str	r0, [r2, #0]
 8001dc8:	7019      	strb	r1, [r3, #0]
 8001dca:	4608      	mov	r0, r1
 8001dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <__sfputs_r>:
 8001dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd4:	4606      	mov	r6, r0
 8001dd6:	460f      	mov	r7, r1
 8001dd8:	4614      	mov	r4, r2
 8001dda:	18d5      	adds	r5, r2, r3
 8001ddc:	42ac      	cmp	r4, r5
 8001dde:	d101      	bne.n	8001de4 <__sfputs_r+0x12>
 8001de0:	2000      	movs	r0, #0
 8001de2:	e007      	b.n	8001df4 <__sfputs_r+0x22>
 8001de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001de8:	463a      	mov	r2, r7
 8001dea:	4630      	mov	r0, r6
 8001dec:	f7ff ffda 	bl	8001da4 <__sfputc_r>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d1f3      	bne.n	8001ddc <__sfputs_r+0xa>
 8001df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001df8 <_vfiprintf_r>:
 8001df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	b09d      	sub	sp, #116	@ 0x74
 8001e00:	4614      	mov	r4, r2
 8001e02:	4698      	mov	r8, r3
 8001e04:	4606      	mov	r6, r0
 8001e06:	b118      	cbz	r0, 8001e10 <_vfiprintf_r+0x18>
 8001e08:	6a03      	ldr	r3, [r0, #32]
 8001e0a:	b90b      	cbnz	r3, 8001e10 <_vfiprintf_r+0x18>
 8001e0c:	f7ff fcd8 	bl	80017c0 <__sinit>
 8001e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e12:	07d9      	lsls	r1, r3, #31
 8001e14:	d405      	bmi.n	8001e22 <_vfiprintf_r+0x2a>
 8001e16:	89ab      	ldrh	r3, [r5, #12]
 8001e18:	059a      	lsls	r2, r3, #22
 8001e1a:	d402      	bmi.n	8001e22 <_vfiprintf_r+0x2a>
 8001e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e1e:	f7ff fec6 	bl	8001bae <__retarget_lock_acquire_recursive>
 8001e22:	89ab      	ldrh	r3, [r5, #12]
 8001e24:	071b      	lsls	r3, r3, #28
 8001e26:	d501      	bpl.n	8001e2c <_vfiprintf_r+0x34>
 8001e28:	692b      	ldr	r3, [r5, #16]
 8001e2a:	b99b      	cbnz	r3, 8001e54 <_vfiprintf_r+0x5c>
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff fdee 	bl	8001a10 <__swsetup_r>
 8001e34:	b170      	cbz	r0, 8001e54 <_vfiprintf_r+0x5c>
 8001e36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e38:	07dc      	lsls	r4, r3, #31
 8001e3a:	d504      	bpl.n	8001e46 <_vfiprintf_r+0x4e>
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e40:	b01d      	add	sp, #116	@ 0x74
 8001e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e46:	89ab      	ldrh	r3, [r5, #12]
 8001e48:	0598      	lsls	r0, r3, #22
 8001e4a:	d4f7      	bmi.n	8001e3c <_vfiprintf_r+0x44>
 8001e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e4e:	f7ff feaf 	bl	8001bb0 <__retarget_lock_release_recursive>
 8001e52:	e7f3      	b.n	8001e3c <_vfiprintf_r+0x44>
 8001e54:	2300      	movs	r3, #0
 8001e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e58:	2320      	movs	r3, #32
 8001e5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e62:	2330      	movs	r3, #48	@ 0x30
 8001e64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002014 <_vfiprintf_r+0x21c>
 8001e68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e6c:	f04f 0901 	mov.w	r9, #1
 8001e70:	4623      	mov	r3, r4
 8001e72:	469a      	mov	sl, r3
 8001e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e78:	b10a      	cbz	r2, 8001e7e <_vfiprintf_r+0x86>
 8001e7a:	2a25      	cmp	r2, #37	@ 0x25
 8001e7c:	d1f9      	bne.n	8001e72 <_vfiprintf_r+0x7a>
 8001e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8001e82:	d00b      	beq.n	8001e9c <_vfiprintf_r+0xa4>
 8001e84:	465b      	mov	r3, fp
 8001e86:	4622      	mov	r2, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	4630      	mov	r0, r6
 8001e8c:	f7ff ffa1 	bl	8001dd2 <__sfputs_r>
 8001e90:	3001      	adds	r0, #1
 8001e92:	f000 80a7 	beq.w	8001fe4 <_vfiprintf_r+0x1ec>
 8001e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e98:	445a      	add	r2, fp
 8001e9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 809f 	beq.w	8001fe4 <_vfiprintf_r+0x1ec>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001eb0:	f10a 0a01 	add.w	sl, sl, #1
 8001eb4:	9304      	str	r3, [sp, #16]
 8001eb6:	9307      	str	r3, [sp, #28]
 8001eb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ebc:	931a      	str	r3, [sp, #104]	@ 0x68
 8001ebe:	4654      	mov	r4, sl
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec6:	4853      	ldr	r0, [pc, #332]	@ (8002014 <_vfiprintf_r+0x21c>)
 8001ec8:	f7fe f98a 	bl	80001e0 <memchr>
 8001ecc:	9a04      	ldr	r2, [sp, #16]
 8001ece:	b9d8      	cbnz	r0, 8001f08 <_vfiprintf_r+0x110>
 8001ed0:	06d1      	lsls	r1, r2, #27
 8001ed2:	bf44      	itt	mi
 8001ed4:	2320      	movmi	r3, #32
 8001ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001eda:	0713      	lsls	r3, r2, #28
 8001edc:	bf44      	itt	mi
 8001ede:	232b      	movmi	r3, #43	@ 0x2b
 8001ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001eea:	d015      	beq.n	8001f18 <_vfiprintf_r+0x120>
 8001eec:	9a07      	ldr	r2, [sp, #28]
 8001eee:	4654      	mov	r4, sl
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f04f 0c0a 	mov.w	ip, #10
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001efc:	3b30      	subs	r3, #48	@ 0x30
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	d94b      	bls.n	8001f9a <_vfiprintf_r+0x1a2>
 8001f02:	b1b0      	cbz	r0, 8001f32 <_vfiprintf_r+0x13a>
 8001f04:	9207      	str	r2, [sp, #28]
 8001f06:	e014      	b.n	8001f32 <_vfiprintf_r+0x13a>
 8001f08:	eba0 0308 	sub.w	r3, r0, r8
 8001f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	46a2      	mov	sl, r4
 8001f16:	e7d2      	b.n	8001ebe <_vfiprintf_r+0xc6>
 8001f18:	9b03      	ldr	r3, [sp, #12]
 8001f1a:	1d19      	adds	r1, r3, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	9103      	str	r1, [sp, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bfbb      	ittet	lt
 8001f24:	425b      	neglt	r3, r3
 8001f26:	f042 0202 	orrlt.w	r2, r2, #2
 8001f2a:	9307      	strge	r3, [sp, #28]
 8001f2c:	9307      	strlt	r3, [sp, #28]
 8001f2e:	bfb8      	it	lt
 8001f30:	9204      	strlt	r2, [sp, #16]
 8001f32:	7823      	ldrb	r3, [r4, #0]
 8001f34:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f36:	d10a      	bne.n	8001f4e <_vfiprintf_r+0x156>
 8001f38:	7863      	ldrb	r3, [r4, #1]
 8001f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f3c:	d132      	bne.n	8001fa4 <_vfiprintf_r+0x1ac>
 8001f3e:	9b03      	ldr	r3, [sp, #12]
 8001f40:	1d1a      	adds	r2, r3, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	9203      	str	r2, [sp, #12]
 8001f46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f4a:	3402      	adds	r4, #2
 8001f4c:	9305      	str	r3, [sp, #20]
 8001f4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002024 <_vfiprintf_r+0x22c>
 8001f52:	7821      	ldrb	r1, [r4, #0]
 8001f54:	2203      	movs	r2, #3
 8001f56:	4650      	mov	r0, sl
 8001f58:	f7fe f942 	bl	80001e0 <memchr>
 8001f5c:	b138      	cbz	r0, 8001f6e <_vfiprintf_r+0x176>
 8001f5e:	9b04      	ldr	r3, [sp, #16]
 8001f60:	eba0 000a 	sub.w	r0, r0, sl
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	4082      	lsls	r2, r0
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	3401      	adds	r4, #1
 8001f6c:	9304      	str	r3, [sp, #16]
 8001f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f72:	4829      	ldr	r0, [pc, #164]	@ (8002018 <_vfiprintf_r+0x220>)
 8001f74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f78:	2206      	movs	r2, #6
 8001f7a:	f7fe f931 	bl	80001e0 <memchr>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d03f      	beq.n	8002002 <_vfiprintf_r+0x20a>
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <_vfiprintf_r+0x224>)
 8001f84:	bb1b      	cbnz	r3, 8001fce <_vfiprintf_r+0x1d6>
 8001f86:	9b03      	ldr	r3, [sp, #12]
 8001f88:	3307      	adds	r3, #7
 8001f8a:	f023 0307 	bic.w	r3, r3, #7
 8001f8e:	3308      	adds	r3, #8
 8001f90:	9303      	str	r3, [sp, #12]
 8001f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f94:	443b      	add	r3, r7
 8001f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f98:	e76a      	b.n	8001e70 <_vfiprintf_r+0x78>
 8001f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	e7a8      	b.n	8001ef6 <_vfiprintf_r+0xfe>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	3401      	adds	r4, #1
 8001fa8:	9305      	str	r3, [sp, #20]
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0c0a 	mov.w	ip, #10
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fb6:	3a30      	subs	r2, #48	@ 0x30
 8001fb8:	2a09      	cmp	r2, #9
 8001fba:	d903      	bls.n	8001fc4 <_vfiprintf_r+0x1cc>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0c6      	beq.n	8001f4e <_vfiprintf_r+0x156>
 8001fc0:	9105      	str	r1, [sp, #20]
 8001fc2:	e7c4      	b.n	8001f4e <_vfiprintf_r+0x156>
 8001fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fc8:	4604      	mov	r4, r0
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e7f0      	b.n	8001fb0 <_vfiprintf_r+0x1b8>
 8001fce:	ab03      	add	r3, sp, #12
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	462a      	mov	r2, r5
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <_vfiprintf_r+0x228>)
 8001fd6:	a904      	add	r1, sp, #16
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f3af 8000 	nop.w
 8001fde:	4607      	mov	r7, r0
 8001fe0:	1c78      	adds	r0, r7, #1
 8001fe2:	d1d6      	bne.n	8001f92 <_vfiprintf_r+0x19a>
 8001fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001fe6:	07d9      	lsls	r1, r3, #31
 8001fe8:	d405      	bmi.n	8001ff6 <_vfiprintf_r+0x1fe>
 8001fea:	89ab      	ldrh	r3, [r5, #12]
 8001fec:	059a      	lsls	r2, r3, #22
 8001fee:	d402      	bmi.n	8001ff6 <_vfiprintf_r+0x1fe>
 8001ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ff2:	f7ff fddd 	bl	8001bb0 <__retarget_lock_release_recursive>
 8001ff6:	89ab      	ldrh	r3, [r5, #12]
 8001ff8:	065b      	lsls	r3, r3, #25
 8001ffa:	f53f af1f 	bmi.w	8001e3c <_vfiprintf_r+0x44>
 8001ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002000:	e71e      	b.n	8001e40 <_vfiprintf_r+0x48>
 8002002:	ab03      	add	r3, sp, #12
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	462a      	mov	r2, r5
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <_vfiprintf_r+0x228>)
 800200a:	a904      	add	r1, sp, #16
 800200c:	4630      	mov	r0, r6
 800200e:	f000 f879 	bl	8002104 <_printf_i>
 8002012:	e7e4      	b.n	8001fde <_vfiprintf_r+0x1e6>
 8002014:	08002640 	.word	0x08002640
 8002018:	0800264a 	.word	0x0800264a
 800201c:	00000000 	.word	0x00000000
 8002020:	08001dd3 	.word	0x08001dd3
 8002024:	08002646 	.word	0x08002646

08002028 <_printf_common>:
 8002028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800202c:	4616      	mov	r6, r2
 800202e:	4698      	mov	r8, r3
 8002030:	688a      	ldr	r2, [r1, #8]
 8002032:	690b      	ldr	r3, [r1, #16]
 8002034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002038:	4293      	cmp	r3, r2
 800203a:	bfb8      	it	lt
 800203c:	4613      	movlt	r3, r2
 800203e:	6033      	str	r3, [r6, #0]
 8002040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002044:	4607      	mov	r7, r0
 8002046:	460c      	mov	r4, r1
 8002048:	b10a      	cbz	r2, 800204e <_printf_common+0x26>
 800204a:	3301      	adds	r3, #1
 800204c:	6033      	str	r3, [r6, #0]
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	0699      	lsls	r1, r3, #26
 8002052:	bf42      	ittt	mi
 8002054:	6833      	ldrmi	r3, [r6, #0]
 8002056:	3302      	addmi	r3, #2
 8002058:	6033      	strmi	r3, [r6, #0]
 800205a:	6825      	ldr	r5, [r4, #0]
 800205c:	f015 0506 	ands.w	r5, r5, #6
 8002060:	d106      	bne.n	8002070 <_printf_common+0x48>
 8002062:	f104 0a19 	add.w	sl, r4, #25
 8002066:	68e3      	ldr	r3, [r4, #12]
 8002068:	6832      	ldr	r2, [r6, #0]
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	42ab      	cmp	r3, r5
 800206e:	dc26      	bgt.n	80020be <_printf_common+0x96>
 8002070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	3b00      	subs	r3, #0
 8002078:	bf18      	it	ne
 800207a:	2301      	movne	r3, #1
 800207c:	0692      	lsls	r2, r2, #26
 800207e:	d42b      	bmi.n	80020d8 <_printf_common+0xb0>
 8002080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002084:	4641      	mov	r1, r8
 8002086:	4638      	mov	r0, r7
 8002088:	47c8      	blx	r9
 800208a:	3001      	adds	r0, #1
 800208c:	d01e      	beq.n	80020cc <_printf_common+0xa4>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	6922      	ldr	r2, [r4, #16]
 8002092:	f003 0306 	and.w	r3, r3, #6
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf02      	ittt	eq
 800209a:	68e5      	ldreq	r5, [r4, #12]
 800209c:	6833      	ldreq	r3, [r6, #0]
 800209e:	1aed      	subeq	r5, r5, r3
 80020a0:	68a3      	ldr	r3, [r4, #8]
 80020a2:	bf0c      	ite	eq
 80020a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020a8:	2500      	movne	r5, #0
 80020aa:	4293      	cmp	r3, r2
 80020ac:	bfc4      	itt	gt
 80020ae:	1a9b      	subgt	r3, r3, r2
 80020b0:	18ed      	addgt	r5, r5, r3
 80020b2:	2600      	movs	r6, #0
 80020b4:	341a      	adds	r4, #26
 80020b6:	42b5      	cmp	r5, r6
 80020b8:	d11a      	bne.n	80020f0 <_printf_common+0xc8>
 80020ba:	2000      	movs	r0, #0
 80020bc:	e008      	b.n	80020d0 <_printf_common+0xa8>
 80020be:	2301      	movs	r3, #1
 80020c0:	4652      	mov	r2, sl
 80020c2:	4641      	mov	r1, r8
 80020c4:	4638      	mov	r0, r7
 80020c6:	47c8      	blx	r9
 80020c8:	3001      	adds	r0, #1
 80020ca:	d103      	bne.n	80020d4 <_printf_common+0xac>
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d4:	3501      	adds	r5, #1
 80020d6:	e7c6      	b.n	8002066 <_printf_common+0x3e>
 80020d8:	18e1      	adds	r1, r4, r3
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	2030      	movs	r0, #48	@ 0x30
 80020de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80020e2:	4422      	add	r2, r4
 80020e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80020e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80020ec:	3302      	adds	r3, #2
 80020ee:	e7c7      	b.n	8002080 <_printf_common+0x58>
 80020f0:	2301      	movs	r3, #1
 80020f2:	4622      	mov	r2, r4
 80020f4:	4641      	mov	r1, r8
 80020f6:	4638      	mov	r0, r7
 80020f8:	47c8      	blx	r9
 80020fa:	3001      	adds	r0, #1
 80020fc:	d0e6      	beq.n	80020cc <_printf_common+0xa4>
 80020fe:	3601      	adds	r6, #1
 8002100:	e7d9      	b.n	80020b6 <_printf_common+0x8e>
	...

08002104 <_printf_i>:
 8002104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002108:	7e0f      	ldrb	r7, [r1, #24]
 800210a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800210c:	2f78      	cmp	r7, #120	@ 0x78
 800210e:	4691      	mov	r9, r2
 8002110:	4680      	mov	r8, r0
 8002112:	460c      	mov	r4, r1
 8002114:	469a      	mov	sl, r3
 8002116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800211a:	d807      	bhi.n	800212c <_printf_i+0x28>
 800211c:	2f62      	cmp	r7, #98	@ 0x62
 800211e:	d80a      	bhi.n	8002136 <_printf_i+0x32>
 8002120:	2f00      	cmp	r7, #0
 8002122:	f000 80d2 	beq.w	80022ca <_printf_i+0x1c6>
 8002126:	2f58      	cmp	r7, #88	@ 0x58
 8002128:	f000 80b9 	beq.w	800229e <_printf_i+0x19a>
 800212c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002134:	e03a      	b.n	80021ac <_printf_i+0xa8>
 8002136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800213a:	2b15      	cmp	r3, #21
 800213c:	d8f6      	bhi.n	800212c <_printf_i+0x28>
 800213e:	a101      	add	r1, pc, #4	@ (adr r1, 8002144 <_printf_i+0x40>)
 8002140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002144:	0800219d 	.word	0x0800219d
 8002148:	080021b1 	.word	0x080021b1
 800214c:	0800212d 	.word	0x0800212d
 8002150:	0800212d 	.word	0x0800212d
 8002154:	0800212d 	.word	0x0800212d
 8002158:	0800212d 	.word	0x0800212d
 800215c:	080021b1 	.word	0x080021b1
 8002160:	0800212d 	.word	0x0800212d
 8002164:	0800212d 	.word	0x0800212d
 8002168:	0800212d 	.word	0x0800212d
 800216c:	0800212d 	.word	0x0800212d
 8002170:	080022b1 	.word	0x080022b1
 8002174:	080021db 	.word	0x080021db
 8002178:	0800226b 	.word	0x0800226b
 800217c:	0800212d 	.word	0x0800212d
 8002180:	0800212d 	.word	0x0800212d
 8002184:	080022d3 	.word	0x080022d3
 8002188:	0800212d 	.word	0x0800212d
 800218c:	080021db 	.word	0x080021db
 8002190:	0800212d 	.word	0x0800212d
 8002194:	0800212d 	.word	0x0800212d
 8002198:	08002273 	.word	0x08002273
 800219c:	6833      	ldr	r3, [r6, #0]
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6032      	str	r2, [r6, #0]
 80021a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021ac:	2301      	movs	r3, #1
 80021ae:	e09d      	b.n	80022ec <_printf_i+0x1e8>
 80021b0:	6833      	ldr	r3, [r6, #0]
 80021b2:	6820      	ldr	r0, [r4, #0]
 80021b4:	1d19      	adds	r1, r3, #4
 80021b6:	6031      	str	r1, [r6, #0]
 80021b8:	0606      	lsls	r6, r0, #24
 80021ba:	d501      	bpl.n	80021c0 <_printf_i+0xbc>
 80021bc:	681d      	ldr	r5, [r3, #0]
 80021be:	e003      	b.n	80021c8 <_printf_i+0xc4>
 80021c0:	0645      	lsls	r5, r0, #25
 80021c2:	d5fb      	bpl.n	80021bc <_printf_i+0xb8>
 80021c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021c8:	2d00      	cmp	r5, #0
 80021ca:	da03      	bge.n	80021d4 <_printf_i+0xd0>
 80021cc:	232d      	movs	r3, #45	@ 0x2d
 80021ce:	426d      	negs	r5, r5
 80021d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021d4:	4859      	ldr	r0, [pc, #356]	@ (800233c <_printf_i+0x238>)
 80021d6:	230a      	movs	r3, #10
 80021d8:	e011      	b.n	80021fe <_printf_i+0xfa>
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	6833      	ldr	r3, [r6, #0]
 80021de:	0608      	lsls	r0, r1, #24
 80021e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80021e4:	d402      	bmi.n	80021ec <_printf_i+0xe8>
 80021e6:	0649      	lsls	r1, r1, #25
 80021e8:	bf48      	it	mi
 80021ea:	b2ad      	uxthmi	r5, r5
 80021ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80021ee:	4853      	ldr	r0, [pc, #332]	@ (800233c <_printf_i+0x238>)
 80021f0:	6033      	str	r3, [r6, #0]
 80021f2:	bf14      	ite	ne
 80021f4:	230a      	movne	r3, #10
 80021f6:	2308      	moveq	r3, #8
 80021f8:	2100      	movs	r1, #0
 80021fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80021fe:	6866      	ldr	r6, [r4, #4]
 8002200:	60a6      	str	r6, [r4, #8]
 8002202:	2e00      	cmp	r6, #0
 8002204:	bfa2      	ittt	ge
 8002206:	6821      	ldrge	r1, [r4, #0]
 8002208:	f021 0104 	bicge.w	r1, r1, #4
 800220c:	6021      	strge	r1, [r4, #0]
 800220e:	b90d      	cbnz	r5, 8002214 <_printf_i+0x110>
 8002210:	2e00      	cmp	r6, #0
 8002212:	d04b      	beq.n	80022ac <_printf_i+0x1a8>
 8002214:	4616      	mov	r6, r2
 8002216:	fbb5 f1f3 	udiv	r1, r5, r3
 800221a:	fb03 5711 	mls	r7, r3, r1, r5
 800221e:	5dc7      	ldrb	r7, [r0, r7]
 8002220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002224:	462f      	mov	r7, r5
 8002226:	42bb      	cmp	r3, r7
 8002228:	460d      	mov	r5, r1
 800222a:	d9f4      	bls.n	8002216 <_printf_i+0x112>
 800222c:	2b08      	cmp	r3, #8
 800222e:	d10b      	bne.n	8002248 <_printf_i+0x144>
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	07df      	lsls	r7, r3, #31
 8002234:	d508      	bpl.n	8002248 <_printf_i+0x144>
 8002236:	6923      	ldr	r3, [r4, #16]
 8002238:	6861      	ldr	r1, [r4, #4]
 800223a:	4299      	cmp	r1, r3
 800223c:	bfde      	ittt	le
 800223e:	2330      	movle	r3, #48	@ 0x30
 8002240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002244:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002248:	1b92      	subs	r2, r2, r6
 800224a:	6122      	str	r2, [r4, #16]
 800224c:	f8cd a000 	str.w	sl, [sp]
 8002250:	464b      	mov	r3, r9
 8002252:	aa03      	add	r2, sp, #12
 8002254:	4621      	mov	r1, r4
 8002256:	4640      	mov	r0, r8
 8002258:	f7ff fee6 	bl	8002028 <_printf_common>
 800225c:	3001      	adds	r0, #1
 800225e:	d14a      	bne.n	80022f6 <_printf_i+0x1f2>
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002264:	b004      	add	sp, #16
 8002266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	f043 0320 	orr.w	r3, r3, #32
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	4833      	ldr	r0, [pc, #204]	@ (8002340 <_printf_i+0x23c>)
 8002274:	2778      	movs	r7, #120	@ 0x78
 8002276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	6831      	ldr	r1, [r6, #0]
 800227e:	061f      	lsls	r7, r3, #24
 8002280:	f851 5b04 	ldr.w	r5, [r1], #4
 8002284:	d402      	bmi.n	800228c <_printf_i+0x188>
 8002286:	065f      	lsls	r7, r3, #25
 8002288:	bf48      	it	mi
 800228a:	b2ad      	uxthmi	r5, r5
 800228c:	6031      	str	r1, [r6, #0]
 800228e:	07d9      	lsls	r1, r3, #31
 8002290:	bf44      	itt	mi
 8002292:	f043 0320 	orrmi.w	r3, r3, #32
 8002296:	6023      	strmi	r3, [r4, #0]
 8002298:	b11d      	cbz	r5, 80022a2 <_printf_i+0x19e>
 800229a:	2310      	movs	r3, #16
 800229c:	e7ac      	b.n	80021f8 <_printf_i+0xf4>
 800229e:	4827      	ldr	r0, [pc, #156]	@ (800233c <_printf_i+0x238>)
 80022a0:	e7e9      	b.n	8002276 <_printf_i+0x172>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f023 0320 	bic.w	r3, r3, #32
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	e7f6      	b.n	800229a <_printf_i+0x196>
 80022ac:	4616      	mov	r6, r2
 80022ae:	e7bd      	b.n	800222c <_printf_i+0x128>
 80022b0:	6833      	ldr	r3, [r6, #0]
 80022b2:	6825      	ldr	r5, [r4, #0]
 80022b4:	6961      	ldr	r1, [r4, #20]
 80022b6:	1d18      	adds	r0, r3, #4
 80022b8:	6030      	str	r0, [r6, #0]
 80022ba:	062e      	lsls	r6, r5, #24
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	d501      	bpl.n	80022c4 <_printf_i+0x1c0>
 80022c0:	6019      	str	r1, [r3, #0]
 80022c2:	e002      	b.n	80022ca <_printf_i+0x1c6>
 80022c4:	0668      	lsls	r0, r5, #25
 80022c6:	d5fb      	bpl.n	80022c0 <_printf_i+0x1bc>
 80022c8:	8019      	strh	r1, [r3, #0]
 80022ca:	2300      	movs	r3, #0
 80022cc:	6123      	str	r3, [r4, #16]
 80022ce:	4616      	mov	r6, r2
 80022d0:	e7bc      	b.n	800224c <_printf_i+0x148>
 80022d2:	6833      	ldr	r3, [r6, #0]
 80022d4:	1d1a      	adds	r2, r3, #4
 80022d6:	6032      	str	r2, [r6, #0]
 80022d8:	681e      	ldr	r6, [r3, #0]
 80022da:	6862      	ldr	r2, [r4, #4]
 80022dc:	2100      	movs	r1, #0
 80022de:	4630      	mov	r0, r6
 80022e0:	f7fd ff7e 	bl	80001e0 <memchr>
 80022e4:	b108      	cbz	r0, 80022ea <_printf_i+0x1e6>
 80022e6:	1b80      	subs	r0, r0, r6
 80022e8:	6060      	str	r0, [r4, #4]
 80022ea:	6863      	ldr	r3, [r4, #4]
 80022ec:	6123      	str	r3, [r4, #16]
 80022ee:	2300      	movs	r3, #0
 80022f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022f4:	e7aa      	b.n	800224c <_printf_i+0x148>
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	4632      	mov	r2, r6
 80022fa:	4649      	mov	r1, r9
 80022fc:	4640      	mov	r0, r8
 80022fe:	47d0      	blx	sl
 8002300:	3001      	adds	r0, #1
 8002302:	d0ad      	beq.n	8002260 <_printf_i+0x15c>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	079b      	lsls	r3, r3, #30
 8002308:	d413      	bmi.n	8002332 <_printf_i+0x22e>
 800230a:	68e0      	ldr	r0, [r4, #12]
 800230c:	9b03      	ldr	r3, [sp, #12]
 800230e:	4298      	cmp	r0, r3
 8002310:	bfb8      	it	lt
 8002312:	4618      	movlt	r0, r3
 8002314:	e7a6      	b.n	8002264 <_printf_i+0x160>
 8002316:	2301      	movs	r3, #1
 8002318:	4632      	mov	r2, r6
 800231a:	4649      	mov	r1, r9
 800231c:	4640      	mov	r0, r8
 800231e:	47d0      	blx	sl
 8002320:	3001      	adds	r0, #1
 8002322:	d09d      	beq.n	8002260 <_printf_i+0x15c>
 8002324:	3501      	adds	r5, #1
 8002326:	68e3      	ldr	r3, [r4, #12]
 8002328:	9903      	ldr	r1, [sp, #12]
 800232a:	1a5b      	subs	r3, r3, r1
 800232c:	42ab      	cmp	r3, r5
 800232e:	dcf2      	bgt.n	8002316 <_printf_i+0x212>
 8002330:	e7eb      	b.n	800230a <_printf_i+0x206>
 8002332:	2500      	movs	r5, #0
 8002334:	f104 0619 	add.w	r6, r4, #25
 8002338:	e7f5      	b.n	8002326 <_printf_i+0x222>
 800233a:	bf00      	nop
 800233c:	08002651 	.word	0x08002651
 8002340:	08002662 	.word	0x08002662

08002344 <__sflush_r>:
 8002344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234c:	0716      	lsls	r6, r2, #28
 800234e:	4605      	mov	r5, r0
 8002350:	460c      	mov	r4, r1
 8002352:	d454      	bmi.n	80023fe <__sflush_r+0xba>
 8002354:	684b      	ldr	r3, [r1, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	dc02      	bgt.n	8002360 <__sflush_r+0x1c>
 800235a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	dd48      	ble.n	80023f2 <__sflush_r+0xae>
 8002360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002362:	2e00      	cmp	r6, #0
 8002364:	d045      	beq.n	80023f2 <__sflush_r+0xae>
 8002366:	2300      	movs	r3, #0
 8002368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800236c:	682f      	ldr	r7, [r5, #0]
 800236e:	6a21      	ldr	r1, [r4, #32]
 8002370:	602b      	str	r3, [r5, #0]
 8002372:	d030      	beq.n	80023d6 <__sflush_r+0x92>
 8002374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	0759      	lsls	r1, r3, #29
 800237a:	d505      	bpl.n	8002388 <__sflush_r+0x44>
 800237c:	6863      	ldr	r3, [r4, #4]
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002382:	b10b      	cbz	r3, 8002388 <__sflush_r+0x44>
 8002384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002386:	1ad2      	subs	r2, r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800238c:	6a21      	ldr	r1, [r4, #32]
 800238e:	4628      	mov	r0, r5
 8002390:	47b0      	blx	r6
 8002392:	1c43      	adds	r3, r0, #1
 8002394:	89a3      	ldrh	r3, [r4, #12]
 8002396:	d106      	bne.n	80023a6 <__sflush_r+0x62>
 8002398:	6829      	ldr	r1, [r5, #0]
 800239a:	291d      	cmp	r1, #29
 800239c:	d82b      	bhi.n	80023f6 <__sflush_r+0xb2>
 800239e:	4a2a      	ldr	r2, [pc, #168]	@ (8002448 <__sflush_r+0x104>)
 80023a0:	410a      	asrs	r2, r1
 80023a2:	07d6      	lsls	r6, r2, #31
 80023a4:	d427      	bmi.n	80023f6 <__sflush_r+0xb2>
 80023a6:	2200      	movs	r2, #0
 80023a8:	6062      	str	r2, [r4, #4]
 80023aa:	04d9      	lsls	r1, r3, #19
 80023ac:	6922      	ldr	r2, [r4, #16]
 80023ae:	6022      	str	r2, [r4, #0]
 80023b0:	d504      	bpl.n	80023bc <__sflush_r+0x78>
 80023b2:	1c42      	adds	r2, r0, #1
 80023b4:	d101      	bne.n	80023ba <__sflush_r+0x76>
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	b903      	cbnz	r3, 80023bc <__sflush_r+0x78>
 80023ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80023bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023be:	602f      	str	r7, [r5, #0]
 80023c0:	b1b9      	cbz	r1, 80023f2 <__sflush_r+0xae>
 80023c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023c6:	4299      	cmp	r1, r3
 80023c8:	d002      	beq.n	80023d0 <__sflush_r+0x8c>
 80023ca:	4628      	mov	r0, r5
 80023cc:	f7ff fbf2 	bl	8001bb4 <_free_r>
 80023d0:	2300      	movs	r3, #0
 80023d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80023d4:	e00d      	b.n	80023f2 <__sflush_r+0xae>
 80023d6:	2301      	movs	r3, #1
 80023d8:	4628      	mov	r0, r5
 80023da:	47b0      	blx	r6
 80023dc:	4602      	mov	r2, r0
 80023de:	1c50      	adds	r0, r2, #1
 80023e0:	d1c9      	bne.n	8002376 <__sflush_r+0x32>
 80023e2:	682b      	ldr	r3, [r5, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0c6      	beq.n	8002376 <__sflush_r+0x32>
 80023e8:	2b1d      	cmp	r3, #29
 80023ea:	d001      	beq.n	80023f0 <__sflush_r+0xac>
 80023ec:	2b16      	cmp	r3, #22
 80023ee:	d11e      	bne.n	800242e <__sflush_r+0xea>
 80023f0:	602f      	str	r7, [r5, #0]
 80023f2:	2000      	movs	r0, #0
 80023f4:	e022      	b.n	800243c <__sflush_r+0xf8>
 80023f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	e01b      	b.n	8002436 <__sflush_r+0xf2>
 80023fe:	690f      	ldr	r7, [r1, #16]
 8002400:	2f00      	cmp	r7, #0
 8002402:	d0f6      	beq.n	80023f2 <__sflush_r+0xae>
 8002404:	0793      	lsls	r3, r2, #30
 8002406:	680e      	ldr	r6, [r1, #0]
 8002408:	bf08      	it	eq
 800240a:	694b      	ldreq	r3, [r1, #20]
 800240c:	600f      	str	r7, [r1, #0]
 800240e:	bf18      	it	ne
 8002410:	2300      	movne	r3, #0
 8002412:	eba6 0807 	sub.w	r8, r6, r7
 8002416:	608b      	str	r3, [r1, #8]
 8002418:	f1b8 0f00 	cmp.w	r8, #0
 800241c:	dde9      	ble.n	80023f2 <__sflush_r+0xae>
 800241e:	6a21      	ldr	r1, [r4, #32]
 8002420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002422:	4643      	mov	r3, r8
 8002424:	463a      	mov	r2, r7
 8002426:	4628      	mov	r0, r5
 8002428:	47b0      	blx	r6
 800242a:	2800      	cmp	r0, #0
 800242c:	dc08      	bgt.n	8002440 <__sflush_r+0xfc>
 800242e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002436:	81a3      	strh	r3, [r4, #12]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002440:	4407      	add	r7, r0
 8002442:	eba8 0800 	sub.w	r8, r8, r0
 8002446:	e7e7      	b.n	8002418 <__sflush_r+0xd4>
 8002448:	dfbffffe 	.word	0xdfbffffe

0800244c <_fflush_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	690b      	ldr	r3, [r1, #16]
 8002450:	4605      	mov	r5, r0
 8002452:	460c      	mov	r4, r1
 8002454:	b913      	cbnz	r3, 800245c <_fflush_r+0x10>
 8002456:	2500      	movs	r5, #0
 8002458:	4628      	mov	r0, r5
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	b118      	cbz	r0, 8002466 <_fflush_r+0x1a>
 800245e:	6a03      	ldr	r3, [r0, #32]
 8002460:	b90b      	cbnz	r3, 8002466 <_fflush_r+0x1a>
 8002462:	f7ff f9ad 	bl	80017c0 <__sinit>
 8002466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f3      	beq.n	8002456 <_fflush_r+0xa>
 800246e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002470:	07d0      	lsls	r0, r2, #31
 8002472:	d404      	bmi.n	800247e <_fflush_r+0x32>
 8002474:	0599      	lsls	r1, r3, #22
 8002476:	d402      	bmi.n	800247e <_fflush_r+0x32>
 8002478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800247a:	f7ff fb98 	bl	8001bae <__retarget_lock_acquire_recursive>
 800247e:	4628      	mov	r0, r5
 8002480:	4621      	mov	r1, r4
 8002482:	f7ff ff5f 	bl	8002344 <__sflush_r>
 8002486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002488:	07da      	lsls	r2, r3, #31
 800248a:	4605      	mov	r5, r0
 800248c:	d4e4      	bmi.n	8002458 <_fflush_r+0xc>
 800248e:	89a3      	ldrh	r3, [r4, #12]
 8002490:	059b      	lsls	r3, r3, #22
 8002492:	d4e1      	bmi.n	8002458 <_fflush_r+0xc>
 8002494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002496:	f7ff fb8b 	bl	8001bb0 <__retarget_lock_release_recursive>
 800249a:	e7dd      	b.n	8002458 <_fflush_r+0xc>

0800249c <__swhatbuf_r>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	460c      	mov	r4, r1
 80024a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a4:	2900      	cmp	r1, #0
 80024a6:	b096      	sub	sp, #88	@ 0x58
 80024a8:	4615      	mov	r5, r2
 80024aa:	461e      	mov	r6, r3
 80024ac:	da0d      	bge.n	80024ca <__swhatbuf_r+0x2e>
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2340      	movne	r3, #64	@ 0x40
 80024bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80024c0:	2000      	movs	r0, #0
 80024c2:	6031      	str	r1, [r6, #0]
 80024c4:	602b      	str	r3, [r5, #0]
 80024c6:	b016      	add	sp, #88	@ 0x58
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
 80024ca:	466a      	mov	r2, sp
 80024cc:	f000 f848 	bl	8002560 <_fstat_r>
 80024d0:	2800      	cmp	r0, #0
 80024d2:	dbec      	blt.n	80024ae <__swhatbuf_r+0x12>
 80024d4:	9901      	ldr	r1, [sp, #4]
 80024d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80024da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80024de:	4259      	negs	r1, r3
 80024e0:	4159      	adcs	r1, r3
 80024e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e6:	e7eb      	b.n	80024c0 <__swhatbuf_r+0x24>

080024e8 <__smakebuf_r>:
 80024e8:	898b      	ldrh	r3, [r1, #12]
 80024ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024ec:	079d      	lsls	r5, r3, #30
 80024ee:	4606      	mov	r6, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	d507      	bpl.n	8002504 <__smakebuf_r+0x1c>
 80024f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024f8:	6023      	str	r3, [r4, #0]
 80024fa:	6123      	str	r3, [r4, #16]
 80024fc:	2301      	movs	r3, #1
 80024fe:	6163      	str	r3, [r4, #20]
 8002500:	b003      	add	sp, #12
 8002502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002504:	ab01      	add	r3, sp, #4
 8002506:	466a      	mov	r2, sp
 8002508:	f7ff ffc8 	bl	800249c <__swhatbuf_r>
 800250c:	9f00      	ldr	r7, [sp, #0]
 800250e:	4605      	mov	r5, r0
 8002510:	4639      	mov	r1, r7
 8002512:	4630      	mov	r0, r6
 8002514:	f7ff fbba 	bl	8001c8c <_malloc_r>
 8002518:	b948      	cbnz	r0, 800252e <__smakebuf_r+0x46>
 800251a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251e:	059a      	lsls	r2, r3, #22
 8002520:	d4ee      	bmi.n	8002500 <__smakebuf_r+0x18>
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	81a3      	strh	r3, [r4, #12]
 800252c:	e7e2      	b.n	80024f4 <__smakebuf_r+0xc>
 800252e:	89a3      	ldrh	r3, [r4, #12]
 8002530:	6020      	str	r0, [r4, #0]
 8002532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002536:	81a3      	strh	r3, [r4, #12]
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800253e:	b15b      	cbz	r3, 8002558 <__smakebuf_r+0x70>
 8002540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002544:	4630      	mov	r0, r6
 8002546:	f000 f81d 	bl	8002584 <_isatty_r>
 800254a:	b128      	cbz	r0, 8002558 <__smakebuf_r+0x70>
 800254c:	89a3      	ldrh	r3, [r4, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	81a3      	strh	r3, [r4, #12]
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	431d      	orrs	r5, r3
 800255c:	81a5      	strh	r5, [r4, #12]
 800255e:	e7cf      	b.n	8002500 <__smakebuf_r+0x18>

08002560 <_fstat_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4d07      	ldr	r5, [pc, #28]	@ (8002580 <_fstat_r+0x20>)
 8002564:	2300      	movs	r3, #0
 8002566:	4604      	mov	r4, r0
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	602b      	str	r3, [r5, #0]
 800256e:	f7fe f9b3 	bl	80008d8 <_fstat>
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	d102      	bne.n	800257c <_fstat_r+0x1c>
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	b103      	cbz	r3, 800257c <_fstat_r+0x1c>
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	bd38      	pop	{r3, r4, r5, pc}
 800257e:	bf00      	nop
 8002580:	2000021c 	.word	0x2000021c

08002584 <_isatty_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4d06      	ldr	r5, [pc, #24]	@ (80025a0 <_isatty_r+0x1c>)
 8002588:	2300      	movs	r3, #0
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	602b      	str	r3, [r5, #0]
 8002590:	f7fe f9a7 	bl	80008e2 <_isatty>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_isatty_r+0x1a>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	b103      	cbz	r3, 800259e <_isatty_r+0x1a>
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	2000021c 	.word	0x2000021c

080025a4 <_sbrk_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4d06      	ldr	r5, [pc, #24]	@ (80025c0 <_sbrk_r+0x1c>)
 80025a8:	2300      	movs	r3, #0
 80025aa:	4604      	mov	r4, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	602b      	str	r3, [r5, #0]
 80025b0:	f7fe f99c 	bl	80008ec <_sbrk>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	d102      	bne.n	80025be <_sbrk_r+0x1a>
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	b103      	cbz	r3, 80025be <_sbrk_r+0x1a>
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	2000021c 	.word	0x2000021c

080025c4 <_init>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	bf00      	nop
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr

080025d0 <_fini>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr
