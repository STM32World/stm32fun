
blackpill_blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002480  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002620  08002620  00003620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b8  080026b8  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080026b8  080026b8  000036b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c0  080026c0  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c0  080026c0  000036c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026c4  080026c4  000036c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080026c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08002738  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08002738  0000422c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000952c  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ba  00000000  00000000  0000d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00003fd2  00000000  00000000  0000ed86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00012d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051a  00000000  00000000  00013428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000162d8  00000000  00000000  00013942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000990b  00000000  00000000  00029c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000876ef  00000000  00000000  00033525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bac14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001864  00000000  00000000  000bac58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000bc4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002608 	.word	0x08002608

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002608 	.word	0x08002608

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	b089      	sub	sp, #36	@ 0x24
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005b0:	2400      	movs	r4, #0
 80005b2:	9403      	str	r4, [sp, #12]
 80005b4:	9404      	str	r4, [sp, #16]
 80005b6:	9405      	str	r4, [sp, #20]
 80005b8:	9406      	str	r4, [sp, #24]
 80005ba:	9407      	str	r4, [sp, #28]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005bc:	9400      	str	r4, [sp, #0]
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <MX_GPIO_Init+0x9c>)
 80005c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c2:	f042 0204 	orr.w	r2, r2, #4
 80005c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ca:	f002 0204 	and.w	r2, r2, #4
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	9401      	str	r4, [sp, #4]
 80005d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005da:	631a      	str	r2, [r3, #48]	@ 0x30
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005e2:	9201      	str	r2, [sp, #4]
 80005e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	9402      	str	r4, [sp, #8]
 80005e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	9b02      	ldr	r3, [sp, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005fa:	4d14      	ldr	r5, [pc, #80]	@ (800064c <MX_GPIO_Init+0xa0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	4628      	mov	r0, r5
 8000604:	f000 fba0 	bl	8000d48 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800060e:	2311      	movs	r3, #17
 8000610:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000616:	a903      	add	r1, sp, #12
 8000618:	4628      	mov	r0, r5
 800061a:	f000 fab1 	bl	8000b80 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 800061e:	2301      	movs	r3, #1
 8000620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000622:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
 8000626:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000628:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800062a:	a903      	add	r1, sp, #12
 800062c:	4808      	ldr	r0, [pc, #32]	@ (8000650 <MX_GPIO_Init+0xa4>)
 800062e:	f000 faa7 	bl	8000b80 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000632:	4622      	mov	r2, r4
 8000634:	4621      	mov	r1, r4
 8000636:	2006      	movs	r0, #6
 8000638:	f000 fa7a 	bl	8000b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800063c:	2006      	movs	r0, #6
 800063e:	f000 fa87 	bl	8000b50 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000642:	b009      	add	sp, #36	@ 0x24
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020800 	.word	0x40020800
 8000650:	40020000 	.word	0x40020000

08000654 <_write>:
    if (fd == 1 || fd == 2) {
 8000654:	3801      	subs	r0, #1
 8000656:	2801      	cmp	r0, #1
 8000658:	d80a      	bhi.n	8000670 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800065a:	b510      	push	{r4, lr}
 800065c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000662:	b292      	uxth	r2, r2
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <_write+0x28>)
 8000666:	f000 ffdc 	bl	8001622 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800066a:	b920      	cbnz	r0, 8000676 <_write+0x22>
            return len;
 800066c:	4620      	mov	r0, r4
}
 800066e:	bd10      	pop	{r4, pc}
    return -1;
 8000670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000674:	4770      	bx	lr
            return -1;
 8000676:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800067a:	e7f8      	b.n	800066e <_write+0x1a>
 800067c:	20000090 	.word	0x20000090

08000680 <HAL_GPIO_EXTI_Callback>:
    if (GPIO_Pin == BTN_Pin) {
 8000680:	2801      	cmp	r0, #1
 8000682:	d000      	beq.n	8000686 <HAL_GPIO_EXTI_Callback+0x6>
}
 8000684:	4770      	bx	lr
        btn_press = 1;
 8000686:	4b02      	ldr	r3, [pc, #8]	@ (8000690 <HAL_GPIO_EXTI_Callback+0x10>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
}
 800068c:	e7fa      	b.n	8000684 <HAL_GPIO_EXTI_Callback+0x4>
 800068e:	bf00      	nop
 8000690:	2000008d 	.word	0x2000008d

08000694 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000696:	e7fe      	b.n	8000696 <Error_Handler+0x2>

08000698 <MX_USART1_UART_Init>:
{
 8000698:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800069a:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <MX_USART1_UART_Init+0x28>)
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_USART1_UART_Init+0x2c>)
 800069e:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 2000000;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART1_UART_Init+0x30>)
 80006a2:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a4:	2300      	movs	r3, #0
 80006a6:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	220c      	movs	r2, #12
 80006ae:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b0:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b2:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b4:	f000 ff85 	bl	80015c2 <HAL_UART_Init>
 80006b8:	b900      	cbnz	r0, 80006bc <MX_USART1_UART_Init+0x24>
}
 80006ba:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006bc:	f7ff ffea 	bl	8000694 <Error_Handler>
 80006c0:	20000090 	.word	0x20000090
 80006c4:	40011000 	.word	0x40011000
 80006c8:	001e8480 	.word	0x001e8480

080006cc <SystemClock_Config>:
{
 80006cc:	b500      	push	{lr}
 80006ce:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006d0:	2230      	movs	r2, #48	@ 0x30
 80006d2:	2100      	movs	r1, #0
 80006d4:	a808      	add	r0, sp, #32
 80006d6:	f001 fa15 	bl	8001b04 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006da:	2300      	movs	r3, #0
 80006dc:	9303      	str	r3, [sp, #12]
 80006de:	9304      	str	r3, [sp, #16]
 80006e0:	9305      	str	r3, [sp, #20]
 80006e2:	9306      	str	r3, [sp, #24]
 80006e4:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000768 <SystemClock_Config+0x9c>)
 80006ea:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80006ec:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80006f0:	6411      	str	r1, [r2, #64]	@ 0x40
 80006f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80006f4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <SystemClock_Config+0xa0>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800071a:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000724:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 8000726:	220c      	movs	r2, #12
 8000728:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 800072a:	2260      	movs	r2, #96	@ 0x60
 800072c:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	a808      	add	r0, sp, #32
 8000736:	f000 fb25 	bl	8000d84 <HAL_RCC_OscConfig>
 800073a:	b988      	cbnz	r0, 8000760 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800074c:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000750:	2103      	movs	r1, #3
 8000752:	a803      	add	r0, sp, #12
 8000754:	f000 fd66 	bl	8001224 <HAL_RCC_ClockConfig>
 8000758:	b920      	cbnz	r0, 8000764 <SystemClock_Config+0x98>
}
 800075a:	b015      	add	sp, #84	@ 0x54
 800075c:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000760:	f7ff ff98 	bl	8000694 <Error_Handler>
        Error_Handler();
 8000764:	f7ff ff96 	bl	8000694 <Error_Handler>
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <main>:
{
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_Init();
 8000772:	f000 f95d 	bl	8000a30 <HAL_Init>
    SystemClock_Config();
 8000776:	f7ff ffa9 	bl	80006cc <SystemClock_Config>
    MX_GPIO_Init();
 800077a:	f7ff ff17 	bl	80005ac <MX_GPIO_Init>
    MX_USART1_UART_Init();
 800077e:	f7ff ff8b 	bl	8000698 <MX_USART1_UART_Init>
    printf("Starting blackpill_blink3\n");
 8000782:	4821      	ldr	r0, [pc, #132]	@ (8000808 <main+0x98>)
 8000784:	f001 f8de 	bl	8001944 <puts>
    uint32_t now = 0, next_blink = 500, next_tick = 1000, loop_cnt = 0;
 8000788:	2500      	movs	r5, #0
 800078a:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 800078e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8000792:	e02c      	b.n	80007ee <main+0x7e>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000798:	481c      	ldr	r0, [pc, #112]	@ (800080c <main+0x9c>)
 800079a:	f000 fadb 	bl	8000d54 <HAL_GPIO_TogglePin>
            next_blink = now + blink_delays[blink_delay];
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <main+0xa0>)
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <main+0xa4>)
 80007a4:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
 80007a8:	4426      	add	r6, r4
 80007aa:	e025      	b.n	80007f8 <main+0x88>
            printf("Tick %lu (loop count = %lu)\n", now / 1000, loop_cnt);
 80007ac:	491a      	ldr	r1, [pc, #104]	@ (8000818 <main+0xa8>)
 80007ae:	fba1 3104 	umull	r3, r1, r1, r4
 80007b2:	462a      	mov	r2, r5
 80007b4:	0989      	lsrs	r1, r1, #6
 80007b6:	4819      	ldr	r0, [pc, #100]	@ (800081c <main+0xac>)
 80007b8:	f001 f85c 	bl	8001874 <iprintf>
            next_tick = now + 1000;
 80007bc:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
            loop_cnt = 0;
 80007c0:	2500      	movs	r5, #0
 80007c2:	e01b      	b.n	80007fc <main+0x8c>
            printf("Button pressed\n");
 80007c4:	4816      	ldr	r0, [pc, #88]	@ (8000820 <main+0xb0>)
 80007c6:	f001 f8bd 	bl	8001944 <puts>
            blink_delay = (++blink_delay) % blink_delays_count;
 80007ca:	4911      	ldr	r1, [pc, #68]	@ (8000810 <main+0xa0>)
 80007cc:	780b      	ldrb	r3, [r1, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	700b      	strb	r3, [r1, #0]
 80007d4:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <main+0xb4>)
 80007d6:	fba2 0203 	umull	r0, r2, r2, r3
 80007da:	f002 00fe 	and.w	r0, r2, #254	@ 0xfe
 80007de:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	700b      	strb	r3, [r1, #0]
            btn_press = 0;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <main+0xb8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
        ++loop_cnt;
 80007ec:	3501      	adds	r5, #1
        now = HAL_GetTick();
 80007ee:	f000 f945 	bl	8000a7c <HAL_GetTick>
 80007f2:	4604      	mov	r4, r0
        if (now >= next_blink) {
 80007f4:	4286      	cmp	r6, r0
 80007f6:	d9cd      	bls.n	8000794 <main+0x24>
        if (now >= next_tick) {
 80007f8:	42a7      	cmp	r7, r4
 80007fa:	d9d7      	bls.n	80007ac <main+0x3c>
        if (btn_press) {
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <main+0xb8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f3      	beq.n	80007ec <main+0x7c>
 8000804:	e7de      	b.n	80007c4 <main+0x54>
 8000806:	bf00      	nop
 8000808:	08002620 	.word	0x08002620
 800080c:	40020800 	.word	0x40020800
 8000810:	2000008c 	.word	0x2000008c
 8000814:	20000000 	.word	0x20000000
 8000818:	10624dd3 	.word	0x10624dd3
 800081c:	0800263c 	.word	0x0800263c
 8000820:	0800265c 	.word	0x0800265c
 8000824:	aaaaaaab 	.word	0xaaaaaaab
 8000828:	2000008d 	.word	0x2000008d

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2100      	movs	r1, #0
 8000830:	9100      	str	r1, [sp, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <HAL_MspInit+0x34>)
 8000834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800083a:	645a      	str	r2, [r3, #68]	@ 0x44
 800083c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800083e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	9101      	str	r1, [sp, #4]
 8000848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800084e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	b002      	add	sp, #8
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b500      	push	{lr}
 8000866:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	2300      	movs	r3, #0
 800086a:	9303      	str	r3, [sp, #12]
 800086c:	9304      	str	r3, [sp, #16]
 800086e:	9305      	str	r3, [sp, #20]
 8000870:	9306      	str	r3, [sp, #24]
 8000872:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000874:	6802      	ldr	r2, [r0, #0]
 8000876:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800087a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800087e:	429a      	cmp	r2, r3
 8000880:	d002      	beq.n	8000888 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000882:	b009      	add	sp, #36	@ 0x24
 8000884:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000888:	2100      	movs	r1, #0
 800088a:	9101      	str	r1, [sp, #4]
 800088c:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000892:	f042 0210 	orr.w	r2, r2, #16
 8000896:	645a      	str	r2, [r3, #68]	@ 0x44
 8000898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800089a:	f002 0210 	and.w	r2, r2, #16
 800089e:	9201      	str	r2, [sp, #4]
 80008a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	9102      	str	r1, [sp, #8]
 80008a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008a6:	f042 0201 	orr.w	r2, r2, #1
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c4:	2307      	movs	r3, #7
 80008c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	a903      	add	r1, sp, #12
 80008ca:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <HAL_UART_MspInit+0x70>)
 80008cc:	f000 f958 	bl	8000b80 <HAL_GPIO_Init>
}
 80008d0:	e7d7      	b.n	8000882 <HAL_UART_MspInit+0x1e>
 80008d2:	bf00      	nop
 80008d4:	40020000 	.word	0x40020000

080008d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler>

080008da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler>

080008dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler>

080008de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler>

080008e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler>

080008e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f8bb 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bd08      	pop	{r3, pc}

080008f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fa38 	bl	8000d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008f8:	bd08      	pop	{r3, pc}

080008fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fa:	b570      	push	{r4, r5, r6, lr}
 80008fc:	460c      	mov	r4, r1
 80008fe:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	2500      	movs	r5, #0
 8000902:	e006      	b.n	8000912 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000904:	f3af 8000 	nop.w
 8000908:	4621      	mov	r1, r4
 800090a:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000910:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	42b5      	cmp	r5, r6
 8000914:	dbf6      	blt.n	8000904 <_read+0xa>
  }

  return len;
}
 8000916:	4630      	mov	r0, r6
 8000918:	bd70      	pop	{r4, r5, r6, pc}

0800091a <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800091a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800091e:	4770      	bx	lr

08000920 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000926:	2000      	movs	r0, #0
 8000928:	4770      	bx	lr

0800092a <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800092a:	2001      	movs	r0, #1
 800092c:	4770      	bx	lr

0800092e <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800092e:	2000      	movs	r0, #0
 8000930:	4770      	bx	lr
	...

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b510      	push	{r4, lr}
 8000936:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <_sbrk+0x38>)
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <_sbrk+0x40>)
 800093e:	6800      	ldr	r0, [r0, #0]
 8000940:	b140      	cbz	r0, 8000954 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	480c      	ldr	r0, [pc, #48]	@ (8000974 <_sbrk+0x40>)
 8000944:	6800      	ldr	r0, [r0, #0]
 8000946:	4403      	add	r3, r0
 8000948:	1a52      	subs	r2, r2, r1
 800094a:	4293      	cmp	r3, r2
 800094c:	d806      	bhi.n	800095c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800094e:	4a09      	ldr	r2, [pc, #36]	@ (8000974 <_sbrk+0x40>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000952:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <_sbrk+0x40>)
 8000956:	4c08      	ldr	r4, [pc, #32]	@ (8000978 <_sbrk+0x44>)
 8000958:	6004      	str	r4, [r0, #0]
 800095a:	e7f2      	b.n	8000942 <_sbrk+0xe>
    errno = ENOMEM;
 800095c:	f001 f920 	bl	8001ba0 <__errno>
 8000960:	230c      	movs	r3, #12
 8000962:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000968:	e7f3      	b.n	8000952 <_sbrk+0x1e>
 800096a:	bf00      	nop
 800096c:	20020000 	.word	0x20020000
 8000970:	00000400 	.word	0x00000400
 8000974:	200000d8 	.word	0x200000d8
 8000978:	20000230 	.word	0x20000230

0800097c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4a03      	ldr	r2, [pc, #12]	@ (800098c <SystemInit+0x10>)
 800097e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000986:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000994:	f7ff fff2 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	@ (80009dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f001 f8f5 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fed5 	bl	8000770 <main>
  bx  lr    
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009d4:	080026c8 	.word	0x080026c8
  ldr r2, =_sbss
 80009d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009dc:	2000022c 	.word	0x2000022c

080009e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b510      	push	{r4, lr}
 80009e6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_InitTick+0x40>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <HAL_InitTick+0x44>)
 80009f6:	6810      	ldr	r0, [r2, #0]
 80009f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80009fc:	f000 f8ac 	bl	8000b58 <HAL_SYSTICK_Config>
 8000a00:	b968      	cbnz	r0, 8000a1e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	2c0f      	cmp	r4, #15
 8000a04:	d901      	bls.n	8000a0a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a06:	2001      	movs	r0, #1
 8000a08:	e00a      	b.n	8000a20 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a12:	f000 f88d 	bl	8000b30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_InitTick+0x48>)
 8000a18:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
}
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	bf00      	nop
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000010 	.word	0x20000010

08000a30 <HAL_Init>:
{
 8000a30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_Init+0x30>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f85d 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f7ff ffc6 	bl	80009e4 <HAL_InitTick>
  HAL_MspInit();
 8000a58:	f7ff fee8 	bl	800082c <HAL_MspInit>
}
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	bd08      	pop	{r3, pc}
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <HAL_IncTick+0x10>)
 8000a66:	6811      	ldr	r1, [r2, #0]
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_IncTick+0x14>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200000dc 	.word	0x200000dc
 8000a78:	2000000c 	.word	0x2000000c

08000a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a7c:	4b01      	ldr	r3, [pc, #4]	@ (8000a84 <HAL_GetTick+0x8>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200000dc 	.word	0x200000dc

08000a88 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	db07      	blt.n	8000a9c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8c:	f000 021f 	and.w	r2, r0, #31
 8000a90:	0940      	lsrs	r0, r0, #5
 8000a92:	2301      	movs	r3, #1
 8000a94:	4093      	lsls	r3, r2
 8000a96:	4a02      	ldr	r2, [pc, #8]	@ (8000aa0 <__NVIC_EnableIRQ+0x18>)
 8000a98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	db08      	blt.n	8000aba <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	0109      	lsls	r1, r1, #4
 8000aaa:	b2c9      	uxtb	r1, r1
 8000aac:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ab0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ab4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ab8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	f000 000f 	and.w	r0, r0, #15
 8000abe:	0109      	lsls	r1, r1, #4
 8000ac0:	b2c9      	uxtb	r1, r1
 8000ac2:	4b01      	ldr	r3, [pc, #4]	@ (8000ac8 <__NVIC_SetPriority+0x24>)
 8000ac4:	5419      	strb	r1, [r3, r0]
  }
}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed14 	.word	0xe000ed14

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ace:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad2:	f1c0 0c07 	rsb	ip, r0, #7
 8000ad6:	f1bc 0f04 	cmp.w	ip, #4
 8000ada:	bf28      	it	cs
 8000adc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae0:	1d03      	adds	r3, r0, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d90f      	bls.n	8000b06 <NVIC_EncodePriority+0x3a>
 8000ae6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000aec:	fa0e f00c 	lsl.w	r0, lr, ip
 8000af0:	ea21 0100 	bic.w	r1, r1, r0
 8000af4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000afa:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000afe:	ea41 0002 	orr.w	r0, r1, r2
 8000b02:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	2300      	movs	r3, #0
 8000b08:	e7ee      	b.n	8000ae8 <NVIC_EncodePriority+0x1c>
	...

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	0200      	lsls	r0, r0, #8
 8000b1a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b28:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_NVIC_SetPriority+0x1c>)
 8000b36:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b38:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b3c:	f7ff ffc6 	bl	8000acc <NVIC_EncodePriority>
 8000b40:	4601      	mov	r1, r0
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff ffae 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b52:	f7ff ff99 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000b56:	bd08      	pop	{r3, pc}

08000b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	3801      	subs	r0, #1
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b5e:	d20b      	bcs.n	8000b78 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <HAL_SYSTICK_Config+0x24>)
 8000b68:	21f0      	movs	r1, #240	@ 0xf0
 8000b6a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6e:	2000      	movs	r0, #0
 8000b70:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	2207      	movs	r2, #7
 8000b74:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	f200 80d7 	bhi.w	8000d36 <HAL_GPIO_Init+0x1b6>
{
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	e065      	b.n	8000c5a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b8e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b90:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b94:	2403      	movs	r4, #3
 8000b96:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b9a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9e:	68cc      	ldr	r4, [r1, #12]
 8000ba0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ba4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000ba6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000baa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	684a      	ldr	r2, [r1, #4]
 8000bb0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000bb8:	6042      	str	r2, [r0, #4]
 8000bba:	e05c      	b.n	8000c76 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bbc:	08dc      	lsrs	r4, r3, #3
 8000bbe:	3408      	adds	r4, #8
 8000bc0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc4:	f003 0507 	and.w	r5, r3, #7
 8000bc8:	00ad      	lsls	r5, r5, #2
 8000bca:	f04f 0e0f 	mov.w	lr, #15
 8000bce:	fa0e fe05 	lsl.w	lr, lr, r5
 8000bd2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd6:	690a      	ldr	r2, [r1, #16]
 8000bd8:	40aa      	lsls	r2, r5
 8000bda:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000bde:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000be2:	e05c      	b.n	8000c9e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be4:	2204      	movs	r2, #4
 8000be6:	e000      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000be8:	2200      	movs	r2, #0
 8000bea:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bee:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bf0:	3402      	adds	r4, #2
 8000bf2:	4d51      	ldr	r5, [pc, #324]	@ (8000d38 <HAL_GPIO_Init+0x1b8>)
 8000bf4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf8:	4a50      	ldr	r2, [pc, #320]	@ (8000d3c <HAL_GPIO_Init+0x1bc>)
 8000bfa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bfc:	ea6f 020c 	mvn.w	r2, ip
 8000c00:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c04:	684e      	ldr	r6, [r1, #4]
 8000c06:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000c0a:	d001      	beq.n	8000c10 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000c0c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000c10:	4c4a      	ldr	r4, [pc, #296]	@ (8000d3c <HAL_GPIO_Init+0x1bc>)
 8000c12:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c14:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c16:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c1a:	684e      	ldr	r6, [r1, #4]
 8000c1c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000c20:	d001      	beq.n	8000c26 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000c22:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000c26:	4c45      	ldr	r4, [pc, #276]	@ (8000d3c <HAL_GPIO_Init+0x1bc>)
 8000c28:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000c2a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c2c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c30:	684e      	ldr	r6, [r1, #4]
 8000c32:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000c36:	d001      	beq.n	8000c3c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000c38:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c3c:	4c3f      	ldr	r4, [pc, #252]	@ (8000d3c <HAL_GPIO_Init+0x1bc>)
 8000c3e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c40:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c42:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c44:	684d      	ldr	r5, [r1, #4]
 8000c46:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000c4a:	d001      	beq.n	8000c50 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000c4c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000c50:	4c3a      	ldr	r4, [pc, #232]	@ (8000d3c <HAL_GPIO_Init+0x1bc>)
 8000c52:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c54:	3301      	adds	r3, #1
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	d86b      	bhi.n	8000d32 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	680c      	ldr	r4, [r1, #0]
 8000c60:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c64:	ea32 0404 	bics.w	r4, r2, r4
 8000c68:	d1f4      	bne.n	8000c54 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6a:	684c      	ldr	r4, [r1, #4]
 8000c6c:	f004 0403 	and.w	r4, r4, #3
 8000c70:	3c01      	subs	r4, #1
 8000c72:	2c01      	cmp	r4, #1
 8000c74:	d98b      	bls.n	8000b8e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c76:	684a      	ldr	r2, [r1, #4]
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	2a03      	cmp	r2, #3
 8000c7e:	d009      	beq.n	8000c94 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000c80:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	005d      	lsls	r5, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	40aa      	lsls	r2, r5
 8000c88:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	688a      	ldr	r2, [r1, #8]
 8000c8e:	40aa      	lsls	r2, r5
 8000c90:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000c92:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	f002 0203 	and.w	r2, r2, #3
 8000c9a:	2a02      	cmp	r2, #2
 8000c9c:	d08e      	beq.n	8000bbc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000c9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000caa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cae:	684a      	ldr	r2, [r1, #4]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cb8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000cba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cbc:	684a      	ldr	r2, [r1, #4]
 8000cbe:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000cc2:	d0c7      	beq.n	8000c54 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	9201      	str	r2, [sp, #4]
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d40 <HAL_GPIO_Init+0x1c0>)
 8000cca:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000ccc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000cd0:	6454      	str	r4, [r2, #68]	@ 0x44
 8000cd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000cd4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cdc:	089c      	lsrs	r4, r3, #2
 8000cde:	1ca5      	adds	r5, r4, #2
 8000ce0:	4a15      	ldr	r2, [pc, #84]	@ (8000d38 <HAL_GPIO_Init+0x1b8>)
 8000ce2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce6:	f003 0e03 	and.w	lr, r3, #3
 8000cea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cf4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf8:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <HAL_GPIO_Init+0x1c4>)
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f43f af74 	beq.w	8000be8 <HAL_GPIO_Init+0x68>
 8000d00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d00e      	beq.n	8000d26 <HAL_GPIO_Init+0x1a6>
 8000d08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d00c      	beq.n	8000d2a <HAL_GPIO_Init+0x1aa>
 8000d10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d00a      	beq.n	8000d2e <HAL_GPIO_Init+0x1ae>
 8000d18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f43f af61 	beq.w	8000be4 <HAL_GPIO_Init+0x64>
 8000d22:	2207      	movs	r2, #7
 8000d24:	e761      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d26:	2201      	movs	r2, #1
 8000d28:	e75f      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	e75d      	b.n	8000bea <HAL_GPIO_Init+0x6a>
 8000d2e:	2203      	movs	r2, #3
 8000d30:	e75b      	b.n	8000bea <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000d32:	b002      	add	sp, #8
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	4770      	bx	lr
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40013c00 	.word	0x40013c00
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d48:	b10a      	cbz	r2, 8000d4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4a:	6181      	str	r1, [r0, #24]
 8000d4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d4e:	0409      	lsls	r1, r1, #16
 8000d50:	6181      	str	r1, [r0, #24]
  }
}
 8000d52:	4770      	bx	lr

08000d54 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d54:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d56:	ea01 0203 	and.w	r2, r1, r3
 8000d5a:	ea21 0103 	bic.w	r1, r1, r3
 8000d5e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d62:	6181      	str	r1, [r0, #24]
}
 8000d64:	4770      	bx	lr
	...

08000d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d68:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d6a:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4203      	tst	r3, r0
 8000d70:	d100      	bne.n	8000d74 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000d72:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d74:	4b02      	ldr	r3, [pc, #8]	@ (8000d80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000d76:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d78:	f7ff fc82 	bl	8000680 <HAL_GPIO_EXTI_Callback>
}
 8000d7c:	e7f9      	b.n	8000d72 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000d7e:	bf00      	nop
 8000d80:	40013c00 	.word	0x40013c00

08000d84 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d84:	2800      	cmp	r0, #0
 8000d86:	f000 81e0 	beq.w	800114a <HAL_RCC_OscConfig+0x3c6>
{
 8000d8a:	b570      	push	{r4, r5, r6, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d90:	6803      	ldr	r3, [r0, #0]
 8000d92:	f013 0f01 	tst.w	r3, #1
 8000d96:	d03b      	beq.n	8000e10 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d98:	4b9f      	ldr	r3, [pc, #636]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d02c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da4:	4b9c      	ldr	r3, [pc, #624]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d021      	beq.n	8000df4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000db6:	d04f      	beq.n	8000e58 <HAL_RCC_OscConfig+0xd4>
 8000db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dbc:	d052      	beq.n	8000e64 <HAL_RCC_OscConfig+0xe0>
 8000dbe:	4b96      	ldr	r3, [pc, #600]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000dce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dd0:	6863      	ldr	r3, [r4, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d050      	beq.n	8000e78 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fe51 	bl	8000a7c <HAL_GetTick>
 8000dda:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ddc:	4b8e      	ldr	r3, [pc, #568]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000de4:	d114      	bne.n	8000e10 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de6:	f7ff fe49 	bl	8000a7c <HAL_GetTick>
 8000dea:	1b40      	subs	r0, r0, r5
 8000dec:	2864      	cmp	r0, #100	@ 0x64
 8000dee:	d9f5      	bls.n	8000ddc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
 8000df2:	e1b1      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df4:	4b88      	ldr	r3, [pc, #544]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000dfc:	d0d8      	beq.n	8000db0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfe:	4b86      	ldr	r3, [pc, #536]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e06:	d003      	beq.n	8000e10 <HAL_RCC_OscConfig+0x8c>
 8000e08:	6863      	ldr	r3, [r4, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 819f 	beq.w	800114e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	f013 0f02 	tst.w	r3, #2
 8000e16:	d054      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e18:	4b7f      	ldr	r3, [pc, #508]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f013 0f0c 	tst.w	r3, #12
 8000e20:	d03e      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e22:	4b7d      	ldr	r3, [pc, #500]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d033      	beq.n	8000e96 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e2e:	68e3      	ldr	r3, [r4, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d068      	beq.n	8000f06 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e34:	4b79      	ldr	r3, [pc, #484]	@ (800101c <HAL_RCC_OscConfig+0x298>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fe1f 	bl	8000a7c <HAL_GetTick>
 8000e3e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e40:	4b75      	ldr	r3, [pc, #468]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f013 0f02 	tst.w	r3, #2
 8000e48:	d154      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4a:	f7ff fe17 	bl	8000a7c <HAL_GetTick>
 8000e4e:	1b40      	subs	r0, r0, r5
 8000e50:	2802      	cmp	r0, #2
 8000e52:	d9f5      	bls.n	8000e40 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e17f      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	4a6f      	ldr	r2, [pc, #444]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e7b5      	b.n	8000dd0 <HAL_RCC_OscConfig+0x4c>
 8000e64:	4b6c      	ldr	r3, [pc, #432]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e7ab      	b.n	8000dd0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000e78:	f7ff fe00 	bl	8000a7c <HAL_GetTick>
 8000e7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	4b66      	ldr	r3, [pc, #408]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e86:	d0c3      	beq.n	8000e10 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fdf8 	bl	8000a7c <HAL_GetTick>
 8000e8c:	1b40      	subs	r0, r0, r5
 8000e8e:	2864      	cmp	r0, #100	@ 0x64
 8000e90:	d9f5      	bls.n	8000e7e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000e92:	2003      	movs	r0, #3
 8000e94:	e160      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e96:	4b60      	ldr	r3, [pc, #384]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e9e:	d1c6      	bne.n	8000e2e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f013 0f02 	tst.w	r3, #2
 8000ea8:	d003      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x12e>
 8000eaa:	68e3      	ldr	r3, [r4, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f040 8150 	bne.w	8001152 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb2:	4a59      	ldr	r2, [pc, #356]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000eba:	6921      	ldr	r1, [r4, #16]
 8000ebc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ec0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f013 0f08 	tst.w	r3, #8
 8000ec8:	d042      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000eca:	6963      	ldr	r3, [r4, #20]
 8000ecc:	b36b      	cbz	r3, 8000f2a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b53      	ldr	r3, [pc, #332]	@ (800101c <HAL_RCC_OscConfig+0x298>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fdd1 	bl	8000a7c <HAL_GetTick>
 8000eda:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000edc:	4b4e      	ldr	r3, [pc, #312]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ee0:	f013 0f02 	tst.w	r3, #2
 8000ee4:	d134      	bne.n	8000f50 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fdc9 	bl	8000a7c <HAL_GetTick>
 8000eea:	1b40      	subs	r0, r0, r5
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f5      	bls.n	8000edc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	e131      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4a48      	ldr	r2, [pc, #288]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000efc:	6921      	ldr	r1, [r4, #16]
 8000efe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e7dd      	b.n	8000ec2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000f06:	4b45      	ldr	r3, [pc, #276]	@ (800101c <HAL_RCC_OscConfig+0x298>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fdb6 	bl	8000a7c <HAL_GetTick>
 8000f10:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	4b41      	ldr	r3, [pc, #260]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f013 0f02 	tst.w	r3, #2
 8000f1a:	d0d2      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fdae 	bl	8000a7c <HAL_GetTick>
 8000f20:	1b40      	subs	r0, r0, r5
 8000f22:	2802      	cmp	r0, #2
 8000f24:	d9f5      	bls.n	8000f12 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000f26:	2003      	movs	r0, #3
 8000f28:	e116      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <HAL_RCC_OscConfig+0x298>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fda3 	bl	8000a7c <HAL_GetTick>
 8000f36:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b37      	ldr	r3, [pc, #220]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f3c:	f013 0f02 	tst.w	r3, #2
 8000f40:	d006      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f42:	f7ff fd9b 	bl	8000a7c <HAL_GetTick>
 8000f46:	1b40      	subs	r0, r0, r5
 8000f48:	2802      	cmp	r0, #2
 8000f4a:	d9f5      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	e103      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	f013 0f04 	tst.w	r3, #4
 8000f56:	d077      	beq.n	8001048 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f58:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000f60:	d133      	bne.n	8000fca <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f6a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f7a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <HAL_RCC_OscConfig+0x29c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f84:	d023      	beq.n	8000fce <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d034      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x272>
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d038      	beq.n	8001002 <HAL_RCC_OscConfig+0x27e>
 8000f90:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f9c:	f022 0204 	bic.w	r2, r2, #4
 8000fa0:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa2:	68a3      	ldr	r3, [r4, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d03d      	beq.n	8001024 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fd68 	bl	8000a7c <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb2:	f013 0f02 	tst.w	r3, #2
 8000fb6:	d146      	bne.n	8001046 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fd60 	bl	8000a7c <HAL_GetTick>
 8000fbc:	1b80      	subs	r0, r0, r6
 8000fbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fc2:	4298      	cmp	r0, r3
 8000fc4:	d9f3      	bls.n	8000fae <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	e0c6      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000fca:	2500      	movs	r5, #0
 8000fcc:	e7d6      	b.n	8000f7c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <HAL_RCC_OscConfig+0x29c>)
 8000fd0:	6813      	ldr	r3, [r2, #0]
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fd50 	bl	8000a7c <HAL_GetTick>
 8000fdc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <HAL_RCC_OscConfig+0x29c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000fe6:	d1ce      	bne.n	8000f86 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe8:	f7ff fd48 	bl	8000a7c <HAL_GetTick>
 8000fec:	1b80      	subs	r0, r0, r6
 8000fee:	2802      	cmp	r0, #2
 8000ff0:	d9f5      	bls.n	8000fde <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	e0b0      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8000ff8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001000:	e7cf      	b.n	8000fa2 <HAL_RCC_OscConfig+0x21e>
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_RCC_OscConfig+0x294>)
 8001004:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001006:	f042 0204 	orr.w	r2, r2, #4
 800100a:	671a      	str	r2, [r3, #112]	@ 0x70
 800100c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	671a      	str	r2, [r3, #112]	@ 0x70
 8001014:	e7c5      	b.n	8000fa2 <HAL_RCC_OscConfig+0x21e>
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	42470000 	.word	0x42470000
 8001020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001024:	f7ff fd2a 	bl	8000a7c <HAL_GetTick>
 8001028:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102a:	4b52      	ldr	r3, [pc, #328]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 800102c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800102e:	f013 0f02 	tst.w	r3, #2
 8001032:	d008      	beq.n	8001046 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001034:	f7ff fd22 	bl	8000a7c <HAL_GetTick>
 8001038:	1b80      	subs	r0, r0, r6
 800103a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800103e:	4298      	cmp	r0, r3
 8001040:	d9f3      	bls.n	800102a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001042:	2003      	movs	r0, #3
 8001044:	e088      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001046:	b9ed      	cbnz	r5, 8001084 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001048:	69a3      	ldr	r3, [r4, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8083 	beq.w	8001156 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001050:	4a48      	ldr	r2, [pc, #288]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 8001052:	6892      	ldr	r2, [r2, #8]
 8001054:	f002 020c 	and.w	r2, r2, #12
 8001058:	2a08      	cmp	r2, #8
 800105a:	d051      	beq.n	8001100 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105c:	2b02      	cmp	r3, #2
 800105e:	d017      	beq.n	8001090 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001060:	4b45      	ldr	r3, [pc, #276]	@ (8001178 <HAL_RCC_OscConfig+0x3f4>)
 8001062:	2200      	movs	r2, #0
 8001064:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fd09 	bl	8000a7c <HAL_GetTick>
 800106a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106c:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001074:	d042      	beq.n	80010fc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fd01 	bl	8000a7c <HAL_GetTick>
 800107a:	1b00      	subs	r0, r0, r4
 800107c:	2802      	cmp	r0, #2
 800107e:	d9f5      	bls.n	800106c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e069      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001084:	4a3b      	ldr	r2, [pc, #236]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 8001086:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	e7db      	b.n	8001048 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001090:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <HAL_RCC_OscConfig+0x3f4>)
 8001092:	2200      	movs	r2, #0
 8001094:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001096:	f7ff fcf1 	bl	8000a7c <HAL_GetTick>
 800109a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800109c:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010a4:	d006      	beq.n	80010b4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a6:	f7ff fce9 	bl	8000a7c <HAL_GetTick>
 80010aa:	1b40      	subs	r0, r0, r5
 80010ac:	2802      	cmp	r0, #2
 80010ae:	d9f5      	bls.n	800109c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80010b0:	2003      	movs	r0, #3
 80010b2:	e051      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010b4:	69e3      	ldr	r3, [r4, #28]
 80010b6:	6a22      	ldr	r2, [r4, #32]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80010bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80010c2:	0852      	lsrs	r2, r2, #1
 80010c4:	3a01      	subs	r2, #1
 80010c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80010cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010d0:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 80010d2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <HAL_RCC_OscConfig+0x3f4>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80010da:	f7ff fccf 	bl	8000a7c <HAL_GetTick>
 80010de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010e8:	d106      	bne.n	80010f8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fcc7 	bl	8000a7c <HAL_GetTick>
 80010ee:	1b00      	subs	r0, r0, r4
 80010f0:	2802      	cmp	r0, #2
 80010f2:	d9f5      	bls.n	80010e0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80010f4:	2003      	movs	r0, #3
 80010f6:	e02f      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80010f8:	2000      	movs	r0, #0
 80010fa:	e02d      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
 80010fc:	2000      	movs	r0, #0
 80010fe:	e02b      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001100:	2b01      	cmp	r3, #1
 8001102:	d02b      	beq.n	800115c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_RCC_OscConfig+0x3f0>)
 8001106:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001108:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800110c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800110e:	4291      	cmp	r1, r2
 8001110:	d126      	bne.n	8001160 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001116:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001118:	428a      	cmp	r2, r1
 800111a:	d123      	bne.n	8001164 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800111c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800111e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001122:	401a      	ands	r2, r3
 8001124:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001128:	d11e      	bne.n	8001168 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800112a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800112e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001130:	0852      	lsrs	r2, r2, #1
 8001132:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001134:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001138:	d118      	bne.n	800116c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800113a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800113e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001140:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001144:	d114      	bne.n	8001170 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001146:	2000      	movs	r0, #0
 8001148:	e006      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
}
 800114c:	4770      	bx	lr
        return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
 8001150:	e002      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001152:	2001      	movs	r0, #1
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001156:	2000      	movs	r0, #0
}
 8001158:	b002      	add	sp, #8
 800115a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800115c:	2001      	movs	r0, #1
 800115e:	e7fb      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001160:	2001      	movs	r0, #1
 8001162:	e7f9      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
 8001164:	2001      	movs	r0, #1
 8001166:	e7f7      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
 8001168:	2001      	movs	r0, #1
 800116a:	e7f5      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
 800116c:	2001      	movs	r0, #1
 800116e:	e7f3      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
 8001170:	2001      	movs	r0, #1
 8001172:	e7f1      	b.n	8001158 <HAL_RCC_OscConfig+0x3d4>
 8001174:	40023800 	.word	0x40023800
 8001178:	42470000 	.word	0x42470000

0800117c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800117c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d041      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x92>
 800118a:	2b08      	cmp	r3, #8
 800118c:	d141      	bne.n	8001212 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800119c:	d012      	beq.n	80011c4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011a6:	481d      	ldr	r0, [pc, #116]	@ (800121c <HAL_RCC_GetSysClockFreq+0xa0>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	fba1 0100 	umull	r0, r1, r1, r0
 80011ae:	f7ff f867 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011ba:	3301      	adds	r3, #1
 80011bc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80011be:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011c2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011c6:	6858      	ldr	r0, [r3, #4]
 80011c8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80011cc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80011d0:	ebbc 0c00 	subs.w	ip, ip, r0
 80011d4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80011d8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80011dc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80011e0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80011e4:	ebb1 010c 	subs.w	r1, r1, ip
 80011e8:	eb63 030e 	sbc.w	r3, r3, lr
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011f2:	00c9      	lsls	r1, r1, #3
 80011f4:	eb11 0c00 	adds.w	ip, r1, r0
 80011f8:	f143 0300 	adc.w	r3, r3, #0
 80011fc:	0299      	lsls	r1, r3, #10
 80011fe:	2300      	movs	r3, #0
 8001200:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001204:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001208:	f7ff f83a 	bl	8000280 <__aeabi_uldivmod>
 800120c:	e7d1      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001210:	e7d7      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001214:	e7d5      	b.n	80011c2 <HAL_RCC_GetSysClockFreq+0x46>
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	017d7840 	.word	0x017d7840
 8001220:	00f42400 	.word	0x00f42400

08001224 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001224:	2800      	cmp	r0, #0
 8001226:	f000 809b 	beq.w	8001360 <HAL_RCC_ClockConfig+0x13c>
{
 800122a:	b570      	push	{r4, r5, r6, lr}
 800122c:	460d      	mov	r5, r1
 800122e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b4f      	ldr	r3, [pc, #316]	@ (8001370 <HAL_RCC_ClockConfig+0x14c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	428b      	cmp	r3, r1
 800123a:	d208      	bcs.n	800124e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123c:	b2cb      	uxtb	r3, r1
 800123e:	4a4c      	ldr	r2, [pc, #304]	@ (8001370 <HAL_RCC_ClockConfig+0x14c>)
 8001240:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	428b      	cmp	r3, r1
 800124a:	f040 808b 	bne.w	8001364 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	f013 0f02 	tst.w	r3, #2
 8001254:	d017      	beq.n	8001286 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001256:	f013 0f04 	tst.w	r3, #4
 800125a:	d004      	beq.n	8001266 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125c:	4a45      	ldr	r2, [pc, #276]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 800125e:	6893      	ldr	r3, [r2, #8]
 8001260:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001264:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	f013 0f08 	tst.w	r3, #8
 800126c:	d004      	beq.n	8001278 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800126e:	4a41      	ldr	r2, [pc, #260]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 8001270:	6893      	ldr	r3, [r2, #8]
 8001272:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001276:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001278:	4a3e      	ldr	r2, [pc, #248]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 800127a:	6893      	ldr	r3, [r2, #8]
 800127c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001280:	68a1      	ldr	r1, [r4, #8]
 8001282:	430b      	orrs	r3, r1
 8001284:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	f013 0f01 	tst.w	r3, #1
 800128c:	d032      	beq.n	80012f4 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128e:	6863      	ldr	r3, [r4, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d021      	beq.n	80012d8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001294:	1e9a      	subs	r2, r3, #2
 8001296:	2a01      	cmp	r2, #1
 8001298:	d925      	bls.n	80012e6 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4a36      	ldr	r2, [pc, #216]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	f012 0f02 	tst.w	r2, #2
 80012a2:	d061      	beq.n	8001368 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a4:	4933      	ldr	r1, [pc, #204]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 80012a6:	688a      	ldr	r2, [r1, #8]
 80012a8:	f022 0203 	bic.w	r2, r2, #3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80012b0:	f7ff fbe4 	bl	8000a7c <HAL_GetTick>
 80012b4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	6862      	ldr	r2, [r4, #4]
 80012c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012c4:	d016      	beq.n	80012f4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c6:	f7ff fbd9 	bl	8000a7c <HAL_GetTick>
 80012ca:	1b80      	subs	r0, r0, r6
 80012cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012d0:	4298      	cmp	r0, r3
 80012d2:	d9f0      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80012d4:	2003      	movs	r0, #3
 80012d6:	e042      	b.n	800135e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d8:	4a26      	ldr	r2, [pc, #152]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80012e0:	d1e0      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012e2:	2001      	movs	r0, #1
 80012e4:	e03b      	b.n	800135e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e6:	4a23      	ldr	r2, [pc, #140]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80012ee:	d1d9      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012f0:	2001      	movs	r0, #1
 80012f2:	e034      	b.n	800135e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_RCC_ClockConfig+0x14c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	42ab      	cmp	r3, r5
 80012fe:	d907      	bls.n	8001310 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001300:	b2ea      	uxtb	r2, r5
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_RCC_ClockConfig+0x14c>)
 8001304:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	42ab      	cmp	r3, r5
 800130e:	d12d      	bne.n	800136c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	f013 0f04 	tst.w	r3, #4
 8001316:	d006      	beq.n	8001326 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 800131a:	6893      	ldr	r3, [r2, #8]
 800131c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001320:	68e1      	ldr	r1, [r4, #12]
 8001322:	430b      	orrs	r3, r1
 8001324:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	f013 0f08 	tst.w	r3, #8
 800132c:	d007      	beq.n	800133e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800132e:	4a11      	ldr	r2, [pc, #68]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 8001330:	6893      	ldr	r3, [r2, #8]
 8001332:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001336:	6921      	ldr	r1, [r4, #16]
 8001338:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800133c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133e:	f7ff ff1d 	bl	800117c <HAL_RCC_GetSysClockFreq>
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_RCC_ClockConfig+0x150>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_RCC_ClockConfig+0x154>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	40d8      	lsrs	r0, r3
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_RCC_ClockConfig+0x158>)
 8001352:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_RCC_ClockConfig+0x15c>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	f7ff fb44 	bl	80009e4 <HAL_InitTick>
  return HAL_OK;
 800135c:	2000      	movs	r0, #0
}
 800135e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001360:	2001      	movs	r0, #1
}
 8001362:	4770      	bx	lr
      return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
 8001366:	e7fa      	b.n	800135e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e7f8      	b.n	800135e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
 800136e:	e7f6      	b.n	800135e <HAL_RCC_ClockConfig+0x13a>
 8001370:	40023c00 	.word	0x40023c00
 8001374:	40023800 	.word	0x40023800
 8001378:	08002674 	.word	0x08002674
 800137c:	20000008 	.word	0x20000008
 8001380:	20000010 	.word	0x20000010

08001384 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001384:	4b01      	ldr	r3, [pc, #4]	@ (800138c <HAL_RCC_GetHCLKFreq+0x8>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001390:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001392:	f7ff fff7 	bl	8001384 <HAL_RCC_GetHCLKFreq>
 8001396:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800139e:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80013a2:	40d8      	lsrs	r0, r3
 80013a4:	bd08      	pop	{r3, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	0800266c 	.word	0x0800266c

080013b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013b2:	f7ff ffe7 	bl	8001384 <HAL_RCC_GetHCLKFreq>
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80013be:	4a03      	ldr	r2, [pc, #12]	@ (80013cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80013c2:	40d8      	lsrs	r0, r3
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	0800266c 	.word	0x0800266c

080013d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013d2:	f102 030c 	add.w	r3, r2, #12
 80013d6:	e853 3f00 	ldrex	r3, [r3]
 80013da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013de:	320c      	adds	r2, #12
 80013e0:	e842 3100 	strex	r1, r3, [r2]
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d1f3      	bne.n	80013d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013ea:	f102 0314 	add.w	r3, r2, #20
 80013ee:	e853 3f00 	ldrex	r3, [r3]
 80013f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013f6:	3214      	adds	r2, #20
 80013f8:	e842 3100 	strex	r1, r3, [r2]
 80013fc:	2900      	cmp	r1, #0
 80013fe:	d1f3      	bne.n	80013e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001400:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001406:	2320      	movs	r3, #32
 8001408:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800140c:	2300      	movs	r3, #0
 800140e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001410:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001412:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001414:	f102 030c 	add.w	r3, r2, #12
 8001418:	e853 3f00 	ldrex	r3, [r3]
 800141c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001420:	320c      	adds	r2, #12
 8001422:	e842 3100 	strex	r1, r3, [r2]
 8001426:	2900      	cmp	r1, #0
 8001428:	d1f3      	bne.n	8001412 <UART_EndRxTransfer+0x42>
 800142a:	e7ec      	b.n	8001406 <UART_EndRxTransfer+0x36>

0800142c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800142c:	b510      	push	{r4, lr}
 800142e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001430:	6802      	ldr	r2, [r0, #0]
 8001432:	6913      	ldr	r3, [r2, #16]
 8001434:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001438:	68c1      	ldr	r1, [r0, #12]
 800143a:	430b      	orrs	r3, r1
 800143c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800143e:	6883      	ldr	r3, [r0, #8]
 8001440:	6902      	ldr	r2, [r0, #16]
 8001442:	431a      	orrs	r2, r3
 8001444:	6943      	ldr	r3, [r0, #20]
 8001446:	431a      	orrs	r2, r3
 8001448:	69c3      	ldr	r3, [r0, #28]
 800144a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800144c:	6801      	ldr	r1, [r0, #0]
 800144e:	68cb      	ldr	r3, [r1, #12]
 8001450:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001454:	f023 030c 	bic.w	r3, r3, #12
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800145c:	6802      	ldr	r2, [r0, #0]
 800145e:	6953      	ldr	r3, [r2, #20]
 8001460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001464:	6981      	ldr	r1, [r0, #24]
 8001466:	430b      	orrs	r3, r1
 8001468:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800146a:	6803      	ldr	r3, [r0, #0]
 800146c:	4a31      	ldr	r2, [pc, #196]	@ (8001534 <UART_SetConfig+0x108>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d006      	beq.n	8001480 <UART_SetConfig+0x54>
 8001472:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001476:	4293      	cmp	r3, r2
 8001478:	d002      	beq.n	8001480 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800147a:	f7ff ff89 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 800147e:	e001      	b.n	8001484 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001480:	f7ff ff96 	bl	80013b0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001484:	69e3      	ldr	r3, [r4, #28]
 8001486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800148a:	d029      	beq.n	80014e0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800148c:	2100      	movs	r1, #0
 800148e:	1803      	adds	r3, r0, r0
 8001490:	4149      	adcs	r1, r1
 8001492:	181b      	adds	r3, r3, r0
 8001494:	f141 0100 	adc.w	r1, r1, #0
 8001498:	00c9      	lsls	r1, r1, #3
 800149a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	1818      	adds	r0, r3, r0
 80014a2:	6863      	ldr	r3, [r4, #4]
 80014a4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80014a8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80014ac:	f141 0100 	adc.w	r1, r1, #0
 80014b0:	f7fe fee6 	bl	8000280 <__aeabi_uldivmod>
 80014b4:	4a20      	ldr	r2, [pc, #128]	@ (8001538 <UART_SetConfig+0x10c>)
 80014b6:	fba2 3100 	umull	r3, r1, r2, r0
 80014ba:	0949      	lsrs	r1, r1, #5
 80014bc:	2364      	movs	r3, #100	@ 0x64
 80014be:	fb03 0311 	mls	r3, r3, r1, r0
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	3332      	adds	r3, #50	@ 0x32
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	6821      	ldr	r1, [r4, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }
}
 80014de:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014e0:	2300      	movs	r3, #0
 80014e2:	1802      	adds	r2, r0, r0
 80014e4:	eb43 0103 	adc.w	r1, r3, r3
 80014e8:	1812      	adds	r2, r2, r0
 80014ea:	f141 0100 	adc.w	r1, r1, #0
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014f4:	00d2      	lsls	r2, r2, #3
 80014f6:	1810      	adds	r0, r2, r0
 80014f8:	f141 0100 	adc.w	r1, r1, #0
 80014fc:	6862      	ldr	r2, [r4, #4]
 80014fe:	1892      	adds	r2, r2, r2
 8001500:	415b      	adcs	r3, r3
 8001502:	f7fe febd 	bl	8000280 <__aeabi_uldivmod>
 8001506:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <UART_SetConfig+0x10c>)
 8001508:	fba2 3100 	umull	r3, r1, r2, r0
 800150c:	0949      	lsrs	r1, r1, #5
 800150e:	2364      	movs	r3, #100	@ 0x64
 8001510:	fb03 0311 	mls	r3, r3, r1, r0
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	3332      	adds	r3, #50	@ 0x32
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	095b      	lsrs	r3, r3, #5
 800151e:	005a      	lsls	r2, r3, #1
 8001520:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001524:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	6821      	ldr	r1, [r4, #0]
 800152e:	4413      	add	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
 8001532:	e7d4      	b.n	80014de <UART_SetConfig+0xb2>
 8001534:	40011000 	.word	0x40011000
 8001538:	51eb851f 	.word	0x51eb851f

0800153c <UART_WaitOnFlagUntilTimeout>:
{
 800153c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001540:	b083      	sub	sp, #12
 8001542:	4605      	mov	r5, r0
 8001544:	460e      	mov	r6, r1
 8001546:	4617      	mov	r7, r2
 8001548:	4699      	mov	r9, r3
 800154a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	681c      	ldr	r4, [r3, #0]
 8001552:	ea36 0404 	bics.w	r4, r6, r4
 8001556:	bf0c      	ite	eq
 8001558:	2401      	moveq	r4, #1
 800155a:	2400      	movne	r4, #0
 800155c:	42bc      	cmp	r4, r7
 800155e:	d128      	bne.n	80015b2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001560:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001564:	d0f3      	beq.n	800154e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001566:	f7ff fa89 	bl	8000a7c <HAL_GetTick>
 800156a:	eba0 0009 	sub.w	r0, r0, r9
 800156e:	4540      	cmp	r0, r8
 8001570:	d823      	bhi.n	80015ba <UART_WaitOnFlagUntilTimeout+0x7e>
 8001572:	f1b8 0f00 	cmp.w	r8, #0
 8001576:	d022      	beq.n	80015be <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	f012 0f04 	tst.w	r2, #4
 8001580:	d0e5      	beq.n	800154e <UART_WaitOnFlagUntilTimeout+0x12>
 8001582:	2e80      	cmp	r6, #128	@ 0x80
 8001584:	d0e3      	beq.n	800154e <UART_WaitOnFlagUntilTimeout+0x12>
 8001586:	2e40      	cmp	r6, #64	@ 0x40
 8001588:	d0e1      	beq.n	800154e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f012 0f08 	tst.w	r2, #8
 8001590:	d0dd      	beq.n	800154e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001592:	2400      	movs	r4, #0
 8001594:	9401      	str	r4, [sp, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	9201      	str	r2, [sp, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80015a0:	4628      	mov	r0, r5
 80015a2:	f7ff ff15 	bl	80013d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80015a6:	2308      	movs	r3, #8
 80015a8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80015aa:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
 80015b0:	e000      	b.n	80015b4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80015b2:	2000      	movs	r0, #0
}
 80015b4:	b003      	add	sp, #12
 80015b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80015ba:	2003      	movs	r0, #3
 80015bc:	e7fa      	b.n	80015b4 <UART_WaitOnFlagUntilTimeout+0x78>
 80015be:	2003      	movs	r0, #3
 80015c0:	e7f8      	b.n	80015b4 <UART_WaitOnFlagUntilTimeout+0x78>

080015c2 <HAL_UART_Init>:
  if (huart == NULL)
 80015c2:	b360      	cbz	r0, 800161e <HAL_UART_Init+0x5c>
{
 80015c4:	b510      	push	{r4, lr}
 80015c6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80015c8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80015cc:	b313      	cbz	r3, 8001614 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80015ce:	2324      	movs	r3, #36	@ 0x24
 80015d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	68d3      	ldr	r3, [r2, #12]
 80015d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80015dc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff ff24 	bl	800142c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	6913      	ldr	r3, [r2, #16]
 80015e8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80015ec:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6953      	ldr	r3, [r2, #20]
 80015f2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80015f6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	68d3      	ldr	r3, [r2, #12]
 80015fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001600:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001602:	2000      	movs	r0, #0
 8001604:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001606:	2320      	movs	r3, #32
 8001608:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800160c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001610:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001612:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001614:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001618:	f7ff f924 	bl	8000864 <HAL_UART_MspInit>
 800161c:	e7d7      	b.n	80015ce <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800161e:	2001      	movs	r0, #1
}
 8001620:	4770      	bx	lr

08001622 <HAL_UART_Transmit>:
{
 8001622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800162a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b20      	cmp	r3, #32
 8001632:	d156      	bne.n	80016e2 <HAL_UART_Transmit+0xc0>
 8001634:	4604      	mov	r4, r0
 8001636:	460d      	mov	r5, r1
 8001638:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800163a:	2900      	cmp	r1, #0
 800163c:	d055      	beq.n	80016ea <HAL_UART_Transmit+0xc8>
 800163e:	b90a      	cbnz	r2, 8001644 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001640:	2001      	movs	r0, #1
 8001642:	e04f      	b.n	80016e4 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001644:	2300      	movs	r3, #0
 8001646:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001648:	2321      	movs	r3, #33	@ 0x21
 800164a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800164e:	f7ff fa15 	bl	8000a7c <HAL_GetTick>
 8001652:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001654:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001658:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800165c:	68a3      	ldr	r3, [r4, #8]
 800165e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001662:	d002      	beq.n	800166a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001664:	f04f 0800 	mov.w	r8, #0
 8001668:	e014      	b.n	8001694 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800166a:	6923      	ldr	r3, [r4, #16]
 800166c:	b32b      	cbz	r3, 80016ba <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800166e:	f04f 0800 	mov.w	r8, #0
 8001672:	e00f      	b.n	8001694 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001674:	2320      	movs	r3, #32
 8001676:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800167a:	2003      	movs	r0, #3
 800167c:	e032      	b.n	80016e4 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800167e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001682:	6822      	ldr	r2, [r4, #0]
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800168a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800168c:	b292      	uxth	r2, r2
 800168e:	3a01      	subs	r2, #1
 8001690:	b292      	uxth	r2, r2
 8001692:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001694:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001696:	b29b      	uxth	r3, r3
 8001698:	b193      	cbz	r3, 80016c0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800169a:	9600      	str	r6, [sp, #0]
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	2180      	movs	r1, #128	@ 0x80
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff ff4a 	bl	800153c <UART_WaitOnFlagUntilTimeout>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d1e3      	bne.n	8001674 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80016ac:	2d00      	cmp	r5, #0
 80016ae:	d0e6      	beq.n	800167e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016b0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016b8:	e7e7      	b.n	800168a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80016ba:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80016bc:	2500      	movs	r5, #0
 80016be:	e7e9      	b.n	8001694 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016c0:	9600      	str	r6, [sp, #0]
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	2140      	movs	r1, #64	@ 0x40
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff ff37 	bl	800153c <UART_WaitOnFlagUntilTimeout>
 80016ce:	b918      	cbnz	r0, 80016d8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80016d0:	2320      	movs	r3, #32
 80016d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80016d6:	e005      	b.n	80016e4 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80016d8:	2320      	movs	r3, #32
 80016da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80016de:	2003      	movs	r0, #3
 80016e0:	e000      	b.n	80016e4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80016e2:	2002      	movs	r0, #2
}
 80016e4:	b002      	add	sp, #8
 80016e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	e7fa      	b.n	80016e4 <HAL_UART_Transmit+0xc2>
	...

080016f0 <std>:
 80016f0:	2300      	movs	r3, #0
 80016f2:	b510      	push	{r4, lr}
 80016f4:	4604      	mov	r4, r0
 80016f6:	e9c0 3300 	strd	r3, r3, [r0]
 80016fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016fe:	6083      	str	r3, [r0, #8]
 8001700:	8181      	strh	r1, [r0, #12]
 8001702:	6643      	str	r3, [r0, #100]	@ 0x64
 8001704:	81c2      	strh	r2, [r0, #14]
 8001706:	6183      	str	r3, [r0, #24]
 8001708:	4619      	mov	r1, r3
 800170a:	2208      	movs	r2, #8
 800170c:	305c      	adds	r0, #92	@ 0x5c
 800170e:	f000 f9f9 	bl	8001b04 <memset>
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <std+0x58>)
 8001714:	6263      	str	r3, [r4, #36]	@ 0x24
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <std+0x5c>)
 8001718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <std+0x60>)
 800171c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <std+0x64>)
 8001720:	6323      	str	r3, [r4, #48]	@ 0x30
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <std+0x68>)
 8001724:	6224      	str	r4, [r4, #32]
 8001726:	429c      	cmp	r4, r3
 8001728:	d006      	beq.n	8001738 <std+0x48>
 800172a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800172e:	4294      	cmp	r4, r2
 8001730:	d002      	beq.n	8001738 <std+0x48>
 8001732:	33d0      	adds	r3, #208	@ 0xd0
 8001734:	429c      	cmp	r4, r3
 8001736:	d105      	bne.n	8001744 <std+0x54>
 8001738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001740:	f000 ba58 	b.w	8001bf4 <__retarget_lock_init_recursive>
 8001744:	bd10      	pop	{r4, pc}
 8001746:	bf00      	nop
 8001748:	08001955 	.word	0x08001955
 800174c:	08001977 	.word	0x08001977
 8001750:	080019af 	.word	0x080019af
 8001754:	080019d3 	.word	0x080019d3
 8001758:	200000e0 	.word	0x200000e0

0800175c <stdio_exit_handler>:
 800175c:	4a02      	ldr	r2, [pc, #8]	@ (8001768 <stdio_exit_handler+0xc>)
 800175e:	4903      	ldr	r1, [pc, #12]	@ (800176c <stdio_exit_handler+0x10>)
 8001760:	4803      	ldr	r0, [pc, #12]	@ (8001770 <stdio_exit_handler+0x14>)
 8001762:	f000 b869 	b.w	8001838 <_fwalk_sglue>
 8001766:	bf00      	nop
 8001768:	20000014 	.word	0x20000014
 800176c:	08002491 	.word	0x08002491
 8001770:	20000024 	.word	0x20000024

08001774 <cleanup_stdio>:
 8001774:	6841      	ldr	r1, [r0, #4]
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <cleanup_stdio+0x34>)
 8001778:	4299      	cmp	r1, r3
 800177a:	b510      	push	{r4, lr}
 800177c:	4604      	mov	r4, r0
 800177e:	d001      	beq.n	8001784 <cleanup_stdio+0x10>
 8001780:	f000 fe86 	bl	8002490 <_fflush_r>
 8001784:	68a1      	ldr	r1, [r4, #8]
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <cleanup_stdio+0x38>)
 8001788:	4299      	cmp	r1, r3
 800178a:	d002      	beq.n	8001792 <cleanup_stdio+0x1e>
 800178c:	4620      	mov	r0, r4
 800178e:	f000 fe7f 	bl	8002490 <_fflush_r>
 8001792:	68e1      	ldr	r1, [r4, #12]
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <cleanup_stdio+0x3c>)
 8001796:	4299      	cmp	r1, r3
 8001798:	d004      	beq.n	80017a4 <cleanup_stdio+0x30>
 800179a:	4620      	mov	r0, r4
 800179c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a0:	f000 be76 	b.w	8002490 <_fflush_r>
 80017a4:	bd10      	pop	{r4, pc}
 80017a6:	bf00      	nop
 80017a8:	200000e0 	.word	0x200000e0
 80017ac:	20000148 	.word	0x20000148
 80017b0:	200001b0 	.word	0x200001b0

080017b4 <global_stdio_init.part.0>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <global_stdio_init.part.0+0x30>)
 80017b8:	4c0b      	ldr	r4, [pc, #44]	@ (80017e8 <global_stdio_init.part.0+0x34>)
 80017ba:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <global_stdio_init.part.0+0x38>)
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	4620      	mov	r0, r4
 80017c0:	2200      	movs	r2, #0
 80017c2:	2104      	movs	r1, #4
 80017c4:	f7ff ff94 	bl	80016f0 <std>
 80017c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80017cc:	2201      	movs	r2, #1
 80017ce:	2109      	movs	r1, #9
 80017d0:	f7ff ff8e 	bl	80016f0 <std>
 80017d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80017d8:	2202      	movs	r2, #2
 80017da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017de:	2112      	movs	r1, #18
 80017e0:	f7ff bf86 	b.w	80016f0 <std>
 80017e4:	20000218 	.word	0x20000218
 80017e8:	200000e0 	.word	0x200000e0
 80017ec:	0800175d 	.word	0x0800175d

080017f0 <__sfp_lock_acquire>:
 80017f0:	4801      	ldr	r0, [pc, #4]	@ (80017f8 <__sfp_lock_acquire+0x8>)
 80017f2:	f000 ba00 	b.w	8001bf6 <__retarget_lock_acquire_recursive>
 80017f6:	bf00      	nop
 80017f8:	20000221 	.word	0x20000221

080017fc <__sfp_lock_release>:
 80017fc:	4801      	ldr	r0, [pc, #4]	@ (8001804 <__sfp_lock_release+0x8>)
 80017fe:	f000 b9fb 	b.w	8001bf8 <__retarget_lock_release_recursive>
 8001802:	bf00      	nop
 8001804:	20000221 	.word	0x20000221

08001808 <__sinit>:
 8001808:	b510      	push	{r4, lr}
 800180a:	4604      	mov	r4, r0
 800180c:	f7ff fff0 	bl	80017f0 <__sfp_lock_acquire>
 8001810:	6a23      	ldr	r3, [r4, #32]
 8001812:	b11b      	cbz	r3, 800181c <__sinit+0x14>
 8001814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001818:	f7ff bff0 	b.w	80017fc <__sfp_lock_release>
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <__sinit+0x28>)
 800181e:	6223      	str	r3, [r4, #32]
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <__sinit+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f5      	bne.n	8001814 <__sinit+0xc>
 8001828:	f7ff ffc4 	bl	80017b4 <global_stdio_init.part.0>
 800182c:	e7f2      	b.n	8001814 <__sinit+0xc>
 800182e:	bf00      	nop
 8001830:	08001775 	.word	0x08001775
 8001834:	20000218 	.word	0x20000218

08001838 <_fwalk_sglue>:
 8001838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800183c:	4607      	mov	r7, r0
 800183e:	4688      	mov	r8, r1
 8001840:	4614      	mov	r4, r2
 8001842:	2600      	movs	r6, #0
 8001844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001848:	f1b9 0901 	subs.w	r9, r9, #1
 800184c:	d505      	bpl.n	800185a <_fwalk_sglue+0x22>
 800184e:	6824      	ldr	r4, [r4, #0]
 8001850:	2c00      	cmp	r4, #0
 8001852:	d1f7      	bne.n	8001844 <_fwalk_sglue+0xc>
 8001854:	4630      	mov	r0, r6
 8001856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800185a:	89ab      	ldrh	r3, [r5, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d907      	bls.n	8001870 <_fwalk_sglue+0x38>
 8001860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001864:	3301      	adds	r3, #1
 8001866:	d003      	beq.n	8001870 <_fwalk_sglue+0x38>
 8001868:	4629      	mov	r1, r5
 800186a:	4638      	mov	r0, r7
 800186c:	47c0      	blx	r8
 800186e:	4306      	orrs	r6, r0
 8001870:	3568      	adds	r5, #104	@ 0x68
 8001872:	e7e9      	b.n	8001848 <_fwalk_sglue+0x10>

08001874 <iprintf>:
 8001874:	b40f      	push	{r0, r1, r2, r3}
 8001876:	b507      	push	{r0, r1, r2, lr}
 8001878:	4906      	ldr	r1, [pc, #24]	@ (8001894 <iprintf+0x20>)
 800187a:	ab04      	add	r3, sp, #16
 800187c:	6808      	ldr	r0, [r1, #0]
 800187e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001882:	6881      	ldr	r1, [r0, #8]
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	f000 fadb 	bl	8001e40 <_vfiprintf_r>
 800188a:	b003      	add	sp, #12
 800188c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001890:	b004      	add	sp, #16
 8001892:	4770      	bx	lr
 8001894:	20000020 	.word	0x20000020

08001898 <_puts_r>:
 8001898:	6a03      	ldr	r3, [r0, #32]
 800189a:	b570      	push	{r4, r5, r6, lr}
 800189c:	6884      	ldr	r4, [r0, #8]
 800189e:	4605      	mov	r5, r0
 80018a0:	460e      	mov	r6, r1
 80018a2:	b90b      	cbnz	r3, 80018a8 <_puts_r+0x10>
 80018a4:	f7ff ffb0 	bl	8001808 <__sinit>
 80018a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018aa:	07db      	lsls	r3, r3, #31
 80018ac:	d405      	bmi.n	80018ba <_puts_r+0x22>
 80018ae:	89a3      	ldrh	r3, [r4, #12]
 80018b0:	0598      	lsls	r0, r3, #22
 80018b2:	d402      	bmi.n	80018ba <_puts_r+0x22>
 80018b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018b6:	f000 f99e 	bl	8001bf6 <__retarget_lock_acquire_recursive>
 80018ba:	89a3      	ldrh	r3, [r4, #12]
 80018bc:	0719      	lsls	r1, r3, #28
 80018be:	d502      	bpl.n	80018c6 <_puts_r+0x2e>
 80018c0:	6923      	ldr	r3, [r4, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d135      	bne.n	8001932 <_puts_r+0x9a>
 80018c6:	4621      	mov	r1, r4
 80018c8:	4628      	mov	r0, r5
 80018ca:	f000 f8c5 	bl	8001a58 <__swsetup_r>
 80018ce:	b380      	cbz	r0, 8001932 <_puts_r+0x9a>
 80018d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80018d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018d6:	07da      	lsls	r2, r3, #31
 80018d8:	d405      	bmi.n	80018e6 <_puts_r+0x4e>
 80018da:	89a3      	ldrh	r3, [r4, #12]
 80018dc:	059b      	lsls	r3, r3, #22
 80018de:	d402      	bmi.n	80018e6 <_puts_r+0x4e>
 80018e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018e2:	f000 f989 	bl	8001bf8 <__retarget_lock_release_recursive>
 80018e6:	4628      	mov	r0, r5
 80018e8:	bd70      	pop	{r4, r5, r6, pc}
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da04      	bge.n	80018f8 <_puts_r+0x60>
 80018ee:	69a2      	ldr	r2, [r4, #24]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dc17      	bgt.n	8001924 <_puts_r+0x8c>
 80018f4:	290a      	cmp	r1, #10
 80018f6:	d015      	beq.n	8001924 <_puts_r+0x8c>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	6022      	str	r2, [r4, #0]
 80018fe:	7019      	strb	r1, [r3, #0]
 8001900:	68a3      	ldr	r3, [r4, #8]
 8001902:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001906:	3b01      	subs	r3, #1
 8001908:	60a3      	str	r3, [r4, #8]
 800190a:	2900      	cmp	r1, #0
 800190c:	d1ed      	bne.n	80018ea <_puts_r+0x52>
 800190e:	2b00      	cmp	r3, #0
 8001910:	da11      	bge.n	8001936 <_puts_r+0x9e>
 8001912:	4622      	mov	r2, r4
 8001914:	210a      	movs	r1, #10
 8001916:	4628      	mov	r0, r5
 8001918:	f000 f85f 	bl	80019da <__swbuf_r>
 800191c:	3001      	adds	r0, #1
 800191e:	d0d7      	beq.n	80018d0 <_puts_r+0x38>
 8001920:	250a      	movs	r5, #10
 8001922:	e7d7      	b.n	80018d4 <_puts_r+0x3c>
 8001924:	4622      	mov	r2, r4
 8001926:	4628      	mov	r0, r5
 8001928:	f000 f857 	bl	80019da <__swbuf_r>
 800192c:	3001      	adds	r0, #1
 800192e:	d1e7      	bne.n	8001900 <_puts_r+0x68>
 8001930:	e7ce      	b.n	80018d0 <_puts_r+0x38>
 8001932:	3e01      	subs	r6, #1
 8001934:	e7e4      	b.n	8001900 <_puts_r+0x68>
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	6022      	str	r2, [r4, #0]
 800193c:	220a      	movs	r2, #10
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e7ee      	b.n	8001920 <_puts_r+0x88>
	...

08001944 <puts>:
 8001944:	4b02      	ldr	r3, [pc, #8]	@ (8001950 <puts+0xc>)
 8001946:	4601      	mov	r1, r0
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f7ff bfa5 	b.w	8001898 <_puts_r>
 800194e:	bf00      	nop
 8001950:	20000020 	.word	0x20000020

08001954 <__sread>:
 8001954:	b510      	push	{r4, lr}
 8001956:	460c      	mov	r4, r1
 8001958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800195c:	f000 f8fc 	bl	8001b58 <_read_r>
 8001960:	2800      	cmp	r0, #0
 8001962:	bfab      	itete	ge
 8001964:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001966:	89a3      	ldrhlt	r3, [r4, #12]
 8001968:	181b      	addge	r3, r3, r0
 800196a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800196e:	bfac      	ite	ge
 8001970:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001972:	81a3      	strhlt	r3, [r4, #12]
 8001974:	bd10      	pop	{r4, pc}

08001976 <__swrite>:
 8001976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197a:	461f      	mov	r7, r3
 800197c:	898b      	ldrh	r3, [r1, #12]
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	4605      	mov	r5, r0
 8001982:	460c      	mov	r4, r1
 8001984:	4616      	mov	r6, r2
 8001986:	d505      	bpl.n	8001994 <__swrite+0x1e>
 8001988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198c:	2302      	movs	r3, #2
 800198e:	2200      	movs	r2, #0
 8001990:	f000 f8d0 	bl	8001b34 <_lseek_r>
 8001994:	89a3      	ldrh	r3, [r4, #12]
 8001996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800199a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800199e:	81a3      	strh	r3, [r4, #12]
 80019a0:	4632      	mov	r2, r6
 80019a2:	463b      	mov	r3, r7
 80019a4:	4628      	mov	r0, r5
 80019a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019aa:	f000 b8e7 	b.w	8001b7c <_write_r>

080019ae <__sseek>:
 80019ae:	b510      	push	{r4, lr}
 80019b0:	460c      	mov	r4, r1
 80019b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b6:	f000 f8bd 	bl	8001b34 <_lseek_r>
 80019ba:	1c43      	adds	r3, r0, #1
 80019bc:	89a3      	ldrh	r3, [r4, #12]
 80019be:	bf15      	itete	ne
 80019c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80019c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80019c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019ca:	81a3      	strheq	r3, [r4, #12]
 80019cc:	bf18      	it	ne
 80019ce:	81a3      	strhne	r3, [r4, #12]
 80019d0:	bd10      	pop	{r4, pc}

080019d2 <__sclose>:
 80019d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d6:	f000 b89d 	b.w	8001b14 <_close_r>

080019da <__swbuf_r>:
 80019da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019dc:	460e      	mov	r6, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	4605      	mov	r5, r0
 80019e2:	b118      	cbz	r0, 80019ec <__swbuf_r+0x12>
 80019e4:	6a03      	ldr	r3, [r0, #32]
 80019e6:	b90b      	cbnz	r3, 80019ec <__swbuf_r+0x12>
 80019e8:	f7ff ff0e 	bl	8001808 <__sinit>
 80019ec:	69a3      	ldr	r3, [r4, #24]
 80019ee:	60a3      	str	r3, [r4, #8]
 80019f0:	89a3      	ldrh	r3, [r4, #12]
 80019f2:	071a      	lsls	r2, r3, #28
 80019f4:	d501      	bpl.n	80019fa <__swbuf_r+0x20>
 80019f6:	6923      	ldr	r3, [r4, #16]
 80019f8:	b943      	cbnz	r3, 8001a0c <__swbuf_r+0x32>
 80019fa:	4621      	mov	r1, r4
 80019fc:	4628      	mov	r0, r5
 80019fe:	f000 f82b 	bl	8001a58 <__swsetup_r>
 8001a02:	b118      	cbz	r0, 8001a0c <__swbuf_r+0x32>
 8001a04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001a08:	4638      	mov	r0, r7
 8001a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	6922      	ldr	r2, [r4, #16]
 8001a10:	1a98      	subs	r0, r3, r2
 8001a12:	6963      	ldr	r3, [r4, #20]
 8001a14:	b2f6      	uxtb	r6, r6
 8001a16:	4283      	cmp	r3, r0
 8001a18:	4637      	mov	r7, r6
 8001a1a:	dc05      	bgt.n	8001a28 <__swbuf_r+0x4e>
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f000 fd36 	bl	8002490 <_fflush_r>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d1ed      	bne.n	8001a04 <__swbuf_r+0x2a>
 8001a28:	68a3      	ldr	r3, [r4, #8]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	60a3      	str	r3, [r4, #8]
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	6022      	str	r2, [r4, #0]
 8001a34:	701e      	strb	r6, [r3, #0]
 8001a36:	6962      	ldr	r2, [r4, #20]
 8001a38:	1c43      	adds	r3, r0, #1
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d004      	beq.n	8001a48 <__swbuf_r+0x6e>
 8001a3e:	89a3      	ldrh	r3, [r4, #12]
 8001a40:	07db      	lsls	r3, r3, #31
 8001a42:	d5e1      	bpl.n	8001a08 <__swbuf_r+0x2e>
 8001a44:	2e0a      	cmp	r6, #10
 8001a46:	d1df      	bne.n	8001a08 <__swbuf_r+0x2e>
 8001a48:	4621      	mov	r1, r4
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	f000 fd20 	bl	8002490 <_fflush_r>
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d0d9      	beq.n	8001a08 <__swbuf_r+0x2e>
 8001a54:	e7d6      	b.n	8001a04 <__swbuf_r+0x2a>
	...

08001a58 <__swsetup_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <__swsetup_r+0xa8>)
 8001a5c:	4605      	mov	r5, r0
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	460c      	mov	r4, r1
 8001a62:	b118      	cbz	r0, 8001a6c <__swsetup_r+0x14>
 8001a64:	6a03      	ldr	r3, [r0, #32]
 8001a66:	b90b      	cbnz	r3, 8001a6c <__swsetup_r+0x14>
 8001a68:	f7ff fece 	bl	8001808 <__sinit>
 8001a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a70:	0719      	lsls	r1, r3, #28
 8001a72:	d422      	bmi.n	8001aba <__swsetup_r+0x62>
 8001a74:	06da      	lsls	r2, r3, #27
 8001a76:	d407      	bmi.n	8001a88 <__swsetup_r+0x30>
 8001a78:	2209      	movs	r2, #9
 8001a7a:	602a      	str	r2, [r5, #0]
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a86:	e033      	b.n	8001af0 <__swsetup_r+0x98>
 8001a88:	0758      	lsls	r0, r3, #29
 8001a8a:	d512      	bpl.n	8001ab2 <__swsetup_r+0x5a>
 8001a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a8e:	b141      	cbz	r1, 8001aa2 <__swsetup_r+0x4a>
 8001a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a94:	4299      	cmp	r1, r3
 8001a96:	d002      	beq.n	8001a9e <__swsetup_r+0x46>
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f8af 	bl	8001bfc <_free_r>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001aa2:	89a3      	ldrh	r3, [r4, #12]
 8001aa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001aa8:	81a3      	strh	r3, [r4, #12]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	6063      	str	r3, [r4, #4]
 8001aae:	6923      	ldr	r3, [r4, #16]
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	81a3      	strh	r3, [r4, #12]
 8001aba:	6923      	ldr	r3, [r4, #16]
 8001abc:	b94b      	cbnz	r3, 8001ad2 <__swsetup_r+0x7a>
 8001abe:	89a3      	ldrh	r3, [r4, #12]
 8001ac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac8:	d003      	beq.n	8001ad2 <__swsetup_r+0x7a>
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	f000 fd2d 	bl	800252c <__smakebuf_r>
 8001ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad6:	f013 0201 	ands.w	r2, r3, #1
 8001ada:	d00a      	beq.n	8001af2 <__swsetup_r+0x9a>
 8001adc:	2200      	movs	r2, #0
 8001ade:	60a2      	str	r2, [r4, #8]
 8001ae0:	6962      	ldr	r2, [r4, #20]
 8001ae2:	4252      	negs	r2, r2
 8001ae4:	61a2      	str	r2, [r4, #24]
 8001ae6:	6922      	ldr	r2, [r4, #16]
 8001ae8:	b942      	cbnz	r2, 8001afc <__swsetup_r+0xa4>
 8001aea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001aee:	d1c5      	bne.n	8001a7c <__swsetup_r+0x24>
 8001af0:	bd38      	pop	{r3, r4, r5, pc}
 8001af2:	0799      	lsls	r1, r3, #30
 8001af4:	bf58      	it	pl
 8001af6:	6962      	ldrpl	r2, [r4, #20]
 8001af8:	60a2      	str	r2, [r4, #8]
 8001afa:	e7f4      	b.n	8001ae6 <__swsetup_r+0x8e>
 8001afc:	2000      	movs	r0, #0
 8001afe:	e7f7      	b.n	8001af0 <__swsetup_r+0x98>
 8001b00:	20000020 	.word	0x20000020

08001b04 <memset>:
 8001b04:	4402      	add	r2, r0
 8001b06:	4603      	mov	r3, r0
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <memset+0xa>
 8001b0c:	4770      	bx	lr
 8001b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b12:	e7f9      	b.n	8001b08 <memset+0x4>

08001b14 <_close_r>:
 8001b14:	b538      	push	{r3, r4, r5, lr}
 8001b16:	4d06      	ldr	r5, [pc, #24]	@ (8001b30 <_close_r+0x1c>)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	602b      	str	r3, [r5, #0]
 8001b20:	f7fe fefb 	bl	800091a <_close>
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	d102      	bne.n	8001b2e <_close_r+0x1a>
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	b103      	cbz	r3, 8001b2e <_close_r+0x1a>
 8001b2c:	6023      	str	r3, [r4, #0]
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	2000021c 	.word	0x2000021c

08001b34 <_lseek_r>:
 8001b34:	b538      	push	{r3, r4, r5, lr}
 8001b36:	4d07      	ldr	r5, [pc, #28]	@ (8001b54 <_lseek_r+0x20>)
 8001b38:	4604      	mov	r4, r0
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	602a      	str	r2, [r5, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f7fe fef3 	bl	800092e <_lseek>
 8001b48:	1c43      	adds	r3, r0, #1
 8001b4a:	d102      	bne.n	8001b52 <_lseek_r+0x1e>
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	b103      	cbz	r3, 8001b52 <_lseek_r+0x1e>
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
 8001b54:	2000021c 	.word	0x2000021c

08001b58 <_read_r>:
 8001b58:	b538      	push	{r3, r4, r5, lr}
 8001b5a:	4d07      	ldr	r5, [pc, #28]	@ (8001b78 <_read_r+0x20>)
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	4608      	mov	r0, r1
 8001b60:	4611      	mov	r1, r2
 8001b62:	2200      	movs	r2, #0
 8001b64:	602a      	str	r2, [r5, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f7fe fec7 	bl	80008fa <_read>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	d102      	bne.n	8001b76 <_read_r+0x1e>
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	b103      	cbz	r3, 8001b76 <_read_r+0x1e>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	2000021c 	.word	0x2000021c

08001b7c <_write_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4d07      	ldr	r5, [pc, #28]	@ (8001b9c <_write_r+0x20>)
 8001b80:	4604      	mov	r4, r0
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	602a      	str	r2, [r5, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f7fe fd62 	bl	8000654 <_write>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_write_r+0x1e>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_write_r+0x1e>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	2000021c 	.word	0x2000021c

08001ba0 <__errno>:
 8001ba0:	4b01      	ldr	r3, [pc, #4]	@ (8001ba8 <__errno+0x8>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000020 	.word	0x20000020

08001bac <__libc_init_array>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	4d0d      	ldr	r5, [pc, #52]	@ (8001be4 <__libc_init_array+0x38>)
 8001bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8001be8 <__libc_init_array+0x3c>)
 8001bb2:	1b64      	subs	r4, r4, r5
 8001bb4:	10a4      	asrs	r4, r4, #2
 8001bb6:	2600      	movs	r6, #0
 8001bb8:	42a6      	cmp	r6, r4
 8001bba:	d109      	bne.n	8001bd0 <__libc_init_array+0x24>
 8001bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8001bec <__libc_init_array+0x40>)
 8001bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8001bf0 <__libc_init_array+0x44>)
 8001bc0:	f000 fd22 	bl	8002608 <_init>
 8001bc4:	1b64      	subs	r4, r4, r5
 8001bc6:	10a4      	asrs	r4, r4, #2
 8001bc8:	2600      	movs	r6, #0
 8001bca:	42a6      	cmp	r6, r4
 8001bcc:	d105      	bne.n	8001bda <__libc_init_array+0x2e>
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd4:	4798      	blx	r3
 8001bd6:	3601      	adds	r6, #1
 8001bd8:	e7ee      	b.n	8001bb8 <__libc_init_array+0xc>
 8001bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bde:	4798      	blx	r3
 8001be0:	3601      	adds	r6, #1
 8001be2:	e7f2      	b.n	8001bca <__libc_init_array+0x1e>
 8001be4:	080026c0 	.word	0x080026c0
 8001be8:	080026c0 	.word	0x080026c0
 8001bec:	080026c0 	.word	0x080026c0
 8001bf0:	080026c4 	.word	0x080026c4

08001bf4 <__retarget_lock_init_recursive>:
 8001bf4:	4770      	bx	lr

08001bf6 <__retarget_lock_acquire_recursive>:
 8001bf6:	4770      	bx	lr

08001bf8 <__retarget_lock_release_recursive>:
 8001bf8:	4770      	bx	lr
	...

08001bfc <_free_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4605      	mov	r5, r0
 8001c00:	2900      	cmp	r1, #0
 8001c02:	d041      	beq.n	8001c88 <_free_r+0x8c>
 8001c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c08:	1f0c      	subs	r4, r1, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bfb8      	it	lt
 8001c0e:	18e4      	addlt	r4, r4, r3
 8001c10:	f000 f8e0 	bl	8001dd4 <__malloc_lock>
 8001c14:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <_free_r+0x90>)
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	b933      	cbnz	r3, 8001c28 <_free_r+0x2c>
 8001c1a:	6063      	str	r3, [r4, #4]
 8001c1c:	6014      	str	r4, [r2, #0]
 8001c1e:	4628      	mov	r0, r5
 8001c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c24:	f000 b8dc 	b.w	8001de0 <__malloc_unlock>
 8001c28:	42a3      	cmp	r3, r4
 8001c2a:	d908      	bls.n	8001c3e <_free_r+0x42>
 8001c2c:	6820      	ldr	r0, [r4, #0]
 8001c2e:	1821      	adds	r1, r4, r0
 8001c30:	428b      	cmp	r3, r1
 8001c32:	bf01      	itttt	eq
 8001c34:	6819      	ldreq	r1, [r3, #0]
 8001c36:	685b      	ldreq	r3, [r3, #4]
 8001c38:	1809      	addeq	r1, r1, r0
 8001c3a:	6021      	streq	r1, [r4, #0]
 8001c3c:	e7ed      	b.n	8001c1a <_free_r+0x1e>
 8001c3e:	461a      	mov	r2, r3
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	b10b      	cbz	r3, 8001c48 <_free_r+0x4c>
 8001c44:	42a3      	cmp	r3, r4
 8001c46:	d9fa      	bls.n	8001c3e <_free_r+0x42>
 8001c48:	6811      	ldr	r1, [r2, #0]
 8001c4a:	1850      	adds	r0, r2, r1
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	d10b      	bne.n	8001c68 <_free_r+0x6c>
 8001c50:	6820      	ldr	r0, [r4, #0]
 8001c52:	4401      	add	r1, r0
 8001c54:	1850      	adds	r0, r2, r1
 8001c56:	4283      	cmp	r3, r0
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	d1e0      	bne.n	8001c1e <_free_r+0x22>
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6053      	str	r3, [r2, #4]
 8001c62:	4408      	add	r0, r1
 8001c64:	6010      	str	r0, [r2, #0]
 8001c66:	e7da      	b.n	8001c1e <_free_r+0x22>
 8001c68:	d902      	bls.n	8001c70 <_free_r+0x74>
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	602b      	str	r3, [r5, #0]
 8001c6e:	e7d6      	b.n	8001c1e <_free_r+0x22>
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	1821      	adds	r1, r4, r0
 8001c74:	428b      	cmp	r3, r1
 8001c76:	bf04      	itt	eq
 8001c78:	6819      	ldreq	r1, [r3, #0]
 8001c7a:	685b      	ldreq	r3, [r3, #4]
 8001c7c:	6063      	str	r3, [r4, #4]
 8001c7e:	bf04      	itt	eq
 8001c80:	1809      	addeq	r1, r1, r0
 8001c82:	6021      	streq	r1, [r4, #0]
 8001c84:	6054      	str	r4, [r2, #4]
 8001c86:	e7ca      	b.n	8001c1e <_free_r+0x22>
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000228 	.word	0x20000228

08001c90 <sbrk_aligned>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4e0f      	ldr	r6, [pc, #60]	@ (8001cd0 <sbrk_aligned+0x40>)
 8001c94:	460c      	mov	r4, r1
 8001c96:	6831      	ldr	r1, [r6, #0]
 8001c98:	4605      	mov	r5, r0
 8001c9a:	b911      	cbnz	r1, 8001ca2 <sbrk_aligned+0x12>
 8001c9c:	f000 fca4 	bl	80025e8 <_sbrk_r>
 8001ca0:	6030      	str	r0, [r6, #0]
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 fc9f 	bl	80025e8 <_sbrk_r>
 8001caa:	1c43      	adds	r3, r0, #1
 8001cac:	d103      	bne.n	8001cb6 <sbrk_aligned+0x26>
 8001cae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
 8001cb6:	1cc4      	adds	r4, r0, #3
 8001cb8:	f024 0403 	bic.w	r4, r4, #3
 8001cbc:	42a0      	cmp	r0, r4
 8001cbe:	d0f8      	beq.n	8001cb2 <sbrk_aligned+0x22>
 8001cc0:	1a21      	subs	r1, r4, r0
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f000 fc90 	bl	80025e8 <_sbrk_r>
 8001cc8:	3001      	adds	r0, #1
 8001cca:	d1f2      	bne.n	8001cb2 <sbrk_aligned+0x22>
 8001ccc:	e7ef      	b.n	8001cae <sbrk_aligned+0x1e>
 8001cce:	bf00      	nop
 8001cd0:	20000224 	.word	0x20000224

08001cd4 <_malloc_r>:
 8001cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd8:	1ccd      	adds	r5, r1, #3
 8001cda:	f025 0503 	bic.w	r5, r5, #3
 8001cde:	3508      	adds	r5, #8
 8001ce0:	2d0c      	cmp	r5, #12
 8001ce2:	bf38      	it	cc
 8001ce4:	250c      	movcc	r5, #12
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	4606      	mov	r6, r0
 8001cea:	db01      	blt.n	8001cf0 <_malloc_r+0x1c>
 8001cec:	42a9      	cmp	r1, r5
 8001cee:	d904      	bls.n	8001cfa <_malloc_r+0x26>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	6033      	str	r3, [r6, #0]
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001dd0 <_malloc_r+0xfc>
 8001cfe:	f000 f869 	bl	8001dd4 <__malloc_lock>
 8001d02:	f8d8 3000 	ldr.w	r3, [r8]
 8001d06:	461c      	mov	r4, r3
 8001d08:	bb44      	cbnz	r4, 8001d5c <_malloc_r+0x88>
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff ffbf 	bl	8001c90 <sbrk_aligned>
 8001d12:	1c43      	adds	r3, r0, #1
 8001d14:	4604      	mov	r4, r0
 8001d16:	d158      	bne.n	8001dca <_malloc_r+0xf6>
 8001d18:	f8d8 4000 	ldr.w	r4, [r8]
 8001d1c:	4627      	mov	r7, r4
 8001d1e:	2f00      	cmp	r7, #0
 8001d20:	d143      	bne.n	8001daa <_malloc_r+0xd6>
 8001d22:	2c00      	cmp	r4, #0
 8001d24:	d04b      	beq.n	8001dbe <_malloc_r+0xea>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	4639      	mov	r1, r7
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	eb04 0903 	add.w	r9, r4, r3
 8001d30:	f000 fc5a 	bl	80025e8 <_sbrk_r>
 8001d34:	4581      	cmp	r9, r0
 8001d36:	d142      	bne.n	8001dbe <_malloc_r+0xea>
 8001d38:	6821      	ldr	r1, [r4, #0]
 8001d3a:	1a6d      	subs	r5, r5, r1
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f7ff ffa6 	bl	8001c90 <sbrk_aligned>
 8001d44:	3001      	adds	r0, #1
 8001d46:	d03a      	beq.n	8001dbe <_malloc_r+0xea>
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	442b      	add	r3, r5
 8001d4c:	6023      	str	r3, [r4, #0]
 8001d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	bb62      	cbnz	r2, 8001db0 <_malloc_r+0xdc>
 8001d56:	f8c8 7000 	str.w	r7, [r8]
 8001d5a:	e00f      	b.n	8001d7c <_malloc_r+0xa8>
 8001d5c:	6822      	ldr	r2, [r4, #0]
 8001d5e:	1b52      	subs	r2, r2, r5
 8001d60:	d420      	bmi.n	8001da4 <_malloc_r+0xd0>
 8001d62:	2a0b      	cmp	r2, #11
 8001d64:	d917      	bls.n	8001d96 <_malloc_r+0xc2>
 8001d66:	1961      	adds	r1, r4, r5
 8001d68:	42a3      	cmp	r3, r4
 8001d6a:	6025      	str	r5, [r4, #0]
 8001d6c:	bf18      	it	ne
 8001d6e:	6059      	strne	r1, [r3, #4]
 8001d70:	6863      	ldr	r3, [r4, #4]
 8001d72:	bf08      	it	eq
 8001d74:	f8c8 1000 	streq.w	r1, [r8]
 8001d78:	5162      	str	r2, [r4, r5]
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f000 f82f 	bl	8001de0 <__malloc_unlock>
 8001d82:	f104 000b 	add.w	r0, r4, #11
 8001d86:	1d23      	adds	r3, r4, #4
 8001d88:	f020 0007 	bic.w	r0, r0, #7
 8001d8c:	1ac2      	subs	r2, r0, r3
 8001d8e:	bf1c      	itt	ne
 8001d90:	1a1b      	subne	r3, r3, r0
 8001d92:	50a3      	strne	r3, [r4, r2]
 8001d94:	e7af      	b.n	8001cf6 <_malloc_r+0x22>
 8001d96:	6862      	ldr	r2, [r4, #4]
 8001d98:	42a3      	cmp	r3, r4
 8001d9a:	bf0c      	ite	eq
 8001d9c:	f8c8 2000 	streq.w	r2, [r8]
 8001da0:	605a      	strne	r2, [r3, #4]
 8001da2:	e7eb      	b.n	8001d7c <_malloc_r+0xa8>
 8001da4:	4623      	mov	r3, r4
 8001da6:	6864      	ldr	r4, [r4, #4]
 8001da8:	e7ae      	b.n	8001d08 <_malloc_r+0x34>
 8001daa:	463c      	mov	r4, r7
 8001dac:	687f      	ldr	r7, [r7, #4]
 8001dae:	e7b6      	b.n	8001d1e <_malloc_r+0x4a>
 8001db0:	461a      	mov	r2, r3
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	42a3      	cmp	r3, r4
 8001db6:	d1fb      	bne.n	8001db0 <_malloc_r+0xdc>
 8001db8:	2300      	movs	r3, #0
 8001dba:	6053      	str	r3, [r2, #4]
 8001dbc:	e7de      	b.n	8001d7c <_malloc_r+0xa8>
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	6033      	str	r3, [r6, #0]
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f000 f80c 	bl	8001de0 <__malloc_unlock>
 8001dc8:	e794      	b.n	8001cf4 <_malloc_r+0x20>
 8001dca:	6005      	str	r5, [r0, #0]
 8001dcc:	e7d6      	b.n	8001d7c <_malloc_r+0xa8>
 8001dce:	bf00      	nop
 8001dd0:	20000228 	.word	0x20000228

08001dd4 <__malloc_lock>:
 8001dd4:	4801      	ldr	r0, [pc, #4]	@ (8001ddc <__malloc_lock+0x8>)
 8001dd6:	f7ff bf0e 	b.w	8001bf6 <__retarget_lock_acquire_recursive>
 8001dda:	bf00      	nop
 8001ddc:	20000220 	.word	0x20000220

08001de0 <__malloc_unlock>:
 8001de0:	4801      	ldr	r0, [pc, #4]	@ (8001de8 <__malloc_unlock+0x8>)
 8001de2:	f7ff bf09 	b.w	8001bf8 <__retarget_lock_release_recursive>
 8001de6:	bf00      	nop
 8001de8:	20000220 	.word	0x20000220

08001dec <__sfputc_r>:
 8001dec:	6893      	ldr	r3, [r2, #8]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	b410      	push	{r4}
 8001df4:	6093      	str	r3, [r2, #8]
 8001df6:	da08      	bge.n	8001e0a <__sfputc_r+0x1e>
 8001df8:	6994      	ldr	r4, [r2, #24]
 8001dfa:	42a3      	cmp	r3, r4
 8001dfc:	db01      	blt.n	8001e02 <__sfputc_r+0x16>
 8001dfe:	290a      	cmp	r1, #10
 8001e00:	d103      	bne.n	8001e0a <__sfputc_r+0x1e>
 8001e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e06:	f7ff bde8 	b.w	80019da <__swbuf_r>
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	1c58      	adds	r0, r3, #1
 8001e0e:	6010      	str	r0, [r2, #0]
 8001e10:	7019      	strb	r1, [r3, #0]
 8001e12:	4608      	mov	r0, r1
 8001e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <__sfputs_r>:
 8001e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1c:	4606      	mov	r6, r0
 8001e1e:	460f      	mov	r7, r1
 8001e20:	4614      	mov	r4, r2
 8001e22:	18d5      	adds	r5, r2, r3
 8001e24:	42ac      	cmp	r4, r5
 8001e26:	d101      	bne.n	8001e2c <__sfputs_r+0x12>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	e007      	b.n	8001e3c <__sfputs_r+0x22>
 8001e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e30:	463a      	mov	r2, r7
 8001e32:	4630      	mov	r0, r6
 8001e34:	f7ff ffda 	bl	8001dec <__sfputc_r>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d1f3      	bne.n	8001e24 <__sfputs_r+0xa>
 8001e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e40 <_vfiprintf_r>:
 8001e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e44:	460d      	mov	r5, r1
 8001e46:	b09d      	sub	sp, #116	@ 0x74
 8001e48:	4614      	mov	r4, r2
 8001e4a:	4698      	mov	r8, r3
 8001e4c:	4606      	mov	r6, r0
 8001e4e:	b118      	cbz	r0, 8001e58 <_vfiprintf_r+0x18>
 8001e50:	6a03      	ldr	r3, [r0, #32]
 8001e52:	b90b      	cbnz	r3, 8001e58 <_vfiprintf_r+0x18>
 8001e54:	f7ff fcd8 	bl	8001808 <__sinit>
 8001e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e5a:	07d9      	lsls	r1, r3, #31
 8001e5c:	d405      	bmi.n	8001e6a <_vfiprintf_r+0x2a>
 8001e5e:	89ab      	ldrh	r3, [r5, #12]
 8001e60:	059a      	lsls	r2, r3, #22
 8001e62:	d402      	bmi.n	8001e6a <_vfiprintf_r+0x2a>
 8001e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e66:	f7ff fec6 	bl	8001bf6 <__retarget_lock_acquire_recursive>
 8001e6a:	89ab      	ldrh	r3, [r5, #12]
 8001e6c:	071b      	lsls	r3, r3, #28
 8001e6e:	d501      	bpl.n	8001e74 <_vfiprintf_r+0x34>
 8001e70:	692b      	ldr	r3, [r5, #16]
 8001e72:	b99b      	cbnz	r3, 8001e9c <_vfiprintf_r+0x5c>
 8001e74:	4629      	mov	r1, r5
 8001e76:	4630      	mov	r0, r6
 8001e78:	f7ff fdee 	bl	8001a58 <__swsetup_r>
 8001e7c:	b170      	cbz	r0, 8001e9c <_vfiprintf_r+0x5c>
 8001e7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e80:	07dc      	lsls	r4, r3, #31
 8001e82:	d504      	bpl.n	8001e8e <_vfiprintf_r+0x4e>
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e88:	b01d      	add	sp, #116	@ 0x74
 8001e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8e:	89ab      	ldrh	r3, [r5, #12]
 8001e90:	0598      	lsls	r0, r3, #22
 8001e92:	d4f7      	bmi.n	8001e84 <_vfiprintf_r+0x44>
 8001e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e96:	f7ff feaf 	bl	8001bf8 <__retarget_lock_release_recursive>
 8001e9a:	e7f3      	b.n	8001e84 <_vfiprintf_r+0x44>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001eaa:	2330      	movs	r3, #48	@ 0x30
 8001eac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800205c <_vfiprintf_r+0x21c>
 8001eb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001eb4:	f04f 0901 	mov.w	r9, #1
 8001eb8:	4623      	mov	r3, r4
 8001eba:	469a      	mov	sl, r3
 8001ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ec0:	b10a      	cbz	r2, 8001ec6 <_vfiprintf_r+0x86>
 8001ec2:	2a25      	cmp	r2, #37	@ 0x25
 8001ec4:	d1f9      	bne.n	8001eba <_vfiprintf_r+0x7a>
 8001ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8001eca:	d00b      	beq.n	8001ee4 <_vfiprintf_r+0xa4>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	4622      	mov	r2, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f7ff ffa1 	bl	8001e1a <__sfputs_r>
 8001ed8:	3001      	adds	r0, #1
 8001eda:	f000 80a7 	beq.w	800202c <_vfiprintf_r+0x1ec>
 8001ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ee0:	445a      	add	r2, fp
 8001ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 809f 	beq.w	800202c <_vfiprintf_r+0x1ec>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ef8:	f10a 0a01 	add.w	sl, sl, #1
 8001efc:	9304      	str	r3, [sp, #16]
 8001efe:	9307      	str	r3, [sp, #28]
 8001f00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f06:	4654      	mov	r4, sl
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f0e:	4853      	ldr	r0, [pc, #332]	@ (800205c <_vfiprintf_r+0x21c>)
 8001f10:	f7fe f966 	bl	80001e0 <memchr>
 8001f14:	9a04      	ldr	r2, [sp, #16]
 8001f16:	b9d8      	cbnz	r0, 8001f50 <_vfiprintf_r+0x110>
 8001f18:	06d1      	lsls	r1, r2, #27
 8001f1a:	bf44      	itt	mi
 8001f1c:	2320      	movmi	r3, #32
 8001f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f22:	0713      	lsls	r3, r2, #28
 8001f24:	bf44      	itt	mi
 8001f26:	232b      	movmi	r3, #43	@ 0x2b
 8001f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8001f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f32:	d015      	beq.n	8001f60 <_vfiprintf_r+0x120>
 8001f34:	9a07      	ldr	r2, [sp, #28]
 8001f36:	4654      	mov	r4, sl
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f04f 0c0a 	mov.w	ip, #10
 8001f3e:	4621      	mov	r1, r4
 8001f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f44:	3b30      	subs	r3, #48	@ 0x30
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	d94b      	bls.n	8001fe2 <_vfiprintf_r+0x1a2>
 8001f4a:	b1b0      	cbz	r0, 8001f7a <_vfiprintf_r+0x13a>
 8001f4c:	9207      	str	r2, [sp, #28]
 8001f4e:	e014      	b.n	8001f7a <_vfiprintf_r+0x13a>
 8001f50:	eba0 0308 	sub.w	r3, r0, r8
 8001f54:	fa09 f303 	lsl.w	r3, r9, r3
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	9304      	str	r3, [sp, #16]
 8001f5c:	46a2      	mov	sl, r4
 8001f5e:	e7d2      	b.n	8001f06 <_vfiprintf_r+0xc6>
 8001f60:	9b03      	ldr	r3, [sp, #12]
 8001f62:	1d19      	adds	r1, r3, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	9103      	str	r1, [sp, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfbb      	ittet	lt
 8001f6c:	425b      	neglt	r3, r3
 8001f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8001f72:	9307      	strge	r3, [sp, #28]
 8001f74:	9307      	strlt	r3, [sp, #28]
 8001f76:	bfb8      	it	lt
 8001f78:	9204      	strlt	r2, [sp, #16]
 8001f7a:	7823      	ldrb	r3, [r4, #0]
 8001f7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f7e:	d10a      	bne.n	8001f96 <_vfiprintf_r+0x156>
 8001f80:	7863      	ldrb	r3, [r4, #1]
 8001f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f84:	d132      	bne.n	8001fec <_vfiprintf_r+0x1ac>
 8001f86:	9b03      	ldr	r3, [sp, #12]
 8001f88:	1d1a      	adds	r2, r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	9203      	str	r2, [sp, #12]
 8001f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f92:	3402      	adds	r4, #2
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800206c <_vfiprintf_r+0x22c>
 8001f9a:	7821      	ldrb	r1, [r4, #0]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4650      	mov	r0, sl
 8001fa0:	f7fe f91e 	bl	80001e0 <memchr>
 8001fa4:	b138      	cbz	r0, 8001fb6 <_vfiprintf_r+0x176>
 8001fa6:	9b04      	ldr	r3, [sp, #16]
 8001fa8:	eba0 000a 	sub.w	r0, r0, sl
 8001fac:	2240      	movs	r2, #64	@ 0x40
 8001fae:	4082      	lsls	r2, r0
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	9304      	str	r3, [sp, #16]
 8001fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fba:	4829      	ldr	r0, [pc, #164]	@ (8002060 <_vfiprintf_r+0x220>)
 8001fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	f7fe f90d 	bl	80001e0 <memchr>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d03f      	beq.n	800204a <_vfiprintf_r+0x20a>
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <_vfiprintf_r+0x224>)
 8001fcc:	bb1b      	cbnz	r3, 8002016 <_vfiprintf_r+0x1d6>
 8001fce:	9b03      	ldr	r3, [sp, #12]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	f023 0307 	bic.w	r3, r3, #7
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	9303      	str	r3, [sp, #12]
 8001fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fdc:	443b      	add	r3, r7
 8001fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fe0:	e76a      	b.n	8001eb8 <_vfiprintf_r+0x78>
 8001fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e7a8      	b.n	8001f3e <_vfiprintf_r+0xfe>
 8001fec:	2300      	movs	r3, #0
 8001fee:	3401      	adds	r4, #1
 8001ff0:	9305      	str	r3, [sp, #20]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 0c0a 	mov.w	ip, #10
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ffe:	3a30      	subs	r2, #48	@ 0x30
 8002000:	2a09      	cmp	r2, #9
 8002002:	d903      	bls.n	800200c <_vfiprintf_r+0x1cc>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0c6      	beq.n	8001f96 <_vfiprintf_r+0x156>
 8002008:	9105      	str	r1, [sp, #20]
 800200a:	e7c4      	b.n	8001f96 <_vfiprintf_r+0x156>
 800200c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002010:	4604      	mov	r4, r0
 8002012:	2301      	movs	r3, #1
 8002014:	e7f0      	b.n	8001ff8 <_vfiprintf_r+0x1b8>
 8002016:	ab03      	add	r3, sp, #12
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	462a      	mov	r2, r5
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <_vfiprintf_r+0x228>)
 800201e:	a904      	add	r1, sp, #16
 8002020:	4630      	mov	r0, r6
 8002022:	f3af 8000 	nop.w
 8002026:	4607      	mov	r7, r0
 8002028:	1c78      	adds	r0, r7, #1
 800202a:	d1d6      	bne.n	8001fda <_vfiprintf_r+0x19a>
 800202c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800202e:	07d9      	lsls	r1, r3, #31
 8002030:	d405      	bmi.n	800203e <_vfiprintf_r+0x1fe>
 8002032:	89ab      	ldrh	r3, [r5, #12]
 8002034:	059a      	lsls	r2, r3, #22
 8002036:	d402      	bmi.n	800203e <_vfiprintf_r+0x1fe>
 8002038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800203a:	f7ff fddd 	bl	8001bf8 <__retarget_lock_release_recursive>
 800203e:	89ab      	ldrh	r3, [r5, #12]
 8002040:	065b      	lsls	r3, r3, #25
 8002042:	f53f af1f 	bmi.w	8001e84 <_vfiprintf_r+0x44>
 8002046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002048:	e71e      	b.n	8001e88 <_vfiprintf_r+0x48>
 800204a:	ab03      	add	r3, sp, #12
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	462a      	mov	r2, r5
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <_vfiprintf_r+0x228>)
 8002052:	a904      	add	r1, sp, #16
 8002054:	4630      	mov	r0, r6
 8002056:	f000 f879 	bl	800214c <_printf_i>
 800205a:	e7e4      	b.n	8002026 <_vfiprintf_r+0x1e6>
 800205c:	08002684 	.word	0x08002684
 8002060:	0800268e 	.word	0x0800268e
 8002064:	00000000 	.word	0x00000000
 8002068:	08001e1b 	.word	0x08001e1b
 800206c:	0800268a 	.word	0x0800268a

08002070 <_printf_common>:
 8002070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002074:	4616      	mov	r6, r2
 8002076:	4698      	mov	r8, r3
 8002078:	688a      	ldr	r2, [r1, #8]
 800207a:	690b      	ldr	r3, [r1, #16]
 800207c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002080:	4293      	cmp	r3, r2
 8002082:	bfb8      	it	lt
 8002084:	4613      	movlt	r3, r2
 8002086:	6033      	str	r3, [r6, #0]
 8002088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800208c:	4607      	mov	r7, r0
 800208e:	460c      	mov	r4, r1
 8002090:	b10a      	cbz	r2, 8002096 <_printf_common+0x26>
 8002092:	3301      	adds	r3, #1
 8002094:	6033      	str	r3, [r6, #0]
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	0699      	lsls	r1, r3, #26
 800209a:	bf42      	ittt	mi
 800209c:	6833      	ldrmi	r3, [r6, #0]
 800209e:	3302      	addmi	r3, #2
 80020a0:	6033      	strmi	r3, [r6, #0]
 80020a2:	6825      	ldr	r5, [r4, #0]
 80020a4:	f015 0506 	ands.w	r5, r5, #6
 80020a8:	d106      	bne.n	80020b8 <_printf_common+0x48>
 80020aa:	f104 0a19 	add.w	sl, r4, #25
 80020ae:	68e3      	ldr	r3, [r4, #12]
 80020b0:	6832      	ldr	r2, [r6, #0]
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	42ab      	cmp	r3, r5
 80020b6:	dc26      	bgt.n	8002106 <_printf_common+0x96>
 80020b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	3b00      	subs	r3, #0
 80020c0:	bf18      	it	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	0692      	lsls	r2, r2, #26
 80020c6:	d42b      	bmi.n	8002120 <_printf_common+0xb0>
 80020c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80020cc:	4641      	mov	r1, r8
 80020ce:	4638      	mov	r0, r7
 80020d0:	47c8      	blx	r9
 80020d2:	3001      	adds	r0, #1
 80020d4:	d01e      	beq.n	8002114 <_printf_common+0xa4>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	6922      	ldr	r2, [r4, #16]
 80020da:	f003 0306 	and.w	r3, r3, #6
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf02      	ittt	eq
 80020e2:	68e5      	ldreq	r5, [r4, #12]
 80020e4:	6833      	ldreq	r3, [r6, #0]
 80020e6:	1aed      	subeq	r5, r5, r3
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	bf0c      	ite	eq
 80020ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020f0:	2500      	movne	r5, #0
 80020f2:	4293      	cmp	r3, r2
 80020f4:	bfc4      	itt	gt
 80020f6:	1a9b      	subgt	r3, r3, r2
 80020f8:	18ed      	addgt	r5, r5, r3
 80020fa:	2600      	movs	r6, #0
 80020fc:	341a      	adds	r4, #26
 80020fe:	42b5      	cmp	r5, r6
 8002100:	d11a      	bne.n	8002138 <_printf_common+0xc8>
 8002102:	2000      	movs	r0, #0
 8002104:	e008      	b.n	8002118 <_printf_common+0xa8>
 8002106:	2301      	movs	r3, #1
 8002108:	4652      	mov	r2, sl
 800210a:	4641      	mov	r1, r8
 800210c:	4638      	mov	r0, r7
 800210e:	47c8      	blx	r9
 8002110:	3001      	adds	r0, #1
 8002112:	d103      	bne.n	800211c <_printf_common+0xac>
 8002114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800211c:	3501      	adds	r5, #1
 800211e:	e7c6      	b.n	80020ae <_printf_common+0x3e>
 8002120:	18e1      	adds	r1, r4, r3
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	2030      	movs	r0, #48	@ 0x30
 8002126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800212a:	4422      	add	r2, r4
 800212c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002134:	3302      	adds	r3, #2
 8002136:	e7c7      	b.n	80020c8 <_printf_common+0x58>
 8002138:	2301      	movs	r3, #1
 800213a:	4622      	mov	r2, r4
 800213c:	4641      	mov	r1, r8
 800213e:	4638      	mov	r0, r7
 8002140:	47c8      	blx	r9
 8002142:	3001      	adds	r0, #1
 8002144:	d0e6      	beq.n	8002114 <_printf_common+0xa4>
 8002146:	3601      	adds	r6, #1
 8002148:	e7d9      	b.n	80020fe <_printf_common+0x8e>
	...

0800214c <_printf_i>:
 800214c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002150:	7e0f      	ldrb	r7, [r1, #24]
 8002152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002154:	2f78      	cmp	r7, #120	@ 0x78
 8002156:	4691      	mov	r9, r2
 8002158:	4680      	mov	r8, r0
 800215a:	460c      	mov	r4, r1
 800215c:	469a      	mov	sl, r3
 800215e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002162:	d807      	bhi.n	8002174 <_printf_i+0x28>
 8002164:	2f62      	cmp	r7, #98	@ 0x62
 8002166:	d80a      	bhi.n	800217e <_printf_i+0x32>
 8002168:	2f00      	cmp	r7, #0
 800216a:	f000 80d1 	beq.w	8002310 <_printf_i+0x1c4>
 800216e:	2f58      	cmp	r7, #88	@ 0x58
 8002170:	f000 80b8 	beq.w	80022e4 <_printf_i+0x198>
 8002174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800217c:	e03a      	b.n	80021f4 <_printf_i+0xa8>
 800217e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002182:	2b15      	cmp	r3, #21
 8002184:	d8f6      	bhi.n	8002174 <_printf_i+0x28>
 8002186:	a101      	add	r1, pc, #4	@ (adr r1, 800218c <_printf_i+0x40>)
 8002188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800218c:	080021e5 	.word	0x080021e5
 8002190:	080021f9 	.word	0x080021f9
 8002194:	08002175 	.word	0x08002175
 8002198:	08002175 	.word	0x08002175
 800219c:	08002175 	.word	0x08002175
 80021a0:	08002175 	.word	0x08002175
 80021a4:	080021f9 	.word	0x080021f9
 80021a8:	08002175 	.word	0x08002175
 80021ac:	08002175 	.word	0x08002175
 80021b0:	08002175 	.word	0x08002175
 80021b4:	08002175 	.word	0x08002175
 80021b8:	080022f7 	.word	0x080022f7
 80021bc:	08002223 	.word	0x08002223
 80021c0:	080022b1 	.word	0x080022b1
 80021c4:	08002175 	.word	0x08002175
 80021c8:	08002175 	.word	0x08002175
 80021cc:	08002319 	.word	0x08002319
 80021d0:	08002175 	.word	0x08002175
 80021d4:	08002223 	.word	0x08002223
 80021d8:	08002175 	.word	0x08002175
 80021dc:	08002175 	.word	0x08002175
 80021e0:	080022b9 	.word	0x080022b9
 80021e4:	6833      	ldr	r3, [r6, #0]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6032      	str	r2, [r6, #0]
 80021ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021f4:	2301      	movs	r3, #1
 80021f6:	e09c      	b.n	8002332 <_printf_i+0x1e6>
 80021f8:	6833      	ldr	r3, [r6, #0]
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	1d19      	adds	r1, r3, #4
 80021fe:	6031      	str	r1, [r6, #0]
 8002200:	0606      	lsls	r6, r0, #24
 8002202:	d501      	bpl.n	8002208 <_printf_i+0xbc>
 8002204:	681d      	ldr	r5, [r3, #0]
 8002206:	e003      	b.n	8002210 <_printf_i+0xc4>
 8002208:	0645      	lsls	r5, r0, #25
 800220a:	d5fb      	bpl.n	8002204 <_printf_i+0xb8>
 800220c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002210:	2d00      	cmp	r5, #0
 8002212:	da03      	bge.n	800221c <_printf_i+0xd0>
 8002214:	232d      	movs	r3, #45	@ 0x2d
 8002216:	426d      	negs	r5, r5
 8002218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800221c:	4858      	ldr	r0, [pc, #352]	@ (8002380 <_printf_i+0x234>)
 800221e:	230a      	movs	r3, #10
 8002220:	e011      	b.n	8002246 <_printf_i+0xfa>
 8002222:	6821      	ldr	r1, [r4, #0]
 8002224:	6833      	ldr	r3, [r6, #0]
 8002226:	0608      	lsls	r0, r1, #24
 8002228:	f853 5b04 	ldr.w	r5, [r3], #4
 800222c:	d402      	bmi.n	8002234 <_printf_i+0xe8>
 800222e:	0649      	lsls	r1, r1, #25
 8002230:	bf48      	it	mi
 8002232:	b2ad      	uxthmi	r5, r5
 8002234:	2f6f      	cmp	r7, #111	@ 0x6f
 8002236:	4852      	ldr	r0, [pc, #328]	@ (8002380 <_printf_i+0x234>)
 8002238:	6033      	str	r3, [r6, #0]
 800223a:	bf14      	ite	ne
 800223c:	230a      	movne	r3, #10
 800223e:	2308      	moveq	r3, #8
 8002240:	2100      	movs	r1, #0
 8002242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002246:	6866      	ldr	r6, [r4, #4]
 8002248:	60a6      	str	r6, [r4, #8]
 800224a:	2e00      	cmp	r6, #0
 800224c:	db05      	blt.n	800225a <_printf_i+0x10e>
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	432e      	orrs	r6, r5
 8002252:	f021 0104 	bic.w	r1, r1, #4
 8002256:	6021      	str	r1, [r4, #0]
 8002258:	d04b      	beq.n	80022f2 <_printf_i+0x1a6>
 800225a:	4616      	mov	r6, r2
 800225c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002260:	fb03 5711 	mls	r7, r3, r1, r5
 8002264:	5dc7      	ldrb	r7, [r0, r7]
 8002266:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800226a:	462f      	mov	r7, r5
 800226c:	42bb      	cmp	r3, r7
 800226e:	460d      	mov	r5, r1
 8002270:	d9f4      	bls.n	800225c <_printf_i+0x110>
 8002272:	2b08      	cmp	r3, #8
 8002274:	d10b      	bne.n	800228e <_printf_i+0x142>
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	07df      	lsls	r7, r3, #31
 800227a:	d508      	bpl.n	800228e <_printf_i+0x142>
 800227c:	6923      	ldr	r3, [r4, #16]
 800227e:	6861      	ldr	r1, [r4, #4]
 8002280:	4299      	cmp	r1, r3
 8002282:	bfde      	ittt	le
 8002284:	2330      	movle	r3, #48	@ 0x30
 8002286:	f806 3c01 	strble.w	r3, [r6, #-1]
 800228a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800228e:	1b92      	subs	r2, r2, r6
 8002290:	6122      	str	r2, [r4, #16]
 8002292:	f8cd a000 	str.w	sl, [sp]
 8002296:	464b      	mov	r3, r9
 8002298:	aa03      	add	r2, sp, #12
 800229a:	4621      	mov	r1, r4
 800229c:	4640      	mov	r0, r8
 800229e:	f7ff fee7 	bl	8002070 <_printf_common>
 80022a2:	3001      	adds	r0, #1
 80022a4:	d14a      	bne.n	800233c <_printf_i+0x1f0>
 80022a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022aa:	b004      	add	sp, #16
 80022ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f043 0320 	orr.w	r3, r3, #32
 80022b6:	6023      	str	r3, [r4, #0]
 80022b8:	4832      	ldr	r0, [pc, #200]	@ (8002384 <_printf_i+0x238>)
 80022ba:	2778      	movs	r7, #120	@ 0x78
 80022bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	6831      	ldr	r1, [r6, #0]
 80022c4:	061f      	lsls	r7, r3, #24
 80022c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80022ca:	d402      	bmi.n	80022d2 <_printf_i+0x186>
 80022cc:	065f      	lsls	r7, r3, #25
 80022ce:	bf48      	it	mi
 80022d0:	b2ad      	uxthmi	r5, r5
 80022d2:	6031      	str	r1, [r6, #0]
 80022d4:	07d9      	lsls	r1, r3, #31
 80022d6:	bf44      	itt	mi
 80022d8:	f043 0320 	orrmi.w	r3, r3, #32
 80022dc:	6023      	strmi	r3, [r4, #0]
 80022de:	b11d      	cbz	r5, 80022e8 <_printf_i+0x19c>
 80022e0:	2310      	movs	r3, #16
 80022e2:	e7ad      	b.n	8002240 <_printf_i+0xf4>
 80022e4:	4826      	ldr	r0, [pc, #152]	@ (8002380 <_printf_i+0x234>)
 80022e6:	e7e9      	b.n	80022bc <_printf_i+0x170>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f023 0320 	bic.w	r3, r3, #32
 80022ee:	6023      	str	r3, [r4, #0]
 80022f0:	e7f6      	b.n	80022e0 <_printf_i+0x194>
 80022f2:	4616      	mov	r6, r2
 80022f4:	e7bd      	b.n	8002272 <_printf_i+0x126>
 80022f6:	6833      	ldr	r3, [r6, #0]
 80022f8:	6825      	ldr	r5, [r4, #0]
 80022fa:	6961      	ldr	r1, [r4, #20]
 80022fc:	1d18      	adds	r0, r3, #4
 80022fe:	6030      	str	r0, [r6, #0]
 8002300:	062e      	lsls	r6, r5, #24
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	d501      	bpl.n	800230a <_printf_i+0x1be>
 8002306:	6019      	str	r1, [r3, #0]
 8002308:	e002      	b.n	8002310 <_printf_i+0x1c4>
 800230a:	0668      	lsls	r0, r5, #25
 800230c:	d5fb      	bpl.n	8002306 <_printf_i+0x1ba>
 800230e:	8019      	strh	r1, [r3, #0]
 8002310:	2300      	movs	r3, #0
 8002312:	6123      	str	r3, [r4, #16]
 8002314:	4616      	mov	r6, r2
 8002316:	e7bc      	b.n	8002292 <_printf_i+0x146>
 8002318:	6833      	ldr	r3, [r6, #0]
 800231a:	1d1a      	adds	r2, r3, #4
 800231c:	6032      	str	r2, [r6, #0]
 800231e:	681e      	ldr	r6, [r3, #0]
 8002320:	6862      	ldr	r2, [r4, #4]
 8002322:	2100      	movs	r1, #0
 8002324:	4630      	mov	r0, r6
 8002326:	f7fd ff5b 	bl	80001e0 <memchr>
 800232a:	b108      	cbz	r0, 8002330 <_printf_i+0x1e4>
 800232c:	1b80      	subs	r0, r0, r6
 800232e:	6060      	str	r0, [r4, #4]
 8002330:	6863      	ldr	r3, [r4, #4]
 8002332:	6123      	str	r3, [r4, #16]
 8002334:	2300      	movs	r3, #0
 8002336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800233a:	e7aa      	b.n	8002292 <_printf_i+0x146>
 800233c:	6923      	ldr	r3, [r4, #16]
 800233e:	4632      	mov	r2, r6
 8002340:	4649      	mov	r1, r9
 8002342:	4640      	mov	r0, r8
 8002344:	47d0      	blx	sl
 8002346:	3001      	adds	r0, #1
 8002348:	d0ad      	beq.n	80022a6 <_printf_i+0x15a>
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	079b      	lsls	r3, r3, #30
 800234e:	d413      	bmi.n	8002378 <_printf_i+0x22c>
 8002350:	68e0      	ldr	r0, [r4, #12]
 8002352:	9b03      	ldr	r3, [sp, #12]
 8002354:	4298      	cmp	r0, r3
 8002356:	bfb8      	it	lt
 8002358:	4618      	movlt	r0, r3
 800235a:	e7a6      	b.n	80022aa <_printf_i+0x15e>
 800235c:	2301      	movs	r3, #1
 800235e:	4632      	mov	r2, r6
 8002360:	4649      	mov	r1, r9
 8002362:	4640      	mov	r0, r8
 8002364:	47d0      	blx	sl
 8002366:	3001      	adds	r0, #1
 8002368:	d09d      	beq.n	80022a6 <_printf_i+0x15a>
 800236a:	3501      	adds	r5, #1
 800236c:	68e3      	ldr	r3, [r4, #12]
 800236e:	9903      	ldr	r1, [sp, #12]
 8002370:	1a5b      	subs	r3, r3, r1
 8002372:	42ab      	cmp	r3, r5
 8002374:	dcf2      	bgt.n	800235c <_printf_i+0x210>
 8002376:	e7eb      	b.n	8002350 <_printf_i+0x204>
 8002378:	2500      	movs	r5, #0
 800237a:	f104 0619 	add.w	r6, r4, #25
 800237e:	e7f5      	b.n	800236c <_printf_i+0x220>
 8002380:	08002695 	.word	0x08002695
 8002384:	080026a6 	.word	0x080026a6

08002388 <__sflush_r>:
 8002388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002390:	0716      	lsls	r6, r2, #28
 8002392:	4605      	mov	r5, r0
 8002394:	460c      	mov	r4, r1
 8002396:	d454      	bmi.n	8002442 <__sflush_r+0xba>
 8002398:	684b      	ldr	r3, [r1, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	dc02      	bgt.n	80023a4 <__sflush_r+0x1c>
 800239e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dd48      	ble.n	8002436 <__sflush_r+0xae>
 80023a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d045      	beq.n	8002436 <__sflush_r+0xae>
 80023aa:	2300      	movs	r3, #0
 80023ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023b0:	682f      	ldr	r7, [r5, #0]
 80023b2:	6a21      	ldr	r1, [r4, #32]
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	d030      	beq.n	800241a <__sflush_r+0x92>
 80023b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	0759      	lsls	r1, r3, #29
 80023be:	d505      	bpl.n	80023cc <__sflush_r+0x44>
 80023c0:	6863      	ldr	r3, [r4, #4]
 80023c2:	1ad2      	subs	r2, r2, r3
 80023c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023c6:	b10b      	cbz	r3, 80023cc <__sflush_r+0x44>
 80023c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023d0:	6a21      	ldr	r1, [r4, #32]
 80023d2:	4628      	mov	r0, r5
 80023d4:	47b0      	blx	r6
 80023d6:	1c43      	adds	r3, r0, #1
 80023d8:	89a3      	ldrh	r3, [r4, #12]
 80023da:	d106      	bne.n	80023ea <__sflush_r+0x62>
 80023dc:	6829      	ldr	r1, [r5, #0]
 80023de:	291d      	cmp	r1, #29
 80023e0:	d82b      	bhi.n	800243a <__sflush_r+0xb2>
 80023e2:	4a2a      	ldr	r2, [pc, #168]	@ (800248c <__sflush_r+0x104>)
 80023e4:	40ca      	lsrs	r2, r1
 80023e6:	07d6      	lsls	r6, r2, #31
 80023e8:	d527      	bpl.n	800243a <__sflush_r+0xb2>
 80023ea:	2200      	movs	r2, #0
 80023ec:	6062      	str	r2, [r4, #4]
 80023ee:	04d9      	lsls	r1, r3, #19
 80023f0:	6922      	ldr	r2, [r4, #16]
 80023f2:	6022      	str	r2, [r4, #0]
 80023f4:	d504      	bpl.n	8002400 <__sflush_r+0x78>
 80023f6:	1c42      	adds	r2, r0, #1
 80023f8:	d101      	bne.n	80023fe <__sflush_r+0x76>
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	b903      	cbnz	r3, 8002400 <__sflush_r+0x78>
 80023fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8002400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002402:	602f      	str	r7, [r5, #0]
 8002404:	b1b9      	cbz	r1, 8002436 <__sflush_r+0xae>
 8002406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800240a:	4299      	cmp	r1, r3
 800240c:	d002      	beq.n	8002414 <__sflush_r+0x8c>
 800240e:	4628      	mov	r0, r5
 8002410:	f7ff fbf4 	bl	8001bfc <_free_r>
 8002414:	2300      	movs	r3, #0
 8002416:	6363      	str	r3, [r4, #52]	@ 0x34
 8002418:	e00d      	b.n	8002436 <__sflush_r+0xae>
 800241a:	2301      	movs	r3, #1
 800241c:	4628      	mov	r0, r5
 800241e:	47b0      	blx	r6
 8002420:	4602      	mov	r2, r0
 8002422:	1c50      	adds	r0, r2, #1
 8002424:	d1c9      	bne.n	80023ba <__sflush_r+0x32>
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0c6      	beq.n	80023ba <__sflush_r+0x32>
 800242c:	2b1d      	cmp	r3, #29
 800242e:	d001      	beq.n	8002434 <__sflush_r+0xac>
 8002430:	2b16      	cmp	r3, #22
 8002432:	d11e      	bne.n	8002472 <__sflush_r+0xea>
 8002434:	602f      	str	r7, [r5, #0]
 8002436:	2000      	movs	r0, #0
 8002438:	e022      	b.n	8002480 <__sflush_r+0xf8>
 800243a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800243e:	b21b      	sxth	r3, r3
 8002440:	e01b      	b.n	800247a <__sflush_r+0xf2>
 8002442:	690f      	ldr	r7, [r1, #16]
 8002444:	2f00      	cmp	r7, #0
 8002446:	d0f6      	beq.n	8002436 <__sflush_r+0xae>
 8002448:	0793      	lsls	r3, r2, #30
 800244a:	680e      	ldr	r6, [r1, #0]
 800244c:	bf08      	it	eq
 800244e:	694b      	ldreq	r3, [r1, #20]
 8002450:	600f      	str	r7, [r1, #0]
 8002452:	bf18      	it	ne
 8002454:	2300      	movne	r3, #0
 8002456:	eba6 0807 	sub.w	r8, r6, r7
 800245a:	608b      	str	r3, [r1, #8]
 800245c:	f1b8 0f00 	cmp.w	r8, #0
 8002460:	dde9      	ble.n	8002436 <__sflush_r+0xae>
 8002462:	6a21      	ldr	r1, [r4, #32]
 8002464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002466:	4643      	mov	r3, r8
 8002468:	463a      	mov	r2, r7
 800246a:	4628      	mov	r0, r5
 800246c:	47b0      	blx	r6
 800246e:	2800      	cmp	r0, #0
 8002470:	dc08      	bgt.n	8002484 <__sflush_r+0xfc>
 8002472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800247a:	81a3      	strh	r3, [r4, #12]
 800247c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002484:	4407      	add	r7, r0
 8002486:	eba8 0800 	sub.w	r8, r8, r0
 800248a:	e7e7      	b.n	800245c <__sflush_r+0xd4>
 800248c:	20400001 	.word	0x20400001

08002490 <_fflush_r>:
 8002490:	b538      	push	{r3, r4, r5, lr}
 8002492:	690b      	ldr	r3, [r1, #16]
 8002494:	4605      	mov	r5, r0
 8002496:	460c      	mov	r4, r1
 8002498:	b913      	cbnz	r3, 80024a0 <_fflush_r+0x10>
 800249a:	2500      	movs	r5, #0
 800249c:	4628      	mov	r0, r5
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	b118      	cbz	r0, 80024aa <_fflush_r+0x1a>
 80024a2:	6a03      	ldr	r3, [r0, #32]
 80024a4:	b90b      	cbnz	r3, 80024aa <_fflush_r+0x1a>
 80024a6:	f7ff f9af 	bl	8001808 <__sinit>
 80024aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f3      	beq.n	800249a <_fflush_r+0xa>
 80024b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024b4:	07d0      	lsls	r0, r2, #31
 80024b6:	d404      	bmi.n	80024c2 <_fflush_r+0x32>
 80024b8:	0599      	lsls	r1, r3, #22
 80024ba:	d402      	bmi.n	80024c2 <_fflush_r+0x32>
 80024bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024be:	f7ff fb9a 	bl	8001bf6 <__retarget_lock_acquire_recursive>
 80024c2:	4628      	mov	r0, r5
 80024c4:	4621      	mov	r1, r4
 80024c6:	f7ff ff5f 	bl	8002388 <__sflush_r>
 80024ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024cc:	07da      	lsls	r2, r3, #31
 80024ce:	4605      	mov	r5, r0
 80024d0:	d4e4      	bmi.n	800249c <_fflush_r+0xc>
 80024d2:	89a3      	ldrh	r3, [r4, #12]
 80024d4:	059b      	lsls	r3, r3, #22
 80024d6:	d4e1      	bmi.n	800249c <_fflush_r+0xc>
 80024d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024da:	f7ff fb8d 	bl	8001bf8 <__retarget_lock_release_recursive>
 80024de:	e7dd      	b.n	800249c <_fflush_r+0xc>

080024e0 <__swhatbuf_r>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	460c      	mov	r4, r1
 80024e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e8:	2900      	cmp	r1, #0
 80024ea:	b096      	sub	sp, #88	@ 0x58
 80024ec:	4615      	mov	r5, r2
 80024ee:	461e      	mov	r6, r3
 80024f0:	da0d      	bge.n	800250e <__swhatbuf_r+0x2e>
 80024f2:	89a3      	ldrh	r3, [r4, #12]
 80024f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2340      	movne	r3, #64	@ 0x40
 8002500:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002504:	2000      	movs	r0, #0
 8002506:	6031      	str	r1, [r6, #0]
 8002508:	602b      	str	r3, [r5, #0]
 800250a:	b016      	add	sp, #88	@ 0x58
 800250c:	bd70      	pop	{r4, r5, r6, pc}
 800250e:	466a      	mov	r2, sp
 8002510:	f000 f848 	bl	80025a4 <_fstat_r>
 8002514:	2800      	cmp	r0, #0
 8002516:	dbec      	blt.n	80024f2 <__swhatbuf_r+0x12>
 8002518:	9901      	ldr	r1, [sp, #4]
 800251a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800251e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002522:	4259      	negs	r1, r3
 8002524:	4159      	adcs	r1, r3
 8002526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800252a:	e7eb      	b.n	8002504 <__swhatbuf_r+0x24>

0800252c <__smakebuf_r>:
 800252c:	898b      	ldrh	r3, [r1, #12]
 800252e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002530:	079d      	lsls	r5, r3, #30
 8002532:	4606      	mov	r6, r0
 8002534:	460c      	mov	r4, r1
 8002536:	d507      	bpl.n	8002548 <__smakebuf_r+0x1c>
 8002538:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	6123      	str	r3, [r4, #16]
 8002540:	2301      	movs	r3, #1
 8002542:	6163      	str	r3, [r4, #20]
 8002544:	b003      	add	sp, #12
 8002546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002548:	ab01      	add	r3, sp, #4
 800254a:	466a      	mov	r2, sp
 800254c:	f7ff ffc8 	bl	80024e0 <__swhatbuf_r>
 8002550:	9f00      	ldr	r7, [sp, #0]
 8002552:	4605      	mov	r5, r0
 8002554:	4639      	mov	r1, r7
 8002556:	4630      	mov	r0, r6
 8002558:	f7ff fbbc 	bl	8001cd4 <_malloc_r>
 800255c:	b948      	cbnz	r0, 8002572 <__smakebuf_r+0x46>
 800255e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002562:	059a      	lsls	r2, r3, #22
 8002564:	d4ee      	bmi.n	8002544 <__smakebuf_r+0x18>
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	81a3      	strh	r3, [r4, #12]
 8002570:	e7e2      	b.n	8002538 <__smakebuf_r+0xc>
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	6020      	str	r0, [r4, #0]
 8002576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800257a:	81a3      	strh	r3, [r4, #12]
 800257c:	9b01      	ldr	r3, [sp, #4]
 800257e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002582:	b15b      	cbz	r3, 800259c <__smakebuf_r+0x70>
 8002584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002588:	4630      	mov	r0, r6
 800258a:	f000 f81d 	bl	80025c8 <_isatty_r>
 800258e:	b128      	cbz	r0, 800259c <__smakebuf_r+0x70>
 8002590:	89a3      	ldrh	r3, [r4, #12]
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	81a3      	strh	r3, [r4, #12]
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	431d      	orrs	r5, r3
 80025a0:	81a5      	strh	r5, [r4, #12]
 80025a2:	e7cf      	b.n	8002544 <__smakebuf_r+0x18>

080025a4 <_fstat_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4d07      	ldr	r5, [pc, #28]	@ (80025c4 <_fstat_r+0x20>)
 80025a8:	2300      	movs	r3, #0
 80025aa:	4604      	mov	r4, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	602b      	str	r3, [r5, #0]
 80025b2:	f7fe f9b5 	bl	8000920 <_fstat>
 80025b6:	1c43      	adds	r3, r0, #1
 80025b8:	d102      	bne.n	80025c0 <_fstat_r+0x1c>
 80025ba:	682b      	ldr	r3, [r5, #0]
 80025bc:	b103      	cbz	r3, 80025c0 <_fstat_r+0x1c>
 80025be:	6023      	str	r3, [r4, #0]
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
 80025c2:	bf00      	nop
 80025c4:	2000021c 	.word	0x2000021c

080025c8 <_isatty_r>:
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4d06      	ldr	r5, [pc, #24]	@ (80025e4 <_isatty_r+0x1c>)
 80025cc:	2300      	movs	r3, #0
 80025ce:	4604      	mov	r4, r0
 80025d0:	4608      	mov	r0, r1
 80025d2:	602b      	str	r3, [r5, #0]
 80025d4:	f7fe f9a9 	bl	800092a <_isatty>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d102      	bne.n	80025e2 <_isatty_r+0x1a>
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	b103      	cbz	r3, 80025e2 <_isatty_r+0x1a>
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	2000021c 	.word	0x2000021c

080025e8 <_sbrk_r>:
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	4d06      	ldr	r5, [pc, #24]	@ (8002604 <_sbrk_r+0x1c>)
 80025ec:	2300      	movs	r3, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	602b      	str	r3, [r5, #0]
 80025f4:	f7fe f99e 	bl	8000934 <_sbrk>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	d102      	bne.n	8002602 <_sbrk_r+0x1a>
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	b103      	cbz	r3, 8002602 <_sbrk_r+0x1a>
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	2000021c 	.word	0x2000021c

08002608 <_init>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr

08002614 <_fini>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr
