
blackpill_iwdg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08002e14  08002e14  00003e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f88  08002f88  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002f88  08002f88  00003f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f90  08002f90  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f90  08002f90  00003f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f94  08002f94  00003f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002f98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08003000  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003000  0000427c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103a0  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213a  00000000  00000000  00014438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000852f  00000000  00000000  00016572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0001eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a8  00000000  00000000  0001f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017479  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e41  00000000  00000000  00037579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009056e  00000000  00000000  0004a3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da928  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000290c  00000000  00000000  000da96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000dd278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002dfc 	.word	0x08002dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002dfc 	.word	0x08002dfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b082      	sub	sp, #8
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	2100      	movs	r1, #0
 8000574:	9100      	str	r1, [sp, #0]
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <MX_GPIO_Init+0x34>)
 8000578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800057e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000582:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f042 0201 	orr.w	r2, r2, #1
 8000592:	631a      	str	r2, [r3, #48]	@ 0x30
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	9b01      	ldr	r3, [sp, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059e:	b002      	add	sp, #8
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800

080005a8 <_write>:
    if (fd == 1 || fd == 2) {
 80005a8:	3801      	subs	r0, #1
 80005aa:	2801      	cmp	r0, #1
 80005ac:	d80a      	bhi.n	80005c4 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80005ae:	b510      	push	{r4, lr}
 80005b0:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b6:	b292      	uxth	r2, r2
 80005b8:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <_write+0x28>)
 80005ba:	f001 fc2a 	bl	8001e12 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80005be:	b920      	cbnz	r0, 80005ca <_write+0x22>
            return len;
 80005c0:	4620      	mov	r0, r4
}
 80005c2:	bd10      	pop	{r4, pc}
    return -1;
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80005c8:	4770      	bx	lr
            return -1;
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005ce:	e7f8      	b.n	80005c2 <_write+0x1a>
 80005d0:	2000008c 	.word	0x2000008c

080005d4 <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == TIM11) {
 80005d4:	6803      	ldr	r3, [r0, #0]
 80005d6:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d000      	beq.n	80005de <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80005dc:	4770      	bx	lr
        tim_val = htim->Instance->CNT;
 80005de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e2:	601a      	str	r2, [r3, #0]
        ++tim_cnt;
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005e6:	6813      	ldr	r3, [r2, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	e7f6      	b.n	80005dc <HAL_TIM_PeriodElapsedCallback+0x8>
 80005ee:	bf00      	nop
 80005f0:	40014800 	.word	0x40014800
 80005f4:	20000084 	.word	0x20000084
 80005f8:	20000088 	.word	0x20000088

080005fc <reset_cause_get>:
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <reset_cause_get+0x70>)
 80005fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000600:	2b00      	cmp	r3, #0
 8000602:	db21      	blt.n	8000648 <reset_cause_get+0x4c>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000604:	4b19      	ldr	r3, [pc, #100]	@ (800066c <reset_cause_get+0x70>)
 8000606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000608:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800060c:	d123      	bne.n	8000656 <reset_cause_get+0x5a>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <reset_cause_get+0x70>)
 8000610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000612:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8000616:	d120      	bne.n	800065a <reset_cause_get+0x5e>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <reset_cause_get+0x70>)
 800061a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800061c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000620:	d11d      	bne.n	800065e <reset_cause_get+0x62>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <reset_cause_get+0x70>)
 8000624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000626:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800062a:	d11a      	bne.n	8000662 <reset_cause_get+0x66>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <reset_cause_get+0x70>)
 800062e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000630:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8000634:	d117      	bne.n	8000666 <reset_cause_get+0x6a>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <reset_cause_get+0x70>)
 8000638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800063a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800063e:	d101      	bne.n	8000644 <reset_cause_get+0x48>
        reset_cause = RESET_CAUSE_UNKNOWN;
 8000640:	2000      	movs	r0, #0
 8000642:	e002      	b.n	800064a <reset_cause_get+0x4e>
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8000644:	2007      	movs	r0, #7
 8000646:	e000      	b.n	800064a <reset_cause_get+0x4e>
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8000648:	2001      	movs	r0, #1
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800064a:	4a08      	ldr	r2, [pc, #32]	@ (800066c <reset_cause_get+0x70>)
 800064c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800064e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000652:	6753      	str	r3, [r2, #116]	@ 0x74
}
 8000654:	4770      	bx	lr
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000656:	2002      	movs	r0, #2
 8000658:	e7f7      	b.n	800064a <reset_cause_get+0x4e>
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800065a:	2003      	movs	r0, #3
 800065c:	e7f5      	b.n	800064a <reset_cause_get+0x4e>
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800065e:	2004      	movs	r0, #4
 8000660:	e7f3      	b.n	800064a <reset_cause_get+0x4e>
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000662:	2005      	movs	r0, #5
 8000664:	e7f1      	b.n	800064a <reset_cause_get+0x4e>
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000666:	2006      	movs	r0, #6
 8000668:	e7ef      	b.n	800064a <reset_cause_get+0x4e>
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <reset_cause_get_name>:
    switch (reset_cause)
 8000670:	2807      	cmp	r0, #7
 8000672:	d805      	bhi.n	8000680 <reset_cause_get_name+0x10>
 8000674:	e8df f000 	tbb	[pc, r0]
 8000678:	0a080614 	.word	0x0a080614
 800067c:	12100e0c 	.word	0x12100e0c
 8000680:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <reset_cause_get_name+0x34>)
 8000682:	4770      	bx	lr
        reset_cause_name = "LOW_POWER_RESET";
 8000684:	4808      	ldr	r0, [pc, #32]	@ (80006a8 <reset_cause_get_name+0x38>)
        break;
 8000686:	4770      	bx	lr
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <reset_cause_get_name+0x3c>)
        break;
 800068a:	4770      	bx	lr
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800068c:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <reset_cause_get_name+0x40>)
        break;
 800068e:	4770      	bx	lr
        reset_cause_name = "SOFTWARE_RESET";
 8000690:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <reset_cause_get_name+0x44>)
        break;
 8000692:	4770      	bx	lr
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000694:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <reset_cause_get_name+0x48>)
        break;
 8000696:	4770      	bx	lr
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000698:	4808      	ldr	r0, [pc, #32]	@ (80006bc <reset_cause_get_name+0x4c>)
        break;
 800069a:	4770      	bx	lr
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 800069c:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <reset_cause_get_name+0x50>)
        break;
 800069e:	4770      	bx	lr
        reset_cause_name = "UNKNOWN";
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <reset_cause_get_name+0x54>)
}
 80006a2:	4770      	bx	lr
 80006a4:	08002e14 	.word	0x08002e14
 80006a8:	08002e20 	.word	0x08002e20
 80006ac:	08002e30 	.word	0x08002e30
 80006b0:	08002e48 	.word	0x08002e48
 80006b4:	08002e64 	.word	0x08002e64
 80006b8:	08002e74 	.word	0x08002e74
 80006bc:	08002ea4 	.word	0x08002ea4
 80006c0:	08002ec0 	.word	0x08002ec0
 80006c4:	08002e18 	.word	0x08002e18

080006c8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80006ca:	e7fe      	b.n	80006ca <Error_Handler+0x2>

080006cc <MX_USART1_UART_Init>:
{
 80006cc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80006ce:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <MX_USART1_UART_Init+0x28>)
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART1_UART_Init+0x2c>)
 80006d2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2000000;
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_USART1_UART_Init+0x30>)
 80006d6:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d8:	2300      	movs	r3, #0
 80006da:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	220c      	movs	r2, #12
 80006e2:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e4:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e6:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e8:	f001 fb63 	bl	8001db2 <HAL_UART_Init>
 80006ec:	b900      	cbnz	r0, 80006f0 <MX_USART1_UART_Init+0x24>
}
 80006ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006f0:	f7ff ffea 	bl	80006c8 <Error_Handler>
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40011000 	.word	0x40011000
 80006fc:	001e8480 	.word	0x001e8480

08000700 <MX_IWDG_Init>:
{
 8000700:	b508      	push	{r3, lr}
  hiwdg.Instance = IWDG;
 8000702:	4807      	ldr	r0, [pc, #28]	@ (8000720 <MX_IWDG_Init+0x20>)
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_IWDG_Init+0x24>)
 8000706:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8000708:	2302      	movs	r3, #2
 800070a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 3000;
 800070c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000710:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000712:	f000 fbab 	bl	8000e6c <HAL_IWDG_Init>
 8000716:	b900      	cbnz	r0, 800071a <MX_IWDG_Init+0x1a>
}
 8000718:	bd08      	pop	{r3, pc}
    Error_Handler();
 800071a:	f7ff ffd5 	bl	80006c8 <Error_Handler>
 800071e:	bf00      	nop
 8000720:	2000011c 	.word	0x2000011c
 8000724:	40003000 	.word	0x40003000

08000728 <MX_TIM11_Init>:
{
 8000728:	b500      	push	{lr}
 800072a:	b085      	sub	sp, #20
  TIM_IC_InitTypeDef sConfigIC = {0};
 800072c:	2300      	movs	r3, #0
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	9303      	str	r3, [sp, #12]
  htim11.Instance = TIM11;
 8000736:	4816      	ldr	r0, [pc, #88]	@ (8000790 <MX_TIM11_Init+0x68>)
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <MX_TIM11_Init+0x6c>)
 800073a:	6002      	str	r2, [r0, #0]
  htim11.Init.Prescaler = 100 - 1;
 800073c:	2263      	movs	r2, #99	@ 0x63
 800073e:	6042      	str	r2, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8000742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000746:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800074c:	f001 f936 	bl	80019bc <HAL_TIM_Base_Init>
 8000750:	b9b0      	cbnz	r0, 8000780 <MX_TIM11_Init+0x58>
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8000752:	480f      	ldr	r0, [pc, #60]	@ (8000790 <MX_TIM11_Init+0x68>)
 8000754:	f001 f95e 	bl	8001a14 <HAL_TIM_IC_Init>
 8000758:	b9a0      	cbnz	r0, 8000784 <MX_TIM11_Init+0x5c>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800075a:	2200      	movs	r2, #0
 800075c:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800075e:	2301      	movs	r3, #1
 8000760:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000762:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8000764:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000766:	4669      	mov	r1, sp
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <MX_TIM11_Init+0x68>)
 800076a:	f001 f9b5 	bl	8001ad8 <HAL_TIM_IC_ConfigChannel>
 800076e:	b958      	cbnz	r0, 8000788 <MX_TIM11_Init+0x60>
  if (HAL_TIMEx_RemapConfig(&htim11, TIM_TIM11_HSE) != HAL_OK)
 8000770:	2102      	movs	r1, #2
 8000772:	4807      	ldr	r0, [pc, #28]	@ (8000790 <MX_TIM11_Init+0x68>)
 8000774:	f001 fa12 	bl	8001b9c <HAL_TIMEx_RemapConfig>
 8000778:	b940      	cbnz	r0, 800078c <MX_TIM11_Init+0x64>
}
 800077a:	b005      	add	sp, #20
 800077c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000780:	f7ff ffa2 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000784:	f7ff ffa0 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000788:	f7ff ff9e 	bl	80006c8 <Error_Handler>
    Error_Handler();
 800078c:	f7ff ff9c 	bl	80006c8 <Error_Handler>
 8000790:	200000d4 	.word	0x200000d4
 8000794:	40014800 	.word	0x40014800

08000798 <SystemClock_Config>:
{
 8000798:	b500      	push	{lr}
 800079a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079c:	2230      	movs	r2, #48	@ 0x30
 800079e:	2100      	movs	r1, #0
 80007a0:	a808      	add	r0, sp, #32
 80007a2:	f001 fda7 	bl	80022f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a6:	2300      	movs	r3, #0
 80007a8:	9303      	str	r3, [sp, #12]
 80007aa:	9304      	str	r3, [sp, #16]
 80007ac:	9305      	str	r3, [sp, #20]
 80007ae:	9306      	str	r3, [sp, #24]
 80007b0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <SystemClock_Config+0xa0>)
 80007b6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007b8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007bc:	6411      	str	r1, [r2, #64]	@ 0x40
 80007be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80007c0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007c4:	9201      	str	r2, [sp, #4]
 80007c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	9302      	str	r3, [sp, #8]
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <SystemClock_Config+0xa4>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007de:	2309      	movs	r3, #9
 80007e0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007f4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007f6:	220c      	movs	r2, #12
 80007f8:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fe:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	a808      	add	r0, sp, #32
 8000806:	f000 fb63 	bl	8000ed0 <HAL_RCC_OscConfig>
 800080a:	b988      	cbnz	r0, 8000830 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800081c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000820:	2103      	movs	r1, #3
 8000822:	a803      	add	r0, sp, #12
 8000824:	f000 fda4 	bl	8001370 <HAL_RCC_ClockConfig>
 8000828:	b920      	cbnz	r0, 8000834 <SystemClock_Config+0x9c>
}
 800082a:	b015      	add	sp, #84	@ 0x54
 800082c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000830:	f7ff ff4a 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000834:	f7ff ff48 	bl	80006c8 <Error_Handler>
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <main>:
{
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	b083      	sub	sp, #12
  HAL_Init();
 8000844:	f000 f986 	bl	8000b54 <HAL_Init>
  SystemClock_Config();
 8000848:	f7ff ffa6 	bl	8000798 <SystemClock_Config>
  MX_GPIO_Init();
 800084c:	f7ff fe90 	bl	8000570 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000850:	f7ff ff3c 	bl	80006cc <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000854:	f7ff ff54 	bl	8000700 <MX_IWDG_Init>
  MX_TIM11_Init();
 8000858:	f7ff ff66 	bl	8000728 <MX_TIM11_Init>
    printf("\n\n\n--------\nStarting\n");
 800085c:	4818      	ldr	r0, [pc, #96]	@ (80008c0 <main+0x80>)
 800085e:	f001 fc69 	bl	8002134 <puts>
    reset_cause_t reset_cause = reset_cause_get();
 8000862:	f7ff fecb 	bl	80005fc <reset_cause_get>
    printf("The system reset cause is \"%s\"\n", reset_cause_get_name(reset_cause));
 8000866:	f7ff ff03 	bl	8000670 <reset_cause_get_name>
 800086a:	4601      	mov	r1, r0
 800086c:	4815      	ldr	r0, [pc, #84]	@ (80008c4 <main+0x84>)
 800086e:	f001 fbf9 	bl	8002064 <iprintf>
    HAL_TIM_Base_Start_IT(&htim11);
 8000872:	4815      	ldr	r0, [pc, #84]	@ (80008c8 <main+0x88>)
 8000874:	f000 ff5c 	bl	8001730 <HAL_TIM_Base_Start_IT>
    uint32_t loop_cnt = 0, now = 0, next_tick = 1000, next_iwdg = 0;
 8000878:	2700      	movs	r7, #0
 800087a:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 800087e:	463d      	mov	r5, r7
 8000880:	e016      	b.n	80008b0 <main+0x70>
            HAL_IWDG_Refresh(&hiwdg); // Kick the dog!
 8000882:	4812      	ldr	r0, [pc, #72]	@ (80008cc <main+0x8c>)
 8000884:	f000 fb1e 	bl	8000ec4 <HAL_IWDG_Refresh>
            next_iwdg = now + wdg_reset_interval;
 8000888:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
 800088c:	e014      	b.n	80008b8 <main+0x78>
            printf("Tick %lu (loop = %lu tim = %lu val = %lu)\n", now / 1000, loop_cnt, tim_cnt, tim_val);
 800088e:	4910      	ldr	r1, [pc, #64]	@ (80008d0 <main+0x90>)
 8000890:	fba1 3104 	umull	r3, r1, r1, r4
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <main+0x94>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <main+0x98>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	462a      	mov	r2, r5
 80008a0:	0989      	lsrs	r1, r1, #6
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <main+0x9c>)
 80008a4:	f001 fbde 	bl	8002064 <iprintf>
            next_tick = now + 1000;
 80008a8:	f504 767a 	add.w	r6, r4, #1000	@ 0x3e8
            loop_cnt = 0;
 80008ac:	2500      	movs	r5, #0
        ++loop_cnt;
 80008ae:	3501      	adds	r5, #1
        now = uwTick;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <main+0xa0>)
 80008b2:	681c      	ldr	r4, [r3, #0]
        if (now >= next_iwdg) {
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	d9e4      	bls.n	8000882 <main+0x42>
        if (now >= next_tick) {
 80008b8:	42a6      	cmp	r6, r4
 80008ba:	d8f8      	bhi.n	80008ae <main+0x6e>
 80008bc:	e7e7      	b.n	800088e <main+0x4e>
 80008be:	bf00      	nop
 80008c0:	08002ed8 	.word	0x08002ed8
 80008c4:	08002ef0 	.word	0x08002ef0
 80008c8:	200000d4 	.word	0x200000d4
 80008cc:	2000011c 	.word	0x2000011c
 80008d0:	10624dd3 	.word	0x10624dd3
 80008d4:	20000084 	.word	0x20000084
 80008d8:	20000088 	.word	0x20000088
 80008dc:	08002f10 	.word	0x08002f10
 80008e0:	2000012c 	.word	0x2000012c

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2100      	movs	r1, #0
 80008e8:	9100      	str	r1, [sp, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x34>)
 80008ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80008f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008f6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	9101      	str	r1, [sp, #4]
 8000900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000902:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	b002      	add	sp, #8
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b500      	push	{lr}
 800091e:	b089      	sub	sp, #36	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000920:	2300      	movs	r3, #0
 8000922:	9302      	str	r3, [sp, #8]
 8000924:	9303      	str	r3, [sp, #12]
 8000926:	9304      	str	r3, [sp, #16]
 8000928:	9305      	str	r3, [sp, #20]
 800092a:	9306      	str	r3, [sp, #24]
 800092c:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM11)
 800092e:	6802      	ldr	r2, [r0, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_TIM_Base_MspInit+0x60>)
 8000932:	429a      	cmp	r2, r3
 8000934:	d002      	beq.n	800093c <HAL_TIM_Base_MspInit+0x20>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8000936:	b009      	add	sp, #36	@ 0x24
 8000938:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800093c:	2302      	movs	r3, #2
 800093e:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000944:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000946:	a802      	add	r0, sp, #8
 8000948:	f000 fde8 	bl	800151c <HAL_RCCEx_PeriphCLKConfig>
 800094c:	b998      	cbnz	r0, 8000976 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800094e:	2100      	movs	r1, #0
 8000950:	9101      	str	r1, [sp, #4]
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <HAL_TIM_Base_MspInit+0x64>)
 8000954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000956:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800095a:	645a      	str	r2, [r3, #68]	@ 0x44
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000966:	460a      	mov	r2, r1
 8000968:	201a      	movs	r0, #26
 800096a:	f000 f973 	bl	8000c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800096e:	201a      	movs	r0, #26
 8000970:	f000 f980 	bl	8000c74 <HAL_NVIC_EnableIRQ>
}
 8000974:	e7df      	b.n	8000936 <HAL_TIM_Base_MspInit+0x1a>
      Error_Handler();
 8000976:	f7ff fea7 	bl	80006c8 <Error_Handler>
 800097a:	e7e8      	b.n	800094e <HAL_TIM_Base_MspInit+0x32>
 800097c:	40014800 	.word	0x40014800
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b500      	push	{lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	2300      	movs	r3, #0
 800098a:	9303      	str	r3, [sp, #12]
 800098c:	9304      	str	r3, [sp, #16]
 800098e:	9305      	str	r3, [sp, #20]
 8000990:	9306      	str	r3, [sp, #24]
 8000992:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000994:	6802      	ldr	r2, [r0, #0]
 8000996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800099a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800099e:	429a      	cmp	r2, r3
 80009a0:	d002      	beq.n	80009a8 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009a2:	b009      	add	sp, #36	@ 0x24
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a8:	2100      	movs	r1, #0
 80009aa:	9101      	str	r1, [sp, #4]
 80009ac:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80009b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009b2:	f042 0210 	orr.w	r2, r2, #16
 80009b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80009b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ba:	f002 0210 	and.w	r2, r2, #16
 80009be:	9201      	str	r2, [sp, #4]
 80009c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	9102      	str	r1, [sp, #8]
 80009c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e4:	2307      	movs	r3, #7
 80009e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	a903      	add	r1, sp, #12
 80009ea:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <HAL_UART_MspInit+0x70>)
 80009ec:	f000 f95a 	bl	8000ca4 <HAL_GPIO_Init>
}
 80009f0:	e7d7      	b.n	80009a2 <HAL_UART_MspInit+0x1e>
 80009f2:	bf00      	nop
 80009f4:	40020000 	.word	0x40020000

080009f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler>

080009fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler>

080009fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler>

080009fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler>

08000a00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler>

08000a02 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f8bd 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bd08      	pop	{r3, pc}

08000a10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a12:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8000a14:	f000 fecd 	bl	80017b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a18:	bd08      	pop	{r3, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000d4 	.word	0x200000d4

08000a20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	460c      	mov	r4, r1
 8000a24:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	2500      	movs	r5, #0
 8000a28:	e006      	b.n	8000a38 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4621      	mov	r1, r4
 8000a30:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000a36:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	42b5      	cmp	r5, r6
 8000a3a:	dbf6      	blt.n	8000a2a <_read+0xa>
  }

  return len;
}
 8000a3c:	4630      	mov	r0, r6
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}

08000a40 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a44:	4770      	bx	lr

08000a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	4770      	bx	lr

08000a50 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a50:	2001      	movs	r0, #1
 8000a52:	4770      	bx	lr

08000a54 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a54:	2000      	movs	r0, #0
 8000a56:	4770      	bx	lr

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a90 <_sbrk+0x38>)
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <_sbrk+0x40>)
 8000a62:	6800      	ldr	r0, [r0, #0]
 8000a64:	b140      	cbz	r0, 8000a78 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <_sbrk+0x40>)
 8000a68:	6800      	ldr	r0, [r0, #0]
 8000a6a:	4403      	add	r3, r0
 8000a6c:	1a52      	subs	r2, r2, r1
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d806      	bhi.n	8000a80 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a72:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <_sbrk+0x40>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a76:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a78:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <_sbrk+0x40>)
 8000a7a:	4c08      	ldr	r4, [pc, #32]	@ (8000a9c <_sbrk+0x44>)
 8000a7c:	6004      	str	r4, [r0, #0]
 8000a7e:	e7f2      	b.n	8000a66 <_sbrk+0xe>
    errno = ENOMEM;
 8000a80:	f001 fc86 	bl	8002390 <__errno>
 8000a84:	230c      	movs	r3, #12
 8000a86:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a8c:	e7f3      	b.n	8000a76 <_sbrk+0x1e>
 8000a8e:	bf00      	nop
 8000a90:	20020000 	.word	0x20020000
 8000a94:	00000400 	.word	0x00000400
 8000a98:	20000128 	.word	0x20000128
 8000a9c:	20000280 	.word	0x20000280

08000aa0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <SystemInit+0x10>)
 8000aa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000aa6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aaa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab8:	f7ff fff2 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f001 fc5b 	bl	800239c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff feab 	bl	8000840 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000af8:	08002f98 	.word	0x08002f98
  ldr r2, =_sbss
 8000afc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b00:	2000027c 	.word	0x2000027c

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_InitTick+0x40>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_InitTick+0x44>)
 8000b1a:	6810      	ldr	r0, [r2, #0]
 8000b1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b20:	f000 f8ac 	bl	8000c7c <HAL_SYSTICK_Config>
 8000b24:	b968      	cbnz	r0, 8000b42 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	2c0f      	cmp	r4, #15
 8000b28:	d901      	bls.n	8000b2e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	e00a      	b.n	8000b44 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4621      	mov	r1, r4
 8000b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b36:	f000 f88d 	bl	8000c54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_InitTick+0x48>)
 8000b3c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2000      	movs	r0, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b42:	2001      	movs	r0, #1
}
 8000b44:	bd10      	pop	{r4, pc}
 8000b46:	bf00      	nop
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_Init>:
{
 8000b54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <HAL_Init+0x30>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f85d 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f7ff ffc6 	bl	8000b08 <HAL_InitTick>
  HAL_MspInit();
 8000b7c:	f7ff feb2 	bl	80008e4 <HAL_MspInit>
}
 8000b80:	2000      	movs	r0, #0
 8000b82:	bd08      	pop	{r3, pc}
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b88:	4a03      	ldr	r2, [pc, #12]	@ (8000b98 <HAL_IncTick+0x10>)
 8000b8a:	6811      	ldr	r1, [r2, #0]
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_IncTick+0x14>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	440b      	add	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000012c 	.word	0x2000012c
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba0:	4b01      	ldr	r3, [pc, #4]	@ (8000ba8 <HAL_GetTick+0x8>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000012c 	.word	0x2000012c

08000bac <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000bac:	2800      	cmp	r0, #0
 8000bae:	db07      	blt.n	8000bc0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb0:	f000 021f 	and.w	r2, r0, #31
 8000bb4:	0940      	lsrs	r0, r0, #5
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4093      	lsls	r3, r2
 8000bba:	4a02      	ldr	r2, [pc, #8]	@ (8000bc4 <__NVIC_EnableIRQ+0x18>)
 8000bbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	db08      	blt.n	8000bde <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	0109      	lsls	r1, r1, #4
 8000bce:	b2c9      	uxtb	r1, r1
 8000bd0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000bd4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000bd8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000bdc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	f000 000f 	and.w	r0, r0, #15
 8000be2:	0109      	lsls	r1, r1, #4
 8000be4:	b2c9      	uxtb	r1, r1
 8000be6:	4b01      	ldr	r3, [pc, #4]	@ (8000bec <__NVIC_SetPriority+0x24>)
 8000be8:	5419      	strb	r1, [r3, r0]
  }
}
 8000bea:	4770      	bx	lr
 8000bec:	e000ed14 	.word	0xe000ed14

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf6:	f1c0 0c07 	rsb	ip, r0, #7
 8000bfa:	f1bc 0f04 	cmp.w	ip, #4
 8000bfe:	bf28      	it	cs
 8000c00:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c04:	1d03      	adds	r3, r0, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d90f      	bls.n	8000c2a <NVIC_EncodePriority+0x3a>
 8000c0a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000c10:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c14:	ea21 0100 	bic.w	r1, r1, r0
 8000c18:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c1e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000c22:	ea41 0002 	orr.w	r0, r1, r2
 8000c26:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e7ee      	b.n	8000c0c <NVIC_EncodePriority+0x1c>
	...

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c32:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c34:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	0200      	lsls	r0, r0, #8
 8000c3e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c42:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000c4c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c54:	b510      	push	{r4, lr}
 8000c56:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_NVIC_SetPriority+0x1c>)
 8000c5a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000c60:	f7ff ffc6 	bl	8000bf0 <NVIC_EncodePriority>
 8000c64:	4601      	mov	r1, r0
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff ffae 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c76:	f7ff ff99 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000c7a:	bd08      	pop	{r3, pc}

08000c7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d20b      	bcs.n	8000c9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c88:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <HAL_SYSTICK_Config+0x24>)
 8000c8c:	21f0      	movs	r1, #240	@ 0xf0
 8000c8e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c92:	2000      	movs	r0, #0
 8000c94:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	2207      	movs	r2, #7
 8000c98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	f200 80d7 	bhi.w	8000e5a <HAL_GPIO_Init+0x1b6>
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	e065      	b.n	8000d7e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cb8:	2403      	movs	r4, #3
 8000cba:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cbe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc2:	68cc      	ldr	r4, [r1, #12]
 8000cc4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cc8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000cca:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cce:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	684a      	ldr	r2, [r1, #4]
 8000cd4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000cdc:	6042      	str	r2, [r0, #4]
 8000cde:	e05c      	b.n	8000d9a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce0:	08dc      	lsrs	r4, r3, #3
 8000ce2:	3408      	adds	r4, #8
 8000ce4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce8:	f003 0507 	and.w	r5, r3, #7
 8000cec:	00ad      	lsls	r5, r5, #2
 8000cee:	f04f 0e0f 	mov.w	lr, #15
 8000cf2:	fa0e fe05 	lsl.w	lr, lr, r5
 8000cf6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cfa:	690a      	ldr	r2, [r1, #16]
 8000cfc:	40aa      	lsls	r2, r5
 8000cfe:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d02:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000d06:	e05c      	b.n	8000dc2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d08:	2204      	movs	r2, #4
 8000d0a:	e000      	b.n	8000d0e <HAL_GPIO_Init+0x6a>
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d12:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d14:	3402      	adds	r4, #2
 8000d16:	4d51      	ldr	r5, [pc, #324]	@ (8000e5c <HAL_GPIO_Init+0x1b8>)
 8000d18:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d1c:	4a50      	ldr	r2, [pc, #320]	@ (8000e60 <HAL_GPIO_Init+0x1bc>)
 8000d1e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d20:	ea6f 020c 	mvn.w	r2, ip
 8000d24:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d28:	684e      	ldr	r6, [r1, #4]
 8000d2a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000d2e:	d001      	beq.n	8000d34 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000d30:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000d34:	4c4a      	ldr	r4, [pc, #296]	@ (8000e60 <HAL_GPIO_Init+0x1bc>)
 8000d36:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000d38:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d3e:	684e      	ldr	r6, [r1, #4]
 8000d40:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000d44:	d001      	beq.n	8000d4a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000d46:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000d4a:	4c45      	ldr	r4, [pc, #276]	@ (8000e60 <HAL_GPIO_Init+0x1bc>)
 8000d4c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000d4e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d50:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d54:	684e      	ldr	r6, [r1, #4]
 8000d56:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000d5a:	d001      	beq.n	8000d60 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d5c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d60:	4c3f      	ldr	r4, [pc, #252]	@ (8000e60 <HAL_GPIO_Init+0x1bc>)
 8000d62:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d64:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d66:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d68:	684d      	ldr	r5, [r1, #4]
 8000d6a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d6e:	d001      	beq.n	8000d74 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d70:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d74:	4c3a      	ldr	r4, [pc, #232]	@ (8000e60 <HAL_GPIO_Init+0x1bc>)
 8000d76:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d78:	3301      	adds	r3, #1
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d86b      	bhi.n	8000e56 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000d7e:	2201      	movs	r2, #1
 8000d80:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	680c      	ldr	r4, [r1, #0]
 8000d84:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d88:	ea32 0404 	bics.w	r4, r2, r4
 8000d8c:	d1f4      	bne.n	8000d78 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	684c      	ldr	r4, [r1, #4]
 8000d90:	f004 0403 	and.w	r4, r4, #3
 8000d94:	3c01      	subs	r4, #1
 8000d96:	2c01      	cmp	r4, #1
 8000d98:	d98b      	bls.n	8000cb2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9a:	684a      	ldr	r2, [r1, #4]
 8000d9c:	f002 0203 	and.w	r2, r2, #3
 8000da0:	2a03      	cmp	r2, #3
 8000da2:	d009      	beq.n	8000db8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000da4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da6:	005d      	lsls	r5, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	40aa      	lsls	r2, r5
 8000dac:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db0:	688a      	ldr	r2, [r1, #8]
 8000db2:	40aa      	lsls	r2, r5
 8000db4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000db6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	684a      	ldr	r2, [r1, #4]
 8000dba:	f002 0203 	and.w	r2, r2, #3
 8000dbe:	2a02      	cmp	r2, #2
 8000dc0:	d08e      	beq.n	8000ce0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000dc2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f20e 	lsl.w	r2, r2, lr
 8000dce:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd2:	684a      	ldr	r2, [r1, #4]
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ddc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000dde:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	684a      	ldr	r2, [r1, #4]
 8000de2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000de6:	d0c7      	beq.n	8000d78 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de8:	2200      	movs	r2, #0
 8000dea:	9201      	str	r2, [sp, #4]
 8000dec:	4a1d      	ldr	r2, [pc, #116]	@ (8000e64 <HAL_GPIO_Init+0x1c0>)
 8000dee:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000df0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000df4:	6454      	str	r4, [r2, #68]	@ 0x44
 8000df6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000df8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000dfc:	9201      	str	r2, [sp, #4]
 8000dfe:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e00:	089c      	lsrs	r4, r3, #2
 8000e02:	1ca5      	adds	r5, r4, #2
 8000e04:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <HAL_GPIO_Init+0x1b8>)
 8000e06:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0a:	f003 0e03 	and.w	lr, r3, #3
 8000e0e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e18:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1c:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <HAL_GPIO_Init+0x1c4>)
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f43f af74 	beq.w	8000d0c <HAL_GPIO_Init+0x68>
 8000e24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e28:	4290      	cmp	r0, r2
 8000e2a:	d00e      	beq.n	8000e4a <HAL_GPIO_Init+0x1a6>
 8000e2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e30:	4290      	cmp	r0, r2
 8000e32:	d00c      	beq.n	8000e4e <HAL_GPIO_Init+0x1aa>
 8000e34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	d00a      	beq.n	8000e52 <HAL_GPIO_Init+0x1ae>
 8000e3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f43f af61 	beq.w	8000d08 <HAL_GPIO_Init+0x64>
 8000e46:	2207      	movs	r2, #7
 8000e48:	e761      	b.n	8000d0e <HAL_GPIO_Init+0x6a>
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	e75f      	b.n	8000d0e <HAL_GPIO_Init+0x6a>
 8000e4e:	2202      	movs	r2, #2
 8000e50:	e75d      	b.n	8000d0e <HAL_GPIO_Init+0x6a>
 8000e52:	2203      	movs	r2, #3
 8000e54:	e75b      	b.n	8000d0e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e56:	b002      	add	sp, #8
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
 8000e5a:	4770      	bx	lr
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40013c00 	.word	0x40013c00
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000e6c:	b340      	cbz	r0, 8000ec0 <HAL_IWDG_Init+0x54>
{
 8000e6e:	b538      	push	{r3, r4, r5, lr}
 8000e70:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000e78:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000e7a:	6803      	ldr	r3, [r0, #0]
 8000e7c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000e80:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000e82:	6803      	ldr	r3, [r0, #0]
 8000e84:	6842      	ldr	r2, [r0, #4]
 8000e86:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000e88:	6803      	ldr	r3, [r0, #0]
 8000e8a:	6882      	ldr	r2, [r0, #8]
 8000e8c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000e8e:	f7ff fe87 	bl	8000ba0 <HAL_GetTick>
 8000e92:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	f012 0f03 	tst.w	r2, #3
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000e9e:	f7ff fe7f 	bl	8000ba0 <HAL_GetTick>
 8000ea2:	1b40      	subs	r0, r0, r5
 8000ea4:	2831      	cmp	r0, #49	@ 0x31
 8000ea6:	d9f5      	bls.n	8000e94 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f013 0f03 	tst.w	r3, #3
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	e003      	b.n	8000ebe <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000eb6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000eba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000ebc:	2000      	movs	r0, #0
}
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000ec4:	6803      	ldr	r3, [r0, #0]
 8000ec6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000eca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000ecc:	2000      	movs	r0, #0
 8000ece:	4770      	bx	lr

08000ed0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	f000 81e0 	beq.w	8001296 <HAL_RCC_OscConfig+0x3c6>
{
 8000ed6:	b570      	push	{r4, r5, r6, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000edc:	6803      	ldr	r3, [r0, #0]
 8000ede:	f013 0f01 	tst.w	r3, #1
 8000ee2:	d03b      	beq.n	8000f5c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ee4:	4b9f      	ldr	r3, [pc, #636]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d02c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d021      	beq.n	8000f40 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f02:	d04f      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xd4>
 8000f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f08:	d052      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xe0>
 8000f0a:	4b96      	ldr	r3, [pc, #600]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f1c:	6863      	ldr	r3, [r4, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d050      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fe3d 	bl	8000ba0 <HAL_GetTick>
 8000f26:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	4b8e      	ldr	r3, [pc, #568]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f30:	d114      	bne.n	8000f5c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f32:	f7ff fe35 	bl	8000ba0 <HAL_GetTick>
 8000f36:	1b40      	subs	r0, r0, r5
 8000f38:	2864      	cmp	r0, #100	@ 0x64
 8000f3a:	d9f5      	bls.n	8000f28 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	e1b1      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f40:	4b88      	ldr	r3, [pc, #544]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000f48:	d0d8      	beq.n	8000efc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	4b86      	ldr	r3, [pc, #536]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f52:	d003      	beq.n	8000f5c <HAL_RCC_OscConfig+0x8c>
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 819f 	beq.w	800129a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	f013 0f02 	tst.w	r3, #2
 8000f62:	d054      	beq.n	800100e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f64:	4b7f      	ldr	r3, [pc, #508]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f013 0f0c 	tst.w	r3, #12
 8000f6c:	d03e      	beq.n	8000fec <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d033      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d068      	beq.n	8001052 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f80:	4b79      	ldr	r3, [pc, #484]	@ (8001168 <HAL_RCC_OscConfig+0x298>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fe0b 	bl	8000ba0 <HAL_GetTick>
 8000f8a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	4b75      	ldr	r3, [pc, #468]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f013 0f02 	tst.w	r3, #2
 8000f94:	d154      	bne.n	8001040 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f96:	f7ff fe03 	bl	8000ba0 <HAL_GetTick>
 8000f9a:	1b40      	subs	r0, r0, r5
 8000f9c:	2802      	cmp	r0, #2
 8000f9e:	d9f5      	bls.n	8000f8c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	e17f      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa4:	4a6f      	ldr	r2, [pc, #444]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e7b5      	b.n	8000f1c <HAL_RCC_OscConfig+0x4c>
 8000fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e7ab      	b.n	8000f1c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fdec 	bl	8000ba0 <HAL_GetTick>
 8000fc8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	4b66      	ldr	r3, [pc, #408]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000fd2:	d0c3      	beq.n	8000f5c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fde4 	bl	8000ba0 <HAL_GetTick>
 8000fd8:	1b40      	subs	r0, r0, r5
 8000fda:	2864      	cmp	r0, #100	@ 0x64
 8000fdc:	d9f5      	bls.n	8000fca <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e160      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe2:	4b60      	ldr	r3, [pc, #384]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000fea:	d1c6      	bne.n	8000f7a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fec:	4b5d      	ldr	r3, [pc, #372]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f013 0f02 	tst.w	r3, #2
 8000ff4:	d003      	beq.n	8000ffe <HAL_RCC_OscConfig+0x12e>
 8000ff6:	68e3      	ldr	r3, [r4, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f040 8150 	bne.w	800129e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4a59      	ldr	r2, [pc, #356]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8001000:	6813      	ldr	r3, [r2, #0]
 8001002:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001006:	6921      	ldr	r1, [r4, #16]
 8001008:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800100c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f013 0f08 	tst.w	r3, #8
 8001014:	d042      	beq.n	800109c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001016:	6963      	ldr	r3, [r4, #20]
 8001018:	b36b      	cbz	r3, 8001076 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101a:	4b53      	ldr	r3, [pc, #332]	@ (8001168 <HAL_RCC_OscConfig+0x298>)
 800101c:	2201      	movs	r2, #1
 800101e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001022:	f7ff fdbd 	bl	8000ba0 <HAL_GetTick>
 8001026:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001028:	4b4e      	ldr	r3, [pc, #312]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 800102a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800102c:	f013 0f02 	tst.w	r3, #2
 8001030:	d134      	bne.n	800109c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001032:	f7ff fdb5 	bl	8000ba0 <HAL_GetTick>
 8001036:	1b40      	subs	r0, r0, r5
 8001038:	2802      	cmp	r0, #2
 800103a:	d9f5      	bls.n	8001028 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800103c:	2003      	movs	r0, #3
 800103e:	e131      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4a48      	ldr	r2, [pc, #288]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001048:	6921      	ldr	r1, [r4, #16]
 800104a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e7dd      	b.n	800100e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001052:	4b45      	ldr	r3, [pc, #276]	@ (8001168 <HAL_RCC_OscConfig+0x298>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001058:	f7ff fda2 	bl	8000ba0 <HAL_GetTick>
 800105c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	4b41      	ldr	r3, [pc, #260]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f013 0f02 	tst.w	r3, #2
 8001066:	d0d2      	beq.n	800100e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001068:	f7ff fd9a 	bl	8000ba0 <HAL_GetTick>
 800106c:	1b40      	subs	r0, r0, r5
 800106e:	2802      	cmp	r0, #2
 8001070:	d9f5      	bls.n	800105e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	e116      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001076:	4b3c      	ldr	r3, [pc, #240]	@ (8001168 <HAL_RCC_OscConfig+0x298>)
 8001078:	2200      	movs	r2, #0
 800107a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fd8f 	bl	8000ba0 <HAL_GetTick>
 8001082:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001084:	4b37      	ldr	r3, [pc, #220]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8001086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001088:	f013 0f02 	tst.w	r3, #2
 800108c:	d006      	beq.n	800109c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108e:	f7ff fd87 	bl	8000ba0 <HAL_GetTick>
 8001092:	1b40      	subs	r0, r0, r5
 8001094:	2802      	cmp	r0, #2
 8001096:	d9f5      	bls.n	8001084 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001098:	2003      	movs	r0, #3
 800109a:	e103      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	f013 0f04 	tst.w	r3, #4
 80010a2:	d077      	beq.n	8001194 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80010ac:	d133      	bne.n	8001116 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 80010b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80010ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010c6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	4b28      	ldr	r3, [pc, #160]	@ (800116c <HAL_RCC_OscConfig+0x29c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80010d0:	d023      	beq.n	800111a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	68a3      	ldr	r3, [r4, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d034      	beq.n	8001142 <HAL_RCC_OscConfig+0x272>
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d038      	beq.n	800114e <HAL_RCC_OscConfig+0x27e>
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 80010de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80010e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80010e8:	f022 0204 	bic.w	r2, r2, #4
 80010ec:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d03d      	beq.n	8001170 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f4:	f7ff fd54 	bl	8000ba0 <HAL_GetTick>
 80010f8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 80010fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010fe:	f013 0f02 	tst.w	r3, #2
 8001102:	d146      	bne.n	8001192 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001104:	f7ff fd4c 	bl	8000ba0 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800110e:	4298      	cmp	r0, r3
 8001110:	d9f3      	bls.n	80010fa <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
 8001114:	e0c6      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001116:	2500      	movs	r5, #0
 8001118:	e7d6      	b.n	80010c8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111a:	4a14      	ldr	r2, [pc, #80]	@ (800116c <HAL_RCC_OscConfig+0x29c>)
 800111c:	6813      	ldr	r3, [r2, #0]
 800111e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001122:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001124:	f7ff fd3c 	bl	8000ba0 <HAL_GetTick>
 8001128:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <HAL_RCC_OscConfig+0x29c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001132:	d1ce      	bne.n	80010d2 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001134:	f7ff fd34 	bl	8000ba0 <HAL_GetTick>
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	2802      	cmp	r0, #2
 800113c:	d9f5      	bls.n	800112a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
 8001140:	e0b0      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8001144:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6713      	str	r3, [r2, #112]	@ 0x70
 800114c:	e7cf      	b.n	80010ee <HAL_RCC_OscConfig+0x21e>
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_RCC_OscConfig+0x294>)
 8001150:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001152:	f042 0204 	orr.w	r2, r2, #4
 8001156:	671a      	str	r2, [r3, #112]	@ 0x70
 8001158:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001160:	e7c5      	b.n	80010ee <HAL_RCC_OscConfig+0x21e>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	42470000 	.word	0x42470000
 800116c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fd16 	bl	8000ba0 <HAL_GetTick>
 8001174:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001176:	4b52      	ldr	r3, [pc, #328]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 8001178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800117a:	f013 0f02 	tst.w	r3, #2
 800117e:	d008      	beq.n	8001192 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff fd0e 	bl	8000ba0 <HAL_GetTick>
 8001184:	1b80      	subs	r0, r0, r6
 8001186:	f241 3388 	movw	r3, #5000	@ 0x1388
 800118a:	4298      	cmp	r0, r3
 800118c:	d9f3      	bls.n	8001176 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800118e:	2003      	movs	r0, #3
 8001190:	e088      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001192:	b9ed      	cbnz	r5, 80011d0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001194:	69a3      	ldr	r3, [r4, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8083 	beq.w	80012a2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800119c:	4a48      	ldr	r2, [pc, #288]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 800119e:	6892      	ldr	r2, [r2, #8]
 80011a0:	f002 020c 	and.w	r2, r2, #12
 80011a4:	2a08      	cmp	r2, #8
 80011a6:	d051      	beq.n	800124c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d017      	beq.n	80011dc <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ac:	4b45      	ldr	r3, [pc, #276]	@ (80012c4 <HAL_RCC_OscConfig+0x3f4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fcf5 	bl	8000ba0 <HAL_GetTick>
 80011b6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b8:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80011c0:	d042      	beq.n	8001248 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fced 	bl	8000ba0 <HAL_GetTick>
 80011c6:	1b00      	subs	r0, r0, r4
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f5      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011cc:	2003      	movs	r0, #3
 80011ce:	e069      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d0:	4a3b      	ldr	r2, [pc, #236]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 80011d2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80011d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	e7db      	b.n	8001194 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4b39      	ldr	r3, [pc, #228]	@ (80012c4 <HAL_RCC_OscConfig+0x3f4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcdd 	bl	8000ba0 <HAL_GetTick>
 80011e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e8:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80011f0:	d006      	beq.n	8001200 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff fcd5 	bl	8000ba0 <HAL_GetTick>
 80011f6:	1b40      	subs	r0, r0, r5
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d9f5      	bls.n	80011e8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80011fc:	2003      	movs	r0, #3
 80011fe:	e051      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001200:	69e3      	ldr	r3, [r4, #28]
 8001202:	6a22      	ldr	r2, [r4, #32]
 8001204:	4313      	orrs	r3, r2
 8001206:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001208:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800120c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800120e:	0852      	lsrs	r2, r2, #1
 8001210:	3a01      	subs	r2, #1
 8001212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001216:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001218:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800121c:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 800121e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <HAL_RCC_OscConfig+0x3f4>)
 8001222:	2201      	movs	r2, #1
 8001224:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001226:	f7ff fcbb 	bl	8000ba0 <HAL_GetTick>
 800122a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122c:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fcb3 	bl	8000ba0 <HAL_GetTick>
 800123a:	1b00      	subs	r0, r0, r4
 800123c:	2802      	cmp	r0, #2
 800123e:	d9f5      	bls.n	800122c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	e02f      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001244:	2000      	movs	r0, #0
 8001246:	e02d      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
 8001248:	2000      	movs	r0, #0
 800124a:	e02b      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800124c:	2b01      	cmp	r3, #1
 800124e:	d02b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_RCC_OscConfig+0x3f0>)
 8001252:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001254:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001258:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800125a:	4291      	cmp	r1, r2
 800125c:	d126      	bne.n	80012ac <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800125e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001262:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001264:	428a      	cmp	r2, r1
 8001266:	d123      	bne.n	80012b0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001268:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800126a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800126e:	401a      	ands	r2, r3
 8001270:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001274:	d11e      	bne.n	80012b4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001276:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800127a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800127c:	0852      	lsrs	r2, r2, #1
 800127e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001280:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001284:	d118      	bne.n	80012b8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001286:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800128a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800128c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001290:	d114      	bne.n	80012bc <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001292:	2000      	movs	r0, #0
 8001294:	e006      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001296:	2001      	movs	r0, #1
}
 8001298:	4770      	bx	lr
        return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
 800129c:	e002      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800129e:	2001      	movs	r0, #1
 80012a0:	e000      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80012a2:	2000      	movs	r0, #0
}
 80012a4:	b002      	add	sp, #8
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012a8:	2001      	movs	r0, #1
 80012aa:	e7fb      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
 80012ae:	e7f9      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
 80012b0:	2001      	movs	r0, #1
 80012b2:	e7f7      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
 80012b4:	2001      	movs	r0, #1
 80012b6:	e7f5      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
 80012b8:	2001      	movs	r0, #1
 80012ba:	e7f3      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
 80012bc:	2001      	movs	r0, #1
 80012be:	e7f1      	b.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
 80012c0:	40023800 	.word	0x40023800
 80012c4:	42470000 	.word	0x42470000

080012c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ca:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d041      	beq.n	800135a <HAL_RCC_GetSysClockFreq+0x92>
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d141      	bne.n	800135e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80012e8:	d012      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ec:	6859      	ldr	r1, [r3, #4]
 80012ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012f2:	481d      	ldr	r0, [pc, #116]	@ (8001368 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012f4:	2300      	movs	r3, #0
 80012f6:	fba1 0100 	umull	r0, r1, r1, r0
 80012fa:	f7fe ffc1 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001306:	3301      	adds	r3, #1
 8001308:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800130a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800130e:	e027      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001312:	6858      	ldr	r0, [r3, #4]
 8001314:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001318:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800131c:	ebbc 0c00 	subs.w	ip, ip, r0
 8001320:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001324:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001328:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800132c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001330:	ebb1 010c 	subs.w	r1, r1, ip
 8001334:	eb63 030e 	sbc.w	r3, r3, lr
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800133e:	00c9      	lsls	r1, r1, #3
 8001340:	eb11 0c00 	adds.w	ip, r1, r0
 8001344:	f143 0300 	adc.w	r3, r3, #0
 8001348:	0299      	lsls	r1, r3, #10
 800134a:	2300      	movs	r3, #0
 800134c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001350:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001354:	f7fe ff94 	bl	8000280 <__aeabi_uldivmod>
 8001358:	e7d1      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <HAL_RCC_GetSysClockFreq+0xa0>)
 800135c:	e000      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001360:	bd08      	pop	{r3, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	017d7840 	.word	0x017d7840
 800136c:	00f42400 	.word	0x00f42400

08001370 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001370:	2800      	cmp	r0, #0
 8001372:	f000 809b 	beq.w	80014ac <HAL_RCC_ClockConfig+0x13c>
{
 8001376:	b570      	push	{r4, r5, r6, lr}
 8001378:	460d      	mov	r5, r1
 800137a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800137c:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <HAL_RCC_ClockConfig+0x14c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	428b      	cmp	r3, r1
 8001386:	d208      	bcs.n	800139a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001388:	b2cb      	uxtb	r3, r1
 800138a:	4a4c      	ldr	r2, [pc, #304]	@ (80014bc <HAL_RCC_ClockConfig+0x14c>)
 800138c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	428b      	cmp	r3, r1
 8001396:	f040 808b 	bne.w	80014b0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	f013 0f02 	tst.w	r3, #2
 80013a0:	d017      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a2:	f013 0f04 	tst.w	r3, #4
 80013a6:	d004      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a8:	4a45      	ldr	r2, [pc, #276]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 80013aa:	6893      	ldr	r3, [r2, #8]
 80013ac:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013b0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f013 0f08 	tst.w	r3, #8
 80013b8:	d004      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ba:	4a41      	ldr	r2, [pc, #260]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 80013bc:	6893      	ldr	r3, [r2, #8]
 80013be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013c2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4a3e      	ldr	r2, [pc, #248]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 80013c6:	6893      	ldr	r3, [r2, #8]
 80013c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013cc:	68a1      	ldr	r1, [r4, #8]
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	f013 0f01 	tst.w	r3, #1
 80013d8:	d032      	beq.n	8001440 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013da:	6863      	ldr	r3, [r4, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d021      	beq.n	8001424 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e0:	1e9a      	subs	r2, r3, #2
 80013e2:	2a01      	cmp	r2, #1
 80013e4:	d925      	bls.n	8001432 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4a36      	ldr	r2, [pc, #216]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	f012 0f02 	tst.w	r2, #2
 80013ee:	d061      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f0:	4933      	ldr	r1, [pc, #204]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 80013f2:	688a      	ldr	r2, [r1, #8]
 80013f4:	f022 0203 	bic.w	r2, r2, #3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80013fc:	f7ff fbd0 	bl	8000ba0 <HAL_GetTick>
 8001400:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001410:	d016      	beq.n	8001440 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001412:	f7ff fbc5 	bl	8000ba0 <HAL_GetTick>
 8001416:	1b80      	subs	r0, r0, r6
 8001418:	f241 3388 	movw	r3, #5000	@ 0x1388
 800141c:	4298      	cmp	r0, r3
 800141e:	d9f0      	bls.n	8001402 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
 8001422:	e042      	b.n	80014aa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001424:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800142c:	d1e0      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
 8001430:	e03b      	b.n	80014aa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800143a:	d1d9      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
 800143e:	e034      	b.n	80014aa <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_RCC_ClockConfig+0x14c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	42ab      	cmp	r3, r5
 800144a:	d907      	bls.n	800145c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144c:	b2ea      	uxtb	r2, r5
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_RCC_ClockConfig+0x14c>)
 8001450:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	42ab      	cmp	r3, r5
 800145a:	d12d      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	f013 0f04 	tst.w	r3, #4
 8001462:	d006      	beq.n	8001472 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001464:	4a16      	ldr	r2, [pc, #88]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 8001466:	6893      	ldr	r3, [r2, #8]
 8001468:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800146c:	68e1      	ldr	r1, [r4, #12]
 800146e:	430b      	orrs	r3, r1
 8001470:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	f013 0f08 	tst.w	r3, #8
 8001478:	d007      	beq.n	800148a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 800147c:	6893      	ldr	r3, [r2, #8]
 800147e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001482:	6921      	ldr	r1, [r4, #16]
 8001484:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001488:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800148a:	f7ff ff1d 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_RCC_ClockConfig+0x150>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_RCC_ClockConfig+0x154>)
 8001498:	5cd3      	ldrb	r3, [r2, r3]
 800149a:	40d8      	lsrs	r0, r3
 800149c:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <HAL_RCC_ClockConfig+0x158>)
 800149e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_RCC_ClockConfig+0x15c>)
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	f7ff fb30 	bl	8000b08 <HAL_InitTick>
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
}
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	4770      	bx	lr
      return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
 80014b2:	e7fa      	b.n	80014aa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80014b4:	2001      	movs	r0, #1
 80014b6:	e7f8      	b.n	80014aa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80014b8:	2001      	movs	r0, #1
 80014ba:	e7f6      	b.n	80014aa <HAL_RCC_ClockConfig+0x13a>
 80014bc:	40023c00 	.word	0x40023c00
 80014c0:	40023800 	.word	0x40023800
 80014c4:	08002f44 	.word	0x08002f44
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014d0:	4b01      	ldr	r3, [pc, #4]	@ (80014d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000000 	.word	0x20000000

080014dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014de:	f7ff fff7 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014ea:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80014ee:	40d8      	lsrs	r0, r3
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08002f3c 	.word	0x08002f3c

080014fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014fe:	f7ff ffe7 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 8001502:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800150a:	4a03      	ldr	r2, [pc, #12]	@ (8001518 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
}
 800150e:	40d8      	lsrs	r0, r3
 8001510:	bd08      	pop	{r3, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	08002f3c 	.word	0x08002f3c

0800151c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800151c:	b530      	push	{r4, r5, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001522:	6803      	ldr	r3, [r0, #0]
 8001524:	f013 0f05 	tst.w	r3, #5
 8001528:	d10e      	bne.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	f013 0f02 	tst.w	r3, #2
 8001530:	d138      	bne.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	f013 0f08 	tst.w	r3, #8
 8001538:	f000 809d 	beq.w	8001676 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800153c:	7d22      	ldrb	r2, [r4, #20]
 800153e:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001540:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e097      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_DISABLE();
 8001548:	4b4d      	ldr	r3, [pc, #308]	@ (8001680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800154a:	2200      	movs	r2, #0
 800154c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800154e:	f7ff fb27 	bl	8000ba0 <HAL_GetTick>
 8001552:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001554:	4b4b      	ldr	r3, [pc, #300]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800155c:	d006      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x50>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800155e:	f7ff fb1f 	bl	8000ba0 <HAL_GetTick>
 8001562:	1b43      	subs	r3, r0, r5
 8001564:	2b02      	cmp	r3, #2
 8001566:	d9f5      	bls.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
 800156a:	e085      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	68a2      	ldr	r2, [r4, #8]
 8001570:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001574:	68e2      	ldr	r2, [r4, #12]
 8001576:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800157a:	4a42      	ldr	r2, [pc, #264]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800157c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001580:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001582:	2201      	movs	r2, #1
 8001584:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8001586:	f7ff fb0b 	bl	8000ba0 <HAL_GetTick>
 800158a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001594:	d1c9      	bne.n	800152a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001596:	f7ff fb03 	bl	8000ba0 <HAL_GetTick>
 800159a:	1b40      	subs	r0, r0, r5
 800159c:	2802      	cmp	r0, #2
 800159e:	d9f5      	bls.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 80015a0:	2003      	movs	r0, #3
 80015a2:	e069      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	4b36      	ldr	r3, [pc, #216]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80015bc:	4a32      	ldr	r2, [pc, #200]	@ (8001688 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80015c6:	f7ff faeb 	bl	8000ba0 <HAL_GetTick>
 80015ca:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80015cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015d4:	d106      	bne.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fae3 	bl	8000ba0 <HAL_GetTick>
 80015da:	1b43      	subs	r3, r0, r5
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d9f5      	bls.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e049      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015e4:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015e8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80015ec:	d014      	beq.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80015ee:	6922      	ldr	r2, [r4, #16]
 80015f0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d00f      	beq.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80015fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001600:	491f      	ldr	r1, [pc, #124]	@ (8001680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001602:	2001      	movs	r0, #1
 8001604:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001608:	2000      	movs	r0, #0
 800160a:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 800160e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001612:	f013 0f01 	tst.w	r3, #1
 8001616:	d112      	bne.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001618:	6923      	ldr	r3, [r4, #16]
 800161a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800161e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8001622:	d01d      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001626:	6893      	ldr	r3, [r2, #8]
 8001628:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800162c:	6093      	str	r3, [r2, #8]
 800162e:	4915      	ldr	r1, [pc, #84]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001630:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8001632:	6922      	ldr	r2, [r4, #16]
 8001634:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001638:	4313      	orrs	r3, r2
 800163a:	670b      	str	r3, [r1, #112]	@ 0x70
 800163c:	e779      	b.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 800163e:	f7ff faaf 	bl	8000ba0 <HAL_GetTick>
 8001642:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001648:	f013 0f02 	tst.w	r3, #2
 800164c:	d1e4      	bne.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff faa7 	bl	8000ba0 <HAL_GetTick>
 8001652:	1b40      	subs	r0, r0, r5
 8001654:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001658:	4298      	cmp	r0, r3
 800165a:	d9f3      	bls.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
 800165e:	e00b      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001660:	4908      	ldr	r1, [pc, #32]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001662:	688a      	ldr	r2, [r1, #8]
 8001664:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8001668:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800166c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
 8001674:	e7db      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x112>
  return HAL_OK;
 8001676:	2000      	movs	r0, #0
}
 8001678:	b003      	add	sp, #12
 800167a:	bd30      	pop	{r4, r5, pc}
 800167c:	42471000 	.word	0x42471000
 8001680:	42470000 	.word	0x42470000
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800168c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800168e:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001690:	6a04      	ldr	r4, [r0, #32]
 8001692:	f024 0410 	bic.w	r4, r4, #16
 8001696:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001698:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800169a:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800169e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016a2:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80016a6:	031b      	lsls	r3, r3, #12
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016ae:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80016b2:	0109      	lsls	r1, r1, #4
 80016b4:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 80016b8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80016ba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80016bc:	6201      	str	r1, [r0, #32]
}
 80016be:	bc30      	pop	{r4, r5}
 80016c0:	4770      	bx	lr

080016c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80016c2:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80016c4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016c6:	6a04      	ldr	r4, [r0, #32]
 80016c8:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 80016cc:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80016ce:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80016d0:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80016d4:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80016d8:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80016e4:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80016e8:	0209      	lsls	r1, r1, #8
 80016ea:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 80016ee:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80016f0:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80016f2:	6201      	str	r1, [r0, #32]
}
 80016f4:	bc30      	pop	{r4, r5}
 80016f6:	4770      	bx	lr

080016f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80016f8:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80016fa:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016fc:	6a04      	ldr	r4, [r0, #32]
 80016fe:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8001702:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001704:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001706:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800170a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800170e:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001712:	031b      	lsls	r3, r3, #12
 8001714:	b29b      	uxth	r3, r3
 8001716:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800171a:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800171e:	0309      	lsls	r1, r1, #12
 8001720:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 8001724:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001726:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001728:	6201      	str	r1, [r0, #32]
}
 800172a:	bc30      	pop	{r4, r5}
 800172c:	4770      	bx	lr
	...

08001730 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001730:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d12f      	bne.n	800179a <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 800173a:	2302      	movs	r3, #2
 800173c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001740:	6802      	ldr	r2, [r0, #0]
 8001742:	68d3      	ldr	r3, [r2, #12]
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800174a:	6803      	ldr	r3, [r0, #0]
 800174c:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <HAL_TIM_Base_Start_IT+0x74>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d018      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x54>
 8001752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001756:	d015      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x54>
 8001758:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800175c:	4293      	cmp	r3, r2
 800175e:	d011      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x54>
 8001760:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x54>
 8001768:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800176c:	4293      	cmp	r3, r2
 800176e:	d009      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x54>
 8001770:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001774:	4293      	cmp	r3, r2
 8001776:	d005      	beq.n	8001784 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001780:	2000      	movs	r0, #0
 8001782:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800178a:	2a06      	cmp	r2, #6
 800178c:	d007      	beq.n	800179e <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001796:	2000      	movs	r0, #0
 8001798:	4770      	bx	lr
    return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
 800179c:	4770      	bx	lr
  return HAL_OK;
 800179e:	2000      	movs	r0, #0
}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40010000 	.word	0x40010000

080017a8 <HAL_TIM_IC_MspInit>:
}
 80017a8:	4770      	bx	lr

080017aa <HAL_TIM_OC_DelayElapsedCallback>:
}
 80017aa:	4770      	bx	lr

080017ac <HAL_TIM_IC_CaptureCallback>:
}
 80017ac:	4770      	bx	lr

080017ae <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80017ae:	4770      	bx	lr

080017b0 <HAL_TIM_TriggerCallback>:
}
 80017b0:	4770      	bx	lr

080017b2 <HAL_TIM_IRQHandler>:
{
 80017b2:	b570      	push	{r4, r5, r6, lr}
 80017b4:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80017b6:	6803      	ldr	r3, [r0, #0]
 80017b8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017ba:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017bc:	f015 0f02 	tst.w	r5, #2
 80017c0:	d010      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017c2:	f016 0f02 	tst.w	r6, #2
 80017c6:	d00d      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017c8:	f06f 0202 	mvn.w	r2, #2
 80017cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d2:	6803      	ldr	r3, [r0, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f013 0f03 	tst.w	r3, #3
 80017da:	d05e      	beq.n	800189a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80017dc:	f7ff ffe6 	bl	80017ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e0:	2300      	movs	r3, #0
 80017e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017e4:	f015 0f04 	tst.w	r5, #4
 80017e8:	d012      	beq.n	8001810 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017ea:	f016 0f04 	tst.w	r6, #4
 80017ee:	d00f      	beq.n	8001810 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f06f 0204 	mvn.w	r2, #4
 80017f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001804:	d04f      	beq.n	80018a6 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff ffd0 	bl	80017ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180c:	2300      	movs	r3, #0
 800180e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001810:	f015 0f08 	tst.w	r5, #8
 8001814:	d012      	beq.n	800183c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001816:	f016 0f08 	tst.w	r6, #8
 800181a:	d00f      	beq.n	800183c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f06f 0208 	mvn.w	r2, #8
 8001822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001824:	2304      	movs	r3, #4
 8001826:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f013 0f03 	tst.w	r3, #3
 8001830:	d040      	beq.n	80018b4 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff ffba 	bl	80017ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001838:	2300      	movs	r3, #0
 800183a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800183c:	f015 0f10 	tst.w	r5, #16
 8001840:	d012      	beq.n	8001868 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001842:	f016 0f10 	tst.w	r6, #16
 8001846:	d00f      	beq.n	8001868 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	f06f 0210 	mvn.w	r2, #16
 800184e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001850:	2308      	movs	r3, #8
 8001852:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800185c:	d031      	beq.n	80018c2 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff ffa4 	bl	80017ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001864:	2300      	movs	r3, #0
 8001866:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001868:	f015 0f01 	tst.w	r5, #1
 800186c:	d002      	beq.n	8001874 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800186e:	f016 0f01 	tst.w	r6, #1
 8001872:	d12d      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001874:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001878:	d002      	beq.n	8001880 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800187a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800187e:	d12f      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001880:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001884:	d002      	beq.n	800188c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001886:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800188a:	d131      	bne.n	80018f0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800188c:	f015 0f20 	tst.w	r5, #32
 8001890:	d002      	beq.n	8001898 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001892:	f016 0f20 	tst.w	r6, #32
 8001896:	d133      	bne.n	8001900 <HAL_TIM_IRQHandler+0x14e>
}
 8001898:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	f7ff ff86 	bl	80017aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff ff85 	bl	80017ae <HAL_TIM_PWM_PulseFinishedCallback>
 80018a4:	e79c      	b.n	80017e0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff ff7f 	bl	80017aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff ff7e 	bl	80017ae <HAL_TIM_PWM_PulseFinishedCallback>
 80018b2:	e7ab      	b.n	800180c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff ff78 	bl	80017aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff ff77 	bl	80017ae <HAL_TIM_PWM_PulseFinishedCallback>
 80018c0:	e7ba      	b.n	8001838 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff ff71 	bl	80017aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff ff70 	bl	80017ae <HAL_TIM_PWM_PulseFinishedCallback>
 80018ce:	e7c9      	b.n	8001864 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	f06f 0201 	mvn.w	r2, #1
 80018d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d8:	4620      	mov	r0, r4
 80018da:	f7fe fe7b 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
 80018de:	e7c9      	b.n	8001874 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80018e8:	4620      	mov	r0, r4
 80018ea:	f000 f968 	bl	8001bbe <HAL_TIMEx_BreakCallback>
 80018ee:	e7c7      	b.n	8001880 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ff59 	bl	80017b0 <HAL_TIM_TriggerCallback>
 80018fe:	e7c5      	b.n	800188c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	f06f 0220 	mvn.w	r2, #32
 8001906:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001908:	4620      	mov	r0, r4
 800190a:	f000 f957 	bl	8001bbc <HAL_TIMEx_CommutCallback>
}
 800190e:	e7c3      	b.n	8001898 <HAL_TIM_IRQHandler+0xe6>

08001910 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001910:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <TIM_Base_SetConfig+0xa8>)
 8001914:	4290      	cmp	r0, r2
 8001916:	d00e      	beq.n	8001936 <TIM_Base_SetConfig+0x26>
 8001918:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800191c:	d00b      	beq.n	8001936 <TIM_Base_SetConfig+0x26>
 800191e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001922:	4290      	cmp	r0, r2
 8001924:	d007      	beq.n	8001936 <TIM_Base_SetConfig+0x26>
 8001926:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800192a:	4290      	cmp	r0, r2
 800192c:	d003      	beq.n	8001936 <TIM_Base_SetConfig+0x26>
 800192e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001932:	4290      	cmp	r0, r2
 8001934:	d103      	bne.n	800193e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800193a:	684a      	ldr	r2, [r1, #4]
 800193c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193e:	4a1e      	ldr	r2, [pc, #120]	@ (80019b8 <TIM_Base_SetConfig+0xa8>)
 8001940:	4290      	cmp	r0, r2
 8001942:	d01a      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 8001944:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001948:	d017      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 800194a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800194e:	4290      	cmp	r0, r2
 8001950:	d013      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 8001952:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001956:	4290      	cmp	r0, r2
 8001958:	d00f      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 800195a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800195e:	4290      	cmp	r0, r2
 8001960:	d00b      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 8001962:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001966:	4290      	cmp	r0, r2
 8001968:	d007      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 800196a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800196e:	4290      	cmp	r0, r2
 8001970:	d003      	beq.n	800197a <TIM_Base_SetConfig+0x6a>
 8001972:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001976:	4290      	cmp	r0, r2
 8001978:	d103      	bne.n	8001982 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800197a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197e:	68ca      	ldr	r2, [r1, #12]
 8001980:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001986:	694a      	ldr	r2, [r1, #20]
 8001988:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800198a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198c:	688b      	ldr	r3, [r1, #8]
 800198e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001990:	680b      	ldr	r3, [r1, #0]
 8001992:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <TIM_Base_SetConfig+0xa8>)
 8001996:	4298      	cmp	r0, r3
 8001998:	d00a      	beq.n	80019b0 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800199a:	2301      	movs	r3, #1
 800199c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800199e:	6903      	ldr	r3, [r0, #16]
 80019a0:	f013 0f01 	tst.w	r3, #1
 80019a4:	d003      	beq.n	80019ae <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80019a6:	6903      	ldr	r3, [r0, #16]
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6103      	str	r3, [r0, #16]
}
 80019ae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80019b0:	690b      	ldr	r3, [r1, #16]
 80019b2:	6303      	str	r3, [r0, #48]	@ 0x30
 80019b4:	e7f1      	b.n	800199a <TIM_Base_SetConfig+0x8a>
 80019b6:	bf00      	nop
 80019b8:	40010000 	.word	0x40010000

080019bc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80019bc:	b340      	cbz	r0, 8001a10 <HAL_TIM_Base_Init+0x54>
{
 80019be:	b510      	push	{r4, lr}
 80019c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80019c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80019c6:	b1f3      	cbz	r3, 8001a06 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	2302      	movs	r3, #2
 80019ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ce:	4621      	mov	r1, r4
 80019d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80019d4:	f7ff ff9c 	bl	8001910 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d8:	2301      	movs	r3, #1
 80019da:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80019e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80019e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80019ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001a02:	2000      	movs	r0, #0
}
 8001a04:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a06:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001a0a:	f7fe ff87 	bl	800091c <HAL_TIM_Base_MspInit>
 8001a0e:	e7db      	b.n	80019c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
}
 8001a12:	4770      	bx	lr

08001a14 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8001a14:	b340      	cbz	r0, 8001a68 <HAL_TIM_IC_Init+0x54>
{
 8001a16:	b510      	push	{r4, lr}
 8001a18:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001a1e:	b1f3      	cbz	r3, 8001a5e <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	2302      	movs	r3, #2
 8001a22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a26:	4621      	mov	r1, r4
 8001a28:	f851 0b04 	ldr.w	r0, [r1], #4
 8001a2c:	f7ff ff70 	bl	8001910 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a36:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001a3a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001a3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001a42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a46:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a4e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001a52:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001a56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001a5a:	2000      	movs	r0, #0
}
 8001a5c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a5e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001a62:	f7ff fea1 	bl	80017a8 <HAL_TIM_IC_MspInit>
 8001a66:	e7db      	b.n	8001a20 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
}
 8001a6a:	4770      	bx	lr

08001a6c <TIM_TI1_SetConfig>:
{
 8001a6c:	b470      	push	{r4, r5, r6}
 8001a6e:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8001a70:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a72:	6a04      	ldr	r4, [r0, #32]
 8001a74:	f024 0401 	bic.w	r4, r4, #1
 8001a78:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a7a:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a7c:	4d14      	ldr	r5, [pc, #80]	@ (8001ad0 <TIM_TI1_SetConfig+0x64>)
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	d014      	beq.n	8001aac <TIM_TI1_SetConfig+0x40>
 8001a82:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001a86:	d011      	beq.n	8001aac <TIM_TI1_SetConfig+0x40>
 8001a88:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <TIM_TI1_SetConfig+0x68>)
 8001a8a:	4290      	cmp	r0, r2
 8001a8c:	d00e      	beq.n	8001aac <TIM_TI1_SetConfig+0x40>
 8001a8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a92:	4290      	cmp	r0, r2
 8001a94:	d00a      	beq.n	8001aac <TIM_TI1_SetConfig+0x40>
 8001a96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a9a:	4290      	cmp	r0, r2
 8001a9c:	d006      	beq.n	8001aac <TIM_TI1_SetConfig+0x40>
 8001a9e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001aa2:	4290      	cmp	r0, r2
 8001aa4:	d002      	beq.n	8001aac <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001aa6:	f044 0201 	orr.w	r2, r4, #1
 8001aaa:	e003      	b.n	8001ab4 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001aac:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001ab0:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ab4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001abe:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001ac2:	f001 010a 	and.w	r1, r1, #10
 8001ac6:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8001ac8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001aca:	6201      	str	r1, [r0, #32]
}
 8001acc:	bc70      	pop	{r4, r5, r6}
 8001ace:	4770      	bx	lr
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_TIM_IC_ConfigChannel>:
{
 8001ad8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001ada:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d05a      	beq.n	8001b98 <HAL_TIM_IC_ConfigChannel+0xc0>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	460d      	mov	r5, r1
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8001aec:	b152      	cbz	r2, 8001b04 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8001aee:	2a04      	cmp	r2, #4
 8001af0:	d01a      	beq.n	8001b28 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8001af2:	2a08      	cmp	r2, #8
 8001af4:	d02b      	beq.n	8001b4e <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8001af6:	2a0c      	cmp	r2, #12
 8001af8:	d03b      	beq.n	8001b72 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001afc:	2300      	movs	r3, #0
 8001afe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001b02:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001b04:	68cb      	ldr	r3, [r1, #12]
 8001b06:	684a      	ldr	r2, [r1, #4]
 8001b08:	6809      	ldr	r1, [r1, #0]
 8001b0a:	6800      	ldr	r0, [r0, #0]
 8001b0c:	f7ff ffae 	bl	8001a6c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	6993      	ldr	r3, [r2, #24]
 8001b14:	f023 030c 	bic.w	r3, r3, #12
 8001b18:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	6993      	ldr	r3, [r2, #24]
 8001b1e:	68a9      	ldr	r1, [r5, #8]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2000      	movs	r0, #0
 8001b26:	e7e9      	b.n	8001afc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8001b28:	68cb      	ldr	r3, [r1, #12]
 8001b2a:	684a      	ldr	r2, [r1, #4]
 8001b2c:	6809      	ldr	r1, [r1, #0]
 8001b2e:	6800      	ldr	r0, [r0, #0]
 8001b30:	f7ff fdac 	bl	800168c <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	6993      	ldr	r3, [r2, #24]
 8001b38:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001b3c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	6993      	ldr	r3, [r2, #24]
 8001b42:	68a9      	ldr	r1, [r5, #8]
 8001b44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b48:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e7d6      	b.n	8001afc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8001b4e:	68cb      	ldr	r3, [r1, #12]
 8001b50:	684a      	ldr	r2, [r1, #4]
 8001b52:	6809      	ldr	r1, [r1, #0]
 8001b54:	6800      	ldr	r0, [r0, #0]
 8001b56:	f7ff fdb4 	bl	80016c2 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	69d3      	ldr	r3, [r2, #28]
 8001b5e:	f023 030c 	bic.w	r3, r3, #12
 8001b62:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	69d3      	ldr	r3, [r2, #28]
 8001b68:	68a9      	ldr	r1, [r5, #8]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e7c4      	b.n	8001afc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8001b72:	68cb      	ldr	r3, [r1, #12]
 8001b74:	684a      	ldr	r2, [r1, #4]
 8001b76:	6809      	ldr	r1, [r1, #0]
 8001b78:	6800      	ldr	r0, [r0, #0]
 8001b7a:	f7ff fdbd 	bl	80016f8 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	69d3      	ldr	r3, [r2, #28]
 8001b82:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001b86:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	69d3      	ldr	r3, [r2, #28]
 8001b8c:	68a9      	ldr	r1, [r5, #8]
 8001b8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b92:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7b1      	b.n	8001afc <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8001b98:	2002      	movs	r0, #2
 8001b9a:	e7b2      	b.n	8001b02 <HAL_TIM_IC_ConfigChannel+0x2a>

08001b9c <HAL_TIMEx_RemapConfig>:
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8001b9c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d009      	beq.n	8001bb8 <HAL_TIMEx_RemapConfig+0x1c>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    /* Set the Timer remapping configuration */
    WRITE_REG(htim->Instance->OR, Remap);
  }
#else
  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	6519      	str	r1, [r3, #80]	@ 0x50
#endif /* LPTIM_OR_TIM1_ITR2_RMP &&  LPTIM_OR_TIM5_ITR1_RMP && LPTIM_OR_TIM9_ITR1_RMP */

  __HAL_UNLOCK(htim);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  return HAL_OK;
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001bb8:	2002      	movs	r0, #2
}
 8001bba:	4770      	bx	lr

08001bbc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bbe:	4770      	bx	lr

08001bc0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc2:	f102 030c 	add.w	r3, r2, #12
 8001bc6:	e853 3f00 	ldrex	r3, [r3]
 8001bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bce:	320c      	adds	r2, #12
 8001bd0:	e842 3100 	strex	r1, r3, [r2]
 8001bd4:	2900      	cmp	r1, #0
 8001bd6:	d1f3      	bne.n	8001bc0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bda:	f102 0314 	add.w	r3, r2, #20
 8001bde:	e853 3f00 	ldrex	r3, [r3]
 8001be2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be6:	3214      	adds	r2, #20
 8001be8:	e842 3100 	strex	r1, r3, [r2]
 8001bec:	2900      	cmp	r1, #0
 8001bee:	d1f3      	bne.n	8001bd8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bf0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d005      	beq.n	8001c02 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001c00:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c04:	f102 030c 	add.w	r3, r2, #12
 8001c08:	e853 3f00 	ldrex	r3, [r3]
 8001c0c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c10:	320c      	adds	r2, #12
 8001c12:	e842 3100 	strex	r1, r3, [r2]
 8001c16:	2900      	cmp	r1, #0
 8001c18:	d1f3      	bne.n	8001c02 <UART_EndRxTransfer+0x42>
 8001c1a:	e7ec      	b.n	8001bf6 <UART_EndRxTransfer+0x36>

08001c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c20:	6802      	ldr	r2, [r0, #0]
 8001c22:	6913      	ldr	r3, [r2, #16]
 8001c24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c28:	68c1      	ldr	r1, [r0, #12]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c2e:	6883      	ldr	r3, [r0, #8]
 8001c30:	6902      	ldr	r2, [r0, #16]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	6943      	ldr	r3, [r0, #20]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	69c3      	ldr	r3, [r0, #28]
 8001c3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001c3c:	6801      	ldr	r1, [r0, #0]
 8001c3e:	68cb      	ldr	r3, [r1, #12]
 8001c40:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001c44:	f023 030c 	bic.w	r3, r3, #12
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c4c:	6802      	ldr	r2, [r0, #0]
 8001c4e:	6953      	ldr	r3, [r2, #20]
 8001c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c54:	6981      	ldr	r1, [r0, #24]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c5a:	6803      	ldr	r3, [r0, #0]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <UART_SetConfig+0x108>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d006      	beq.n	8001c70 <UART_SetConfig+0x54>
 8001c62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d002      	beq.n	8001c70 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c6a:	f7ff fc37 	bl	80014dc <HAL_RCC_GetPCLK1Freq>
 8001c6e:	e001      	b.n	8001c74 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c70:	f7ff fc44 	bl	80014fc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c74:	69e3      	ldr	r3, [r4, #28]
 8001c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c7a:	d029      	beq.n	8001cd0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	1803      	adds	r3, r0, r0
 8001c80:	4149      	adcs	r1, r1
 8001c82:	181b      	adds	r3, r3, r0
 8001c84:	f141 0100 	adc.w	r1, r1, #0
 8001c88:	00c9      	lsls	r1, r1, #3
 8001c8a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1818      	adds	r0, r3, r0
 8001c92:	6863      	ldr	r3, [r4, #4]
 8001c94:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001c98:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001c9c:	f141 0100 	adc.w	r1, r1, #0
 8001ca0:	f7fe faee 	bl	8000280 <__aeabi_uldivmod>
 8001ca4:	4a20      	ldr	r2, [pc, #128]	@ (8001d28 <UART_SetConfig+0x10c>)
 8001ca6:	fba2 3100 	umull	r3, r1, r2, r0
 8001caa:	0949      	lsrs	r1, r1, #5
 8001cac:	2364      	movs	r3, #100	@ 0x64
 8001cae:	fb03 0311 	mls	r3, r3, r1, r0
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	3332      	adds	r3, #50	@ 0x32
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cc0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	6821      	ldr	r1, [r4, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }
}
 8001cce:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	1802      	adds	r2, r0, r0
 8001cd4:	eb43 0103 	adc.w	r1, r3, r3
 8001cd8:	1812      	adds	r2, r2, r0
 8001cda:	f141 0100 	adc.w	r1, r1, #0
 8001cde:	00c9      	lsls	r1, r1, #3
 8001ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ce4:	00d2      	lsls	r2, r2, #3
 8001ce6:	1810      	adds	r0, r2, r0
 8001ce8:	f141 0100 	adc.w	r1, r1, #0
 8001cec:	6862      	ldr	r2, [r4, #4]
 8001cee:	1892      	adds	r2, r2, r2
 8001cf0:	415b      	adcs	r3, r3
 8001cf2:	f7fe fac5 	bl	8000280 <__aeabi_uldivmod>
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <UART_SetConfig+0x10c>)
 8001cf8:	fba2 3100 	umull	r3, r1, r2, r0
 8001cfc:	0949      	lsrs	r1, r1, #5
 8001cfe:	2364      	movs	r3, #100	@ 0x64
 8001d00:	fb03 0311 	mls	r3, r3, r1, r0
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	3332      	adds	r3, #50	@ 0x32
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	005a      	lsls	r2, r3, #1
 8001d10:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001d14:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	6821      	ldr	r1, [r4, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
 8001d22:	e7d4      	b.n	8001cce <UART_SetConfig+0xb2>
 8001d24:	40011000 	.word	0x40011000
 8001d28:	51eb851f 	.word	0x51eb851f

08001d2c <UART_WaitOnFlagUntilTimeout>:
{
 8001d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d30:	b083      	sub	sp, #12
 8001d32:	4605      	mov	r5, r0
 8001d34:	460e      	mov	r6, r1
 8001d36:	4617      	mov	r7, r2
 8001d38:	4699      	mov	r9, r3
 8001d3a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	681c      	ldr	r4, [r3, #0]
 8001d42:	ea36 0404 	bics.w	r4, r6, r4
 8001d46:	bf0c      	ite	eq
 8001d48:	2401      	moveq	r4, #1
 8001d4a:	2400      	movne	r4, #0
 8001d4c:	42bc      	cmp	r4, r7
 8001d4e:	d128      	bne.n	8001da2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001d54:	d0f3      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d56:	f7fe ff23 	bl	8000ba0 <HAL_GetTick>
 8001d5a:	eba0 0009 	sub.w	r0, r0, r9
 8001d5e:	4540      	cmp	r0, r8
 8001d60:	d823      	bhi.n	8001daa <UART_WaitOnFlagUntilTimeout+0x7e>
 8001d62:	f1b8 0f00 	cmp.w	r8, #0
 8001d66:	d022      	beq.n	8001dae <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	f012 0f04 	tst.w	r2, #4
 8001d70:	d0e5      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x12>
 8001d72:	2e80      	cmp	r6, #128	@ 0x80
 8001d74:	d0e3      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x12>
 8001d76:	2e40      	cmp	r6, #64	@ 0x40
 8001d78:	d0e1      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f012 0f08 	tst.w	r2, #8
 8001d80:	d0dd      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d82:	2400      	movs	r4, #0
 8001d84:	9401      	str	r4, [sp, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	9201      	str	r2, [sp, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001d90:	4628      	mov	r0, r5
 8001d92:	f7ff ff15 	bl	8001bc0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d96:	2308      	movs	r3, #8
 8001d98:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001d9a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001d9e:	2001      	movs	r0, #1
 8001da0:	e000      	b.n	8001da4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001da2:	2000      	movs	r0, #0
}
 8001da4:	b003      	add	sp, #12
 8001da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001daa:	2003      	movs	r0, #3
 8001dac:	e7fa      	b.n	8001da4 <UART_WaitOnFlagUntilTimeout+0x78>
 8001dae:	2003      	movs	r0, #3
 8001db0:	e7f8      	b.n	8001da4 <UART_WaitOnFlagUntilTimeout+0x78>

08001db2 <HAL_UART_Init>:
  if (huart == NULL)
 8001db2:	b360      	cbz	r0, 8001e0e <HAL_UART_Init+0x5c>
{
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001db8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001dbc:	b313      	cbz	r3, 8001e04 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dbe:	2324      	movs	r3, #36	@ 0x24
 8001dc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	68d3      	ldr	r3, [r2, #12]
 8001dc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001dcc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff ff24 	bl	8001c1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	6913      	ldr	r3, [r2, #16]
 8001dd8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001ddc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	6953      	ldr	r3, [r2, #20]
 8001de2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001de6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	68d3      	ldr	r3, [r2, #12]
 8001dec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001df0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	2000      	movs	r0, #0
 8001df4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001df6:	2320      	movs	r3, #32
 8001df8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e00:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001e02:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e04:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001e08:	f7fe fdbc 	bl	8000984 <HAL_UART_MspInit>
 8001e0c:	e7d7      	b.n	8001dbe <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
}
 8001e10:	4770      	bx	lr

08001e12 <HAL_UART_Transmit>:
{
 8001e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001e1a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d156      	bne.n	8001ed2 <HAL_UART_Transmit+0xc0>
 8001e24:	4604      	mov	r4, r0
 8001e26:	460d      	mov	r5, r1
 8001e28:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001e2a:	2900      	cmp	r1, #0
 8001e2c:	d055      	beq.n	8001eda <HAL_UART_Transmit+0xc8>
 8001e2e:	b90a      	cbnz	r2, 8001e34 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001e30:	2001      	movs	r0, #1
 8001e32:	e04f      	b.n	8001ed4 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e38:	2321      	movs	r3, #33	@ 0x21
 8001e3a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001e3e:	f7fe feaf 	bl	8000ba0 <HAL_GetTick>
 8001e42:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001e44:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e48:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e4c:	68a3      	ldr	r3, [r4, #8]
 8001e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e52:	d002      	beq.n	8001e5a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001e54:	f04f 0800 	mov.w	r8, #0
 8001e58:	e014      	b.n	8001e84 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e5a:	6923      	ldr	r3, [r4, #16]
 8001e5c:	b32b      	cbz	r3, 8001eaa <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001e5e:	f04f 0800 	mov.w	r8, #0
 8001e62:	e00f      	b.n	8001e84 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001e64:	2320      	movs	r3, #32
 8001e66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e032      	b.n	8001ed4 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e6e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e78:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001e7a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	3a01      	subs	r2, #1
 8001e80:	b292      	uxth	r2, r2
 8001e82:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e84:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b193      	cbz	r3, 8001eb0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e8a:	9600      	str	r6, [sp, #0]
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff4a 	bl	8001d2c <UART_WaitOnFlagUntilTimeout>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d1e3      	bne.n	8001e64 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	d0e6      	beq.n	8001e6e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ea0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ea8:	e7e7      	b.n	8001e7a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001eaa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001eac:	2500      	movs	r5, #0
 8001eae:	e7e9      	b.n	8001e84 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eb0:	9600      	str	r6, [sp, #0]
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2140      	movs	r1, #64	@ 0x40
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f7ff ff37 	bl	8001d2c <UART_WaitOnFlagUntilTimeout>
 8001ebe:	b918      	cbnz	r0, 8001ec8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001ec6:	e005      	b.n	8001ed4 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001ece:	2003      	movs	r0, #3
 8001ed0:	e000      	b.n	8001ed4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001ed2:	2002      	movs	r0, #2
}
 8001ed4:	b002      	add	sp, #8
 8001ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
 8001edc:	e7fa      	b.n	8001ed4 <HAL_UART_Transmit+0xc2>
	...

08001ee0 <std>:
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	b510      	push	{r4, lr}
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8001eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001eee:	6083      	str	r3, [r0, #8]
 8001ef0:	8181      	strh	r1, [r0, #12]
 8001ef2:	6643      	str	r3, [r0, #100]	@ 0x64
 8001ef4:	81c2      	strh	r2, [r0, #14]
 8001ef6:	6183      	str	r3, [r0, #24]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	2208      	movs	r2, #8
 8001efc:	305c      	adds	r0, #92	@ 0x5c
 8001efe:	f000 f9f9 	bl	80022f4 <memset>
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <std+0x58>)
 8001f04:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <std+0x5c>)
 8001f08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <std+0x60>)
 8001f0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <std+0x64>)
 8001f10:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <std+0x68>)
 8001f14:	6224      	str	r4, [r4, #32]
 8001f16:	429c      	cmp	r4, r3
 8001f18:	d006      	beq.n	8001f28 <std+0x48>
 8001f1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f1e:	4294      	cmp	r4, r2
 8001f20:	d002      	beq.n	8001f28 <std+0x48>
 8001f22:	33d0      	adds	r3, #208	@ 0xd0
 8001f24:	429c      	cmp	r4, r3
 8001f26:	d105      	bne.n	8001f34 <std+0x54>
 8001f28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f30:	f000 ba58 	b.w	80023e4 <__retarget_lock_init_recursive>
 8001f34:	bd10      	pop	{r4, pc}
 8001f36:	bf00      	nop
 8001f38:	08002145 	.word	0x08002145
 8001f3c:	08002167 	.word	0x08002167
 8001f40:	0800219f 	.word	0x0800219f
 8001f44:	080021c3 	.word	0x080021c3
 8001f48:	20000130 	.word	0x20000130

08001f4c <stdio_exit_handler>:
 8001f4c:	4a02      	ldr	r2, [pc, #8]	@ (8001f58 <stdio_exit_handler+0xc>)
 8001f4e:	4903      	ldr	r1, [pc, #12]	@ (8001f5c <stdio_exit_handler+0x10>)
 8001f50:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <stdio_exit_handler+0x14>)
 8001f52:	f000 b869 	b.w	8002028 <_fwalk_sglue>
 8001f56:	bf00      	nop
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	08002c85 	.word	0x08002c85
 8001f60:	2000001c 	.word	0x2000001c

08001f64 <cleanup_stdio>:
 8001f64:	6841      	ldr	r1, [r0, #4]
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <cleanup_stdio+0x34>)
 8001f68:	4299      	cmp	r1, r3
 8001f6a:	b510      	push	{r4, lr}
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	d001      	beq.n	8001f74 <cleanup_stdio+0x10>
 8001f70:	f000 fe88 	bl	8002c84 <_fflush_r>
 8001f74:	68a1      	ldr	r1, [r4, #8]
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <cleanup_stdio+0x38>)
 8001f78:	4299      	cmp	r1, r3
 8001f7a:	d002      	beq.n	8001f82 <cleanup_stdio+0x1e>
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f000 fe81 	bl	8002c84 <_fflush_r>
 8001f82:	68e1      	ldr	r1, [r4, #12]
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <cleanup_stdio+0x3c>)
 8001f86:	4299      	cmp	r1, r3
 8001f88:	d004      	beq.n	8001f94 <cleanup_stdio+0x30>
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f90:	f000 be78 	b.w	8002c84 <_fflush_r>
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	bf00      	nop
 8001f98:	20000130 	.word	0x20000130
 8001f9c:	20000198 	.word	0x20000198
 8001fa0:	20000200 	.word	0x20000200

08001fa4 <global_stdio_init.part.0>:
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <global_stdio_init.part.0+0x30>)
 8001fa8:	4c0b      	ldr	r4, [pc, #44]	@ (8001fd8 <global_stdio_init.part.0+0x34>)
 8001faa:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <global_stdio_init.part.0+0x38>)
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	4620      	mov	r0, r4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	f7ff ff94 	bl	8001ee0 <std>
 8001fb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2109      	movs	r1, #9
 8001fc0:	f7ff ff8e 	bl	8001ee0 <std>
 8001fc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001fc8:	2202      	movs	r2, #2
 8001fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fce:	2112      	movs	r1, #18
 8001fd0:	f7ff bf86 	b.w	8001ee0 <std>
 8001fd4:	20000268 	.word	0x20000268
 8001fd8:	20000130 	.word	0x20000130
 8001fdc:	08001f4d 	.word	0x08001f4d

08001fe0 <__sfp_lock_acquire>:
 8001fe0:	4801      	ldr	r0, [pc, #4]	@ (8001fe8 <__sfp_lock_acquire+0x8>)
 8001fe2:	f000 ba00 	b.w	80023e6 <__retarget_lock_acquire_recursive>
 8001fe6:	bf00      	nop
 8001fe8:	20000271 	.word	0x20000271

08001fec <__sfp_lock_release>:
 8001fec:	4801      	ldr	r0, [pc, #4]	@ (8001ff4 <__sfp_lock_release+0x8>)
 8001fee:	f000 b9fb 	b.w	80023e8 <__retarget_lock_release_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	20000271 	.word	0x20000271

08001ff8 <__sinit>:
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	f7ff fff0 	bl	8001fe0 <__sfp_lock_acquire>
 8002000:	6a23      	ldr	r3, [r4, #32]
 8002002:	b11b      	cbz	r3, 800200c <__sinit+0x14>
 8002004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002008:	f7ff bff0 	b.w	8001fec <__sfp_lock_release>
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <__sinit+0x28>)
 800200e:	6223      	str	r3, [r4, #32]
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__sinit+0x2c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f5      	bne.n	8002004 <__sinit+0xc>
 8002018:	f7ff ffc4 	bl	8001fa4 <global_stdio_init.part.0>
 800201c:	e7f2      	b.n	8002004 <__sinit+0xc>
 800201e:	bf00      	nop
 8002020:	08001f65 	.word	0x08001f65
 8002024:	20000268 	.word	0x20000268

08002028 <_fwalk_sglue>:
 8002028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800202c:	4607      	mov	r7, r0
 800202e:	4688      	mov	r8, r1
 8002030:	4614      	mov	r4, r2
 8002032:	2600      	movs	r6, #0
 8002034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002038:	f1b9 0901 	subs.w	r9, r9, #1
 800203c:	d505      	bpl.n	800204a <_fwalk_sglue+0x22>
 800203e:	6824      	ldr	r4, [r4, #0]
 8002040:	2c00      	cmp	r4, #0
 8002042:	d1f7      	bne.n	8002034 <_fwalk_sglue+0xc>
 8002044:	4630      	mov	r0, r6
 8002046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800204a:	89ab      	ldrh	r3, [r5, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d907      	bls.n	8002060 <_fwalk_sglue+0x38>
 8002050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002054:	3301      	adds	r3, #1
 8002056:	d003      	beq.n	8002060 <_fwalk_sglue+0x38>
 8002058:	4629      	mov	r1, r5
 800205a:	4638      	mov	r0, r7
 800205c:	47c0      	blx	r8
 800205e:	4306      	orrs	r6, r0
 8002060:	3568      	adds	r5, #104	@ 0x68
 8002062:	e7e9      	b.n	8002038 <_fwalk_sglue+0x10>

08002064 <iprintf>:
 8002064:	b40f      	push	{r0, r1, r2, r3}
 8002066:	b507      	push	{r0, r1, r2, lr}
 8002068:	4906      	ldr	r1, [pc, #24]	@ (8002084 <iprintf+0x20>)
 800206a:	ab04      	add	r3, sp, #16
 800206c:	6808      	ldr	r0, [r1, #0]
 800206e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002072:	6881      	ldr	r1, [r0, #8]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	f000 fadb 	bl	8002630 <_vfiprintf_r>
 800207a:	b003      	add	sp, #12
 800207c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002080:	b004      	add	sp, #16
 8002082:	4770      	bx	lr
 8002084:	20000018 	.word	0x20000018

08002088 <_puts_r>:
 8002088:	6a03      	ldr	r3, [r0, #32]
 800208a:	b570      	push	{r4, r5, r6, lr}
 800208c:	6884      	ldr	r4, [r0, #8]
 800208e:	4605      	mov	r5, r0
 8002090:	460e      	mov	r6, r1
 8002092:	b90b      	cbnz	r3, 8002098 <_puts_r+0x10>
 8002094:	f7ff ffb0 	bl	8001ff8 <__sinit>
 8002098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800209a:	07db      	lsls	r3, r3, #31
 800209c:	d405      	bmi.n	80020aa <_puts_r+0x22>
 800209e:	89a3      	ldrh	r3, [r4, #12]
 80020a0:	0598      	lsls	r0, r3, #22
 80020a2:	d402      	bmi.n	80020aa <_puts_r+0x22>
 80020a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020a6:	f000 f99e 	bl	80023e6 <__retarget_lock_acquire_recursive>
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	0719      	lsls	r1, r3, #28
 80020ae:	d502      	bpl.n	80020b6 <_puts_r+0x2e>
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d135      	bne.n	8002122 <_puts_r+0x9a>
 80020b6:	4621      	mov	r1, r4
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f8c5 	bl	8002248 <__swsetup_r>
 80020be:	b380      	cbz	r0, 8002122 <_puts_r+0x9a>
 80020c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80020c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020c6:	07da      	lsls	r2, r3, #31
 80020c8:	d405      	bmi.n	80020d6 <_puts_r+0x4e>
 80020ca:	89a3      	ldrh	r3, [r4, #12]
 80020cc:	059b      	lsls	r3, r3, #22
 80020ce:	d402      	bmi.n	80020d6 <_puts_r+0x4e>
 80020d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020d2:	f000 f989 	bl	80023e8 <__retarget_lock_release_recursive>
 80020d6:	4628      	mov	r0, r5
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da04      	bge.n	80020e8 <_puts_r+0x60>
 80020de:	69a2      	ldr	r2, [r4, #24]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dc17      	bgt.n	8002114 <_puts_r+0x8c>
 80020e4:	290a      	cmp	r1, #10
 80020e6:	d015      	beq.n	8002114 <_puts_r+0x8c>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	6022      	str	r2, [r4, #0]
 80020ee:	7019      	strb	r1, [r3, #0]
 80020f0:	68a3      	ldr	r3, [r4, #8]
 80020f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60a3      	str	r3, [r4, #8]
 80020fa:	2900      	cmp	r1, #0
 80020fc:	d1ed      	bne.n	80020da <_puts_r+0x52>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da11      	bge.n	8002126 <_puts_r+0x9e>
 8002102:	4622      	mov	r2, r4
 8002104:	210a      	movs	r1, #10
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f85f 	bl	80021ca <__swbuf_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d0d7      	beq.n	80020c0 <_puts_r+0x38>
 8002110:	250a      	movs	r5, #10
 8002112:	e7d7      	b.n	80020c4 <_puts_r+0x3c>
 8002114:	4622      	mov	r2, r4
 8002116:	4628      	mov	r0, r5
 8002118:	f000 f857 	bl	80021ca <__swbuf_r>
 800211c:	3001      	adds	r0, #1
 800211e:	d1e7      	bne.n	80020f0 <_puts_r+0x68>
 8002120:	e7ce      	b.n	80020c0 <_puts_r+0x38>
 8002122:	3e01      	subs	r6, #1
 8002124:	e7e4      	b.n	80020f0 <_puts_r+0x68>
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	6022      	str	r2, [r4, #0]
 800212c:	220a      	movs	r2, #10
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e7ee      	b.n	8002110 <_puts_r+0x88>
	...

08002134 <puts>:
 8002134:	4b02      	ldr	r3, [pc, #8]	@ (8002140 <puts+0xc>)
 8002136:	4601      	mov	r1, r0
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	f7ff bfa5 	b.w	8002088 <_puts_r>
 800213e:	bf00      	nop
 8002140:	20000018 	.word	0x20000018

08002144 <__sread>:
 8002144:	b510      	push	{r4, lr}
 8002146:	460c      	mov	r4, r1
 8002148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800214c:	f000 f8fc 	bl	8002348 <_read_r>
 8002150:	2800      	cmp	r0, #0
 8002152:	bfab      	itete	ge
 8002154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002156:	89a3      	ldrhlt	r3, [r4, #12]
 8002158:	181b      	addge	r3, r3, r0
 800215a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800215e:	bfac      	ite	ge
 8002160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002162:	81a3      	strhlt	r3, [r4, #12]
 8002164:	bd10      	pop	{r4, pc}

08002166 <__swrite>:
 8002166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800216a:	461f      	mov	r7, r3
 800216c:	898b      	ldrh	r3, [r1, #12]
 800216e:	05db      	lsls	r3, r3, #23
 8002170:	4605      	mov	r5, r0
 8002172:	460c      	mov	r4, r1
 8002174:	4616      	mov	r6, r2
 8002176:	d505      	bpl.n	8002184 <__swrite+0x1e>
 8002178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800217c:	2302      	movs	r3, #2
 800217e:	2200      	movs	r2, #0
 8002180:	f000 f8d0 	bl	8002324 <_lseek_r>
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800218a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800218e:	81a3      	strh	r3, [r4, #12]
 8002190:	4632      	mov	r2, r6
 8002192:	463b      	mov	r3, r7
 8002194:	4628      	mov	r0, r5
 8002196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800219a:	f000 b8e7 	b.w	800236c <_write_r>

0800219e <__sseek>:
 800219e:	b510      	push	{r4, lr}
 80021a0:	460c      	mov	r4, r1
 80021a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a6:	f000 f8bd 	bl	8002324 <_lseek_r>
 80021aa:	1c43      	adds	r3, r0, #1
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	bf15      	itete	ne
 80021b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80021b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80021b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80021ba:	81a3      	strheq	r3, [r4, #12]
 80021bc:	bf18      	it	ne
 80021be:	81a3      	strhne	r3, [r4, #12]
 80021c0:	bd10      	pop	{r4, pc}

080021c2 <__sclose>:
 80021c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c6:	f000 b89d 	b.w	8002304 <_close_r>

080021ca <__swbuf_r>:
 80021ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021cc:	460e      	mov	r6, r1
 80021ce:	4614      	mov	r4, r2
 80021d0:	4605      	mov	r5, r0
 80021d2:	b118      	cbz	r0, 80021dc <__swbuf_r+0x12>
 80021d4:	6a03      	ldr	r3, [r0, #32]
 80021d6:	b90b      	cbnz	r3, 80021dc <__swbuf_r+0x12>
 80021d8:	f7ff ff0e 	bl	8001ff8 <__sinit>
 80021dc:	69a3      	ldr	r3, [r4, #24]
 80021de:	60a3      	str	r3, [r4, #8]
 80021e0:	89a3      	ldrh	r3, [r4, #12]
 80021e2:	071a      	lsls	r2, r3, #28
 80021e4:	d501      	bpl.n	80021ea <__swbuf_r+0x20>
 80021e6:	6923      	ldr	r3, [r4, #16]
 80021e8:	b943      	cbnz	r3, 80021fc <__swbuf_r+0x32>
 80021ea:	4621      	mov	r1, r4
 80021ec:	4628      	mov	r0, r5
 80021ee:	f000 f82b 	bl	8002248 <__swsetup_r>
 80021f2:	b118      	cbz	r0, 80021fc <__swbuf_r+0x32>
 80021f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80021f8:	4638      	mov	r0, r7
 80021fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	6922      	ldr	r2, [r4, #16]
 8002200:	1a98      	subs	r0, r3, r2
 8002202:	6963      	ldr	r3, [r4, #20]
 8002204:	b2f6      	uxtb	r6, r6
 8002206:	4283      	cmp	r3, r0
 8002208:	4637      	mov	r7, r6
 800220a:	dc05      	bgt.n	8002218 <__swbuf_r+0x4e>
 800220c:	4621      	mov	r1, r4
 800220e:	4628      	mov	r0, r5
 8002210:	f000 fd38 	bl	8002c84 <_fflush_r>
 8002214:	2800      	cmp	r0, #0
 8002216:	d1ed      	bne.n	80021f4 <__swbuf_r+0x2a>
 8002218:	68a3      	ldr	r3, [r4, #8]
 800221a:	3b01      	subs	r3, #1
 800221c:	60a3      	str	r3, [r4, #8]
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	6022      	str	r2, [r4, #0]
 8002224:	701e      	strb	r6, [r3, #0]
 8002226:	6962      	ldr	r2, [r4, #20]
 8002228:	1c43      	adds	r3, r0, #1
 800222a:	429a      	cmp	r2, r3
 800222c:	d004      	beq.n	8002238 <__swbuf_r+0x6e>
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	07db      	lsls	r3, r3, #31
 8002232:	d5e1      	bpl.n	80021f8 <__swbuf_r+0x2e>
 8002234:	2e0a      	cmp	r6, #10
 8002236:	d1df      	bne.n	80021f8 <__swbuf_r+0x2e>
 8002238:	4621      	mov	r1, r4
 800223a:	4628      	mov	r0, r5
 800223c:	f000 fd22 	bl	8002c84 <_fflush_r>
 8002240:	2800      	cmp	r0, #0
 8002242:	d0d9      	beq.n	80021f8 <__swbuf_r+0x2e>
 8002244:	e7d6      	b.n	80021f4 <__swbuf_r+0x2a>
	...

08002248 <__swsetup_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <__swsetup_r+0xa8>)
 800224c:	4605      	mov	r5, r0
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	460c      	mov	r4, r1
 8002252:	b118      	cbz	r0, 800225c <__swsetup_r+0x14>
 8002254:	6a03      	ldr	r3, [r0, #32]
 8002256:	b90b      	cbnz	r3, 800225c <__swsetup_r+0x14>
 8002258:	f7ff fece 	bl	8001ff8 <__sinit>
 800225c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002260:	0719      	lsls	r1, r3, #28
 8002262:	d422      	bmi.n	80022aa <__swsetup_r+0x62>
 8002264:	06da      	lsls	r2, r3, #27
 8002266:	d407      	bmi.n	8002278 <__swsetup_r+0x30>
 8002268:	2209      	movs	r2, #9
 800226a:	602a      	str	r2, [r5, #0]
 800226c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002270:	81a3      	strh	r3, [r4, #12]
 8002272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002276:	e033      	b.n	80022e0 <__swsetup_r+0x98>
 8002278:	0758      	lsls	r0, r3, #29
 800227a:	d512      	bpl.n	80022a2 <__swsetup_r+0x5a>
 800227c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800227e:	b141      	cbz	r1, 8002292 <__swsetup_r+0x4a>
 8002280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002284:	4299      	cmp	r1, r3
 8002286:	d002      	beq.n	800228e <__swsetup_r+0x46>
 8002288:	4628      	mov	r0, r5
 800228a:	f000 f8af 	bl	80023ec <_free_r>
 800228e:	2300      	movs	r3, #0
 8002290:	6363      	str	r3, [r4, #52]	@ 0x34
 8002292:	89a3      	ldrh	r3, [r4, #12]
 8002294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002298:	81a3      	strh	r3, [r4, #12]
 800229a:	2300      	movs	r3, #0
 800229c:	6063      	str	r3, [r4, #4]
 800229e:	6923      	ldr	r3, [r4, #16]
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	89a3      	ldrh	r3, [r4, #12]
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	81a3      	strh	r3, [r4, #12]
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	b94b      	cbnz	r3, 80022c2 <__swsetup_r+0x7a>
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80022b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b8:	d003      	beq.n	80022c2 <__swsetup_r+0x7a>
 80022ba:	4621      	mov	r1, r4
 80022bc:	4628      	mov	r0, r5
 80022be:	f000 fd2f 	bl	8002d20 <__smakebuf_r>
 80022c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022c6:	f013 0201 	ands.w	r2, r3, #1
 80022ca:	d00a      	beq.n	80022e2 <__swsetup_r+0x9a>
 80022cc:	2200      	movs	r2, #0
 80022ce:	60a2      	str	r2, [r4, #8]
 80022d0:	6962      	ldr	r2, [r4, #20]
 80022d2:	4252      	negs	r2, r2
 80022d4:	61a2      	str	r2, [r4, #24]
 80022d6:	6922      	ldr	r2, [r4, #16]
 80022d8:	b942      	cbnz	r2, 80022ec <__swsetup_r+0xa4>
 80022da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80022de:	d1c5      	bne.n	800226c <__swsetup_r+0x24>
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	0799      	lsls	r1, r3, #30
 80022e4:	bf58      	it	pl
 80022e6:	6962      	ldrpl	r2, [r4, #20]
 80022e8:	60a2      	str	r2, [r4, #8]
 80022ea:	e7f4      	b.n	80022d6 <__swsetup_r+0x8e>
 80022ec:	2000      	movs	r0, #0
 80022ee:	e7f7      	b.n	80022e0 <__swsetup_r+0x98>
 80022f0:	20000018 	.word	0x20000018

080022f4 <memset>:
 80022f4:	4402      	add	r2, r0
 80022f6:	4603      	mov	r3, r0
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d100      	bne.n	80022fe <memset+0xa>
 80022fc:	4770      	bx	lr
 80022fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002302:	e7f9      	b.n	80022f8 <memset+0x4>

08002304 <_close_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4d06      	ldr	r5, [pc, #24]	@ (8002320 <_close_r+0x1c>)
 8002308:	2300      	movs	r3, #0
 800230a:	4604      	mov	r4, r0
 800230c:	4608      	mov	r0, r1
 800230e:	602b      	str	r3, [r5, #0]
 8002310:	f7fe fb96 	bl	8000a40 <_close>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	d102      	bne.n	800231e <_close_r+0x1a>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b103      	cbz	r3, 800231e <_close_r+0x1a>
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	bd38      	pop	{r3, r4, r5, pc}
 8002320:	2000026c 	.word	0x2000026c

08002324 <_lseek_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	@ (8002344 <_lseek_r+0x20>)
 8002328:	4604      	mov	r4, r0
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	2200      	movs	r2, #0
 8002330:	602a      	str	r2, [r5, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f7fe fb8e 	bl	8000a54 <_lseek>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_lseek_r+0x1e>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_lseek_r+0x1e>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	2000026c 	.word	0x2000026c

08002348 <_read_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4d07      	ldr	r5, [pc, #28]	@ (8002368 <_read_r+0x20>)
 800234c:	4604      	mov	r4, r0
 800234e:	4608      	mov	r0, r1
 8002350:	4611      	mov	r1, r2
 8002352:	2200      	movs	r2, #0
 8002354:	602a      	str	r2, [r5, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f7fe fb62 	bl	8000a20 <_read>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_read_r+0x1e>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	b103      	cbz	r3, 8002366 <_read_r+0x1e>
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	2000026c 	.word	0x2000026c

0800236c <_write_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4d07      	ldr	r5, [pc, #28]	@ (800238c <_write_r+0x20>)
 8002370:	4604      	mov	r4, r0
 8002372:	4608      	mov	r0, r1
 8002374:	4611      	mov	r1, r2
 8002376:	2200      	movs	r2, #0
 8002378:	602a      	str	r2, [r5, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	f7fe f914 	bl	80005a8 <_write>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d102      	bne.n	800238a <_write_r+0x1e>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	b103      	cbz	r3, 800238a <_write_r+0x1e>
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	bd38      	pop	{r3, r4, r5, pc}
 800238c:	2000026c 	.word	0x2000026c

08002390 <__errno>:
 8002390:	4b01      	ldr	r3, [pc, #4]	@ (8002398 <__errno+0x8>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000018 	.word	0x20000018

0800239c <__libc_init_array>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	4d0d      	ldr	r5, [pc, #52]	@ (80023d4 <__libc_init_array+0x38>)
 80023a0:	4c0d      	ldr	r4, [pc, #52]	@ (80023d8 <__libc_init_array+0x3c>)
 80023a2:	1b64      	subs	r4, r4, r5
 80023a4:	10a4      	asrs	r4, r4, #2
 80023a6:	2600      	movs	r6, #0
 80023a8:	42a6      	cmp	r6, r4
 80023aa:	d109      	bne.n	80023c0 <__libc_init_array+0x24>
 80023ac:	4d0b      	ldr	r5, [pc, #44]	@ (80023dc <__libc_init_array+0x40>)
 80023ae:	4c0c      	ldr	r4, [pc, #48]	@ (80023e0 <__libc_init_array+0x44>)
 80023b0:	f000 fd24 	bl	8002dfc <_init>
 80023b4:	1b64      	subs	r4, r4, r5
 80023b6:	10a4      	asrs	r4, r4, #2
 80023b8:	2600      	movs	r6, #0
 80023ba:	42a6      	cmp	r6, r4
 80023bc:	d105      	bne.n	80023ca <__libc_init_array+0x2e>
 80023be:	bd70      	pop	{r4, r5, r6, pc}
 80023c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c4:	4798      	blx	r3
 80023c6:	3601      	adds	r6, #1
 80023c8:	e7ee      	b.n	80023a8 <__libc_init_array+0xc>
 80023ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ce:	4798      	blx	r3
 80023d0:	3601      	adds	r6, #1
 80023d2:	e7f2      	b.n	80023ba <__libc_init_array+0x1e>
 80023d4:	08002f90 	.word	0x08002f90
 80023d8:	08002f90 	.word	0x08002f90
 80023dc:	08002f90 	.word	0x08002f90
 80023e0:	08002f94 	.word	0x08002f94

080023e4 <__retarget_lock_init_recursive>:
 80023e4:	4770      	bx	lr

080023e6 <__retarget_lock_acquire_recursive>:
 80023e6:	4770      	bx	lr

080023e8 <__retarget_lock_release_recursive>:
 80023e8:	4770      	bx	lr
	...

080023ec <_free_r>:
 80023ec:	b538      	push	{r3, r4, r5, lr}
 80023ee:	4605      	mov	r5, r0
 80023f0:	2900      	cmp	r1, #0
 80023f2:	d041      	beq.n	8002478 <_free_r+0x8c>
 80023f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023f8:	1f0c      	subs	r4, r1, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bfb8      	it	lt
 80023fe:	18e4      	addlt	r4, r4, r3
 8002400:	f000 f8e0 	bl	80025c4 <__malloc_lock>
 8002404:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <_free_r+0x90>)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	b933      	cbnz	r3, 8002418 <_free_r+0x2c>
 800240a:	6063      	str	r3, [r4, #4]
 800240c:	6014      	str	r4, [r2, #0]
 800240e:	4628      	mov	r0, r5
 8002410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002414:	f000 b8dc 	b.w	80025d0 <__malloc_unlock>
 8002418:	42a3      	cmp	r3, r4
 800241a:	d908      	bls.n	800242e <_free_r+0x42>
 800241c:	6820      	ldr	r0, [r4, #0]
 800241e:	1821      	adds	r1, r4, r0
 8002420:	428b      	cmp	r3, r1
 8002422:	bf01      	itttt	eq
 8002424:	6819      	ldreq	r1, [r3, #0]
 8002426:	685b      	ldreq	r3, [r3, #4]
 8002428:	1809      	addeq	r1, r1, r0
 800242a:	6021      	streq	r1, [r4, #0]
 800242c:	e7ed      	b.n	800240a <_free_r+0x1e>
 800242e:	461a      	mov	r2, r3
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	b10b      	cbz	r3, 8002438 <_free_r+0x4c>
 8002434:	42a3      	cmp	r3, r4
 8002436:	d9fa      	bls.n	800242e <_free_r+0x42>
 8002438:	6811      	ldr	r1, [r2, #0]
 800243a:	1850      	adds	r0, r2, r1
 800243c:	42a0      	cmp	r0, r4
 800243e:	d10b      	bne.n	8002458 <_free_r+0x6c>
 8002440:	6820      	ldr	r0, [r4, #0]
 8002442:	4401      	add	r1, r0
 8002444:	1850      	adds	r0, r2, r1
 8002446:	4283      	cmp	r3, r0
 8002448:	6011      	str	r1, [r2, #0]
 800244a:	d1e0      	bne.n	800240e <_free_r+0x22>
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	6053      	str	r3, [r2, #4]
 8002452:	4408      	add	r0, r1
 8002454:	6010      	str	r0, [r2, #0]
 8002456:	e7da      	b.n	800240e <_free_r+0x22>
 8002458:	d902      	bls.n	8002460 <_free_r+0x74>
 800245a:	230c      	movs	r3, #12
 800245c:	602b      	str	r3, [r5, #0]
 800245e:	e7d6      	b.n	800240e <_free_r+0x22>
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	1821      	adds	r1, r4, r0
 8002464:	428b      	cmp	r3, r1
 8002466:	bf04      	itt	eq
 8002468:	6819      	ldreq	r1, [r3, #0]
 800246a:	685b      	ldreq	r3, [r3, #4]
 800246c:	6063      	str	r3, [r4, #4]
 800246e:	bf04      	itt	eq
 8002470:	1809      	addeq	r1, r1, r0
 8002472:	6021      	streq	r1, [r4, #0]
 8002474:	6054      	str	r4, [r2, #4]
 8002476:	e7ca      	b.n	800240e <_free_r+0x22>
 8002478:	bd38      	pop	{r3, r4, r5, pc}
 800247a:	bf00      	nop
 800247c:	20000278 	.word	0x20000278

08002480 <sbrk_aligned>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	4e0f      	ldr	r6, [pc, #60]	@ (80024c0 <sbrk_aligned+0x40>)
 8002484:	460c      	mov	r4, r1
 8002486:	6831      	ldr	r1, [r6, #0]
 8002488:	4605      	mov	r5, r0
 800248a:	b911      	cbnz	r1, 8002492 <sbrk_aligned+0x12>
 800248c:	f000 fca6 	bl	8002ddc <_sbrk_r>
 8002490:	6030      	str	r0, [r6, #0]
 8002492:	4621      	mov	r1, r4
 8002494:	4628      	mov	r0, r5
 8002496:	f000 fca1 	bl	8002ddc <_sbrk_r>
 800249a:	1c43      	adds	r3, r0, #1
 800249c:	d103      	bne.n	80024a6 <sbrk_aligned+0x26>
 800249e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80024a2:	4620      	mov	r0, r4
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	1cc4      	adds	r4, r0, #3
 80024a8:	f024 0403 	bic.w	r4, r4, #3
 80024ac:	42a0      	cmp	r0, r4
 80024ae:	d0f8      	beq.n	80024a2 <sbrk_aligned+0x22>
 80024b0:	1a21      	subs	r1, r4, r0
 80024b2:	4628      	mov	r0, r5
 80024b4:	f000 fc92 	bl	8002ddc <_sbrk_r>
 80024b8:	3001      	adds	r0, #1
 80024ba:	d1f2      	bne.n	80024a2 <sbrk_aligned+0x22>
 80024bc:	e7ef      	b.n	800249e <sbrk_aligned+0x1e>
 80024be:	bf00      	nop
 80024c0:	20000274 	.word	0x20000274

080024c4 <_malloc_r>:
 80024c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024c8:	1ccd      	adds	r5, r1, #3
 80024ca:	f025 0503 	bic.w	r5, r5, #3
 80024ce:	3508      	adds	r5, #8
 80024d0:	2d0c      	cmp	r5, #12
 80024d2:	bf38      	it	cc
 80024d4:	250c      	movcc	r5, #12
 80024d6:	2d00      	cmp	r5, #0
 80024d8:	4606      	mov	r6, r0
 80024da:	db01      	blt.n	80024e0 <_malloc_r+0x1c>
 80024dc:	42a9      	cmp	r1, r5
 80024de:	d904      	bls.n	80024ea <_malloc_r+0x26>
 80024e0:	230c      	movs	r3, #12
 80024e2:	6033      	str	r3, [r6, #0]
 80024e4:	2000      	movs	r0, #0
 80024e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80025c0 <_malloc_r+0xfc>
 80024ee:	f000 f869 	bl	80025c4 <__malloc_lock>
 80024f2:	f8d8 3000 	ldr.w	r3, [r8]
 80024f6:	461c      	mov	r4, r3
 80024f8:	bb44      	cbnz	r4, 800254c <_malloc_r+0x88>
 80024fa:	4629      	mov	r1, r5
 80024fc:	4630      	mov	r0, r6
 80024fe:	f7ff ffbf 	bl	8002480 <sbrk_aligned>
 8002502:	1c43      	adds	r3, r0, #1
 8002504:	4604      	mov	r4, r0
 8002506:	d158      	bne.n	80025ba <_malloc_r+0xf6>
 8002508:	f8d8 4000 	ldr.w	r4, [r8]
 800250c:	4627      	mov	r7, r4
 800250e:	2f00      	cmp	r7, #0
 8002510:	d143      	bne.n	800259a <_malloc_r+0xd6>
 8002512:	2c00      	cmp	r4, #0
 8002514:	d04b      	beq.n	80025ae <_malloc_r+0xea>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	4639      	mov	r1, r7
 800251a:	4630      	mov	r0, r6
 800251c:	eb04 0903 	add.w	r9, r4, r3
 8002520:	f000 fc5c 	bl	8002ddc <_sbrk_r>
 8002524:	4581      	cmp	r9, r0
 8002526:	d142      	bne.n	80025ae <_malloc_r+0xea>
 8002528:	6821      	ldr	r1, [r4, #0]
 800252a:	1a6d      	subs	r5, r5, r1
 800252c:	4629      	mov	r1, r5
 800252e:	4630      	mov	r0, r6
 8002530:	f7ff ffa6 	bl	8002480 <sbrk_aligned>
 8002534:	3001      	adds	r0, #1
 8002536:	d03a      	beq.n	80025ae <_malloc_r+0xea>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	442b      	add	r3, r5
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	f8d8 3000 	ldr.w	r3, [r8]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	bb62      	cbnz	r2, 80025a0 <_malloc_r+0xdc>
 8002546:	f8c8 7000 	str.w	r7, [r8]
 800254a:	e00f      	b.n	800256c <_malloc_r+0xa8>
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	1b52      	subs	r2, r2, r5
 8002550:	d420      	bmi.n	8002594 <_malloc_r+0xd0>
 8002552:	2a0b      	cmp	r2, #11
 8002554:	d917      	bls.n	8002586 <_malloc_r+0xc2>
 8002556:	1961      	adds	r1, r4, r5
 8002558:	42a3      	cmp	r3, r4
 800255a:	6025      	str	r5, [r4, #0]
 800255c:	bf18      	it	ne
 800255e:	6059      	strne	r1, [r3, #4]
 8002560:	6863      	ldr	r3, [r4, #4]
 8002562:	bf08      	it	eq
 8002564:	f8c8 1000 	streq.w	r1, [r8]
 8002568:	5162      	str	r2, [r4, r5]
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	4630      	mov	r0, r6
 800256e:	f000 f82f 	bl	80025d0 <__malloc_unlock>
 8002572:	f104 000b 	add.w	r0, r4, #11
 8002576:	1d23      	adds	r3, r4, #4
 8002578:	f020 0007 	bic.w	r0, r0, #7
 800257c:	1ac2      	subs	r2, r0, r3
 800257e:	bf1c      	itt	ne
 8002580:	1a1b      	subne	r3, r3, r0
 8002582:	50a3      	strne	r3, [r4, r2]
 8002584:	e7af      	b.n	80024e6 <_malloc_r+0x22>
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	42a3      	cmp	r3, r4
 800258a:	bf0c      	ite	eq
 800258c:	f8c8 2000 	streq.w	r2, [r8]
 8002590:	605a      	strne	r2, [r3, #4]
 8002592:	e7eb      	b.n	800256c <_malloc_r+0xa8>
 8002594:	4623      	mov	r3, r4
 8002596:	6864      	ldr	r4, [r4, #4]
 8002598:	e7ae      	b.n	80024f8 <_malloc_r+0x34>
 800259a:	463c      	mov	r4, r7
 800259c:	687f      	ldr	r7, [r7, #4]
 800259e:	e7b6      	b.n	800250e <_malloc_r+0x4a>
 80025a0:	461a      	mov	r2, r3
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	42a3      	cmp	r3, r4
 80025a6:	d1fb      	bne.n	80025a0 <_malloc_r+0xdc>
 80025a8:	2300      	movs	r3, #0
 80025aa:	6053      	str	r3, [r2, #4]
 80025ac:	e7de      	b.n	800256c <_malloc_r+0xa8>
 80025ae:	230c      	movs	r3, #12
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	4630      	mov	r0, r6
 80025b4:	f000 f80c 	bl	80025d0 <__malloc_unlock>
 80025b8:	e794      	b.n	80024e4 <_malloc_r+0x20>
 80025ba:	6005      	str	r5, [r0, #0]
 80025bc:	e7d6      	b.n	800256c <_malloc_r+0xa8>
 80025be:	bf00      	nop
 80025c0:	20000278 	.word	0x20000278

080025c4 <__malloc_lock>:
 80025c4:	4801      	ldr	r0, [pc, #4]	@ (80025cc <__malloc_lock+0x8>)
 80025c6:	f7ff bf0e 	b.w	80023e6 <__retarget_lock_acquire_recursive>
 80025ca:	bf00      	nop
 80025cc:	20000270 	.word	0x20000270

080025d0 <__malloc_unlock>:
 80025d0:	4801      	ldr	r0, [pc, #4]	@ (80025d8 <__malloc_unlock+0x8>)
 80025d2:	f7ff bf09 	b.w	80023e8 <__retarget_lock_release_recursive>
 80025d6:	bf00      	nop
 80025d8:	20000270 	.word	0x20000270

080025dc <__sfputc_r>:
 80025dc:	6893      	ldr	r3, [r2, #8]
 80025de:	3b01      	subs	r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	b410      	push	{r4}
 80025e4:	6093      	str	r3, [r2, #8]
 80025e6:	da08      	bge.n	80025fa <__sfputc_r+0x1e>
 80025e8:	6994      	ldr	r4, [r2, #24]
 80025ea:	42a3      	cmp	r3, r4
 80025ec:	db01      	blt.n	80025f2 <__sfputc_r+0x16>
 80025ee:	290a      	cmp	r1, #10
 80025f0:	d103      	bne.n	80025fa <__sfputc_r+0x1e>
 80025f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025f6:	f7ff bde8 	b.w	80021ca <__swbuf_r>
 80025fa:	6813      	ldr	r3, [r2, #0]
 80025fc:	1c58      	adds	r0, r3, #1
 80025fe:	6010      	str	r0, [r2, #0]
 8002600:	7019      	strb	r1, [r3, #0]
 8002602:	4608      	mov	r0, r1
 8002604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002608:	4770      	bx	lr

0800260a <__sfputs_r>:
 800260a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260c:	4606      	mov	r6, r0
 800260e:	460f      	mov	r7, r1
 8002610:	4614      	mov	r4, r2
 8002612:	18d5      	adds	r5, r2, r3
 8002614:	42ac      	cmp	r4, r5
 8002616:	d101      	bne.n	800261c <__sfputs_r+0x12>
 8002618:	2000      	movs	r0, #0
 800261a:	e007      	b.n	800262c <__sfputs_r+0x22>
 800261c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002620:	463a      	mov	r2, r7
 8002622:	4630      	mov	r0, r6
 8002624:	f7ff ffda 	bl	80025dc <__sfputc_r>
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d1f3      	bne.n	8002614 <__sfputs_r+0xa>
 800262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002630 <_vfiprintf_r>:
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	460d      	mov	r5, r1
 8002636:	b09d      	sub	sp, #116	@ 0x74
 8002638:	4614      	mov	r4, r2
 800263a:	4698      	mov	r8, r3
 800263c:	4606      	mov	r6, r0
 800263e:	b118      	cbz	r0, 8002648 <_vfiprintf_r+0x18>
 8002640:	6a03      	ldr	r3, [r0, #32]
 8002642:	b90b      	cbnz	r3, 8002648 <_vfiprintf_r+0x18>
 8002644:	f7ff fcd8 	bl	8001ff8 <__sinit>
 8002648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800264a:	07d9      	lsls	r1, r3, #31
 800264c:	d405      	bmi.n	800265a <_vfiprintf_r+0x2a>
 800264e:	89ab      	ldrh	r3, [r5, #12]
 8002650:	059a      	lsls	r2, r3, #22
 8002652:	d402      	bmi.n	800265a <_vfiprintf_r+0x2a>
 8002654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002656:	f7ff fec6 	bl	80023e6 <__retarget_lock_acquire_recursive>
 800265a:	89ab      	ldrh	r3, [r5, #12]
 800265c:	071b      	lsls	r3, r3, #28
 800265e:	d501      	bpl.n	8002664 <_vfiprintf_r+0x34>
 8002660:	692b      	ldr	r3, [r5, #16]
 8002662:	b99b      	cbnz	r3, 800268c <_vfiprintf_r+0x5c>
 8002664:	4629      	mov	r1, r5
 8002666:	4630      	mov	r0, r6
 8002668:	f7ff fdee 	bl	8002248 <__swsetup_r>
 800266c:	b170      	cbz	r0, 800268c <_vfiprintf_r+0x5c>
 800266e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002670:	07dc      	lsls	r4, r3, #31
 8002672:	d504      	bpl.n	800267e <_vfiprintf_r+0x4e>
 8002674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002678:	b01d      	add	sp, #116	@ 0x74
 800267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800267e:	89ab      	ldrh	r3, [r5, #12]
 8002680:	0598      	lsls	r0, r3, #22
 8002682:	d4f7      	bmi.n	8002674 <_vfiprintf_r+0x44>
 8002684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002686:	f7ff feaf 	bl	80023e8 <__retarget_lock_release_recursive>
 800268a:	e7f3      	b.n	8002674 <_vfiprintf_r+0x44>
 800268c:	2300      	movs	r3, #0
 800268e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002690:	2320      	movs	r3, #32
 8002692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002696:	f8cd 800c 	str.w	r8, [sp, #12]
 800269a:	2330      	movs	r3, #48	@ 0x30
 800269c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800284c <_vfiprintf_r+0x21c>
 80026a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026a4:	f04f 0901 	mov.w	r9, #1
 80026a8:	4623      	mov	r3, r4
 80026aa:	469a      	mov	sl, r3
 80026ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026b0:	b10a      	cbz	r2, 80026b6 <_vfiprintf_r+0x86>
 80026b2:	2a25      	cmp	r2, #37	@ 0x25
 80026b4:	d1f9      	bne.n	80026aa <_vfiprintf_r+0x7a>
 80026b6:	ebba 0b04 	subs.w	fp, sl, r4
 80026ba:	d00b      	beq.n	80026d4 <_vfiprintf_r+0xa4>
 80026bc:	465b      	mov	r3, fp
 80026be:	4622      	mov	r2, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	4630      	mov	r0, r6
 80026c4:	f7ff ffa1 	bl	800260a <__sfputs_r>
 80026c8:	3001      	adds	r0, #1
 80026ca:	f000 80a7 	beq.w	800281c <_vfiprintf_r+0x1ec>
 80026ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026d0:	445a      	add	r2, fp
 80026d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80026d4:	f89a 3000 	ldrb.w	r3, [sl]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 809f 	beq.w	800281c <_vfiprintf_r+0x1ec>
 80026de:	2300      	movs	r3, #0
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026e8:	f10a 0a01 	add.w	sl, sl, #1
 80026ec:	9304      	str	r3, [sp, #16]
 80026ee:	9307      	str	r3, [sp, #28]
 80026f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80026f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80026f6:	4654      	mov	r4, sl
 80026f8:	2205      	movs	r2, #5
 80026fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026fe:	4853      	ldr	r0, [pc, #332]	@ (800284c <_vfiprintf_r+0x21c>)
 8002700:	f7fd fd6e 	bl	80001e0 <memchr>
 8002704:	9a04      	ldr	r2, [sp, #16]
 8002706:	b9d8      	cbnz	r0, 8002740 <_vfiprintf_r+0x110>
 8002708:	06d1      	lsls	r1, r2, #27
 800270a:	bf44      	itt	mi
 800270c:	2320      	movmi	r3, #32
 800270e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002712:	0713      	lsls	r3, r2, #28
 8002714:	bf44      	itt	mi
 8002716:	232b      	movmi	r3, #43	@ 0x2b
 8002718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800271c:	f89a 3000 	ldrb.w	r3, [sl]
 8002720:	2b2a      	cmp	r3, #42	@ 0x2a
 8002722:	d015      	beq.n	8002750 <_vfiprintf_r+0x120>
 8002724:	9a07      	ldr	r2, [sp, #28]
 8002726:	4654      	mov	r4, sl
 8002728:	2000      	movs	r0, #0
 800272a:	f04f 0c0a 	mov.w	ip, #10
 800272e:	4621      	mov	r1, r4
 8002730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002734:	3b30      	subs	r3, #48	@ 0x30
 8002736:	2b09      	cmp	r3, #9
 8002738:	d94b      	bls.n	80027d2 <_vfiprintf_r+0x1a2>
 800273a:	b1b0      	cbz	r0, 800276a <_vfiprintf_r+0x13a>
 800273c:	9207      	str	r2, [sp, #28]
 800273e:	e014      	b.n	800276a <_vfiprintf_r+0x13a>
 8002740:	eba0 0308 	sub.w	r3, r0, r8
 8002744:	fa09 f303 	lsl.w	r3, r9, r3
 8002748:	4313      	orrs	r3, r2
 800274a:	9304      	str	r3, [sp, #16]
 800274c:	46a2      	mov	sl, r4
 800274e:	e7d2      	b.n	80026f6 <_vfiprintf_r+0xc6>
 8002750:	9b03      	ldr	r3, [sp, #12]
 8002752:	1d19      	adds	r1, r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	9103      	str	r1, [sp, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	bfbb      	ittet	lt
 800275c:	425b      	neglt	r3, r3
 800275e:	f042 0202 	orrlt.w	r2, r2, #2
 8002762:	9307      	strge	r3, [sp, #28]
 8002764:	9307      	strlt	r3, [sp, #28]
 8002766:	bfb8      	it	lt
 8002768:	9204      	strlt	r2, [sp, #16]
 800276a:	7823      	ldrb	r3, [r4, #0]
 800276c:	2b2e      	cmp	r3, #46	@ 0x2e
 800276e:	d10a      	bne.n	8002786 <_vfiprintf_r+0x156>
 8002770:	7863      	ldrb	r3, [r4, #1]
 8002772:	2b2a      	cmp	r3, #42	@ 0x2a
 8002774:	d132      	bne.n	80027dc <_vfiprintf_r+0x1ac>
 8002776:	9b03      	ldr	r3, [sp, #12]
 8002778:	1d1a      	adds	r2, r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	9203      	str	r2, [sp, #12]
 800277e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002782:	3402      	adds	r4, #2
 8002784:	9305      	str	r3, [sp, #20]
 8002786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800285c <_vfiprintf_r+0x22c>
 800278a:	7821      	ldrb	r1, [r4, #0]
 800278c:	2203      	movs	r2, #3
 800278e:	4650      	mov	r0, sl
 8002790:	f7fd fd26 	bl	80001e0 <memchr>
 8002794:	b138      	cbz	r0, 80027a6 <_vfiprintf_r+0x176>
 8002796:	9b04      	ldr	r3, [sp, #16]
 8002798:	eba0 000a 	sub.w	r0, r0, sl
 800279c:	2240      	movs	r2, #64	@ 0x40
 800279e:	4082      	lsls	r2, r0
 80027a0:	4313      	orrs	r3, r2
 80027a2:	3401      	adds	r4, #1
 80027a4:	9304      	str	r3, [sp, #16]
 80027a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027aa:	4829      	ldr	r0, [pc, #164]	@ (8002850 <_vfiprintf_r+0x220>)
 80027ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027b0:	2206      	movs	r2, #6
 80027b2:	f7fd fd15 	bl	80001e0 <memchr>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d03f      	beq.n	800283a <_vfiprintf_r+0x20a>
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <_vfiprintf_r+0x224>)
 80027bc:	bb1b      	cbnz	r3, 8002806 <_vfiprintf_r+0x1d6>
 80027be:	9b03      	ldr	r3, [sp, #12]
 80027c0:	3307      	adds	r3, #7
 80027c2:	f023 0307 	bic.w	r3, r3, #7
 80027c6:	3308      	adds	r3, #8
 80027c8:	9303      	str	r3, [sp, #12]
 80027ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027cc:	443b      	add	r3, r7
 80027ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80027d0:	e76a      	b.n	80026a8 <_vfiprintf_r+0x78>
 80027d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80027d6:	460c      	mov	r4, r1
 80027d8:	2001      	movs	r0, #1
 80027da:	e7a8      	b.n	800272e <_vfiprintf_r+0xfe>
 80027dc:	2300      	movs	r3, #0
 80027de:	3401      	adds	r4, #1
 80027e0:	9305      	str	r3, [sp, #20]
 80027e2:	4619      	mov	r1, r3
 80027e4:	f04f 0c0a 	mov.w	ip, #10
 80027e8:	4620      	mov	r0, r4
 80027ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027ee:	3a30      	subs	r2, #48	@ 0x30
 80027f0:	2a09      	cmp	r2, #9
 80027f2:	d903      	bls.n	80027fc <_vfiprintf_r+0x1cc>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0c6      	beq.n	8002786 <_vfiprintf_r+0x156>
 80027f8:	9105      	str	r1, [sp, #20]
 80027fa:	e7c4      	b.n	8002786 <_vfiprintf_r+0x156>
 80027fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002800:	4604      	mov	r4, r0
 8002802:	2301      	movs	r3, #1
 8002804:	e7f0      	b.n	80027e8 <_vfiprintf_r+0x1b8>
 8002806:	ab03      	add	r3, sp, #12
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	462a      	mov	r2, r5
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <_vfiprintf_r+0x228>)
 800280e:	a904      	add	r1, sp, #16
 8002810:	4630      	mov	r0, r6
 8002812:	f3af 8000 	nop.w
 8002816:	4607      	mov	r7, r0
 8002818:	1c78      	adds	r0, r7, #1
 800281a:	d1d6      	bne.n	80027ca <_vfiprintf_r+0x19a>
 800281c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800281e:	07d9      	lsls	r1, r3, #31
 8002820:	d405      	bmi.n	800282e <_vfiprintf_r+0x1fe>
 8002822:	89ab      	ldrh	r3, [r5, #12]
 8002824:	059a      	lsls	r2, r3, #22
 8002826:	d402      	bmi.n	800282e <_vfiprintf_r+0x1fe>
 8002828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800282a:	f7ff fddd 	bl	80023e8 <__retarget_lock_release_recursive>
 800282e:	89ab      	ldrh	r3, [r5, #12]
 8002830:	065b      	lsls	r3, r3, #25
 8002832:	f53f af1f 	bmi.w	8002674 <_vfiprintf_r+0x44>
 8002836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002838:	e71e      	b.n	8002678 <_vfiprintf_r+0x48>
 800283a:	ab03      	add	r3, sp, #12
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	462a      	mov	r2, r5
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <_vfiprintf_r+0x228>)
 8002842:	a904      	add	r1, sp, #16
 8002844:	4630      	mov	r0, r6
 8002846:	f000 f879 	bl	800293c <_printf_i>
 800284a:	e7e4      	b.n	8002816 <_vfiprintf_r+0x1e6>
 800284c:	08002f54 	.word	0x08002f54
 8002850:	08002f5e 	.word	0x08002f5e
 8002854:	00000000 	.word	0x00000000
 8002858:	0800260b 	.word	0x0800260b
 800285c:	08002f5a 	.word	0x08002f5a

08002860 <_printf_common>:
 8002860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002864:	4616      	mov	r6, r2
 8002866:	4698      	mov	r8, r3
 8002868:	688a      	ldr	r2, [r1, #8]
 800286a:	690b      	ldr	r3, [r1, #16]
 800286c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002870:	4293      	cmp	r3, r2
 8002872:	bfb8      	it	lt
 8002874:	4613      	movlt	r3, r2
 8002876:	6033      	str	r3, [r6, #0]
 8002878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800287c:	4607      	mov	r7, r0
 800287e:	460c      	mov	r4, r1
 8002880:	b10a      	cbz	r2, 8002886 <_printf_common+0x26>
 8002882:	3301      	adds	r3, #1
 8002884:	6033      	str	r3, [r6, #0]
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	0699      	lsls	r1, r3, #26
 800288a:	bf42      	ittt	mi
 800288c:	6833      	ldrmi	r3, [r6, #0]
 800288e:	3302      	addmi	r3, #2
 8002890:	6033      	strmi	r3, [r6, #0]
 8002892:	6825      	ldr	r5, [r4, #0]
 8002894:	f015 0506 	ands.w	r5, r5, #6
 8002898:	d106      	bne.n	80028a8 <_printf_common+0x48>
 800289a:	f104 0a19 	add.w	sl, r4, #25
 800289e:	68e3      	ldr	r3, [r4, #12]
 80028a0:	6832      	ldr	r2, [r6, #0]
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	42ab      	cmp	r3, r5
 80028a6:	dc26      	bgt.n	80028f6 <_printf_common+0x96>
 80028a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	3b00      	subs	r3, #0
 80028b0:	bf18      	it	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	0692      	lsls	r2, r2, #26
 80028b6:	d42b      	bmi.n	8002910 <_printf_common+0xb0>
 80028b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80028bc:	4641      	mov	r1, r8
 80028be:	4638      	mov	r0, r7
 80028c0:	47c8      	blx	r9
 80028c2:	3001      	adds	r0, #1
 80028c4:	d01e      	beq.n	8002904 <_printf_common+0xa4>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	6922      	ldr	r2, [r4, #16]
 80028ca:	f003 0306 	and.w	r3, r3, #6
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf02      	ittt	eq
 80028d2:	68e5      	ldreq	r5, [r4, #12]
 80028d4:	6833      	ldreq	r3, [r6, #0]
 80028d6:	1aed      	subeq	r5, r5, r3
 80028d8:	68a3      	ldr	r3, [r4, #8]
 80028da:	bf0c      	ite	eq
 80028dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028e0:	2500      	movne	r5, #0
 80028e2:	4293      	cmp	r3, r2
 80028e4:	bfc4      	itt	gt
 80028e6:	1a9b      	subgt	r3, r3, r2
 80028e8:	18ed      	addgt	r5, r5, r3
 80028ea:	2600      	movs	r6, #0
 80028ec:	341a      	adds	r4, #26
 80028ee:	42b5      	cmp	r5, r6
 80028f0:	d11a      	bne.n	8002928 <_printf_common+0xc8>
 80028f2:	2000      	movs	r0, #0
 80028f4:	e008      	b.n	8002908 <_printf_common+0xa8>
 80028f6:	2301      	movs	r3, #1
 80028f8:	4652      	mov	r2, sl
 80028fa:	4641      	mov	r1, r8
 80028fc:	4638      	mov	r0, r7
 80028fe:	47c8      	blx	r9
 8002900:	3001      	adds	r0, #1
 8002902:	d103      	bne.n	800290c <_printf_common+0xac>
 8002904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800290c:	3501      	adds	r5, #1
 800290e:	e7c6      	b.n	800289e <_printf_common+0x3e>
 8002910:	18e1      	adds	r1, r4, r3
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	2030      	movs	r0, #48	@ 0x30
 8002916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800291a:	4422      	add	r2, r4
 800291c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002924:	3302      	adds	r3, #2
 8002926:	e7c7      	b.n	80028b8 <_printf_common+0x58>
 8002928:	2301      	movs	r3, #1
 800292a:	4622      	mov	r2, r4
 800292c:	4641      	mov	r1, r8
 800292e:	4638      	mov	r0, r7
 8002930:	47c8      	blx	r9
 8002932:	3001      	adds	r0, #1
 8002934:	d0e6      	beq.n	8002904 <_printf_common+0xa4>
 8002936:	3601      	adds	r6, #1
 8002938:	e7d9      	b.n	80028ee <_printf_common+0x8e>
	...

0800293c <_printf_i>:
 800293c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002940:	7e0f      	ldrb	r7, [r1, #24]
 8002942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002944:	2f78      	cmp	r7, #120	@ 0x78
 8002946:	4691      	mov	r9, r2
 8002948:	4680      	mov	r8, r0
 800294a:	460c      	mov	r4, r1
 800294c:	469a      	mov	sl, r3
 800294e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002952:	d807      	bhi.n	8002964 <_printf_i+0x28>
 8002954:	2f62      	cmp	r7, #98	@ 0x62
 8002956:	d80a      	bhi.n	800296e <_printf_i+0x32>
 8002958:	2f00      	cmp	r7, #0
 800295a:	f000 80d2 	beq.w	8002b02 <_printf_i+0x1c6>
 800295e:	2f58      	cmp	r7, #88	@ 0x58
 8002960:	f000 80b9 	beq.w	8002ad6 <_printf_i+0x19a>
 8002964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800296c:	e03a      	b.n	80029e4 <_printf_i+0xa8>
 800296e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002972:	2b15      	cmp	r3, #21
 8002974:	d8f6      	bhi.n	8002964 <_printf_i+0x28>
 8002976:	a101      	add	r1, pc, #4	@ (adr r1, 800297c <_printf_i+0x40>)
 8002978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800297c:	080029d5 	.word	0x080029d5
 8002980:	080029e9 	.word	0x080029e9
 8002984:	08002965 	.word	0x08002965
 8002988:	08002965 	.word	0x08002965
 800298c:	08002965 	.word	0x08002965
 8002990:	08002965 	.word	0x08002965
 8002994:	080029e9 	.word	0x080029e9
 8002998:	08002965 	.word	0x08002965
 800299c:	08002965 	.word	0x08002965
 80029a0:	08002965 	.word	0x08002965
 80029a4:	08002965 	.word	0x08002965
 80029a8:	08002ae9 	.word	0x08002ae9
 80029ac:	08002a13 	.word	0x08002a13
 80029b0:	08002aa3 	.word	0x08002aa3
 80029b4:	08002965 	.word	0x08002965
 80029b8:	08002965 	.word	0x08002965
 80029bc:	08002b0b 	.word	0x08002b0b
 80029c0:	08002965 	.word	0x08002965
 80029c4:	08002a13 	.word	0x08002a13
 80029c8:	08002965 	.word	0x08002965
 80029cc:	08002965 	.word	0x08002965
 80029d0:	08002aab 	.word	0x08002aab
 80029d4:	6833      	ldr	r3, [r6, #0]
 80029d6:	1d1a      	adds	r2, r3, #4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6032      	str	r2, [r6, #0]
 80029dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029e4:	2301      	movs	r3, #1
 80029e6:	e09d      	b.n	8002b24 <_printf_i+0x1e8>
 80029e8:	6833      	ldr	r3, [r6, #0]
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	1d19      	adds	r1, r3, #4
 80029ee:	6031      	str	r1, [r6, #0]
 80029f0:	0606      	lsls	r6, r0, #24
 80029f2:	d501      	bpl.n	80029f8 <_printf_i+0xbc>
 80029f4:	681d      	ldr	r5, [r3, #0]
 80029f6:	e003      	b.n	8002a00 <_printf_i+0xc4>
 80029f8:	0645      	lsls	r5, r0, #25
 80029fa:	d5fb      	bpl.n	80029f4 <_printf_i+0xb8>
 80029fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a00:	2d00      	cmp	r5, #0
 8002a02:	da03      	bge.n	8002a0c <_printf_i+0xd0>
 8002a04:	232d      	movs	r3, #45	@ 0x2d
 8002a06:	426d      	negs	r5, r5
 8002a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a0c:	4859      	ldr	r0, [pc, #356]	@ (8002b74 <_printf_i+0x238>)
 8002a0e:	230a      	movs	r3, #10
 8002a10:	e011      	b.n	8002a36 <_printf_i+0xfa>
 8002a12:	6821      	ldr	r1, [r4, #0]
 8002a14:	6833      	ldr	r3, [r6, #0]
 8002a16:	0608      	lsls	r0, r1, #24
 8002a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a1c:	d402      	bmi.n	8002a24 <_printf_i+0xe8>
 8002a1e:	0649      	lsls	r1, r1, #25
 8002a20:	bf48      	it	mi
 8002a22:	b2ad      	uxthmi	r5, r5
 8002a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a26:	4853      	ldr	r0, [pc, #332]	@ (8002b74 <_printf_i+0x238>)
 8002a28:	6033      	str	r3, [r6, #0]
 8002a2a:	bf14      	ite	ne
 8002a2c:	230a      	movne	r3, #10
 8002a2e:	2308      	moveq	r3, #8
 8002a30:	2100      	movs	r1, #0
 8002a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a36:	6866      	ldr	r6, [r4, #4]
 8002a38:	60a6      	str	r6, [r4, #8]
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	bfa2      	ittt	ge
 8002a3e:	6821      	ldrge	r1, [r4, #0]
 8002a40:	f021 0104 	bicge.w	r1, r1, #4
 8002a44:	6021      	strge	r1, [r4, #0]
 8002a46:	b90d      	cbnz	r5, 8002a4c <_printf_i+0x110>
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	d04b      	beq.n	8002ae4 <_printf_i+0x1a8>
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a52:	fb03 5711 	mls	r7, r3, r1, r5
 8002a56:	5dc7      	ldrb	r7, [r0, r7]
 8002a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a5c:	462f      	mov	r7, r5
 8002a5e:	42bb      	cmp	r3, r7
 8002a60:	460d      	mov	r5, r1
 8002a62:	d9f4      	bls.n	8002a4e <_printf_i+0x112>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d10b      	bne.n	8002a80 <_printf_i+0x144>
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	07df      	lsls	r7, r3, #31
 8002a6c:	d508      	bpl.n	8002a80 <_printf_i+0x144>
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	6861      	ldr	r1, [r4, #4]
 8002a72:	4299      	cmp	r1, r3
 8002a74:	bfde      	ittt	le
 8002a76:	2330      	movle	r3, #48	@ 0x30
 8002a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002a80:	1b92      	subs	r2, r2, r6
 8002a82:	6122      	str	r2, [r4, #16]
 8002a84:	f8cd a000 	str.w	sl, [sp]
 8002a88:	464b      	mov	r3, r9
 8002a8a:	aa03      	add	r2, sp, #12
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4640      	mov	r0, r8
 8002a90:	f7ff fee6 	bl	8002860 <_printf_common>
 8002a94:	3001      	adds	r0, #1
 8002a96:	d14a      	bne.n	8002b2e <_printf_i+0x1f2>
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a9c:	b004      	add	sp, #16
 8002a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	4833      	ldr	r0, [pc, #204]	@ (8002b78 <_printf_i+0x23c>)
 8002aac:	2778      	movs	r7, #120	@ 0x78
 8002aae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	6831      	ldr	r1, [r6, #0]
 8002ab6:	061f      	lsls	r7, r3, #24
 8002ab8:	f851 5b04 	ldr.w	r5, [r1], #4
 8002abc:	d402      	bmi.n	8002ac4 <_printf_i+0x188>
 8002abe:	065f      	lsls	r7, r3, #25
 8002ac0:	bf48      	it	mi
 8002ac2:	b2ad      	uxthmi	r5, r5
 8002ac4:	6031      	str	r1, [r6, #0]
 8002ac6:	07d9      	lsls	r1, r3, #31
 8002ac8:	bf44      	itt	mi
 8002aca:	f043 0320 	orrmi.w	r3, r3, #32
 8002ace:	6023      	strmi	r3, [r4, #0]
 8002ad0:	b11d      	cbz	r5, 8002ada <_printf_i+0x19e>
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	e7ac      	b.n	8002a30 <_printf_i+0xf4>
 8002ad6:	4827      	ldr	r0, [pc, #156]	@ (8002b74 <_printf_i+0x238>)
 8002ad8:	e7e9      	b.n	8002aae <_printf_i+0x172>
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f023 0320 	bic.w	r3, r3, #32
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	e7f6      	b.n	8002ad2 <_printf_i+0x196>
 8002ae4:	4616      	mov	r6, r2
 8002ae6:	e7bd      	b.n	8002a64 <_printf_i+0x128>
 8002ae8:	6833      	ldr	r3, [r6, #0]
 8002aea:	6825      	ldr	r5, [r4, #0]
 8002aec:	6961      	ldr	r1, [r4, #20]
 8002aee:	1d18      	adds	r0, r3, #4
 8002af0:	6030      	str	r0, [r6, #0]
 8002af2:	062e      	lsls	r6, r5, #24
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	d501      	bpl.n	8002afc <_printf_i+0x1c0>
 8002af8:	6019      	str	r1, [r3, #0]
 8002afa:	e002      	b.n	8002b02 <_printf_i+0x1c6>
 8002afc:	0668      	lsls	r0, r5, #25
 8002afe:	d5fb      	bpl.n	8002af8 <_printf_i+0x1bc>
 8002b00:	8019      	strh	r1, [r3, #0]
 8002b02:	2300      	movs	r3, #0
 8002b04:	6123      	str	r3, [r4, #16]
 8002b06:	4616      	mov	r6, r2
 8002b08:	e7bc      	b.n	8002a84 <_printf_i+0x148>
 8002b0a:	6833      	ldr	r3, [r6, #0]
 8002b0c:	1d1a      	adds	r2, r3, #4
 8002b0e:	6032      	str	r2, [r6, #0]
 8002b10:	681e      	ldr	r6, [r3, #0]
 8002b12:	6862      	ldr	r2, [r4, #4]
 8002b14:	2100      	movs	r1, #0
 8002b16:	4630      	mov	r0, r6
 8002b18:	f7fd fb62 	bl	80001e0 <memchr>
 8002b1c:	b108      	cbz	r0, 8002b22 <_printf_i+0x1e6>
 8002b1e:	1b80      	subs	r0, r0, r6
 8002b20:	6060      	str	r0, [r4, #4]
 8002b22:	6863      	ldr	r3, [r4, #4]
 8002b24:	6123      	str	r3, [r4, #16]
 8002b26:	2300      	movs	r3, #0
 8002b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b2c:	e7aa      	b.n	8002a84 <_printf_i+0x148>
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	4632      	mov	r2, r6
 8002b32:	4649      	mov	r1, r9
 8002b34:	4640      	mov	r0, r8
 8002b36:	47d0      	blx	sl
 8002b38:	3001      	adds	r0, #1
 8002b3a:	d0ad      	beq.n	8002a98 <_printf_i+0x15c>
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	079b      	lsls	r3, r3, #30
 8002b40:	d413      	bmi.n	8002b6a <_printf_i+0x22e>
 8002b42:	68e0      	ldr	r0, [r4, #12]
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	4298      	cmp	r0, r3
 8002b48:	bfb8      	it	lt
 8002b4a:	4618      	movlt	r0, r3
 8002b4c:	e7a6      	b.n	8002a9c <_printf_i+0x160>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4632      	mov	r2, r6
 8002b52:	4649      	mov	r1, r9
 8002b54:	4640      	mov	r0, r8
 8002b56:	47d0      	blx	sl
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d09d      	beq.n	8002a98 <_printf_i+0x15c>
 8002b5c:	3501      	adds	r5, #1
 8002b5e:	68e3      	ldr	r3, [r4, #12]
 8002b60:	9903      	ldr	r1, [sp, #12]
 8002b62:	1a5b      	subs	r3, r3, r1
 8002b64:	42ab      	cmp	r3, r5
 8002b66:	dcf2      	bgt.n	8002b4e <_printf_i+0x212>
 8002b68:	e7eb      	b.n	8002b42 <_printf_i+0x206>
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	f104 0619 	add.w	r6, r4, #25
 8002b70:	e7f5      	b.n	8002b5e <_printf_i+0x222>
 8002b72:	bf00      	nop
 8002b74:	08002f65 	.word	0x08002f65
 8002b78:	08002f76 	.word	0x08002f76

08002b7c <__sflush_r>:
 8002b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b84:	0716      	lsls	r6, r2, #28
 8002b86:	4605      	mov	r5, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	d454      	bmi.n	8002c36 <__sflush_r+0xba>
 8002b8c:	684b      	ldr	r3, [r1, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dc02      	bgt.n	8002b98 <__sflush_r+0x1c>
 8002b92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	dd48      	ble.n	8002c2a <__sflush_r+0xae>
 8002b98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b9a:	2e00      	cmp	r6, #0
 8002b9c:	d045      	beq.n	8002c2a <__sflush_r+0xae>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ba4:	682f      	ldr	r7, [r5, #0]
 8002ba6:	6a21      	ldr	r1, [r4, #32]
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	d030      	beq.n	8002c0e <__sflush_r+0x92>
 8002bac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	0759      	lsls	r1, r3, #29
 8002bb2:	d505      	bpl.n	8002bc0 <__sflush_r+0x44>
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bba:	b10b      	cbz	r3, 8002bc0 <__sflush_r+0x44>
 8002bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bc4:	6a21      	ldr	r1, [r4, #32]
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	47b0      	blx	r6
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	d106      	bne.n	8002bde <__sflush_r+0x62>
 8002bd0:	6829      	ldr	r1, [r5, #0]
 8002bd2:	291d      	cmp	r1, #29
 8002bd4:	d82b      	bhi.n	8002c2e <__sflush_r+0xb2>
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <__sflush_r+0x104>)
 8002bd8:	410a      	asrs	r2, r1
 8002bda:	07d6      	lsls	r6, r2, #31
 8002bdc:	d427      	bmi.n	8002c2e <__sflush_r+0xb2>
 8002bde:	2200      	movs	r2, #0
 8002be0:	6062      	str	r2, [r4, #4]
 8002be2:	04d9      	lsls	r1, r3, #19
 8002be4:	6922      	ldr	r2, [r4, #16]
 8002be6:	6022      	str	r2, [r4, #0]
 8002be8:	d504      	bpl.n	8002bf4 <__sflush_r+0x78>
 8002bea:	1c42      	adds	r2, r0, #1
 8002bec:	d101      	bne.n	8002bf2 <__sflush_r+0x76>
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	b903      	cbnz	r3, 8002bf4 <__sflush_r+0x78>
 8002bf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8002bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002bf6:	602f      	str	r7, [r5, #0]
 8002bf8:	b1b9      	cbz	r1, 8002c2a <__sflush_r+0xae>
 8002bfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bfe:	4299      	cmp	r1, r3
 8002c00:	d002      	beq.n	8002c08 <__sflush_r+0x8c>
 8002c02:	4628      	mov	r0, r5
 8002c04:	f7ff fbf2 	bl	80023ec <_free_r>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c0c:	e00d      	b.n	8002c2a <__sflush_r+0xae>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4628      	mov	r0, r5
 8002c12:	47b0      	blx	r6
 8002c14:	4602      	mov	r2, r0
 8002c16:	1c50      	adds	r0, r2, #1
 8002c18:	d1c9      	bne.n	8002bae <__sflush_r+0x32>
 8002c1a:	682b      	ldr	r3, [r5, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0c6      	beq.n	8002bae <__sflush_r+0x32>
 8002c20:	2b1d      	cmp	r3, #29
 8002c22:	d001      	beq.n	8002c28 <__sflush_r+0xac>
 8002c24:	2b16      	cmp	r3, #22
 8002c26:	d11e      	bne.n	8002c66 <__sflush_r+0xea>
 8002c28:	602f      	str	r7, [r5, #0]
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e022      	b.n	8002c74 <__sflush_r+0xf8>
 8002c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	e01b      	b.n	8002c6e <__sflush_r+0xf2>
 8002c36:	690f      	ldr	r7, [r1, #16]
 8002c38:	2f00      	cmp	r7, #0
 8002c3a:	d0f6      	beq.n	8002c2a <__sflush_r+0xae>
 8002c3c:	0793      	lsls	r3, r2, #30
 8002c3e:	680e      	ldr	r6, [r1, #0]
 8002c40:	bf08      	it	eq
 8002c42:	694b      	ldreq	r3, [r1, #20]
 8002c44:	600f      	str	r7, [r1, #0]
 8002c46:	bf18      	it	ne
 8002c48:	2300      	movne	r3, #0
 8002c4a:	eba6 0807 	sub.w	r8, r6, r7
 8002c4e:	608b      	str	r3, [r1, #8]
 8002c50:	f1b8 0f00 	cmp.w	r8, #0
 8002c54:	dde9      	ble.n	8002c2a <__sflush_r+0xae>
 8002c56:	6a21      	ldr	r1, [r4, #32]
 8002c58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002c5a:	4643      	mov	r3, r8
 8002c5c:	463a      	mov	r2, r7
 8002c5e:	4628      	mov	r0, r5
 8002c60:	47b0      	blx	r6
 8002c62:	2800      	cmp	r0, #0
 8002c64:	dc08      	bgt.n	8002c78 <__sflush_r+0xfc>
 8002c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c78:	4407      	add	r7, r0
 8002c7a:	eba8 0800 	sub.w	r8, r8, r0
 8002c7e:	e7e7      	b.n	8002c50 <__sflush_r+0xd4>
 8002c80:	dfbffffe 	.word	0xdfbffffe

08002c84 <_fflush_r>:
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	690b      	ldr	r3, [r1, #16]
 8002c88:	4605      	mov	r5, r0
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	b913      	cbnz	r3, 8002c94 <_fflush_r+0x10>
 8002c8e:	2500      	movs	r5, #0
 8002c90:	4628      	mov	r0, r5
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	b118      	cbz	r0, 8002c9e <_fflush_r+0x1a>
 8002c96:	6a03      	ldr	r3, [r0, #32]
 8002c98:	b90b      	cbnz	r3, 8002c9e <_fflush_r+0x1a>
 8002c9a:	f7ff f9ad 	bl	8001ff8 <__sinit>
 8002c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f3      	beq.n	8002c8e <_fflush_r+0xa>
 8002ca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ca8:	07d0      	lsls	r0, r2, #31
 8002caa:	d404      	bmi.n	8002cb6 <_fflush_r+0x32>
 8002cac:	0599      	lsls	r1, r3, #22
 8002cae:	d402      	bmi.n	8002cb6 <_fflush_r+0x32>
 8002cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cb2:	f7ff fb98 	bl	80023e6 <__retarget_lock_acquire_recursive>
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	4621      	mov	r1, r4
 8002cba:	f7ff ff5f 	bl	8002b7c <__sflush_r>
 8002cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cc0:	07da      	lsls	r2, r3, #31
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	d4e4      	bmi.n	8002c90 <_fflush_r+0xc>
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	059b      	lsls	r3, r3, #22
 8002cca:	d4e1      	bmi.n	8002c90 <_fflush_r+0xc>
 8002ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cce:	f7ff fb8b 	bl	80023e8 <__retarget_lock_release_recursive>
 8002cd2:	e7dd      	b.n	8002c90 <_fflush_r+0xc>

08002cd4 <__swhatbuf_r>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cdc:	2900      	cmp	r1, #0
 8002cde:	b096      	sub	sp, #88	@ 0x58
 8002ce0:	4615      	mov	r5, r2
 8002ce2:	461e      	mov	r6, r3
 8002ce4:	da0d      	bge.n	8002d02 <__swhatbuf_r+0x2e>
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2340      	movne	r3, #64	@ 0x40
 8002cf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	6031      	str	r1, [r6, #0]
 8002cfc:	602b      	str	r3, [r5, #0]
 8002cfe:	b016      	add	sp, #88	@ 0x58
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
 8002d02:	466a      	mov	r2, sp
 8002d04:	f000 f848 	bl	8002d98 <_fstat_r>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	dbec      	blt.n	8002ce6 <__swhatbuf_r+0x12>
 8002d0c:	9901      	ldr	r1, [sp, #4]
 8002d0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d16:	4259      	negs	r1, r3
 8002d18:	4159      	adcs	r1, r3
 8002d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d1e:	e7eb      	b.n	8002cf8 <__swhatbuf_r+0x24>

08002d20 <__smakebuf_r>:
 8002d20:	898b      	ldrh	r3, [r1, #12]
 8002d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d24:	079d      	lsls	r5, r3, #30
 8002d26:	4606      	mov	r6, r0
 8002d28:	460c      	mov	r4, r1
 8002d2a:	d507      	bpl.n	8002d3c <__smakebuf_r+0x1c>
 8002d2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d30:	6023      	str	r3, [r4, #0]
 8002d32:	6123      	str	r3, [r4, #16]
 8002d34:	2301      	movs	r3, #1
 8002d36:	6163      	str	r3, [r4, #20]
 8002d38:	b003      	add	sp, #12
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d3c:	ab01      	add	r3, sp, #4
 8002d3e:	466a      	mov	r2, sp
 8002d40:	f7ff ffc8 	bl	8002cd4 <__swhatbuf_r>
 8002d44:	9f00      	ldr	r7, [sp, #0]
 8002d46:	4605      	mov	r5, r0
 8002d48:	4639      	mov	r1, r7
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f7ff fbba 	bl	80024c4 <_malloc_r>
 8002d50:	b948      	cbnz	r0, 8002d66 <__smakebuf_r+0x46>
 8002d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d56:	059a      	lsls	r2, r3, #22
 8002d58:	d4ee      	bmi.n	8002d38 <__smakebuf_r+0x18>
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	e7e2      	b.n	8002d2c <__smakebuf_r+0xc>
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	6020      	str	r0, [r4, #0]
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	9b01      	ldr	r3, [sp, #4]
 8002d72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002d76:	b15b      	cbz	r3, 8002d90 <__smakebuf_r+0x70>
 8002d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f000 f81d 	bl	8002dbc <_isatty_r>
 8002d82:	b128      	cbz	r0, 8002d90 <__smakebuf_r+0x70>
 8002d84:	89a3      	ldrh	r3, [r4, #12]
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	81a3      	strh	r3, [r4, #12]
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	431d      	orrs	r5, r3
 8002d94:	81a5      	strh	r5, [r4, #12]
 8002d96:	e7cf      	b.n	8002d38 <__smakebuf_r+0x18>

08002d98 <_fstat_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4d07      	ldr	r5, [pc, #28]	@ (8002db8 <_fstat_r+0x20>)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	f7fd fe4e 	bl	8000a46 <_fstat>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d102      	bne.n	8002db4 <_fstat_r+0x1c>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	b103      	cbz	r3, 8002db4 <_fstat_r+0x1c>
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
 8002db6:	bf00      	nop
 8002db8:	2000026c 	.word	0x2000026c

08002dbc <_isatty_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4d06      	ldr	r5, [pc, #24]	@ (8002dd8 <_isatty_r+0x1c>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f7fd fe42 	bl	8000a50 <_isatty>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d102      	bne.n	8002dd6 <_isatty_r+0x1a>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	b103      	cbz	r3, 8002dd6 <_isatty_r+0x1a>
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	2000026c 	.word	0x2000026c

08002ddc <_sbrk_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	4d06      	ldr	r5, [pc, #24]	@ (8002df8 <_sbrk_r+0x1c>)
 8002de0:	2300      	movs	r3, #0
 8002de2:	4604      	mov	r4, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	f7fd fe36 	bl	8000a58 <_sbrk>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d102      	bne.n	8002df6 <_sbrk_r+0x1a>
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	b103      	cbz	r3, 8002df6 <_sbrk_r+0x1a>
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	bd38      	pop	{r3, r4, r5, pc}
 8002df8:	2000026c 	.word	0x2000026c

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
