
stm32world_music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080049d8  080049d8  000059d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a7c  08004a7c  00005a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a84  08004a84  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a88  08004a88  00005a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a8c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          000007c8  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000830  20000830  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000163a4  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e48  00000000  00000000  0001c43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000a75d  00000000  00000000  0001f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f60  00000000  00000000  000299e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bc3  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000213b2  00000000  00000000  0002b50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017128  00000000  00000000  0004c8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c33a2  00000000  00000000  000639e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00126d87  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003210  00000000  00000000  00126dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  00129fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049c0 	.word	0x080049c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080049c0 	.word	0x080049c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005a0:	2400      	movs	r4, #0
 80005a2:	9405      	str	r4, [sp, #20]
 80005a4:	9406      	str	r4, [sp, #24]
 80005a6:	9407      	str	r4, [sp, #28]
 80005a8:	9408      	str	r4, [sp, #32]
 80005aa:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	9400      	str	r4, [sp, #0]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <MX_GPIO_Init+0xc4>)
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f042 0204 	orr.w	r2, r2, #4
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ba:	f002 0204 	and.w	r2, r2, #4
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	9401      	str	r4, [sp, #4]
 80005c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80005cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ce:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005d2:	9201      	str	r2, [sp, #4]
 80005d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	9402      	str	r4, [sp, #8]
 80005d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005da:	f042 0202 	orr.w	r2, r2, #2
 80005de:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e2:	f002 0202 	and.w	r2, r2, #2
 80005e6:	9202      	str	r2, [sp, #8]
 80005e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	9403      	str	r4, [sp, #12]
 80005ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ee:	f042 0201 	orr.w	r2, r2, #1
 80005f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f6:	f002 0201 	and.w	r2, r2, #1
 80005fa:	9203      	str	r2, [sp, #12]
 80005fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	9404      	str	r4, [sp, #16]
 8000600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000602:	f042 0208 	orr.w	r2, r2, #8
 8000606:	631a      	str	r2, [r3, #48]	@ 0x30
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	9304      	str	r3, [sp, #16]
 8000610:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000612:	4d14      	ldr	r5, [pc, #80]	@ (8000664 <MX_GPIO_Init+0xc8>)
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061a:	4628      	mov	r0, r5
 800061c:	f000 ff1e 	bl	800145c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000624:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000626:	2311      	movs	r3, #17
 8000628:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800062e:	a905      	add	r1, sp, #20
 8000630:	4628      	mov	r0, r5
 8000632:	f000 fe1d 	bl	8001270 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 8000636:	2301      	movs	r3, #1
 8000638:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800063e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000642:	a905      	add	r1, sp, #20
 8000644:	4628      	mov	r0, r5
 8000646:	f000 fe13 	bl	8001270 <HAL_GPIO_Init>

    /*Configure GPIO pin : SD_DET_Pin */
    GPIO_InitStruct.Pin = SD_DET_Pin;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000654:	a905      	add	r1, sp, #20
 8000656:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_GPIO_Init+0xcc>)
 8000658:	f000 fe0a 	bl	8001270 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	b00b      	add	sp, #44	@ 0x2c
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40020800 	.word	0x40020800
 8000668:	40020000 	.word	0x40020000

0800066c <MX_DMA_Init>:
{
 800066c:	b500      	push	{lr}
 800066e:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000670:	2100      	movs	r1, #0
 8000672:	9101      	str	r1, [sp, #4]
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_DMA_Init+0x30>)
 8000676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000678:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800067c:	631a      	str	r2, [r3, #48]	@ 0x30
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000688:	460a      	mov	r2, r1
 800068a:	200f      	movs	r0, #15
 800068c:	f000 fbfa 	bl	8000e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000690:	200f      	movs	r0, #15
 8000692:	f000 fc07 	bl	8000ea4 <HAL_NVIC_EnableIRQ>
}
 8000696:	b003      	add	sp, #12
 8000698:	f85d fb04 	ldr.w	pc, [sp], #4
 800069c:	40023800 	.word	0x40023800

080006a0 <_write>:
    if (fd == 1 || fd == 2) {
 80006a0:	3801      	subs	r0, #1
 80006a2:	2801      	cmp	r0, #1
 80006a4:	d80a      	bhi.n	80006bc <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80006a6:	b510      	push	{r4, lr}
 80006a8:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ae:	b292      	uxth	r2, r2
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <_write+0x28>)
 80006b2:	f002 fca4 	bl	8002ffe <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80006b6:	b920      	cbnz	r0, 80006c2 <_write+0x22>
            return len;
 80006b8:	4620      	mov	r0, r4
}
 80006ba:	bd10      	pop	{r4, pc}
    return -1;
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80006c0:	4770      	bx	lr
            return -1;
 80006c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006c6:	e7f8      	b.n	80006ba <_write+0x1a>
 80006c8:	20000568 	.word	0x20000568

080006cc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80006ce:	e7fe      	b.n	80006ce <Error_Handler+0x2>

080006d0 <MX_USART1_UART_Init>:
{
 80006d0:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_USART1_UART_Init+0x28>)
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_USART1_UART_Init+0x2c>)
 80006d6:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 2000000;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_USART1_UART_Init+0x30>)
 80006da:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006dc:	2300      	movs	r3, #0
 80006de:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	220c      	movs	r2, #12
 80006e6:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e8:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ea:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ec:	f002 fc57 	bl	8002f9e <HAL_UART_Init>
 80006f0:	b900      	cbnz	r0, 80006f4 <MX_USART1_UART_Init+0x24>
}
 80006f2:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006f4:	f7ff ffea 	bl	80006cc <Error_Handler>
 80006f8:	20000568 	.word	0x20000568
 80006fc:	40011000 	.word	0x40011000
 8000700:	001e8480 	.word	0x001e8480

08000704 <MX_USB_OTG_FS_PCD_Init>:
{
 8000704:	b508      	push	{r3, lr}
    hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <MX_USB_OTG_FS_PCD_Init+0x30>)
 8000708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800070c:	6003      	str	r3, [r0, #0]
    hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	7103      	strb	r3, [r0, #4]
    hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000712:	2202      	movs	r2, #2
 8000714:	71c2      	strb	r2, [r0, #7]
    hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	7183      	strb	r3, [r0, #6]
    hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800071a:	7242      	strb	r2, [r0, #9]
    hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800071c:	7283      	strb	r3, [r0, #10]
    hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800071e:	72c3      	strb	r3, [r0, #11]
    hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000720:	7303      	strb	r3, [r0, #12]
    hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000722:	7383      	strb	r3, [r0, #14]
    hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000724:	73c3      	strb	r3, [r0, #15]
    if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000726:	f001 f9a7 	bl	8001a78 <HAL_PCD_Init>
 800072a:	b900      	cbnz	r0, 800072e <MX_USB_OTG_FS_PCD_Init+0x2a>
}
 800072c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800072e:	f7ff ffcd 	bl	80006cc <Error_Handler>
 8000732:	bf00      	nop
 8000734:	20000084 	.word	0x20000084

08000738 <MX_SDIO_SD_Init>:
{
 8000738:	b508      	push	{r3, lr}
    hsd.Instance = SDIO;
 800073a:	4815      	ldr	r0, [pc, #84]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_SDIO_SD_Init+0x5c>)
 800073e:	6003      	str	r3, [r0, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000740:	2300      	movs	r3, #0
 8000742:	6043      	str	r3, [r0, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000744:	6083      	str	r3, [r0, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000746:	60c3      	str	r3, [r0, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074c:	6102      	str	r2, [r0, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800074e:	6143      	str	r3, [r0, #20]
    hsd.Init.ClockDiv = 0;
 8000750:	6183      	str	r3, [r0, #24]
    if (HAL_SD_Init(&hsd) != HAL_OK)
 8000752:	f002 f969 	bl	8002a28 <HAL_SD_Init>
 8000756:	b990      	cbnz	r0, 800077e <MX_SDIO_SD_Init+0x46>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000758:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 800075e:	f002 f97f 	bl	8002a60 <HAL_SD_ConfigWideBusOperation>
 8000762:	b970      	cbnz	r0, 8000782 <MX_SDIO_SD_Init+0x4a>
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000764:	480a      	ldr	r0, [pc, #40]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000766:	2300      	movs	r3, #0
 8000768:	6103      	str	r3, [r0, #16]
    if (HAL_SD_Init(&hsd) != HAL_OK) {
 800076a:	f002 f95d 	bl	8002a28 <HAL_SD_Init>
 800076e:	b950      	cbnz	r0, 8000786 <MX_SDIO_SD_Init+0x4e>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8000770:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000774:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000776:	f002 f973 	bl	8002a60 <HAL_SD_ConfigWideBusOperation>
 800077a:	b930      	cbnz	r0, 800078a <MX_SDIO_SD_Init+0x52>
}
 800077c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800077e:	f7ff ffa5 	bl	80006cc <Error_Handler>
        Error_Handler();
 8000782:	f7ff ffa3 	bl	80006cc <Error_Handler>
        Error_Handler();
 8000786:	f7ff ffa1 	bl	80006cc <Error_Handler>
        Error_Handler();
 800078a:	f7ff ff9f 	bl	80006cc <Error_Handler>
 800078e:	bf00      	nop
 8000790:	200005b0 	.word	0x200005b0
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_I2S2_Init>:
{
 8000798:	b508      	push	{r3, lr}
    hi2s2.Instance = SPI2;
 800079a:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <MX_I2S2_Init+0x30>)
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_I2S2_Init+0x34>)
 800079e:	6003      	str	r3, [r0, #0]
    hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a4:	6043      	str	r3, [r0, #4]
    hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a6:	2300      	movs	r3, #0
 80007a8:	6083      	str	r3, [r0, #8]
    hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007aa:	60c3      	str	r3, [r0, #12]
    hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ac:	6103      	str	r3, [r0, #16]
    hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007ae:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80007b2:	6142      	str	r2, [r0, #20]
    hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007b4:	6183      	str	r3, [r0, #24]
    hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007b6:	61c3      	str	r3, [r0, #28]
    hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b8:	6203      	str	r3, [r0, #32]
    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007ba:	f000 fe5f 	bl	800147c <HAL_I2S_Init>
 80007be:	b900      	cbnz	r0, 80007c2 <MX_I2S2_Init+0x2a>
}
 80007c0:	bd08      	pop	{r3, pc}
        Error_Handler();
 80007c2:	f7ff ff83 	bl	80006cc <Error_Handler>
 80007c6:	bf00      	nop
 80007c8:	20000694 	.word	0x20000694
 80007cc:	40003800 	.word	0x40003800

080007d0 <SystemClock_Config>:
{
 80007d0:	b500      	push	{lr}
 80007d2:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007d4:	2230      	movs	r2, #48	@ 0x30
 80007d6:	2100      	movs	r1, #0
 80007d8:	a808      	add	r0, sp, #32
 80007da:	f003 fb6f 	bl	8003ebc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007de:	2300      	movs	r3, #0
 80007e0:	9303      	str	r3, [sp, #12]
 80007e2:	9304      	str	r3, [sp, #16]
 80007e4:	9305      	str	r3, [sp, #20]
 80007e6:	9306      	str	r3, [sp, #24]
 80007e8:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	4a20      	ldr	r2, [pc, #128]	@ (8000870 <SystemClock_Config+0xa0>)
 80007ee:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007f0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007f4:	6411      	str	r1, [r2, #64]	@ 0x40
 80007f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80007f8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007fc:	9201      	str	r2, [sp, #4]
 80007fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <SystemClock_Config+0xa4>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000816:	2301      	movs	r3, #1
 8000818:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081e:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000824:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000828:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800082a:	2208      	movs	r2, #8
 800082c:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800082e:	22a8      	movs	r2, #168	@ 0xa8
 8000830:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000834:	2307      	movs	r3, #7
 8000836:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	a808      	add	r0, sp, #32
 800083a:	f001 f99f 	bl	8001b7c <HAL_RCC_OscConfig>
 800083e:	b998      	cbnz	r0, 8000868 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000850:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000856:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000858:	2105      	movs	r1, #5
 800085a:	a803      	add	r0, sp, #12
 800085c:	f001 fbf2 	bl	8002044 <HAL_RCC_ClockConfig>
 8000860:	b920      	cbnz	r0, 800086c <SystemClock_Config+0x9c>
}
 8000862:	b015      	add	sp, #84	@ 0x54
 8000864:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000868:	f7ff ff30 	bl	80006cc <Error_Handler>
        Error_Handler();
 800086c:	f7ff ff2e 	bl	80006cc <Error_Handler>
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <main>:
{
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_Init();
 800087a:	f000 fa6f 	bl	8000d5c <HAL_Init>
    SystemClock_Config();
 800087e:	f7ff ffa7 	bl	80007d0 <SystemClock_Config>
    MX_GPIO_Init();
 8000882:	f7ff fe8b 	bl	800059c <MX_GPIO_Init>
    MX_DMA_Init();
 8000886:	f7ff fef1 	bl	800066c <MX_DMA_Init>
    MX_USART1_UART_Init();
 800088a:	f7ff ff21 	bl	80006d0 <MX_USART1_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 800088e:	f7ff ff39 	bl	8000704 <MX_USB_OTG_FS_PCD_Init>
    MX_SDIO_SD_Init();
 8000892:	f7ff ff51 	bl	8000738 <MX_SDIO_SD_Init>
    MX_I2S2_Init();
 8000896:	f7ff ff7f 	bl	8000798 <MX_I2S2_Init>
    printf("\n\n\n---------------------\nStarting music player\n");
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <main+0x6c>)
 800089c:	f003 fa2e 	bl	8003cfc <puts>
    uint32_t now = 0, next_blink = 500, next_tick = 1000, loop_cnt = 0;
 80008a0:	2500      	movs	r5, #0
 80008a2:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80008a6:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 80008aa:	e013      	b.n	80008d4 <main+0x5c>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <main+0x70>)
 80008b2:	f000 fdd9 	bl	8001468 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 80008b6:	f504 77fa 	add.w	r7, r4, #500	@ 0x1f4
 80008ba:	e00f      	b.n	80008dc <main+0x64>
            printf("Tick %lu (loop count = %lu)\n", now / 1000, loop_cnt);
 80008bc:	490b      	ldr	r1, [pc, #44]	@ (80008ec <main+0x74>)
 80008be:	fba1 3104 	umull	r3, r1, r1, r4
 80008c2:	462a      	mov	r2, r5
 80008c4:	0989      	lsrs	r1, r1, #6
 80008c6:	480a      	ldr	r0, [pc, #40]	@ (80008f0 <main+0x78>)
 80008c8:	f003 f9b0 	bl	8003c2c <iprintf>
            next_tick = now + 1000;
 80008cc:	f504 767a 	add.w	r6, r4, #1000	@ 0x3e8
            loop_cnt = 0;
 80008d0:	2500      	movs	r5, #0
        ++loop_cnt;
 80008d2:	3501      	adds	r5, #1
        now = uwTick;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <main+0x7c>)
 80008d6:	681c      	ldr	r4, [r3, #0]
        if (now >= next_blink) {
 80008d8:	42a7      	cmp	r7, r4
 80008da:	d9e7      	bls.n	80008ac <main+0x34>
        if (now >= next_tick) {
 80008dc:	42a6      	cmp	r6, r4
 80008de:	d8f8      	bhi.n	80008d2 <main+0x5a>
 80008e0:	e7ec      	b.n	80008bc <main+0x44>
 80008e2:	bf00      	nop
 80008e4:	080049d8 	.word	0x080049d8
 80008e8:	40020800 	.word	0x40020800
 80008ec:	10624dd3 	.word	0x10624dd3
 80008f0:	08004a08 	.word	0x08004a08
 80008f4:	200006e0 	.word	0x200006e0

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2100      	movs	r1, #0
 80008fc:	9100      	str	r1, [sp, #0]
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_MspInit+0x34>)
 8000900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000906:	645a      	str	r2, [r3, #68]	@ 0x44
 8000908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800090a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	9101      	str	r1, [sp, #4]
 8000914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000916:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800091a:	641a      	str	r2, [r3, #64]	@ 0x40
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	b002      	add	sp, #8
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	2300      	movs	r3, #0
 8000936:	9307      	str	r3, [sp, #28]
 8000938:	9308      	str	r3, [sp, #32]
 800093a:	9309      	str	r3, [sp, #36]	@ 0x24
 800093c:	930a      	str	r3, [sp, #40]	@ 0x28
 800093e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	9303      	str	r3, [sp, #12]
 8000942:	9304      	str	r3, [sp, #16]
 8000944:	9305      	str	r3, [sp, #20]
 8000946:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI2)
 8000948:	6802      	ldr	r2, [r0, #0]
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <HAL_I2S_MspInit+0xe8>)
 800094c:	429a      	cmp	r2, r3
 800094e:	d001      	beq.n	8000954 <HAL_I2S_MspInit+0x24>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000950:	b00d      	add	sp, #52	@ 0x34
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000954:	4604      	mov	r4, r0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000956:	2301      	movs	r3, #1
 8000958:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800095a:	2332      	movs	r3, #50	@ 0x32
 800095c:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	a803      	add	r0, sp, #12
 8000964:	f001 fc44 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	2800      	cmp	r0, #0
 800096a:	d14e      	bne.n	8000a0a <HAL_I2S_MspInit+0xda>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800096c:	2500      	movs	r5, #0
 800096e:	9500      	str	r5, [sp, #0]
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <HAL_I2S_MspInit+0xec>)
 8000972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000978:	641a      	str	r2, [r3, #64]	@ 0x40
 800097a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800097c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000980:	9200      	str	r2, [sp, #0]
 8000982:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	9501      	str	r5, [sp, #4]
 8000986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000988:	f042 0204 	orr.w	r2, r2, #4
 800098c:	631a      	str	r2, [r3, #48]	@ 0x30
 800098e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000990:	f002 0204 	and.w	r2, r2, #4
 8000994:	9201      	str	r2, [sp, #4]
 8000996:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	9502      	str	r5, [sp, #8]
 800099a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800099c:	f042 0202 	orr.w	r2, r2, #2
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80009a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ac:	2308      	movs	r3, #8
 80009ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2702      	movs	r7, #2
 80009b2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b8:	2605      	movs	r6, #5
 80009ba:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	a907      	add	r1, sp, #28
 80009be:	4818      	ldr	r0, [pc, #96]	@ (8000a20 <HAL_I2S_MspInit+0xf0>)
 80009c0:	f000 fc56 	bl	8001270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80009c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009c8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d0:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	a907      	add	r1, sp, #28
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <HAL_I2S_MspInit+0xf4>)
 80009d6:	f000 fc4b 	bl	8001270 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80009da:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <HAL_I2S_MspInit+0xf8>)
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <HAL_I2S_MspInit+0xfc>)
 80009de:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80009e0:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e2:	2340      	movs	r3, #64	@ 0x40
 80009e4:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e6:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ec:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ee:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f0:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80009f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f6:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009f8:	6205      	str	r5, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009fa:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009fc:	f000 fad0 	bl	8000fa0 <HAL_DMA_Init>
 8000a00:	b930      	cbnz	r0, 8000a10 <HAL_I2S_MspInit+0xe0>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_I2S_MspInit+0xf8>)
 8000a04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000a06:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000a08:	e7a2      	b.n	8000950 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000a0a:	f7ff fe5f 	bl	80006cc <Error_Handler>
 8000a0e:	e7ad      	b.n	800096c <HAL_I2S_MspInit+0x3c>
      Error_Handler();
 8000a10:	f7ff fe5c 	bl	80006cc <Error_Handler>
 8000a14:	e7f5      	b.n	8000a02 <HAL_I2S_MspInit+0xd2>
 8000a16:	bf00      	nop
 8000a18:	40003800 	.word	0x40003800
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020400 	.word	0x40020400
 8000a28:	20000634 	.word	0x20000634
 8000a2c:	40026070 	.word	0x40026070

08000a30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a34:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	2300      	movs	r3, #0
 8000a38:	9303      	str	r3, [sp, #12]
 8000a3a:	9304      	str	r3, [sp, #16]
 8000a3c:	9305      	str	r3, [sp, #20]
 8000a3e:	9306      	str	r3, [sp, #24]
 8000a40:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8000a42:	6802      	ldr	r2, [r0, #0]
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <HAL_SD_MspInit+0xcc>)
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d002      	beq.n	8000a50 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000a4a:	b009      	add	sp, #36	@ 0x24
 8000a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a50:	2400      	movs	r4, #0
 8000a52:	9400      	str	r4, [sp, #0]
 8000a54:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8000a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000a5e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a62:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8000a66:	9200      	str	r2, [sp, #0]
 8000a68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	9401      	str	r4, [sp, #4]
 8000a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a6e:	f042 0204 	orr.w	r2, r2, #4
 8000a72:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a76:	f002 0204 	and.w	r2, r2, #4
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	9402      	str	r4, [sp, #8]
 8000a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a82:	f042 0208 	orr.w	r2, r2, #8
 8000a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a92:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2702      	movs	r7, #2
 8000a9a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	f04f 0801 	mov.w	r8, #1
 8000aa0:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2603      	movs	r6, #3
 8000aa6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aa8:	250c      	movs	r5, #12
 8000aaa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8000b04 <HAL_SD_MspInit+0xd4>
 8000ab0:	eb0d 0105 	add.w	r1, sp, r5
 8000ab4:	4648      	mov	r0, r9
 8000ab6:	f000 fbdb 	bl	8001270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ac6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	eb0d 0105 	add.w	r1, sp, r5
 8000acc:	4648      	mov	r0, r9
 8000ace:	f000 fbcf 	bl	8001270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ade:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	eb0d 0105 	add.w	r1, sp, r5
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <HAL_SD_MspInit+0xd0>)
 8000ae6:	f000 fbc3 	bl	8001270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000aea:	4622      	mov	r2, r4
 8000aec:	4621      	mov	r1, r4
 8000aee:	2031      	movs	r0, #49	@ 0x31
 8000af0:	f000 f9c8 	bl	8000e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000af4:	2031      	movs	r0, #49	@ 0x31
 8000af6:	f000 f9d5 	bl	8000ea4 <HAL_NVIC_EnableIRQ>
}
 8000afa:	e7a6      	b.n	8000a4a <HAL_SD_MspInit+0x1a>
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40020800 	.word	0x40020800

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b500      	push	{lr}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	9304      	str	r3, [sp, #16]
 8000b12:	9305      	str	r3, [sp, #20]
 8000b14:	9306      	str	r3, [sp, #24]
 8000b16:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000b18:	6802      	ldr	r2, [r0, #0]
 8000b1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b1e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d002      	beq.n	8000b2c <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b26:	b009      	add	sp, #36	@ 0x24
 8000b28:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	9101      	str	r1, [sp, #4]
 8000b30:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b36:	f042 0210 	orr.w	r2, r2, #16
 8000b3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b3e:	f002 0210 	and.w	r2, r2, #16
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	9102      	str	r1, [sp, #8]
 8000b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b4a:	f042 0201 	orr.w	r2, r2, #1
 8000b4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	9302      	str	r3, [sp, #8]
 8000b58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b5e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	a903      	add	r1, sp, #12
 8000b6e:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <HAL_UART_MspInit+0x70>)
 8000b70:	f000 fb7e 	bl	8001270 <HAL_GPIO_Init>
}
 8000b74:	e7d7      	b.n	8000b26 <HAL_UART_MspInit+0x1e>
 8000b76:	bf00      	nop
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2300      	movs	r3, #0
 8000b82:	9303      	str	r3, [sp, #12]
 8000b84:	9304      	str	r3, [sp, #16]
 8000b86:	9305      	str	r3, [sp, #20]
 8000b88:	9306      	str	r3, [sp, #24]
 8000b8a:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b92:	d001      	beq.n	8000b98 <HAL_PCD_MspInit+0x1c>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000b94:	b009      	add	sp, #36	@ 0x24
 8000b96:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	2500      	movs	r5, #0
 8000b9a:	9501      	str	r5, [sp, #4]
 8000b9c:	4c12      	ldr	r4, [pc, #72]	@ (8000be8 <HAL_PCD_MspInit+0x6c>)
 8000b9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ba6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bb0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	a903      	add	r1, sp, #12
 8000bc4:	4809      	ldr	r0, [pc, #36]	@ (8000bec <HAL_PCD_MspInit+0x70>)
 8000bc6:	f000 fb53 	bl	8001270 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bd2:	9502      	str	r5, [sp, #8]
 8000bd4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bda:	6463      	str	r3, [r4, #68]	@ 0x44
 8000bdc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	9b02      	ldr	r3, [sp, #8]
}
 8000be6:	e7d5      	b.n	8000b94 <HAL_PCD_MspInit+0x18>
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler>

08000bf2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler>

08000bf4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler>

08000bf6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler>

08000bf8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler>

08000bfa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c02:	f000 f8c5 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c06:	bd08      	pop	{r3, pc}

08000c08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c0a:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <DMA1_Stream4_IRQHandler+0xc>)
 8000c0c:	f000 fa42 	bl	8001094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c10:	bd08      	pop	{r3, pc}
 8000c12:	bf00      	nop
 8000c14:	20000634 	.word	0x20000634

08000c18 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c1a:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <SDIO_IRQHandler+0xc>)
 8000c1c:	f001 ffd6 	bl	8002bcc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c20:	bd08      	pop	{r3, pc}
 8000c22:	bf00      	nop
 8000c24:	200005b0 	.word	0x200005b0

08000c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	2500      	movs	r5, #0
 8000c30:	e006      	b.n	8000c40 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4621      	mov	r1, r4
 8000c38:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000c3e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	42b5      	cmp	r5, r6
 8000c42:	dbf6      	blt.n	8000c32 <_read+0xa>
  }

  return len;
}
 8000c44:	4630      	mov	r0, r6
 8000c46:	bd70      	pop	{r4, r5, r6, pc}

08000c48 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c4c:	4770      	bx	lr

08000c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000c54:	2000      	movs	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4770      	bx	lr

08000c5c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	4770      	bx	lr

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b510      	push	{r4, lr}
 8000c62:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a0c      	ldr	r2, [pc, #48]	@ (8000c98 <_sbrk+0x38>)
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <_sbrk+0x40>)
 8000c6a:	6800      	ldr	r0, [r0, #0]
 8000c6c:	b140      	cbz	r0, 8000c80 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <_sbrk+0x40>)
 8000c70:	6800      	ldr	r0, [r0, #0]
 8000c72:	4403      	add	r3, r0
 8000c74:	1a52      	subs	r2, r2, r1
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d806      	bhi.n	8000c88 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <_sbrk+0x40>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c7e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c80:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <_sbrk+0x40>)
 8000c82:	4c08      	ldr	r4, [pc, #32]	@ (8000ca4 <_sbrk+0x44>)
 8000c84:	6004      	str	r4, [r0, #0]
 8000c86:	e7f2      	b.n	8000c6e <_sbrk+0xe>
    errno = ENOMEM;
 8000c88:	f003 f966 	bl	8003f58 <__errno>
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c94:	e7f3      	b.n	8000c7e <_sbrk+0x1e>
 8000c96:	bf00      	nop
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200006dc 	.word	0x200006dc
 8000ca4:	20000830 	.word	0x20000830

08000ca8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4a03      	ldr	r2, [pc, #12]	@ (8000cb8 <SystemInit+0x10>)
 8000caa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000cae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc0:	f7ff fff2 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 f93b 	bl	8003f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fdc3 	bl	8000878 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d00:	08004a8c 	.word	0x08004a8c
  ldr r2, =_sbss
 8000d04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d08:	20000830 	.word	0x20000830

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b510      	push	{r4, lr}
 8000d12:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_InitTick+0x40>)
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d20:	4a0c      	ldr	r2, [pc, #48]	@ (8000d54 <HAL_InitTick+0x44>)
 8000d22:	6810      	ldr	r0, [r2, #0]
 8000d24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d28:	f000 f8c0 	bl	8000eac <HAL_SYSTICK_Config>
 8000d2c:	b968      	cbnz	r0, 8000d4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	2c0f      	cmp	r4, #15
 8000d30:	d901      	bls.n	8000d36 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
 8000d34:	e00a      	b.n	8000d4c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d36:	2200      	movs	r2, #0
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d3e:	f000 f8a1 	bl	8000e84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_InitTick+0x48>)
 8000d44:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2000      	movs	r0, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d4a:	2001      	movs	r0, #1
}
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_Init>:
{
 8000d5c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_Init+0x30>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d76:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f871 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f7ff ffc6 	bl	8000d10 <HAL_InitTick>
  HAL_MspInit();
 8000d84:	f7ff fdb8 	bl	80008f8 <HAL_MspInit>
}
 8000d88:	2000      	movs	r0, #0
 8000d8a:	bd08      	pop	{r3, pc}
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d90:	4a03      	ldr	r2, [pc, #12]	@ (8000da0 <HAL_IncTick+0x10>)
 8000d92:	6811      	ldr	r1, [r2, #0]
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_IncTick+0x14>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	440b      	add	r3, r1
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200006e0 	.word	0x200006e0
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000da8:	4b01      	ldr	r3, [pc, #4]	@ (8000db0 <HAL_GetTick+0x8>)
 8000daa:	6818      	ldr	r0, [r3, #0]
}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200006e0 	.word	0x200006e0

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff fff6 	bl	8000da8 <HAL_GetTick>
 8000dbc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000dc2:	d002      	beq.n	8000dca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HAL_Delay+0x24>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	f7ff ffed 	bl	8000da8 <HAL_GetTick>
 8000dce:	1b40      	subs	r0, r0, r5
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	d3fa      	bcc.n	8000dca <HAL_Delay+0x16>
  {
  }
}
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000004 	.word	0x20000004

08000ddc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	db07      	blt.n	8000df0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de0:	f000 021f 	and.w	r2, r0, #31
 8000de4:	0940      	lsrs	r0, r0, #5
 8000de6:	2301      	movs	r3, #1
 8000de8:	4093      	lsls	r3, r2
 8000dea:	4a02      	ldr	r2, [pc, #8]	@ (8000df4 <__NVIC_EnableIRQ+0x18>)
 8000dec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	db08      	blt.n	8000e0e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	0109      	lsls	r1, r1, #4
 8000dfe:	b2c9      	uxtb	r1, r1
 8000e00:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000e04:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000e08:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000e0c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	f000 000f 	and.w	r0, r0, #15
 8000e12:	0109      	lsls	r1, r1, #4
 8000e14:	b2c9      	uxtb	r1, r1
 8000e16:	4b01      	ldr	r3, [pc, #4]	@ (8000e1c <__NVIC_SetPriority+0x24>)
 8000e18:	5419      	strb	r1, [r3, r0]
  }
}
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed14 	.word	0xe000ed14

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e22:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e26:	f1c0 0c07 	rsb	ip, r0, #7
 8000e2a:	f1bc 0f04 	cmp.w	ip, #4
 8000e2e:	bf28      	it	cs
 8000e30:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e34:	1d03      	adds	r3, r0, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d90f      	bls.n	8000e5a <NVIC_EncodePriority+0x3a>
 8000e3a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000e40:	fa0e f00c 	lsl.w	r0, lr, ip
 8000e44:	ea21 0100 	bic.w	r1, r1, r0
 8000e48:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e4e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000e52:	ea41 0002 	orr.w	r0, r1, r2
 8000e56:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e7ee      	b.n	8000e3c <NVIC_EncodePriority+0x1c>
	...

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	0200      	lsls	r0, r0, #8
 8000e6e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e72:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e7c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e84:	b510      	push	{r4, lr}
 8000e86:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_NVIC_SetPriority+0x1c>)
 8000e8a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e90:	f7ff ffc6 	bl	8000e20 <NVIC_EncodePriority>
 8000e94:	4601      	mov	r1, r0
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ffae 	bl	8000df8 <__NVIC_SetPriority>
}
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea6:	f7ff ff99 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000eaa:	bd08      	pop	{r3, pc}

08000eac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	3801      	subs	r0, #1
 8000eae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000eb2:	d20b      	bcs.n	8000ecc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000eb8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <HAL_SYSTICK_Config+0x24>)
 8000ebc:	21f0      	movs	r1, #240	@ 0xf0
 8000ebe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ecc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ed6:	6803      	ldr	r3, [r0, #0]
 8000ed8:	b2d9      	uxtb	r1, r3
 8000eda:	3910      	subs	r1, #16
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <DMA_CalcBaseAndBitshift+0x34>)
 8000ede:	fba2 4201 	umull	r4, r2, r2, r1
 8000ee2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ee4:	4c09      	ldr	r4, [pc, #36]	@ (8000f0c <DMA_CalcBaseAndBitshift+0x38>)
 8000ee6:	5ca2      	ldrb	r2, [r4, r2]
 8000ee8:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000eea:	295f      	cmp	r1, #95	@ 0x5f
 8000eec:	d907      	bls.n	8000efe <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000eee:	f36f 0309 	bfc	r3, #0, #10
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000ef6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000efc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000efe:	f36f 0309 	bfc	r3, #0, #10
 8000f02:	6583      	str	r3, [r0, #88]	@ 0x58
 8000f04:	e7f7      	b.n	8000ef6 <DMA_CalcBaseAndBitshift+0x22>
 8000f06:	bf00      	nop
 8000f08:	aaaaaaab 	.word	0xaaaaaaab
 8000f0c:	08004a40 	.word	0x08004a40

08000f10 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f10:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f12:	6982      	ldr	r2, [r0, #24]
 8000f14:	b992      	cbnz	r2, 8000f3c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d00a      	beq.n	8000f30 <DMA_CheckFifoParam+0x20>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d002      	beq.n	8000f24 <DMA_CheckFifoParam+0x14>
 8000f1e:	b10b      	cbz	r3, 8000f24 <DMA_CheckFifoParam+0x14>
 8000f20:	2000      	movs	r0, #0
 8000f22:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f24:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f26:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f2a:	d128      	bne.n	8000f7e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f30:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f36:	d024      	beq.n	8000f82 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f3c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000f40:	d009      	beq.n	8000f56 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d925      	bls.n	8000f92 <DMA_CheckFifoParam+0x82>
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d125      	bne.n	8000f96 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f4a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f4c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f50:	d123      	bne.n	8000f9a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2000      	movs	r0, #0
 8000f54:	4770      	bx	lr
    switch (tmp)
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d803      	bhi.n	8000f62 <DMA_CheckFifoParam+0x52>
 8000f5a:	e8df f003 	tbb	[pc, r3]
 8000f5e:	0414      	.short	0x0414
 8000f60:	0a14      	.short	0x0a14
 8000f62:	2000      	movs	r0, #0
 8000f64:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f68:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f6c:	d10d      	bne.n	8000f8a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2000      	movs	r0, #0
 8000f70:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f72:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f78:	d009      	beq.n	8000f8e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	4770      	bx	lr
        status = HAL_ERROR;
 8000f82:	2001      	movs	r0, #1
 8000f84:	4770      	bx	lr
      status = HAL_ERROR;
 8000f86:	2001      	movs	r0, #1
 8000f88:	4770      	bx	lr
        status = HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4770      	bx	lr
      status = HAL_ERROR;
 8000f92:	2001      	movs	r0, #1
 8000f94:	4770      	bx	lr
    switch (tmp)
 8000f96:	2000      	movs	r0, #0
 8000f98:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_DMA_Init>:
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ff00 	bl	8000da8 <HAL_GetTick>
  if(hdma == NULL)
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	d05b      	beq.n	8001064 <HAL_DMA_Init+0xc4>
 8000fac:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f012 0f01 	tst.w	r2, #1
 8000fcc:	d00a      	beq.n	8000fe4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fce:	f7ff feeb 	bl	8000da8 <HAL_GetTick>
 8000fd2:	1b43      	subs	r3, r0, r5
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d9f5      	bls.n	8000fc4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000fe4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe6:	4920      	ldr	r1, [pc, #128]	@ (8001068 <HAL_DMA_Init+0xc8>)
 8000fe8:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fea:	6862      	ldr	r2, [r4, #4]
 8000fec:	68a0      	ldr	r0, [r4, #8]
 8000fee:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff4:	6920      	ldr	r0, [r4, #16]
 8000ff6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffc:	69a0      	ldr	r0, [r4, #24]
 8000ffe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001000:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001002:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001004:	6a20      	ldr	r0, [r4, #32]
 8001006:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001008:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800100a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800100c:	2904      	cmp	r1, #4
 800100e:	d01e      	beq.n	800104e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001010:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001012:	6826      	ldr	r6, [r4, #0]
 8001014:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001016:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800101a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800101c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800101e:	2b04      	cmp	r3, #4
 8001020:	d107      	bne.n	8001032 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001022:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001024:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001026:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001028:	b11b      	cbz	r3, 8001032 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff ff70 	bl	8000f10 <DMA_CheckFifoParam>
 8001030:	b990      	cbnz	r0, 8001058 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001032:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001034:	4620      	mov	r0, r4
 8001036:	f7ff ff4d 	bl	8000ed4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800103a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800103c:	233f      	movs	r3, #63	@ 0x3f
 800103e:	4093      	lsls	r3, r2
 8001040:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001042:	2000      	movs	r0, #0
 8001044:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001046:	2301      	movs	r3, #1
 8001048:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800104c:	e7c9      	b.n	8000fe2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800104e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001050:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001052:	4301      	orrs	r1, r0
 8001054:	430a      	orrs	r2, r1
 8001056:	e7db      	b.n	8001010 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001058:	2340      	movs	r3, #64	@ 0x40
 800105a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800105c:	2001      	movs	r0, #1
 800105e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001062:	e7be      	b.n	8000fe2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001064:	2001      	movs	r0, #1
 8001066:	e7bc      	b.n	8000fe2 <HAL_DMA_Init+0x42>
 8001068:	f010803f 	.word	0xf010803f

0800106c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800107a:	2001      	movs	r0, #1
 800107c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800107e:	2305      	movs	r3, #5
 8001080:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001084:	6802      	ldr	r2, [r0, #0]
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800108e:	2000      	movs	r0, #0
}
 8001090:	4770      	bx	lr
	...

08001094 <HAL_DMA_IRQHandler>:
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800109e:	4b72      	ldr	r3, [pc, #456]	@ (8001268 <HAL_DMA_IRQHandler+0x1d4>)
 80010a0:	681d      	ldr	r5, [r3, #0]
 80010a2:	4b72      	ldr	r3, [pc, #456]	@ (800126c <HAL_DMA_IRQHandler+0x1d8>)
 80010a4:	fba3 3505 	umull	r3, r5, r3, r5
 80010a8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010aa:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80010ac:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ae:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80010b0:	2308      	movs	r3, #8
 80010b2:	4093      	lsls	r3, r2
 80010b4:	4233      	tst	r3, r6
 80010b6:	d010      	beq.n	80010da <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010b8:	6803      	ldr	r3, [r0, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f012 0f04 	tst.w	r2, #4
 80010c0:	d00b      	beq.n	80010da <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f022 0204 	bic.w	r2, r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010ca:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80010cc:	2308      	movs	r3, #8
 80010ce:	4093      	lsls	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010d2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010da:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010dc:	2301      	movs	r3, #1
 80010de:	4093      	lsls	r3, r2
 80010e0:	4233      	tst	r3, r6
 80010e2:	d009      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	6952      	ldr	r2, [r2, #20]
 80010e8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80010ec:	d004      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ee:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010fa:	2304      	movs	r3, #4
 80010fc:	4093      	lsls	r3, r2
 80010fe:	4233      	tst	r3, r6
 8001100:	d009      	beq.n	8001116 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	f012 0f02 	tst.w	r2, #2
 800110a:	d004      	beq.n	8001116 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800110c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800110e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001116:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001118:	2310      	movs	r3, #16
 800111a:	4093      	lsls	r3, r2
 800111c:	4233      	tst	r3, r6
 800111e:	d024      	beq.n	800116a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001120:	6822      	ldr	r2, [r4, #0]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	f012 0f08 	tst.w	r2, #8
 8001128:	d01f      	beq.n	800116a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800112a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001134:	d00d      	beq.n	8001152 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800113c:	d104      	bne.n	8001148 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800113e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001140:	b19b      	cbz	r3, 800116a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001142:	4620      	mov	r0, r4
 8001144:	4798      	blx	r3
 8001146:	e010      	b.n	800116a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001148:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800114a:	b173      	cbz	r3, 800116a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800114c:	4620      	mov	r0, r4
 800114e:	4798      	blx	r3
 8001150:	e00b      	b.n	800116a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001158:	d103      	bne.n	8001162 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	f022 0208 	bic.w	r2, r2, #8
 8001160:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001162:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001164:	b10b      	cbz	r3, 800116a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001166:	4620      	mov	r0, r4
 8001168:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800116a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800116c:	2320      	movs	r3, #32
 800116e:	4093      	lsls	r3, r2
 8001170:	4233      	tst	r3, r6
 8001172:	d055      	beq.n	8001220 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	f012 0f10 	tst.w	r2, #16
 800117c:	d050      	beq.n	8001220 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800117e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001180:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b05      	cmp	r3, #5
 8001188:	d00e      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001192:	d033      	beq.n	80011fc <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800119a:	d12a      	bne.n	80011f2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800119c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d03e      	beq.n	8001220 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80011a2:	4620      	mov	r0, r4
 80011a4:	4798      	blx	r3
 80011a6:	e03b      	b.n	8001220 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	f023 0316 	bic.w	r3, r3, #22
 80011b0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011b2:	6822      	ldr	r2, [r4, #0]
 80011b4:	6953      	ldr	r3, [r2, #20]
 80011b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011ba:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011be:	b1a3      	cbz	r3, 80011ea <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f023 0308 	bic.w	r3, r3, #8
 80011c8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ca:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011cc:	233f      	movs	r3, #63	@ 0x3f
 80011ce:	4093      	lsls	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80011d8:	2300      	movs	r3, #0
 80011da:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80011de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03f      	beq.n	8001264 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80011e4:	4620      	mov	r0, r4
 80011e6:	4798      	blx	r3
        return;
 80011e8:	e03c      	b.n	8001264 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ea:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e7      	bne.n	80011c0 <HAL_DMA_IRQHandler+0x12c>
 80011f0:	e7eb      	b.n	80011ca <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80011f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80011f4:	b1a3      	cbz	r3, 8001220 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80011f6:	4620      	mov	r0, r4
 80011f8:	4798      	blx	r3
 80011fa:	e011      	b.n	8001220 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001202:	d109      	bne.n	8001218 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	f022 0210 	bic.w	r2, r2, #16
 800120a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800120c:	2301      	movs	r3, #1
 800120e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001212:	2300      	movs	r3, #0
 8001214:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001218:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800121a:	b10b      	cbz	r3, 8001220 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800121c:	4620      	mov	r0, r4
 800121e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001220:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001222:	b1fb      	cbz	r3, 8001264 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001224:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001226:	f013 0f01 	tst.w	r3, #1
 800122a:	d017      	beq.n	800125c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800122c:	2305      	movs	r3, #5
 800122e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	6813      	ldr	r3, [r2, #0]
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	42ab      	cmp	r3, r5
 8001244:	d804      	bhi.n	8001250 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f013 0f01 	tst.w	r3, #1
 800124e:	d1f5      	bne.n	800123c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001250:	2301      	movs	r3, #1
 8001252:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001256:	2300      	movs	r3, #0
 8001258:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800125c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800125e:	b10b      	cbz	r3, 8001264 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001260:	4620      	mov	r0, r4
 8001262:	4798      	blx	r3
}
 8001264:	b003      	add	sp, #12
 8001266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	1b4e81b5 	.word	0x1b4e81b5

08001270 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001270:	2300      	movs	r3, #0
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f200 80e9 	bhi.w	800144a <HAL_GPIO_Init+0x1da>
{
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	e065      	b.n	800134a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001284:	2403      	movs	r4, #3
 8001286:	fa04 f40e 	lsl.w	r4, r4, lr
 800128a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	68cc      	ldr	r4, [r1, #12]
 8001290:	fa04 f40e 	lsl.w	r4, r4, lr
 8001294:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001296:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	684a      	ldr	r2, [r1, #4]
 80012a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80012a8:	6042      	str	r2, [r0, #4]
 80012aa:	e05c      	b.n	8001366 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ac:	08dc      	lsrs	r4, r3, #3
 80012ae:	3408      	adds	r4, #8
 80012b0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b4:	f003 0507 	and.w	r5, r3, #7
 80012b8:	00ad      	lsls	r5, r5, #2
 80012ba:	f04f 0e0f 	mov.w	lr, #15
 80012be:	fa0e fe05 	lsl.w	lr, lr, r5
 80012c2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c6:	690a      	ldr	r2, [r1, #16]
 80012c8:	40aa      	lsls	r2, r5
 80012ca:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80012d2:	e05c      	b.n	800138e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d4:	2207      	movs	r2, #7
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x6a>
 80012d8:	2200      	movs	r2, #0
 80012da:	fa02 f20e 	lsl.w	r2, r2, lr
 80012de:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	3402      	adds	r4, #2
 80012e2:	4d5a      	ldr	r5, [pc, #360]	@ (800144c <HAL_GPIO_Init+0x1dc>)
 80012e4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e8:	4a59      	ldr	r2, [pc, #356]	@ (8001450 <HAL_GPIO_Init+0x1e0>)
 80012ea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	ea6f 020c 	mvn.w	r2, ip
 80012f0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f4:	684e      	ldr	r6, [r1, #4]
 80012f6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80012fa:	d001      	beq.n	8001300 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80012fc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001300:	4c53      	ldr	r4, [pc, #332]	@ (8001450 <HAL_GPIO_Init+0x1e0>)
 8001302:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001304:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001306:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130a:	684e      	ldr	r6, [r1, #4]
 800130c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001310:	d001      	beq.n	8001316 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001312:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001316:	4c4e      	ldr	r4, [pc, #312]	@ (8001450 <HAL_GPIO_Init+0x1e0>)
 8001318:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800131a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800131c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001320:	684e      	ldr	r6, [r1, #4]
 8001322:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001326:	d001      	beq.n	800132c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001328:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800132c:	4c48      	ldr	r4, [pc, #288]	@ (8001450 <HAL_GPIO_Init+0x1e0>)
 800132e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001332:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	684d      	ldr	r5, [r1, #4]
 8001336:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800133a:	d001      	beq.n	8001340 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800133c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001340:	4c43      	ldr	r4, [pc, #268]	@ (8001450 <HAL_GPIO_Init+0x1e0>)
 8001342:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001344:	3301      	adds	r3, #1
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d87d      	bhi.n	8001446 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800134a:	2201      	movs	r2, #1
 800134c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	680c      	ldr	r4, [r1, #0]
 8001350:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001354:	ea32 0404 	bics.w	r4, r2, r4
 8001358:	d1f4      	bne.n	8001344 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	684c      	ldr	r4, [r1, #4]
 800135c:	f004 0403 	and.w	r4, r4, #3
 8001360:	3c01      	subs	r4, #1
 8001362:	2c01      	cmp	r4, #1
 8001364:	d98b      	bls.n	800127e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001366:	684a      	ldr	r2, [r1, #4]
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	2a03      	cmp	r2, #3
 800136e:	d009      	beq.n	8001384 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001370:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	005d      	lsls	r5, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	40aa      	lsls	r2, r5
 8001378:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	688a      	ldr	r2, [r1, #8]
 800137e:	40aa      	lsls	r2, r5
 8001380:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001382:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001384:	684a      	ldr	r2, [r1, #4]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	2a02      	cmp	r2, #2
 800138c:	d08e      	beq.n	80012ac <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800138e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001390:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f20e 	lsl.w	r2, r2, lr
 800139a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	fa02 f20e 	lsl.w	r2, r2, lr
 80013a8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80013aa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ac:	684a      	ldr	r2, [r1, #4]
 80013ae:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80013b2:	d0c7      	beq.n	8001344 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	2200      	movs	r2, #0
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_GPIO_Init+0x1e4>)
 80013ba:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80013bc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80013c0:	6454      	str	r4, [r2, #68]	@ 0x44
 80013c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013c4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80013cc:	089c      	lsrs	r4, r3, #2
 80013ce:	1ca5      	adds	r5, r4, #2
 80013d0:	4a1e      	ldr	r2, [pc, #120]	@ (800144c <HAL_GPIO_Init+0x1dc>)
 80013d2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d6:	f003 0e03 	and.w	lr, r3, #3
 80013da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f20e 	lsl.w	r2, r2, lr
 80013e4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <HAL_GPIO_Init+0x1e8>)
 80013ea:	4290      	cmp	r0, r2
 80013ec:	f43f af74 	beq.w	80012d8 <HAL_GPIO_Init+0x68>
 80013f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013f4:	4290      	cmp	r0, r2
 80013f6:	d01a      	beq.n	800142e <HAL_GPIO_Init+0x1be>
 80013f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013fc:	4290      	cmp	r0, r2
 80013fe:	d018      	beq.n	8001432 <HAL_GPIO_Init+0x1c2>
 8001400:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001404:	4290      	cmp	r0, r2
 8001406:	d016      	beq.n	8001436 <HAL_GPIO_Init+0x1c6>
 8001408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800140c:	4290      	cmp	r0, r2
 800140e:	d014      	beq.n	800143a <HAL_GPIO_Init+0x1ca>
 8001410:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001414:	4290      	cmp	r0, r2
 8001416:	d012      	beq.n	800143e <HAL_GPIO_Init+0x1ce>
 8001418:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800141c:	4290      	cmp	r0, r2
 800141e:	d010      	beq.n	8001442 <HAL_GPIO_Init+0x1d2>
 8001420:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001424:	4290      	cmp	r0, r2
 8001426:	f43f af55 	beq.w	80012d4 <HAL_GPIO_Init+0x64>
 800142a:	2208      	movs	r2, #8
 800142c:	e755      	b.n	80012da <HAL_GPIO_Init+0x6a>
 800142e:	2201      	movs	r2, #1
 8001430:	e753      	b.n	80012da <HAL_GPIO_Init+0x6a>
 8001432:	2202      	movs	r2, #2
 8001434:	e751      	b.n	80012da <HAL_GPIO_Init+0x6a>
 8001436:	2203      	movs	r2, #3
 8001438:	e74f      	b.n	80012da <HAL_GPIO_Init+0x6a>
 800143a:	2204      	movs	r2, #4
 800143c:	e74d      	b.n	80012da <HAL_GPIO_Init+0x6a>
 800143e:	2205      	movs	r2, #5
 8001440:	e74b      	b.n	80012da <HAL_GPIO_Init+0x6a>
 8001442:	2206      	movs	r2, #6
 8001444:	e749      	b.n	80012da <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001446:	b002      	add	sp, #8
 8001448:	bd70      	pop	{r4, r5, r6, pc}
 800144a:	4770      	bx	lr
 800144c:	40013800 	.word	0x40013800
 8001450:	40013c00 	.word	0x40013c00
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	b10a      	cbz	r2, 8001462 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	6181      	str	r1, [r0, #24]
 8001460:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	0409      	lsls	r1, r1, #16
 8001464:	6181      	str	r1, [r0, #24]
  }
}
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001468:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146a:	ea01 0203 	and.w	r2, r1, r3
 800146e:	ea21 0103 	bic.w	r1, r1, r3
 8001472:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001476:	6181      	str	r1, [r0, #24]
}
 8001478:	4770      	bx	lr
	...

0800147c <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800147c:	2800      	cmp	r0, #0
 800147e:	f000 80be 	beq.w	80015fe <HAL_I2S_Init+0x182>
{
 8001482:	b538      	push	{r3, r4, r5, lr}
 8001484:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001486:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800148a:	2b00      	cmp	r3, #0
 800148c:	d051      	beq.n	8001532 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800148e:	2202      	movs	r2, #2
 8001490:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001494:	6821      	ldr	r1, [r4, #0]
 8001496:	69cb      	ldr	r3, [r1, #28]
 8001498:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800149c:	f023 030f 	bic.w	r3, r3, #15
 80014a0:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80014a6:	6963      	ldr	r3, [r4, #20]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d069      	beq.n	8001580 <HAL_I2S_Init+0x104>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80014ac:	68e3      	ldr	r3, [r4, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d146      	bne.n	8001540 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80014b2:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80014b4:	68a3      	ldr	r3, [r4, #8]
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d800      	bhi.n	80014bc <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80014ba:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 ff41 	bl	8002344 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80014c2:	6923      	ldr	r3, [r4, #16]
 80014c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c8:	d03c      	beq.n	8001544 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014ca:	fbb0 f0f5 	udiv	r0, r0, r5
 80014ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014d2:	0043      	lsls	r3, r0, #1
 80014d4:	6962      	ldr	r2, [r4, #20]
 80014d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014da:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80014dc:	4a49      	ldr	r2, [pc, #292]	@ (8001604 <HAL_I2S_Init+0x188>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80014e2:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80014e6:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 80014ea:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80014ec:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80014ee:	1e9a      	subs	r2, r3, #2
 80014f0:	2afd      	cmp	r2, #253	@ 0xfd
 80014f2:	d83f      	bhi.n	8001574 <HAL_I2S_Init+0xf8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80014f4:	6922      	ldr	r2, [r4, #16]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	6821      	ldr	r1, [r4, #0]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80014fe:	6821      	ldr	r1, [r4, #0]
 8001500:	69cb      	ldr	r3, [r1, #28]
 8001502:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001506:	f023 030f 	bic.w	r3, r3, #15
 800150a:	6862      	ldr	r2, [r4, #4]
 800150c:	68a0      	ldr	r0, [r4, #8]
 800150e:	4302      	orrs	r2, r0
 8001510:	68e0      	ldr	r0, [r4, #12]
 8001512:	4302      	orrs	r2, r0
 8001514:	69a0      	ldr	r0, [r4, #24]
 8001516:	4302      	orrs	r2, r0
 8001518:	4313      	orrs	r3, r2
 800151a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151e:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001520:	6a23      	ldr	r3, [r4, #32]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d02e      	beq.n	8001584 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001526:	2000      	movs	r0, #0
 8001528:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800152a:	2301      	movs	r3, #1
 800152c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  return HAL_OK;
}
 8001530:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8001532:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001536:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_I2S_Init+0x18c>)
 8001538:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 800153a:	f7ff f9f9 	bl	8000930 <HAL_I2S_MspInit>
 800153e:	e7a6      	b.n	800148e <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8001540:	2520      	movs	r5, #32
 8001542:	e7b7      	b.n	80014b4 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001544:	68e3      	ldr	r3, [r4, #12]
 8001546:	b153      	cbz	r3, 800155e <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001548:	00ad      	lsls	r5, r5, #2
 800154a:	fbb0 f0f5 	udiv	r0, r0, r5
 800154e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001552:	0043      	lsls	r3, r0, #1
 8001554:	6962      	ldr	r2, [r4, #20]
 8001556:	fbb3 f3f2 	udiv	r3, r3, r2
 800155a:	3305      	adds	r3, #5
 800155c:	e7be      	b.n	80014dc <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800155e:	00ed      	lsls	r5, r5, #3
 8001560:	fbb0 f0f5 	udiv	r0, r0, r5
 8001564:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001568:	0043      	lsls	r3, r0, #1
 800156a:	6962      	ldr	r2, [r4, #20]
 800156c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001570:	3305      	adds	r3, #5
 8001572:	e7b3      	b.n	80014dc <HAL_I2S_Init+0x60>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001574:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6463      	str	r3, [r4, #68]	@ 0x44
    return  HAL_ERROR;
 800157c:	2001      	movs	r0, #1
 800157e:	e7d7      	b.n	8001530 <HAL_I2S_Init+0xb4>
    i2sodd = 0U;
 8001580:	2100      	movs	r1, #0
 8001582:	e7b7      	b.n	80014f4 <HAL_I2S_Init+0x78>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_I2S_Init+0x190>)
 8001586:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <HAL_I2S_Init+0x194>)
 800158c:	429a      	cmp	r2, r3
 800158e:	d01f      	beq.n	80015d0 <HAL_I2S_Init+0x154>
 8001590:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001594:	69d3      	ldr	r3, [r2, #28]
 8001596:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800159a:	f023 030f 	bic.w	r3, r3, #15
 800159e:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80015a0:	6822      	ldr	r2, [r4, #0]
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_I2S_Init+0x194>)
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d015      	beq.n	80015d4 <HAL_I2S_Init+0x158>
 80015a8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015ac:	2302      	movs	r3, #2
 80015ae:	6213      	str	r3, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_I2S_Init+0x194>)
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d00f      	beq.n	80015d8 <HAL_I2S_Init+0x15c>
 80015b8:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
 80015bc:	69eb      	ldr	r3, [r5, #28]
 80015be:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80015c0:	6862      	ldr	r2, [r4, #4]
 80015c2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80015c6:	d009      	beq.n	80015dc <HAL_I2S_Init+0x160>
 80015c8:	b9ba      	cbnz	r2, 80015fa <HAL_I2S_Init+0x17e>
      tmp = I2S_MODE_SLAVE_RX;
 80015ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015ce:	e007      	b.n	80015e0 <HAL_I2S_Init+0x164>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015d0:	4a10      	ldr	r2, [pc, #64]	@ (8001614 <HAL_I2S_Init+0x198>)
 80015d2:	e7df      	b.n	8001594 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80015d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <HAL_I2S_Init+0x198>)
 80015d6:	e7e9      	b.n	80015ac <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80015d8:	4d0e      	ldr	r5, [pc, #56]	@ (8001614 <HAL_I2S_Init+0x198>)
 80015da:	e7ef      	b.n	80015bc <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 80015dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 80015e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 80015e4:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 80015e6:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80015e8:	ea40 000c 	orr.w	r0, r0, ip
 80015ec:	4301      	orrs	r1, r0
 80015ee:	430a      	orrs	r2, r1
 80015f0:	4313      	orrs	r3, r2
 80015f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80015f6:	61eb      	str	r3, [r5, #28]
 80015f8:	e795      	b.n	8001526 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e7f0      	b.n	80015e0 <HAL_I2S_Init+0x164>
    return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	cccccccd 	.word	0xcccccccd
 8001608:	0800168f 	.word	0x0800168f
 800160c:	080018a1 	.word	0x080018a1
 8001610:	40003800 	.word	0x40003800
 8001614:	40003400 	.word	0x40003400

08001618 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001618:	4770      	bx	lr

0800161a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800161a:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800161c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800161e:	6803      	ldr	r3, [r0, #0]
 8001620:	8812      	ldrh	r2, [r2, #0]
 8001622:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001624:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001626:	3302      	adds	r3, #2
 8001628:	6243      	str	r3, [r0, #36]	@ 0x24
  hi2s->TxXferCount--;
 800162a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	3b01      	subs	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001634:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	b103      	cbz	r3, 800163c <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800163a:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800163c:	6802      	ldr	r2, [r0, #0]
 800163e:	6853      	ldr	r3, [r2, #4]
 8001640:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001644:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001646:	2301      	movs	r3, #1
 8001648:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800164c:	f7ff ffe4 	bl	8001618 <HAL_I2S_TxCpltCallback>
}
 8001650:	e7f3      	b.n	800163a <I2S_Transmit_IT+0x20>

08001652 <HAL_I2S_RxCpltCallback>:
}
 8001652:	4770      	bx	lr

08001654 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001654:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800165c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800165e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001660:	3302      	adds	r3, #2
 8001662:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001664:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800166e:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001670:	b29b      	uxth	r3, r3
 8001672:	b103      	cbz	r3, 8001676 <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001674:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001676:	6802      	ldr	r2, [r0, #0]
 8001678:	6853      	ldr	r3, [r2, #4]
 800167a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800167e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001680:	2301      	movs	r3, #1
 8001682:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001686:	f7ff ffe4 	bl	8001652 <HAL_I2S_RxCpltCallback>
}
 800168a:	e7f3      	b.n	8001674 <I2S_Receive_IT+0x20>

0800168c <HAL_I2S_ErrorCallback>:
}
 800168c:	4770      	bx	lr

0800168e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800168e:	b510      	push	{r4, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001694:	6802      	ldr	r2, [r0, #0]
 8001696:	6893      	ldr	r3, [r2, #8]
 8001698:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800169a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d006      	beq.n	80016b2 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80016a4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d02c      	beq.n	8001708 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80016ae:	b004      	add	sp, #16
 80016b0:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80016b2:	9b03      	ldr	r3, [sp, #12]
 80016b4:	f013 0f01 	tst.w	r3, #1
 80016b8:	d003      	beq.n	80016c2 <I2S_IRQHandler+0x34>
 80016ba:	6853      	ldr	r3, [r2, #4]
 80016bc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80016c0:	d11f      	bne.n	8001702 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80016c2:	9b03      	ldr	r3, [sp, #12]
 80016c4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80016c8:	d0ec      	beq.n	80016a4 <I2S_IRQHandler+0x16>
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	f012 0f20 	tst.w	r2, #32
 80016d2:	d0e7      	beq.n	80016a4 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80016da:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80016dc:	2300      	movs	r3, #0
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	9201      	str	r2, [sp, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80016f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff ffc6 	bl	800168c <HAL_I2S_ErrorCallback>
 8001700:	e7d0      	b.n	80016a4 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8001702:	f7ff ffa7 	bl	8001654 <I2S_Receive_IT>
 8001706:	e7dc      	b.n	80016c2 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001708:	9b03      	ldr	r3, [sp, #12]
 800170a:	f013 0f02 	tst.w	r3, #2
 800170e:	d004      	beq.n	800171a <I2S_IRQHandler+0x8c>
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001718:	d11d      	bne.n	8001756 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800171a:	9b03      	ldr	r3, [sp, #12]
 800171c:	f013 0f08 	tst.w	r3, #8
 8001720:	d0c5      	beq.n	80016ae <I2S_IRQHandler+0x20>
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	f012 0f20 	tst.w	r2, #32
 800172a:	d0c0      	beq.n	80016ae <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001732:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001734:	2300      	movs	r3, #0
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001740:	2301      	movs	r3, #1
 8001742:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001746:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff ff9c 	bl	800168c <HAL_I2S_ErrorCallback>
}
 8001754:	e7ab      	b.n	80016ae <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff ff5f 	bl	800161a <I2S_Transmit_IT>
 800175c:	e7dd      	b.n	800171a <I2S_IRQHandler+0x8c>

0800175e <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800175e:	4770      	bx	lr

08001760 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001760:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001762:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001764:	1c9a      	adds	r2, r3, #2
 8001766:	6242      	str	r2, [r0, #36]	@ 0x24
 8001768:	6802      	ldr	r2, [r0, #0]
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800176e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001770:	b29b      	uxth	r3, r3
 8001772:	3b01      	subs	r3, #1
 8001774:	b29b      	uxth	r3, r3
 8001776:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001778:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	b93b      	cbnz	r3, 800178e <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800177e:	6802      	ldr	r2, [r0, #0]
 8001780:	6853      	ldr	r3, [r2, #4]
 8001782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001786:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001788:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800178a:	b29b      	uxth	r3, r3
 800178c:	b103      	cbz	r3, 8001790 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800178e:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001790:	2301      	movs	r3, #1
 8001792:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001796:	f7ff ffe2 	bl	800175e <HAL_I2SEx_TxRxCpltCallback>
}
 800179a:	e7f8      	b.n	800178e <I2SEx_TxISR_I2S+0x2e>

0800179c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800179c:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800179e:	6802      	ldr	r2, [r0, #0]
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <I2SEx_RxISR_I2SExt+0x5c>)
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d01c      	beq.n	80017e0 <I2SEx_RxISR_I2SExt+0x44>
 80017a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80017ae:	1c99      	adds	r1, r3, #2
 80017b0:	62c1      	str	r1, [r0, #44]	@ 0x2c
 80017b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80017b4:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80017be:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b963      	cbnz	r3, 80017de <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017c4:	6802      	ldr	r2, [r0, #0]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <I2SEx_RxISR_I2SExt+0x5c>)
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d00c      	beq.n	80017e6 <I2SEx_RxISR_I2SExt+0x4a>
 80017cc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80017d0:	6853      	ldr	r3, [r2, #4]
 80017d2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80017d6:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80017d8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b12b      	cbz	r3, 80017ea <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80017de:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80017e0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80017e4:	e7e1      	b.n	80017aa <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <I2SEx_RxISR_I2SExt+0x60>)
 80017e8:	e7f2      	b.n	80017d0 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017f0:	f7ff ffb5 	bl	800175e <HAL_I2SEx_TxRxCpltCallback>
}
 80017f4:	e7f3      	b.n	80017de <I2SEx_RxISR_I2SExt+0x42>
 80017f6:	bf00      	nop
 80017f8:	40003800 	.word	0x40003800
 80017fc:	40003400 	.word	0x40003400

08001800 <I2SEx_TxISR_I2SExt>:
{
 8001800:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001802:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001804:	1c9a      	adds	r2, r3, #2
 8001806:	6242      	str	r2, [r0, #36]	@ 0x24
 8001808:	881a      	ldrh	r2, [r3, #0]
 800180a:	6801      	ldr	r1, [r0, #0]
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <I2SEx_TxISR_I2SExt+0x5c>)
 800180e:	4299      	cmp	r1, r3
 8001810:	d018      	beq.n	8001844 <I2SEx_TxISR_I2SExt+0x44>
 8001812:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001816:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001818:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	b29b      	uxth	r3, r3
 8001820:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 8001822:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001824:	b29b      	uxth	r3, r3
 8001826:	b963      	cbnz	r3, 8001842 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001828:	6802      	ldr	r2, [r0, #0]
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <I2SEx_TxISR_I2SExt+0x5c>)
 800182c:	429a      	cmp	r2, r3
 800182e:	d00c      	beq.n	800184a <I2SEx_TxISR_I2SExt+0x4a>
 8001830:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001834:	6853      	ldr	r3, [r2, #4]
 8001836:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800183a:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 800183c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800183e:	b29b      	uxth	r3, r3
 8001840:	b12b      	cbz	r3, 800184e <I2SEx_TxISR_I2SExt+0x4e>
}
 8001842:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001844:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001848:	e7e5      	b.n	8001816 <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <I2SEx_TxISR_I2SExt+0x60>)
 800184c:	e7f2      	b.n	8001834 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 800184e:	2301      	movs	r3, #1
 8001850:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001854:	f7ff ff83 	bl	800175e <HAL_I2SEx_TxRxCpltCallback>
}
 8001858:	e7f3      	b.n	8001842 <I2SEx_TxISR_I2SExt+0x42>
 800185a:	bf00      	nop
 800185c:	40003800 	.word	0x40003800
 8001860:	40003400 	.word	0x40003400

08001864 <I2SEx_RxISR_I2S>:
{
 8001864:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001866:	6803      	ldr	r3, [r0, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800186c:	1c99      	adds	r1, r3, #2
 800186e:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001870:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001872:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	8643      	strh	r3, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 800187c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800187e:	b29b      	uxth	r3, r3
 8001880:	b93b      	cbnz	r3, 8001892 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001882:	6802      	ldr	r2, [r0, #0]
 8001884:	6853      	ldr	r3, [r2, #4]
 8001886:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800188a:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800188c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	b103      	cbz	r3, 8001894 <I2SEx_RxISR_I2S+0x30>
}
 8001892:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001894:	2301      	movs	r3, #1
 8001896:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800189a:	f7ff ff60 	bl	800175e <HAL_I2SEx_TxRxCpltCallback>
}
 800189e:	e7f8      	b.n	8001892 <I2SEx_RxISR_I2S+0x2e>

080018a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80018a6:	6803      	ldr	r3, [r0, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80018ac:	4a70      	ldr	r2, [pc, #448]	@ (8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d06f      	beq.n	8001992 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80018b2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80018b6:	6891      	ldr	r1, [r2, #8]
 80018b8:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80018be:	6853      	ldr	r3, [r2, #4]
 80018c0:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80018c2:	6863      	ldr	r3, [r4, #4]
 80018c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018c8:	d001      	beq.n	80018ce <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d170      	bne.n	80019b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80018ce:	9b05      	ldr	r3, [sp, #20]
 80018d0:	f013 0f02 	tst.w	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80018d6:	9b03      	ldr	r3, [sp, #12]
 80018d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80018dc:	d15c      	bne.n	8001998 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80018de:	9b04      	ldr	r3, [sp, #16]
 80018e0:	f013 0f01 	tst.w	r3, #1
 80018e4:	d003      	beq.n	80018ee <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80018e6:	9b02      	ldr	r3, [sp, #8]
 80018e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80018ec:	d158      	bne.n	80019a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80018ee:	9b04      	ldr	r3, [sp, #16]
 80018f0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80018f4:	d024      	beq.n	8001940 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80018f6:	9b02      	ldr	r3, [sp, #8]
 80018f8:	f013 0f20 	tst.w	r3, #32
 80018fc:	d020      	beq.n	8001940 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001902:	429a      	cmp	r2, r3
 8001904:	d050      	beq.n	80019a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001906:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800190a:	6853      	ldr	r3, [r2, #4]
 800190c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001910:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	6853      	ldr	r3, [r2, #4]
 8001916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800191a:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 800192c:	2301      	movs	r3, #1
 800192e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001932:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff fea6 	bl	800168c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001940:	9b05      	ldr	r3, [sp, #20]
 8001942:	f013 0f08 	tst.w	r3, #8
 8001946:	d022      	beq.n	800198e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	f013 0f20 	tst.w	r3, #32
 800194e:	d01e      	beq.n	800198e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001950:	6822      	ldr	r2, [r4, #0]
 8001952:	6853      	ldr	r3, [r2, #4]
 8001954:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001958:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	4b44      	ldr	r3, [pc, #272]	@ (8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800195e:	429a      	cmp	r2, r3
 8001960:	d024      	beq.n	80019ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001962:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001966:	6853      	ldr	r3, [r2, #4]
 8001968:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800196c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800196e:	2300      	movs	r3, #0
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800197a:	2301      	movs	r3, #1
 800197c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001980:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff fe7f 	bl	800168c <HAL_I2S_ErrorCallback>
}
 800198e:	b006      	add	sp, #24
 8001990:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001992:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001996:	e78e      	b.n	80018b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fee1 	bl	8001760 <I2SEx_TxISR_I2S>
 800199e:	e79e      	b.n	80018de <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fefb 	bl	800179c <I2SEx_RxISR_I2SExt>
 80019a6:	e7a2      	b.n	80018ee <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019a8:	4a32      	ldr	r2, [pc, #200]	@ (8001a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80019aa:	e7ae      	b.n	800190a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019ac:	4a31      	ldr	r2, [pc, #196]	@ (8001a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80019ae:	e7da      	b.n	8001966 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80019b0:	9b04      	ldr	r3, [sp, #16]
 80019b2:	f013 0f02 	tst.w	r3, #2
 80019b6:	d003      	beq.n	80019c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80019b8:	9b02      	ldr	r3, [sp, #8]
 80019ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019be:	d14a      	bne.n	8001a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80019c0:	9b05      	ldr	r3, [sp, #20]
 80019c2:	f013 0f01 	tst.w	r3, #1
 80019c6:	d003      	beq.n	80019d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80019c8:	9b03      	ldr	r3, [sp, #12]
 80019ca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80019ce:	d146      	bne.n	8001a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80019d0:	9b05      	ldr	r3, [sp, #20]
 80019d2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80019d6:	d01c      	beq.n	8001a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	f013 0f20 	tst.w	r3, #32
 80019de:	d018      	beq.n	8001a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	6853      	ldr	r3, [r2, #4]
 80019e4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80019e8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d039      	beq.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 80019f2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80019f6:	6853      	ldr	r3, [r2, #4]
 80019f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80019fc:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a04:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff fe3d 	bl	800168c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001a12:	9b04      	ldr	r3, [sp, #16]
 8001a14:	f013 0f08 	tst.w	r3, #8
 8001a18:	d0b9      	beq.n	800198e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001a1a:	9b02      	ldr	r3, [sp, #8]
 8001a1c:	f013 0f20 	tst.w	r3, #32
 8001a20:	d0b5      	beq.n	800198e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d01f      	beq.n	8001a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001a2a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a2e:	6853      	ldr	r3, [r2, #4]
 8001a30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001a34:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	6853      	ldr	r3, [r2, #4]
 8001a3a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001a3e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff fe1c 	bl	800168c <HAL_I2S_ErrorCallback>
}
 8001a54:	e79b      	b.n	800198e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff fed2 	bl	8001800 <I2SEx_TxISR_I2SExt>
 8001a5c:	e7b0      	b.n	80019c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff ff00 	bl	8001864 <I2SEx_RxISR_I2S>
 8001a64:	e7b4      	b.n	80019d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a66:	4a03      	ldr	r2, [pc, #12]	@ (8001a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001a68:	e7c5      	b.n	80019f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a6a:	4a02      	ldr	r2, [pc, #8]	@ (8001a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001a6c:	e7df      	b.n	8001a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001a6e:	bf00      	nop
 8001a70:	40003800 	.word	0x40003800
 8001a74:	40003400 	.word	0x40003400

08001a78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a78:	b530      	push	{r4, r5, lr}
 8001a7a:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d07a      	beq.n	8001b76 <HAL_PCD_Init+0xfe>
 8001a80:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a82:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a84:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8001a88:	b1c3      	cbz	r3, 8001abc <HAL_PCD_Init+0x44>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a90:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8001a94:	d017      	beq.n	8001ac6 <HAL_PCD_Init+0x4e>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a96:	6820      	ldr	r0, [r4, #0]
 8001a98:	f001 fea3 	bl	80037e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9c:	7c23      	ldrb	r3, [r4, #16]
 8001a9e:	f88d 3000 	strb.w	r3, [sp]
 8001aa2:	1d23      	adds	r3, r4, #4
 8001aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	f001 fe52 	bl	8003750 <USB_CoreInit>
 8001aac:	b170      	cbz	r0, 8001acc <HAL_PCD_Init+0x54>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001ab4:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	b003      	add	sp, #12
 8001aba:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001abc:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8001ac0:	f7ff f85c 	bl	8000b7c <HAL_PCD_MspInit>
 8001ac4:	e7e1      	b.n	8001a8a <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71a3      	strb	r3, [r4, #6]
 8001aca:	e7e4      	b.n	8001a96 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001acc:	2100      	movs	r1, #0
 8001ace:	6820      	ldr	r0, [r4, #0]
 8001ad0:	f001 ffb8 	bl	8003a44 <USB_SetCurrentMode>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	b908      	cbnz	r0, 8001adc <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad8:	4603      	mov	r3, r0
 8001ada:	e017      	b.n	8001b0c <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001adc:	2302      	movs	r3, #2
 8001ade:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001ae2:	2501      	movs	r5, #1
 8001ae4:	e7e7      	b.n	8001ab6 <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 8001ae6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001aea:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001aee:	2001      	movs	r0, #1
 8001af0:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8001af2:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001af4:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001af6:	2000      	movs	r0, #0
 8001af8:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001afa:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001afc:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001afe:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001b02:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001b06:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	7920      	ldrb	r0, [r4, #4]
 8001b0e:	4298      	cmp	r0, r3
 8001b10:	d8e9      	bhi.n	8001ae6 <HAL_PCD_Init+0x6e>
 8001b12:	e016      	b.n	8001b42 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 8001b14:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001b18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8001b22:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b26:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2a:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b2e:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b32:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001b36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b3a:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3e:	3201      	adds	r2, #1
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	4290      	cmp	r0, r2
 8001b44:	d8e6      	bhi.n	8001b14 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b46:	7c23      	ldrb	r3, [r4, #16]
 8001b48:	f88d 3000 	strb.w	r3, [sp]
 8001b4c:	1d23      	adds	r3, r4, #4
 8001b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b50:	6820      	ldr	r0, [r4, #0]
 8001b52:	f001 fe9b 	bl	800388c <USB_DevInit>
 8001b56:	4605      	mov	r5, r0
 8001b58:	b120      	cbz	r0, 8001b64 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001b60:	2501      	movs	r5, #1
 8001b62:	e7a8      	b.n	8001ab6 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b6e:	6820      	ldr	r0, [r4, #0]
 8001b70:	f001 ff56 	bl	8003a20 <USB_DevDisconnect>
  return HAL_OK;
 8001b74:	e79f      	b.n	8001ab6 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001b76:	2501      	movs	r5, #1
 8001b78:	e79d      	b.n	8001ab6 <HAL_PCD_Init+0x3e>
	...

08001b7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	f000 81e0 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3c6>
{
 8001b82:	b570      	push	{r4, r5, r6, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b88:	6803      	ldr	r3, [r0, #0]
 8001b8a:	f013 0f01 	tst.w	r3, #1
 8001b8e:	d03b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b90:	4b9f      	ldr	r3, [pc, #636]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d02c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d021      	beq.n	8001bec <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bae:	d04f      	beq.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb4:	d052      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe0>
 8001bb6:	4b96      	ldr	r3, [pc, #600]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d050      	beq.n	8001c70 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff f8eb 	bl	8000da8 <HAL_GetTick>
 8001bd2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd4:	4b8e      	ldr	r3, [pc, #568]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001bdc:	d114      	bne.n	8001c08 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bde:	f7ff f8e3 	bl	8000da8 <HAL_GetTick>
 8001be2:	1b40      	subs	r0, r0, r5
 8001be4:	2864      	cmp	r0, #100	@ 0x64
 8001be6:	d9f5      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001be8:	2003      	movs	r0, #3
 8001bea:	e1b1      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bec:	4b88      	ldr	r3, [pc, #544]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001bf4:	d0d8      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf6:	4b86      	ldr	r3, [pc, #536]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCC_OscConfig+0x8c>
 8001c00:	6863      	ldr	r3, [r4, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 819f 	beq.w	8001f46 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f013 0f02 	tst.w	r3, #2
 8001c0e:	d054      	beq.n	8001cba <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c10:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f013 0f0c 	tst.w	r3, #12
 8001c18:	d03e      	beq.n	8001c98 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d033      	beq.n	8001c8e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c26:	68e3      	ldr	r3, [r4, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d068      	beq.n	8001cfe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b79      	ldr	r3, [pc, #484]	@ (8001e14 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f8b9 	bl	8000da8 <HAL_GetTick>
 8001c36:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b75      	ldr	r3, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f013 0f02 	tst.w	r3, #2
 8001c40:	d154      	bne.n	8001cec <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f8b1 	bl	8000da8 <HAL_GetTick>
 8001c46:	1b40      	subs	r0, r0, r5
 8001c48:	2802      	cmp	r0, #2
 8001c4a:	d9f5      	bls.n	8001c38 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	e17f      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	4a6f      	ldr	r2, [pc, #444]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c52:	6813      	ldr	r3, [r2, #0]
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e7b5      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4c>
 8001c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e7ab      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001c70:	f7ff f89a 	bl	8000da8 <HAL_GetTick>
 8001c74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b66      	ldr	r3, [pc, #408]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c7e:	d0c3      	beq.n	8001c08 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f892 	bl	8000da8 <HAL_GetTick>
 8001c84:	1b40      	subs	r0, r0, r5
 8001c86:	2864      	cmp	r0, #100	@ 0x64
 8001c88:	d9f5      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	e160      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b60      	ldr	r3, [pc, #384]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001c96:	d1c6      	bne.n	8001c26 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f013 0f02 	tst.w	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_OscConfig+0x12e>
 8001ca2:	68e3      	ldr	r3, [r4, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	f040 8150 	bne.w	8001f4a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4a59      	ldr	r2, [pc, #356]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001cb2:	6921      	ldr	r1, [r4, #16]
 8001cb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cb8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f013 0f08 	tst.w	r3, #8
 8001cc0:	d042      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cc2:	6963      	ldr	r3, [r4, #20]
 8001cc4:	b36b      	cbz	r3, 8001d22 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f86b 	bl	8000da8 <HAL_GetTick>
 8001cd2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd8:	f013 0f02 	tst.w	r3, #2
 8001cdc:	d134      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cde:	f7ff f863 	bl	8000da8 <HAL_GetTick>
 8001ce2:	1b40      	subs	r0, r0, r5
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e131      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4a48      	ldr	r2, [pc, #288]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001cf4:	6921      	ldr	r1, [r4, #16]
 8001cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e7dd      	b.n	8001cba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <HAL_RCC_OscConfig+0x298>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d04:	f7ff f850 	bl	8000da8 <HAL_GetTick>
 8001d08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f013 0f02 	tst.w	r3, #2
 8001d12:	d0d2      	beq.n	8001cba <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff f848 	bl	8000da8 <HAL_GetTick>
 8001d18:	1b40      	subs	r0, r0, r5
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9f5      	bls.n	8001d0a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001d1e:	2003      	movs	r0, #3
 8001d20:	e116      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b3c      	ldr	r3, [pc, #240]	@ (8001e14 <HAL_RCC_OscConfig+0x298>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f83d 	bl	8000da8 <HAL_GetTick>
 8001d2e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d34:	f013 0f02 	tst.w	r3, #2
 8001d38:	d006      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f835 	bl	8000da8 <HAL_GetTick>
 8001d3e:	1b40      	subs	r0, r0, r5
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9f5      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
 8001d46:	e103      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	f013 0f04 	tst.w	r3, #4
 8001d4e:	d077      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d50:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001d58:	d133      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d72:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_RCC_OscConfig+0x29c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001d7c:	d023      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7e:	68a3      	ldr	r3, [r4, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d034      	beq.n	8001dee <HAL_RCC_OscConfig+0x272>
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d038      	beq.n	8001dfa <HAL_RCC_OscConfig+0x27e>
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001d8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	671a      	str	r2, [r3, #112]	@ 0x70
 8001d92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d94:	f022 0204 	bic.w	r2, r2, #4
 8001d98:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9a:	68a3      	ldr	r3, [r4, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d03d      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f802 	bl	8000da8 <HAL_GetTick>
 8001da4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	f013 0f02 	tst.w	r3, #2
 8001dae:	d146      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe fffa 	bl	8000da8 <HAL_GetTick>
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	d9f3      	bls.n	8001da6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	e0c6      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	e7d6      	b.n	8001d74 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4a14      	ldr	r2, [pc, #80]	@ (8001e18 <HAL_RCC_OscConfig+0x29c>)
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001dd0:	f7fe ffea 	bl	8000da8 <HAL_GetTick>
 8001dd4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_RCC_OscConfig+0x29c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001dde:	d1ce      	bne.n	8001d7e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de0:	f7fe ffe2 	bl	8000da8 <HAL_GetTick>
 8001de4:	1b80      	subs	r0, r0, r6
 8001de6:	2802      	cmp	r0, #2
 8001de8:	d9f5      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001dea:	2003      	movs	r0, #3
 8001dec:	e0b0      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001df0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df8:	e7cf      	b.n	8001d9a <HAL_RCC_OscConfig+0x21e>
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_RCC_OscConfig+0x294>)
 8001dfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001dfe:	f042 0204 	orr.w	r2, r2, #4
 8001e02:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e0c:	e7c5      	b.n	8001d9a <HAL_RCC_OscConfig+0x21e>
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	42470000 	.word	0x42470000
 8001e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7fe ffc4 	bl	8000da8 <HAL_GetTick>
 8001e20:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e22:	4b52      	ldr	r3, [pc, #328]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	f013 0f02 	tst.w	r3, #2
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe ffbc 	bl	8000da8 <HAL_GetTick>
 8001e30:	1b80      	subs	r0, r0, r6
 8001e32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e36:	4298      	cmp	r0, r3
 8001e38:	d9f3      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	e088      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e3e:	b9ed      	cbnz	r5, 8001e7c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e40:	69a3      	ldr	r3, [r4, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8083 	beq.w	8001f4e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e48:	4a48      	ldr	r2, [pc, #288]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001e4a:	6892      	ldr	r2, [r2, #8]
 8001e4c:	f002 020c 	and.w	r2, r2, #12
 8001e50:	2a08      	cmp	r2, #8
 8001e52:	d051      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d017      	beq.n	8001e88 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b45      	ldr	r3, [pc, #276]	@ (8001f70 <HAL_RCC_OscConfig+0x3f4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe ffa3 	bl	8000da8 <HAL_GetTick>
 8001e62:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e64:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001e6c:	d042      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe ff9b 	bl	8000da8 <HAL_GetTick>
 8001e72:	1b00      	subs	r0, r0, r4
 8001e74:	2802      	cmp	r0, #2
 8001e76:	d9f5      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e78:	2003      	movs	r0, #3
 8001e7a:	e069      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001e7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	e7db      	b.n	8001e40 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <HAL_RCC_OscConfig+0x3f4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ff8b 	bl	8000da8 <HAL_GetTick>
 8001e92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e94:	4b35      	ldr	r3, [pc, #212]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001e9c:	d006      	beq.n	8001eac <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe ff83 	bl	8000da8 <HAL_GetTick>
 8001ea2:	1b40      	subs	r0, r0, r5
 8001ea4:	2802      	cmp	r0, #2
 8001ea6:	d9f5      	bls.n	8001e94 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	e051      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eac:	69e3      	ldr	r3, [r4, #28]
 8001eae:	6a22      	ldr	r2, [r4, #32]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001eb4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001eb8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001eba:	0852      	lsrs	r2, r2, #1
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ec2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ec4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ec8:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001eca:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_RCC_OscConfig+0x3f4>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001ed2:	f7fe ff69 	bl	8000da8 <HAL_GetTick>
 8001ed6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe ff61 	bl	8000da8 <HAL_GetTick>
 8001ee6:	1b00      	subs	r0, r0, r4
 8001ee8:	2802      	cmp	r0, #2
 8001eea:	d9f5      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001eec:	2003      	movs	r0, #3
 8001eee:	e02f      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e02d      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	e02b      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d02b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_RCC_OscConfig+0x3f0>)
 8001efe:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f00:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001f04:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	4291      	cmp	r1, r2
 8001f08:	d126      	bne.n	8001f58 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f0e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f10:	428a      	cmp	r2, r1
 8001f12:	d123      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f16:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001f20:	d11e      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f22:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001f26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f28:	0852      	lsrs	r2, r2, #1
 8001f2a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f32:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001f36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001f3c:	d114      	bne.n	8001f68 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001f3e:	2000      	movs	r0, #0
 8001f40:	e006      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
}
 8001f44:	4770      	bx	lr
        return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
 8001f48:	e002      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001f4e:	2000      	movs	r0, #0
}
 8001f50:	b002      	add	sp, #8
 8001f52:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
 8001f56:	e7fb      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e7f9      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	e7f7      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
 8001f60:	2001      	movs	r0, #1
 8001f62:	e7f5      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
 8001f64:	2001      	movs	r0, #1
 8001f66:	e7f3      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	e7f1      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d4>
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	42470000 	.word	0x42470000

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f76:	4b31      	ldr	r3, [pc, #196]	@ (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f82:	482f      	ldr	r0, [pc, #188]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f84:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f86:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001f94:	d02c      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f96:	4b29      	ldr	r3, [pc, #164]	@ (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001f9e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001fa2:	ebbc 0c00 	subs.w	ip, ip, r0
 8001fa6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001faa:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001fae:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001fb2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001fb6:	ebb1 010c 	subs.w	r1, r1, ip
 8001fba:	eb63 030e 	sbc.w	r3, r3, lr
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fc4:	00c9      	lsls	r1, r1, #3
 8001fc6:	eb11 0c00 	adds.w	ip, r1, r0
 8001fca:	f143 0300 	adc.w	r3, r3, #0
 8001fce:	0299      	lsls	r1, r3, #10
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001fd6:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001fda:	f7fe f949 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fde:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001fea:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001fee:	e7c9      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ff2:	6858      	ldr	r0, [r3, #4]
 8001ff4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001ff8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001ffc:	ebbc 0c00 	subs.w	ip, ip, r0
 8002000:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002004:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002008:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800200c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002010:	ebb1 010c 	subs.w	r1, r1, ip
 8002014:	eb63 030e 	sbc.w	r3, r3, lr
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800201e:	00c9      	lsls	r1, r1, #3
 8002020:	eb11 0c00 	adds.w	ip, r1, r0
 8002024:	f143 0300 	adc.w	r3, r3, #0
 8002028:	0299      	lsls	r1, r3, #10
 800202a:	2300      	movs	r3, #0
 800202c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002030:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002034:	f7fe f91c 	bl	8000270 <__aeabi_uldivmod>
 8002038:	e7d1      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x6a>
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	00f42400 	.word	0x00f42400

08002044 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002044:	2800      	cmp	r0, #0
 8002046:	f000 809b 	beq.w	8002180 <HAL_RCC_ClockConfig+0x13c>
{
 800204a:	b570      	push	{r4, r5, r6, lr}
 800204c:	460d      	mov	r5, r1
 800204e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b4f      	ldr	r3, [pc, #316]	@ (8002190 <HAL_RCC_ClockConfig+0x14c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	428b      	cmp	r3, r1
 800205a:	d208      	bcs.n	800206e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205c:	b2cb      	uxtb	r3, r1
 800205e:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <HAL_RCC_ClockConfig+0x14c>)
 8002060:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	428b      	cmp	r3, r1
 800206a:	f040 808b 	bne.w	8002184 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	f013 0f02 	tst.w	r3, #2
 8002074:	d017      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002076:	f013 0f04 	tst.w	r3, #4
 800207a:	d004      	beq.n	8002086 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4a45      	ldr	r2, [pc, #276]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 800207e:	6893      	ldr	r3, [r2, #8]
 8002080:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002084:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f013 0f08 	tst.w	r3, #8
 800208c:	d004      	beq.n	8002098 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208e:	4a41      	ldr	r2, [pc, #260]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 8002090:	6893      	ldr	r3, [r2, #8]
 8002092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002096:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4a3e      	ldr	r2, [pc, #248]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 800209a:	6893      	ldr	r3, [r2, #8]
 800209c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020a0:	68a1      	ldr	r1, [r4, #8]
 80020a2:	430b      	orrs	r3, r1
 80020a4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	f013 0f01 	tst.w	r3, #1
 80020ac:	d032      	beq.n	8002114 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	6863      	ldr	r3, [r4, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d021      	beq.n	80020f8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b4:	1e9a      	subs	r2, r3, #2
 80020b6:	2a01      	cmp	r2, #1
 80020b8:	d925      	bls.n	8002106 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4a36      	ldr	r2, [pc, #216]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f012 0f02 	tst.w	r2, #2
 80020c2:	d061      	beq.n	8002188 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c4:	4933      	ldr	r1, [pc, #204]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 80020c6:	688a      	ldr	r2, [r1, #8]
 80020c8:	f022 0203 	bic.w	r2, r2, #3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80020d0:	f7fe fe6a 	bl	8000da8 <HAL_GetTick>
 80020d4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7fe fe5f 	bl	8000da8 <HAL_GetTick>
 80020ea:	1b80      	subs	r0, r0, r6
 80020ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020f0:	4298      	cmp	r0, r3
 80020f2:	d9f0      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e042      	b.n	800217e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	4a26      	ldr	r2, [pc, #152]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002100:	d1e0      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002102:	2001      	movs	r0, #1
 8002104:	e03b      	b.n	800217e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800210e:	d1d9      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
 8002112:	e034      	b.n	800217e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCC_ClockConfig+0x14c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	42ab      	cmp	r3, r5
 800211e:	d907      	bls.n	8002130 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002120:	b2ea      	uxtb	r2, r5
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_ClockConfig+0x14c>)
 8002124:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	42ab      	cmp	r3, r5
 800212e:	d12d      	bne.n	800218c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	f013 0f04 	tst.w	r3, #4
 8002136:	d006      	beq.n	8002146 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 800213a:	6893      	ldr	r3, [r2, #8]
 800213c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002140:	68e1      	ldr	r1, [r4, #12]
 8002142:	430b      	orrs	r3, r1
 8002144:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	f013 0f08 	tst.w	r3, #8
 800214c:	d007      	beq.n	800215e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4a11      	ldr	r2, [pc, #68]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 8002150:	6893      	ldr	r3, [r2, #8]
 8002152:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002156:	6921      	ldr	r1, [r4, #16]
 8002158:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800215c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215e:	f7ff ff09 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <HAL_RCC_ClockConfig+0x150>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800216a:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <HAL_RCC_ClockConfig+0x154>)
 800216c:	5cd3      	ldrb	r3, [r2, r3]
 800216e:	40d8      	lsrs	r0, r3
 8002170:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x158>)
 8002172:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002174:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x15c>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f7fe fdca 	bl	8000d10 <HAL_InitTick>
  return HAL_OK;
 800217c:	2000      	movs	r0, #0
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
}
 8002182:	4770      	bx	lr
      return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
 8002186:	e7fa      	b.n	800217e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002188:	2001      	movs	r0, #1
 800218a:	e7f8      	b.n	800217e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
 800218e:	e7f6      	b.n	800217e <HAL_RCC_ClockConfig+0x13a>
 8002190:	40023c00 	.word	0x40023c00
 8002194:	40023800 	.word	0x40023800
 8002198:	08004a30 	.word	0x08004a30
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000008 	.word	0x20000008

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80021a4:	4b01      	ldr	r3, [pc, #4]	@ (80021ac <HAL_RCC_GetHCLKFreq+0x8>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b2:	f7ff fff7 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80021be:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80021c2:	40d8      	lsrs	r0, r3
 80021c4:	bd08      	pop	{r3, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08004a28 	.word	0x08004a28

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d2:	f7ff ffe7 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021de:	4a03      	ldr	r2, [pc, #12]	@ (80021ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80021e2:	40d8      	lsrs	r0, r3
 80021e4:	bd08      	pop	{r3, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08004a28 	.word	0x08004a28

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f0:	b530      	push	{r4, r5, lr}
 80021f2:	b083      	sub	sp, #12
 80021f4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021f6:	6803      	ldr	r3, [r0, #0]
 80021f8:	f013 0f05 	tst.w	r3, #5
 80021fc:	d106      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	f013 0f02 	tst.w	r3, #2
 8002204:	d12e      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002206:	2000      	movs	r0, #0
}
 8002208:	b003      	add	sp, #12
 800220a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800220c:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800220e:	2200      	movs	r2, #0
 8002210:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002212:	f7fe fdc9 	bl	8000da8 <HAL_GetTick>
 8002216:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002218:	4b48      	ldr	r3, [pc, #288]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002220:	d006      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002222:	f7fe fdc1 	bl	8000da8 <HAL_GetTick>
 8002226:	1b43      	subs	r3, r0, r5
 8002228:	2b02      	cmp	r3, #2
 800222a:	d9f5      	bls.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
 800222e:	e7eb      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002230:	6862      	ldr	r2, [r4, #4]
 8002232:	68a3      	ldr	r3, [r4, #8]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800223a:	4a40      	ldr	r2, [pc, #256]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800223c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002240:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002242:	2201      	movs	r2, #1
 8002244:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002246:	f7fe fdaf 	bl	8000da8 <HAL_GetTick>
 800224a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800224c:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002254:	d1d3      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002256:	f7fe fda7 	bl	8000da8 <HAL_GetTick>
 800225a:	1b43      	subs	r3, r0, r5
 800225c:	2b02      	cmp	r3, #2
 800225e:	d9f5      	bls.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002260:	2003      	movs	r0, #3
 8002262:	e7d1      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800226a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800226c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800227c:	4a30      	ldr	r2, [pc, #192]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002286:	f7fe fd8f 	bl	8000da8 <HAL_GetTick>
 800228a:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002294:	d106      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe fd87 	bl	8000da8 <HAL_GetTick>
 800229a:	1b43      	subs	r3, r0, r5
 800229c:	2b02      	cmp	r3, #2
 800229e:	d9f5      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 80022a0:	2003      	movs	r0, #3
 80022a2:	e7b1      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80022ac:	d014      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022ae:	68e2      	ldr	r2, [r4, #12]
 80022b0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d00f      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b8:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c0:	491d      	ldr	r1, [pc, #116]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80022c2:	2001      	movs	r0, #1
 80022c4:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c8:	2000      	movs	r0, #0
 80022ca:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80022ce:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d2:	f013 0f01 	tst.w	r3, #1
 80022d6:	d113      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d8:	68e3      	ldr	r3, [r4, #12]
 80022da:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80022de:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80022e2:	d01e      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80022e4:	4a15      	ldr	r2, [pc, #84]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e6:	6893      	ldr	r3, [r2, #8]
 80022e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80022ec:	6093      	str	r3, [r2, #8]
 80022ee:	4913      	ldr	r1, [pc, #76]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022f0:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80022f2:	68e2      	ldr	r2, [r4, #12]
 80022f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80022f8:	4313      	orrs	r3, r2
 80022fa:	670b      	str	r3, [r1, #112]	@ 0x70
  return HAL_OK;
 80022fc:	2000      	movs	r0, #0
 80022fe:	e783      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002300:	f7fe fd52 	bl	8000da8 <HAL_GetTick>
 8002304:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	f013 0f02 	tst.w	r3, #2
 800230e:	d1e3      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe fd4a 	bl	8000da8 <HAL_GetTick>
 8002314:	1b40      	subs	r0, r0, r5
 8002316:	f241 3388 	movw	r3, #5000	@ 0x1388
 800231a:	4298      	cmp	r0, r3
 800231c:	d9f3      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 800231e:	2003      	movs	r0, #3
 8002320:	e772      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002322:	4906      	ldr	r1, [pc, #24]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002324:	688a      	ldr	r2, [r1, #8]
 8002326:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800232a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800232e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
 8002336:	e7da      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002338:	42470000 	.word	0x42470000
 800233c:	40023800 	.word	0x40023800
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002344:	2801      	cmp	r0, #1
 8002346:	d001      	beq.n	800234c <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002348:	2000      	movs	r0, #0
 800234a:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800234c:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 800234e:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002350:	f413 0300 	ands.w	r3, r3, #8388608	@ 0x800000
 8002354:	d002      	beq.n	800235c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002356:	b31b      	cbz	r3, 80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8002358:	4813      	ldr	r0, [pc, #76]	@ (80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800235a:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002364:	d014      	beq.n	8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002370:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002374:	4a0b      	ldr	r2, [pc, #44]	@ (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002376:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 800237a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800237e:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002382:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002386:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800238a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800238e:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002398:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800239a:	fbb3 f3f2 	udiv	r3, r3, r2
 800239e:	e7e9      	b.n	8002374 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80023a0:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return frequency;
}
 80023a2:	4770      	bx	lr
 80023a4:	40023800 	.word	0x40023800
 80023a8:	00bb8000 	.word	0x00bb8000
 80023ac:	00f42400 	.word	0x00f42400

080023b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023ba:	6800      	ldr	r0, [r0, #0]
 80023bc:	f000 fef3 	bl	80031a6 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023c0:	4605      	mov	r5, r0
 80023c2:	b110      	cbz	r0, 80023ca <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 80023c4:	4628      	mov	r0, r5
 80023c6:	b002      	add	sp, #8
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	f001 f984 	bl	80036d8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023d0:	b938      	cbnz	r0, 80023e2 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80023d2:	2301      	movs	r3, #1
 80023d4:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80023d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d00b      	beq.n	80023f4 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80023dc:	462e      	mov	r6, r5
 80023de:	4628      	mov	r0, r5
 80023e0:	e014      	b.n	800240c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80023e2:	2300      	movs	r3, #0
 80023e4:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023e6:	6820      	ldr	r0, [r4, #0]
 80023e8:	f000 fedd 	bl	80031a6 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023ec:	2800      	cmp	r0, #0
 80023ee:	d0f2      	beq.n	80023d6 <SD_PowerON+0x26>
      return errorstate;
 80023f0:	4605      	mov	r5, r0
 80023f2:	e7e7      	b.n	80023c4 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	f000 ffdc 	bl	80033b4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d0ed      	beq.n	80023dc <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002400:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002404:	e7de      	b.n	80023c4 <SD_PowerON+0x14>
    count++;
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	3301      	adds	r3, #1
 800240a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800240c:	9a01      	ldr	r2, [sp, #4]
 800240e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002412:	429a      	cmp	r2, r3
 8002414:	d813      	bhi.n	800243e <SD_PowerON+0x8e>
 8002416:	b996      	cbnz	r6, 800243e <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002418:	2100      	movs	r1, #0
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	f000 ffca 	bl	80033b4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002420:	b9e0      	cbnz	r0, 800245c <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002422:	4912      	ldr	r1, [pc, #72]	@ (800246c <SD_PowerON+0xbc>)
 8002424:	6820      	ldr	r0, [r4, #0]
 8002426:	f001 f8a3 	bl	8003570 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800242a:	4606      	mov	r6, r0
 800242c:	b9c0      	cbnz	r0, 8002460 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800242e:	2100      	movs	r1, #0
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	f000 fea3 	bl	800317c <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002436:	0fc3      	lsrs	r3, r0, #31
 8002438:	d0e5      	beq.n	8002406 <SD_PowerON+0x56>
 800243a:	461e      	mov	r6, r3
 800243c:	e7e3      	b.n	8002406 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800243e:	9a01      	ldr	r2, [sp, #4]
 8002440:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002444:	429a      	cmp	r2, r3
 8002446:	d80e      	bhi.n	8002466 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002448:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 800244c:	d002      	beq.n	8002454 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800244e:	2301      	movs	r3, #1
 8002450:	6463      	str	r3, [r4, #68]	@ 0x44
 8002452:	e7b7      	b.n	80023c4 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8002454:	2200      	movs	r2, #0
 8002456:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 8002458:	461d      	mov	r5, r3
 800245a:	e7b3      	b.n	80023c4 <SD_PowerON+0x14>
      return errorstate;
 800245c:	4605      	mov	r5, r0
 800245e:	e7b1      	b.n	80023c4 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002460:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002464:	e7ae      	b.n	80023c4 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002466:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800246a:	e7ab      	b.n	80023c4 <SD_PowerON+0x14>
 800246c:	c1100000 	.word	0xc1100000

08002470 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002472:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  dataremaining = hsd->RxXferSize;
 8002474:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 8002476:	b9a6      	cbnz	r6, 80024a2 <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f000 fe5b 	bl	8003136 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8002480:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002482:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002486:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002488:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800248c:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800248e:	0e00      	lsrs	r0, r0, #24
 8002490:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8002492:	3404      	adds	r4, #4
      dataremaining--;
 8002494:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8002496:	3501      	adds	r5, #1
 8002498:	2d07      	cmp	r5, #7
 800249a:	d9ee      	bls.n	800247a <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 800249c:	62bc      	str	r4, [r7, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800249e:	62fe      	str	r6, [r7, #44]	@ 0x2c
}
 80024a0:	e7ea      	b.n	8002478 <SD_Read_IT+0x8>
 80024a2:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 80024a4:	2500      	movs	r5, #0
 80024a6:	e7f7      	b.n	8002498 <SD_Read_IT+0x28>

080024a8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80024ac:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 80024ae:	6a46      	ldr	r6, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 80024b0:	b9de      	cbnz	r6, 80024ea <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 80024b2:	b003      	add	sp, #12
 80024b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 80024b6:	7823      	ldrb	r3, [r4, #0]
 80024b8:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80024ba:	7862      	ldrb	r2, [r4, #1]
 80024bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024c0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80024c2:	78a2      	ldrb	r2, [r4, #2]
 80024c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024c8:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80024ca:	78e2      	ldrb	r2, [r4, #3]
 80024cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024d0:	9301      	str	r3, [sp, #4]
      tmp++;
 80024d2:	3404      	adds	r4, #4
      dataremaining--;
 80024d4:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80024d6:	a901      	add	r1, sp, #4
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f000 fe2f 	bl	800313c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80024de:	3501      	adds	r5, #1
 80024e0:	2d07      	cmp	r5, #7
 80024e2:	d9e8      	bls.n	80024b6 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 80024e4:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 80024e6:	627e      	str	r6, [r7, #36]	@ 0x24
}
 80024e8:	e7e3      	b.n	80024b2 <SD_Write_IT+0xa>
 80024ea:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 80024ec:	2500      	movs	r5, #0
 80024ee:	e7f7      	b.n	80024e0 <SD_Write_IT+0x38>

080024f0 <SD_FindSCR>:
{
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	4604      	mov	r4, r0
 80024f6:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7fe fc56 	bl	8000da8 <HAL_GetTick>
 80024fc:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002504:	2108      	movs	r1, #8
 8002506:	6820      	ldr	r0, [r4, #0]
 8002508:	f000 ff0a 	bl	8003320 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800250c:	4605      	mov	r5, r0
 800250e:	b110      	cbz	r0, 8002516 <SD_FindSCR+0x26>
}
 8002510:	4628      	mov	r0, r5
 8002512:	b009      	add	sp, #36	@ 0x24
 8002514:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002516:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002518:	0409      	lsls	r1, r1, #16
 800251a:	6820      	ldr	r0, [r4, #0]
 800251c:	f000 ff4a 	bl	80033b4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002520:	4605      	mov	r5, r0
 8002522:	2800      	cmp	r0, #0
 8002524:	d1f4      	bne.n	8002510 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800252a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800252c:	2308      	movs	r3, #8
 800252e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002530:	2330      	movs	r3, #48	@ 0x30
 8002532:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002534:	2302      	movs	r3, #2
 8002536:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002538:	2300      	movs	r3, #0
 800253a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800253c:	2301      	movs	r3, #1
 800253e:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002540:	a902      	add	r1, sp, #8
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	f000 fe1d 	bl	8003182 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002548:	6820      	ldr	r0, [r4, #0]
 800254a:	f000 ff63 	bl	8003414 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800254e:	4605      	mov	r5, r0
 8002550:	b158      	cbz	r0, 800256a <SD_FindSCR+0x7a>
 8002552:	e7dd      	b.n	8002510 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002554:	f000 fdef 	bl	8003136 <SDIO_ReadFIFO>
 8002558:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 800255c:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800255e:	f7fe fc23 	bl	8000da8 <HAL_GetTick>
 8002562:	1b83      	subs	r3, r0, r6
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002568:	d043      	beq.n	80025f2 <SD_FindSCR+0x102>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800256e:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8002572:	d107      	bne.n	8002584 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002574:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002576:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800257a:	d1eb      	bne.n	8002554 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800257c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800257e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002582:	d1ec      	bne.n	800255e <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002584:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002586:	f013 0f08 	tst.w	r3, #8
 800258a:	d129      	bne.n	80025e0 <SD_FindSCR+0xf0>
 800258c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800258e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002592:	d125      	bne.n	80025e0 <SD_FindSCR+0xf0>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002594:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002596:	f013 0f02 	tst.w	r3, #2
 800259a:	d124      	bne.n	80025e6 <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800259c:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800259e:	f015 0520 	ands.w	r5, r5, #32
 80025a2:	d123      	bne.n	80025ec <SD_FindSCR+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80025a4:	f240 533a 	movw	r3, #1338	@ 0x53a
 80025a8:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80025aa:	9a01      	ldr	r2, [sp, #4]
 80025ac:	0213      	lsls	r3, r2, #8
 80025ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80025b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80025b6:	0a11      	lsrs	r1, r2, #8
 80025b8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80025bc:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80025be:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80025c2:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80025c4:	9a00      	ldr	r2, [sp, #0]
 80025c6:	0213      	lsls	r3, r2, #8
 80025c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80025cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80025d0:	0a11      	lsrs	r1, r2, #8
 80025d2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80025d6:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80025d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80025dc:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80025de:	e797      	b.n	8002510 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80025e0:	2508      	movs	r5, #8
 80025e2:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80025e4:	e794      	b.n	8002510 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80025e6:	2502      	movs	r5, #2
 80025e8:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80025ea:	e791      	b.n	8002510 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80025ec:	2520      	movs	r5, #32
 80025ee:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80025f0:	e78e      	b.n	8002510 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80025f2:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 80025f6:	e78b      	b.n	8002510 <SD_FindSCR+0x20>

080025f8 <SD_WideBus_Enable>:
{
 80025f8:	b510      	push	{r4, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80025fe:	2100      	movs	r1, #0
 8002600:	9100      	str	r1, [sp, #0]
 8002602:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002604:	6800      	ldr	r0, [r0, #0]
 8002606:	f000 fdb9 	bl	800317c <SDIO_GetResponse>
 800260a:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800260e:	d113      	bne.n	8002638 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8002610:	4669      	mov	r1, sp
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff6c 	bl	80024f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002618:	b980      	cbnz	r0, 800263c <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002620:	d00e      	beq.n	8002640 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002622:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002624:	0409      	lsls	r1, r1, #16
 8002626:	6820      	ldr	r0, [r4, #0]
 8002628:	f000 fec4 	bl	80033b4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800262c:	b930      	cbnz	r0, 800263c <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800262e:	2102      	movs	r1, #2
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	f000 fed7 	bl	80033e4 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002636:	e001      	b.n	800263c <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002638:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 800263c:	b002      	add	sp, #8
 800263e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002640:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002644:	e7fa      	b.n	800263c <SD_WideBus_Enable+0x44>

08002646 <SD_WideBus_Disable>:
{
 8002646:	b510      	push	{r4, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800264c:	2100      	movs	r1, #0
 800264e:	9100      	str	r1, [sp, #0]
 8002650:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002652:	6800      	ldr	r0, [r0, #0]
 8002654:	f000 fd92 	bl	800317c <SDIO_GetResponse>
 8002658:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800265c:	d113      	bne.n	8002686 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800265e:	4669      	mov	r1, sp
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff ff45 	bl	80024f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002666:	b980      	cbnz	r0, 800268a <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002668:	9b01      	ldr	r3, [sp, #4]
 800266a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800266e:	d00e      	beq.n	800268e <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002670:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002672:	0409      	lsls	r1, r1, #16
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	f000 fe9d 	bl	80033b4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800267a:	b930      	cbnz	r0, 800268a <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800267c:	2100      	movs	r1, #0
 800267e:	6820      	ldr	r0, [r4, #0]
 8002680:	f000 feb0 	bl	80033e4 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002684:	e001      	b.n	800268a <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002686:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 800268a:	b002      	add	sp, #8
 800268c:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800268e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002692:	e7fa      	b.n	800268a <SD_WideBus_Disable+0x44>

08002694 <SD_SendStatus>:
{
 8002694:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8002696:	b181      	cbz	r1, 80026ba <SD_SendStatus+0x26>
 8002698:	4604      	mov	r4, r0
 800269a:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800269c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800269e:	0409      	lsls	r1, r1, #16
 80026a0:	6800      	ldr	r0, [r0, #0]
 80026a2:	f000 fecf 	bl	8003444 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80026a6:	4605      	mov	r5, r0
 80026a8:	b108      	cbz	r0, 80026ae <SD_SendStatus+0x1a>
}
 80026aa:	4628      	mov	r0, r5
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026ae:	2100      	movs	r1, #0
 80026b0:	6820      	ldr	r0, [r4, #0]
 80026b2:	f000 fd63 	bl	800317c <SDIO_GetResponse>
 80026b6:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80026b8:	e7f7      	b.n	80026aa <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80026ba:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 80026be:	e7f4      	b.n	80026aa <SD_SendStatus+0x16>

080026c0 <HAL_SD_TxCpltCallback>:
}
 80026c0:	4770      	bx	lr

080026c2 <HAL_SD_RxCpltCallback>:
}
 80026c2:	4770      	bx	lr

080026c4 <HAL_SD_ErrorCallback>:
}
 80026c4:	4770      	bx	lr

080026c6 <HAL_SD_AbortCallback>:
}
 80026c6:	4770      	bx	lr

080026c8 <HAL_SD_GetCardCSD>:
{
 80026c8:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80026ca:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80026cc:	0f92      	lsrs	r2, r2, #30
 80026ce:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80026d0:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80026d2:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80026d6:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80026d8:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 80026dc:	f002 0203 	and.w	r2, r2, #3
 80026e0:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80026e2:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 80026e6:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80026e8:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 80026ec:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80026ee:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 80026f2:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80026f4:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 80026f6:	0d12      	lsrs	r2, r2, #20
 80026f8:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80026fa:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 80026fe:	f002 020f 	and.w	r2, r2, #15
 8002702:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002704:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002706:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800270a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800270c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800270e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002712:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002714:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002716:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800271a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800271c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800271e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002722:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002724:	2200      	movs	r2, #0
 8002726:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002728:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800272a:	2a00      	cmp	r2, #0
 800272c:	f040 8086 	bne.w	800283c <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002730:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8002732:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002736:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 800273a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800273c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8002740:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002742:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002744:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8002748:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800274a:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 800274e:	f002 0207 	and.w	r2, r2, #7
 8002752:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002754:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002756:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800275a:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800275c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800275e:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8002762:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002764:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002766:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800276a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800276c:	690a      	ldr	r2, [r1, #16]
 800276e:	3201      	adds	r2, #1
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002772:	7e08      	ldrb	r0, [r1, #24]
 8002774:	f000 0007 	and.w	r0, r0, #7
 8002778:	3002      	adds	r0, #2
 800277a:	4082      	lsls	r2, r0
 800277c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800277e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8002782:	f00c 0c0f 	and.w	ip, ip, #15
 8002786:	2001      	movs	r0, #1
 8002788:	fa00 f00c 	lsl.w	r0, r0, ip
 800278c:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800278e:	0a40      	lsrs	r0, r0, #9
 8002790:	fb00 f202 	mul.w	r2, r0, r2
 8002794:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279a:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800279c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800279e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80027a2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80027a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027a6:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80027aa:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80027ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027b2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80027b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027b6:	0fd2      	lsrs	r2, r2, #31
 80027b8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80027ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027bc:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80027c0:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80027c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027c4:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80027c8:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80027ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027cc:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80027d0:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80027d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027d4:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80027d8:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80027dc:	2000      	movs	r0, #0
 80027de:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80027e2:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 80027e6:	f002 0201 	and.w	r2, r2, #1
 80027ea:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80027ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027f0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80027f4:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80027f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027fa:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80027fe:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002804:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002808:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800280c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800280e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002812:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002818:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800281c:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002820:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002822:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8002826:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002830:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8002834:	2301      	movs	r3, #1
 8002836:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 800283a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800283c:	2a01      	cmp	r2, #1
 800283e:	d111      	bne.n	8002864 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002840:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002842:	0412      	lsls	r2, r2, #16
 8002844:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8002848:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 800284c:	4302      	orrs	r2, r0
 800284e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002850:	690a      	ldr	r2, [r1, #16]
 8002852:	3201      	adds	r2, #1
 8002854:	0292      	lsls	r2, r2, #10
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800285a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002860:	661a      	str	r2, [r3, #96]	@ 0x60
 8002862:	e79b      	b.n	800279c <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002864:	6802      	ldr	r2, [r0, #0]
 8002866:	4905      	ldr	r1, [pc, #20]	@ (800287c <HAL_SD_GetCardCSD+0x1b4>)
 8002868:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800286a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800286c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002870:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002872:	2001      	movs	r0, #1
 8002874:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	004005ff 	.word	0x004005ff

08002880 <SD_InitCard>:
{
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	b090      	sub	sp, #64	@ 0x40
 8002884:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8002886:	2301      	movs	r3, #1
 8002888:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800288c:	6800      	ldr	r0, [r0, #0]
 800288e:	f000 fc5e 	bl	800314e <SDIO_GetPowerState>
 8002892:	2800      	cmp	r0, #0
 8002894:	d06c      	beq.n	8002970 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002896:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002898:	2b03      	cmp	r3, #3
 800289a:	d145      	bne.n	8002928 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800289c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d15d      	bne.n	800295e <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80028a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d01d      	beq.n	80028e4 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80028a8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80028ac:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028ae:	0409      	lsls	r1, r1, #16
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	f000 fe22 	bl	80034fa <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028b6:	4605      	mov	r5, r0
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d15b      	bne.n	8002974 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80028bc:	2100      	movs	r1, #0
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	f000 fc5c 	bl	800317c <SDIO_GetResponse>
 80028c4:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80028c6:	2104      	movs	r1, #4
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	f000 fc57 	bl	800317c <SDIO_GetResponse>
 80028ce:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80028d0:	2108      	movs	r1, #8
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	f000 fc52 	bl	800317c <SDIO_GetResponse>
 80028d8:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80028da:	210c      	movs	r1, #12
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	f000 fc4d 	bl	800317c <SDIO_GetResponse>
 80028e2:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80028e4:	2104      	movs	r1, #4
 80028e6:	6820      	ldr	r0, [r4, #0]
 80028e8:	f000 fc48 	bl	800317c <SDIO_GetResponse>
 80028ec:	0d00      	lsrs	r0, r0, #20
 80028ee:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80028f0:	a905      	add	r1, sp, #20
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7ff fee8 	bl	80026c8 <HAL_SD_GetCardCSD>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d13e      	bne.n	800297a <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80028fc:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80028fe:	0412      	lsls	r2, r2, #16
 8002900:	2300      	movs	r3, #0
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	f000 fd3e 	bl	8003384 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002908:	4605      	mov	r5, r0
 800290a:	bb98      	cbnz	r0, 8002974 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800290c:	4623      	mov	r3, r4
 800290e:	f853 6b10 	ldr.w	r6, [r3], #16
 8002912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002916:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800291a:	3404      	adds	r4, #4
 800291c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002920:	4630      	mov	r0, r6
 8002922:	f000 fbef 	bl	8003104 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8002926:	e025      	b.n	8002974 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	f000 fdd1 	bl	80034d0 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800292e:	4605      	mov	r5, r0
 8002930:	bb00      	cbnz	r0, 8002974 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002932:	2100      	movs	r1, #0
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	f000 fc21 	bl	800317c <SDIO_GetResponse>
 800293a:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800293c:	2104      	movs	r1, #4
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	f000 fc1c 	bl	800317c <SDIO_GetResponse>
 8002944:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002946:	2108      	movs	r1, #8
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	f000 fc17 	bl	800317c <SDIO_GetResponse>
 800294e:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002950:	210c      	movs	r1, #12
 8002952:	6820      	ldr	r0, [r4, #0]
 8002954:	f000 fc12 	bl	800317c <SDIO_GetResponse>
 8002958:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 800295c:	e79e      	b.n	800289c <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800295e:	f10d 0112 	add.w	r1, sp, #18
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	f000 fe6e 	bl	8003644 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002968:	4605      	mov	r5, r0
 800296a:	2800      	cmp	r0, #0
 800296c:	d099      	beq.n	80028a2 <SD_InitCard+0x22>
 800296e:	e001      	b.n	8002974 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002970:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 8002974:	4628      	mov	r0, r5
 8002976:	b010      	add	sp, #64	@ 0x40
 8002978:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800297a:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800297e:	e7f9      	b.n	8002974 <SD_InitCard+0xf4>

08002980 <HAL_SD_InitCard>:
{
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002986:	2300      	movs	r3, #0
 8002988:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800298a:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800298c:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800298e:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002990:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002992:	2376      	movs	r3, #118	@ 0x76
 8002994:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8002996:	ab0a      	add	r3, sp, #40	@ 0x28
 8002998:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800299c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80029a0:	ab04      	add	r3, sp, #16
 80029a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a4:	6820      	ldr	r0, [r4, #0]
 80029a6:	f000 fbad 	bl	8003104 <SDIO_Init>
  if(status != HAL_OK)
 80029aa:	b118      	cbz	r0, 80029b4 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80029ac:	2501      	movs	r5, #1
}
 80029ae:	4628      	mov	r0, r5
 80029b0:	b00a      	add	sp, #40	@ 0x28
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80029b6:	4e1a      	ldr	r6, [pc, #104]	@ (8002a20 <HAL_SD_InitCard+0xa0>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	f000 fbc1 	bl	8003146 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80029c4:	2301      	movs	r3, #1
 80029c6:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 80029ca:	2002      	movs	r0, #2
 80029cc:	f7fe f9f2 	bl	8000db4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fced 	bl	80023b0 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029d6:	b130      	cbz	r0, 80029e6 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80029d8:	2501      	movs	r5, #1
 80029da:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80029de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029e0:	4303      	orrs	r3, r0
 80029e2:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80029e4:	e7e3      	b.n	80029ae <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff ff4a 	bl	8002880 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029ec:	b130      	cbz	r0, 80029fc <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 80029ee:	2501      	movs	r5, #1
 80029f0:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80029f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029f6:	4303      	orrs	r3, r0
 80029f8:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80029fa:	e7d8      	b.n	80029ae <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a00:	6820      	ldr	r0, [r4, #0]
 8002a02:	f000 fc8d 	bl	8003320 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d0d1      	beq.n	80029ae <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	4905      	ldr	r1, [pc, #20]	@ (8002a24 <HAL_SD_InitCard+0xa4>)
 8002a0e:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002a10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a12:	4303      	orrs	r3, r0
 8002a14:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a16:	2501      	movs	r5, #1
 8002a18:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002a1c:	e7c7      	b.n	80029ae <HAL_SD_InitCard+0x2e>
 8002a1e:	bf00      	nop
 8002a20:	42258000 	.word	0x42258000
 8002a24:	004005ff 	.word	0x004005ff

08002a28 <HAL_SD_Init>:
  if(hsd == NULL)
 8002a28:	b1a8      	cbz	r0, 8002a56 <HAL_SD_Init+0x2e>
{
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8002a2e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8002a32:	b163      	cbz	r3, 8002a4e <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8002a34:	2303      	movs	r3, #3
 8002a36:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7ff ffa0 	bl	8002980 <HAL_SD_InitCard>
 8002a40:	b958      	cbnz	r0, 8002a5a <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a42:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002a44:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002a4c:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8002a4e:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002a50:	f7fd ffee 	bl	8000a30 <HAL_SD_MspInit>
 8002a54:	e7ee      	b.n	8002a34 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8002a56:	2001      	movs	r0, #1
}
 8002a58:	4770      	bx	lr
    return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	e7f6      	b.n	8002a4c <HAL_SD_Init+0x24>
	...

08002a60 <HAL_SD_ConfigWideBusOperation>:
{
 8002a60:	b530      	push	{r4, r5, lr}
 8002a62:	b08b      	sub	sp, #44	@ 0x2c
 8002a64:	4604      	mov	r4, r0
 8002a66:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d01c      	beq.n	8002aae <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002a74:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002a78:	d008      	beq.n	8002a8c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002a7a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8002a7e:	d00a      	beq.n	8002a96 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002a80:	b179      	cbz	r1, 8002aa2 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a82:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002a84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a88:	6383      	str	r3, [r0, #56]	@ 0x38
 8002a8a:	e014      	b.n	8002ab6 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a8c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6383      	str	r3, [r0, #56]	@ 0x38
 8002a94:	e00f      	b.n	8002ab6 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8002a96:	f7ff fdaf 	bl	80025f8 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8002a9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a9c:	4303      	orrs	r3, r0
 8002a9e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002aa0:	e009      	b.n	8002ab6 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8002aa2:	f7ff fdd0 	bl	8002646 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8002aa6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002aa8:	4303      	orrs	r3, r0
 8002aaa:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002aac:	e003      	b.n	8002ab6 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002aae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002ab6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ab8:	b1c3      	cbz	r3, 8002aec <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <HAL_SD_ConfigWideBusOperation+0xbc>)
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ac0:	2501      	movs	r5, #1
 8002ac2:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002ac6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aca:	6820      	ldr	r0, [r4, #0]
 8002acc:	f000 fc28 	bl	8003320 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ad0:	b130      	cbz	r0, 8002ae0 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	4911      	ldr	r1, [pc, #68]	@ (8002b1c <HAL_SD_ConfigWideBusOperation+0xbc>)
 8002ad6:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002ad8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ada:	4303      	orrs	r3, r0
 8002adc:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8002ade:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	b00b      	add	sp, #44	@ 0x2c
 8002aea:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002aec:	6863      	ldr	r3, [r4, #4]
 8002aee:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002af0:	68a3      	ldr	r3, [r4, #8]
 8002af2:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002af4:	68e3      	ldr	r3, [r4, #12]
 8002af6:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8002af8:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002afa:	6963      	ldr	r3, [r4, #20]
 8002afc:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002afe:	69a3      	ldr	r3, [r4, #24]
 8002b00:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8002b02:	ab0a      	add	r3, sp, #40	@ 0x28
 8002b04:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002b08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002b0c:	ab04      	add	r3, sp, #16
 8002b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	f000 faf7 	bl	8003104 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2500      	movs	r5, #0
 8002b18:	e7d5      	b.n	8002ac6 <HAL_SD_ConfigWideBusOperation+0x66>
 8002b1a:	bf00      	nop
 8002b1c:	004005ff 	.word	0x004005ff

08002b20 <HAL_SD_GetCardState>:
{
 8002b20:	b510      	push	{r4, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8002b2a:	a901      	add	r1, sp, #4
 8002b2c:	f7ff fdb2 	bl	8002694 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b30:	b110      	cbz	r0, 8002b38 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8002b32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b34:	4303      	orrs	r3, r0
 8002b36:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8002b38:	9801      	ldr	r0, [sp, #4]
 8002b3a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd10      	pop	{r4, pc}

08002b42 <SD_DMATxAbort>:
{
 8002b42:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b44:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff ffe6 	bl	8002b20 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b5e:	3805      	subs	r0, #5
 8002b60:	2801      	cmp	r0, #1
 8002b62:	d905      	bls.n	8002b70 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002b64:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b66:	b953      	cbnz	r3, 8002b7e <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff fdac 	bl	80026c6 <HAL_SD_AbortCallback>
}
 8002b6e:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	f000 fbed 	bl	8003350 <SDMMC_CmdStopTransfer>
 8002b76:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b78:	4303      	orrs	r3, r0
 8002b7a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002b7c:	e7f2      	b.n	8002b64 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f7ff fda0 	bl	80026c4 <HAL_SD_ErrorCallback>
}
 8002b84:	e7f3      	b.n	8002b6e <SD_DMATxAbort+0x2c>

08002b86 <SD_DMARxAbort>:
{
 8002b86:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b88:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff ffc4 	bl	8002b20 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002ba2:	3805      	subs	r0, #5
 8002ba4:	2801      	cmp	r0, #1
 8002ba6:	d905      	bls.n	8002bb4 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002ba8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002baa:	b953      	cbnz	r3, 8002bc2 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff fd8a 	bl	80026c6 <HAL_SD_AbortCallback>
}
 8002bb2:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	f000 fbcb 	bl	8003350 <SDMMC_CmdStopTransfer>
 8002bba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002bbc:	4303      	orrs	r3, r0
 8002bbe:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002bc0:	e7f2      	b.n	8002ba8 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff fd7e 	bl	80026c4 <HAL_SD_ErrorCallback>
}
 8002bc8:	e7f3      	b.n	8002bb2 <SD_DMARxAbort+0x2c>
	...

08002bcc <HAL_SD_IRQHandler>:
{
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8002bd0:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002bd2:	6803      	ldr	r3, [r0, #0]
 8002bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bd6:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002bda:	d002      	beq.n	8002be2 <HAL_SD_IRQHandler+0x16>
 8002bdc:	f015 0f08 	tst.w	r5, #8
 8002be0:	d128      	bne.n	8002c34 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002be4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002be8:	d05a      	beq.n	8002ca0 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002bea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002bf0:	6822      	ldr	r2, [r4, #0]
 8002bf2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002bf4:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8002bf8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8002bfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002bfe:	6822      	ldr	r2, [r4, #0]
 8002c00:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8002c08:	f015 0f08 	tst.w	r5, #8
 8002c0c:	d026      	beq.n	8002c5c <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002c0e:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8002c12:	d112      	bne.n	8002c3a <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002c26:	f015 0f03 	tst.w	r5, #3
 8002c2a:	d013      	beq.n	8002c54 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff fd48 	bl	80026c2 <HAL_SD_RxCpltCallback>
 8002c32:	e001      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8002c34:	f7ff fc1c 	bl	8002470 <SD_Read_IT>
}
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c3a:	6820      	ldr	r0, [r4, #0]
 8002c3c:	f000 fb88 	bl	8003350 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c40:	4603      	mov	r3, r0
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d0e6      	beq.n	8002c14 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8002c46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7ff fd39 	bl	80026c4 <HAL_SD_ErrorCallback>
 8002c52:	e7df      	b.n	8002c14 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fd33 	bl	80026c0 <HAL_SD_TxCpltCallback>
 8002c5a:	e7ed      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c5c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002c60:	d0ea      	beq.n	8002c38 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002c62:	f015 0f20 	tst.w	r5, #32
 8002c66:	d10e      	bne.n	8002c86 <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002c68:	f015 0f03 	tst.w	r5, #3
 8002c6c:	d1e4      	bne.n	8002c38 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c72:	f023 0308 	bic.w	r3, r3, #8
 8002c76:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7ff fd1e 	bl	80026c0 <HAL_SD_TxCpltCallback>
 8002c84:	e7d8      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	f000 fb62 	bl	8003350 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d0ea      	beq.n	8002c68 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8002c92:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c94:	4313      	orrs	r3, r2
 8002c96:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff fd13 	bl	80026c4 <HAL_SD_ErrorCallback>
 8002c9e:	e7e3      	b.n	8002c68 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ca2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8002ca6:	d002      	beq.n	8002cae <HAL_SD_IRQHandler+0xe2>
 8002ca8:	f015 0f08 	tst.w	r5, #8
 8002cac:	d155      	bne.n	8002d5a <HAL_SD_IRQHandler+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002cae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cb0:	f240 223a 	movw	r2, #570	@ 0x23a
 8002cb4:	4211      	tst	r1, r2
 8002cb6:	d0bf      	beq.n	8002c38 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cba:	f012 0f02 	tst.w	r2, #2
 8002cbe:	d003      	beq.n	8002cc8 <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002cc0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002cc2:	f042 0202 	orr.w	r2, r2, #2
 8002cc6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cca:	f012 0f08 	tst.w	r2, #8
 8002cce:	d003      	beq.n	8002cd8 <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cda:	f012 0f20 	tst.w	r2, #32
 8002cde:	d003      	beq.n	8002ce8 <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002ce0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002ce2:	f042 0220 	orr.w	r2, r2, #32
 8002ce6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cea:	f012 0f10 	tst.w	r2, #16
 8002cee:	d003      	beq.n	8002cf8 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002cf0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002cf2:	f042 0210 	orr.w	r2, r2, #16
 8002cf6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfa:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8002cfe:	d003      	beq.n	8002d08 <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002d02:	f042 0208 	orr.w	r2, r2, #8
 8002d06:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002d08:	f240 723a 	movw	r2, #1850	@ 0x73a
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002d0e:	6822      	ldr	r2, [r4, #0]
 8002d10:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002d12:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8002d16:	f023 0302 	bic.w	r3, r3, #2
 8002d1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d1c:	6820      	ldr	r0, [r4, #0]
 8002d1e:	f000 fb17 	bl	8003350 <SDMMC_CmdStopTransfer>
 8002d22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d24:	4303      	orrs	r3, r0
 8002d26:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002d28:	f015 0f08 	tst.w	r5, #8
 8002d2c:	d119      	bne.n	8002d62 <HAL_SD_IRQHandler+0x196>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002d2e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002d32:	d081      	beq.n	8002c38 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002d34:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8002d38:	d11c      	bne.n	8002d74 <HAL_SD_IRQHandler+0x1a8>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002d3a:	f015 0f03 	tst.w	r5, #3
 8002d3e:	d026      	beq.n	8002d8e <HAL_SD_IRQHandler+0x1c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <HAL_SD_IRQHandler+0x1d8>)
 8002d44:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d46:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002d48:	f7fe f990 	bl	800106c <HAL_DMA_Abort_IT>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	f43f af73 	beq.w	8002c38 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 8002d52:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002d54:	f7ff ff17 	bl	8002b86 <SD_DMARxAbort>
 8002d58:	e76e      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff fba4 	bl	80024a8 <SD_Write_IT>
 8002d60:	e76a      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff fca9 	bl	80026c4 <HAL_SD_ErrorCallback>
 8002d72:	e761      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002d74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002d76:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <HAL_SD_IRQHandler+0x1dc>)
 8002d78:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d7a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002d7c:	f7fe f976 	bl	800106c <HAL_DMA_Abort_IT>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	f43f af59 	beq.w	8002c38 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8002d86:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002d88:	f7ff fedb 	bl	8002b42 <SD_DMATxAbort>
 8002d8c:	e754      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d92:	2201      	movs	r2, #1
 8002d94:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d98:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7ff fc93 	bl	80026c6 <HAL_SD_AbortCallback>
}
 8002da0:	e74a      	b.n	8002c38 <HAL_SD_IRQHandler+0x6c>
 8002da2:	bf00      	nop
 8002da4:	08002b87 	.word	0x08002b87
 8002da8:	08002b43 	.word	0x08002b43

08002dac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	f102 030c 	add.w	r3, r2, #12
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	320c      	adds	r2, #12
 8002dbc:	e842 3100 	strex	r1, r3, [r2]
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	d1f3      	bne.n	8002dac <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	f102 0314 	add.w	r3, r2, #20
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	3214      	adds	r2, #20
 8002dd4:	e842 3100 	strex	r1, r3, [r2]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	d1f3      	bne.n	8002dc4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ddc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d005      	beq.n	8002dee <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de2:	2320      	movs	r3, #32
 8002de4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	2300      	movs	r3, #0
 8002dea:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002dec:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	f102 030c 	add.w	r3, r2, #12
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	320c      	adds	r2, #12
 8002dfe:	e842 3100 	strex	r1, r3, [r2]
 8002e02:	2900      	cmp	r1, #0
 8002e04:	d1f3      	bne.n	8002dee <UART_EndRxTransfer+0x42>
 8002e06:	e7ec      	b.n	8002de2 <UART_EndRxTransfer+0x36>

08002e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e0c:	6802      	ldr	r2, [r0, #0]
 8002e0e:	6913      	ldr	r3, [r2, #16]
 8002e10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e14:	68c1      	ldr	r1, [r0, #12]
 8002e16:	430b      	orrs	r3, r1
 8002e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e1a:	6883      	ldr	r3, [r0, #8]
 8002e1c:	6902      	ldr	r2, [r0, #16]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	6943      	ldr	r3, [r0, #20]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	69c3      	ldr	r3, [r0, #28]
 8002e26:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002e28:	6801      	ldr	r1, [r0, #0]
 8002e2a:	68cb      	ldr	r3, [r1, #12]
 8002e2c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002e30:	f023 030c 	bic.w	r3, r3, #12
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e38:	6802      	ldr	r2, [r0, #0]
 8002e3a:	6953      	ldr	r3, [r2, #20]
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e40:	6981      	ldr	r1, [r0, #24]
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e46:	6803      	ldr	r3, [r0, #0]
 8002e48:	4a31      	ldr	r2, [pc, #196]	@ (8002f10 <UART_SetConfig+0x108>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d006      	beq.n	8002e5c <UART_SetConfig+0x54>
 8002e4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d002      	beq.n	8002e5c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7ff f9ab 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	e001      	b.n	8002e60 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7ff f9b8 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e60:	69e3      	ldr	r3, [r4, #28]
 8002e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e66:	d029      	beq.n	8002ebc <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	1803      	adds	r3, r0, r0
 8002e6c:	4149      	adcs	r1, r1
 8002e6e:	181b      	adds	r3, r3, r0
 8002e70:	f141 0100 	adc.w	r1, r1, #0
 8002e74:	00c9      	lsls	r1, r1, #3
 8002e76:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1818      	adds	r0, r3, r0
 8002e7e:	6863      	ldr	r3, [r4, #4]
 8002e80:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002e84:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002e88:	f141 0100 	adc.w	r1, r1, #0
 8002e8c:	f7fd f9f0 	bl	8000270 <__aeabi_uldivmod>
 8002e90:	4a20      	ldr	r2, [pc, #128]	@ (8002f14 <UART_SetConfig+0x10c>)
 8002e92:	fba2 3100 	umull	r3, r1, r2, r0
 8002e96:	0949      	lsrs	r1, r1, #5
 8002e98:	2364      	movs	r3, #100	@ 0x64
 8002e9a:	fb03 0311 	mls	r3, r3, r1, r0
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	3332      	adds	r3, #50	@ 0x32
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002eac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }
}
 8002eba:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	1802      	adds	r2, r0, r0
 8002ec0:	eb43 0103 	adc.w	r1, r3, r3
 8002ec4:	1812      	adds	r2, r2, r0
 8002ec6:	f141 0100 	adc.w	r1, r1, #0
 8002eca:	00c9      	lsls	r1, r1, #3
 8002ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed0:	00d2      	lsls	r2, r2, #3
 8002ed2:	1810      	adds	r0, r2, r0
 8002ed4:	f141 0100 	adc.w	r1, r1, #0
 8002ed8:	6862      	ldr	r2, [r4, #4]
 8002eda:	1892      	adds	r2, r2, r2
 8002edc:	415b      	adcs	r3, r3
 8002ede:	f7fd f9c7 	bl	8000270 <__aeabi_uldivmod>
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f14 <UART_SetConfig+0x10c>)
 8002ee4:	fba2 3100 	umull	r3, r1, r2, r0
 8002ee8:	0949      	lsrs	r1, r1, #5
 8002eea:	2364      	movs	r3, #100	@ 0x64
 8002eec:	fb03 0311 	mls	r3, r3, r1, r0
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	3332      	adds	r3, #50	@ 0x32
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	005a      	lsls	r2, r3, #1
 8002efc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002f00:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
 8002f0e:	e7d4      	b.n	8002eba <UART_SetConfig+0xb2>
 8002f10:	40011000 	.word	0x40011000
 8002f14:	51eb851f 	.word	0x51eb851f

08002f18 <UART_WaitOnFlagUntilTimeout>:
{
 8002f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	4605      	mov	r5, r0
 8002f20:	460e      	mov	r6, r1
 8002f22:	4617      	mov	r7, r2
 8002f24:	4699      	mov	r9, r3
 8002f26:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	681c      	ldr	r4, [r3, #0]
 8002f2e:	ea36 0404 	bics.w	r4, r6, r4
 8002f32:	bf0c      	ite	eq
 8002f34:	2401      	moveq	r4, #1
 8002f36:	2400      	movne	r4, #0
 8002f38:	42bc      	cmp	r4, r7
 8002f3a:	d128      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002f3c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002f40:	d0f3      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fd ff31 	bl	8000da8 <HAL_GetTick>
 8002f46:	eba0 0009 	sub.w	r0, r0, r9
 8002f4a:	4540      	cmp	r0, r8
 8002f4c:	d823      	bhi.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002f4e:	f1b8 0f00 	cmp.w	r8, #0
 8002f52:	d022      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	f012 0f04 	tst.w	r2, #4
 8002f5c:	d0e5      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
 8002f5e:	2e80      	cmp	r6, #128	@ 0x80
 8002f60:	d0e3      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
 8002f62:	2e40      	cmp	r6, #64	@ 0x40
 8002f64:	d0e1      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f012 0f08 	tst.w	r2, #8
 8002f6c:	d0dd      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f6e:	2400      	movs	r4, #0
 8002f70:	9401      	str	r4, [sp, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f7ff ff15 	bl	8002dac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f82:	2308      	movs	r3, #8
 8002f84:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002f86:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	e000      	b.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002f8e:	2000      	movs	r0, #0
}
 8002f90:	b003      	add	sp, #12
 8002f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
 8002f98:	e7fa      	b.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x78>
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	e7f8      	b.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x78>

08002f9e <HAL_UART_Init>:
  if (huart == NULL)
 8002f9e:	b360      	cbz	r0, 8002ffa <HAL_UART_Init+0x5c>
{
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002fa4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002fa8:	b313      	cbz	r3, 8002ff0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002faa:	2324      	movs	r3, #36	@ 0x24
 8002fac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002fb0:	6822      	ldr	r2, [r4, #0]
 8002fb2:	68d3      	ldr	r3, [r2, #12]
 8002fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fb8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ff24 	bl	8002e08 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	6913      	ldr	r3, [r2, #16]
 8002fc4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002fc8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	6953      	ldr	r3, [r2, #20]
 8002fce:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002fd2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	68d3      	ldr	r3, [r2, #12]
 8002fd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fdc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fde:	2000      	movs	r0, #0
 8002fe0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fec:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002fee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ff0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002ff4:	f7fd fd88 	bl	8000b08 <HAL_UART_MspInit>
 8002ff8:	e7d7      	b.n	8002faa <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_UART_Transmit>:
{
 8002ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003006:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	d156      	bne.n	80030be <HAL_UART_Transmit+0xc0>
 8003010:	4604      	mov	r4, r0
 8003012:	460d      	mov	r5, r1
 8003014:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003016:	2900      	cmp	r1, #0
 8003018:	d055      	beq.n	80030c6 <HAL_UART_Transmit+0xc8>
 800301a:	b90a      	cbnz	r2, 8003020 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800301c:	2001      	movs	r0, #1
 800301e:	e04f      	b.n	80030c0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	2300      	movs	r3, #0
 8003022:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003024:	2321      	movs	r3, #33	@ 0x21
 8003026:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800302a:	f7fd febd 	bl	8000da8 <HAL_GetTick>
 800302e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003030:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003034:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68a3      	ldr	r3, [r4, #8]
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303e:	d002      	beq.n	8003046 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003040:	f04f 0800 	mov.w	r8, #0
 8003044:	e014      	b.n	8003070 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003046:	6923      	ldr	r3, [r4, #16]
 8003048:	b32b      	cbz	r3, 8003096 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800304a:	f04f 0800 	mov.w	r8, #0
 800304e:	e00f      	b.n	8003070 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003050:	2320      	movs	r3, #32
 8003052:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	e032      	b.n	80030c0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800305e:	6822      	ldr	r2, [r4, #0]
 8003060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003064:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003066:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003068:	b292      	uxth	r2, r2
 800306a:	3a01      	subs	r2, #1
 800306c:	b292      	uxth	r2, r2
 800306e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003070:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003072:	b29b      	uxth	r3, r3
 8003074:	b193      	cbz	r3, 800309c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	9600      	str	r6, [sp, #0]
 8003078:	463b      	mov	r3, r7
 800307a:	2200      	movs	r2, #0
 800307c:	2180      	movs	r1, #128	@ 0x80
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff ff4a 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 8003084:	2800      	cmp	r0, #0
 8003086:	d1e3      	bne.n	8003050 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003088:	2d00      	cmp	r5, #0
 800308a:	d0e6      	beq.n	800305a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003094:	e7e7      	b.n	8003066 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003096:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003098:	2500      	movs	r5, #0
 800309a:	e7e9      	b.n	8003070 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309c:	9600      	str	r6, [sp, #0]
 800309e:	463b      	mov	r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	2140      	movs	r1, #64	@ 0x40
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7ff ff37 	bl	8002f18 <UART_WaitOnFlagUntilTimeout>
 80030aa:	b918      	cbnz	r0, 80030b4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80030ac:	2320      	movs	r3, #32
 80030ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80030b2:	e005      	b.n	80030c0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80030b4:	2320      	movs	r3, #32
 80030b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80030ba:	2003      	movs	r0, #3
 80030bc:	e000      	b.n	80030c0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80030be:	2002      	movs	r0, #2
}
 80030c0:	b002      	add	sp, #8
 80030c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80030c6:	2001      	movs	r0, #1
 80030c8:	e7fa      	b.n	80030c0 <HAL_UART_Transmit+0xc2>
	...

080030cc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <SDMMC_GetCmdError+0x30>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003100 <SDMMC_GetCmdError+0x34>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0a5b      	lsrs	r3, r3, #9
 80030d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 80030e0:	461a      	mov	r2, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b13a      	cbz	r2, 80030f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80030e6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80030e8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80030ec:	d0f8      	beq.n	80030e0 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80030ee:	23c5      	movs	r3, #197	@ 0xc5
 80030f0:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80030f2:	2000      	movs	r0, #0
 80030f4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80030f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80030fa:	4770      	bx	lr
 80030fc:	20000000 	.word	0x20000000
 8003100:	10624dd3 	.word	0x10624dd3

08003104 <SDIO_Init>:
{
 8003104:	b084      	sub	sp, #16
 8003106:	f10d 0c04 	add.w	ip, sp, #4
 800310a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800310e:	460b      	mov	r3, r1
 8003110:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8003112:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8003114:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8003116:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8003118:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800311a:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 800311c:	4313      	orrs	r3, r2
             Init.ClockDiv
 800311e:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8003120:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003122:	6842      	ldr	r2, [r0, #4]
 8003124:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8003128:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800312c:	4313      	orrs	r3, r2
 800312e:	6043      	str	r3, [r0, #4]
}
 8003130:	2000      	movs	r0, #0
 8003132:	b004      	add	sp, #16
 8003134:	4770      	bx	lr

08003136 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8003136:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800313a:	4770      	bx	lr

0800313c <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 8003142:	2000      	movs	r0, #0
 8003144:	4770      	bx	lr

08003146 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003146:	2303      	movs	r3, #3
 8003148:	6003      	str	r3, [r0, #0]
}
 800314a:	2000      	movs	r0, #0
 800314c:	4770      	bx	lr

0800314e <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800314e:	6800      	ldr	r0, [r0, #0]
}
 8003150:	f000 0003 	and.w	r0, r0, #3
 8003154:	4770      	bx	lr

08003156 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003156:	680b      	ldr	r3, [r1, #0]
 8003158:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800315a:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800315c:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800315e:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8003160:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8003162:	4313      	orrs	r3, r2
                       Command->CPSM);
 8003164:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8003166:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003168:	68c2      	ldr	r2, [r0, #12]
 800316a:	f36f 020b 	bfc	r2, #0, #12
 800316e:	4313      	orrs	r3, r2
 8003170:	60c3      	str	r3, [r0, #12]
}
 8003172:	2000      	movs	r0, #0
 8003174:	4770      	bx	lr

08003176 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8003176:	6900      	ldr	r0, [r0, #16]
}
 8003178:	b2c0      	uxtb	r0, r0
 800317a:	4770      	bx	lr

0800317c <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800317c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800317e:	5840      	ldr	r0, [r0, r1]
}  
 8003180:	4770      	bx	lr

08003182 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8003182:	680b      	ldr	r3, [r1, #0]
 8003184:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 8003186:	684b      	ldr	r3, [r1, #4]
 8003188:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800318a:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800318c:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800318e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8003190:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8003192:	4313      	orrs	r3, r2
                       Data->DPSM);
 8003194:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8003196:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003198:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800319a:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 800319e:	4313      	orrs	r3, r2
 80031a0:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 80031a2:	2000      	movs	r0, #0
 80031a4:	4770      	bx	lr

080031a6 <SDMMC_CmdGoIdleState>:
{
 80031a6:	b510      	push	{r4, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80031b0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80031b2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031ba:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031bc:	a901      	add	r1, sp, #4
 80031be:	f7ff ffca 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 80031c2:	4620      	mov	r0, r4
 80031c4:	f7ff ff82 	bl	80030cc <SDMMC_GetCmdError>
}
 80031c8:	b006      	add	sp, #24
 80031ca:	bd10      	pop	{r4, pc}

080031cc <SDMMC_GetCmdResp1>:
{
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4604      	mov	r4, r0
 80031d0:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031d2:	4b50      	ldr	r3, [pc, #320]	@ (8003314 <SDMMC_GetCmdResp1+0x148>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4950      	ldr	r1, [pc, #320]	@ (8003318 <SDMMC_GetCmdResp1+0x14c>)
 80031d8:	fba1 1303 	umull	r1, r3, r1, r3
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80031e2:	4613      	mov	r3, r2
 80031e4:	3a01      	subs	r2, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d05d      	beq.n	80032a6 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 80031ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80031ec:	f013 0f45 	tst.w	r3, #69	@ 0x45
 80031f0:	d0f7      	beq.n	80031e2 <SDMMC_GetCmdResp1+0x16>
 80031f2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80031f6:	d1f4      	bne.n	80031e2 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80031f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031fa:	f013 0f04 	tst.w	r3, #4
 80031fe:	d106      	bne.n	800320e <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003202:	f013 0f01 	tst.w	r3, #1
 8003206:	d005      	beq.n	8003214 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003208:	2001      	movs	r0, #1
 800320a:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800320c:	e04d      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800320e:	2004      	movs	r0, #4
 8003210:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003212:	e04a      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003214:	23c5      	movs	r3, #197	@ 0xc5
 8003216:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ffac 	bl	8003176 <SDIO_GetCommandResponse>
 800321e:	42a8      	cmp	r0, r5
 8003220:	d001      	beq.n	8003226 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003222:	2001      	movs	r0, #1
 8003224:	e041      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003226:	2100      	movs	r1, #0
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ffa7 	bl	800317c <SDIO_GetResponse>
 800322e:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003230:	483a      	ldr	r0, [pc, #232]	@ (800331c <SDMMC_GetCmdResp1+0x150>)
 8003232:	4018      	ands	r0, r3
 8003234:	b3c8      	cbz	r0, 80032aa <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003236:	2b00      	cmp	r3, #0
 8003238:	db38      	blt.n	80032ac <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800323a:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800323e:	d138      	bne.n	80032b2 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003240:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003244:	d137      	bne.n	80032b6 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003246:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800324a:	d136      	bne.n	80032ba <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800324c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8003250:	d136      	bne.n	80032c0 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003252:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8003256:	d136      	bne.n	80032c6 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003258:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800325c:	d136      	bne.n	80032cc <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800325e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003262:	d136      	bne.n	80032d2 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003264:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003268:	d136      	bne.n	80032d8 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800326a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800326e:	d136      	bne.n	80032de <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003270:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003274:	d136      	bne.n	80032e4 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003276:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800327a:	d136      	bne.n	80032ea <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800327c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003280:	d136      	bne.n	80032f0 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003282:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003286:	d136      	bne.n	80032f6 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003288:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800328c:	d136      	bne.n	80032fc <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800328e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003292:	d136      	bne.n	8003302 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003294:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003298:	d136      	bne.n	8003308 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800329a:	f013 0f08 	tst.w	r3, #8
 800329e:	d036      	beq.n	800330e <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80032a0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80032a4:	e001      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 80032a6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80032ac:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80032b0:	e7fb      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80032b2:	2040      	movs	r0, #64	@ 0x40
 80032b4:	e7f9      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80032b6:	2080      	movs	r0, #128	@ 0x80
 80032b8:	e7f7      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80032ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80032be:	e7f4      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80032c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80032c4:	e7f1      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80032c6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80032ca:	e7ee      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80032cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80032d0:	e7eb      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80032d2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80032d6:	e7e8      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80032d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80032dc:	e7e5      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80032de:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80032e2:	e7e2      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 80032e4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80032e8:	e7df      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80032ea:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80032ee:	e7dc      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80032f0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80032f4:	e7d9      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80032f6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80032fa:	e7d6      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80032fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003300:	e7d3      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003302:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003306:	e7d0      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8003308:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800330c:	e7cd      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800330e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003312:	e7ca      	b.n	80032aa <SDMMC_GetCmdResp1+0xde>
 8003314:	20000000 	.word	0x20000000
 8003318:	10624dd3 	.word	0x10624dd3
 800331c:	fdffe008 	.word	0xfdffe008

08003320 <SDMMC_CmdBlockLength>:
{
 8003320:	b530      	push	{r4, r5, lr}
 8003322:	b087      	sub	sp, #28
 8003324:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003326:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003328:	2510      	movs	r5, #16
 800332a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800332c:	2340      	movs	r3, #64	@ 0x40
 800332e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003330:	2300      	movs	r3, #0
 8003332:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003338:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800333a:	a901      	add	r1, sp, #4
 800333c:	f7ff ff0b 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003344:	4629      	mov	r1, r5
 8003346:	4620      	mov	r0, r4
 8003348:	f7ff ff40 	bl	80031cc <SDMMC_GetCmdResp1>
}
 800334c:	b007      	add	sp, #28
 800334e:	bd30      	pop	{r4, r5, pc}

08003350 <SDMMC_CmdStopTransfer>:
{
 8003350:	b530      	push	{r4, r5, lr}
 8003352:	b087      	sub	sp, #28
 8003354:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800335a:	250c      	movs	r5, #12
 800335c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800335e:	2240      	movs	r2, #64	@ 0x40
 8003360:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003362:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003368:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800336a:	a901      	add	r1, sp, #4
 800336c:	f7ff fef3 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003370:	4a03      	ldr	r2, [pc, #12]	@ (8003380 <SDMMC_CmdStopTransfer+0x30>)
 8003372:	4629      	mov	r1, r5
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ff29 	bl	80031cc <SDMMC_GetCmdResp1>
}
 800337a:	b007      	add	sp, #28
 800337c:	bd30      	pop	{r4, r5, pc}
 800337e:	bf00      	nop
 8003380:	05f5e100 	.word	0x05f5e100

08003384 <SDMMC_CmdSelDesel>:
{
 8003384:	b530      	push	{r4, r5, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800338a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800338c:	2507      	movs	r5, #7
 800338e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003390:	2340      	movs	r3, #64	@ 0x40
 8003392:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003394:	2300      	movs	r3, #0
 8003396:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800339c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800339e:	a901      	add	r1, sp, #4
 80033a0:	f7ff fed9 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4629      	mov	r1, r5
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7ff ff0e 	bl	80031cc <SDMMC_GetCmdResp1>
}
 80033b0:	b007      	add	sp, #28
 80033b2:	bd30      	pop	{r4, r5, pc}

080033b4 <SDMMC_CmdAppCommand>:
{
 80033b4:	b530      	push	{r4, r5, lr}
 80033b6:	b087      	sub	sp, #28
 80033b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80033ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80033bc:	2537      	movs	r5, #55	@ 0x37
 80033be:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033c0:	2340      	movs	r3, #64	@ 0x40
 80033c2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033c4:	2300      	movs	r3, #0
 80033c6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033cc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033ce:	a901      	add	r1, sp, #4
 80033d0:	f7ff fec1 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80033d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d8:	4629      	mov	r1, r5
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff fef6 	bl	80031cc <SDMMC_GetCmdResp1>
}
 80033e0:	b007      	add	sp, #28
 80033e2:	bd30      	pop	{r4, r5, pc}

080033e4 <SDMMC_CmdBusWidth>:
{
 80033e4:	b530      	push	{r4, r5, lr}
 80033e6:	b087      	sub	sp, #28
 80033e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80033ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80033ec:	2506      	movs	r5, #6
 80033ee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033f0:	2340      	movs	r3, #64	@ 0x40
 80033f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033f4:	2300      	movs	r3, #0
 80033f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033fc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033fe:	a901      	add	r1, sp, #4
 8003400:	f7ff fea9 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff fede 	bl	80031cc <SDMMC_GetCmdResp1>
}
 8003410:	b007      	add	sp, #28
 8003412:	bd30      	pop	{r4, r5, pc}

08003414 <SDMMC_CmdSendSCR>:
{
 8003414:	b530      	push	{r4, r5, lr}
 8003416:	b087      	sub	sp, #28
 8003418:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800341e:	2533      	movs	r5, #51	@ 0x33
 8003420:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003422:	2240      	movs	r2, #64	@ 0x40
 8003424:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003426:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800342c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800342e:	a901      	add	r1, sp, #4
 8003430:	f7ff fe91 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	4629      	mov	r1, r5
 800343a:	4620      	mov	r0, r4
 800343c:	f7ff fec6 	bl	80031cc <SDMMC_GetCmdResp1>
}
 8003440:	b007      	add	sp, #28
 8003442:	bd30      	pop	{r4, r5, pc}

08003444 <SDMMC_CmdSendStatus>:
{
 8003444:	b530      	push	{r4, r5, lr}
 8003446:	b087      	sub	sp, #28
 8003448:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800344a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800344c:	250d      	movs	r5, #13
 800344e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003450:	2340      	movs	r3, #64	@ 0x40
 8003452:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003454:	2300      	movs	r3, #0
 8003456:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800345c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800345e:	a901      	add	r1, sp, #4
 8003460:	f7ff fe79 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003468:	4629      	mov	r1, r5
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff feae 	bl	80031cc <SDMMC_GetCmdResp1>
}
 8003470:	b007      	add	sp, #28
 8003472:	bd30      	pop	{r4, r5, pc}

08003474 <SDMMC_GetCmdResp2>:
{
 8003474:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003476:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <SDMMC_GetCmdResp2+0x54>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a14      	ldr	r2, [pc, #80]	@ (80034cc <SDMMC_GetCmdResp2+0x58>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	0a5b      	lsrs	r3, r3, #9
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800348a:	461a      	mov	r2, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b1ba      	cbz	r2, 80034c0 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8003490:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003492:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8003496:	d0f8      	beq.n	800348a <SDMMC_GetCmdResp2+0x16>
 8003498:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800349c:	d1f5      	bne.n	800348a <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800349e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80034a0:	f013 0f04 	tst.w	r3, #4
 80034a4:	d106      	bne.n	80034b4 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034a6:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80034a8:	f010 0001 	ands.w	r0, r0, #1
 80034ac:	d105      	bne.n	80034ba <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80034ae:	23c5      	movs	r3, #197	@ 0xc5
 80034b0:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80034b2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80034b4:	2004      	movs	r0, #4
 80034b6:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034b8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034ba:	2001      	movs	r0, #1
 80034bc:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034be:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80034c0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000
 80034cc:	10624dd3 	.word	0x10624dd3

080034d0 <SDMMC_CmdSendCID>:
{
 80034d0:	b510      	push	{r4, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80034da:	2202      	movs	r2, #2
 80034dc:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80034de:	22c0      	movs	r2, #192	@ 0xc0
 80034e0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034ea:	a901      	add	r1, sp, #4
 80034ec:	f7ff fe33 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff ffbf 	bl	8003474 <SDMMC_GetCmdResp2>
}
 80034f6:	b006      	add	sp, #24
 80034f8:	bd10      	pop	{r4, pc}

080034fa <SDMMC_CmdSendCSD>:
{
 80034fa:	b510      	push	{r4, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003500:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003502:	2309      	movs	r3, #9
 8003504:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003506:	23c0      	movs	r3, #192	@ 0xc0
 8003508:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800350a:	2300      	movs	r3, #0
 800350c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800350e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003512:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003514:	a901      	add	r1, sp, #4
 8003516:	f7ff fe1e 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800351a:	4620      	mov	r0, r4
 800351c:	f7ff ffaa 	bl	8003474 <SDMMC_GetCmdResp2>
}
 8003520:	b006      	add	sp, #24
 8003522:	bd10      	pop	{r4, pc}

08003524 <SDMMC_GetCmdResp3>:
{
 8003524:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <SDMMC_GetCmdResp3+0x44>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a10      	ldr	r2, [pc, #64]	@ (800356c <SDMMC_GetCmdResp3+0x48>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0a5b      	lsrs	r3, r3, #9
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800353a:	461a      	mov	r2, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b182      	cbz	r2, 8003562 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8003540:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003542:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8003546:	d0f8      	beq.n	800353a <SDMMC_GetCmdResp3+0x16>
 8003548:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800354c:	d1f5      	bne.n	800353a <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800354e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8003550:	f010 0004 	ands.w	r0, r0, #4
 8003554:	d102      	bne.n	800355c <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003556:	23c5      	movs	r3, #197	@ 0xc5
 8003558:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800355a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800355c:	2004      	movs	r0, #4
 800355e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003560:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003562:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003566:	4770      	bx	lr
 8003568:	20000000 	.word	0x20000000
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <SDMMC_CmdAppOperCommand>:
{
 8003570:	b510      	push	{r4, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003576:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800357a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800357e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003580:	2329      	movs	r3, #41	@ 0x29
 8003582:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003584:	2340      	movs	r3, #64	@ 0x40
 8003586:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003588:	2300      	movs	r3, #0
 800358a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800358c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003590:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003592:	a901      	add	r1, sp, #4
 8003594:	f7ff fddf 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003598:	4620      	mov	r0, r4
 800359a:	f7ff ffc3 	bl	8003524 <SDMMC_GetCmdResp3>
}
 800359e:	b006      	add	sp, #24
 80035a0:	bd10      	pop	{r4, pc}
	...

080035a4 <SDMMC_GetCmdResp6>:
{
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	4605      	mov	r5, r0
 80035a8:	460e      	mov	r6, r1
 80035aa:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80035ac:	4b23      	ldr	r3, [pc, #140]	@ (800363c <SDMMC_GetCmdResp6+0x98>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <SDMMC_GetCmdResp6+0x9c>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a5b      	lsrs	r3, r3, #9
 80035b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80035c0:	461a      	mov	r2, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b38a      	cbz	r2, 800362a <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 80035c6:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80035c8:	f014 0f45 	tst.w	r4, #69	@ 0x45
 80035cc:	d0f8      	beq.n	80035c0 <SDMMC_GetCmdResp6+0x1c>
 80035ce:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80035d2:	d1f5      	bne.n	80035c0 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80035d4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80035d6:	f013 0f04 	tst.w	r3, #4
 80035da:	d106      	bne.n	80035ea <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80035dc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80035de:	f013 0f01 	tst.w	r3, #1
 80035e2:	d005      	beq.n	80035f0 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80035e4:	2001      	movs	r0, #1
 80035e6:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80035e8:	e021      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80035ea:	2004      	movs	r0, #4
 80035ec:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80035ee:	e01e      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80035f0:	4628      	mov	r0, r5
 80035f2:	f7ff fdc0 	bl	8003176 <SDIO_GetCommandResponse>
 80035f6:	42b0      	cmp	r0, r6
 80035f8:	d001      	beq.n	80035fe <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80035fa:	2001      	movs	r0, #1
 80035fc:	e017      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80035fe:	23c5      	movs	r3, #197	@ 0xc5
 8003600:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003602:	2100      	movs	r1, #0
 8003604:	4628      	mov	r0, r5
 8003606:	f7ff fdb9 	bl	800317c <SDIO_GetResponse>
 800360a:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800360c:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 8003610:	d008      	beq.n	8003624 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003612:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003616:	d10b      	bne.n	8003630 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003618:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800361c:	d00b      	beq.n	8003636 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800361e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003622:	e004      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8003628:	e001      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800362a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003630:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003634:	e7fb      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003636:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800363a:	e7f8      	b.n	800362e <SDMMC_GetCmdResp6+0x8a>
 800363c:	20000000 	.word	0x20000000
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <SDMMC_CmdSetRelAdd>:
{
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	4604      	mov	r4, r0
 800364a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003650:	2603      	movs	r6, #3
 8003652:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003658:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800365a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800365e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003660:	a901      	add	r1, sp, #4
 8003662:	f7ff fd78 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003666:	462a      	mov	r2, r5
 8003668:	4631      	mov	r1, r6
 800366a:	4620      	mov	r0, r4
 800366c:	f7ff ff9a 	bl	80035a4 <SDMMC_GetCmdResp6>
}
 8003670:	b006      	add	sp, #24
 8003672:	bd70      	pop	{r4, r5, r6, pc}

08003674 <SDMMC_GetCmdResp7>:
{
 8003674:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003676:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <SDMMC_GetCmdResp7+0x5c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <SDMMC_GetCmdResp7+0x60>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003686:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800368a:	461a      	mov	r2, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b1e2      	cbz	r2, 80036ca <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8003690:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003692:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8003696:	d0f8      	beq.n	800368a <SDMMC_GetCmdResp7+0x16>
 8003698:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800369c:	d1f5      	bne.n	800368a <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800369e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80036a0:	f013 0f04 	tst.w	r3, #4
 80036a4:	d10b      	bne.n	80036be <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80036a6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80036a8:	f013 0301 	ands.w	r3, r3, #1
 80036ac:	d10a      	bne.n	80036c4 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80036ae:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80036b0:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 80036b4:	d00b      	beq.n	80036ce <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80036b6:	2240      	movs	r2, #64	@ 0x40
 80036b8:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80036ba:	4618      	mov	r0, r3
 80036bc:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80036be:	2004      	movs	r0, #4
 80036c0:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80036c2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80036c4:	2001      	movs	r0, #1
 80036c6:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80036c8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80036ca:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80036ce:	4770      	bx	lr
 80036d0:	20000000 	.word	0x20000000
 80036d4:	10624dd3 	.word	0x10624dd3

080036d8 <SDMMC_CmdOperCond>:
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80036de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80036e2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80036e4:	2308      	movs	r3, #8
 80036e6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036e8:	2340      	movs	r3, #64	@ 0x40
 80036ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036ec:	2300      	movs	r3, #0
 80036ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036f4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036f6:	a901      	add	r1, sp, #4
 80036f8:	f7ff fd2d 	bl	8003156 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ffb9 	bl	8003674 <SDMMC_GetCmdResp7>
}
 8003702:	b006      	add	sp, #24
 8003704:	bd10      	pop	{r4, pc}

08003706 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003706:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800370c:	9b01      	ldr	r3, [sp, #4]
 800370e:	3301      	adds	r3, #1
 8003710:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003718:	d815      	bhi.n	8003746 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800371a:	6903      	ldr	r3, [r0, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	daf5      	bge.n	800370c <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003724:	6903      	ldr	r3, [r0, #16]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800372c:	9b01      	ldr	r3, [sp, #4]
 800372e:	3301      	adds	r3, #1
 8003730:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003732:	9b01      	ldr	r3, [sp, #4]
 8003734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003738:	d808      	bhi.n	800374c <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800373a:	6903      	ldr	r3, [r0, #16]
 800373c:	f013 0f01 	tst.w	r3, #1
 8003740:	d1f4      	bne.n	800372c <USB_CoreReset+0x26>

  return HAL_OK;
 8003742:	2000      	movs	r0, #0
 8003744:	e000      	b.n	8003748 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8003746:	2003      	movs	r0, #3
}
 8003748:	b002      	add	sp, #8
 800374a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800374c:	2003      	movs	r0, #3
 800374e:	e7fb      	b.n	8003748 <USB_CoreReset+0x42>

08003750 <USB_CoreInit>:
{
 8003750:	b084      	sub	sp, #16
 8003752:	b510      	push	{r4, lr}
 8003754:	4604      	mov	r4, r0
 8003756:	a803      	add	r0, sp, #12
 8003758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800375c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d121      	bne.n	80037a8 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003764:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800376c:	68e3      	ldr	r3, [r4, #12]
 800376e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003776:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800377e:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003780:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d00a      	beq.n	800379e <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff ffbc 	bl	8003706 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800378e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d01c      	beq.n	80037d0 <USB_CoreInit+0x80>
}
 8003796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800379a:	b004      	add	sp, #16
 800379c:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800379e:	68e3      	ldr	r3, [r4, #12]
 80037a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a4:	60e3      	str	r3, [r4, #12]
 80037a6:	e7ef      	b.n	8003788 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037a8:	68e3      	ldr	r3, [r4, #12]
 80037aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ae:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7ff ffa8 	bl	8003706 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80037b6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80037ba:	b923      	cbnz	r3, 80037c6 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80037c4:	e7e3      	b.n	800378e <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80037ce:	e7de      	b.n	800378e <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037d0:	68a3      	ldr	r3, [r4, #8]
 80037d2:	f043 0306 	orr.w	r3, r3, #6
 80037d6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037d8:	68a3      	ldr	r3, [r4, #8]
 80037da:	f043 0320 	orr.w	r3, r3, #32
 80037de:	60a3      	str	r3, [r4, #8]
 80037e0:	e7d9      	b.n	8003796 <USB_CoreInit+0x46>

080037e2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037e2:	6883      	ldr	r3, [r0, #8]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6083      	str	r3, [r0, #8]
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	4770      	bx	lr

080037ee <USB_FlushTxFifo>:
{
 80037ee:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	9301      	str	r3, [sp, #4]
    count++;
 80037f4:	9b01      	ldr	r3, [sp, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80037fa:	9b01      	ldr	r3, [sp, #4]
 80037fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003800:	d815      	bhi.n	800382e <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003802:	6903      	ldr	r3, [r0, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	daf5      	bge.n	80037f4 <USB_FlushTxFifo+0x6>
  count = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800380c:	0189      	lsls	r1, r1, #6
 800380e:	f041 0120 	orr.w	r1, r1, #32
 8003812:	6101      	str	r1, [r0, #16]
    count++;
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800381a:	9b01      	ldr	r3, [sp, #4]
 800381c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003820:	d808      	bhi.n	8003834 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003822:	6903      	ldr	r3, [r0, #16]
 8003824:	f013 0f20 	tst.w	r3, #32
 8003828:	d1f4      	bne.n	8003814 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 800382a:	2000      	movs	r0, #0
 800382c:	e000      	b.n	8003830 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 800382e:	2003      	movs	r0, #3
}
 8003830:	b002      	add	sp, #8
 8003832:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003834:	2003      	movs	r0, #3
 8003836:	e7fb      	b.n	8003830 <USB_FlushTxFifo+0x42>

08003838 <USB_FlushRxFifo>:
{
 8003838:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]
    count++;
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	3301      	adds	r3, #1
 8003842:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003844:	9b01      	ldr	r3, [sp, #4]
 8003846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800384a:	d813      	bhi.n	8003874 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800384c:	6903      	ldr	r3, [r0, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	daf5      	bge.n	800383e <USB_FlushRxFifo+0x6>
  count = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003856:	2310      	movs	r3, #16
 8003858:	6103      	str	r3, [r0, #16]
    count++;
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	3301      	adds	r3, #1
 800385e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003866:	d808      	bhi.n	800387a <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003868:	6903      	ldr	r3, [r0, #16]
 800386a:	f013 0f10 	tst.w	r3, #16
 800386e:	d1f4      	bne.n	800385a <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8003870:	2000      	movs	r0, #0
 8003872:	e000      	b.n	8003876 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8003874:	2003      	movs	r0, #3
}
 8003876:	b002      	add	sp, #8
 8003878:	4770      	bx	lr
      return HAL_TIMEOUT;
 800387a:	2003      	movs	r0, #3
 800387c:	e7fb      	b.n	8003876 <USB_FlushRxFifo+0x3e>

0800387e <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800387e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003882:	4319      	orrs	r1, r3
 8003884:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8003888:	2000      	movs	r0, #0
 800388a:	4770      	bx	lr

0800388c <USB_DevInit>:
{
 800388c:	b084      	sub	sp, #16
 800388e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003890:	4604      	mov	r4, r0
 8003892:	a807      	add	r0, sp, #28
 8003894:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003898:	2300      	movs	r3, #0
 800389a:	e006      	b.n	80038aa <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 800389c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80038a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038a4:	2100      	movs	r1, #0
 80038a6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80038a8:	3301      	adds	r3, #1
 80038aa:	2b0e      	cmp	r3, #14
 80038ac:	d9f6      	bls.n	800389c <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80038ae:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80038b2:	bb06      	cbnz	r6, 80038f6 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038b4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038ca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80038ce:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d6:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038de:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80038e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80038ea:	b96b      	cbnz	r3, 8003908 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038ec:	2100      	movs	r1, #0
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff ffc5 	bl	800387e <USB_SetDevSpeed>
 80038f4:	e011      	b.n	800391a <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038fc:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003900:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003904:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003906:	e7e7      	b.n	80038d8 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003908:	2101      	movs	r1, #1
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ffb7 	bl	800387e <USB_SetDevSpeed>
 8003910:	e003      	b.n	800391a <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003912:	2103      	movs	r1, #3
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff ffb2 	bl	800387e <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800391a:	2110      	movs	r1, #16
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff ff66 	bl	80037ee <USB_FlushTxFifo>
 8003922:	4605      	mov	r5, r0
 8003924:	b100      	cbz	r0, 8003928 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8003926:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff ff85 	bl	8003838 <USB_FlushRxFifo>
 800392e:	b100      	cbz	r0, 8003932 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8003930:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8003932:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8003936:	2300      	movs	r3, #0
 8003938:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800393c:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003940:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003944:	e00a      	b.n	800395c <USB_DevInit+0xd0>
      if (i == 0U)
 8003946:	b9cb      	cbnz	r3, 800397c <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003948:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800394c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003950:	2200      	movs	r2, #0
 8003952:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003954:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003958:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800395a:	3301      	adds	r3, #1
 800395c:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003960:	4299      	cmp	r1, r3
 8003962:	d910      	bls.n	8003986 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003964:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003968:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 800396c:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8003970:	2800      	cmp	r0, #0
 8003972:	dbe8      	blt.n	8003946 <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003974:	2000      	movs	r0, #0
 8003976:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800397a:	e7e9      	b.n	8003950 <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800397c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003980:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003984:	e7e4      	b.n	8003950 <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	e00a      	b.n	80039a0 <USB_DevInit+0x114>
      if (i == 0U)
 800398a:	b1bb      	cbz	r3, 80039bc <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800398c:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8003990:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003994:	2200      	movs	r2, #0
 8003996:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003998:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800399c:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800399e:	3301      	adds	r3, #1
 80039a0:	4299      	cmp	r1, r3
 80039a2:	d910      	bls.n	80039c6 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039a4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80039a8:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80039ac:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80039b0:	2f00      	cmp	r7, #0
 80039b2:	dbea      	blt.n	800398a <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039b4:	2700      	movs	r7, #0
 80039b6:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80039ba:	e7eb      	b.n	8003994 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039bc:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 80039c0:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80039c4:	e7e6      	b.n	8003994 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039c6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80039ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ce:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039d6:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80039da:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80039dc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80039e0:	b91b      	cbnz	r3, 80039ea <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039e2:	69a3      	ldr	r3, [r4, #24]
 80039e4:	f043 0310 	orr.w	r3, r3, #16
 80039e8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039ea:	69a2      	ldr	r2, [r4, #24]
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <USB_DevInit+0x190>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80039f2:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80039f6:	b11b      	cbz	r3, 8003a00 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039f8:	69a3      	ldr	r3, [r4, #24]
 80039fa:	f043 0308 	orr.w	r3, r3, #8
 80039fe:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003a00:	2e01      	cmp	r6, #1
 8003a02:	d004      	beq.n	8003a0e <USB_DevInit+0x182>
}
 8003a04:	4628      	mov	r0, r5
 8003a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a0a:	b004      	add	sp, #16
 8003a0c:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a0e:	69a3      	ldr	r3, [r4, #24]
 8003a10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a14:	f043 0304 	orr.w	r3, r3, #4
 8003a18:	61a3      	str	r3, [r4, #24]
 8003a1a:	e7f3      	b.n	8003a04 <USB_DevInit+0x178>
 8003a1c:	803c3800 	.word	0x803c3800

08003a20 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a20:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003a24:	f023 0303 	bic.w	r3, r3, #3
 8003a28:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a2c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003a38:	2000      	movs	r0, #0
 8003a3a:	4770      	bx	lr

08003a3c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003a3c:	6940      	ldr	r0, [r0, #20]
}
 8003a3e:	f000 0001 	and.w	r0, r0, #1
 8003a42:	4770      	bx	lr

08003a44 <USB_SetCurrentMode>:
{
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a48:	68c3      	ldr	r3, [r0, #12]
 8003a4a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a4e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a50:	2901      	cmp	r1, #1
 8003a52:	d013      	beq.n	8003a7c <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003a54:	bb19      	cbnz	r1, 8003a9e <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a56:	68c3      	ldr	r3, [r0, #12]
 8003a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a5c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a5e:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003a60:	200a      	movs	r0, #10
 8003a62:	f7fd f9a7 	bl	8000db4 <HAL_Delay>
      ms += 10U;
 8003a66:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f7ff ffe7 	bl	8003a3c <USB_GetMode>
 8003a6e:	b108      	cbz	r0, 8003a74 <USB_SetCurrentMode+0x30>
 8003a70:	2cc7      	cmp	r4, #199	@ 0xc7
 8003a72:	d9f5      	bls.n	8003a60 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a74:	2cc8      	cmp	r4, #200	@ 0xc8
 8003a76:	d014      	beq.n	8003aa2 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003a78:	2000      	movs	r0, #0
}
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a7c:	68c3      	ldr	r3, [r0, #12]
 8003a7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a82:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a84:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003a86:	200a      	movs	r0, #10
 8003a88:	f7fd f994 	bl	8000db4 <HAL_Delay>
      ms += 10U;
 8003a8c:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f7ff ffd4 	bl	8003a3c <USB_GetMode>
 8003a94:	2801      	cmp	r0, #1
 8003a96:	d0ed      	beq.n	8003a74 <USB_SetCurrentMode+0x30>
 8003a98:	2cc7      	cmp	r4, #199	@ 0xc7
 8003a9a:	d9f4      	bls.n	8003a86 <USB_SetCurrentMode+0x42>
 8003a9c:	e7ea      	b.n	8003a74 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	e7eb      	b.n	8003a7a <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	e7e9      	b.n	8003a7a <USB_SetCurrentMode+0x36>
	...

08003aa8 <std>:
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	b510      	push	{r4, lr}
 8003aac:	4604      	mov	r4, r0
 8003aae:	e9c0 3300 	strd	r3, r3, [r0]
 8003ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ab6:	6083      	str	r3, [r0, #8]
 8003ab8:	8181      	strh	r1, [r0, #12]
 8003aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8003abc:	81c2      	strh	r2, [r0, #14]
 8003abe:	6183      	str	r3, [r0, #24]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	305c      	adds	r0, #92	@ 0x5c
 8003ac6:	f000 f9f9 	bl	8003ebc <memset>
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <std+0x58>)
 8003acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ace:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <std+0x5c>)
 8003ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <std+0x60>)
 8003ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <std+0x64>)
 8003ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <std+0x68>)
 8003adc:	6224      	str	r4, [r4, #32]
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	d006      	beq.n	8003af0 <std+0x48>
 8003ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ae6:	4294      	cmp	r4, r2
 8003ae8:	d002      	beq.n	8003af0 <std+0x48>
 8003aea:	33d0      	adds	r3, #208	@ 0xd0
 8003aec:	429c      	cmp	r4, r3
 8003aee:	d105      	bne.n	8003afc <std+0x54>
 8003af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f000 ba58 	b.w	8003fac <__retarget_lock_init_recursive>
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	bf00      	nop
 8003b00:	08003d0d 	.word	0x08003d0d
 8003b04:	08003d2f 	.word	0x08003d2f
 8003b08:	08003d67 	.word	0x08003d67
 8003b0c:	08003d8b 	.word	0x08003d8b
 8003b10:	200006e4 	.word	0x200006e4

08003b14 <stdio_exit_handler>:
 8003b14:	4a02      	ldr	r2, [pc, #8]	@ (8003b20 <stdio_exit_handler+0xc>)
 8003b16:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <stdio_exit_handler+0x10>)
 8003b18:	4803      	ldr	r0, [pc, #12]	@ (8003b28 <stdio_exit_handler+0x14>)
 8003b1a:	f000 b869 	b.w	8003bf0 <_fwalk_sglue>
 8003b1e:	bf00      	nop
 8003b20:	2000000c 	.word	0x2000000c
 8003b24:	08004849 	.word	0x08004849
 8003b28:	2000001c 	.word	0x2000001c

08003b2c <cleanup_stdio>:
 8003b2c:	6841      	ldr	r1, [r0, #4]
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <cleanup_stdio+0x34>)
 8003b30:	4299      	cmp	r1, r3
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
 8003b36:	d001      	beq.n	8003b3c <cleanup_stdio+0x10>
 8003b38:	f000 fe86 	bl	8004848 <_fflush_r>
 8003b3c:	68a1      	ldr	r1, [r4, #8]
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <cleanup_stdio+0x38>)
 8003b40:	4299      	cmp	r1, r3
 8003b42:	d002      	beq.n	8003b4a <cleanup_stdio+0x1e>
 8003b44:	4620      	mov	r0, r4
 8003b46:	f000 fe7f 	bl	8004848 <_fflush_r>
 8003b4a:	68e1      	ldr	r1, [r4, #12]
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <cleanup_stdio+0x3c>)
 8003b4e:	4299      	cmp	r1, r3
 8003b50:	d004      	beq.n	8003b5c <cleanup_stdio+0x30>
 8003b52:	4620      	mov	r0, r4
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	f000 be76 	b.w	8004848 <_fflush_r>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	200006e4 	.word	0x200006e4
 8003b64:	2000074c 	.word	0x2000074c
 8003b68:	200007b4 	.word	0x200007b4

08003b6c <global_stdio_init.part.0>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <global_stdio_init.part.0+0x30>)
 8003b70:	4c0b      	ldr	r4, [pc, #44]	@ (8003ba0 <global_stdio_init.part.0+0x34>)
 8003b72:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba4 <global_stdio_init.part.0+0x38>)
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	4620      	mov	r0, r4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	f7ff ff94 	bl	8003aa8 <std>
 8003b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b84:	2201      	movs	r2, #1
 8003b86:	2109      	movs	r1, #9
 8003b88:	f7ff ff8e 	bl	8003aa8 <std>
 8003b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b90:	2202      	movs	r2, #2
 8003b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b96:	2112      	movs	r1, #18
 8003b98:	f7ff bf86 	b.w	8003aa8 <std>
 8003b9c:	2000081c 	.word	0x2000081c
 8003ba0:	200006e4 	.word	0x200006e4
 8003ba4:	08003b15 	.word	0x08003b15

08003ba8 <__sfp_lock_acquire>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	@ (8003bb0 <__sfp_lock_acquire+0x8>)
 8003baa:	f000 ba00 	b.w	8003fae <__retarget_lock_acquire_recursive>
 8003bae:	bf00      	nop
 8003bb0:	20000825 	.word	0x20000825

08003bb4 <__sfp_lock_release>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	@ (8003bbc <__sfp_lock_release+0x8>)
 8003bb6:	f000 b9fb 	b.w	8003fb0 <__retarget_lock_release_recursive>
 8003bba:	bf00      	nop
 8003bbc:	20000825 	.word	0x20000825

08003bc0 <__sinit>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	f7ff fff0 	bl	8003ba8 <__sfp_lock_acquire>
 8003bc8:	6a23      	ldr	r3, [r4, #32]
 8003bca:	b11b      	cbz	r3, 8003bd4 <__sinit+0x14>
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd0:	f7ff bff0 	b.w	8003bb4 <__sfp_lock_release>
 8003bd4:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <__sinit+0x28>)
 8003bd6:	6223      	str	r3, [r4, #32]
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <__sinit+0x2c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f5      	bne.n	8003bcc <__sinit+0xc>
 8003be0:	f7ff ffc4 	bl	8003b6c <global_stdio_init.part.0>
 8003be4:	e7f2      	b.n	8003bcc <__sinit+0xc>
 8003be6:	bf00      	nop
 8003be8:	08003b2d 	.word	0x08003b2d
 8003bec:	2000081c 	.word	0x2000081c

08003bf0 <_fwalk_sglue>:
 8003bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	4688      	mov	r8, r1
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c00:	f1b9 0901 	subs.w	r9, r9, #1
 8003c04:	d505      	bpl.n	8003c12 <_fwalk_sglue+0x22>
 8003c06:	6824      	ldr	r4, [r4, #0]
 8003c08:	2c00      	cmp	r4, #0
 8003c0a:	d1f7      	bne.n	8003bfc <_fwalk_sglue+0xc>
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c12:	89ab      	ldrh	r3, [r5, #12]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d907      	bls.n	8003c28 <_fwalk_sglue+0x38>
 8003c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	d003      	beq.n	8003c28 <_fwalk_sglue+0x38>
 8003c20:	4629      	mov	r1, r5
 8003c22:	4638      	mov	r0, r7
 8003c24:	47c0      	blx	r8
 8003c26:	4306      	orrs	r6, r0
 8003c28:	3568      	adds	r5, #104	@ 0x68
 8003c2a:	e7e9      	b.n	8003c00 <_fwalk_sglue+0x10>

08003c2c <iprintf>:
 8003c2c:	b40f      	push	{r0, r1, r2, r3}
 8003c2e:	b507      	push	{r0, r1, r2, lr}
 8003c30:	4906      	ldr	r1, [pc, #24]	@ (8003c4c <iprintf+0x20>)
 8003c32:	ab04      	add	r3, sp, #16
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c3a:	6881      	ldr	r1, [r0, #8]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f000 fadb 	bl	80041f8 <_vfiprintf_r>
 8003c42:	b003      	add	sp, #12
 8003c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c48:	b004      	add	sp, #16
 8003c4a:	4770      	bx	lr
 8003c4c:	20000018 	.word	0x20000018

08003c50 <_puts_r>:
 8003c50:	6a03      	ldr	r3, [r0, #32]
 8003c52:	b570      	push	{r4, r5, r6, lr}
 8003c54:	6884      	ldr	r4, [r0, #8]
 8003c56:	4605      	mov	r5, r0
 8003c58:	460e      	mov	r6, r1
 8003c5a:	b90b      	cbnz	r3, 8003c60 <_puts_r+0x10>
 8003c5c:	f7ff ffb0 	bl	8003bc0 <__sinit>
 8003c60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c62:	07db      	lsls	r3, r3, #31
 8003c64:	d405      	bmi.n	8003c72 <_puts_r+0x22>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	0598      	lsls	r0, r3, #22
 8003c6a:	d402      	bmi.n	8003c72 <_puts_r+0x22>
 8003c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c6e:	f000 f99e 	bl	8003fae <__retarget_lock_acquire_recursive>
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	0719      	lsls	r1, r3, #28
 8003c76:	d502      	bpl.n	8003c7e <_puts_r+0x2e>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d135      	bne.n	8003cea <_puts_r+0x9a>
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f8c5 	bl	8003e10 <__swsetup_r>
 8003c86:	b380      	cbz	r0, 8003cea <_puts_r+0x9a>
 8003c88:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c8e:	07da      	lsls	r2, r3, #31
 8003c90:	d405      	bmi.n	8003c9e <_puts_r+0x4e>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	059b      	lsls	r3, r3, #22
 8003c96:	d402      	bmi.n	8003c9e <_puts_r+0x4e>
 8003c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c9a:	f000 f989 	bl	8003fb0 <__retarget_lock_release_recursive>
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	da04      	bge.n	8003cb0 <_puts_r+0x60>
 8003ca6:	69a2      	ldr	r2, [r4, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	dc17      	bgt.n	8003cdc <_puts_r+0x8c>
 8003cac:	290a      	cmp	r1, #10
 8003cae:	d015      	beq.n	8003cdc <_puts_r+0x8c>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	6022      	str	r2, [r4, #0]
 8003cb6:	7019      	strb	r1, [r3, #0]
 8003cb8:	68a3      	ldr	r3, [r4, #8]
 8003cba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	60a3      	str	r3, [r4, #8]
 8003cc2:	2900      	cmp	r1, #0
 8003cc4:	d1ed      	bne.n	8003ca2 <_puts_r+0x52>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da11      	bge.n	8003cee <_puts_r+0x9e>
 8003cca:	4622      	mov	r2, r4
 8003ccc:	210a      	movs	r1, #10
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f85f 	bl	8003d92 <__swbuf_r>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d0d7      	beq.n	8003c88 <_puts_r+0x38>
 8003cd8:	250a      	movs	r5, #10
 8003cda:	e7d7      	b.n	8003c8c <_puts_r+0x3c>
 8003cdc:	4622      	mov	r2, r4
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 f857 	bl	8003d92 <__swbuf_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d1e7      	bne.n	8003cb8 <_puts_r+0x68>
 8003ce8:	e7ce      	b.n	8003c88 <_puts_r+0x38>
 8003cea:	3e01      	subs	r6, #1
 8003cec:	e7e4      	b.n	8003cb8 <_puts_r+0x68>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	6022      	str	r2, [r4, #0]
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e7ee      	b.n	8003cd8 <_puts_r+0x88>
	...

08003cfc <puts>:
 8003cfc:	4b02      	ldr	r3, [pc, #8]	@ (8003d08 <puts+0xc>)
 8003cfe:	4601      	mov	r1, r0
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	f7ff bfa5 	b.w	8003c50 <_puts_r>
 8003d06:	bf00      	nop
 8003d08:	20000018 	.word	0x20000018

08003d0c <__sread>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	460c      	mov	r4, r1
 8003d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d14:	f000 f8fc 	bl	8003f10 <_read_r>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	bfab      	itete	ge
 8003d1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d20:	181b      	addge	r3, r3, r0
 8003d22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d26:	bfac      	ite	ge
 8003d28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d2a:	81a3      	strhlt	r3, [r4, #12]
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <__swrite>:
 8003d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d32:	461f      	mov	r7, r3
 8003d34:	898b      	ldrh	r3, [r1, #12]
 8003d36:	05db      	lsls	r3, r3, #23
 8003d38:	4605      	mov	r5, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	d505      	bpl.n	8003d4c <__swrite+0x1e>
 8003d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d44:	2302      	movs	r3, #2
 8003d46:	2200      	movs	r2, #0
 8003d48:	f000 f8d0 	bl	8003eec <_lseek_r>
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d56:	81a3      	strh	r3, [r4, #12]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d62:	f000 b8e7 	b.w	8003f34 <_write_r>

08003d66 <__sseek>:
 8003d66:	b510      	push	{r4, lr}
 8003d68:	460c      	mov	r4, r1
 8003d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6e:	f000 f8bd 	bl	8003eec <_lseek_r>
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	bf15      	itete	ne
 8003d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d82:	81a3      	strheq	r3, [r4, #12]
 8003d84:	bf18      	it	ne
 8003d86:	81a3      	strhne	r3, [r4, #12]
 8003d88:	bd10      	pop	{r4, pc}

08003d8a <__sclose>:
 8003d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8e:	f000 b89d 	b.w	8003ecc <_close_r>

08003d92 <__swbuf_r>:
 8003d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d94:	460e      	mov	r6, r1
 8003d96:	4614      	mov	r4, r2
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b118      	cbz	r0, 8003da4 <__swbuf_r+0x12>
 8003d9c:	6a03      	ldr	r3, [r0, #32]
 8003d9e:	b90b      	cbnz	r3, 8003da4 <__swbuf_r+0x12>
 8003da0:	f7ff ff0e 	bl	8003bc0 <__sinit>
 8003da4:	69a3      	ldr	r3, [r4, #24]
 8003da6:	60a3      	str	r3, [r4, #8]
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	071a      	lsls	r2, r3, #28
 8003dac:	d501      	bpl.n	8003db2 <__swbuf_r+0x20>
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	b943      	cbnz	r3, 8003dc4 <__swbuf_r+0x32>
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f000 f82b 	bl	8003e10 <__swsetup_r>
 8003dba:	b118      	cbz	r0, 8003dc4 <__swbuf_r+0x32>
 8003dbc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	6922      	ldr	r2, [r4, #16]
 8003dc8:	1a98      	subs	r0, r3, r2
 8003dca:	6963      	ldr	r3, [r4, #20]
 8003dcc:	b2f6      	uxtb	r6, r6
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	4637      	mov	r7, r6
 8003dd2:	dc05      	bgt.n	8003de0 <__swbuf_r+0x4e>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 fd36 	bl	8004848 <_fflush_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d1ed      	bne.n	8003dbc <__swbuf_r+0x2a>
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60a3      	str	r3, [r4, #8]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	6022      	str	r2, [r4, #0]
 8003dec:	701e      	strb	r6, [r3, #0]
 8003dee:	6962      	ldr	r2, [r4, #20]
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d004      	beq.n	8003e00 <__swbuf_r+0x6e>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	07db      	lsls	r3, r3, #31
 8003dfa:	d5e1      	bpl.n	8003dc0 <__swbuf_r+0x2e>
 8003dfc:	2e0a      	cmp	r6, #10
 8003dfe:	d1df      	bne.n	8003dc0 <__swbuf_r+0x2e>
 8003e00:	4621      	mov	r1, r4
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 fd20 	bl	8004848 <_fflush_r>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d0d9      	beq.n	8003dc0 <__swbuf_r+0x2e>
 8003e0c:	e7d6      	b.n	8003dbc <__swbuf_r+0x2a>
	...

08003e10 <__swsetup_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4b29      	ldr	r3, [pc, #164]	@ (8003eb8 <__swsetup_r+0xa8>)
 8003e14:	4605      	mov	r5, r0
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	460c      	mov	r4, r1
 8003e1a:	b118      	cbz	r0, 8003e24 <__swsetup_r+0x14>
 8003e1c:	6a03      	ldr	r3, [r0, #32]
 8003e1e:	b90b      	cbnz	r3, 8003e24 <__swsetup_r+0x14>
 8003e20:	f7ff fece 	bl	8003bc0 <__sinit>
 8003e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e28:	0719      	lsls	r1, r3, #28
 8003e2a:	d422      	bmi.n	8003e72 <__swsetup_r+0x62>
 8003e2c:	06da      	lsls	r2, r3, #27
 8003e2e:	d407      	bmi.n	8003e40 <__swsetup_r+0x30>
 8003e30:	2209      	movs	r2, #9
 8003e32:	602a      	str	r2, [r5, #0]
 8003e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e38:	81a3      	strh	r3, [r4, #12]
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e3e:	e033      	b.n	8003ea8 <__swsetup_r+0x98>
 8003e40:	0758      	lsls	r0, r3, #29
 8003e42:	d512      	bpl.n	8003e6a <__swsetup_r+0x5a>
 8003e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e46:	b141      	cbz	r1, 8003e5a <__swsetup_r+0x4a>
 8003e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e4c:	4299      	cmp	r1, r3
 8003e4e:	d002      	beq.n	8003e56 <__swsetup_r+0x46>
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f8af 	bl	8003fb4 <_free_r>
 8003e56:	2300      	movs	r3, #0
 8003e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e60:	81a3      	strh	r3, [r4, #12]
 8003e62:	2300      	movs	r3, #0
 8003e64:	6063      	str	r3, [r4, #4]
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	b94b      	cbnz	r3, 8003e8a <__swsetup_r+0x7a>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e80:	d003      	beq.n	8003e8a <__swsetup_r+0x7a>
 8003e82:	4621      	mov	r1, r4
 8003e84:	4628      	mov	r0, r5
 8003e86:	f000 fd2d 	bl	80048e4 <__smakebuf_r>
 8003e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e8e:	f013 0201 	ands.w	r2, r3, #1
 8003e92:	d00a      	beq.n	8003eaa <__swsetup_r+0x9a>
 8003e94:	2200      	movs	r2, #0
 8003e96:	60a2      	str	r2, [r4, #8]
 8003e98:	6962      	ldr	r2, [r4, #20]
 8003e9a:	4252      	negs	r2, r2
 8003e9c:	61a2      	str	r2, [r4, #24]
 8003e9e:	6922      	ldr	r2, [r4, #16]
 8003ea0:	b942      	cbnz	r2, 8003eb4 <__swsetup_r+0xa4>
 8003ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ea6:	d1c5      	bne.n	8003e34 <__swsetup_r+0x24>
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
 8003eaa:	0799      	lsls	r1, r3, #30
 8003eac:	bf58      	it	pl
 8003eae:	6962      	ldrpl	r2, [r4, #20]
 8003eb0:	60a2      	str	r2, [r4, #8]
 8003eb2:	e7f4      	b.n	8003e9e <__swsetup_r+0x8e>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e7f7      	b.n	8003ea8 <__swsetup_r+0x98>
 8003eb8:	20000018 	.word	0x20000018

08003ebc <memset>:
 8003ebc:	4402      	add	r2, r0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <_close_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d06      	ldr	r5, [pc, #24]	@ (8003ee8 <_close_r+0x1c>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fc feb6 	bl	8000c48 <_close>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_close_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_close_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000820 	.word	0x20000820

08003eec <_lseek_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4d07      	ldr	r5, [pc, #28]	@ (8003f0c <_lseek_r+0x20>)
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	4608      	mov	r0, r1
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7fc feae 	bl	8000c5c <_lseek>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_lseek_r+0x1e>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_lseek_r+0x1e>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000820 	.word	0x20000820

08003f10 <_read_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4d07      	ldr	r5, [pc, #28]	@ (8003f30 <_read_r+0x20>)
 8003f14:	4604      	mov	r4, r0
 8003f16:	4608      	mov	r0, r1
 8003f18:	4611      	mov	r1, r2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	602a      	str	r2, [r5, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7fc fe82 	bl	8000c28 <_read>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_read_r+0x1e>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_read_r+0x1e>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000820 	.word	0x20000820

08003f34 <_write_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d07      	ldr	r5, [pc, #28]	@ (8003f54 <_write_r+0x20>)
 8003f38:	4604      	mov	r4, r0
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc fbac 	bl	80006a0 <_write>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_write_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_write_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000820 	.word	0x20000820

08003f58 <__errno>:
 8003f58:	4b01      	ldr	r3, [pc, #4]	@ (8003f60 <__errno+0x8>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000018 	.word	0x20000018

08003f64 <__libc_init_array>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4d0d      	ldr	r5, [pc, #52]	@ (8003f9c <__libc_init_array+0x38>)
 8003f68:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa0 <__libc_init_array+0x3c>)
 8003f6a:	1b64      	subs	r4, r4, r5
 8003f6c:	10a4      	asrs	r4, r4, #2
 8003f6e:	2600      	movs	r6, #0
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	d109      	bne.n	8003f88 <__libc_init_array+0x24>
 8003f74:	4d0b      	ldr	r5, [pc, #44]	@ (8003fa4 <__libc_init_array+0x40>)
 8003f76:	4c0c      	ldr	r4, [pc, #48]	@ (8003fa8 <__libc_init_array+0x44>)
 8003f78:	f000 fd22 	bl	80049c0 <_init>
 8003f7c:	1b64      	subs	r4, r4, r5
 8003f7e:	10a4      	asrs	r4, r4, #2
 8003f80:	2600      	movs	r6, #0
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	d105      	bne.n	8003f92 <__libc_init_array+0x2e>
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8c:	4798      	blx	r3
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7ee      	b.n	8003f70 <__libc_init_array+0xc>
 8003f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f96:	4798      	blx	r3
 8003f98:	3601      	adds	r6, #1
 8003f9a:	e7f2      	b.n	8003f82 <__libc_init_array+0x1e>
 8003f9c:	08004a84 	.word	0x08004a84
 8003fa0:	08004a84 	.word	0x08004a84
 8003fa4:	08004a84 	.word	0x08004a84
 8003fa8:	08004a88 	.word	0x08004a88

08003fac <__retarget_lock_init_recursive>:
 8003fac:	4770      	bx	lr

08003fae <__retarget_lock_acquire_recursive>:
 8003fae:	4770      	bx	lr

08003fb0 <__retarget_lock_release_recursive>:
 8003fb0:	4770      	bx	lr
	...

08003fb4 <_free_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d041      	beq.n	8004040 <_free_r+0x8c>
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f0c      	subs	r4, r1, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	18e4      	addlt	r4, r4, r3
 8003fc8:	f000 f8e0 	bl	800418c <__malloc_lock>
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <_free_r+0x90>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	b933      	cbnz	r3, 8003fe0 <_free_r+0x2c>
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6014      	str	r4, [r2, #0]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fdc:	f000 b8dc 	b.w	8004198 <__malloc_unlock>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d908      	bls.n	8003ff6 <_free_r+0x42>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	1821      	adds	r1, r4, r0
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	bf01      	itttt	eq
 8003fec:	6819      	ldreq	r1, [r3, #0]
 8003fee:	685b      	ldreq	r3, [r3, #4]
 8003ff0:	1809      	addeq	r1, r1, r0
 8003ff2:	6021      	streq	r1, [r4, #0]
 8003ff4:	e7ed      	b.n	8003fd2 <_free_r+0x1e>
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b10b      	cbz	r3, 8004000 <_free_r+0x4c>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d9fa      	bls.n	8003ff6 <_free_r+0x42>
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	1850      	adds	r0, r2, r1
 8004004:	42a0      	cmp	r0, r4
 8004006:	d10b      	bne.n	8004020 <_free_r+0x6c>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	4401      	add	r1, r0
 800400c:	1850      	adds	r0, r2, r1
 800400e:	4283      	cmp	r3, r0
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	d1e0      	bne.n	8003fd6 <_free_r+0x22>
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	6053      	str	r3, [r2, #4]
 800401a:	4408      	add	r0, r1
 800401c:	6010      	str	r0, [r2, #0]
 800401e:	e7da      	b.n	8003fd6 <_free_r+0x22>
 8004020:	d902      	bls.n	8004028 <_free_r+0x74>
 8004022:	230c      	movs	r3, #12
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	e7d6      	b.n	8003fd6 <_free_r+0x22>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	1821      	adds	r1, r4, r0
 800402c:	428b      	cmp	r3, r1
 800402e:	bf04      	itt	eq
 8004030:	6819      	ldreq	r1, [r3, #0]
 8004032:	685b      	ldreq	r3, [r3, #4]
 8004034:	6063      	str	r3, [r4, #4]
 8004036:	bf04      	itt	eq
 8004038:	1809      	addeq	r1, r1, r0
 800403a:	6021      	streq	r1, [r4, #0]
 800403c:	6054      	str	r4, [r2, #4]
 800403e:	e7ca      	b.n	8003fd6 <_free_r+0x22>
 8004040:	bd38      	pop	{r3, r4, r5, pc}
 8004042:	bf00      	nop
 8004044:	2000082c 	.word	0x2000082c

08004048 <sbrk_aligned>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4e0f      	ldr	r6, [pc, #60]	@ (8004088 <sbrk_aligned+0x40>)
 800404c:	460c      	mov	r4, r1
 800404e:	6831      	ldr	r1, [r6, #0]
 8004050:	4605      	mov	r5, r0
 8004052:	b911      	cbnz	r1, 800405a <sbrk_aligned+0x12>
 8004054:	f000 fca4 	bl	80049a0 <_sbrk_r>
 8004058:	6030      	str	r0, [r6, #0]
 800405a:	4621      	mov	r1, r4
 800405c:	4628      	mov	r0, r5
 800405e:	f000 fc9f 	bl	80049a0 <_sbrk_r>
 8004062:	1c43      	adds	r3, r0, #1
 8004064:	d103      	bne.n	800406e <sbrk_aligned+0x26>
 8004066:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800406a:	4620      	mov	r0, r4
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	1cc4      	adds	r4, r0, #3
 8004070:	f024 0403 	bic.w	r4, r4, #3
 8004074:	42a0      	cmp	r0, r4
 8004076:	d0f8      	beq.n	800406a <sbrk_aligned+0x22>
 8004078:	1a21      	subs	r1, r4, r0
 800407a:	4628      	mov	r0, r5
 800407c:	f000 fc90 	bl	80049a0 <_sbrk_r>
 8004080:	3001      	adds	r0, #1
 8004082:	d1f2      	bne.n	800406a <sbrk_aligned+0x22>
 8004084:	e7ef      	b.n	8004066 <sbrk_aligned+0x1e>
 8004086:	bf00      	nop
 8004088:	20000828 	.word	0x20000828

0800408c <_malloc_r>:
 800408c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004090:	1ccd      	adds	r5, r1, #3
 8004092:	f025 0503 	bic.w	r5, r5, #3
 8004096:	3508      	adds	r5, #8
 8004098:	2d0c      	cmp	r5, #12
 800409a:	bf38      	it	cc
 800409c:	250c      	movcc	r5, #12
 800409e:	2d00      	cmp	r5, #0
 80040a0:	4606      	mov	r6, r0
 80040a2:	db01      	blt.n	80040a8 <_malloc_r+0x1c>
 80040a4:	42a9      	cmp	r1, r5
 80040a6:	d904      	bls.n	80040b2 <_malloc_r+0x26>
 80040a8:	230c      	movs	r3, #12
 80040aa:	6033      	str	r3, [r6, #0]
 80040ac:	2000      	movs	r0, #0
 80040ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004188 <_malloc_r+0xfc>
 80040b6:	f000 f869 	bl	800418c <__malloc_lock>
 80040ba:	f8d8 3000 	ldr.w	r3, [r8]
 80040be:	461c      	mov	r4, r3
 80040c0:	bb44      	cbnz	r4, 8004114 <_malloc_r+0x88>
 80040c2:	4629      	mov	r1, r5
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7ff ffbf 	bl	8004048 <sbrk_aligned>
 80040ca:	1c43      	adds	r3, r0, #1
 80040cc:	4604      	mov	r4, r0
 80040ce:	d158      	bne.n	8004182 <_malloc_r+0xf6>
 80040d0:	f8d8 4000 	ldr.w	r4, [r8]
 80040d4:	4627      	mov	r7, r4
 80040d6:	2f00      	cmp	r7, #0
 80040d8:	d143      	bne.n	8004162 <_malloc_r+0xd6>
 80040da:	2c00      	cmp	r4, #0
 80040dc:	d04b      	beq.n	8004176 <_malloc_r+0xea>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	4639      	mov	r1, r7
 80040e2:	4630      	mov	r0, r6
 80040e4:	eb04 0903 	add.w	r9, r4, r3
 80040e8:	f000 fc5a 	bl	80049a0 <_sbrk_r>
 80040ec:	4581      	cmp	r9, r0
 80040ee:	d142      	bne.n	8004176 <_malloc_r+0xea>
 80040f0:	6821      	ldr	r1, [r4, #0]
 80040f2:	1a6d      	subs	r5, r5, r1
 80040f4:	4629      	mov	r1, r5
 80040f6:	4630      	mov	r0, r6
 80040f8:	f7ff ffa6 	bl	8004048 <sbrk_aligned>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d03a      	beq.n	8004176 <_malloc_r+0xea>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	442b      	add	r3, r5
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	f8d8 3000 	ldr.w	r3, [r8]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	bb62      	cbnz	r2, 8004168 <_malloc_r+0xdc>
 800410e:	f8c8 7000 	str.w	r7, [r8]
 8004112:	e00f      	b.n	8004134 <_malloc_r+0xa8>
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	1b52      	subs	r2, r2, r5
 8004118:	d420      	bmi.n	800415c <_malloc_r+0xd0>
 800411a:	2a0b      	cmp	r2, #11
 800411c:	d917      	bls.n	800414e <_malloc_r+0xc2>
 800411e:	1961      	adds	r1, r4, r5
 8004120:	42a3      	cmp	r3, r4
 8004122:	6025      	str	r5, [r4, #0]
 8004124:	bf18      	it	ne
 8004126:	6059      	strne	r1, [r3, #4]
 8004128:	6863      	ldr	r3, [r4, #4]
 800412a:	bf08      	it	eq
 800412c:	f8c8 1000 	streq.w	r1, [r8]
 8004130:	5162      	str	r2, [r4, r5]
 8004132:	604b      	str	r3, [r1, #4]
 8004134:	4630      	mov	r0, r6
 8004136:	f000 f82f 	bl	8004198 <__malloc_unlock>
 800413a:	f104 000b 	add.w	r0, r4, #11
 800413e:	1d23      	adds	r3, r4, #4
 8004140:	f020 0007 	bic.w	r0, r0, #7
 8004144:	1ac2      	subs	r2, r0, r3
 8004146:	bf1c      	itt	ne
 8004148:	1a1b      	subne	r3, r3, r0
 800414a:	50a3      	strne	r3, [r4, r2]
 800414c:	e7af      	b.n	80040ae <_malloc_r+0x22>
 800414e:	6862      	ldr	r2, [r4, #4]
 8004150:	42a3      	cmp	r3, r4
 8004152:	bf0c      	ite	eq
 8004154:	f8c8 2000 	streq.w	r2, [r8]
 8004158:	605a      	strne	r2, [r3, #4]
 800415a:	e7eb      	b.n	8004134 <_malloc_r+0xa8>
 800415c:	4623      	mov	r3, r4
 800415e:	6864      	ldr	r4, [r4, #4]
 8004160:	e7ae      	b.n	80040c0 <_malloc_r+0x34>
 8004162:	463c      	mov	r4, r7
 8004164:	687f      	ldr	r7, [r7, #4]
 8004166:	e7b6      	b.n	80040d6 <_malloc_r+0x4a>
 8004168:	461a      	mov	r2, r3
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	42a3      	cmp	r3, r4
 800416e:	d1fb      	bne.n	8004168 <_malloc_r+0xdc>
 8004170:	2300      	movs	r3, #0
 8004172:	6053      	str	r3, [r2, #4]
 8004174:	e7de      	b.n	8004134 <_malloc_r+0xa8>
 8004176:	230c      	movs	r3, #12
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	4630      	mov	r0, r6
 800417c:	f000 f80c 	bl	8004198 <__malloc_unlock>
 8004180:	e794      	b.n	80040ac <_malloc_r+0x20>
 8004182:	6005      	str	r5, [r0, #0]
 8004184:	e7d6      	b.n	8004134 <_malloc_r+0xa8>
 8004186:	bf00      	nop
 8004188:	2000082c 	.word	0x2000082c

0800418c <__malloc_lock>:
 800418c:	4801      	ldr	r0, [pc, #4]	@ (8004194 <__malloc_lock+0x8>)
 800418e:	f7ff bf0e 	b.w	8003fae <__retarget_lock_acquire_recursive>
 8004192:	bf00      	nop
 8004194:	20000824 	.word	0x20000824

08004198 <__malloc_unlock>:
 8004198:	4801      	ldr	r0, [pc, #4]	@ (80041a0 <__malloc_unlock+0x8>)
 800419a:	f7ff bf09 	b.w	8003fb0 <__retarget_lock_release_recursive>
 800419e:	bf00      	nop
 80041a0:	20000824 	.word	0x20000824

080041a4 <__sfputc_r>:
 80041a4:	6893      	ldr	r3, [r2, #8]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	b410      	push	{r4}
 80041ac:	6093      	str	r3, [r2, #8]
 80041ae:	da08      	bge.n	80041c2 <__sfputc_r+0x1e>
 80041b0:	6994      	ldr	r4, [r2, #24]
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	db01      	blt.n	80041ba <__sfputc_r+0x16>
 80041b6:	290a      	cmp	r1, #10
 80041b8:	d103      	bne.n	80041c2 <__sfputc_r+0x1e>
 80041ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041be:	f7ff bde8 	b.w	8003d92 <__swbuf_r>
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	1c58      	adds	r0, r3, #1
 80041c6:	6010      	str	r0, [r2, #0]
 80041c8:	7019      	strb	r1, [r3, #0]
 80041ca:	4608      	mov	r0, r1
 80041cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <__sfputs_r>:
 80041d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d4:	4606      	mov	r6, r0
 80041d6:	460f      	mov	r7, r1
 80041d8:	4614      	mov	r4, r2
 80041da:	18d5      	adds	r5, r2, r3
 80041dc:	42ac      	cmp	r4, r5
 80041de:	d101      	bne.n	80041e4 <__sfputs_r+0x12>
 80041e0:	2000      	movs	r0, #0
 80041e2:	e007      	b.n	80041f4 <__sfputs_r+0x22>
 80041e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e8:	463a      	mov	r2, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff ffda 	bl	80041a4 <__sfputc_r>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d1f3      	bne.n	80041dc <__sfputs_r+0xa>
 80041f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041f8 <_vfiprintf_r>:
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	460d      	mov	r5, r1
 80041fe:	b09d      	sub	sp, #116	@ 0x74
 8004200:	4614      	mov	r4, r2
 8004202:	4698      	mov	r8, r3
 8004204:	4606      	mov	r6, r0
 8004206:	b118      	cbz	r0, 8004210 <_vfiprintf_r+0x18>
 8004208:	6a03      	ldr	r3, [r0, #32]
 800420a:	b90b      	cbnz	r3, 8004210 <_vfiprintf_r+0x18>
 800420c:	f7ff fcd8 	bl	8003bc0 <__sinit>
 8004210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004212:	07d9      	lsls	r1, r3, #31
 8004214:	d405      	bmi.n	8004222 <_vfiprintf_r+0x2a>
 8004216:	89ab      	ldrh	r3, [r5, #12]
 8004218:	059a      	lsls	r2, r3, #22
 800421a:	d402      	bmi.n	8004222 <_vfiprintf_r+0x2a>
 800421c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800421e:	f7ff fec6 	bl	8003fae <__retarget_lock_acquire_recursive>
 8004222:	89ab      	ldrh	r3, [r5, #12]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	d501      	bpl.n	800422c <_vfiprintf_r+0x34>
 8004228:	692b      	ldr	r3, [r5, #16]
 800422a:	b99b      	cbnz	r3, 8004254 <_vfiprintf_r+0x5c>
 800422c:	4629      	mov	r1, r5
 800422e:	4630      	mov	r0, r6
 8004230:	f7ff fdee 	bl	8003e10 <__swsetup_r>
 8004234:	b170      	cbz	r0, 8004254 <_vfiprintf_r+0x5c>
 8004236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004238:	07dc      	lsls	r4, r3, #31
 800423a:	d504      	bpl.n	8004246 <_vfiprintf_r+0x4e>
 800423c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004240:	b01d      	add	sp, #116	@ 0x74
 8004242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004246:	89ab      	ldrh	r3, [r5, #12]
 8004248:	0598      	lsls	r0, r3, #22
 800424a:	d4f7      	bmi.n	800423c <_vfiprintf_r+0x44>
 800424c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800424e:	f7ff feaf 	bl	8003fb0 <__retarget_lock_release_recursive>
 8004252:	e7f3      	b.n	800423c <_vfiprintf_r+0x44>
 8004254:	2300      	movs	r3, #0
 8004256:	9309      	str	r3, [sp, #36]	@ 0x24
 8004258:	2320      	movs	r3, #32
 800425a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800425e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004262:	2330      	movs	r3, #48	@ 0x30
 8004264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004414 <_vfiprintf_r+0x21c>
 8004268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800426c:	f04f 0901 	mov.w	r9, #1
 8004270:	4623      	mov	r3, r4
 8004272:	469a      	mov	sl, r3
 8004274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004278:	b10a      	cbz	r2, 800427e <_vfiprintf_r+0x86>
 800427a:	2a25      	cmp	r2, #37	@ 0x25
 800427c:	d1f9      	bne.n	8004272 <_vfiprintf_r+0x7a>
 800427e:	ebba 0b04 	subs.w	fp, sl, r4
 8004282:	d00b      	beq.n	800429c <_vfiprintf_r+0xa4>
 8004284:	465b      	mov	r3, fp
 8004286:	4622      	mov	r2, r4
 8004288:	4629      	mov	r1, r5
 800428a:	4630      	mov	r0, r6
 800428c:	f7ff ffa1 	bl	80041d2 <__sfputs_r>
 8004290:	3001      	adds	r0, #1
 8004292:	f000 80a7 	beq.w	80043e4 <_vfiprintf_r+0x1ec>
 8004296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004298:	445a      	add	r2, fp
 800429a:	9209      	str	r2, [sp, #36]	@ 0x24
 800429c:	f89a 3000 	ldrb.w	r3, [sl]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 809f 	beq.w	80043e4 <_vfiprintf_r+0x1ec>
 80042a6:	2300      	movs	r3, #0
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042b0:	f10a 0a01 	add.w	sl, sl, #1
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	9307      	str	r3, [sp, #28]
 80042b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80042be:	4654      	mov	r4, sl
 80042c0:	2205      	movs	r2, #5
 80042c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c6:	4853      	ldr	r0, [pc, #332]	@ (8004414 <_vfiprintf_r+0x21c>)
 80042c8:	f7fb ff82 	bl	80001d0 <memchr>
 80042cc:	9a04      	ldr	r2, [sp, #16]
 80042ce:	b9d8      	cbnz	r0, 8004308 <_vfiprintf_r+0x110>
 80042d0:	06d1      	lsls	r1, r2, #27
 80042d2:	bf44      	itt	mi
 80042d4:	2320      	movmi	r3, #32
 80042d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042da:	0713      	lsls	r3, r2, #28
 80042dc:	bf44      	itt	mi
 80042de:	232b      	movmi	r3, #43	@ 0x2b
 80042e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042e4:	f89a 3000 	ldrb.w	r3, [sl]
 80042e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ea:	d015      	beq.n	8004318 <_vfiprintf_r+0x120>
 80042ec:	9a07      	ldr	r2, [sp, #28]
 80042ee:	4654      	mov	r4, sl
 80042f0:	2000      	movs	r0, #0
 80042f2:	f04f 0c0a 	mov.w	ip, #10
 80042f6:	4621      	mov	r1, r4
 80042f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042fc:	3b30      	subs	r3, #48	@ 0x30
 80042fe:	2b09      	cmp	r3, #9
 8004300:	d94b      	bls.n	800439a <_vfiprintf_r+0x1a2>
 8004302:	b1b0      	cbz	r0, 8004332 <_vfiprintf_r+0x13a>
 8004304:	9207      	str	r2, [sp, #28]
 8004306:	e014      	b.n	8004332 <_vfiprintf_r+0x13a>
 8004308:	eba0 0308 	sub.w	r3, r0, r8
 800430c:	fa09 f303 	lsl.w	r3, r9, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	9304      	str	r3, [sp, #16]
 8004314:	46a2      	mov	sl, r4
 8004316:	e7d2      	b.n	80042be <_vfiprintf_r+0xc6>
 8004318:	9b03      	ldr	r3, [sp, #12]
 800431a:	1d19      	adds	r1, r3, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	9103      	str	r1, [sp, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	bfbb      	ittet	lt
 8004324:	425b      	neglt	r3, r3
 8004326:	f042 0202 	orrlt.w	r2, r2, #2
 800432a:	9307      	strge	r3, [sp, #28]
 800432c:	9307      	strlt	r3, [sp, #28]
 800432e:	bfb8      	it	lt
 8004330:	9204      	strlt	r2, [sp, #16]
 8004332:	7823      	ldrb	r3, [r4, #0]
 8004334:	2b2e      	cmp	r3, #46	@ 0x2e
 8004336:	d10a      	bne.n	800434e <_vfiprintf_r+0x156>
 8004338:	7863      	ldrb	r3, [r4, #1]
 800433a:	2b2a      	cmp	r3, #42	@ 0x2a
 800433c:	d132      	bne.n	80043a4 <_vfiprintf_r+0x1ac>
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	1d1a      	adds	r2, r3, #4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	9203      	str	r2, [sp, #12]
 8004346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800434a:	3402      	adds	r4, #2
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004424 <_vfiprintf_r+0x22c>
 8004352:	7821      	ldrb	r1, [r4, #0]
 8004354:	2203      	movs	r2, #3
 8004356:	4650      	mov	r0, sl
 8004358:	f7fb ff3a 	bl	80001d0 <memchr>
 800435c:	b138      	cbz	r0, 800436e <_vfiprintf_r+0x176>
 800435e:	9b04      	ldr	r3, [sp, #16]
 8004360:	eba0 000a 	sub.w	r0, r0, sl
 8004364:	2240      	movs	r2, #64	@ 0x40
 8004366:	4082      	lsls	r2, r0
 8004368:	4313      	orrs	r3, r2
 800436a:	3401      	adds	r4, #1
 800436c:	9304      	str	r3, [sp, #16]
 800436e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004372:	4829      	ldr	r0, [pc, #164]	@ (8004418 <_vfiprintf_r+0x220>)
 8004374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004378:	2206      	movs	r2, #6
 800437a:	f7fb ff29 	bl	80001d0 <memchr>
 800437e:	2800      	cmp	r0, #0
 8004380:	d03f      	beq.n	8004402 <_vfiprintf_r+0x20a>
 8004382:	4b26      	ldr	r3, [pc, #152]	@ (800441c <_vfiprintf_r+0x224>)
 8004384:	bb1b      	cbnz	r3, 80043ce <_vfiprintf_r+0x1d6>
 8004386:	9b03      	ldr	r3, [sp, #12]
 8004388:	3307      	adds	r3, #7
 800438a:	f023 0307 	bic.w	r3, r3, #7
 800438e:	3308      	adds	r3, #8
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004394:	443b      	add	r3, r7
 8004396:	9309      	str	r3, [sp, #36]	@ 0x24
 8004398:	e76a      	b.n	8004270 <_vfiprintf_r+0x78>
 800439a:	fb0c 3202 	mla	r2, ip, r2, r3
 800439e:	460c      	mov	r4, r1
 80043a0:	2001      	movs	r0, #1
 80043a2:	e7a8      	b.n	80042f6 <_vfiprintf_r+0xfe>
 80043a4:	2300      	movs	r3, #0
 80043a6:	3401      	adds	r4, #1
 80043a8:	9305      	str	r3, [sp, #20]
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0c0a 	mov.w	ip, #10
 80043b0:	4620      	mov	r0, r4
 80043b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b6:	3a30      	subs	r2, #48	@ 0x30
 80043b8:	2a09      	cmp	r2, #9
 80043ba:	d903      	bls.n	80043c4 <_vfiprintf_r+0x1cc>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0c6      	beq.n	800434e <_vfiprintf_r+0x156>
 80043c0:	9105      	str	r1, [sp, #20]
 80043c2:	e7c4      	b.n	800434e <_vfiprintf_r+0x156>
 80043c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c8:	4604      	mov	r4, r0
 80043ca:	2301      	movs	r3, #1
 80043cc:	e7f0      	b.n	80043b0 <_vfiprintf_r+0x1b8>
 80043ce:	ab03      	add	r3, sp, #12
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	462a      	mov	r2, r5
 80043d4:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <_vfiprintf_r+0x228>)
 80043d6:	a904      	add	r1, sp, #16
 80043d8:	4630      	mov	r0, r6
 80043da:	f3af 8000 	nop.w
 80043de:	4607      	mov	r7, r0
 80043e0:	1c78      	adds	r0, r7, #1
 80043e2:	d1d6      	bne.n	8004392 <_vfiprintf_r+0x19a>
 80043e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043e6:	07d9      	lsls	r1, r3, #31
 80043e8:	d405      	bmi.n	80043f6 <_vfiprintf_r+0x1fe>
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	059a      	lsls	r2, r3, #22
 80043ee:	d402      	bmi.n	80043f6 <_vfiprintf_r+0x1fe>
 80043f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043f2:	f7ff fddd 	bl	8003fb0 <__retarget_lock_release_recursive>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	065b      	lsls	r3, r3, #25
 80043fa:	f53f af1f 	bmi.w	800423c <_vfiprintf_r+0x44>
 80043fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004400:	e71e      	b.n	8004240 <_vfiprintf_r+0x48>
 8004402:	ab03      	add	r3, sp, #12
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	462a      	mov	r2, r5
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <_vfiprintf_r+0x228>)
 800440a:	a904      	add	r1, sp, #16
 800440c:	4630      	mov	r0, r6
 800440e:	f000 f879 	bl	8004504 <_printf_i>
 8004412:	e7e4      	b.n	80043de <_vfiprintf_r+0x1e6>
 8004414:	08004a48 	.word	0x08004a48
 8004418:	08004a52 	.word	0x08004a52
 800441c:	00000000 	.word	0x00000000
 8004420:	080041d3 	.word	0x080041d3
 8004424:	08004a4e 	.word	0x08004a4e

08004428 <_printf_common>:
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	4616      	mov	r6, r2
 800442e:	4698      	mov	r8, r3
 8004430:	688a      	ldr	r2, [r1, #8]
 8004432:	690b      	ldr	r3, [r1, #16]
 8004434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004438:	4293      	cmp	r3, r2
 800443a:	bfb8      	it	lt
 800443c:	4613      	movlt	r3, r2
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004444:	4607      	mov	r7, r0
 8004446:	460c      	mov	r4, r1
 8004448:	b10a      	cbz	r2, 800444e <_printf_common+0x26>
 800444a:	3301      	adds	r3, #1
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	0699      	lsls	r1, r3, #26
 8004452:	bf42      	ittt	mi
 8004454:	6833      	ldrmi	r3, [r6, #0]
 8004456:	3302      	addmi	r3, #2
 8004458:	6033      	strmi	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	f015 0506 	ands.w	r5, r5, #6
 8004460:	d106      	bne.n	8004470 <_printf_common+0x48>
 8004462:	f104 0a19 	add.w	sl, r4, #25
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	6832      	ldr	r2, [r6, #0]
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	42ab      	cmp	r3, r5
 800446e:	dc26      	bgt.n	80044be <_printf_common+0x96>
 8004470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	3b00      	subs	r3, #0
 8004478:	bf18      	it	ne
 800447a:	2301      	movne	r3, #1
 800447c:	0692      	lsls	r2, r2, #26
 800447e:	d42b      	bmi.n	80044d8 <_printf_common+0xb0>
 8004480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004484:	4641      	mov	r1, r8
 8004486:	4638      	mov	r0, r7
 8004488:	47c8      	blx	r9
 800448a:	3001      	adds	r0, #1
 800448c:	d01e      	beq.n	80044cc <_printf_common+0xa4>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	2b04      	cmp	r3, #4
 8004498:	bf02      	ittt	eq
 800449a:	68e5      	ldreq	r5, [r4, #12]
 800449c:	6833      	ldreq	r3, [r6, #0]
 800449e:	1aed      	subeq	r5, r5, r3
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	bf0c      	ite	eq
 80044a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a8:	2500      	movne	r5, #0
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bfc4      	itt	gt
 80044ae:	1a9b      	subgt	r3, r3, r2
 80044b0:	18ed      	addgt	r5, r5, r3
 80044b2:	2600      	movs	r6, #0
 80044b4:	341a      	adds	r4, #26
 80044b6:	42b5      	cmp	r5, r6
 80044b8:	d11a      	bne.n	80044f0 <_printf_common+0xc8>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e008      	b.n	80044d0 <_printf_common+0xa8>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	4641      	mov	r1, r8
 80044c4:	4638      	mov	r0, r7
 80044c6:	47c8      	blx	r9
 80044c8:	3001      	adds	r0, #1
 80044ca:	d103      	bne.n	80044d4 <_printf_common+0xac>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7c6      	b.n	8004466 <_printf_common+0x3e>
 80044d8:	18e1      	adds	r1, r4, r3
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	2030      	movs	r0, #48	@ 0x30
 80044de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044e2:	4422      	add	r2, r4
 80044e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044ec:	3302      	adds	r3, #2
 80044ee:	e7c7      	b.n	8004480 <_printf_common+0x58>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4622      	mov	r2, r4
 80044f4:	4641      	mov	r1, r8
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c8      	blx	r9
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa4>
 80044fe:	3601      	adds	r6, #1
 8004500:	e7d9      	b.n	80044b6 <_printf_common+0x8e>
	...

08004504 <_printf_i>:
 8004504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	7e0f      	ldrb	r7, [r1, #24]
 800450a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800450c:	2f78      	cmp	r7, #120	@ 0x78
 800450e:	4691      	mov	r9, r2
 8004510:	4680      	mov	r8, r0
 8004512:	460c      	mov	r4, r1
 8004514:	469a      	mov	sl, r3
 8004516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800451a:	d807      	bhi.n	800452c <_printf_i+0x28>
 800451c:	2f62      	cmp	r7, #98	@ 0x62
 800451e:	d80a      	bhi.n	8004536 <_printf_i+0x32>
 8004520:	2f00      	cmp	r7, #0
 8004522:	f000 80d1 	beq.w	80046c8 <_printf_i+0x1c4>
 8004526:	2f58      	cmp	r7, #88	@ 0x58
 8004528:	f000 80b8 	beq.w	800469c <_printf_i+0x198>
 800452c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004534:	e03a      	b.n	80045ac <_printf_i+0xa8>
 8004536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800453a:	2b15      	cmp	r3, #21
 800453c:	d8f6      	bhi.n	800452c <_printf_i+0x28>
 800453e:	a101      	add	r1, pc, #4	@ (adr r1, 8004544 <_printf_i+0x40>)
 8004540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004544:	0800459d 	.word	0x0800459d
 8004548:	080045b1 	.word	0x080045b1
 800454c:	0800452d 	.word	0x0800452d
 8004550:	0800452d 	.word	0x0800452d
 8004554:	0800452d 	.word	0x0800452d
 8004558:	0800452d 	.word	0x0800452d
 800455c:	080045b1 	.word	0x080045b1
 8004560:	0800452d 	.word	0x0800452d
 8004564:	0800452d 	.word	0x0800452d
 8004568:	0800452d 	.word	0x0800452d
 800456c:	0800452d 	.word	0x0800452d
 8004570:	080046af 	.word	0x080046af
 8004574:	080045db 	.word	0x080045db
 8004578:	08004669 	.word	0x08004669
 800457c:	0800452d 	.word	0x0800452d
 8004580:	0800452d 	.word	0x0800452d
 8004584:	080046d1 	.word	0x080046d1
 8004588:	0800452d 	.word	0x0800452d
 800458c:	080045db 	.word	0x080045db
 8004590:	0800452d 	.word	0x0800452d
 8004594:	0800452d 	.word	0x0800452d
 8004598:	08004671 	.word	0x08004671
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6032      	str	r2, [r6, #0]
 80045a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09c      	b.n	80046ea <_printf_i+0x1e6>
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	6031      	str	r1, [r6, #0]
 80045b8:	0606      	lsls	r6, r0, #24
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0xbc>
 80045bc:	681d      	ldr	r5, [r3, #0]
 80045be:	e003      	b.n	80045c8 <_printf_i+0xc4>
 80045c0:	0645      	lsls	r5, r0, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0xb8>
 80045c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	da03      	bge.n	80045d4 <_printf_i+0xd0>
 80045cc:	232d      	movs	r3, #45	@ 0x2d
 80045ce:	426d      	negs	r5, r5
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d4:	4858      	ldr	r0, [pc, #352]	@ (8004738 <_printf_i+0x234>)
 80045d6:	230a      	movs	r3, #10
 80045d8:	e011      	b.n	80045fe <_printf_i+0xfa>
 80045da:	6821      	ldr	r1, [r4, #0]
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	0608      	lsls	r0, r1, #24
 80045e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80045e4:	d402      	bmi.n	80045ec <_printf_i+0xe8>
 80045e6:	0649      	lsls	r1, r1, #25
 80045e8:	bf48      	it	mi
 80045ea:	b2ad      	uxthmi	r5, r5
 80045ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ee:	4852      	ldr	r0, [pc, #328]	@ (8004738 <_printf_i+0x234>)
 80045f0:	6033      	str	r3, [r6, #0]
 80045f2:	bf14      	ite	ne
 80045f4:	230a      	movne	r3, #10
 80045f6:	2308      	moveq	r3, #8
 80045f8:	2100      	movs	r1, #0
 80045fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045fe:	6866      	ldr	r6, [r4, #4]
 8004600:	60a6      	str	r6, [r4, #8]
 8004602:	2e00      	cmp	r6, #0
 8004604:	db05      	blt.n	8004612 <_printf_i+0x10e>
 8004606:	6821      	ldr	r1, [r4, #0]
 8004608:	432e      	orrs	r6, r5
 800460a:	f021 0104 	bic.w	r1, r1, #4
 800460e:	6021      	str	r1, [r4, #0]
 8004610:	d04b      	beq.n	80046aa <_printf_i+0x1a6>
 8004612:	4616      	mov	r6, r2
 8004614:	fbb5 f1f3 	udiv	r1, r5, r3
 8004618:	fb03 5711 	mls	r7, r3, r1, r5
 800461c:	5dc7      	ldrb	r7, [r0, r7]
 800461e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004622:	462f      	mov	r7, r5
 8004624:	42bb      	cmp	r3, r7
 8004626:	460d      	mov	r5, r1
 8004628:	d9f4      	bls.n	8004614 <_printf_i+0x110>
 800462a:	2b08      	cmp	r3, #8
 800462c:	d10b      	bne.n	8004646 <_printf_i+0x142>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	07df      	lsls	r7, r3, #31
 8004632:	d508      	bpl.n	8004646 <_printf_i+0x142>
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	6861      	ldr	r1, [r4, #4]
 8004638:	4299      	cmp	r1, r3
 800463a:	bfde      	ittt	le
 800463c:	2330      	movle	r3, #48	@ 0x30
 800463e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004642:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004646:	1b92      	subs	r2, r2, r6
 8004648:	6122      	str	r2, [r4, #16]
 800464a:	f8cd a000 	str.w	sl, [sp]
 800464e:	464b      	mov	r3, r9
 8004650:	aa03      	add	r2, sp, #12
 8004652:	4621      	mov	r1, r4
 8004654:	4640      	mov	r0, r8
 8004656:	f7ff fee7 	bl	8004428 <_printf_common>
 800465a:	3001      	adds	r0, #1
 800465c:	d14a      	bne.n	80046f4 <_printf_i+0x1f0>
 800465e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004662:	b004      	add	sp, #16
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f043 0320 	orr.w	r3, r3, #32
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	4832      	ldr	r0, [pc, #200]	@ (800473c <_printf_i+0x238>)
 8004672:	2778      	movs	r7, #120	@ 0x78
 8004674:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	6831      	ldr	r1, [r6, #0]
 800467c:	061f      	lsls	r7, r3, #24
 800467e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004682:	d402      	bmi.n	800468a <_printf_i+0x186>
 8004684:	065f      	lsls	r7, r3, #25
 8004686:	bf48      	it	mi
 8004688:	b2ad      	uxthmi	r5, r5
 800468a:	6031      	str	r1, [r6, #0]
 800468c:	07d9      	lsls	r1, r3, #31
 800468e:	bf44      	itt	mi
 8004690:	f043 0320 	orrmi.w	r3, r3, #32
 8004694:	6023      	strmi	r3, [r4, #0]
 8004696:	b11d      	cbz	r5, 80046a0 <_printf_i+0x19c>
 8004698:	2310      	movs	r3, #16
 800469a:	e7ad      	b.n	80045f8 <_printf_i+0xf4>
 800469c:	4826      	ldr	r0, [pc, #152]	@ (8004738 <_printf_i+0x234>)
 800469e:	e7e9      	b.n	8004674 <_printf_i+0x170>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	f023 0320 	bic.w	r3, r3, #32
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	e7f6      	b.n	8004698 <_printf_i+0x194>
 80046aa:	4616      	mov	r6, r2
 80046ac:	e7bd      	b.n	800462a <_printf_i+0x126>
 80046ae:	6833      	ldr	r3, [r6, #0]
 80046b0:	6825      	ldr	r5, [r4, #0]
 80046b2:	6961      	ldr	r1, [r4, #20]
 80046b4:	1d18      	adds	r0, r3, #4
 80046b6:	6030      	str	r0, [r6, #0]
 80046b8:	062e      	lsls	r6, r5, #24
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	d501      	bpl.n	80046c2 <_printf_i+0x1be>
 80046be:	6019      	str	r1, [r3, #0]
 80046c0:	e002      	b.n	80046c8 <_printf_i+0x1c4>
 80046c2:	0668      	lsls	r0, r5, #25
 80046c4:	d5fb      	bpl.n	80046be <_printf_i+0x1ba>
 80046c6:	8019      	strh	r1, [r3, #0]
 80046c8:	2300      	movs	r3, #0
 80046ca:	6123      	str	r3, [r4, #16]
 80046cc:	4616      	mov	r6, r2
 80046ce:	e7bc      	b.n	800464a <_printf_i+0x146>
 80046d0:	6833      	ldr	r3, [r6, #0]
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	6032      	str	r2, [r6, #0]
 80046d6:	681e      	ldr	r6, [r3, #0]
 80046d8:	6862      	ldr	r2, [r4, #4]
 80046da:	2100      	movs	r1, #0
 80046dc:	4630      	mov	r0, r6
 80046de:	f7fb fd77 	bl	80001d0 <memchr>
 80046e2:	b108      	cbz	r0, 80046e8 <_printf_i+0x1e4>
 80046e4:	1b80      	subs	r0, r0, r6
 80046e6:	6060      	str	r0, [r4, #4]
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	2300      	movs	r3, #0
 80046ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f2:	e7aa      	b.n	800464a <_printf_i+0x146>
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	4632      	mov	r2, r6
 80046f8:	4649      	mov	r1, r9
 80046fa:	4640      	mov	r0, r8
 80046fc:	47d0      	blx	sl
 80046fe:	3001      	adds	r0, #1
 8004700:	d0ad      	beq.n	800465e <_printf_i+0x15a>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	079b      	lsls	r3, r3, #30
 8004706:	d413      	bmi.n	8004730 <_printf_i+0x22c>
 8004708:	68e0      	ldr	r0, [r4, #12]
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	4298      	cmp	r0, r3
 800470e:	bfb8      	it	lt
 8004710:	4618      	movlt	r0, r3
 8004712:	e7a6      	b.n	8004662 <_printf_i+0x15e>
 8004714:	2301      	movs	r3, #1
 8004716:	4632      	mov	r2, r6
 8004718:	4649      	mov	r1, r9
 800471a:	4640      	mov	r0, r8
 800471c:	47d0      	blx	sl
 800471e:	3001      	adds	r0, #1
 8004720:	d09d      	beq.n	800465e <_printf_i+0x15a>
 8004722:	3501      	adds	r5, #1
 8004724:	68e3      	ldr	r3, [r4, #12]
 8004726:	9903      	ldr	r1, [sp, #12]
 8004728:	1a5b      	subs	r3, r3, r1
 800472a:	42ab      	cmp	r3, r5
 800472c:	dcf2      	bgt.n	8004714 <_printf_i+0x210>
 800472e:	e7eb      	b.n	8004708 <_printf_i+0x204>
 8004730:	2500      	movs	r5, #0
 8004732:	f104 0619 	add.w	r6, r4, #25
 8004736:	e7f5      	b.n	8004724 <_printf_i+0x220>
 8004738:	08004a59 	.word	0x08004a59
 800473c:	08004a6a 	.word	0x08004a6a

08004740 <__sflush_r>:
 8004740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004748:	0716      	lsls	r6, r2, #28
 800474a:	4605      	mov	r5, r0
 800474c:	460c      	mov	r4, r1
 800474e:	d454      	bmi.n	80047fa <__sflush_r+0xba>
 8004750:	684b      	ldr	r3, [r1, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	dc02      	bgt.n	800475c <__sflush_r+0x1c>
 8004756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	dd48      	ble.n	80047ee <__sflush_r+0xae>
 800475c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800475e:	2e00      	cmp	r6, #0
 8004760:	d045      	beq.n	80047ee <__sflush_r+0xae>
 8004762:	2300      	movs	r3, #0
 8004764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004768:	682f      	ldr	r7, [r5, #0]
 800476a:	6a21      	ldr	r1, [r4, #32]
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	d030      	beq.n	80047d2 <__sflush_r+0x92>
 8004770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	0759      	lsls	r1, r3, #29
 8004776:	d505      	bpl.n	8004784 <__sflush_r+0x44>
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800477e:	b10b      	cbz	r3, 8004784 <__sflush_r+0x44>
 8004780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004788:	6a21      	ldr	r1, [r4, #32]
 800478a:	4628      	mov	r0, r5
 800478c:	47b0      	blx	r6
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	d106      	bne.n	80047a2 <__sflush_r+0x62>
 8004794:	6829      	ldr	r1, [r5, #0]
 8004796:	291d      	cmp	r1, #29
 8004798:	d82b      	bhi.n	80047f2 <__sflush_r+0xb2>
 800479a:	4a2a      	ldr	r2, [pc, #168]	@ (8004844 <__sflush_r+0x104>)
 800479c:	40ca      	lsrs	r2, r1
 800479e:	07d6      	lsls	r6, r2, #31
 80047a0:	d527      	bpl.n	80047f2 <__sflush_r+0xb2>
 80047a2:	2200      	movs	r2, #0
 80047a4:	6062      	str	r2, [r4, #4]
 80047a6:	04d9      	lsls	r1, r3, #19
 80047a8:	6922      	ldr	r2, [r4, #16]
 80047aa:	6022      	str	r2, [r4, #0]
 80047ac:	d504      	bpl.n	80047b8 <__sflush_r+0x78>
 80047ae:	1c42      	adds	r2, r0, #1
 80047b0:	d101      	bne.n	80047b6 <__sflush_r+0x76>
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	b903      	cbnz	r3, 80047b8 <__sflush_r+0x78>
 80047b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80047b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ba:	602f      	str	r7, [r5, #0]
 80047bc:	b1b9      	cbz	r1, 80047ee <__sflush_r+0xae>
 80047be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d002      	beq.n	80047cc <__sflush_r+0x8c>
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7ff fbf4 	bl	8003fb4 <_free_r>
 80047cc:	2300      	movs	r3, #0
 80047ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80047d0:	e00d      	b.n	80047ee <__sflush_r+0xae>
 80047d2:	2301      	movs	r3, #1
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b0      	blx	r6
 80047d8:	4602      	mov	r2, r0
 80047da:	1c50      	adds	r0, r2, #1
 80047dc:	d1c9      	bne.n	8004772 <__sflush_r+0x32>
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0c6      	beq.n	8004772 <__sflush_r+0x32>
 80047e4:	2b1d      	cmp	r3, #29
 80047e6:	d001      	beq.n	80047ec <__sflush_r+0xac>
 80047e8:	2b16      	cmp	r3, #22
 80047ea:	d11e      	bne.n	800482a <__sflush_r+0xea>
 80047ec:	602f      	str	r7, [r5, #0]
 80047ee:	2000      	movs	r0, #0
 80047f0:	e022      	b.n	8004838 <__sflush_r+0xf8>
 80047f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f6:	b21b      	sxth	r3, r3
 80047f8:	e01b      	b.n	8004832 <__sflush_r+0xf2>
 80047fa:	690f      	ldr	r7, [r1, #16]
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	d0f6      	beq.n	80047ee <__sflush_r+0xae>
 8004800:	0793      	lsls	r3, r2, #30
 8004802:	680e      	ldr	r6, [r1, #0]
 8004804:	bf08      	it	eq
 8004806:	694b      	ldreq	r3, [r1, #20]
 8004808:	600f      	str	r7, [r1, #0]
 800480a:	bf18      	it	ne
 800480c:	2300      	movne	r3, #0
 800480e:	eba6 0807 	sub.w	r8, r6, r7
 8004812:	608b      	str	r3, [r1, #8]
 8004814:	f1b8 0f00 	cmp.w	r8, #0
 8004818:	dde9      	ble.n	80047ee <__sflush_r+0xae>
 800481a:	6a21      	ldr	r1, [r4, #32]
 800481c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800481e:	4643      	mov	r3, r8
 8004820:	463a      	mov	r2, r7
 8004822:	4628      	mov	r0, r5
 8004824:	47b0      	blx	r6
 8004826:	2800      	cmp	r0, #0
 8004828:	dc08      	bgt.n	800483c <__sflush_r+0xfc>
 800482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	4407      	add	r7, r0
 800483e:	eba8 0800 	sub.w	r8, r8, r0
 8004842:	e7e7      	b.n	8004814 <__sflush_r+0xd4>
 8004844:	20400001 	.word	0x20400001

08004848 <_fflush_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	4605      	mov	r5, r0
 800484e:	460c      	mov	r4, r1
 8004850:	b913      	cbnz	r3, 8004858 <_fflush_r+0x10>
 8004852:	2500      	movs	r5, #0
 8004854:	4628      	mov	r0, r5
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	b118      	cbz	r0, 8004862 <_fflush_r+0x1a>
 800485a:	6a03      	ldr	r3, [r0, #32]
 800485c:	b90b      	cbnz	r3, 8004862 <_fflush_r+0x1a>
 800485e:	f7ff f9af 	bl	8003bc0 <__sinit>
 8004862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f3      	beq.n	8004852 <_fflush_r+0xa>
 800486a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800486c:	07d0      	lsls	r0, r2, #31
 800486e:	d404      	bmi.n	800487a <_fflush_r+0x32>
 8004870:	0599      	lsls	r1, r3, #22
 8004872:	d402      	bmi.n	800487a <_fflush_r+0x32>
 8004874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004876:	f7ff fb9a 	bl	8003fae <__retarget_lock_acquire_recursive>
 800487a:	4628      	mov	r0, r5
 800487c:	4621      	mov	r1, r4
 800487e:	f7ff ff5f 	bl	8004740 <__sflush_r>
 8004882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004884:	07da      	lsls	r2, r3, #31
 8004886:	4605      	mov	r5, r0
 8004888:	d4e4      	bmi.n	8004854 <_fflush_r+0xc>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	059b      	lsls	r3, r3, #22
 800488e:	d4e1      	bmi.n	8004854 <_fflush_r+0xc>
 8004890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004892:	f7ff fb8d 	bl	8003fb0 <__retarget_lock_release_recursive>
 8004896:	e7dd      	b.n	8004854 <_fflush_r+0xc>

08004898 <__swhatbuf_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	460c      	mov	r4, r1
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2900      	cmp	r1, #0
 80048a2:	b096      	sub	sp, #88	@ 0x58
 80048a4:	4615      	mov	r5, r2
 80048a6:	461e      	mov	r6, r3
 80048a8:	da0d      	bge.n	80048c6 <__swhatbuf_r+0x2e>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2340      	movne	r3, #64	@ 0x40
 80048b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048bc:	2000      	movs	r0, #0
 80048be:	6031      	str	r1, [r6, #0]
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	b016      	add	sp, #88	@ 0x58
 80048c4:	bd70      	pop	{r4, r5, r6, pc}
 80048c6:	466a      	mov	r2, sp
 80048c8:	f000 f848 	bl	800495c <_fstat_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	dbec      	blt.n	80048aa <__swhatbuf_r+0x12>
 80048d0:	9901      	ldr	r1, [sp, #4]
 80048d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048da:	4259      	negs	r1, r3
 80048dc:	4159      	adcs	r1, r3
 80048de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048e2:	e7eb      	b.n	80048bc <__swhatbuf_r+0x24>

080048e4 <__smakebuf_r>:
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e8:	079d      	lsls	r5, r3, #30
 80048ea:	4606      	mov	r6, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	d507      	bpl.n	8004900 <__smakebuf_r+0x1c>
 80048f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	2301      	movs	r3, #1
 80048fa:	6163      	str	r3, [r4, #20]
 80048fc:	b003      	add	sp, #12
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	ab01      	add	r3, sp, #4
 8004902:	466a      	mov	r2, sp
 8004904:	f7ff ffc8 	bl	8004898 <__swhatbuf_r>
 8004908:	9f00      	ldr	r7, [sp, #0]
 800490a:	4605      	mov	r5, r0
 800490c:	4639      	mov	r1, r7
 800490e:	4630      	mov	r0, r6
 8004910:	f7ff fbbc 	bl	800408c <_malloc_r>
 8004914:	b948      	cbnz	r0, 800492a <__smakebuf_r+0x46>
 8004916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800491a:	059a      	lsls	r2, r3, #22
 800491c:	d4ee      	bmi.n	80048fc <__smakebuf_r+0x18>
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	e7e2      	b.n	80048f0 <__smakebuf_r+0xc>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	6020      	str	r0, [r4, #0]
 800492e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	9b01      	ldr	r3, [sp, #4]
 8004936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800493a:	b15b      	cbz	r3, 8004954 <__smakebuf_r+0x70>
 800493c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004940:	4630      	mov	r0, r6
 8004942:	f000 f81d 	bl	8004980 <_isatty_r>
 8004946:	b128      	cbz	r0, 8004954 <__smakebuf_r+0x70>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	431d      	orrs	r5, r3
 8004958:	81a5      	strh	r5, [r4, #12]
 800495a:	e7cf      	b.n	80048fc <__smakebuf_r+0x18>

0800495c <_fstat_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d07      	ldr	r5, [pc, #28]	@ (800497c <_fstat_r+0x20>)
 8004960:	2300      	movs	r3, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	f7fc f970 	bl	8000c4e <_fstat>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	d102      	bne.n	8004978 <_fstat_r+0x1c>
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	b103      	cbz	r3, 8004978 <_fstat_r+0x1c>
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	bd38      	pop	{r3, r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	20000820 	.word	0x20000820

08004980 <_isatty_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	@ (800499c <_isatty_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fc f964 	bl	8000c58 <_isatty>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_isatty_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_isatty_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000820 	.word	0x20000820

080049a0 <_sbrk_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	@ (80049bc <_sbrk_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fc f958 	bl	8000c60 <_sbrk>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_sbrk_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_sbrk_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000820 	.word	0x20000820

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr
