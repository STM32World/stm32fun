
stm32world_music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800a458  0800a458  0000b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab6c  0800ab6c  0000c190  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab74  0800ab74  0000c190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab74  0800ab74  0000bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab78  0800ab78  0000bb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  0800ab7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c190  2**0
                  CONTENTS
 10 .bss          00003b34  20000190  20000190  0000c190  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20003cc4  20003cc4  0000c190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c190  2**0
                  CONTENTS, READONLY
 13 .debug_info   000271d1  00000000  00000000  0000c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000539b  00000000  00000000  00033391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001232b  00000000  00000000  0003872c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001890  00000000  00000000  0004aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012ce  00000000  00000000  0004c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025be0  00000000  00000000  0004d5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b364  00000000  00000000  00073196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c75a9  00000000  00000000  0009e4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00165aa3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004c1c  00000000  00000000  00165ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0016a704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a440 	.word	0x0800a440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	0800a440 	.word	0x0800a440

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000564:	2400      	movs	r4, #0
 8000566:	9405      	str	r4, [sp, #20]
 8000568:	9406      	str	r4, [sp, #24]
 800056a:	9407      	str	r4, [sp, #28]
 800056c:	9408      	str	r4, [sp, #32]
 800056e:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	9400      	str	r4, [sp, #0]
 8000572:	4b2d      	ldr	r3, [pc, #180]	@ (8000628 <MX_GPIO_Init+0xc8>)
 8000574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000576:	f042 0204 	orr.w	r2, r2, #4
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	f002 0204 	and.w	r2, r2, #4
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	9401      	str	r4, [sp, #4]
 8000588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800058e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000592:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	9402      	str	r4, [sp, #8]
 800059c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059e:	f042 0202 	orr.w	r2, r2, #2
 80005a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a6:	f002 0202 	and.w	r2, r2, #2
 80005aa:	9202      	str	r2, [sp, #8]
 80005ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	9403      	str	r4, [sp, #12]
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f042 0201 	orr.w	r2, r2, #1
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ba:	f002 0201 	and.w	r2, r2, #1
 80005be:	9203      	str	r2, [sp, #12]
 80005c0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c2:	9404      	str	r4, [sp, #16]
 80005c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c6:	f042 0208 	orr.w	r2, r2, #8
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	9304      	str	r3, [sp, #16]
 80005d4:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005d6:	4d15      	ldr	r5, [pc, #84]	@ (800062c <MX_GPIO_Init+0xcc>)
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005de:	4628      	mov	r0, r5
 80005e0:	f000 ffbd 	bl	800155e <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80005e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005ea:	2311      	movs	r3, #17
 80005ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005f2:	a905      	add	r1, sp, #20
 80005f4:	4628      	mov	r0, r5
 80005f6:	f000 feb5 	bl	8001364 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 80005fa:	2301      	movs	r3, #1
 80005fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000602:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000606:	a905      	add	r1, sp, #20
 8000608:	4628      	mov	r0, r5
 800060a:	f000 feab 	bl	8001364 <HAL_GPIO_Init>

    /*Configure GPIO pin : SD_DET_Pin */
    GPIO_InitStruct.Pin = SD_DET_Pin;
 800060e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000612:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800061a:	a905      	add	r1, sp, #20
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <MX_GPIO_Init+0xd0>)
 800061e:	f000 fea1 	bl	8001364 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000622:	b00b      	add	sp, #44	@ 0x2c
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40020800 	.word	0x40020800
 8000630:	40020000 	.word	0x40020000

08000634 <MX_DMA_Init>:
{
 8000634:	b500      	push	{lr}
 8000636:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000638:	2100      	movs	r1, #0
 800063a:	9101      	str	r1, [sp, #4]
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_DMA_Init+0x30>)
 800063e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000640:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000644:	631a      	str	r2, [r3, #48]	@ 0x30
 8000646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000650:	460a      	mov	r2, r1
 8000652:	200f      	movs	r0, #15
 8000654:	f000 fc8c 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000658:	200f      	movs	r0, #15
 800065a:	f000 fc99 	bl	8000f90 <HAL_NVIC_EnableIRQ>
}
 800065e:	b003      	add	sp, #12
 8000660:	f85d fb04 	ldr.w	pc, [sp], #4
 8000664:	40023800 	.word	0x40023800

08000668 <_write>:
    if (fd == 1 || fd == 2) {
 8000668:	3801      	subs	r0, #1
 800066a:	2801      	cmp	r0, #1
 800066c:	d80a      	bhi.n	8000684 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800066e:	b510      	push	{r4, lr}
 8000670:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000676:	b292      	uxth	r2, r2
 8000678:	4805      	ldr	r0, [pc, #20]	@ (8000690 <_write+0x28>)
 800067a:	f003 fc02 	bl	8003e82 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800067e:	b920      	cbnz	r0, 800068a <_write+0x22>
            return len;
 8000680:	4620      	mov	r0, r4
}
 8000682:	bd10      	pop	{r4, pc}
    return -1;
 8000684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000688:	4770      	bx	lr
            return -1;
 800068a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800068e:	e7f8      	b.n	8000682 <_write+0x1a>
 8000690:	20000b3c 	.word	0x20000b3c

08000694 <HAL_I2S_TxCpltCallback>:
    dma_buffer_to_fill = &i2s_dma_buffer[I2S_DMA_BUFFER_SIZE]; // Second half
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <HAL_I2S_TxCpltCallback+0x10>)
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_I2S_TxCpltCallback+0x14>)
 8000698:	601a      	str	r2, [r3, #0]
    ++i2c_cb;
 800069a:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <HAL_I2S_TxCpltCallback+0x18>)
 800069c:	6813      	ldr	r3, [r2, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	6013      	str	r3, [r2, #0]
}
 80006a2:	4770      	bx	lr
 80006a4:	20000338 	.word	0x20000338
 80006a8:	2000073c 	.word	0x2000073c
 80006ac:	20000334 	.word	0x20000334

080006b0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80006b2:	e7fe      	b.n	80006b2 <Error_Handler+0x2>

080006b4 <MX_USART1_UART_Init>:
{
 80006b4:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <MX_USART1_UART_Init+0x28>)
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_USART1_UART_Init+0x2c>)
 80006ba:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 2000000;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_USART1_UART_Init+0x30>)
 80006be:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c0:	2300      	movs	r3, #0
 80006c2:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	220c      	movs	r2, #12
 80006ca:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006cc:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ce:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d0:	f003 fba7 	bl	8003e22 <HAL_UART_Init>
 80006d4:	b900      	cbnz	r0, 80006d8 <MX_USART1_UART_Init+0x24>
}
 80006d6:	bd08      	pop	{r3, pc}
        Error_Handler();
 80006d8:	f7ff ffea 	bl	80006b0 <Error_Handler>
 80006dc:	20000b3c 	.word	0x20000b3c
 80006e0:	40011000 	.word	0x40011000
 80006e4:	001e8480 	.word	0x001e8480

080006e8 <MX_SDIO_SD_Init>:
{
 80006e8:	b508      	push	{r3, lr}
    hsd.Instance = SDIO;
 80006ea:	4808      	ldr	r0, [pc, #32]	@ (800070c <MX_SDIO_SD_Init+0x24>)
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_SDIO_SD_Init+0x28>)
 80006ee:	6003      	str	r3, [r0, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006f0:	2300      	movs	r3, #0
 80006f2:	6043      	str	r3, [r0, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006f4:	6083      	str	r3, [r0, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006f6:	60c3      	str	r3, [r0, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006f8:	6103      	str	r3, [r0, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006fa:	6143      	str	r3, [r0, #20]
    hsd.Init.ClockDiv = 0;
 80006fc:	6183      	str	r3, [r0, #24]
    if (HAL_SD_Init(&hsd) != HAL_OK) {
 80006fe:	f003 f925 	bl	800394c <HAL_SD_Init>
 8000702:	b900      	cbnz	r0, 8000706 <MX_SDIO_SD_Init+0x1e>
}
 8000704:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000706:	f7ff ffd3 	bl	80006b0 <Error_Handler>
 800070a:	bf00      	nop
 800070c:	20000b84 	.word	0x20000b84
 8000710:	40012c00 	.word	0x40012c00

08000714 <MX_I2S2_Init>:
{
 8000714:	b508      	push	{r3, lr}
    hi2s2.Instance = SPI2;
 8000716:	480b      	ldr	r0, [pc, #44]	@ (8000744 <MX_I2S2_Init+0x30>)
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_I2S2_Init+0x34>)
 800071a:	6003      	str	r3, [r0, #0]
    hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800071c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000720:	6043      	str	r3, [r0, #4]
    hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000722:	2300      	movs	r3, #0
 8000724:	6083      	str	r3, [r0, #8]
    hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000726:	60c3      	str	r3, [r0, #12]
    hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000728:	6103      	str	r3, [r0, #16]
    hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800072a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800072e:	6142      	str	r2, [r0, #20]
    hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000730:	6183      	str	r3, [r0, #24]
    hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000732:	61c3      	str	r3, [r0, #28]
    hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000734:	6203      	str	r3, [r0, #32]
    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000736:	f000 ff21 	bl	800157c <HAL_I2S_Init>
 800073a:	b900      	cbnz	r0, 800073e <MX_I2S2_Init+0x2a>
}
 800073c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800073e:	f7ff ffb7 	bl	80006b0 <Error_Handler>
 8000742:	bf00      	nop
 8000744:	20000c68 	.word	0x20000c68
 8000748:	40003800 	.word	0x40003800

0800074c <SystemClock_Config>:
{
 800074c:	b500      	push	{lr}
 800074e:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000750:	2230      	movs	r2, #48	@ 0x30
 8000752:	2100      	movs	r1, #0
 8000754:	a808      	add	r0, sp, #32
 8000756:	f009 f8ef 	bl	8009938 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800075a:	2300      	movs	r3, #0
 800075c:	9303      	str	r3, [sp, #12]
 800075e:	9304      	str	r3, [sp, #16]
 8000760:	9305      	str	r3, [sp, #20]
 8000762:	9306      	str	r3, [sp, #24]
 8000764:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	4a20      	ldr	r2, [pc, #128]	@ (80007ec <SystemClock_Config+0xa0>)
 800076a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800076c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000770:	6411      	str	r1, [r2, #64]	@ 0x40
 8000772:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000774:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <SystemClock_Config+0xa4>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000792:	2301      	movs	r3, #1
 8000794:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079a:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007a4:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80007a6:	2208      	movs	r2, #8
 80007a8:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80007aa:	22a8      	movs	r2, #168	@ 0xa8
 80007ac:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b0:	2307      	movs	r3, #7
 80007b2:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	a808      	add	r0, sp, #32
 80007b6:	f002 f819 	bl	80027ec <HAL_RCC_OscConfig>
 80007ba:	b998      	cbnz	r0, 80007e4 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007cc:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	2105      	movs	r1, #5
 80007d6:	a803      	add	r0, sp, #12
 80007d8:	f002 fa6c 	bl	8002cb4 <HAL_RCC_ClockConfig>
 80007dc:	b920      	cbnz	r0, 80007e8 <SystemClock_Config+0x9c>
}
 80007de:	b015      	add	sp, #84	@ 0x54
 80007e0:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80007e4:	f7ff ff64 	bl	80006b0 <Error_Handler>
        Error_Handler();
 80007e8:	f7ff ff62 	bl	80006b0 <Error_Handler>
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <main>:
{
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	b085      	sub	sp, #20
    HAL_Init();
 80007f8:	f000 fb26 	bl	8000e48 <HAL_Init>
    SystemClock_Config();
 80007fc:	f7ff ffa6 	bl	800074c <SystemClock_Config>
    MX_GPIO_Init();
 8000800:	f7ff feae 	bl	8000560 <MX_GPIO_Init>
    MX_DMA_Init();
 8000804:	f7ff ff16 	bl	8000634 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8000808:	f7ff ff54 	bl	80006b4 <MX_USART1_UART_Init>
    MX_SDIO_SD_Init();
 800080c:	f7ff ff6c 	bl	80006e8 <MX_SDIO_SD_Init>
    MX_I2S2_Init();
 8000810:	f7ff ff80 	bl	8000714 <MX_I2S2_Init>
    MX_USB_DEVICE_Init();
 8000814:	f008 fc60 	bl	80090d8 <MX_USB_DEVICE_Init>
    MX_FATFS_Init();
 8000818:	f004 fcaa 	bl	8005170 <MX_FATFS_Init>
    printf("\n\n\n---------------------\nStarting music player\n");
 800081c:	4868      	ldr	r0, [pc, #416]	@ (80009c0 <main+0x1cc>)
 800081e:	f008 ffab 	bl	8009778 <puts>
    printf("SD Card Information:\n");
 8000822:	4868      	ldr	r0, [pc, #416]	@ (80009c4 <main+0x1d0>)
 8000824:	f008 ffa8 	bl	8009778 <puts>
    printf("Block size  : %lu\n", hsd.SdCard.BlockSize);
 8000828:	4c67      	ldr	r4, [pc, #412]	@ (80009c8 <main+0x1d4>)
 800082a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800082c:	4867      	ldr	r0, [pc, #412]	@ (80009cc <main+0x1d8>)
 800082e:	f008 ff3b 	bl	80096a8 <iprintf>
    printf("Block nmbr  : %lu\n", hsd.SdCard.BlockNbr);
 8000832:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8000834:	4866      	ldr	r0, [pc, #408]	@ (80009d0 <main+0x1dc>)
 8000836:	f008 ff37 	bl	80096a8 <iprintf>
    printf("Card size   : %lu\n", (hsd.SdCard.BlockSize * hsd.SdCard.BlockNbr) / 1000);
 800083a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800083c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	4a64      	ldr	r2, [pc, #400]	@ (80009d4 <main+0x1e0>)
 8000844:	fba2 2103 	umull	r2, r1, r2, r3
 8000848:	0989      	lsrs	r1, r1, #6
 800084a:	4863      	ldr	r0, [pc, #396]	@ (80009d8 <main+0x1e4>)
 800084c:	f008 ff2c 	bl	80096a8 <iprintf>
    printf("Card version: %lu\n", hsd.SdCard.CardVersion);
 8000850:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8000852:	4862      	ldr	r0, [pc, #392]	@ (80009dc <main+0x1e8>)
 8000854:	f008 ff28 	bl	80096a8 <iprintf>
    if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000858:	2200      	movs	r2, #0
 800085a:	4961      	ldr	r1, [pc, #388]	@ (80009e0 <main+0x1ec>)
 800085c:	4861      	ldr	r0, [pc, #388]	@ (80009e4 <main+0x1f0>)
 800085e:	f007 fe43 	bl	80084e8 <f_mount>
 8000862:	b120      	cbz	r0, 800086e <main+0x7a>
        printf("Unable to mount disk\n");
 8000864:	4860      	ldr	r0, [pc, #384]	@ (80009e8 <main+0x1f4>)
 8000866:	f008 ff87 	bl	8009778 <puts>
        Error_Handler();
 800086a:	f7ff ff21 	bl	80006b0 <Error_Handler>
    if (f_open(&SDFile, total_uptime_filename, FA_OPEN_EXISTING | FA_READ) == FR_OK) {
 800086e:	2201      	movs	r2, #1
 8000870:	495e      	ldr	r1, [pc, #376]	@ (80009ec <main+0x1f8>)
 8000872:	485f      	ldr	r0, [pc, #380]	@ (80009f0 <main+0x1fc>)
 8000874:	f007 fe66 	bl	8008544 <f_open>
 8000878:	b9f8      	cbnz	r0, 80008ba <main+0xc6>
        if (f_read(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &rbytes) == FR_OK) {
 800087a:	ab02      	add	r3, sp, #8
 800087c:	2204      	movs	r2, #4
 800087e:	495d      	ldr	r1, [pc, #372]	@ (80009f4 <main+0x200>)
 8000880:	485b      	ldr	r0, [pc, #364]	@ (80009f0 <main+0x1fc>)
 8000882:	f008 f809 	bl	8008898 <f_read>
 8000886:	b998      	cbnz	r0, 80008b0 <main+0xbc>
            printf("Total uptime = %lu\n", total_uptime);
 8000888:	4b5a      	ldr	r3, [pc, #360]	@ (80009f4 <main+0x200>)
 800088a:	6819      	ldr	r1, [r3, #0]
 800088c:	485a      	ldr	r0, [pc, #360]	@ (80009f8 <main+0x204>)
 800088e:	f008 ff0b 	bl	80096a8 <iprintf>
            f_close(&SDFile);
 8000892:	4857      	ldr	r0, [pc, #348]	@ (80009f0 <main+0x1fc>)
 8000894:	f008 fabb 	bl	8008e0e <f_close>
    if (f_open(&SDFile, tick_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8000898:	220a      	movs	r2, #10
 800089a:	4958      	ldr	r1, [pc, #352]	@ (80009fc <main+0x208>)
 800089c:	4854      	ldr	r0, [pc, #336]	@ (80009f0 <main+0x1fc>)
 800089e:	f007 fe51 	bl	8008544 <f_open>
 80008a2:	b348      	cbz	r0, 80008f8 <main+0x104>
{
 80008a4:	2500      	movs	r5, #0
 80008a6:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 80008aa:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80008ae:	e06e      	b.n	800098e <main+0x19a>
            printf("Unable to read\n");
 80008b0:	4853      	ldr	r0, [pc, #332]	@ (8000a00 <main+0x20c>)
 80008b2:	f008 ff61 	bl	8009778 <puts>
            Error_Handler();
 80008b6:	f7ff fefb 	bl	80006b0 <Error_Handler>
        if (f_open(&SDFile, total_uptime_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80008ba:	220a      	movs	r2, #10
 80008bc:	494b      	ldr	r1, [pc, #300]	@ (80009ec <main+0x1f8>)
 80008be:	484c      	ldr	r0, [pc, #304]	@ (80009f0 <main+0x1fc>)
 80008c0:	f007 fe40 	bl	8008544 <f_open>
 80008c4:	b998      	cbnz	r0, 80008ee <main+0xfa>
            if (f_write(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &wbytes) == FR_OK) {
 80008c6:	ab03      	add	r3, sp, #12
 80008c8:	2204      	movs	r2, #4
 80008ca:	494a      	ldr	r1, [pc, #296]	@ (80009f4 <main+0x200>)
 80008cc:	4848      	ldr	r0, [pc, #288]	@ (80009f0 <main+0x1fc>)
 80008ce:	f008 f8d6 	bl	8008a7e <f_write>
 80008d2:	b938      	cbnz	r0, 80008e4 <main+0xf0>
                printf("File %s created\n", total_uptime_filename);
 80008d4:	4945      	ldr	r1, [pc, #276]	@ (80009ec <main+0x1f8>)
 80008d6:	484b      	ldr	r0, [pc, #300]	@ (8000a04 <main+0x210>)
 80008d8:	f008 fee6 	bl	80096a8 <iprintf>
                f_close(&SDFile);
 80008dc:	4844      	ldr	r0, [pc, #272]	@ (80009f0 <main+0x1fc>)
 80008de:	f008 fa96 	bl	8008e0e <f_close>
 80008e2:	e7d9      	b.n	8000898 <main+0xa4>
                printf("Unable to write\n");
 80008e4:	4848      	ldr	r0, [pc, #288]	@ (8000a08 <main+0x214>)
 80008e6:	f008 ff47 	bl	8009778 <puts>
                Error_Handler();
 80008ea:	f7ff fee1 	bl	80006b0 <Error_Handler>
            printf("Unable to create\n");
 80008ee:	4847      	ldr	r0, [pc, #284]	@ (8000a0c <main+0x218>)
 80008f0:	f008 ff42 	bl	8009778 <puts>
            Error_Handler();
 80008f4:	f7ff fedc 	bl	80006b0 <Error_Handler>
        f_close(&SDFile);
 80008f8:	483d      	ldr	r0, [pc, #244]	@ (80009f0 <main+0x1fc>)
 80008fa:	f008 fa88 	bl	8008e0e <f_close>
 80008fe:	e7d1      	b.n	80008a4 <main+0xb0>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000904:	4842      	ldr	r0, [pc, #264]	@ (8000a10 <main+0x21c>)
 8000906:	f000 fe30 	bl	800156a <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 800090a:	f504 76fa 	add.w	r6, r4, #500	@ 0x1f4
 800090e:	e042      	b.n	8000996 <main+0x1a2>
            printf("Tick %lu (loop count=%lu hcb=%lu cb=%lu)\n", now / 1000, loop_cnt, i2c_hcb, i2c_cb);
 8000910:	4930      	ldr	r1, [pc, #192]	@ (80009d4 <main+0x1e0>)
 8000912:	fba1 3104 	umull	r3, r1, r1, r4
 8000916:	4b3f      	ldr	r3, [pc, #252]	@ (8000a14 <main+0x220>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a18 <main+0x224>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	462a      	mov	r2, r5
 8000922:	0989      	lsrs	r1, r1, #6
 8000924:	483d      	ldr	r0, [pc, #244]	@ (8000a1c <main+0x228>)
 8000926:	f008 febf 	bl	80096a8 <iprintf>
            ++total_uptime;
 800092a:	4a32      	ldr	r2, [pc, #200]	@ (80009f4 <main+0x200>)
 800092c:	6813      	ldr	r3, [r2, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	6013      	str	r3, [r2, #0]
            if (f_open(&SDFile, total_uptime_filename, FA_OPEN_EXISTING | FA_WRITE) == FR_OK) {
 8000932:	2202      	movs	r2, #2
 8000934:	492d      	ldr	r1, [pc, #180]	@ (80009ec <main+0x1f8>)
 8000936:	482e      	ldr	r0, [pc, #184]	@ (80009f0 <main+0x1fc>)
 8000938:	f007 fe04 	bl	8008544 <f_open>
 800093c:	b998      	cbnz	r0, 8000966 <main+0x172>
                if (f_write(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &wbytes) != FR_OK) {
 800093e:	ab03      	add	r3, sp, #12
 8000940:	2204      	movs	r2, #4
 8000942:	492c      	ldr	r1, [pc, #176]	@ (80009f4 <main+0x200>)
 8000944:	482a      	ldr	r0, [pc, #168]	@ (80009f0 <main+0x1fc>)
 8000946:	f008 f89a 	bl	8008a7e <f_write>
 800094a:	b940      	cbnz	r0, 800095e <main+0x16a>
                f_close(&SDFile);
 800094c:	4828      	ldr	r0, [pc, #160]	@ (80009f0 <main+0x1fc>)
 800094e:	f008 fa5e 	bl	8008e0e <f_close>
            open_next_file = 0;
 8000952:	2500      	movs	r5, #0
 8000954:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <main+0x22c>)
 8000956:	701d      	strb	r5, [r3, #0]
            next_tick = now + 1000;
 8000958:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
 800095c:	e01d      	b.n	800099a <main+0x1a6>
                    printf("Unable to write\n");
 800095e:	482a      	ldr	r0, [pc, #168]	@ (8000a08 <main+0x214>)
 8000960:	f008 ff0a 	bl	8009778 <puts>
 8000964:	e7f2      	b.n	800094c <main+0x158>
                printf("Unable to open file\n");
 8000966:	482f      	ldr	r0, [pc, #188]	@ (8000a24 <main+0x230>)
 8000968:	f008 ff06 	bl	8009778 <puts>
 800096c:	e7f1      	b.n	8000952 <main+0x15e>
                res = f_findfirst(&dir, &music_file_info, "", "*.wav");
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <main+0x234>)
 8000970:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <main+0x238>)
 8000972:	492f      	ldr	r1, [pc, #188]	@ (8000a30 <main+0x23c>)
 8000974:	482f      	ldr	r0, [pc, #188]	@ (8000a34 <main+0x240>)
 8000976:	f008 fb05 	bl	8008f84 <f_findfirst>
 800097a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <main+0x244>)
 800097c:	7018      	strb	r0, [r3, #0]
            printf("Next file: %s\n", music_file_info.fname);
 800097e:	492f      	ldr	r1, [pc, #188]	@ (8000a3c <main+0x248>)
 8000980:	482f      	ldr	r0, [pc, #188]	@ (8000a40 <main+0x24c>)
 8000982:	f008 fe91 	bl	80096a8 <iprintf>
            open_next_file = 0;
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <main+0x22c>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
        ++loop_cnt;
 800098c:	3501      	adds	r5, #1
        now = uwTick;
 800098e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <main+0x250>)
 8000990:	681c      	ldr	r4, [r3, #0]
        if (now >= next_blink) {
 8000992:	42a6      	cmp	r6, r4
 8000994:	d9b4      	bls.n	8000900 <main+0x10c>
        if (now >= next_tick) {
 8000996:	42a7      	cmp	r7, r4
 8000998:	d9ba      	bls.n	8000910 <main+0x11c>
        if (open_next_file) {
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <main+0x22c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f4      	beq.n	800098c <main+0x198>
            res = f_findnext(&dir, &music_file_info);
 80009a2:	4923      	ldr	r1, [pc, #140]	@ (8000a30 <main+0x23c>)
 80009a4:	4823      	ldr	r0, [pc, #140]	@ (8000a34 <main+0x240>)
 80009a6:	f008 fad6 	bl	8008f56 <f_findnext>
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <main+0x244>)
 80009ac:	7018      	strb	r0, [r3, #0]
            if (res != FR_OK || music_file_info.fsize == 0) {
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d1dd      	bne.n	800096e <main+0x17a>
 80009b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <main+0x23c>)
 80009b4:	6813      	ldr	r3, [r2, #0]
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	d1e0      	bne.n	800097e <main+0x18a>
 80009bc:	e7d7      	b.n	800096e <main+0x17a>
 80009be:	bf00      	nop
 80009c0:	0800a4ec 	.word	0x0800a4ec
 80009c4:	0800a51c 	.word	0x0800a51c
 80009c8:	20000b84 	.word	0x20000b84
 80009cc:	0800a534 	.word	0x0800a534
 80009d0:	0800a548 	.word	0x0800a548
 80009d4:	10624dd3 	.word	0x10624dd3
 80009d8:	0800a55c 	.word	0x0800a55c
 80009dc:	0800a570 	.word	0x0800a570
 80009e0:	20001148 	.word	0x20001148
 80009e4:	20000f10 	.word	0x20000f10
 80009e8:	0800a584 	.word	0x0800a584
 80009ec:	0800a65c 	.word	0x0800a65c
 80009f0:	20000cb8 	.word	0x20000cb8
 80009f4:	2000032c 	.word	0x2000032c
 80009f8:	0800a59c 	.word	0x0800a59c
 80009fc:	0800a650 	.word	0x0800a650
 8000a00:	0800a5b0 	.word	0x0800a5b0
 8000a04:	0800a5c0 	.word	0x0800a5c0
 8000a08:	0800a5d4 	.word	0x0800a5d4
 8000a0c:	0800a5e4 	.word	0x0800a5e4
 8000a10:	40020800 	.word	0x40020800
 8000a14:	20000334 	.word	0x20000334
 8000a18:	20000330 	.word	0x20000330
 8000a1c:	0800a5f8 	.word	0x0800a5f8
 8000a20:	20000000 	.word	0x20000000
 8000a24:	0800a624 	.word	0x0800a624
 8000a28:	0800a638 	.word	0x0800a638
 8000a2c:	0800a5d0 	.word	0x0800a5d0
 8000a30:	200001b0 	.word	0x200001b0
 8000a34:	200002d0 	.word	0x200002d0
 8000a38:	20000328 	.word	0x20000328
 8000a3c:	200001ca 	.word	0x200001ca
 8000a40:	0800a640 	.word	0x0800a640
 8000a44:	20000cb4 	.word	0x20000cb4

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	9100      	str	r1, [sp, #0]
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <HAL_MspInit+0x34>)
 8000a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a56:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a5a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000a5e:	9200      	str	r2, [sp, #0]
 8000a60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	9101      	str	r1, [sp, #4]
 8000a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	b002      	add	sp, #8
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	9308      	str	r3, [sp, #32]
 8000a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a8e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	9303      	str	r3, [sp, #12]
 8000a92:	9304      	str	r3, [sp, #16]
 8000a94:	9305      	str	r3, [sp, #20]
 8000a96:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI2)
 8000a98:	6802      	ldr	r2, [r0, #0]
 8000a9a:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <HAL_I2S_MspInit+0xe8>)
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2S_MspInit+0x24>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000aa0:	b00d      	add	sp, #52	@ 0x34
 8000aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa4:	4604      	mov	r4, r0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000aaa:	2332      	movs	r3, #50	@ 0x32
 8000aac:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab2:	a803      	add	r0, sp, #12
 8000ab4:	f002 f9d4 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d14e      	bne.n	8000b5a <HAL_I2S_MspInit+0xda>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000abc:	2500      	movs	r5, #0
 8000abe:	9500      	str	r5, [sp, #0]
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <HAL_I2S_MspInit+0xec>)
 8000ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ac8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000acc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ad0:	9200      	str	r2, [sp, #0]
 8000ad2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	9501      	str	r5, [sp, #4]
 8000ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ad8:	f042 0204 	orr.w	r2, r2, #4
 8000adc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ae0:	f002 0204 	and.w	r2, r2, #4
 8000ae4:	9201      	str	r2, [sp, #4]
 8000ae6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	9502      	str	r5, [sp, #8]
 8000aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aec:	f042 0202 	orr.w	r2, r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000afc:	2308      	movs	r3, #8
 8000afe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2702      	movs	r7, #2
 8000b02:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b08:	2605      	movs	r6, #5
 8000b0a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	a907      	add	r1, sp, #28
 8000b0e:	4818      	ldr	r0, [pc, #96]	@ (8000b70 <HAL_I2S_MspInit+0xf0>)
 8000b10:	f000 fc28 	bl	8001364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b18:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b20:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	a907      	add	r1, sp, #28
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b26:	f000 fc1d 	bl	8001364 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b2a:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <HAL_I2S_MspInit+0xf8>)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <HAL_I2S_MspInit+0xfc>)
 8000b2e:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b30:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3c:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3e:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b40:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b46:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b48:	6205      	str	r5, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4a:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b4c:	f000 faa2 	bl	8001094 <HAL_DMA_Init>
 8000b50:	b930      	cbnz	r0, 8000b60 <HAL_I2S_MspInit+0xe0>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_I2S_MspInit+0xf8>)
 8000b54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000b56:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000b58:	e7a2      	b.n	8000aa0 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000b5a:	f7ff fda9 	bl	80006b0 <Error_Handler>
 8000b5e:	e7ad      	b.n	8000abc <HAL_I2S_MspInit+0x3c>
      Error_Handler();
 8000b60:	f7ff fda6 	bl	80006b0 <Error_Handler>
 8000b64:	e7f5      	b.n	8000b52 <HAL_I2S_MspInit+0xd2>
 8000b66:	bf00      	nop
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020400 	.word	0x40020400
 8000b78:	20000c08 	.word	0x20000c08
 8000b7c:	40026070 	.word	0x40026070

08000b80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b84:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	2300      	movs	r3, #0
 8000b88:	9303      	str	r3, [sp, #12]
 8000b8a:	9304      	str	r3, [sp, #16]
 8000b8c:	9305      	str	r3, [sp, #20]
 8000b8e:	9306      	str	r3, [sp, #24]
 8000b90:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8000b92:	6802      	ldr	r2, [r0, #0]
 8000b94:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <HAL_SD_MspInit+0xcc>)
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d002      	beq.n	8000ba0 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000b9a:	b009      	add	sp, #36	@ 0x24
 8000b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	9400      	str	r4, [sp, #0]
 8000ba4:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8000ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bae:	645a      	str	r2, [r3, #68]	@ 0x44
 8000bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000bb2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8000bb6:	9200      	str	r2, [sp, #0]
 8000bb8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	9401      	str	r4, [sp, #4]
 8000bbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bbe:	f042 0204 	orr.w	r2, r2, #4
 8000bc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bc6:	f002 0204 	and.w	r2, r2, #4
 8000bca:	9201      	str	r2, [sp, #4]
 8000bcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	9402      	str	r4, [sp, #8]
 8000bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bd2:	f042 0208 	orr.w	r2, r2, #8
 8000bd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2702      	movs	r7, #2
 8000bea:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	f04f 0801 	mov.w	r8, #1
 8000bf0:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2603      	movs	r6, #3
 8000bf6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bf8:	250c      	movs	r5, #12
 8000bfa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8000c54 <HAL_SD_MspInit+0xd4>
 8000c00:	eb0d 0105 	add.w	r1, sp, r5
 8000c04:	4648      	mov	r0, r9
 8000c06:	f000 fbad 	bl	8001364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c16:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	eb0d 0105 	add.w	r1, sp, r5
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	f000 fba1 	bl	8001364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c22:	2304      	movs	r3, #4
 8000c24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c2e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	eb0d 0105 	add.w	r1, sp, r5
 8000c34:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <HAL_SD_MspInit+0xd0>)
 8000c36:	f000 fb95 	bl	8001364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	2031      	movs	r0, #49	@ 0x31
 8000c40:	f000 f996 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000c44:	2031      	movs	r0, #49	@ 0x31
 8000c46:	f000 f9a3 	bl	8000f90 <HAL_NVIC_EnableIRQ>
}
 8000c4a:	e7a6      	b.n	8000b9a <HAL_SD_MspInit+0x1a>
 8000c4c:	40012c00 	.word	0x40012c00
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	40020800 	.word	0x40020800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b500      	push	{lr}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9303      	str	r3, [sp, #12]
 8000c60:	9304      	str	r3, [sp, #16]
 8000c62:	9305      	str	r3, [sp, #20]
 8000c64:	9306      	str	r3, [sp, #24]
 8000c66:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000c68:	6802      	ldr	r2, [r0, #0]
 8000c6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c6e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d002      	beq.n	8000c7c <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c76:	b009      	add	sp, #36	@ 0x24
 8000c78:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	9101      	str	r1, [sp, #4]
 8000c80:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c86:	f042 0210 	orr.w	r2, r2, #16
 8000c8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c8e:	f002 0210 	and.w	r2, r2, #16
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	9102      	str	r1, [sp, #8]
 8000c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000caa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	a903      	add	r1, sp, #12
 8000cbe:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <HAL_UART_MspInit+0x70>)
 8000cc0:	f000 fb50 	bl	8001364 <HAL_GPIO_Init>
}
 8000cc4:	e7d7      	b.n	8000c76 <HAL_UART_MspInit+0x1e>
 8000cc6:	bf00      	nop
 8000cc8:	40020000 	.word	0x40020000

08000ccc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler>

08000cce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler>

08000cd0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler>

08000cd2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler>

08000cd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler>

08000cd6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 f8cd 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bd08      	pop	{r3, pc}

08000ce4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ce4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ce6:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <DMA1_Stream4_IRQHandler+0xc>)
 8000ce8:	f000 fa4e 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000cec:	bd08      	pop	{r3, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000c08 	.word	0x20000c08

08000cf4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000cf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000cf6:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <SDIO_IRQHandler+0xc>)
 8000cf8:	f002 feaa 	bl	8003a50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000cfc:	bd08      	pop	{r3, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000b84 	.word	0x20000b84

08000d04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d06:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <OTG_FS_IRQHandler+0xc>)
 8000d08:	f001 fa67 	bl	80021da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d0c:	bd08      	pop	{r3, pc}
 8000d0e:	bf00      	nop
 8000d10:	20003694 	.word	0x20003694

08000d14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	460c      	mov	r4, r1
 8000d18:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	2500      	movs	r5, #0
 8000d1c:	e006      	b.n	8000d2c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4621      	mov	r1, r4
 8000d24:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000d2a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	42b5      	cmp	r5, r6
 8000d2e:	dbf6      	blt.n	8000d1e <_read+0xa>
  }

  return len;
}
 8000d30:	4630      	mov	r0, r6
 8000d32:	bd70      	pop	{r4, r5, r6, pc}

08000d34 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d38:	4770      	bx	lr

08000d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	4770      	bx	lr

08000d44 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000d44:	2001      	movs	r0, #1
 8000d46:	4770      	bx	lr

08000d48 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000d48:	2000      	movs	r0, #0
 8000d4a:	4770      	bx	lr

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b510      	push	{r4, lr}
 8000d4e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <_sbrk+0x38>)
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <_sbrk+0x40>)
 8000d56:	6800      	ldr	r0, [r0, #0]
 8000d58:	b140      	cbz	r0, 8000d6c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <_sbrk+0x40>)
 8000d5c:	6800      	ldr	r0, [r0, #0]
 8000d5e:	4403      	add	r3, r0
 8000d60:	1a52      	subs	r2, r2, r1
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d806      	bhi.n	8000d74 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <_sbrk+0x40>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000d6a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d6c:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <_sbrk+0x40>)
 8000d6e:	4c08      	ldr	r4, [pc, #32]	@ (8000d90 <_sbrk+0x44>)
 8000d70:	6004      	str	r4, [r0, #0]
 8000d72:	e7f2      	b.n	8000d5a <_sbrk+0xe>
    errno = ENOMEM;
 8000d74:	f008 fe2e 	bl	80099d4 <__errno>
 8000d78:	230c      	movs	r3, #12
 8000d7a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d80:	e7f3      	b.n	8000d6a <_sbrk+0x1e>
 8000d82:	bf00      	nop
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000cb0 	.word	0x20000cb0
 8000d90:	20003cc8 	.word	0x20003cc8

08000d94 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <SystemInit+0x10>)
 8000d96:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000d9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dac:	f7ff fff2 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f008 fe03 	bl	80099e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fd0b 	bl	80007f4 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000dec:	0800ab7c 	.word	0x0800ab7c
  ldr r2, =_sbss
 8000df0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000df4:	20003cc4 	.word	0x20003cc4

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_InitTick+0x40>)
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <HAL_InitTick+0x44>)
 8000e0e:	6810      	ldr	r0, [r2, #0]
 8000e10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e14:	f000 f8c0 	bl	8000f98 <HAL_SYSTICK_Config>
 8000e18:	b968      	cbnz	r0, 8000e36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	2c0f      	cmp	r4, #15
 8000e1c:	d901      	bls.n	8000e22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	e00a      	b.n	8000e38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e22:	2200      	movs	r2, #0
 8000e24:	4621      	mov	r1, r4
 8000e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e2a:	f000 f8a1 	bl	8000f70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_InitTick+0x48>)
 8000e30:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2000      	movs	r0, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000e36:	2001      	movs	r0, #1
}
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000004 	.word	0x20000004
 8000e44:	2000000c 	.word	0x2000000c

08000e48 <HAL_Init>:
{
 8000e48:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_Init+0x30>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e62:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f871 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f7ff ffc6 	bl	8000dfc <HAL_InitTick>
  HAL_MspInit();
 8000e70:	f7ff fdea 	bl	8000a48 <HAL_MspInit>
}
 8000e74:	2000      	movs	r0, #0
 8000e76:	bd08      	pop	{r3, pc}
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e7c:	4a03      	ldr	r2, [pc, #12]	@ (8000e8c <HAL_IncTick+0x10>)
 8000e7e:	6811      	ldr	r1, [r2, #0]
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_IncTick+0x14>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	440b      	add	r3, r1
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000cb4 	.word	0x20000cb4
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e94:	4b01      	ldr	r3, [pc, #4]	@ (8000e9c <HAL_GetTick+0x8>)
 8000e96:	6818      	ldr	r0, [r3, #0]
}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000cb4 	.word	0x20000cb4

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fff6 	bl	8000e94 <HAL_GetTick>
 8000ea8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000eae:	d002      	beq.n	8000eb6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <HAL_Delay+0x24>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	f7ff ffed 	bl	8000e94 <HAL_GetTick>
 8000eba:	1b40      	subs	r0, r0, r5
 8000ebc:	42a0      	cmp	r0, r4
 8000ebe:	d3fa      	bcc.n	8000eb6 <HAL_Delay+0x16>
  {
  }
}
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	db07      	blt.n	8000edc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ecc:	f000 021f 	and.w	r2, r0, #31
 8000ed0:	0940      	lsrs	r0, r0, #5
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	4a02      	ldr	r2, [pc, #8]	@ (8000ee0 <__NVIC_EnableIRQ+0x18>)
 8000ed8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	db08      	blt.n	8000efa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	0109      	lsls	r1, r1, #4
 8000eea:	b2c9      	uxtb	r1, r1
 8000eec:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ef0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ef4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ef8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	f000 000f 	and.w	r0, r0, #15
 8000efe:	0109      	lsls	r1, r1, #4
 8000f00:	b2c9      	uxtb	r1, r1
 8000f02:	4b01      	ldr	r3, [pc, #4]	@ (8000f08 <__NVIC_SetPriority+0x24>)
 8000f04:	5419      	strb	r1, [r3, r0]
  }
}
 8000f06:	4770      	bx	lr
 8000f08:	e000ed14 	.word	0xe000ed14

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f12:	f1c0 0c07 	rsb	ip, r0, #7
 8000f16:	f1bc 0f04 	cmp.w	ip, #4
 8000f1a:	bf28      	it	cs
 8000f1c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f20:	1d03      	adds	r3, r0, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d90f      	bls.n	8000f46 <NVIC_EncodePriority+0x3a>
 8000f26:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000f2c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000f30:	ea21 0100 	bic.w	r1, r1, r0
 8000f34:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f36:	fa0e fe03 	lsl.w	lr, lr, r3
 8000f3a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000f3e:	ea41 0002 	orr.w	r0, r1, r2
 8000f42:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	2300      	movs	r3, #0
 8000f48:	e7ee      	b.n	8000f28 <NVIC_EncodePriority+0x1c>
	...

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f50:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	0200      	lsls	r0, r0, #8
 8000f5a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000f68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_NVIC_SetPriority+0x1c>)
 8000f76:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f78:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000f7c:	f7ff ffc6 	bl	8000f0c <NVIC_EncodePriority>
 8000f80:	4601      	mov	r1, r0
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff ffae 	bl	8000ee4 <__NVIC_SetPriority>
}
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f92:	f7ff ff99 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	3801      	subs	r0, #1
 8000f9a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f9e:	d20b      	bcs.n	8000fb8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000fa4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <HAL_SYSTICK_Config+0x24>)
 8000fa8:	21f0      	movs	r1, #240	@ 0xf0
 8000faa:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fae:	2000      	movs	r0, #0
 8000fb0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fb8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	3910      	subs	r1, #16
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <DMA_CalcBaseAndBitshift+0x3c>)
 8000fca:	fba2 4201 	umull	r4, r2, r2, r1
 8000fce:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8001000 <DMA_CalcBaseAndBitshift+0x40>)
 8000fd2:	5ca2      	ldrb	r2, [r4, r2]
 8000fd4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000fd6:	295f      	cmp	r1, #95	@ 0x5f
 8000fd8:	d909      	bls.n	8000fee <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000fda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000fe6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fec:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	6583      	str	r3, [r0, #88]	@ 0x58
 8000ff8:	e7f5      	b.n	8000fe6 <DMA_CalcBaseAndBitshift+0x26>
 8000ffa:	bf00      	nop
 8000ffc:	aaaaaaab 	.word	0xaaaaaaab
 8001000:	0800a680 	.word	0x0800a680

08001004 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001004:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001006:	6982      	ldr	r2, [r0, #24]
 8001008:	b992      	cbnz	r2, 8001030 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800100a:	2b01      	cmp	r3, #1
 800100c:	d00a      	beq.n	8001024 <DMA_CheckFifoParam+0x20>
 800100e:	2b02      	cmp	r3, #2
 8001010:	d002      	beq.n	8001018 <DMA_CheckFifoParam+0x14>
 8001012:	b10b      	cbz	r3, 8001018 <DMA_CheckFifoParam+0x14>
 8001014:	2000      	movs	r0, #0
 8001016:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001018:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800101a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800101e:	d128      	bne.n	8001072 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	2000      	movs	r0, #0
 8001022:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001024:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001026:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800102a:	d024      	beq.n	8001076 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2000      	movs	r0, #0
 800102e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001030:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001034:	d009      	beq.n	800104a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001036:	2b02      	cmp	r3, #2
 8001038:	d925      	bls.n	8001086 <DMA_CheckFifoParam+0x82>
 800103a:	2b03      	cmp	r3, #3
 800103c:	d125      	bne.n	800108a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800103e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001040:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001044:	d123      	bne.n	800108e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2000      	movs	r0, #0
 8001048:	4770      	bx	lr
    switch (tmp)
 800104a:	2b03      	cmp	r3, #3
 800104c:	d803      	bhi.n	8001056 <DMA_CheckFifoParam+0x52>
 800104e:	e8df f003 	tbb	[pc, r3]
 8001052:	0414      	.short	0x0414
 8001054:	0a14      	.short	0x0a14
 8001056:	2000      	movs	r0, #0
 8001058:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800105a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800105c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001060:	d10d      	bne.n	800107e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001066:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001068:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800106c:	d009      	beq.n	8001082 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800106e:	2000      	movs	r0, #0
 8001070:	4770      	bx	lr
        status = HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	4770      	bx	lr
        status = HAL_ERROR;
 8001076:	2001      	movs	r0, #1
 8001078:	4770      	bx	lr
      status = HAL_ERROR;
 800107a:	2001      	movs	r0, #1
 800107c:	4770      	bx	lr
        status = HAL_ERROR;
 800107e:	2001      	movs	r0, #1
 8001080:	4770      	bx	lr
        status = HAL_ERROR;
 8001082:	2001      	movs	r0, #1
 8001084:	4770      	bx	lr
      status = HAL_ERROR;
 8001086:	2001      	movs	r0, #1
 8001088:	4770      	bx	lr
    switch (tmp)
 800108a:	2000      	movs	r0, #0
 800108c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800108e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001090:	4770      	bx	lr
	...

08001094 <HAL_DMA_Init>:
{
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff fefc 	bl	8000e94 <HAL_GetTick>
  if(hdma == NULL)
 800109c:	2c00      	cmp	r4, #0
 800109e:	d05b      	beq.n	8001158 <HAL_DMA_Init+0xc4>
 80010a0:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80010a8:	2300      	movs	r3, #0
 80010aa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f012 0f01 	tst.w	r2, #1
 80010c0:	d00a      	beq.n	80010d8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c2:	f7ff fee7 	bl	8000e94 <HAL_GetTick>
 80010c6:	1b43      	subs	r3, r0, r5
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9f5      	bls.n	80010b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010cc:	2320      	movs	r3, #32
 80010ce:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80010d8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010da:	4920      	ldr	r1, [pc, #128]	@ (800115c <HAL_DMA_Init+0xc8>)
 80010dc:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010de:	6862      	ldr	r2, [r4, #4]
 80010e0:	68a0      	ldr	r0, [r4, #8]
 80010e2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e8:	6920      	ldr	r0, [r4, #16]
 80010ea:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ec:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f0:	69a0      	ldr	r0, [r4, #24]
 80010f2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f8:	6a20      	ldr	r0, [r4, #32]
 80010fa:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fc:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001100:	2904      	cmp	r1, #4
 8001102:	d01e      	beq.n	8001142 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001104:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001106:	6826      	ldr	r6, [r4, #0]
 8001108:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800110a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800110e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001110:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001112:	2b04      	cmp	r3, #4
 8001114:	d107      	bne.n	8001126 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001116:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001118:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800111a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800111c:	b11b      	cbz	r3, 8001126 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ff70 	bl	8001004 <DMA_CheckFifoParam>
 8001124:	b990      	cbnz	r0, 800114c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001126:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff ff49 	bl	8000fc0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800112e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001130:	233f      	movs	r3, #63	@ 0x3f
 8001132:	4093      	lsls	r3, r2
 8001134:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001136:	2000      	movs	r0, #0
 8001138:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800113a:	2301      	movs	r3, #1
 800113c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001140:	e7c9      	b.n	80010d6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001142:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001144:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001146:	4301      	orrs	r1, r0
 8001148:	430a      	orrs	r2, r1
 800114a:	e7db      	b.n	8001104 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800114c:	2340      	movs	r3, #64	@ 0x40
 800114e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001150:	2001      	movs	r0, #1
 8001152:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001156:	e7be      	b.n	80010d6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
 800115a:	e7bc      	b.n	80010d6 <HAL_DMA_Init+0x42>
 800115c:	f010803f 	.word	0xf010803f

08001160 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001160:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d003      	beq.n	8001172 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800116e:	2001      	movs	r0, #1
 8001170:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001172:	2305      	movs	r3, #5
 8001174:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001178:	6802      	ldr	r2, [r0, #0]
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001182:	2000      	movs	r0, #0
}
 8001184:	4770      	bx	lr
	...

08001188 <HAL_DMA_IRQHandler>:
{
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001192:	4b72      	ldr	r3, [pc, #456]	@ (800135c <HAL_DMA_IRQHandler+0x1d4>)
 8001194:	681d      	ldr	r5, [r3, #0]
 8001196:	4b72      	ldr	r3, [pc, #456]	@ (8001360 <HAL_DMA_IRQHandler+0x1d8>)
 8001198:	fba3 3505 	umull	r3, r5, r3, r5
 800119c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80011a0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80011a4:	2308      	movs	r3, #8
 80011a6:	4093      	lsls	r3, r2
 80011a8:	4233      	tst	r3, r6
 80011aa:	d010      	beq.n	80011ce <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ac:	6803      	ldr	r3, [r0, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	f012 0f04 	tst.w	r2, #4
 80011b4:	d00b      	beq.n	80011ce <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f022 0204 	bic.w	r2, r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011be:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80011c0:	2308      	movs	r3, #8
 80011c2:	4093      	lsls	r3, r2
 80011c4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011c6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ce:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011d0:	2301      	movs	r3, #1
 80011d2:	4093      	lsls	r3, r2
 80011d4:	4233      	tst	r3, r6
 80011d6:	d009      	beq.n	80011ec <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	6952      	ldr	r2, [r2, #20]
 80011dc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80011e0:	d004      	beq.n	80011ec <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011e2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ec:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011ee:	2304      	movs	r3, #4
 80011f0:	4093      	lsls	r3, r2
 80011f2:	4233      	tst	r3, r6
 80011f4:	d009      	beq.n	800120a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	f012 0f02 	tst.w	r2, #2
 80011fe:	d004      	beq.n	800120a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001200:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001202:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800120a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800120c:	2310      	movs	r3, #16
 800120e:	4093      	lsls	r3, r2
 8001210:	4233      	tst	r3, r6
 8001212:	d024      	beq.n	800125e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001214:	6822      	ldr	r2, [r4, #0]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	f012 0f08 	tst.w	r2, #8
 800121c:	d01f      	beq.n	800125e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800121e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001228:	d00d      	beq.n	8001246 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001230:	d104      	bne.n	800123c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001232:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001234:	b19b      	cbz	r3, 800125e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001236:	4620      	mov	r0, r4
 8001238:	4798      	blx	r3
 800123a:	e010      	b.n	800125e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800123c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800123e:	b173      	cbz	r3, 800125e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001240:	4620      	mov	r0, r4
 8001242:	4798      	blx	r3
 8001244:	e00b      	b.n	800125e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800124c:	d103      	bne.n	8001256 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	f022 0208 	bic.w	r2, r2, #8
 8001254:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001258:	b10b      	cbz	r3, 800125e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800125a:	4620      	mov	r0, r4
 800125c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800125e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001260:	2320      	movs	r3, #32
 8001262:	4093      	lsls	r3, r2
 8001264:	4233      	tst	r3, r6
 8001266:	d055      	beq.n	8001314 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001268:	6822      	ldr	r2, [r4, #0]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	f012 0f10 	tst.w	r2, #16
 8001270:	d050      	beq.n	8001314 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001272:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001274:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b05      	cmp	r3, #5
 800127c:	d00e      	beq.n	800129c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001286:	d033      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800128e:	d12a      	bne.n	80012e6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001290:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03e      	beq.n	8001314 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001296:	4620      	mov	r0, r4
 8001298:	4798      	blx	r3
 800129a:	e03b      	b.n	8001314 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f023 0316 	bic.w	r3, r3, #22
 80012a4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	6953      	ldr	r3, [r2, #20]
 80012aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012ae:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012b2:	b1a3      	cbz	r3, 80012de <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	6813      	ldr	r3, [r2, #0]
 80012b8:	f023 0308 	bic.w	r3, r3, #8
 80012bc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012be:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80012c0:	233f      	movs	r3, #63	@ 0x3f
 80012c2:	4093      	lsls	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80012cc:	2300      	movs	r3, #0
 80012ce:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80012d2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03f      	beq.n	8001358 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80012d8:	4620      	mov	r0, r4
 80012da:	4798      	blx	r3
        return;
 80012dc:	e03c      	b.n	8001358 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012de:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e7      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x12c>
 80012e4:	e7eb      	b.n	80012be <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80012e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012e8:	b1a3      	cbz	r3, 8001314 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80012ea:	4620      	mov	r0, r4
 80012ec:	4798      	blx	r3
 80012ee:	e011      	b.n	8001314 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80012f6:	d109      	bne.n	800130c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f022 0210 	bic.w	r2, r2, #16
 80012fe:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001300:	2301      	movs	r3, #1
 8001302:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001306:	2300      	movs	r3, #0
 8001308:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800130c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800130e:	b10b      	cbz	r3, 8001314 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001310:	4620      	mov	r0, r4
 8001312:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001314:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001316:	b1fb      	cbz	r3, 8001358 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001318:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	d017      	beq.n	8001350 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001320:	2305      	movs	r3, #5
 8001322:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001326:	6822      	ldr	r2, [r4, #0]
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001330:	9b01      	ldr	r3, [sp, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	42ab      	cmp	r3, r5
 8001338:	d804      	bhi.n	8001344 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f013 0f01 	tst.w	r3, #1
 8001342:	d1f5      	bne.n	8001330 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001344:	2301      	movs	r3, #1
 8001346:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800134a:	2300      	movs	r3, #0
 800134c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001350:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001352:	b10b      	cbz	r3, 8001358 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001354:	4620      	mov	r0, r4
 8001356:	4798      	blx	r3
}
 8001358:	b003      	add	sp, #12
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135c:	20000004 	.word	0x20000004
 8001360:	1b4e81b5 	.word	0x1b4e81b5

08001364 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001364:	2300      	movs	r3, #0
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f200 80e9 	bhi.w	800153e <HAL_GPIO_Init+0x1da>
{
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	e065      	b.n	800143e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001372:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001374:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001378:	2403      	movs	r4, #3
 800137a:	fa04 f40e 	lsl.w	r4, r4, lr
 800137e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001382:	68cc      	ldr	r4, [r1, #12]
 8001384:	fa04 f40e 	lsl.w	r4, r4, lr
 8001388:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800138a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	684a      	ldr	r2, [r1, #4]
 8001394:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800139c:	6042      	str	r2, [r0, #4]
 800139e:	e05c      	b.n	800145a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a0:	08dc      	lsrs	r4, r3, #3
 80013a2:	3408      	adds	r4, #8
 80013a4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a8:	f003 0507 	and.w	r5, r3, #7
 80013ac:	00ad      	lsls	r5, r5, #2
 80013ae:	f04f 0e0f 	mov.w	lr, #15
 80013b2:	fa0e fe05 	lsl.w	lr, lr, r5
 80013b6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ba:	690a      	ldr	r2, [r1, #16]
 80013bc:	40aa      	lsls	r2, r5
 80013be:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80013c6:	e05c      	b.n	8001482 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c8:	2207      	movs	r2, #7
 80013ca:	e000      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 80013cc:	2200      	movs	r2, #0
 80013ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80013d2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	3402      	adds	r4, #2
 80013d6:	4d5a      	ldr	r5, [pc, #360]	@ (8001540 <HAL_GPIO_Init+0x1dc>)
 80013d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013dc:	4a59      	ldr	r2, [pc, #356]	@ (8001544 <HAL_GPIO_Init+0x1e0>)
 80013de:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	ea6f 020c 	mvn.w	r2, ip
 80013e4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e8:	684e      	ldr	r6, [r1, #4]
 80013ea:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80013ee:	d001      	beq.n	80013f4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80013f0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80013f4:	4c53      	ldr	r4, [pc, #332]	@ (8001544 <HAL_GPIO_Init+0x1e0>)
 80013f6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80013f8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013fe:	684e      	ldr	r6, [r1, #4]
 8001400:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001404:	d001      	beq.n	800140a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001406:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800140a:	4c4e      	ldr	r4, [pc, #312]	@ (8001544 <HAL_GPIO_Init+0x1e0>)
 800140c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800140e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001410:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001414:	684e      	ldr	r6, [r1, #4]
 8001416:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800141a:	d001      	beq.n	8001420 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800141c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001420:	4c48      	ldr	r4, [pc, #288]	@ (8001544 <HAL_GPIO_Init+0x1e0>)
 8001422:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001426:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	684d      	ldr	r5, [r1, #4]
 800142a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800142e:	d001      	beq.n	8001434 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001430:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001434:	4c43      	ldr	r4, [pc, #268]	@ (8001544 <HAL_GPIO_Init+0x1e0>)
 8001436:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001438:	3301      	adds	r3, #1
 800143a:	2b0f      	cmp	r3, #15
 800143c:	d87d      	bhi.n	800153a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800143e:	2201      	movs	r2, #1
 8001440:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	680c      	ldr	r4, [r1, #0]
 8001444:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001448:	ea32 0404 	bics.w	r4, r2, r4
 800144c:	d1f4      	bne.n	8001438 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144e:	684c      	ldr	r4, [r1, #4]
 8001450:	f004 0403 	and.w	r4, r4, #3
 8001454:	3c01      	subs	r4, #1
 8001456:	2c01      	cmp	r4, #1
 8001458:	d98b      	bls.n	8001372 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	684a      	ldr	r2, [r1, #4]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	2a03      	cmp	r2, #3
 8001462:	d009      	beq.n	8001478 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001464:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	005d      	lsls	r5, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	40aa      	lsls	r2, r5
 800146c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	688a      	ldr	r2, [r1, #8]
 8001472:	40aa      	lsls	r2, r5
 8001474:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001476:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	684a      	ldr	r2, [r1, #4]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	2a02      	cmp	r2, #2
 8001480:	d08e      	beq.n	80013a0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001482:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001484:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f20e 	lsl.w	r2, r2, lr
 800148e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001492:	684a      	ldr	r2, [r1, #4]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	fa02 f20e 	lsl.w	r2, r2, lr
 800149c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800149e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a0:	684a      	ldr	r2, [r1, #4]
 80014a2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80014a6:	d0c7      	beq.n	8001438 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a8:	2200      	movs	r2, #0
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_GPIO_Init+0x1e4>)
 80014ae:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80014b0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80014b4:	6454      	str	r4, [r2, #68]	@ 0x44
 80014b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014b8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014c0:	089c      	lsrs	r4, r3, #2
 80014c2:	1ca5      	adds	r5, r4, #2
 80014c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_GPIO_Init+0x1dc>)
 80014c6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ca:	f003 0e03 	and.w	lr, r3, #3
 80014ce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f20e 	lsl.w	r2, r2, lr
 80014d8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <HAL_GPIO_Init+0x1e8>)
 80014de:	4290      	cmp	r0, r2
 80014e0:	f43f af74 	beq.w	80013cc <HAL_GPIO_Init+0x68>
 80014e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014e8:	4290      	cmp	r0, r2
 80014ea:	d01a      	beq.n	8001522 <HAL_GPIO_Init+0x1be>
 80014ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014f0:	4290      	cmp	r0, r2
 80014f2:	d018      	beq.n	8001526 <HAL_GPIO_Init+0x1c2>
 80014f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014f8:	4290      	cmp	r0, r2
 80014fa:	d016      	beq.n	800152a <HAL_GPIO_Init+0x1c6>
 80014fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001500:	4290      	cmp	r0, r2
 8001502:	d014      	beq.n	800152e <HAL_GPIO_Init+0x1ca>
 8001504:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001508:	4290      	cmp	r0, r2
 800150a:	d012      	beq.n	8001532 <HAL_GPIO_Init+0x1ce>
 800150c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001510:	4290      	cmp	r0, r2
 8001512:	d010      	beq.n	8001536 <HAL_GPIO_Init+0x1d2>
 8001514:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001518:	4290      	cmp	r0, r2
 800151a:	f43f af55 	beq.w	80013c8 <HAL_GPIO_Init+0x64>
 800151e:	2208      	movs	r2, #8
 8001520:	e755      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 8001522:	2201      	movs	r2, #1
 8001524:	e753      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 8001526:	2202      	movs	r2, #2
 8001528:	e751      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 800152a:	2203      	movs	r2, #3
 800152c:	e74f      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 800152e:	2204      	movs	r2, #4
 8001530:	e74d      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 8001532:	2205      	movs	r2, #5
 8001534:	e74b      	b.n	80013ce <HAL_GPIO_Init+0x6a>
 8001536:	2206      	movs	r2, #6
 8001538:	e749      	b.n	80013ce <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800153a:	b002      	add	sp, #8
 800153c:	bd70      	pop	{r4, r5, r6, pc}
 800153e:	4770      	bx	lr
 8001540:	40013800 	.word	0x40013800
 8001544:	40013c00 	.word	0x40013c00
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	6903      	ldr	r3, [r0, #16]
 8001552:	4219      	tst	r1, r3
 8001554:	d001      	beq.n	800155a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001556:	2001      	movs	r0, #1
 8001558:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155e:	b10a      	cbz	r2, 8001564 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001560:	6181      	str	r1, [r0, #24]
 8001562:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001564:	0409      	lsls	r1, r1, #16
 8001566:	6181      	str	r1, [r0, #24]
  }
}
 8001568:	4770      	bx	lr

0800156a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156c:	ea01 0203 	and.w	r2, r1, r3
 8001570:	ea21 0103 	bic.w	r1, r1, r3
 8001574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001578:	6181      	str	r1, [r0, #24]
}
 800157a:	4770      	bx	lr

0800157c <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800157c:	2800      	cmp	r0, #0
 800157e:	f000 80bf 	beq.w	8001700 <HAL_I2S_Init+0x184>
{
 8001582:	b538      	push	{r3, r4, r5, lr}
 8001584:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001586:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800158a:	2b00      	cmp	r3, #0
 800158c:	d051      	beq.n	8001632 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800158e:	2202      	movs	r2, #2
 8001590:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001594:	6821      	ldr	r1, [r4, #0]
 8001596:	69cb      	ldr	r3, [r1, #28]
 8001598:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015a6:	6963      	ldr	r3, [r4, #20]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d063      	beq.n	8001674 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80015ac:	68e3      	ldr	r3, [r4, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d146      	bne.n	8001640 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80015b2:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80015b4:	68a3      	ldr	r3, [r4, #8]
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	d800      	bhi.n	80015bc <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015ba:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80015bc:	2001      	movs	r0, #1
 80015be:	f001 fcf9 	bl	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80015c2:	6923      	ldr	r3, [r4, #16]
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c8:	d03c      	beq.n	8001644 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015ca:	fbb0 f0f5 	udiv	r0, r0, r5
 80015ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015d2:	0043      	lsls	r3, r0, #1
 80015d4:	6962      	ldr	r2, [r4, #20]
 80015d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80015da:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80015dc:	4a49      	ldr	r2, [pc, #292]	@ (8001704 <HAL_I2S_Init+0x188>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80015e2:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80015e6:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 80015ea:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80015ec:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80015ee:	1e9a      	subs	r2, r3, #2
 80015f0:	2afd      	cmp	r2, #253	@ 0xfd
 80015f2:	d841      	bhi.n	8001678 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80015f4:	6922      	ldr	r2, [r4, #16]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	6821      	ldr	r1, [r4, #0]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80015fe:	6821      	ldr	r1, [r4, #0]
 8001600:	69cb      	ldr	r3, [r1, #28]
 8001602:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001606:	f023 030f 	bic.w	r3, r3, #15
 800160a:	6862      	ldr	r2, [r4, #4]
 800160c:	68a0      	ldr	r0, [r4, #8]
 800160e:	4302      	orrs	r2, r0
 8001610:	68e0      	ldr	r0, [r4, #12]
 8001612:	4302      	orrs	r2, r0
 8001614:	69a0      	ldr	r0, [r4, #24]
 8001616:	4302      	orrs	r2, r0
 8001618:	4313      	orrs	r3, r2
 800161a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800161e:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001620:	6a23      	ldr	r3, [r4, #32]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d02e      	beq.n	8001684 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001626:	2000      	movs	r0, #0
 8001628:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800162a:	2301      	movs	r3, #1
 800162c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  return HAL_OK;
}
 8001630:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8001632:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_I2S_Init+0x18c>)
 8001638:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 800163a:	f7ff fa21 	bl	8000a80 <HAL_I2S_MspInit>
 800163e:	e7a6      	b.n	800158e <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8001640:	2520      	movs	r5, #32
 8001642:	e7b7      	b.n	80015b4 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001644:	68e3      	ldr	r3, [r4, #12]
 8001646:	b153      	cbz	r3, 800165e <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001648:	00ad      	lsls	r5, r5, #2
 800164a:	fbb0 f0f5 	udiv	r0, r0, r5
 800164e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001652:	0043      	lsls	r3, r0, #1
 8001654:	6962      	ldr	r2, [r4, #20]
 8001656:	fbb3 f3f2 	udiv	r3, r3, r2
 800165a:	3305      	adds	r3, #5
 800165c:	e7be      	b.n	80015dc <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800165e:	00ed      	lsls	r5, r5, #3
 8001660:	fbb0 f0f5 	udiv	r0, r0, r5
 8001664:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001668:	0043      	lsls	r3, r0, #1
 800166a:	6962      	ldr	r2, [r4, #20]
 800166c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001670:	3305      	adds	r3, #5
 8001672:	e7b3      	b.n	80015dc <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8001674:	2100      	movs	r1, #0
 8001676:	e7ba      	b.n	80015ee <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001678:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	6463      	str	r3, [r4, #68]	@ 0x44
    return  HAL_ERROR;
 8001680:	2001      	movs	r0, #1
 8001682:	e7d5      	b.n	8001630 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_I2S_Init+0x190>)
 8001686:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001688:	6822      	ldr	r2, [r4, #0]
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_I2S_Init+0x194>)
 800168c:	429a      	cmp	r2, r3
 800168e:	d01f      	beq.n	80016d0 <HAL_I2S_Init+0x154>
 8001690:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001694:	69d3      	ldr	r3, [r2, #28]
 8001696:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800169a:	f023 030f 	bic.w	r3, r3, #15
 800169e:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_I2S_Init+0x194>)
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d015      	beq.n	80016d4 <HAL_I2S_Init+0x158>
 80016a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016ac:	2202      	movs	r2, #2
 80016ae:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <HAL_I2S_Init+0x194>)
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d010      	beq.n	80016da <HAL_I2S_Init+0x15e>
 80016b8:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
 80016bc:	69eb      	ldr	r3, [r5, #28]
 80016be:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80016c0:	6862      	ldr	r2, [r4, #4]
 80016c2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80016c6:	d00a      	beq.n	80016de <HAL_I2S_Init+0x162>
 80016c8:	b9c2      	cbnz	r2, 80016fc <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 80016ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016ce:	e008      	b.n	80016e2 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016d0:	4a10      	ldr	r2, [pc, #64]	@ (8001714 <HAL_I2S_Init+0x198>)
 80016d2:	e7df      	b.n	8001694 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80016d4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80016d8:	e7e8      	b.n	80016ac <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80016da:	4d0e      	ldr	r5, [pc, #56]	@ (8001714 <HAL_I2S_Init+0x198>)
 80016dc:	e7ee      	b.n	80016bc <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 80016de:	f44f 7080 	mov.w	r0, #256	@ 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 80016e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 80016e6:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 80016e8:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80016ea:	ea40 000c 	orr.w	r0, r0, ip
 80016ee:	4301      	orrs	r1, r0
 80016f0:	430a      	orrs	r2, r1
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80016f8:	61eb      	str	r3, [r5, #28]
 80016fa:	e794      	b.n	8001626 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7f0      	b.n	80016e2 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	4770      	bx	lr
 8001704:	cccccccd 	.word	0xcccccccd
 8001708:	0800178d 	.word	0x0800178d
 800170c:	080019a1 	.word	0x080019a1
 8001710:	40003800 	.word	0x40003800
 8001714:	40003400 	.word	0x40003400

08001718 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001718:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800171a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800171c:	6803      	ldr	r3, [r0, #0]
 800171e:	8812      	ldrh	r2, [r2, #0]
 8001720:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001722:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001724:	3302      	adds	r3, #2
 8001726:	6243      	str	r3, [r0, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001728:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001732:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	b103      	cbz	r3, 800173a <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001738:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	6853      	ldr	r3, [r2, #4]
 800173e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001742:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001744:	2301      	movs	r3, #1
 8001746:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800174a:	f7fe ffa3 	bl	8000694 <HAL_I2S_TxCpltCallback>
}
 800174e:	e7f3      	b.n	8001738 <I2S_Transmit_IT+0x20>

08001750 <HAL_I2S_RxCpltCallback>:
}
 8001750:	4770      	bx	lr

08001752 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001752:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001754:	6803      	ldr	r3, [r0, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800175a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800175c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800175e:	3302      	adds	r3, #2
 8001760:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001762:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001764:	b29b      	uxth	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b29b      	uxth	r3, r3
 800176a:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800176c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800176e:	b29b      	uxth	r3, r3
 8001770:	b103      	cbz	r3, 8001774 <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001772:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001774:	6802      	ldr	r2, [r0, #0]
 8001776:	6853      	ldr	r3, [r2, #4]
 8001778:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800177c:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800177e:	2301      	movs	r3, #1
 8001780:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001784:	f7ff ffe4 	bl	8001750 <HAL_I2S_RxCpltCallback>
}
 8001788:	e7f3      	b.n	8001772 <I2S_Receive_IT+0x20>

0800178a <HAL_I2S_ErrorCallback>:
}
 800178a:	4770      	bx	lr

0800178c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001792:	6802      	ldr	r2, [r0, #0]
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001798:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d006      	beq.n	80017b0 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80017a2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d02c      	beq.n	8001806 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80017ac:	b004      	add	sp, #16
 80017ae:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80017b0:	9b03      	ldr	r3, [sp, #12]
 80017b2:	f013 0f01 	tst.w	r3, #1
 80017b6:	d003      	beq.n	80017c0 <I2S_IRQHandler+0x34>
 80017b8:	6853      	ldr	r3, [r2, #4]
 80017ba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80017be:	d11f      	bne.n	8001800 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80017c0:	9b03      	ldr	r3, [sp, #12]
 80017c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80017c6:	d0ec      	beq.n	80017a2 <I2S_IRQHandler+0x16>
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	f012 0f20 	tst.w	r2, #32
 80017d0:	d0e7      	beq.n	80017a2 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80017d8:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80017da:	2300      	movs	r3, #0
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	9201      	str	r2, [sp, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80017f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80017f8:	4620      	mov	r0, r4
 80017fa:	f7ff ffc6 	bl	800178a <HAL_I2S_ErrorCallback>
 80017fe:	e7d0      	b.n	80017a2 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8001800:	f7ff ffa7 	bl	8001752 <I2S_Receive_IT>
 8001804:	e7dc      	b.n	80017c0 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001806:	9b03      	ldr	r3, [sp, #12]
 8001808:	f013 0f02 	tst.w	r3, #2
 800180c:	d004      	beq.n	8001818 <I2S_IRQHandler+0x8c>
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001816:	d11d      	bne.n	8001854 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001818:	9b03      	ldr	r3, [sp, #12]
 800181a:	f013 0f08 	tst.w	r3, #8
 800181e:	d0c5      	beq.n	80017ac <I2S_IRQHandler+0x20>
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	f012 0f20 	tst.w	r2, #32
 8001828:	d0c0      	beq.n	80017ac <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001830:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001832:	2300      	movs	r3, #0
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 800183e:	2301      	movs	r3, #1
 8001840:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001844:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff ff9c 	bl	800178a <HAL_I2S_ErrorCallback>
}
 8001852:	e7ab      	b.n	80017ac <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff5f 	bl	8001718 <I2S_Transmit_IT>
 800185a:	e7dd      	b.n	8001818 <I2S_IRQHandler+0x8c>

0800185c <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800185c:	4770      	bx	lr

0800185e <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800185e:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001860:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001862:	1c9a      	adds	r2, r3, #2
 8001864:	6242      	str	r2, [r0, #36]	@ 0x24
 8001866:	6802      	ldr	r2, [r0, #0]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800186c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29b      	uxth	r3, r3
 8001874:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001876:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	b93b      	cbnz	r3, 800188c <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800187c:	6802      	ldr	r2, [r0, #0]
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001884:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001886:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001888:	b29b      	uxth	r3, r3
 800188a:	b103      	cbz	r3, 800188e <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800188c:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 800188e:	2301      	movs	r3, #1
 8001890:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001894:	f7ff ffe2 	bl	800185c <HAL_I2SEx_TxRxCpltCallback>
}
 8001898:	e7f8      	b.n	800188c <I2SEx_TxISR_I2S+0x2e>
	...

0800189c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800189c:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <I2SEx_RxISR_I2SExt+0x5c>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d01c      	beq.n	80018e0 <I2SEx_RxISR_I2SExt+0x44>
 80018a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80018ae:	1c99      	adds	r1, r3, #2
 80018b0:	62c1      	str	r1, [r0, #44]	@ 0x2c
 80018b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80018b4:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80018be:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b963      	cbnz	r3, 80018de <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018c4:	6802      	ldr	r2, [r0, #0]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <I2SEx_RxISR_I2SExt+0x5c>)
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d00c      	beq.n	80018e6 <I2SEx_RxISR_I2SExt+0x4a>
 80018cc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80018d0:	6853      	ldr	r3, [r2, #4]
 80018d2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80018d6:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80018d8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b12b      	cbz	r3, 80018ea <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80018de:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80018e0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018e4:	e7e1      	b.n	80018aa <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <I2SEx_RxISR_I2SExt+0x60>)
 80018e8:	e7f2      	b.n	80018d0 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018f0:	f7ff ffb4 	bl	800185c <HAL_I2SEx_TxRxCpltCallback>
}
 80018f4:	e7f3      	b.n	80018de <I2SEx_RxISR_I2SExt+0x42>
 80018f6:	bf00      	nop
 80018f8:	40003800 	.word	0x40003800
 80018fc:	40003400 	.word	0x40003400

08001900 <I2SEx_TxISR_I2SExt>:
{
 8001900:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001902:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001904:	1c9a      	adds	r2, r3, #2
 8001906:	6242      	str	r2, [r0, #36]	@ 0x24
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	6801      	ldr	r1, [r0, #0]
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <I2SEx_TxISR_I2SExt+0x5c>)
 800190e:	4299      	cmp	r1, r3
 8001910:	d018      	beq.n	8001944 <I2SEx_TxISR_I2SExt+0x44>
 8001912:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001916:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001918:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 8001922:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	b963      	cbnz	r3, 8001942 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001928:	6802      	ldr	r2, [r0, #0]
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <I2SEx_TxISR_I2SExt+0x5c>)
 800192c:	429a      	cmp	r2, r3
 800192e:	d00c      	beq.n	800194a <I2SEx_TxISR_I2SExt+0x4a>
 8001930:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800193a:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 800193c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800193e:	b29b      	uxth	r3, r3
 8001940:	b12b      	cbz	r3, 800194e <I2SEx_TxISR_I2SExt+0x4e>
}
 8001942:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001944:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001948:	e7e5      	b.n	8001916 <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <I2SEx_TxISR_I2SExt+0x60>)
 800194c:	e7f2      	b.n	8001934 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 800194e:	2301      	movs	r3, #1
 8001950:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001954:	f7ff ff82 	bl	800185c <HAL_I2SEx_TxRxCpltCallback>
}
 8001958:	e7f3      	b.n	8001942 <I2SEx_TxISR_I2SExt+0x42>
 800195a:	bf00      	nop
 800195c:	40003800 	.word	0x40003800
 8001960:	40003400 	.word	0x40003400

08001964 <I2SEx_RxISR_I2S>:
{
 8001964:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001966:	6803      	ldr	r3, [r0, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800196c:	1c99      	adds	r1, r3, #2
 800196e:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001970:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001972:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	8643      	strh	r3, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 800197c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800197e:	b29b      	uxth	r3, r3
 8001980:	b93b      	cbnz	r3, 8001992 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001982:	6802      	ldr	r2, [r0, #0]
 8001984:	6853      	ldr	r3, [r2, #4]
 8001986:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800198a:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800198c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	b103      	cbz	r3, 8001994 <I2SEx_RxISR_I2S+0x30>
}
 8001992:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001994:	2301      	movs	r3, #1
 8001996:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800199a:	f7ff ff5f 	bl	800185c <HAL_I2SEx_TxRxCpltCallback>
}
 800199e:	e7f8      	b.n	8001992 <I2SEx_RxISR_I2S+0x2e>

080019a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80019a0:	b510      	push	{r4, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80019a6:	6803      	ldr	r3, [r0, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80019ac:	4a70      	ldr	r2, [pc, #448]	@ (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d06f      	beq.n	8001a92 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80019b2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80019b6:	6891      	ldr	r1, [r2, #8]
 80019b8:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80019be:	6853      	ldr	r3, [r2, #4]
 80019c0:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019c2:	6863      	ldr	r3, [r4, #4]
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019c8:	d001      	beq.n	80019ce <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d170      	bne.n	8001ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80019ce:	9b05      	ldr	r3, [sp, #20]
 80019d0:	f013 0f02 	tst.w	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80019d6:	9b03      	ldr	r3, [sp, #12]
 80019d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019dc:	d15c      	bne.n	8001a98 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80019de:	9b04      	ldr	r3, [sp, #16]
 80019e0:	f013 0f01 	tst.w	r3, #1
 80019e4:	d003      	beq.n	80019ee <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80019e6:	9b02      	ldr	r3, [sp, #8]
 80019e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80019ec:	d158      	bne.n	8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80019ee:	9b04      	ldr	r3, [sp, #16]
 80019f0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80019f4:	d024      	beq.n	8001a40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80019f6:	9b02      	ldr	r3, [sp, #8]
 80019f8:	f013 0f20 	tst.w	r3, #32
 80019fc:	d020      	beq.n	8001a40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	4b5b      	ldr	r3, [pc, #364]	@ (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d050      	beq.n	8001aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001a06:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a0a:	6853      	ldr	r3, [r2, #4]
 8001a0c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001a10:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	6853      	ldr	r3, [r2, #4]
 8001a16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001a1a:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	9200      	str	r2, [sp, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff fea5 	bl	800178a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001a40:	9b05      	ldr	r3, [sp, #20]
 8001a42:	f013 0f08 	tst.w	r3, #8
 8001a46:	d022      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001a48:	9b03      	ldr	r3, [sp, #12]
 8001a4a:	f013 0f20 	tst.w	r3, #32
 8001a4e:	d01e      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001a58:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d024      	beq.n	8001aac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001a62:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a66:	6853      	ldr	r3, [r2, #4]
 8001a68:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001a6c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a80:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff fe7e 	bl	800178a <HAL_I2S_ErrorCallback>
}
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a92:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001a96:	e78e      	b.n	80019b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fee0 	bl	800185e <I2SEx_TxISR_I2S>
 8001a9e:	e79e      	b.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff fefb 	bl	800189c <I2SEx_RxISR_I2SExt>
 8001aa6:	e7a2      	b.n	80019ee <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aa8:	4a32      	ldr	r2, [pc, #200]	@ (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001aaa:	e7ae      	b.n	8001a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aac:	4a31      	ldr	r2, [pc, #196]	@ (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001aae:	e7da      	b.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001ab0:	9b04      	ldr	r3, [sp, #16]
 8001ab2:	f013 0f02 	tst.w	r3, #2
 8001ab6:	d003      	beq.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001ab8:	9b02      	ldr	r3, [sp, #8]
 8001aba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001abe:	d14a      	bne.n	8001b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ac0:	9b05      	ldr	r3, [sp, #20]
 8001ac2:	f013 0f01 	tst.w	r3, #1
 8001ac6:	d003      	beq.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001ac8:	9b03      	ldr	r3, [sp, #12]
 8001aca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001ace:	d146      	bne.n	8001b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ad0:	9b05      	ldr	r3, [sp, #20]
 8001ad2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001ad6:	d01c      	beq.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001ad8:	9b03      	ldr	r3, [sp, #12]
 8001ada:	f013 0f20 	tst.w	r3, #32
 8001ade:	d018      	beq.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	6853      	ldr	r3, [r2, #4]
 8001ae4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001ae8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d039      	beq.n	8001b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001af2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001af6:	6853      	ldr	r3, [r2, #4]
 8001af8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001afc:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b04:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff fe3c 	bl	800178a <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b12:	9b04      	ldr	r3, [sp, #16]
 8001b14:	f013 0f08 	tst.w	r3, #8
 8001b18:	d0b9      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001b1a:	9b02      	ldr	r3, [sp, #8]
 8001b1c:	f013 0f20 	tst.w	r3, #32
 8001b20:	d0b5      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d01f      	beq.n	8001b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001b2a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001b2e:	6853      	ldr	r3, [r2, #4]
 8001b30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001b34:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	6853      	ldr	r3, [r2, #4]
 8001b3a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001b3e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff fe1b 	bl	800178a <HAL_I2S_ErrorCallback>
}
 8001b54:	e79b      	b.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fed2 	bl	8001900 <I2SEx_TxISR_I2SExt>
 8001b5c:	e7b0      	b.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff ff00 	bl	8001964 <I2SEx_RxISR_I2S>
 8001b64:	e7b4      	b.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b66:	4a03      	ldr	r2, [pc, #12]	@ (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001b68:	e7c5      	b.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b6a:	4a02      	ldr	r2, [pc, #8]	@ (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001b6c:	e7df      	b.n	8001b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001b6e:	bf00      	nop
 8001b70:	40003800 	.word	0x40003800
 8001b74:	40003400 	.word	0x40003400

08001b78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b7c:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b7e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001b82:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8001b86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001b8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d854      	bhi.n	8001c3c <PCD_WriteEmptyTxFifo+0xc4>
 8001b92:	4607      	mov	r7, r0
 8001b94:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b96:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001b98:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8001b9c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001ba0:	69d2      	ldr	r2, [r2, #28]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d300      	bcc.n	8001ba8 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8001ba6:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001ba8:	f102 0903 	add.w	r9, r2, #3
 8001bac:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bb0:	e015      	b.n	8001bde <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001bb2:	f106 0903 	add.w	r9, r6, #3
 8001bb6:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8001bba:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001bbc:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001bc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001bc4:	6a29      	ldr	r1, [r5, #32]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	b2b3      	uxth	r3, r6
 8001bca:	b2e2      	uxtb	r2, r4
 8001bcc:	4640      	mov	r0, r8
 8001bce:	f003 f842 	bl	8004c56 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001bd2:	6a2b      	ldr	r3, [r5, #32]
 8001bd4:	4433      	add	r3, r6
 8001bd6:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8001bd8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001bda:	4433      	add	r3, r6
 8001bdc:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bde:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bea:	454b      	cmp	r3, r9
 8001bec:	d312      	bcc.n	8001c14 <PCD_WriteEmptyTxFifo+0x9c>
 8001bee:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bf2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001bf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20a      	bcs.n	8001c14 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bfe:	b14b      	cbz	r3, 8001c14 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8001c00:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8001c02:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001c06:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001c0a:	69d6      	ldr	r6, [r2, #28]
 8001c0c:	429e      	cmp	r6, r3
 8001c0e:	d3d0      	bcc.n	8001bb2 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001c10:	461e      	mov	r6, r3
 8001c12:	e7ce      	b.n	8001bb2 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c14:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001c18:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d80f      	bhi.n	8001c44 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c24:	f004 040f 	and.w	r4, r4, #15
 8001c28:	2201      	movs	r2, #1
 8001c2a:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c2c:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8001c30:	ea23 0302 	bic.w	r3, r3, r2
 8001c34:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8001c38:	2000      	movs	r0, #0
 8001c3a:	e000      	b.n	8001c3e <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
}
 8001c3e:	b003      	add	sp, #12
 8001c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001c44:	2000      	movs	r0, #0
 8001c46:	e7fa      	b.n	8001c3e <PCD_WriteEmptyTxFifo+0xc6>

08001c48 <HAL_PCD_Init>:
{
 8001c48:	b530      	push	{r4, r5, lr}
 8001c4a:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d07a      	beq.n	8001d46 <HAL_PCD_Init+0xfe>
 8001c50:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8001c52:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c54:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8001c58:	b1c3      	cbz	r3, 8001c8c <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8001c60:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8001c64:	d017      	beq.n	8001c96 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	f002 fda8 	bl	80047bc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6c:	7c23      	ldrb	r3, [r4, #16]
 8001c6e:	f88d 3000 	strb.w	r3, [sp]
 8001c72:	1d23      	adds	r3, r4, #4
 8001c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c76:	6820      	ldr	r0, [r4, #0]
 8001c78:	f002 fcde 	bl	8004638 <USB_CoreInit>
 8001c7c:	b170      	cbz	r0, 8001c9c <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001c84:	2501      	movs	r5, #1
}
 8001c86:	4628      	mov	r0, r5
 8001c88:	b003      	add	sp, #12
 8001c8a:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001c8c:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8001c90:	f007 faf4 	bl	800927c <HAL_PCD_MspInit>
 8001c94:	e7e1      	b.n	8001c5a <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71a3      	strb	r3, [r4, #6]
 8001c9a:	e7e4      	b.n	8001c66 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f003 f9f5 	bl	800508e <USB_SetCurrentMode>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	b908      	cbnz	r0, 8001cac <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca8:	4603      	mov	r3, r0
 8001caa:	e017      	b.n	8001cdc <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cac:	2302      	movs	r3, #2
 8001cae:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	e7e7      	b.n	8001c86 <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 8001cb6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001cba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8001cc2:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cc4:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cca:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ccc:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cce:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001cd2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001cd6:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd8:	3301      	adds	r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	7920      	ldrb	r0, [r4, #4]
 8001cde:	4298      	cmp	r0, r3
 8001ce0:	d8e9      	bhi.n	8001cb6 <HAL_PCD_Init+0x6e>
 8001ce2:	e016      	b.n	8001d12 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 8001ce4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001ce8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001cec:	2100      	movs	r1, #0
 8001cee:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8001cf2:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cf6:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cfa:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cfe:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d02:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001d06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d0a:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	3201      	adds	r2, #1
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	4290      	cmp	r0, r2
 8001d14:	d8e6      	bhi.n	8001ce4 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d16:	7c23      	ldrb	r3, [r4, #16]
 8001d18:	f88d 3000 	strb.w	r3, [sp]
 8001d1c:	1d23      	adds	r3, r4, #4
 8001d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d20:	6820      	ldr	r0, [r4, #0]
 8001d22:	f002 fda1 	bl	8004868 <USB_DevInit>
 8001d26:	4605      	mov	r5, r0
 8001d28:	b120      	cbz	r0, 8001d34 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001d30:	2501      	movs	r5, #1
 8001d32:	e7a8      	b.n	8001c86 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d3e:	6820      	ldr	r0, [r4, #0]
 8001d40:	f003 f964 	bl	800500c <USB_DevDisconnect>
  return HAL_OK;
 8001d44:	e79f      	b.n	8001c86 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001d46:	2501      	movs	r5, #1
 8001d48:	e79d      	b.n	8001c86 <HAL_PCD_Init+0x3e>

08001d4a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d4a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8001d4c:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001d50:	2a01      	cmp	r2, #1
 8001d52:	d01a      	beq.n	8001d8a <HAL_PCD_Start+0x40>
{
 8001d54:	b510      	push	{r4, lr}
 8001d56:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001d64:	d002      	beq.n	8001d6c <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8001d66:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d68:	2a01      	cmp	r2, #1
 8001d6a:	d009      	beq.n	8001d80 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8001d6c:	6820      	ldr	r0, [r4, #0]
 8001d6e:	f002 fd1f 	bl	80047b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	f003 f93c 	bl	8004ff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001d7e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001d86:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d88:	e7f0      	b.n	8001d6c <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8001d8a:	2002      	movs	r0, #2
}
 8001d8c:	4770      	bx	lr
	...

08001d90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d96:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001d98:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d9a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001da2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001da4:	79a1      	ldrb	r1, [r4, #6]
 8001da6:	2901      	cmp	r1, #1
 8001da8:	d011      	beq.n	8001dce <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001daa:	4938      	ldr	r1, [pc, #224]	@ (8001e8c <PCD_EP_OutXfrComplete_int+0xfc>)
 8001dac:	428e      	cmp	r6, r1
 8001dae:	d056      	beq.n	8001e5e <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001db0:	b93d      	cbnz	r5, 8001dc2 <PCD_EP_OutXfrComplete_int+0x32>
 8001db2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001db6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dba:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d05e      	beq.n	8001e80 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001dc2:	b2e9      	uxtb	r1, r5
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f007 faa3 	bl	8009310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001dca:	2000      	movs	r0, #0
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dce:	f012 0f08 	tst.w	r2, #8
 8001dd2:	d009      	beq.n	8001de8 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dd4:	492e      	ldr	r1, [pc, #184]	@ (8001e90 <PCD_EP_OutXfrComplete_int+0x100>)
 8001dd6:	428e      	cmp	r6, r1
 8001dd8:	d9f7      	bls.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
 8001dda:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001dde:	d0f4      	beq.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001de0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	e7f0      	b.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001de8:	f012 0f20 	tst.w	r2, #32
 8001dec:	d002      	beq.n	8001df4 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dee:	2220      	movs	r2, #32
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	e7ea      	b.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001df4:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001df8:	d1e7      	bne.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dfa:	4925      	ldr	r1, [pc, #148]	@ (8001e90 <PCD_EP_OutXfrComplete_int+0x100>)
 8001dfc:	428e      	cmp	r6, r1
 8001dfe:	d906      	bls.n	8001e0e <PCD_EP_OutXfrComplete_int+0x7e>
 8001e00:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001e04:	d003      	beq.n	8001e0e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e06:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e7dd      	b.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e0e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001e12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e16:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	1acb      	subs	r3, r1, r3
 8001e22:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8001e26:	b97d      	cbnz	r5, 8001e48 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8001e28:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001e2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e30:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8001e34:	b16a      	cbz	r2, 8001e52 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8001e36:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001e3a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e3e:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8001e42:	4419      	add	r1, r3
 8001e44:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e48:	b2e9      	uxtb	r1, r5
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f007 fa60 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8001e50:	e7bb      	b.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e52:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001e56:	2101      	movs	r1, #1
 8001e58:	f003 f95a 	bl	8005110 <USB_EP0_OutStart>
 8001e5c:	e7f4      	b.n	8001e48 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001e5e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001e62:	d003      	beq.n	8001e6c <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e7ae      	b.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e6c:	f012 0f20 	tst.w	r2, #32
 8001e70:	d001      	beq.n	8001e76 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e72:	2220      	movs	r2, #32
 8001e74:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e76:	b2e9      	uxtb	r1, r5
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f007 fa49 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8001e7e:	e7a4      	b.n	8001dca <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001e80:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001e84:	2100      	movs	r1, #0
 8001e86:	f003 f943 	bl	8005110 <USB_EP0_OutStart>
 8001e8a:	e79a      	b.n	8001dc2 <PCD_EP_OutXfrComplete_int+0x32>
 8001e8c:	4f54310a 	.word	0x4f54310a
 8001e90:	4f54300a 	.word	0x4f54300a

08001e94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e98:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001e9a:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e9c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001ea0:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001ea6:	4295      	cmp	r5, r2
 8001ea8:	d907      	bls.n	8001eba <PCD_EP_OutSetupPacket_int+0x26>
 8001eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eae:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001eb2:	d002      	beq.n	8001eba <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eb8:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f007 fa20 	bl	8009300 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001ec2:	429d      	cmp	r5, r3
 8001ec4:	d902      	bls.n	8001ecc <PCD_EP_OutSetupPacket_int+0x38>
 8001ec6:	79a3      	ldrb	r3, [r4, #6]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001ecc:	2000      	movs	r0, #0
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ed0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	6820      	ldr	r0, [r4, #0]
 8001ed8:	f003 f91a 	bl	8005110 <USB_EP0_OutStart>
 8001edc:	e7f6      	b.n	8001ecc <PCD_EP_OutSetupPacket_int+0x38>
 8001ede:	bf00      	nop
 8001ee0:	4f54300a 	.word	0x4f54300a

08001ee4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001ee4:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d00c      	beq.n	8001f06 <HAL_PCD_SetAddress+0x22>
{
 8001eec:	b510      	push	{r4, lr}
 8001eee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ef6:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ef8:	6800      	ldr	r0, [r0, #0]
 8001efa:	f003 f869 	bl	8004fd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001f04:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001f06:	2002      	movs	r0, #2
}
 8001f08:	4770      	bx	lr

08001f0a <HAL_PCD_EP_Open>:
{
 8001f0a:	b538      	push	{r3, r4, r5, lr}
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001f10:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001f14:	d12b      	bne.n	8001f6e <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	f001 0e0f 	and.w	lr, r1, #15
 8001f1a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8001f1e:	00a4      	lsls	r4, r4, #2
 8001f20:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8001f24:	4404      	add	r4, r0
 8001f26:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8001f28:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8001f2c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001f30:	2000      	movs	r0, #0
 8001f32:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f36:	f00c 0c0f 	and.w	ip, ip, #15
 8001f3a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f3e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f42:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001f44:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8001f46:	784a      	ldrb	r2, [r1, #1]
 8001f48:	b10a      	cbz	r2, 8001f4e <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8001f4a:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d01c      	beq.n	8001f8c <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8001f52:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d01b      	beq.n	8001f92 <HAL_PCD_EP_Open+0x88>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f60:	6828      	ldr	r0, [r5, #0]
 8001f62:	f002 fd5c 	bl	8004a1e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6e:	f001 000f 	and.w	r0, r1, #15
 8001f72:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8001f76:	0089      	lsls	r1, r1, #2
 8001f78:	3110      	adds	r1, #16
 8001f7a:	4429      	add	r1, r5
 8001f7c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001f7e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001f82:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001f86:	2401      	movs	r4, #1
 8001f88:	7544      	strb	r4, [r0, #21]
 8001f8a:	e7d4      	b.n	8001f36 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	714b      	strb	r3, [r1, #5]
 8001f90:	e7df      	b.n	8001f52 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8001f92:	2002      	movs	r0, #2
 8001f94:	e7ea      	b.n	8001f6c <HAL_PCD_EP_Open+0x62>

08001f96 <HAL_PCD_EP_Close>:
{
 8001f96:	b510      	push	{r4, lr}
 8001f98:	4604      	mov	r4, r0
 8001f9a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001f9c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001fa0:	d120      	bne.n	8001fe4 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	f001 000f 	and.w	r0, r1, #15
 8001fa6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb0:	4423      	add	r3, r4
 8001fb2:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8001fb4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001fb8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc2:	f002 020f 	and.w	r2, r2, #15
 8001fc6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001fc8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d018      	beq.n	8002002 <HAL_PCD_EP_Close+0x6c>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f002 fd6e 	bl	8004ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001fe2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	f001 000f 	and.w	r0, r1, #15
 8001fe8:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	3310      	adds	r3, #16
 8001ff0:	4423      	add	r3, r4
 8001ff2:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8001ff4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001ff8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	7543      	strb	r3, [r0, #21]
 8002000:	e7df      	b.n	8001fc2 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8002002:	2002      	movs	r0, #2
 8002004:	e7ed      	b.n	8001fe2 <HAL_PCD_EP_Close+0x4c>

08002006 <HAL_PCD_EP_Receive>:
{
 8002006:	b510      	push	{r4, lr}
 8002008:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	f001 0c0f 	and.w	ip, r1, #15
 800200e:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8002012:	0089      	lsls	r1, r1, #2
 8002014:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002018:	4401      	add	r1, r0
 800201a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800201c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8002020:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002024:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8002028:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8002032:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002036:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 800203a:	7982      	ldrb	r2, [r0, #6]
 800203c:	2a01      	cmp	r2, #1
 800203e:	d004      	beq.n	800204a <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002040:	6800      	ldr	r0, [r0, #0]
 8002042:	f002 fe1f 	bl	8004c84 <USB_EPStartXfer>
}
 8002046:	2000      	movs	r0, #0
 8002048:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800204a:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 800204e:	e7f7      	b.n	8002040 <HAL_PCD_EP_Receive+0x3a>

08002050 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002050:	f001 010f 	and.w	r1, r1, #15
 8002054:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002058:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800205c:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8002060:	4770      	bx	lr

08002062 <HAL_PCD_EP_Transmit>:
{
 8002062:	b510      	push	{r4, lr}
 8002064:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002066:	f001 0c0f 	and.w	ip, r1, #15
 800206a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800206e:	0089      	lsls	r1, r1, #2
 8002070:	3110      	adds	r1, #16
 8002072:	4401      	add	r1, r0
 8002074:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002076:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800207a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800207e:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8002082:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 800208c:	2301      	movs	r3, #1
 800208e:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002092:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8002096:	7982      	ldrb	r2, [r0, #6]
 8002098:	429a      	cmp	r2, r3
 800209a:	d004      	beq.n	80020a6 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209c:	6800      	ldr	r0, [r0, #0]
 800209e:	f002 fdf1 	bl	8004c84 <USB_EPStartXfer>
}
 80020a2:	2000      	movs	r0, #0
 80020a4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80020a6:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 80020aa:	e7f7      	b.n	800209c <HAL_PCD_EP_Transmit+0x3a>

080020ac <HAL_PCD_EP_SetStall>:
{
 80020ac:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ae:	f001 050f 	and.w	r5, r1, #15
 80020b2:	7902      	ldrb	r2, [r0, #4]
 80020b4:	42aa      	cmp	r2, r5
 80020b6:	d338      	bcc.n	800212a <HAL_PCD_EP_SetStall+0x7e>
 80020b8:	4604      	mov	r4, r0
 80020ba:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80020bc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80020c0:	d11f      	bne.n	8002102 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80020c2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80020c6:	0089      	lsls	r1, r1, #2
 80020c8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80020cc:	4401      	add	r1, r0
 80020ce:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80020d0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80020d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 80020de:	2301      	movs	r3, #1
 80020e0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e2:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80020e4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d020      	beq.n	800212e <HAL_PCD_EP_SetStall+0x82>
 80020ec:	2301      	movs	r3, #1
 80020ee:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020f2:	6820      	ldr	r0, [r4, #0]
 80020f4:	f002 ff11 	bl	8004f1a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	b185      	cbz	r5, 800211c <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002100:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8002106:	0089      	lsls	r1, r1, #2
 8002108:	3110      	adds	r1, #16
 800210a:	4401      	add	r1, r0
 800210c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800210e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002112:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002116:	2201      	movs	r2, #1
 8002118:	755a      	strb	r2, [r3, #21]
 800211a:	e7e0      	b.n	80020de <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800211c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002120:	79a1      	ldrb	r1, [r4, #6]
 8002122:	6820      	ldr	r0, [r4, #0]
 8002124:	f002 fff4 	bl	8005110 <USB_EP0_OutStart>
 8002128:	e7e7      	b.n	80020fa <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800212a:	2001      	movs	r0, #1
 800212c:	e7e8      	b.n	8002100 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800212e:	2002      	movs	r0, #2
 8002130:	e7e6      	b.n	8002100 <HAL_PCD_EP_SetStall+0x54>

08002132 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002132:	f001 030f 	and.w	r3, r1, #15
 8002136:	7902      	ldrb	r2, [r0, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d330      	bcc.n	800219e <HAL_PCD_EP_ClrStall+0x6c>
{
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002140:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002144:	d11e      	bne.n	8002184 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002146:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800214a:	0089      	lsls	r1, r1, #2
 800214c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002150:	4401      	add	r1, r0
 8002152:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002154:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002158:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800215c:	2000      	movs	r0, #0
 800215e:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8002162:	2200      	movs	r2, #0
 8002164:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002166:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002168:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800216c:	2b01      	cmp	r3, #1
 800216e:	d018      	beq.n	80021a2 <HAL_PCD_EP_ClrStall+0x70>
 8002170:	2301      	movs	r3, #1
 8002172:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002176:	6820      	ldr	r0, [r4, #0]
 8002178:	f002 fefc 	bl	8004f74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800217c:	2000      	movs	r0, #0
 800217e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002182:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002184:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002188:	0089      	lsls	r1, r1, #2
 800218a:	3110      	adds	r1, #16
 800218c:	4401      	add	r1, r0
 800218e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002190:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002194:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002198:	2001      	movs	r0, #1
 800219a:	7550      	strb	r0, [r2, #21]
 800219c:	e7e1      	b.n	8002162 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800219e:	2001      	movs	r0, #1
}
 80021a0:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80021a2:	2002      	movs	r0, #2
 80021a4:	e7ed      	b.n	8002182 <HAL_PCD_EP_ClrStall+0x50>

080021a6 <HAL_PCD_EP_Abort>:
{
 80021a6:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80021a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80021ac:	d10c      	bne.n	80021c8 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	f001 010f 	and.w	r1, r1, #15
 80021b2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80021b6:	0089      	lsls	r1, r1, #2
 80021b8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80021bc:	4401      	add	r1, r0
 80021be:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c0:	6800      	ldr	r0, [r0, #0]
 80021c2:	f002 fce9 	bl	8004b98 <USB_EPStopXfer>
}
 80021c6:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	f001 010f 	and.w	r1, r1, #15
 80021cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80021d0:	0089      	lsls	r1, r1, #2
 80021d2:	3110      	adds	r1, #16
 80021d4:	4401      	add	r1, r0
 80021d6:	3104      	adds	r1, #4
 80021d8:	e7f2      	b.n	80021c0 <HAL_PCD_EP_Abort+0x1a>

080021da <HAL_PCD_IRQHandler>:
{
 80021da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021de:	b083      	sub	sp, #12
 80021e0:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e2:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021e4:	4628      	mov	r0, r5
 80021e6:	f002 ff4e 	bl	8005086 <USB_GetMode>
 80021ea:	b110      	cbz	r0, 80021f2 <HAL_PCD_IRQHandler+0x18>
}
 80021ec:	b003      	add	sp, #12
 80021ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021f2:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	f002 ff17 	bl	8005028 <USB_ReadInterrupts>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d0f6      	beq.n	80021ec <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021fe:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002208:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f002 ff0b 	bl	8005028 <USB_ReadInterrupts>
 8002212:	f010 0f02 	tst.w	r0, #2
 8002216:	d004      	beq.n	8002222 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	6953      	ldr	r3, [r2, #20]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	f002 ff00 	bl	8005028 <USB_ReadInterrupts>
 8002228:	f010 0f10 	tst.w	r0, #16
 800222c:	d013      	beq.n	8002256 <HAL_PCD_IRQHandler+0x7c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	6993      	ldr	r3, [r2, #24]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8002238:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800223c:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002240:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002244:	2b02      	cmp	r3, #2
 8002246:	d04b      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x106>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002248:	2b06      	cmp	r3, #6
 800224a:	d06f      	beq.n	800232c <HAL_PCD_IRQHandler+0x152>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800224c:	6822      	ldr	r2, [r4, #0]
 800224e:	6993      	ldr	r3, [r2, #24]
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002256:	6820      	ldr	r0, [r4, #0]
 8002258:	f002 fee6 	bl	8005028 <USB_ReadInterrupts>
 800225c:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8002260:	d176      	bne.n	8002350 <HAL_PCD_IRQHandler+0x176>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002262:	6820      	ldr	r0, [r4, #0]
 8002264:	f002 fee0 	bl	8005028 <USB_ReadInterrupts>
 8002268:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 800226c:	f040 80e0 	bne.w	8002430 <HAL_PCD_IRQHandler+0x256>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	f002 fed9 	bl	8005028 <USB_ReadInterrupts>
 8002276:	2800      	cmp	r0, #0
 8002278:	f2c0 8161 	blt.w	800253e <HAL_PCD_IRQHandler+0x364>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	f002 fed3 	bl	8005028 <USB_ReadInterrupts>
 8002282:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002286:	d009      	beq.n	800229c <HAL_PCD_IRQHandler+0xc2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f013 0f01 	tst.w	r3, #1
 800228e:	f040 816e 	bne.w	800256e <HAL_PCD_IRQHandler+0x394>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	6953      	ldr	r3, [r2, #20]
 8002296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800229c:	6820      	ldr	r0, [r4, #0]
 800229e:	f002 fec3 	bl	8005028 <USB_ReadInterrupts>
 80022a2:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 80022a6:	f040 8166 	bne.w	8002576 <HAL_PCD_IRQHandler+0x39c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	f002 febc 	bl	8005028 <USB_ReadInterrupts>
 80022b0:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 80022b4:	f040 81b3 	bne.w	800261e <HAL_PCD_IRQHandler+0x444>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	f002 feb5 	bl	8005028 <USB_ReadInterrupts>
 80022be:	f010 0f08 	tst.w	r0, #8
 80022c2:	f040 81c4 	bne.w	800264e <HAL_PCD_IRQHandler+0x474>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	f002 feae 	bl	8005028 <USB_ReadInterrupts>
 80022cc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80022d0:	f000 81d7 	beq.w	8002682 <HAL_PCD_IRQHandler+0x4a8>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022d4:	69ab      	ldr	r3, [r5, #24]
 80022d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022da:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022dc:	2601      	movs	r6, #1
 80022de:	e1c0      	b.n	8002662 <HAL_PCD_IRQHandler+0x488>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022e0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022e4:	ea18 0f03 	tst.w	r8, r3
 80022e8:	d0b0      	beq.n	800224c <HAL_PCD_IRQHandler+0x72>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022ea:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 80022f8:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 80022fc:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002300:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8002304:	4628      	mov	r0, r5
 8002306:	f002 fde5 	bl	8004ed4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 800230e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8002312:	4453      	add	r3, sl
 8002314:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002318:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 800231c:	9a01      	ldr	r2, [sp, #4]
 800231e:	444a      	add	r2, r9
 8002320:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002324:	4453      	add	r3, sl
 8002326:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 800232a:	e78f      	b.n	800224c <HAL_PCD_IRQHandler+0x72>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800232c:	2208      	movs	r2, #8
 800232e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002332:	4628      	mov	r0, r5
 8002334:	f002 fdce 	bl	8004ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002338:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800233c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002340:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8002344:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002348:	4442      	add	r2, r8
 800234a:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 800234e:	e77d      	b.n	800224c <HAL_PCD_IRQHandler+0x72>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f002 fe6d 	bl	8005030 <USB_ReadDevAllOutEpInterrupt>
 8002356:	4680      	mov	r8, r0
      epnum = 0U;
 8002358:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800235a:	e035      	b.n	80023c8 <HAL_PCD_IRQHandler+0x1ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800235c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002360:	2201      	movs	r2, #1
 8002362:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002366:	4649      	mov	r1, r9
 8002368:	4620      	mov	r0, r4
 800236a:	f7ff fd11 	bl	8001d90 <PCD_EP_OutXfrComplete_int>
 800236e:	e03c      	b.n	80023ea <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002370:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002374:	2208      	movs	r2, #8
 8002376:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800237a:	4649      	mov	r1, r9
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fd89 	bl	8001e94 <PCD_EP_OutSetupPacket_int>
 8002382:	e035      	b.n	80023f0 <HAL_PCD_IRQHandler+0x216>
            if (ep->is_iso_incomplete == 1U)
 8002384:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800238c:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002390:	2b01      	cmp	r3, #1
 8002392:	d041      	beq.n	8002418 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002394:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002398:	2202      	movs	r2, #2
 800239a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800239e:	f01a 0f20 	tst.w	sl, #32
 80023a2:	d004      	beq.n	80023ae <HAL_PCD_IRQHandler+0x1d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80023a8:	2220      	movs	r2, #32
 80023aa:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023ae:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 80023b2:	d005      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x1e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023b4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80023b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023bc:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 80023c0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80023c4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80023c8:	f1b8 0f00 	cmp.w	r8, #0
 80023cc:	f43f af49 	beq.w	8002262 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U)
 80023d0:	f018 0f01 	tst.w	r8, #1
 80023d4:	d0f4      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x1e6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d6:	fa5f fb89 	uxtb.w	fp, r9
 80023da:	4659      	mov	r1, fp
 80023dc:	6820      	ldr	r0, [r4, #0]
 80023de:	f002 fe37 	bl	8005050 <USB_ReadDevOutEPInterrupt>
 80023e2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023e4:	f010 0f01 	tst.w	r0, #1
 80023e8:	d1b8      	bne.n	800235c <HAL_PCD_IRQHandler+0x182>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ea:	f01a 0f08 	tst.w	sl, #8
 80023ee:	d1bf      	bne.n	8002370 <HAL_PCD_IRQHandler+0x196>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023f0:	f01a 0f10 	tst.w	sl, #16
 80023f4:	d004      	beq.n	8002400 <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023f6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80023fa:	2210      	movs	r2, #16
 80023fc:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002400:	f01a 0f02 	tst.w	sl, #2
 8002404:	d0cb      	beq.n	800239e <HAL_PCD_IRQHandler+0x1c4>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002406:	696b      	ldr	r3, [r5, #20]
 8002408:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800240c:	d0ba      	beq.n	8002384 <HAL_PCD_IRQHandler+0x1aa>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	e7b5      	b.n	8002384 <HAL_PCD_IRQHandler+0x1aa>
              ep->is_iso_incomplete = 0U;
 8002418:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800241c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002426:	4659      	mov	r1, fp
 8002428:	4620      	mov	r0, r4
 800242a:	f006 ffc1 	bl	80093b0 <HAL_PCD_ISOOUTIncompleteCallback>
 800242e:	e7b1      	b.n	8002394 <HAL_PCD_IRQHandler+0x1ba>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	f002 fe05 	bl	8005040 <USB_ReadDevAllInEpInterrupt>
 8002436:	4680      	mov	r8, r0
      epnum = 0U;
 8002438:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800243a:	e025      	b.n	8002488 <HAL_PCD_IRQHandler+0x2ae>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800243c:	4659      	mov	r1, fp
 800243e:	4620      	mov	r0, r4
 8002440:	f006 ff72 	bl	8009328 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002444:	f01a 0f08 	tst.w	sl, #8
 8002448:	d004      	beq.n	8002454 <HAL_PCD_IRQHandler+0x27a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800244a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800244e:	2208      	movs	r2, #8
 8002450:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002454:	f01a 0f10 	tst.w	sl, #16
 8002458:	d004      	beq.n	8002464 <HAL_PCD_IRQHandler+0x28a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800245a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800245e:	2210      	movs	r2, #16
 8002460:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002464:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8002468:	d004      	beq.n	8002474 <HAL_PCD_IRQHandler+0x29a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800246a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800246e:	2240      	movs	r2, #64	@ 0x40
 8002470:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002474:	f01a 0f02 	tst.w	sl, #2
 8002478:	d140      	bne.n	80024fc <HAL_PCD_IRQHandler+0x322>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800247a:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800247e:	d159      	bne.n	8002534 <HAL_PCD_IRQHandler+0x35a>
        epnum++;
 8002480:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002484:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002488:	f1b8 0f00 	cmp.w	r8, #0
 800248c:	f43f aef0 	beq.w	8002270 <HAL_PCD_IRQHandler+0x96>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002490:	f018 0f01 	tst.w	r8, #1
 8002494:	d0f4      	beq.n	8002480 <HAL_PCD_IRQHandler+0x2a6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002496:	fa5f fb89 	uxtb.w	fp, r9
 800249a:	4659      	mov	r1, fp
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	f002 fde0 	bl	8005062 <USB_ReadDevInEPInterrupt>
 80024a2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024a4:	f010 0f01 	tst.w	r0, #1
 80024a8:	d0cc      	beq.n	8002444 <HAL_PCD_IRQHandler+0x26a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024aa:	f009 020f 	and.w	r2, r9, #15
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b6:	ea23 0302 	bic.w	r3, r3, r2
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024bc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80024c0:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 80024c4:	79a3      	ldrb	r3, [r4, #6]
 80024c6:	428b      	cmp	r3, r1
 80024c8:	d1b8      	bne.n	800243c <HAL_PCD_IRQHandler+0x262>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024ca:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80024ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	69d9      	ldr	r1, [r3, #28]
 80024d6:	440a      	add	r2, r1
 80024d8:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024da:	f1b9 0f00 	cmp.w	r9, #0
 80024de:	d1ad      	bne.n	800243c <HAL_PCD_IRQHandler+0x262>
 80024e0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80024e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1a6      	bne.n	800243c <HAL_PCD_IRQHandler+0x262>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ee:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80024f2:	2101      	movs	r1, #1
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	f002 fe0b 	bl	8005110 <USB_EP0_OutStart>
 80024fa:	e79f      	b.n	800243c <HAL_PCD_IRQHandler+0x262>
            (void)USB_FlushTxFifo(USBx, epnum);
 80024fc:	4649      	mov	r1, r9
 80024fe:	4628      	mov	r0, r5
 8002500:	f002 f962 	bl	80047c8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002504:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002508:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800250c:	7ddb      	ldrb	r3, [r3, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d005      	beq.n	800251e <HAL_PCD_IRQHandler+0x344>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002512:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002516:	2202      	movs	r2, #2
 8002518:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800251c:	e7ad      	b.n	800247a <HAL_PCD_IRQHandler+0x2a0>
              ep->is_iso_incomplete = 0U;
 800251e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002522:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002526:	2200      	movs	r2, #0
 8002528:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800252a:	4659      	mov	r1, fp
 800252c:	4620      	mov	r0, r4
 800252e:	f006 ff45 	bl	80093bc <HAL_PCD_ISOINIncompleteCallback>
 8002532:	e7ee      	b.n	8002512 <HAL_PCD_IRQHandler+0x338>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002534:	4649      	mov	r1, r9
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff fb1e 	bl	8001b78 <PCD_WriteEmptyTxFifo>
 800253c:	e7a0      	b.n	8002480 <HAL_PCD_IRQHandler+0x2a6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002546:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 800254a:	2b01      	cmp	r3, #1
 800254c:	d008      	beq.n	8002560 <HAL_PCD_IRQHandler+0x386>
        HAL_PCD_ResumeCallback(hpcd);
 800254e:	4620      	mov	r0, r4
 8002550:	f006 ff28 	bl	80093a4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	6953      	ldr	r3, [r2, #20]
 8002558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800255c:	6153      	str	r3, [r2, #20]
 800255e:	e68d      	b.n	800227c <HAL_PCD_IRQHandler+0xa2>
        hpcd->LPM_State = LPM_L0;
 8002560:	2100      	movs	r1, #0
 8002562:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002566:	4620      	mov	r0, r4
 8002568:	f000 f93f 	bl	80027ea <HAL_PCDEx_LPM_Callback>
 800256c:	e7f2      	b.n	8002554 <HAL_PCD_IRQHandler+0x37a>
        HAL_PCD_SuspendCallback(hpcd);
 800256e:	4620      	mov	r0, r4
 8002570:	f006 ff00 	bl	8009374 <HAL_PCD_SuspendCallback>
 8002574:	e68d      	b.n	8002292 <HAL_PCD_IRQHandler+0xb8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800257e:	2110      	movs	r1, #16
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	f002 f921 	bl	80047c8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002586:	e01a      	b.n	80025be <HAL_PCD_IRQHandler+0x3e4>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002588:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800258c:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002590:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002594:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002598:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800259c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025a0:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025a4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80025a8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80025ac:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025b0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80025b4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80025b8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025bc:	3601      	adds	r6, #1
 80025be:	7923      	ldrb	r3, [r4, #4]
 80025c0:	42b3      	cmp	r3, r6
 80025c2:	d8e1      	bhi.n	8002588 <HAL_PCD_IRQHandler+0x3ae>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80025ca:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025cc:	7be3      	ldrb	r3, [r4, #15]
 80025ce:	b1db      	cbz	r3, 8002608 <HAL_PCD_IRQHandler+0x42e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025d4:	f043 030b 	orr.w	r3, r3, #11
 80025d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025de:	f043 030b 	orr.w	r3, r3, #11
 80025e2:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025e4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 80025e8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80025ec:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025f0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80025f4:	79a1      	ldrb	r1, [r4, #6]
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	f002 fd8a 	bl	8005110 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	6953      	ldr	r3, [r2, #20]
 8002600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002604:	6153      	str	r3, [r2, #20]
 8002606:	e650      	b.n	80022aa <HAL_PCD_IRQHandler+0xd0>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800260e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002612:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f043 030b 	orr.w	r3, r3, #11
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e7e2      	b.n	80025e4 <HAL_PCD_IRQHandler+0x40a>
      (void)USB_ActivateSetup(hpcd->Instance);
 800261e:	6820      	ldr	r0, [r4, #0]
 8002620:	f002 fd66 	bl	80050f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002624:	6820      	ldr	r0, [r4, #0]
 8002626:	f002 f9e9 	bl	80049fc <USB_GetDevSpeed>
 800262a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800262c:	6826      	ldr	r6, [r4, #0]
 800262e:	f000 fbf1 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002632:	4601      	mov	r1, r0
 8002634:	79e2      	ldrb	r2, [r4, #7]
 8002636:	4630      	mov	r0, r6
 8002638:	f002 f848 	bl	80046cc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800263c:	4620      	mov	r0, r4
 800263e:	f006 fe84 	bl	800934a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	6953      	ldr	r3, [r2, #20]
 8002646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800264a:	6153      	str	r3, [r2, #20]
 800264c:	e634      	b.n	80022b8 <HAL_PCD_IRQHandler+0xde>
      HAL_PCD_SOFCallback(hpcd);
 800264e:	4620      	mov	r0, r4
 8002650:	f006 fe75 	bl	800933e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	6953      	ldr	r3, [r2, #20]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	6153      	str	r3, [r2, #20]
 800265e:	e632      	b.n	80022c6 <HAL_PCD_IRQHandler+0xec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002660:	3601      	adds	r6, #1
 8002662:	7923      	ldrb	r3, [r4, #4]
 8002664:	42b3      	cmp	r3, r6
 8002666:	d90c      	bls.n	8002682 <HAL_PCD_IRQHandler+0x4a8>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002668:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800266c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002670:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002674:	2b01      	cmp	r3, #1
 8002676:	d1f3      	bne.n	8002660 <HAL_PCD_IRQHandler+0x486>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002678:	b2f1      	uxtb	r1, r6
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff fd93 	bl	80021a6 <HAL_PCD_EP_Abort>
 8002680:	e7ee      	b.n	8002660 <HAL_PCD_IRQHandler+0x486>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002682:	6820      	ldr	r0, [r4, #0]
 8002684:	f002 fcd0 	bl	8005028 <USB_ReadInterrupts>
 8002688:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800268c:	d125      	bne.n	80026da <HAL_PCD_IRQHandler+0x500>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800268e:	6820      	ldr	r0, [r4, #0]
 8002690:	f002 fcca 	bl	8005028 <USB_ReadInterrupts>
 8002694:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8002698:	d059      	beq.n	800274e <HAL_PCD_IRQHandler+0x574>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269a:	2301      	movs	r3, #1
 800269c:	e026      	b.n	80026ec <HAL_PCD_IRQHandler+0x512>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269e:	3601      	adds	r6, #1
 80026a0:	7923      	ldrb	r3, [r4, #4]
 80026a2:	42b3      	cmp	r3, r6
 80026a4:	d91b      	bls.n	80026de <HAL_PCD_IRQHandler+0x504>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026a6:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80026aa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ae:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80026b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d1f0      	bne.n	800269e <HAL_PCD_IRQHandler+0x4c4>
 80026bc:	2a00      	cmp	r2, #0
 80026be:	daee      	bge.n	800269e <HAL_PCD_IRQHandler+0x4c4>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026c0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80026c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80026c8:	2201      	movs	r2, #1
 80026ca:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026cc:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 80026d0:	b2c9      	uxtb	r1, r1
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fd67 	bl	80021a6 <HAL_PCD_EP_Abort>
 80026d8:	e7e1      	b.n	800269e <HAL_PCD_IRQHandler+0x4c4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026da:	2601      	movs	r6, #1
 80026dc:	e7e0      	b.n	80026a0 <HAL_PCD_IRQHandler+0x4c6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	6953      	ldr	r3, [r2, #20]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e6:	6153      	str	r3, [r2, #20]
 80026e8:	e7d1      	b.n	800268e <HAL_PCD_IRQHandler+0x4b4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ea:	3301      	adds	r3, #1
 80026ec:	7922      	ldrb	r2, [r4, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d928      	bls.n	8002744 <HAL_PCD_IRQHandler+0x56a>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026f2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80026f6:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026fa:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80026fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002702:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8002706:	2a01      	cmp	r2, #1
 8002708:	d1ef      	bne.n	80026ea <HAL_PCD_IRQHandler+0x510>
 800270a:	2900      	cmp	r1, #0
 800270c:	daed      	bge.n	80026ea <HAL_PCD_IRQHandler+0x510>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800270e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8002712:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8002716:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800271a:	4291      	cmp	r1, r2
 800271c:	d1e5      	bne.n	80026ea <HAL_PCD_IRQHandler+0x510>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800271e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002722:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002726:	2101      	movs	r1, #1
 8002728:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800272c:	69aa      	ldr	r2, [r5, #24]
 800272e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002732:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002734:	696a      	ldr	r2, [r5, #20]
 8002736:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800273a:	d1d6      	bne.n	80026ea <HAL_PCD_IRQHandler+0x510>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002742:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	6953      	ldr	r3, [r2, #20]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	f002 fc6a 	bl	8005028 <USB_ReadInterrupts>
 8002754:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002758:	d110      	bne.n	800277c <HAL_PCD_IRQHandler+0x5a2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800275a:	6820      	ldr	r0, [r4, #0]
 800275c:	f002 fc64 	bl	8005028 <USB_ReadInterrupts>
 8002760:	f010 0f04 	tst.w	r0, #4
 8002764:	f43f ad42 	beq.w	80021ec <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800276c:	f015 0f04 	tst.w	r5, #4
 8002770:	d10d      	bne.n	800278e <HAL_PCD_IRQHandler+0x5b4>
      hpcd->Instance->GOTGINT |= RegVal;
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	6853      	ldr	r3, [r2, #4]
 8002776:	432b      	orrs	r3, r5
 8002778:	6053      	str	r3, [r2, #4]
 800277a:	e537      	b.n	80021ec <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800277c:	4620      	mov	r0, r4
 800277e:	f006 fe23 	bl	80093c8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	6953      	ldr	r3, [r2, #20]
 8002786:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800278a:	6153      	str	r3, [r2, #20]
 800278c:	e7e5      	b.n	800275a <HAL_PCD_IRQHandler+0x580>
        HAL_PCD_DisconnectCallback(hpcd);
 800278e:	4620      	mov	r0, r4
 8002790:	f006 fe20 	bl	80093d4 <HAL_PCD_DisconnectCallback>
 8002794:	e7ed      	b.n	8002772 <HAL_PCD_IRQHandler+0x598>

08002796 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002796:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002798:	6804      	ldr	r4, [r0, #0]
 800279a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800279c:	b931      	cbnz	r1, 80027ac <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800279e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80027a2:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80027a4:	2000      	movs	r0, #0
 80027a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027b0:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	e008      	b.n	80027ca <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027b8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80027bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80027c0:	6849      	ldr	r1, [r1, #4]
 80027c2:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80027c6:	3301      	adds	r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
 80027ce:	428b      	cmp	r3, r1
 80027d0:	d3f2      	bcc.n	80027b8 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027d2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80027d6:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80027da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80027de:	6060      	str	r0, [r4, #4]
 80027e0:	e7e0      	b.n	80027a4 <HAL_PCDEx_SetTxFiFo+0xe>

080027e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80027e6:	2000      	movs	r0, #0
 80027e8:	4770      	bx	lr

080027ea <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027ea:	4770      	bx	lr

080027ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ec:	2800      	cmp	r0, #0
 80027ee:	f000 81e0 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x3c6>
{
 80027f2:	b570      	push	{r4, r5, r6, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f8:	6803      	ldr	r3, [r0, #0]
 80027fa:	f013 0f01 	tst.w	r3, #1
 80027fe:	d03b      	beq.n	8002878 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002800:	4b9f      	ldr	r3, [pc, #636]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b04      	cmp	r3, #4
 800280a:	d02c      	beq.n	8002866 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280c:	4b9c      	ldr	r3, [pc, #624]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002814:	2b08      	cmp	r3, #8
 8002816:	d021      	beq.n	800285c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	6863      	ldr	r3, [r4, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281e:	d04f      	beq.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002824:	d052      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
 8002826:	4b96      	ldr	r3, [pc, #600]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002836:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002838:	6863      	ldr	r3, [r4, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d050      	beq.n	80028e0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fb29 	bl	8000e94 <HAL_GetTick>
 8002842:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002844:	4b8e      	ldr	r3, [pc, #568]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800284c:	d114      	bne.n	8002878 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284e:	f7fe fb21 	bl	8000e94 <HAL_GetTick>
 8002852:	1b40      	subs	r0, r0, r5
 8002854:	2864      	cmp	r0, #100	@ 0x64
 8002856:	d9f5      	bls.n	8002844 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002858:	2003      	movs	r0, #3
 800285a:	e1b1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285c:	4b88      	ldr	r3, [pc, #544]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002864:	d0d8      	beq.n	8002818 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4b86      	ldr	r3, [pc, #536]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800286e:	d003      	beq.n	8002878 <HAL_RCC_OscConfig+0x8c>
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 819f 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	f013 0f02 	tst.w	r3, #2
 800287e:	d054      	beq.n	800292a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002880:	4b7f      	ldr	r3, [pc, #508]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f013 0f0c 	tst.w	r3, #12
 8002888:	d03e      	beq.n	8002908 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002892:	2b08      	cmp	r3, #8
 8002894:	d033      	beq.n	80028fe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002896:	68e3      	ldr	r3, [r4, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d068      	beq.n	800296e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b79      	ldr	r3, [pc, #484]	@ (8002a84 <HAL_RCC_OscConfig+0x298>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe faf7 	bl	8000e94 <HAL_GetTick>
 80028a6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b75      	ldr	r3, [pc, #468]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f013 0f02 	tst.w	r3, #2
 80028b0:	d154      	bne.n	800295c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe faef 	bl	8000e94 <HAL_GetTick>
 80028b6:	1b40      	subs	r0, r0, r5
 80028b8:	2802      	cmp	r0, #2
 80028ba:	d9f5      	bls.n	80028a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80028bc:	2003      	movs	r0, #3
 80028be:	e17f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e7b5      	b.n	8002838 <HAL_RCC_OscConfig+0x4c>
 80028cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e7ab      	b.n	8002838 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80028e0:	f7fe fad8 	bl	8000e94 <HAL_GetTick>
 80028e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028ee:	d0c3      	beq.n	8002878 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fad0 	bl	8000e94 <HAL_GetTick>
 80028f4:	1b40      	subs	r0, r0, r5
 80028f6:	2864      	cmp	r0, #100	@ 0x64
 80028f8:	d9f5      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80028fa:	2003      	movs	r0, #3
 80028fc:	e160      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b60      	ldr	r3, [pc, #384]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002906:	d1c6      	bne.n	8002896 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002908:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f013 0f02 	tst.w	r3, #2
 8002910:	d003      	beq.n	800291a <HAL_RCC_OscConfig+0x12e>
 8002912:	68e3      	ldr	r3, [r4, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 8150 	bne.w	8002bba <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4a59      	ldr	r2, [pc, #356]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002922:	6921      	ldr	r1, [r4, #16]
 8002924:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002928:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	f013 0f08 	tst.w	r3, #8
 8002930:	d042      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002932:	6963      	ldr	r3, [r4, #20]
 8002934:	b36b      	cbz	r3, 8002992 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_OscConfig+0x298>)
 8002938:	2201      	movs	r2, #1
 800293a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fe faa9 	bl	8000e94 <HAL_GetTick>
 8002942:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002944:	4b4e      	ldr	r3, [pc, #312]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002948:	f013 0f02 	tst.w	r3, #2
 800294c:	d134      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe faa1 	bl	8000e94 <HAL_GetTick>
 8002952:	1b40      	subs	r0, r0, r5
 8002954:	2802      	cmp	r0, #2
 8002956:	d9f5      	bls.n	8002944 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002958:	2003      	movs	r0, #3
 800295a:	e131      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4a48      	ldr	r2, [pc, #288]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002964:	6921      	ldr	r1, [r4, #16]
 8002966:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e7dd      	b.n	800292a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b45      	ldr	r3, [pc, #276]	@ (8002a84 <HAL_RCC_OscConfig+0x298>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002974:	f7fe fa8e 	bl	8000e94 <HAL_GetTick>
 8002978:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f013 0f02 	tst.w	r3, #2
 8002982:	d0d2      	beq.n	800292a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe fa86 	bl	8000e94 <HAL_GetTick>
 8002988:	1b40      	subs	r0, r0, r5
 800298a:	2802      	cmp	r0, #2
 800298c:	d9f5      	bls.n	800297a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800298e:	2003      	movs	r0, #3
 8002990:	e116      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	4b3c      	ldr	r3, [pc, #240]	@ (8002a84 <HAL_RCC_OscConfig+0x298>)
 8002994:	2200      	movs	r2, #0
 8002996:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe fa7b 	bl	8000e94 <HAL_GetTick>
 800299e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80029a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a4:	f013 0f02 	tst.w	r3, #2
 80029a8:	d006      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe fa73 	bl	8000e94 <HAL_GetTick>
 80029ae:	1b40      	subs	r0, r0, r5
 80029b0:	2802      	cmp	r0, #2
 80029b2:	d9f5      	bls.n	80029a0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80029b4:	2003      	movs	r0, #3
 80029b6:	e103      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f013 0f04 	tst.w	r3, #4
 80029be:	d077      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80029c8:	d133      	bne.n	8002a32 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80029d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029e2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_RCC_OscConfig+0x29c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80029ec:	d023      	beq.n	8002a36 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ee:	68a3      	ldr	r3, [r4, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d034      	beq.n	8002a5e <HAL_RCC_OscConfig+0x272>
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d038      	beq.n	8002a6a <HAL_RCC_OscConfig+0x27e>
 80029f8:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 80029fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a04:	f022 0204 	bic.w	r2, r2, #4
 8002a08:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0a:	68a3      	ldr	r3, [r4, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03d      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe fa40 	bl	8000e94 <HAL_GetTick>
 8002a14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f013 0f02 	tst.w	r3, #2
 8002a1e:	d146      	bne.n	8002aae <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe fa38 	bl	8000e94 <HAL_GetTick>
 8002a24:	1b80      	subs	r0, r0, r6
 8002a26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a2a:	4298      	cmp	r0, r3
 8002a2c:	d9f3      	bls.n	8002a16 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
 8002a30:	e0c6      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2500      	movs	r5, #0
 8002a34:	e7d6      	b.n	80029e4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <HAL_RCC_OscConfig+0x29c>)
 8002a38:	6813      	ldr	r3, [r2, #0]
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a40:	f7fe fa28 	bl	8000e94 <HAL_GetTick>
 8002a44:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_RCC_OscConfig+0x29c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a4e:	d1ce      	bne.n	80029ee <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fe fa20 	bl	8000e94 <HAL_GetTick>
 8002a54:	1b80      	subs	r0, r0, r6
 8002a56:	2802      	cmp	r0, #2
 8002a58:	d9f5      	bls.n	8002a46 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	e0b0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5e:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002a60:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a68:	e7cf      	b.n	8002a0a <HAL_RCC_OscConfig+0x21e>
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_OscConfig+0x294>)
 8002a6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a6e:	f042 0204 	orr.w	r2, r2, #4
 8002a72:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a7c:	e7c5      	b.n	8002a0a <HAL_RCC_OscConfig+0x21e>
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470000 	.word	0x42470000
 8002a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fa02 	bl	8000e94 <HAL_GetTick>
 8002a90:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	4b52      	ldr	r3, [pc, #328]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	f013 0f02 	tst.w	r3, #2
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe f9fa 	bl	8000e94 <HAL_GetTick>
 8002aa0:	1b80      	subs	r0, r0, r6
 8002aa2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002aa6:	4298      	cmp	r0, r3
 8002aa8:	d9f3      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002aaa:	2003      	movs	r0, #3
 8002aac:	e088      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aae:	b9ed      	cbnz	r5, 8002aec <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab0:	69a3      	ldr	r3, [r4, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8083 	beq.w	8002bbe <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab8:	4a48      	ldr	r2, [pc, #288]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	f002 020c 	and.w	r2, r2, #12
 8002ac0:	2a08      	cmp	r2, #8
 8002ac2:	d051      	beq.n	8002b68 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d017      	beq.n	8002af8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b45      	ldr	r3, [pc, #276]	@ (8002be0 <HAL_RCC_OscConfig+0x3f4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe f9e1 	bl	8000e94 <HAL_GetTick>
 8002ad2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad4:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002adc:	d042      	beq.n	8002b64 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe f9d9 	bl	8000e94 <HAL_GetTick>
 8002ae2:	1b00      	subs	r0, r0, r4
 8002ae4:	2802      	cmp	r0, #2
 8002ae6:	d9f5      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ae8:	2003      	movs	r0, #3
 8002aea:	e069      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4a3b      	ldr	r2, [pc, #236]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002aee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af6:	e7db      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_OscConfig+0x3f4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002afe:	f7fe f9c9 	bl	8000e94 <HAL_GetTick>
 8002b02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b04:	4b35      	ldr	r3, [pc, #212]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b0c:	d006      	beq.n	8002b1c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe f9c1 	bl	8000e94 <HAL_GetTick>
 8002b12:	1b40      	subs	r0, r0, r5
 8002b14:	2802      	cmp	r0, #2
 8002b16:	d9f5      	bls.n	8002b04 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b18:	2003      	movs	r0, #3
 8002b1a:	e051      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1c:	69e3      	ldr	r3, [r4, #28]
 8002b1e:	6a22      	ldr	r2, [r4, #32]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b24:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b28:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b2a:	0852      	lsrs	r2, r2, #1
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b38:	4a28      	ldr	r2, [pc, #160]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002b3a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_RCC_OscConfig+0x3f4>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b42:	f7fe f9a7 	bl	8000e94 <HAL_GetTick>
 8002b46:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe f99f 	bl	8000e94 <HAL_GetTick>
 8002b56:	1b00      	subs	r0, r0, r4
 8002b58:	2802      	cmp	r0, #2
 8002b5a:	d9f5      	bls.n	8002b48 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	e02f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b60:	2000      	movs	r0, #0
 8002b62:	e02d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002b64:	2000      	movs	r0, #0
 8002b66:	e02b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d02b      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x3f0>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002b74:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b76:	4291      	cmp	r1, r2
 8002b78:	d126      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b7e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	428a      	cmp	r2, r1
 8002b82:	d123      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b86:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002b90:	d11e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b92:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002b96:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b98:	0852      	lsrs	r2, r2, #1
 8002b9a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002ba6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002bac:	d114      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002bae:	2000      	movs	r0, #0
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002bb2:	2001      	movs	r0, #1
}
 8002bb4:	4770      	bx	lr
        return HAL_ERROR;
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002bbe:	2000      	movs	r0, #0
}
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e7fb      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002bc8:	2001      	movs	r0, #1
 8002bca:	e7f9      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002bcc:	2001      	movs	r0, #1
 8002bce:	e7f7      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	e7f5      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	e7f3      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002bd8:	2001      	movs	r0, #1
 8002bda:	e7f1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	42470000 	.word	0x42470000

08002be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be6:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf2:	482f      	ldr	r0, [pc, #188]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bf4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8002cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c04:	d02c      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c08:	6858      	ldr	r0, [r3, #4]
 8002c0a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c0e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c12:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c16:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c1a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c1e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c22:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c26:	ebb1 010c 	subs.w	r1, r1, ip
 8002c2a:	eb63 030e 	sbc.w	r3, r3, lr
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c34:	00c9      	lsls	r1, r1, #3
 8002c36:	eb11 0c00 	adds.w	ip, r1, r0
 8002c3a:	f143 0300 	adc.w	r3, r3, #0
 8002c3e:	0299      	lsls	r1, r3, #10
 8002c40:	2300      	movs	r3, #0
 8002c42:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002c46:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002c4a:	f7fd fb11 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c4e:	4b17      	ldr	r3, [pc, #92]	@ (8002cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002c5a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002c5e:	e7c9      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c62:	6858      	ldr	r0, [r3, #4]
 8002c64:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c68:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c6c:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c70:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c74:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c78:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c7c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c80:	ebb1 010c 	subs.w	r1, r1, ip
 8002c84:	eb63 030e 	sbc.w	r3, r3, lr
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	00c9      	lsls	r1, r1, #3
 8002c90:	eb11 0c00 	adds.w	ip, r1, r0
 8002c94:	f143 0300 	adc.w	r3, r3, #0
 8002c98:	0299      	lsls	r1, r3, #10
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002ca0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002ca4:	f7fd fae4 	bl	8000270 <__aeabi_uldivmod>
 8002ca8:	e7d1      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x6a>
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400

08002cb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	f000 809b 	beq.w	8002df0 <HAL_RCC_ClockConfig+0x13c>
{
 8002cba:	b570      	push	{r4, r5, r6, lr}
 8002cbc:	460d      	mov	r5, r1
 8002cbe:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e00 <HAL_RCC_ClockConfig+0x14c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	d208      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ccc:	b2cb      	uxtb	r3, r1
 8002cce:	4a4c      	ldr	r2, [pc, #304]	@ (8002e00 <HAL_RCC_ClockConfig+0x14c>)
 8002cd0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	428b      	cmp	r3, r1
 8002cda:	f040 808b 	bne.w	8002df4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f013 0f02 	tst.w	r3, #2
 8002ce4:	d017      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce6:	f013 0f04 	tst.w	r3, #4
 8002cea:	d004      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4a45      	ldr	r2, [pc, #276]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002cee:	6893      	ldr	r3, [r2, #8]
 8002cf0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cf4:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	f013 0f08 	tst.w	r3, #8
 8002cfc:	d004      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfe:	4a41      	ldr	r2, [pc, #260]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d00:	6893      	ldr	r3, [r2, #8]
 8002d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d06:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d0a:	6893      	ldr	r3, [r2, #8]
 8002d0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d10:	68a1      	ldr	r1, [r4, #8]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	f013 0f01 	tst.w	r3, #1
 8002d1c:	d032      	beq.n	8002d84 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	6863      	ldr	r3, [r4, #4]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d021      	beq.n	8002d68 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d24:	1e9a      	subs	r2, r3, #2
 8002d26:	2a01      	cmp	r2, #1
 8002d28:	d925      	bls.n	8002d76 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4a36      	ldr	r2, [pc, #216]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	f012 0f02 	tst.w	r2, #2
 8002d32:	d061      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d34:	4933      	ldr	r1, [pc, #204]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d36:	688a      	ldr	r2, [r1, #8]
 8002d38:	f022 0203 	bic.w	r2, r2, #3
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d40:	f7fe f8a8 	bl	8000e94 <HAL_GetTick>
 8002d44:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	6862      	ldr	r2, [r4, #4]
 8002d50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d56:	f7fe f89d 	bl	8000e94 <HAL_GetTick>
 8002d5a:	1b80      	subs	r0, r0, r6
 8002d5c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d60:	4298      	cmp	r0, r3
 8002d62:	d9f0      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002d64:	2003      	movs	r0, #3
 8002d66:	e042      	b.n	8002dee <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d68:	4a26      	ldr	r2, [pc, #152]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002d70:	d1e0      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
 8002d74:	e03b      	b.n	8002dee <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4a23      	ldr	r2, [pc, #140]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002d7e:	d1d9      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d80:	2001      	movs	r0, #1
 8002d82:	e034      	b.n	8002dee <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <HAL_RCC_ClockConfig+0x14c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	42ab      	cmp	r3, r5
 8002d8e:	d907      	bls.n	8002da0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d90:	b2ea      	uxtb	r2, r5
 8002d92:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <HAL_RCC_ClockConfig+0x14c>)
 8002d94:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	42ab      	cmp	r3, r5
 8002d9e:	d12d      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	f013 0f04 	tst.w	r3, #4
 8002da6:	d006      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4a16      	ldr	r2, [pc, #88]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002daa:	6893      	ldr	r3, [r2, #8]
 8002dac:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002db0:	68e1      	ldr	r1, [r4, #12]
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	f013 0f08 	tst.w	r3, #8
 8002dbc:	d007      	beq.n	8002dce <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4a11      	ldr	r2, [pc, #68]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002dc0:	6893      	ldr	r3, [r2, #8]
 8002dc2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002dc6:	6921      	ldr	r1, [r4, #16]
 8002dc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dcc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dce:	f7ff ff09 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <HAL_RCC_ClockConfig+0x150>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dda:	4a0b      	ldr	r2, [pc, #44]	@ (8002e08 <HAL_RCC_ClockConfig+0x154>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	40d8      	lsrs	r0, r3
 8002de0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_RCC_ClockConfig+0x158>)
 8002de2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x15c>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	f7fe f808 	bl	8000dfc <HAL_InitTick>
  return HAL_OK;
 8002dec:	2000      	movs	r0, #0
}
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002df0:	2001      	movs	r0, #1
}
 8002df2:	4770      	bx	lr
      return HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
 8002df6:	e7fa      	b.n	8002dee <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e7f8      	b.n	8002dee <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	e7f6      	b.n	8002dee <HAL_RCC_ClockConfig+0x13a>
 8002e00:	40023c00 	.word	0x40023c00
 8002e04:	40023800 	.word	0x40023800
 8002e08:	0800a670 	.word	0x0800a670
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	2000000c 	.word	0x2000000c

08002e14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e14:	4b01      	ldr	r3, [pc, #4]	@ (8002e1c <HAL_RCC_GetHCLKFreq+0x8>)
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e22:	f7ff fff7 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e2e:	4a03      	ldr	r2, [pc, #12]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e32:	40d8      	lsrs	r0, r3
 8002e34:	bd08      	pop	{r3, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800a668 	.word	0x0800a668

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e42:	f7ff ffe7 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e46:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e4e:	4a03      	ldr	r2, [pc, #12]	@ (8002e5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e52:	40d8      	lsrs	r0, r3
 8002e54:	bd08      	pop	{r3, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	0800a668 	.word	0x0800a668

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b530      	push	{r4, r5, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e66:	6803      	ldr	r3, [r0, #0]
 8002e68:	f013 0f05 	tst.w	r3, #5
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	f013 0f02 	tst.w	r3, #2
 8002e74:	d12e      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e76:	2000      	movs	r0, #0
}
 8002e78:	b003      	add	sp, #12
 8002e7a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002e82:	f7fe f807 	bl	8000e94 <HAL_GetTick>
 8002e86:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e88:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002e90:	d006      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e92:	f7fd ffff 	bl	8000e94 <HAL_GetTick>
 8002e96:	1b43      	subs	r3, r0, r5
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d9f5      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002e9c:	2003      	movs	r0, #3
 8002e9e:	e7eb      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ea0:	6862      	ldr	r2, [r4, #4]
 8002ea2:	68a3      	ldr	r3, [r4, #8]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002eaa:	4a40      	ldr	r2, [pc, #256]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002eb6:	f7fd ffed 	bl	8000e94 <HAL_GetTick>
 8002eba:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002ec4:	d1d3      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ec6:	f7fd ffe5 	bl	8000e94 <HAL_GetTick>
 8002eca:	1b43      	subs	r3, r0, r5
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d9f5      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	e7d1      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	4b34      	ldr	r3, [pc, #208]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002edc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002eec:	4a30      	ldr	r2, [pc, #192]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ef6:	f7fd ffcd 	bl	8000e94 <HAL_GetTick>
 8002efa:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002efc:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f04:	d106      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f06:	f7fd ffc5 	bl	8000e94 <HAL_GetTick>
 8002f0a:	1b43      	subs	r3, r0, r5
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d9f5      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e7b1      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f14:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f18:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002f1c:	d014      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f1e:	68e2      	ldr	r2, [r4, #12]
 8002f20:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d00f      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f2c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f30:	491d      	ldr	r1, [pc, #116]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f32:	2001      	movs	r0, #1
 8002f34:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002f3e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	f013 0f01 	tst.w	r3, #1
 8002f46:	d113      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f48:	68e3      	ldr	r3, [r4, #12]
 8002f4a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002f4e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002f52:	d01e      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002f54:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f56:	6893      	ldr	r3, [r2, #8]
 8002f58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f5c:	6093      	str	r3, [r2, #8]
 8002f5e:	4913      	ldr	r1, [pc, #76]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f60:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002f62:	68e2      	ldr	r2, [r4, #12]
 8002f64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	670b      	str	r3, [r1, #112]	@ 0x70
  return HAL_OK;
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e783      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002f70:	f7fd ff90 	bl	8000e94 <HAL_GetTick>
 8002f74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	f013 0f02 	tst.w	r3, #2
 8002f7e:	d1e3      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fd ff88 	bl	8000e94 <HAL_GetTick>
 8002f84:	1b40      	subs	r0, r0, r5
 8002f86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f8a:	4298      	cmp	r0, r3
 8002f8c:	d9f3      	bls.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8002f8e:	2003      	movs	r0, #3
 8002f90:	e772      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f92:	4906      	ldr	r1, [pc, #24]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f94:	688a      	ldr	r2, [r1, #8]
 8002f96:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002f9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
 8002fa6:	e7da      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fa8:	42470000 	.word	0x42470000
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002fb4:	2801      	cmp	r0, #1
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002fb8:	2000      	movs	r0, #0
 8002fba:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002fbc:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002fc0:	f413 0300 	ands.w	r3, r3, #8388608	@ 0x800000
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002fc6:	b31b      	cbz	r3, 8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8002fc8:	4813      	ldr	r0, [pc, #76]	@ (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002fca:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002fd4:	d014      	beq.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002fde:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002fe0:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002fe6:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8002fea:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002fee:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002ff2:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002ff6:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002ffa:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002ffe:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800300a:	fbb3 f3f2 	udiv	r3, r3, r2
 800300e:	e7e9      	b.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003010:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return frequency;
}
 8003012:	4770      	bx	lr
 8003014:	40023800 	.word	0x40023800
 8003018:	00bb8000 	.word	0x00bb8000
 800301c:	00f42400 	.word	0x00f42400

08003020 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800302a:	6800      	ldr	r0, [r0, #0]
 800302c:	f000 ffff 	bl	800402e <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003030:	4605      	mov	r5, r0
 8003032:	b110      	cbz	r0, 800303a <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8003034:	4628      	mov	r0, r5
 8003036:	b002      	add	sp, #8
 8003038:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	f001 fac0 	bl	80045c0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003040:	b938      	cbnz	r0, 8003052 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003042:	2301      	movs	r3, #1
 8003044:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003046:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003048:	2b01      	cmp	r3, #1
 800304a:	d00b      	beq.n	8003064 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800304c:	462e      	mov	r6, r5
 800304e:	4628      	mov	r0, r5
 8003050:	e014      	b.n	800307c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003052:	2300      	movs	r3, #0
 8003054:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	f000 ffe9 	bl	800402e <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800305c:	2800      	cmp	r0, #0
 800305e:	d0f2      	beq.n	8003046 <SD_PowerON+0x26>
      return errorstate;
 8003060:	4605      	mov	r5, r0
 8003062:	e7e7      	b.n	8003034 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003064:	2100      	movs	r1, #0
 8003066:	6820      	ldr	r0, [r4, #0]
 8003068:	f001 f948 	bl	80042fc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800306c:	2800      	cmp	r0, #0
 800306e:	d0ed      	beq.n	800304c <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003070:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8003074:	e7de      	b.n	8003034 <SD_PowerON+0x14>
    count++;
 8003076:	9b01      	ldr	r3, [sp, #4]
 8003078:	3301      	adds	r3, #1
 800307a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800307c:	9a01      	ldr	r2, [sp, #4]
 800307e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8003082:	429a      	cmp	r2, r3
 8003084:	d813      	bhi.n	80030ae <SD_PowerON+0x8e>
 8003086:	b996      	cbnz	r6, 80030ae <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003088:	2100      	movs	r1, #0
 800308a:	6820      	ldr	r0, [r4, #0]
 800308c:	f001 f936 	bl	80042fc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003090:	b9e0      	cbnz	r0, 80030cc <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003092:	4912      	ldr	r1, [pc, #72]	@ (80030dc <SD_PowerON+0xbc>)
 8003094:	6820      	ldr	r0, [r4, #0]
 8003096:	f001 f9df 	bl	8004458 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800309a:	4606      	mov	r6, r0
 800309c:	b9c0      	cbnz	r0, 80030d0 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800309e:	2100      	movs	r1, #0
 80030a0:	6820      	ldr	r0, [r4, #0]
 80030a2:	f000 ffaf 	bl	8004004 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80030a6:	0fc3      	lsrs	r3, r0, #31
 80030a8:	d0e5      	beq.n	8003076 <SD_PowerON+0x56>
 80030aa:	461e      	mov	r6, r3
 80030ac:	e7e3      	b.n	8003076 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80030ae:	9a01      	ldr	r2, [sp, #4]
 80030b0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d80e      	bhi.n	80030d6 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80030b8:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 80030bc:	d002      	beq.n	80030c4 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80030be:	2301      	movs	r3, #1
 80030c0:	6463      	str	r3, [r4, #68]	@ 0x44
 80030c2:	e7b7      	b.n	8003034 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 80030c4:	2200      	movs	r2, #0
 80030c6:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 80030c8:	461d      	mov	r5, r3
 80030ca:	e7b3      	b.n	8003034 <SD_PowerON+0x14>
      return errorstate;
 80030cc:	4605      	mov	r5, r0
 80030ce:	e7b1      	b.n	8003034 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80030d4:	e7ae      	b.n	8003034 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80030d6:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80030da:	e7ab      	b.n	8003034 <SD_PowerON+0x14>
 80030dc:	c1100000 	.word	0xc1100000

080030e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80030e2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  dataremaining = hsd->RxXferSize;
 80030e4:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 80030e6:	b9a6      	cbnz	r6, 8003112 <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f000 ff65 	bl	8003fba <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80030f0:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80030f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80030f6:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80030f8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80030fc:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80030fe:	0e00      	lsrs	r0, r0, #24
 8003100:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8003102:	3404      	adds	r4, #4
      dataremaining--;
 8003104:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8003106:	3501      	adds	r5, #1
 8003108:	2d07      	cmp	r5, #7
 800310a:	d9ee      	bls.n	80030ea <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 800310c:	62bc      	str	r4, [r7, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800310e:	62fe      	str	r6, [r7, #44]	@ 0x2c
}
 8003110:	e7ea      	b.n	80030e8 <SD_Read_IT+0x8>
 8003112:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8003114:	2500      	movs	r5, #0
 8003116:	e7f7      	b.n	8003108 <SD_Read_IT+0x28>

08003118 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800311c:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 800311e:	6a46      	ldr	r6, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 8003120:	b9de      	cbnz	r6, 800315a <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 8003122:	b003      	add	sp, #12
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 8003126:	7823      	ldrb	r3, [r4, #0]
 8003128:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800312a:	7862      	ldrb	r2, [r4, #1]
 800312c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003130:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8003132:	78a2      	ldrb	r2, [r4, #2]
 8003134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003138:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800313a:	78e2      	ldrb	r2, [r4, #3]
 800313c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003140:	9301      	str	r3, [sp, #4]
      tmp++;
 8003142:	3404      	adds	r4, #4
      dataremaining--;
 8003144:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003146:	a901      	add	r1, sp, #4
 8003148:	6838      	ldr	r0, [r7, #0]
 800314a:	f000 ff39 	bl	8003fc0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800314e:	3501      	adds	r5, #1
 8003150:	2d07      	cmp	r5, #7
 8003152:	d9e8      	bls.n	8003126 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8003154:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8003156:	627e      	str	r6, [r7, #36]	@ 0x24
}
 8003158:	e7e3      	b.n	8003122 <SD_Write_IT+0xa>
 800315a:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 800315c:	2500      	movs	r5, #0
 800315e:	e7f7      	b.n	8003150 <SD_Write_IT+0x38>

08003160 <SD_SendStatus>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8003162:	b181      	cbz	r1, 8003186 <SD_SendStatus+0x26>
 8003164:	4604      	mov	r4, r0
 8003166:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003168:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800316a:	0409      	lsls	r1, r1, #16
 800316c:	6800      	ldr	r0, [r0, #0]
 800316e:	f001 f8dd 	bl	800432c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003172:	4605      	mov	r5, r0
 8003174:	b108      	cbz	r0, 800317a <SD_SendStatus+0x1a>
}
 8003176:	4628      	mov	r0, r5
 8003178:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800317a:	2100      	movs	r1, #0
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	f000 ff41 	bl	8004004 <SDIO_GetResponse>
 8003182:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8003184:	e7f7      	b.n	8003176 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8003186:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 800318a:	e7f4      	b.n	8003176 <SD_SendStatus+0x16>

0800318c <HAL_SD_ReadBlocks>:
{
 800318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003190:	b087      	sub	sp, #28
 8003192:	4605      	mov	r5, r0
 8003194:	460c      	mov	r4, r1
 8003196:	4616      	mov	r6, r2
 8003198:	469b      	mov	fp, r3
 800319a:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7fd fe79 	bl	8000e94 <HAL_GetTick>
  if(NULL == pData)
 80031a2:	2c00      	cmp	r4, #0
 80031a4:	d036      	beq.n	8003214 <HAL_SD_ReadBlocks+0x88>
 80031a6:	4681      	mov	r9, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80031a8:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 80031ac:	b2ff      	uxtb	r7, r7
 80031ae:	2f01      	cmp	r7, #1
 80031b0:	f040 8109 	bne.w	80033c6 <HAL_SD_ReadBlocks+0x23a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031b8:	eb06 030b 	add.w	r3, r6, fp
 80031bc:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80031be:	4293      	cmp	r3, r2
 80031c0:	d82e      	bhi.n	8003220 <HAL_SD_ReadBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 80031c2:	2303      	movs	r3, #3
 80031c4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031ce:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d000      	beq.n	80031d6 <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 80031d4:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031da:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031dc:	ea4f 234b 	mov.w	r3, fp, lsl #9
 80031e0:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031e2:	2390      	movs	r3, #144	@ 0x90
 80031e4:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80031e6:	2302      	movs	r3, #2
 80031e8:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80031f2:	4669      	mov	r1, sp
 80031f4:	6828      	ldr	r0, [r5, #0]
 80031f6:	f000 ff08 	bl	800400a <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80031fa:	f1bb 0f01 	cmp.w	fp, #1
 80031fe:	d914      	bls.n	800322a <HAL_SD_ReadBlocks+0x9e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003200:	2302      	movs	r3, #2
 8003202:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003204:	4631      	mov	r1, r6
 8003206:	6828      	ldr	r0, [r5, #0]
 8003208:	f000 fffe 	bl	8004208 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800320c:	b9a0      	cbnz	r0, 8003238 <HAL_SD_ReadBlocks+0xac>
    dataremaining = config.DataLength;
 800320e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003212:	e038      	b.n	8003286 <HAL_SD_ReadBlocks+0xfa>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003214:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003216:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800321a:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800321c:	2701      	movs	r7, #1
 800321e:	e0d7      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003220:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003222:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003226:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8003228:	e0d2      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800322a:	2301      	movs	r3, #1
 800322c:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800322e:	4631      	mov	r1, r6
 8003230:	6828      	ldr	r0, [r5, #0]
 8003232:	f000 ffd1 	bl	80041d8 <SDMMC_CmdReadSingleBlock>
 8003236:	e7e9      	b.n	800320c <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	4a67      	ldr	r2, [pc, #412]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800323e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003240:	4303      	orrs	r3, r0
 8003242:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003244:	2301      	movs	r3, #1
 8003246:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800324a:	2300      	movs	r3, #0
 800324c:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800324e:	e0bf      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
          data = SDIO_ReadFIFO(hsd->Instance);
 8003250:	6828      	ldr	r0, [r5, #0]
 8003252:	f000 feb2 	bl	8003fba <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003256:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003258:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800325c:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800325e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003262:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003264:	0e00      	lsrs	r0, r0, #24
 8003266:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8003268:	3404      	adds	r4, #4
          dataremaining--;
 800326a:	f1a8 0804 	sub.w	r8, r8, #4
        for(count = 0U; count < 8U; count++)
 800326e:	3601      	adds	r6, #1
 8003270:	2e07      	cmp	r6, #7
 8003272:	d9ed      	bls.n	8003250 <HAL_SD_ReadBlocks+0xc4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003274:	f7fd fe0e 	bl	8000e94 <HAL_GetTick>
 8003278:	eba0 0009 	sub.w	r0, r0, r9
 800327c:	4550      	cmp	r0, sl
 800327e:	d210      	bcs.n	80032a2 <HAL_SD_ReadBlocks+0x116>
 8003280:	f1ba 0f00 	cmp.w	sl, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_SD_ReadBlocks+0x116>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003286:	6828      	ldr	r0, [r5, #0]
 8003288:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800328a:	f240 332a 	movw	r3, #810	@ 0x32a
 800328e:	401e      	ands	r6, r3
 8003290:	d115      	bne.n	80032be <HAL_SD_ReadBlocks+0x132>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003292:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003294:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003298:	d0ec      	beq.n	8003274 <HAL_SD_ReadBlocks+0xe8>
 800329a:	f1b8 0f00 	cmp.w	r8, #0
 800329e:	d0e9      	beq.n	8003274 <HAL_SD_ReadBlocks+0xe8>
 80032a0:	e7e6      	b.n	8003270 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	4a4c      	ldr	r2, [pc, #304]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80032a8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80032aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032ae:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 80032ba:	2703      	movs	r7, #3
 80032bc:	e088      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80032be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032c4:	d005      	beq.n	80032d2 <HAL_SD_ReadBlocks+0x146>
 80032c6:	f1bb 0f01 	cmp.w	fp, #1
 80032ca:	d902      	bls.n	80032d2 <HAL_SD_ReadBlocks+0x146>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80032cc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d13c      	bne.n	800334c <HAL_SD_ReadBlocks+0x1c0>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d6:	f012 0f08 	tst.w	r2, #8
 80032da:	d148      	bne.n	800336e <HAL_SD_ReadBlocks+0x1e2>
 80032dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032de:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80032e2:	d144      	bne.n	800336e <HAL_SD_ReadBlocks+0x1e2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e6:	f012 0f02 	tst.w	r2, #2
 80032ea:	d14c      	bne.n	8003386 <HAL_SD_ReadBlocks+0x1fa>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80032ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ee:	f012 0f20 	tst.w	r2, #32
 80032f2:	d154      	bne.n	800339e <HAL_SD_ReadBlocks+0x212>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80032f4:	6828      	ldr	r0, [r5, #0]
 80032f6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032f8:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80032fc:	d05b      	beq.n	80033b6 <HAL_SD_ReadBlocks+0x22a>
 80032fe:	f1b8 0f00 	cmp.w	r8, #0
 8003302:	d058      	beq.n	80033b6 <HAL_SD_ReadBlocks+0x22a>
      data = SDIO_ReadFIFO(hsd->Instance);
 8003304:	f000 fe59 	bl	8003fba <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003308:	7020      	strb	r0, [r4, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800330a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800330e:	7063      	strb	r3, [r4, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003310:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003314:	70a3      	strb	r3, [r4, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003316:	0e00      	lsrs	r0, r0, #24
 8003318:	70e0      	strb	r0, [r4, #3]
      tempbuff++;
 800331a:	3404      	adds	r4, #4
      dataremaining--;
 800331c:	f1a8 0804 	sub.w	r8, r8, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003320:	f7fd fdb8 	bl	8000e94 <HAL_GetTick>
 8003324:	eba0 0009 	sub.w	r0, r0, r9
 8003328:	4550      	cmp	r0, sl
 800332a:	d202      	bcs.n	8003332 <HAL_SD_ReadBlocks+0x1a6>
 800332c:	f1ba 0f00 	cmp.w	sl, #0
 8003330:	d1e0      	bne.n	80032f4 <HAL_SD_ReadBlocks+0x168>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	4a28      	ldr	r2, [pc, #160]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 8003336:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003338:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800333a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800333e:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003340:	2301      	movs	r3, #1
 8003342:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003346:	2300      	movs	r3, #0
 8003348:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_ERROR;
 800334a:	e041      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800334c:	f000 ffa4 	bl	8004298 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003350:	4603      	mov	r3, r0
 8003352:	2800      	cmp	r0, #0
 8003354:	d0bd      	beq.n	80032d2 <HAL_SD_ReadBlocks+0x146>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003356:	682a      	ldr	r2, [r5, #0]
 8003358:	491f      	ldr	r1, [pc, #124]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 800335a:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800335c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800335e:	4313      	orrs	r3, r2
 8003360:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003362:	2301      	movs	r3, #1
 8003364:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003368:	2300      	movs	r3, #0
 800336a:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 800336c:	e030      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800336e:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003372:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800337a:	2301      	movs	r3, #1
 800337c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003380:	2300      	movs	r3, #0
 8003382:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8003384:	e024      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003386:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 8003388:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800338a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003392:	2301      	movs	r3, #1
 8003394:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003398:	2300      	movs	r3, #0
 800339a:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800339c:	e018      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800339e:	4a0e      	ldr	r2, [pc, #56]	@ (80033d8 <HAL_SD_ReadBlocks+0x24c>)
 80033a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80033a2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80033a4:	f043 0320 	orr.w	r3, r3, #32
 80033a8:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80033b4:	e00c      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033b6:	f240 533a 	movw	r3, #1338	@ 0x53a
 80033ba:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033bc:	2301      	movs	r3, #1
 80033be:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 80033c2:	2700      	movs	r7, #0
 80033c4:	e004      	b.n	80033d0 <HAL_SD_ReadBlocks+0x244>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033c6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80033c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033cc:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 80033ce:	2701      	movs	r7, #1
}
 80033d0:	4638      	mov	r0, r7
 80033d2:	b007      	add	sp, #28
 80033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d8:	004005ff 	.word	0x004005ff

080033dc <HAL_SD_WriteBlocks>:
{
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b08b      	sub	sp, #44	@ 0x2c
 80033e2:	4605      	mov	r5, r0
 80033e4:	460c      	mov	r4, r1
 80033e6:	4616      	mov	r6, r2
 80033e8:	469b      	mov	fp, r3
 80033ea:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80033ee:	f7fd fd51 	bl	8000e94 <HAL_GetTick>
  if(NULL == pData)
 80033f2:	2c00      	cmp	r4, #0
 80033f4:	d037      	beq.n	8003466 <HAL_SD_WriteBlocks+0x8a>
 80033f6:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80033f8:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 80033fc:	b2ff      	uxtb	r7, r7
 80033fe:	2f01      	cmp	r7, #1
 8003400:	f040 80e6 	bne.w	80035d0 <HAL_SD_WriteBlocks+0x1f4>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003404:	2300      	movs	r3, #0
 8003406:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003408:	eb06 030b 	add.w	r3, r6, fp
 800340c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800340e:	4293      	cmp	r3, r2
 8003410:	d82f      	bhi.n	8003472 <HAL_SD_WriteBlocks+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 8003412:	2303      	movs	r3, #3
 8003414:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800341e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003420:	2b01      	cmp	r3, #1
 8003422:	d000      	beq.n	8003426 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 8003424:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800342a:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800342c:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8003430:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003432:	2390      	movs	r3, #144	@ 0x90
 8003434:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003436:	2300      	movs	r3, #0
 8003438:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800343a:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800343c:	2301      	movs	r3, #1
 800343e:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003440:	a904      	add	r1, sp, #16
 8003442:	6828      	ldr	r0, [r5, #0]
 8003444:	f000 fde1 	bl	800400a <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003448:	f1bb 0f01 	cmp.w	fp, #1
 800344c:	d916      	bls.n	800347c <HAL_SD_WriteBlocks+0xa0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800344e:	2320      	movs	r3, #32
 8003450:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003452:	4631      	mov	r1, r6
 8003454:	6828      	ldr	r0, [r5, #0]
 8003456:	f000 ff07 	bl	8004268 <SDMMC_CmdWriteMultiBlock>
 800345a:	9001      	str	r0, [sp, #4]
    if(errorstate != HAL_SD_ERROR_NONE)
 800345c:	9b01      	ldr	r3, [sp, #4]
 800345e:	b9ab      	cbnz	r3, 800348c <HAL_SD_WriteBlocks+0xb0>
    dataremaining = config.DataLength;
 8003460:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003464:	e040      	b.n	80034e8 <HAL_SD_WriteBlocks+0x10c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003466:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003468:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800346c:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800346e:	2701      	movs	r7, #1
 8003470:	e0b3      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003472:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003478:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 800347a:	e0ae      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800347c:	2310      	movs	r3, #16
 800347e:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003480:	4631      	mov	r1, r6
 8003482:	6828      	ldr	r0, [r5, #0]
 8003484:	f000 fed8 	bl	8004238 <SDMMC_CmdWriteSingleBlock>
 8003488:	9001      	str	r0, [sp, #4]
 800348a:	e7e7      	b.n	800345c <HAL_SD_WriteBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	4a55      	ldr	r2, [pc, #340]	@ (80035e4 <HAL_SD_WriteBlocks+0x208>)
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003492:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003494:	9a01      	ldr	r2, [sp, #4]
 8003496:	4313      	orrs	r3, r2
 8003498:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800349a:	2301      	movs	r3, #1
 800349c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80034a4:	e099      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
          data = (uint32_t)(*tempbuff);
 80034a6:	7823      	ldrb	r3, [r4, #0]
 80034a8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80034aa:	7862      	ldrb	r2, [r4, #1]
 80034ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034b0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80034b2:	78a2      	ldrb	r2, [r4, #2]
 80034b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034b8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80034ba:	78e2      	ldrb	r2, [r4, #3]
 80034bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80034c0:	9303      	str	r3, [sp, #12]
          tempbuff++;
 80034c2:	3404      	adds	r4, #4
          dataremaining--;
 80034c4:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80034c8:	a903      	add	r1, sp, #12
 80034ca:	6828      	ldr	r0, [r5, #0]
 80034cc:	f000 fd78 	bl	8003fc0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80034d0:	3601      	adds	r6, #1
 80034d2:	2e07      	cmp	r6, #7
 80034d4:	d9e7      	bls.n	80034a6 <HAL_SD_WriteBlocks+0xca>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034d6:	f7fd fcdd 	bl	8000e94 <HAL_GetTick>
 80034da:	eba0 0008 	sub.w	r0, r0, r8
 80034de:	4550      	cmp	r0, sl
 80034e0:	d210      	bcs.n	8003504 <HAL_SD_WriteBlocks+0x128>
 80034e2:	f1ba 0f00 	cmp.w	sl, #0
 80034e6:	d00d      	beq.n	8003504 <HAL_SD_WriteBlocks+0x128>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80034e8:	6828      	ldr	r0, [r5, #0]
 80034ea:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80034ec:	f240 331a 	movw	r3, #794	@ 0x31a
 80034f0:	401e      	ands	r6, r3
 80034f2:	d115      	bne.n	8003520 <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80034f4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80034f6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80034fa:	d0ec      	beq.n	80034d6 <HAL_SD_WriteBlocks+0xfa>
 80034fc:	f1b9 0f00 	cmp.w	r9, #0
 8003500:	d0e9      	beq.n	80034d6 <HAL_SD_WriteBlocks+0xfa>
 8003502:	e7e6      	b.n	80034d2 <HAL_SD_WriteBlocks+0xf6>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	4a37      	ldr	r2, [pc, #220]	@ (80035e4 <HAL_SD_WriteBlocks+0x208>)
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800350a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800350c:	9a01      	ldr	r2, [sp, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003512:	2301      	movs	r3, #1
 8003514:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003518:	2300      	movs	r3, #0
 800351a:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 800351c:	2703      	movs	r7, #3
 800351e:	e05c      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003520:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003522:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003526:	d005      	beq.n	8003534 <HAL_SD_WriteBlocks+0x158>
 8003528:	f1bb 0f01 	cmp.w	fp, #1
 800352c:	d902      	bls.n	8003534 <HAL_SD_WriteBlocks+0x158>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800352e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003530:	2b03      	cmp	r3, #3
 8003532:	d11c      	bne.n	800356e <HAL_SD_WriteBlocks+0x192>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003538:	f012 0f08 	tst.w	r2, #8
 800353c:	d128      	bne.n	8003590 <HAL_SD_WriteBlocks+0x1b4>
 800353e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003540:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8003544:	d124      	bne.n	8003590 <HAL_SD_WriteBlocks+0x1b4>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003548:	f012 0f02 	tst.w	r2, #2
 800354c:	d12c      	bne.n	80035a8 <HAL_SD_WriteBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800354e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003550:	f012 0f10 	tst.w	r2, #16
 8003554:	d034      	beq.n	80035c0 <HAL_SD_WriteBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003556:	4a23      	ldr	r2, [pc, #140]	@ (80035e4 <HAL_SD_WriteBlocks+0x208>)
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800355a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800355c:	f043 0310 	orr.w	r3, r3, #16
 8003560:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003562:	2301      	movs	r3, #1
 8003564:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003568:	2300      	movs	r3, #0
 800356a:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800356c:	e035      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800356e:	f000 fe93 	bl	8004298 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003572:	4603      	mov	r3, r0
 8003574:	2800      	cmp	r0, #0
 8003576:	d0dd      	beq.n	8003534 <HAL_SD_WriteBlocks+0x158>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003578:	682a      	ldr	r2, [r5, #0]
 800357a:	491a      	ldr	r1, [pc, #104]	@ (80035e4 <HAL_SD_WriteBlocks+0x208>)
 800357c:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800357e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003580:	4313      	orrs	r3, r2
 8003582:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003584:	2301      	movs	r3, #1
 8003586:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 800358e:	e024      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003590:	4a14      	ldr	r2, [pc, #80]	@ (80035e4 <HAL_SD_WriteBlocks+0x208>)
 8003592:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003594:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003596:	f043 0308 	orr.w	r3, r3, #8
 800359a:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800359c:	2301      	movs	r3, #1
 800359e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80035a6:	e018      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035a8:	4a0e      	ldr	r2, [pc, #56]	@ (80035e4 <HAL_SD_WriteBlocks+0x208>)
 80035aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035ac:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80035ae:	f043 0302 	orr.w	r3, r3, #2
 80035b2:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80035be:	e00c      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035c0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80035c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 80035cc:	2700      	movs	r7, #0
 80035ce:	e004      	b.n	80035da <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80035d0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80035d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035d6:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 80035d8:	2701      	movs	r7, #1
}
 80035da:	4638      	mov	r0, r7
 80035dc:	b00b      	add	sp, #44	@ 0x2c
 80035de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	004005ff 	.word	0x004005ff

080035e8 <HAL_SD_ErrorCallback>:
}
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_SD_GetCardCSD>:
{
 80035ec:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80035ee:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80035f0:	0f92      	lsrs	r2, r2, #30
 80035f2:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80035f4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80035f6:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80035fa:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80035fc:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8003600:	f002 0203 	and.w	r2, r2, #3
 8003604:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003606:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 800360a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800360c:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8003610:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003612:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 8003616:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003618:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800361a:	0d12      	lsrs	r2, r2, #20
 800361c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800361e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8003622:	f002 020f 	and.w	r2, r2, #15
 8003626:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003628:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800362a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800362e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003630:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003632:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003636:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003638:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800363a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800363e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003640:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003642:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003646:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003648:	2200      	movs	r2, #0
 800364a:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800364c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800364e:	2a00      	cmp	r2, #0
 8003650:	f040 8086 	bne.w	8003760 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003654:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8003656:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800365a:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 800365e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8003660:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8003664:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003666:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003668:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800366c:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800366e:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8003672:	f002 0207 	and.w	r2, r2, #7
 8003676:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003678:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800367a:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800367e:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003680:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003682:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8003686:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003688:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800368a:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800368e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003690:	690a      	ldr	r2, [r1, #16]
 8003692:	3201      	adds	r2, #1
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003696:	7e08      	ldrb	r0, [r1, #24]
 8003698:	f000 0007 	and.w	r0, r0, #7
 800369c:	3002      	adds	r0, #2
 800369e:	4082      	lsls	r2, r0
 80036a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80036a2:	f891 c008 	ldrb.w	ip, [r1, #8]
 80036a6:	f00c 0c0f 	and.w	ip, ip, #15
 80036aa:	2001      	movs	r0, #1
 80036ac:	fa00 f00c 	lsl.w	r0, r0, ip
 80036b0:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80036b2:	0a40      	lsrs	r0, r0, #9
 80036b4:	fb00 f202 	mul.w	r2, r0, r2
 80036b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80036ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036be:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80036c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036c2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80036c6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80036c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036ca:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80036ce:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80036d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d6:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80036d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036da:	0fd2      	lsrs	r2, r2, #31
 80036dc:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80036de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036e0:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80036e4:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80036e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036e8:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80036ec:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036f0:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80036f4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80036f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036f8:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80036fc:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8003700:	2000      	movs	r0, #0
 8003702:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003706:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800370a:	f002 0201 	and.w	r2, r2, #1
 800370e:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003712:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003714:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003718:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800371c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800371e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003722:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003726:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003728:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800372c:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003730:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003732:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003736:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800373a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800373c:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8003740:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003744:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003746:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800374a:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003754:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8003758:	2301      	movs	r3, #1
 800375a:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 800375e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003760:	2a01      	cmp	r2, #1
 8003762:	d111      	bne.n	8003788 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003764:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003766:	0412      	lsls	r2, r2, #16
 8003768:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800376c:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8003770:	4302      	orrs	r2, r0
 8003772:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003774:	690a      	ldr	r2, [r1, #16]
 8003776:	3201      	adds	r2, #1
 8003778:	0292      	lsls	r2, r2, #10
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800377c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800377e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003782:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003784:	661a      	str	r2, [r3, #96]	@ 0x60
 8003786:	e79b      	b.n	80036c0 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003788:	6802      	ldr	r2, [r0, #0]
 800378a:	4905      	ldr	r1, [pc, #20]	@ (80037a0 <HAL_SD_GetCardCSD+0x1b4>)
 800378c:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800378e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003790:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003794:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003796:	2001      	movs	r0, #1
 8003798:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	004005ff 	.word	0x004005ff

080037a4 <SD_InitCard>:
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	b090      	sub	sp, #64	@ 0x40
 80037a8:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80037b0:	6800      	ldr	r0, [r0, #0]
 80037b2:	f000 fc0e 	bl	8003fd2 <SDIO_GetPowerState>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d06c      	beq.n	8003894 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d145      	bne.n	800384c <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d15d      	bne.n	8003882 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d01d      	beq.n	8003808 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80037cc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80037d0:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037d2:	0409      	lsls	r1, r1, #16
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	f000 fe04 	bl	80043e2 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037da:	4605      	mov	r5, r0
 80037dc:	2800      	cmp	r0, #0
 80037de:	d15b      	bne.n	8003898 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037e0:	2100      	movs	r1, #0
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	f000 fc0e 	bl	8004004 <SDIO_GetResponse>
 80037e8:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80037ea:	2104      	movs	r1, #4
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	f000 fc09 	bl	8004004 <SDIO_GetResponse>
 80037f2:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80037f4:	2108      	movs	r1, #8
 80037f6:	6820      	ldr	r0, [r4, #0]
 80037f8:	f000 fc04 	bl	8004004 <SDIO_GetResponse>
 80037fc:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037fe:	210c      	movs	r1, #12
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	f000 fbff 	bl	8004004 <SDIO_GetResponse>
 8003806:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003808:	2104      	movs	r1, #4
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	f000 fbfa 	bl	8004004 <SDIO_GetResponse>
 8003810:	0d00      	lsrs	r0, r0, #20
 8003812:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003814:	a905      	add	r1, sp, #20
 8003816:	4620      	mov	r0, r4
 8003818:	f7ff fee8 	bl	80035ec <HAL_SD_GetCardCSD>
 800381c:	2800      	cmp	r0, #0
 800381e:	d13e      	bne.n	800389e <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003820:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003822:	0412      	lsls	r2, r2, #16
 8003824:	2300      	movs	r3, #0
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	f000 fd50 	bl	80042cc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800382c:	4605      	mov	r5, r0
 800382e:	bb98      	cbnz	r0, 8003898 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003830:	4623      	mov	r3, r4
 8003832:	f853 6b10 	ldr.w	r6, [r3], #16
 8003836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800383a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800383e:	3404      	adds	r4, #4
 8003840:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003844:	4630      	mov	r0, r6
 8003846:	f000 fb9f 	bl	8003f88 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 800384a:	e025      	b.n	8003898 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	f000 fdb3 	bl	80043b8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	4605      	mov	r5, r0
 8003854:	bb00      	cbnz	r0, 8003898 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003856:	2100      	movs	r1, #0
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	f000 fbd3 	bl	8004004 <SDIO_GetResponse>
 800385e:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003860:	2104      	movs	r1, #4
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	f000 fbce 	bl	8004004 <SDIO_GetResponse>
 8003868:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800386a:	2108      	movs	r1, #8
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	f000 fbc9 	bl	8004004 <SDIO_GetResponse>
 8003872:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003874:	210c      	movs	r1, #12
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	f000 fbc4 	bl	8004004 <SDIO_GetResponse>
 800387c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8003880:	e79e      	b.n	80037c0 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003882:	f10d 0112 	add.w	r1, sp, #18
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	f000 fe50 	bl	800452c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800388c:	4605      	mov	r5, r0
 800388e:	2800      	cmp	r0, #0
 8003890:	d099      	beq.n	80037c6 <SD_InitCard+0x22>
 8003892:	e001      	b.n	8003898 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003894:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 8003898:	4628      	mov	r0, r5
 800389a:	b010      	add	sp, #64	@ 0x40
 800389c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800389e:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80038a2:	e7f9      	b.n	8003898 <SD_InitCard+0xf4>

080038a4 <HAL_SD_InitCard>:
{
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80038aa:	2300      	movs	r3, #0
 80038ac:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80038ae:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80038b0:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80038b2:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80038b4:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80038b6:	2376      	movs	r3, #118	@ 0x76
 80038b8:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 80038ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80038bc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80038c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038c4:	ab04      	add	r3, sp, #16
 80038c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	f000 fb5d 	bl	8003f88 <SDIO_Init>
  if(status != HAL_OK)
 80038ce:	b118      	cbz	r0, 80038d8 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80038d0:	2501      	movs	r5, #1
}
 80038d2:	4628      	mov	r0, r5
 80038d4:	b00a      	add	sp, #40	@ 0x28
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80038da:	4e1a      	ldr	r6, [pc, #104]	@ (8003944 <HAL_SD_InitCard+0xa0>)
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	f000 fb71 	bl	8003fca <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80038e8:	2301      	movs	r3, #1
 80038ea:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 80038ee:	2002      	movs	r0, #2
 80038f0:	f7fd fad6 	bl	8000ea0 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff fb93 	bl	8003020 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038fa:	b130      	cbz	r0, 800390a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80038fc:	2501      	movs	r5, #1
 80038fe:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003902:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003904:	4303      	orrs	r3, r0
 8003906:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8003908:	e7e3      	b.n	80038d2 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ff4a 	bl	80037a4 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003910:	b130      	cbz	r0, 8003920 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8003912:	2501      	movs	r5, #1
 8003914:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003918:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800391a:	4303      	orrs	r3, r0
 800391c:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800391e:	e7d8      	b.n	80038d2 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	f000 fc3f 	bl	80041a8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800392a:	2800      	cmp	r0, #0
 800392c:	d0d1      	beq.n	80038d2 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	4905      	ldr	r1, [pc, #20]	@ (8003948 <HAL_SD_InitCard+0xa4>)
 8003932:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003934:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003936:	4303      	orrs	r3, r0
 8003938:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800393a:	2501      	movs	r5, #1
 800393c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003940:	e7c7      	b.n	80038d2 <HAL_SD_InitCard+0x2e>
 8003942:	bf00      	nop
 8003944:	42258000 	.word	0x42258000
 8003948:	004005ff 	.word	0x004005ff

0800394c <HAL_SD_Init>:
  if(hsd == NULL)
 800394c:	b1a8      	cbz	r0, 800397a <HAL_SD_Init+0x2e>
{
 800394e:	b510      	push	{r4, lr}
 8003950:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003952:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8003956:	b163      	cbz	r3, 8003972 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8003958:	2303      	movs	r3, #3
 800395a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff ffa0 	bl	80038a4 <HAL_SD_InitCard>
 8003964:	b958      	cbnz	r0, 800397e <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003966:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003968:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800396a:	2301      	movs	r3, #1
 800396c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003970:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003972:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003974:	f7fd f904 	bl	8000b80 <HAL_SD_MspInit>
 8003978:	e7ee      	b.n	8003958 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800397a:	2001      	movs	r0, #1
}
 800397c:	4770      	bx	lr
    return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	e7f6      	b.n	8003970 <HAL_SD_Init+0x24>

08003982 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003982:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003984:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003986:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003988:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800398a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800398c:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800398e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003990:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003992:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003994:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003996:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003998:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800399a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800399c:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800399e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80039a0:	61cb      	str	r3, [r1, #28]
}
 80039a2:	2000      	movs	r0, #0
 80039a4:	4770      	bx	lr

080039a6 <HAL_SD_GetCardState>:
{
 80039a6:	b510      	push	{r4, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80039b0:	a901      	add	r1, sp, #4
 80039b2:	f7ff fbd5 	bl	8003160 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80039b6:	b110      	cbz	r0, 80039be <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80039b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039ba:	4303      	orrs	r3, r0
 80039bc:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80039be:	9801      	ldr	r0, [sp, #4]
 80039c0:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80039c4:	b002      	add	sp, #8
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <SD_DMATxAbort>:
{
 80039c8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039ca:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 80039d2:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff ffe6 	bl	80039a6 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80039da:	2301      	movs	r3, #1
 80039dc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039e4:	3805      	subs	r0, #5
 80039e6:	2801      	cmp	r0, #1
 80039e8:	d905      	bls.n	80039f6 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80039ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039ec:	b953      	cbnz	r3, 8003a04 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f001 fc01 	bl	80051f6 <HAL_SD_AbortCallback>
}
 80039f4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	f000 fc4e 	bl	8004298 <SDMMC_CmdStopTransfer>
 80039fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039fe:	4303      	orrs	r3, r0
 8003a00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003a02:	e7f2      	b.n	80039ea <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff fdef 	bl	80035e8 <HAL_SD_ErrorCallback>
}
 8003a0a:	e7f3      	b.n	80039f4 <SD_DMATxAbort+0x2c>

08003a0c <SD_DMARxAbort>:
{
 8003a0c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a0e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7ff ffc4 	bl	80039a6 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a28:	3805      	subs	r0, #5
 8003a2a:	2801      	cmp	r0, #1
 8003a2c:	d905      	bls.n	8003a3a <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a30:	b953      	cbnz	r3, 8003a48 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8003a32:	4620      	mov	r0, r4
 8003a34:	f001 fbdf 	bl	80051f6 <HAL_SD_AbortCallback>
}
 8003a38:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	f000 fc2c 	bl	8004298 <SDMMC_CmdStopTransfer>
 8003a40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a42:	4303      	orrs	r3, r0
 8003a44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003a46:	e7f2      	b.n	8003a2e <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7ff fdcd 	bl	80035e8 <HAL_SD_ErrorCallback>
}
 8003a4e:	e7f3      	b.n	8003a38 <SD_DMARxAbort+0x2c>

08003a50 <HAL_SD_IRQHandler>:
{
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8003a54:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a56:	6803      	ldr	r3, [r0, #0]
 8003a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a5a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003a5e:	d002      	beq.n	8003a66 <HAL_SD_IRQHandler+0x16>
 8003a60:	f015 0f08 	tst.w	r5, #8
 8003a64:	d128      	bne.n	8003ab8 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a68:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003a6c:	d05a      	beq.n	8003b24 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a72:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003a78:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003a7c:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003a80:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003a8c:	f015 0f08 	tst.w	r5, #8
 8003a90:	d026      	beq.n	8003ae0 <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a92:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8003a96:	d112      	bne.n	8003abe <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003a9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003aaa:	f015 0f03 	tst.w	r5, #3
 8003aae:	d013      	beq.n	8003ad8 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f001 fbaa 	bl	800520a <HAL_SD_RxCpltCallback>
 8003ab6:	e001      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8003ab8:	f7ff fb12 	bl	80030e0 <SD_Read_IT>
}
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003abe:	6820      	ldr	r0, [r4, #0]
 8003ac0:	f000 fbea 	bl	8004298 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d0e6      	beq.n	8003a98 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8003aca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003acc:	4313      	orrs	r3, r2
 8003ace:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff fd89 	bl	80035e8 <HAL_SD_ErrorCallback>
 8003ad6:	e7df      	b.n	8003a98 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f001 fb91 	bl	8005200 <HAL_SD_TxCpltCallback>
 8003ade:	e7ed      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ae0:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003ae4:	d0ea      	beq.n	8003abc <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ae6:	f015 0f20 	tst.w	r5, #32
 8003aea:	d10e      	bne.n	8003b0a <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003aec:	f015 0f03 	tst.w	r5, #3
 8003af0:	d1e4      	bne.n	8003abc <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003af6:	f023 0308 	bic.w	r3, r3, #8
 8003afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003b02:	4620      	mov	r0, r4
 8003b04:	f001 fb7c 	bl	8005200 <HAL_SD_TxCpltCallback>
 8003b08:	e7d8      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b0a:	6820      	ldr	r0, [r4, #0]
 8003b0c:	f000 fbc4 	bl	8004298 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b10:	4603      	mov	r3, r0
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d0ea      	beq.n	8003aec <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8003b16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fd63 	bl	80035e8 <HAL_SD_ErrorCallback>
 8003b22:	e7e3      	b.n	8003aec <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b26:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003b2a:	d002      	beq.n	8003b32 <HAL_SD_IRQHandler+0xe2>
 8003b2c:	f015 0f08 	tst.w	r5, #8
 8003b30:	d155      	bne.n	8003bde <HAL_SD_IRQHandler+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003b32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b34:	f240 223a 	movw	r2, #570	@ 0x23a
 8003b38:	4211      	tst	r1, r2
 8003b3a:	d0bf      	beq.n	8003abc <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b3e:	f012 0f02 	tst.w	r2, #2
 8003b42:	d003      	beq.n	8003b4c <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b46:	f042 0202 	orr.w	r2, r2, #2
 8003b4a:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b4e:	f012 0f08 	tst.w	r2, #8
 8003b52:	d003      	beq.n	8003b5c <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b54:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b5e:	f012 0f20 	tst.w	r2, #32
 8003b62:	d003      	beq.n	8003b6c <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b66:	f042 0220 	orr.w	r2, r2, #32
 8003b6a:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6e:	f012 0f10 	tst.w	r2, #16
 8003b72:	d003      	beq.n	8003b7c <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b76:	f042 0210 	orr.w	r2, r2, #16
 8003b7a:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b7e:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8003b82:	d003      	beq.n	8003b8c <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b86:	f042 0208 	orr.w	r2, r2, #8
 8003b8a:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003b8c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003b90:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003b96:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003b9a:	f023 0302 	bic.w	r3, r3, #2
 8003b9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ba0:	6820      	ldr	r0, [r4, #0]
 8003ba2:	f000 fb79 	bl	8004298 <SDMMC_CmdStopTransfer>
 8003ba6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ba8:	4303      	orrs	r3, r0
 8003baa:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003bac:	f015 0f08 	tst.w	r5, #8
 8003bb0:	d119      	bne.n	8003be6 <HAL_SD_IRQHandler+0x196>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003bb2:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003bb6:	d081      	beq.n	8003abc <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003bb8:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_SD_IRQHandler+0x1a8>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003bbe:	f015 0f03 	tst.w	r5, #3
 8003bc2:	d026      	beq.n	8003c12 <HAL_SD_IRQHandler+0x1c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003bc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bc6:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <HAL_SD_IRQHandler+0x1d8>)
 8003bc8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003bca:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003bcc:	f7fd fac8 	bl	8001160 <HAL_DMA_Abort_IT>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f43f af73 	beq.w	8003abc <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 8003bd6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003bd8:	f7ff ff18 	bl	8003a0c <SD_DMARxAbort>
 8003bdc:	e76e      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7ff fa9a 	bl	8003118 <SD_Write_IT>
 8003be4:	e76a      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff fcf9 	bl	80035e8 <HAL_SD_ErrorCallback>
 8003bf6:	e761      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003bf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8003c2c <HAL_SD_IRQHandler+0x1dc>)
 8003bfc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003bfe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003c00:	f7fd faae 	bl	8001160 <HAL_DMA_Abort_IT>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f43f af59 	beq.w	8003abc <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8003c0a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003c0c:	f7ff fedc 	bl	80039c8 <SD_DMATxAbort>
 8003c10:	e754      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c16:	2201      	movs	r2, #1
 8003c18:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c1c:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f001 fae9 	bl	80051f6 <HAL_SD_AbortCallback>
}
 8003c24:	e74a      	b.n	8003abc <HAL_SD_IRQHandler+0x6c>
 8003c26:	bf00      	nop
 8003c28:	08003a0d 	.word	0x08003a0d
 8003c2c:	080039c9 	.word	0x080039c9

08003c30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c30:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	f102 030c 	add.w	r3, r2, #12
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	320c      	adds	r2, #12
 8003c40:	e842 3100 	strex	r1, r3, [r2]
 8003c44:	2900      	cmp	r1, #0
 8003c46:	d1f3      	bne.n	8003c30 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	f102 0314 	add.w	r3, r2, #20
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	3214      	adds	r2, #20
 8003c58:	e842 3100 	strex	r1, r3, [r2]
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	d1f3      	bne.n	8003c48 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d005      	beq.n	8003c72 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c66:	2320      	movs	r3, #32
 8003c68:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003c70:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	f102 030c 	add.w	r3, r2, #12
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	320c      	adds	r2, #12
 8003c82:	e842 3100 	strex	r1, r3, [r2]
 8003c86:	2900      	cmp	r1, #0
 8003c88:	d1f3      	bne.n	8003c72 <UART_EndRxTransfer+0x42>
 8003c8a:	e7ec      	b.n	8003c66 <UART_EndRxTransfer+0x36>

08003c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c90:	6802      	ldr	r2, [r0, #0]
 8003c92:	6913      	ldr	r3, [r2, #16]
 8003c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c98:	68c1      	ldr	r1, [r0, #12]
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c9e:	6883      	ldr	r3, [r0, #8]
 8003ca0:	6902      	ldr	r2, [r0, #16]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	6943      	ldr	r3, [r0, #20]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	69c3      	ldr	r3, [r0, #28]
 8003caa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003cac:	6801      	ldr	r1, [r0, #0]
 8003cae:	68cb      	ldr	r3, [r1, #12]
 8003cb0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003cb4:	f023 030c 	bic.w	r3, r3, #12
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbc:	6802      	ldr	r2, [r0, #0]
 8003cbe:	6953      	ldr	r3, [r2, #20]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	6981      	ldr	r1, [r0, #24]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	4a31      	ldr	r2, [pc, #196]	@ (8003d94 <UART_SetConfig+0x108>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d006      	beq.n	8003ce0 <UART_SetConfig+0x54>
 8003cd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d002      	beq.n	8003ce0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7ff f8a1 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8003cde:	e001      	b.n	8003ce4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce0:	f7ff f8ae 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce4:	69e3      	ldr	r3, [r4, #28]
 8003ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cea:	d029      	beq.n	8003d40 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cec:	2100      	movs	r1, #0
 8003cee:	1803      	adds	r3, r0, r0
 8003cf0:	4149      	adcs	r1, r1
 8003cf2:	181b      	adds	r3, r3, r0
 8003cf4:	f141 0100 	adc.w	r1, r1, #0
 8003cf8:	00c9      	lsls	r1, r1, #3
 8003cfa:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	1818      	adds	r0, r3, r0
 8003d02:	6863      	ldr	r3, [r4, #4]
 8003d04:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003d08:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003d0c:	f141 0100 	adc.w	r1, r1, #0
 8003d10:	f7fc faae 	bl	8000270 <__aeabi_uldivmod>
 8003d14:	4a20      	ldr	r2, [pc, #128]	@ (8003d98 <UART_SetConfig+0x10c>)
 8003d16:	fba2 3100 	umull	r3, r1, r2, r0
 8003d1a:	0949      	lsrs	r1, r1, #5
 8003d1c:	2364      	movs	r3, #100	@ 0x64
 8003d1e:	fb03 0311 	mls	r3, r3, r1, r0
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	3332      	adds	r3, #50	@ 0x32
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d30:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	6821      	ldr	r1, [r4, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }
}
 8003d3e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d40:	2300      	movs	r3, #0
 8003d42:	1802      	adds	r2, r0, r0
 8003d44:	eb43 0103 	adc.w	r1, r3, r3
 8003d48:	1812      	adds	r2, r2, r0
 8003d4a:	f141 0100 	adc.w	r1, r1, #0
 8003d4e:	00c9      	lsls	r1, r1, #3
 8003d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d54:	00d2      	lsls	r2, r2, #3
 8003d56:	1810      	adds	r0, r2, r0
 8003d58:	f141 0100 	adc.w	r1, r1, #0
 8003d5c:	6862      	ldr	r2, [r4, #4]
 8003d5e:	1892      	adds	r2, r2, r2
 8003d60:	415b      	adcs	r3, r3
 8003d62:	f7fc fa85 	bl	8000270 <__aeabi_uldivmod>
 8003d66:	4a0c      	ldr	r2, [pc, #48]	@ (8003d98 <UART_SetConfig+0x10c>)
 8003d68:	fba2 3100 	umull	r3, r1, r2, r0
 8003d6c:	0949      	lsrs	r1, r1, #5
 8003d6e:	2364      	movs	r3, #100	@ 0x64
 8003d70:	fb03 0311 	mls	r3, r3, r1, r0
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	3332      	adds	r3, #50	@ 0x32
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	005a      	lsls	r2, r3, #1
 8003d80:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003d84:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	6821      	ldr	r1, [r4, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
 8003d92:	e7d4      	b.n	8003d3e <UART_SetConfig+0xb2>
 8003d94:	40011000 	.word	0x40011000
 8003d98:	51eb851f 	.word	0x51eb851f

08003d9c <UART_WaitOnFlagUntilTimeout>:
{
 8003d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003da0:	b083      	sub	sp, #12
 8003da2:	4605      	mov	r5, r0
 8003da4:	460e      	mov	r6, r1
 8003da6:	4617      	mov	r7, r2
 8003da8:	4699      	mov	r9, r3
 8003daa:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	681c      	ldr	r4, [r3, #0]
 8003db2:	ea36 0404 	bics.w	r4, r6, r4
 8003db6:	bf0c      	ite	eq
 8003db8:	2401      	moveq	r4, #1
 8003dba:	2400      	movne	r4, #0
 8003dbc:	42bc      	cmp	r4, r7
 8003dbe:	d128      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003dc0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003dc4:	d0f3      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7fd f865 	bl	8000e94 <HAL_GetTick>
 8003dca:	eba0 0009 	sub.w	r0, r0, r9
 8003dce:	4540      	cmp	r0, r8
 8003dd0:	d823      	bhi.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x7e>
 8003dd2:	f1b8 0f00 	cmp.w	r8, #0
 8003dd6:	d022      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	f012 0f04 	tst.w	r2, #4
 8003de0:	d0e5      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
 8003de2:	2e80      	cmp	r6, #128	@ 0x80
 8003de4:	d0e3      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
 8003de6:	2e40      	cmp	r6, #64	@ 0x40
 8003de8:	d0e1      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	f012 0f08 	tst.w	r2, #8
 8003df0:	d0dd      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003df2:	2400      	movs	r4, #0
 8003df4:	9401      	str	r4, [sp, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	9201      	str	r2, [sp, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003e00:	4628      	mov	r0, r5
 8003e02:	f7ff ff15 	bl	8003c30 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e06:	2308      	movs	r3, #8
 8003e08:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003e0a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e000      	b.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8003e12:	2000      	movs	r0, #0
}
 8003e14:	b003      	add	sp, #12
 8003e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	e7fa      	b.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x78>
 8003e1e:	2003      	movs	r0, #3
 8003e20:	e7f8      	b.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x78>

08003e22 <HAL_UART_Init>:
  if (huart == NULL)
 8003e22:	b360      	cbz	r0, 8003e7e <HAL_UART_Init+0x5c>
{
 8003e24:	b510      	push	{r4, lr}
 8003e26:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003e28:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003e2c:	b313      	cbz	r3, 8003e74 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003e2e:	2324      	movs	r3, #36	@ 0x24
 8003e30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	68d3      	ldr	r3, [r2, #12]
 8003e38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e3c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7ff ff24 	bl	8003c8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	6913      	ldr	r3, [r2, #16]
 8003e48:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003e4c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	6953      	ldr	r3, [r2, #20]
 8003e52:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003e56:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003e58:	6822      	ldr	r2, [r4, #0]
 8003e5a:	68d3      	ldr	r3, [r2, #12]
 8003e5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e60:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	2000      	movs	r0, #0
 8003e64:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e66:	2320      	movs	r3, #32
 8003e68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e70:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003e72:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003e74:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003e78:	f7fc feee 	bl	8000c58 <HAL_UART_MspInit>
 8003e7c:	e7d7      	b.n	8003e2e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
}
 8003e80:	4770      	bx	lr

08003e82 <HAL_UART_Transmit>:
{
 8003e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d156      	bne.n	8003f42 <HAL_UART_Transmit+0xc0>
 8003e94:	4604      	mov	r4, r0
 8003e96:	460d      	mov	r5, r1
 8003e98:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	d055      	beq.n	8003f4a <HAL_UART_Transmit+0xc8>
 8003e9e:	b90a      	cbnz	r2, 8003ea4 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	e04f      	b.n	8003f44 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea8:	2321      	movs	r3, #33	@ 0x21
 8003eaa:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003eae:	f7fc fff1 	bl	8000e94 <HAL_GetTick>
 8003eb2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003eb4:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eb8:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebc:	68a3      	ldr	r3, [r4, #8]
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec2:	d002      	beq.n	8003eca <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003ec4:	f04f 0800 	mov.w	r8, #0
 8003ec8:	e014      	b.n	8003ef4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	b32b      	cbz	r3, 8003f1a <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8003ece:	f04f 0800 	mov.w	r8, #0
 8003ed2:	e00f      	b.n	8003ef4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003eda:	2003      	movs	r0, #3
 8003edc:	e032      	b.n	8003f44 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ede:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003eea:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003eec:	b292      	uxth	r2, r2
 8003eee:	3a01      	subs	r2, #1
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ef4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	b193      	cbz	r3, 8003f20 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	9600      	str	r6, [sp, #0]
 8003efc:	463b      	mov	r3, r7
 8003efe:	2200      	movs	r2, #0
 8003f00:	2180      	movs	r1, #128	@ 0x80
 8003f02:	4620      	mov	r0, r4
 8003f04:	f7ff ff4a 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1e3      	bne.n	8003ed4 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003f0c:	2d00      	cmp	r5, #0
 8003f0e:	d0e6      	beq.n	8003ede <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f10:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f18:	e7e7      	b.n	8003eea <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003f1a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	e7e9      	b.n	8003ef4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f20:	9600      	str	r6, [sp, #0]
 8003f22:	463b      	mov	r3, r7
 8003f24:	2200      	movs	r2, #0
 8003f26:	2140      	movs	r1, #64	@ 0x40
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ff37 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003f2e:	b918      	cbnz	r0, 8003f38 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003f30:	2320      	movs	r3, #32
 8003f32:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003f36:	e005      	b.n	8003f44 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8003f3e:	2003      	movs	r0, #3
 8003f40:	e000      	b.n	8003f44 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8003f42:	2002      	movs	r0, #2
}
 8003f44:	b002      	add	sp, #8
 8003f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	e7fa      	b.n	8003f44 <HAL_UART_Transmit+0xc2>
	...

08003f50 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <SDMMC_GetCmdError+0x30>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0b      	ldr	r2, [pc, #44]	@ (8003f84 <SDMMC_GetCmdError+0x34>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0a5b      	lsrs	r3, r3, #9
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003f64:	461a      	mov	r2, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b13a      	cbz	r2, 8003f7a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003f6a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003f6c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003f70:	d0f8      	beq.n	8003f64 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f72:	23c5      	movs	r3, #197	@ 0xc5
 8003f74:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8003f76:	2000      	movs	r0, #0
 8003f78:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003f7a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003f7e:	4770      	bx	lr
 8003f80:	20000004 	.word	0x20000004
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <SDIO_Init>:
{
 8003f88:	b084      	sub	sp, #16
 8003f8a:	f10d 0c04 	add.w	ip, sp, #4
 8003f8e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8003f96:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8003f98:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8003f9a:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8003f9c:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8003f9e:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8003fa0:	4313      	orrs	r3, r2
             Init.ClockDiv
 8003fa2:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8003fa4:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003fa6:	6842      	ldr	r2, [r0, #4]
 8003fa8:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8003fac:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	6043      	str	r3, [r0, #4]
}
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	b004      	add	sp, #16
 8003fb8:	4770      	bx	lr

08003fba <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8003fba:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8003fbe:	4770      	bx	lr

08003fc0 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8003fc0:	680b      	ldr	r3, [r1, #0]
 8003fc2:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	4770      	bx	lr

08003fca <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	6003      	str	r3, [r0, #0]
}
 8003fce:	2000      	movs	r0, #0
 8003fd0:	4770      	bx	lr

08003fd2 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003fd2:	6800      	ldr	r0, [r0, #0]
}
 8003fd4:	f000 0003 	and.w	r0, r0, #3
 8003fd8:	4770      	bx	lr

08003fda <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003fda:	680b      	ldr	r3, [r1, #0]
 8003fdc:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003fde:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8003fe0:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003fe2:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8003fe4:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8003fe6:	4313      	orrs	r3, r2
                       Command->CPSM);
 8003fe8:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8003fea:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003fec:	68c2      	ldr	r2, [r0, #12]
 8003fee:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 8003ff2:	f022 020f 	bic.w	r2, r2, #15
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60c3      	str	r3, [r0, #12]
}
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	4770      	bx	lr

08003ffe <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8003ffe:	6900      	ldr	r0, [r0, #16]
}
 8004000:	b2c0      	uxtb	r0, r0
 8004002:	4770      	bx	lr

08004004 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004004:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004006:	5840      	ldr	r0, [r0, r1]
}  
 8004008:	4770      	bx	lr

0800400a <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 800400a:	680b      	ldr	r3, [r1, #0]
 800400c:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 800400e:	684b      	ldr	r3, [r1, #4]
 8004010:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004012:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8004014:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004016:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004018:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800401a:	4313      	orrs	r3, r2
                       Data->DPSM);
 800401c:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800401e:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004020:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8004022:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8004026:	4313      	orrs	r3, r2
 8004028:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800402a:	2000      	movs	r0, #0
 800402c:	4770      	bx	lr

0800402e <SDMMC_CmdGoIdleState>:
{
 800402e:	b510      	push	{r4, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004038:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800403a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800403c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800403e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004042:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004044:	a901      	add	r1, sp, #4
 8004046:	f7ff ffc8 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 800404a:	4620      	mov	r0, r4
 800404c:	f7ff ff80 	bl	8003f50 <SDMMC_GetCmdError>
}
 8004050:	b006      	add	sp, #24
 8004052:	bd10      	pop	{r4, pc}

08004054 <SDMMC_GetCmdResp1>:
{
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800405a:	4b50      	ldr	r3, [pc, #320]	@ (800419c <SDMMC_GetCmdResp1+0x148>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4950      	ldr	r1, [pc, #320]	@ (80041a0 <SDMMC_GetCmdResp1+0x14c>)
 8004060:	fba1 1303 	umull	r1, r3, r1, r3
 8004064:	0a5b      	lsrs	r3, r3, #9
 8004066:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800406a:	4613      	mov	r3, r2
 800406c:	3a01      	subs	r2, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d05d      	beq.n	800412e <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8004072:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004074:	f013 0f45 	tst.w	r3, #69	@ 0x45
 8004078:	d0f7      	beq.n	800406a <SDMMC_GetCmdResp1+0x16>
 800407a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800407e:	d1f4      	bne.n	800406a <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004082:	f013 0f04 	tst.w	r3, #4
 8004086:	d106      	bne.n	8004096 <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800408a:	f013 0f01 	tst.w	r3, #1
 800408e:	d005      	beq.n	800409c <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004090:	2001      	movs	r0, #1
 8004092:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004094:	e04d      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004096:	2004      	movs	r0, #4
 8004098:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800409a:	e04a      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800409c:	23c5      	movs	r3, #197	@ 0xc5
 800409e:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff ffac 	bl	8003ffe <SDIO_GetCommandResponse>
 80040a6:	42a8      	cmp	r0, r5
 80040a8:	d001      	beq.n	80040ae <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040aa:	2001      	movs	r0, #1
 80040ac:	e041      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80040ae:	2100      	movs	r1, #0
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7ff ffa7 	bl	8004004 <SDIO_GetResponse>
 80040b6:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80040b8:	483a      	ldr	r0, [pc, #232]	@ (80041a4 <SDMMC_GetCmdResp1+0x150>)
 80040ba:	4018      	ands	r0, r3
 80040bc:	b3c8      	cbz	r0, 8004132 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80040be:	2b00      	cmp	r3, #0
 80040c0:	db38      	blt.n	8004134 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80040c2:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80040c6:	d138      	bne.n	800413a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80040c8:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80040cc:	d137      	bne.n	800413e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80040ce:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80040d2:	d136      	bne.n	8004142 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80040d4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80040d8:	d136      	bne.n	8004148 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80040da:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80040de:	d136      	bne.n	800414e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80040e0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80040e4:	d136      	bne.n	8004154 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80040e6:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80040ea:	d136      	bne.n	800415a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80040ec:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80040f0:	d136      	bne.n	8004160 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80040f2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80040f6:	d136      	bne.n	8004166 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80040f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80040fc:	d136      	bne.n	800416c <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80040fe:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004102:	d136      	bne.n	8004172 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004104:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004108:	d136      	bne.n	8004178 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800410a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800410e:	d136      	bne.n	800417e <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004110:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004114:	d136      	bne.n	8004184 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004116:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800411a:	d136      	bne.n	800418a <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800411c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004120:	d136      	bne.n	8004190 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004122:	f013 0f08 	tst.w	r3, #8
 8004126:	d036      	beq.n	8004196 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004128:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800412c:	e001      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800412e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004132:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004134:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8004138:	e7fb      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800413a:	2040      	movs	r0, #64	@ 0x40
 800413c:	e7f9      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800413e:	2080      	movs	r0, #128	@ 0x80
 8004140:	e7f7      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004142:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004146:	e7f4      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004148:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800414c:	e7f1      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800414e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004152:	e7ee      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004154:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004158:	e7eb      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800415a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800415e:	e7e8      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004160:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004164:	e7e5      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004166:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800416a:	e7e2      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 800416c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004170:	e7df      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004172:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004176:	e7dc      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004178:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800417c:	e7d9      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800417e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004182:	e7d6      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004184:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004188:	e7d3      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800418a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800418e:	e7d0      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8004190:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004194:	e7cd      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004196:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800419a:	e7ca      	b.n	8004132 <SDMMC_GetCmdResp1+0xde>
 800419c:	20000004 	.word	0x20000004
 80041a0:	10624dd3 	.word	0x10624dd3
 80041a4:	fdffe008 	.word	0xfdffe008

080041a8 <SDMMC_CmdBlockLength>:
{
 80041a8:	b530      	push	{r4, r5, lr}
 80041aa:	b087      	sub	sp, #28
 80041ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80041ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80041b0:	2510      	movs	r5, #16
 80041b2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041b4:	2340      	movs	r3, #64	@ 0x40
 80041b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b8:	2300      	movs	r3, #0
 80041ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041c0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041c2:	a901      	add	r1, sp, #4
 80041c4:	f7ff ff09 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80041c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041cc:	4629      	mov	r1, r5
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7ff ff40 	bl	8004054 <SDMMC_GetCmdResp1>
}
 80041d4:	b007      	add	sp, #28
 80041d6:	bd30      	pop	{r4, r5, pc}

080041d8 <SDMMC_CmdReadSingleBlock>:
{
 80041d8:	b530      	push	{r4, r5, lr}
 80041da:	b087      	sub	sp, #28
 80041dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041de:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041e0:	2511      	movs	r5, #17
 80041e2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041e4:	2340      	movs	r3, #64	@ 0x40
 80041e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041e8:	2300      	movs	r3, #0
 80041ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041f0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041f2:	a901      	add	r1, sp, #4
 80041f4:	f7ff fef1 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fc:	4629      	mov	r1, r5
 80041fe:	4620      	mov	r0, r4
 8004200:	f7ff ff28 	bl	8004054 <SDMMC_GetCmdResp1>
}
 8004204:	b007      	add	sp, #28
 8004206:	bd30      	pop	{r4, r5, pc}

08004208 <SDMMC_CmdReadMultiBlock>:
{
 8004208:	b530      	push	{r4, r5, lr}
 800420a:	b087      	sub	sp, #28
 800420c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800420e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004210:	2512      	movs	r5, #18
 8004212:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004214:	2340      	movs	r3, #64	@ 0x40
 8004216:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004218:	2300      	movs	r3, #0
 800421a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800421c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004220:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004222:	a901      	add	r1, sp, #4
 8004224:	f7ff fed9 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422c:	4629      	mov	r1, r5
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff ff10 	bl	8004054 <SDMMC_GetCmdResp1>
}
 8004234:	b007      	add	sp, #28
 8004236:	bd30      	pop	{r4, r5, pc}

08004238 <SDMMC_CmdWriteSingleBlock>:
{
 8004238:	b530      	push	{r4, r5, lr}
 800423a:	b087      	sub	sp, #28
 800423c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800423e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004240:	2518      	movs	r5, #24
 8004242:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004244:	2340      	movs	r3, #64	@ 0x40
 8004246:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004248:	2300      	movs	r3, #0
 800424a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800424c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004250:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004252:	a901      	add	r1, sp, #4
 8004254:	f7ff fec1 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425c:	4629      	mov	r1, r5
 800425e:	4620      	mov	r0, r4
 8004260:	f7ff fef8 	bl	8004054 <SDMMC_GetCmdResp1>
}
 8004264:	b007      	add	sp, #28
 8004266:	bd30      	pop	{r4, r5, pc}

08004268 <SDMMC_CmdWriteMultiBlock>:
{
 8004268:	b530      	push	{r4, r5, lr}
 800426a:	b087      	sub	sp, #28
 800426c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800426e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004270:	2519      	movs	r5, #25
 8004272:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004274:	2340      	movs	r3, #64	@ 0x40
 8004276:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004278:	2300      	movs	r3, #0
 800427a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800427c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004280:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004282:	a901      	add	r1, sp, #4
 8004284:	f7ff fea9 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428c:	4629      	mov	r1, r5
 800428e:	4620      	mov	r0, r4
 8004290:	f7ff fee0 	bl	8004054 <SDMMC_GetCmdResp1>
}
 8004294:	b007      	add	sp, #28
 8004296:	bd30      	pop	{r4, r5, pc}

08004298 <SDMMC_CmdStopTransfer>:
{
 8004298:	b530      	push	{r4, r5, lr}
 800429a:	b087      	sub	sp, #28
 800429c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042a2:	250c      	movs	r5, #12
 80042a4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042b0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042b2:	a901      	add	r1, sp, #4
 80042b4:	f7ff fe91 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042b8:	4a03      	ldr	r2, [pc, #12]	@ (80042c8 <SDMMC_CmdStopTransfer+0x30>)
 80042ba:	4629      	mov	r1, r5
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff fec9 	bl	8004054 <SDMMC_GetCmdResp1>
}
 80042c2:	b007      	add	sp, #28
 80042c4:	bd30      	pop	{r4, r5, pc}
 80042c6:	bf00      	nop
 80042c8:	05f5e100 	.word	0x05f5e100

080042cc <SDMMC_CmdSelDesel>:
{
 80042cc:	b530      	push	{r4, r5, lr}
 80042ce:	b087      	sub	sp, #28
 80042d0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80042d2:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80042d4:	2507      	movs	r5, #7
 80042d6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042d8:	2340      	movs	r3, #64	@ 0x40
 80042da:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042dc:	2300      	movs	r3, #0
 80042de:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042e4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042e6:	a901      	add	r1, sp, #4
 80042e8:	f7ff fe77 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80042ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f0:	4629      	mov	r1, r5
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff feae 	bl	8004054 <SDMMC_GetCmdResp1>
}
 80042f8:	b007      	add	sp, #28
 80042fa:	bd30      	pop	{r4, r5, pc}

080042fc <SDMMC_CmdAppCommand>:
{
 80042fc:	b530      	push	{r4, r5, lr}
 80042fe:	b087      	sub	sp, #28
 8004300:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004302:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004304:	2537      	movs	r5, #55	@ 0x37
 8004306:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004308:	2340      	movs	r3, #64	@ 0x40
 800430a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800430c:	2300      	movs	r3, #0
 800430e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004314:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004316:	a901      	add	r1, sp, #4
 8004318:	f7ff fe5f 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800431c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004320:	4629      	mov	r1, r5
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fe96 	bl	8004054 <SDMMC_GetCmdResp1>
}
 8004328:	b007      	add	sp, #28
 800432a:	bd30      	pop	{r4, r5, pc}

0800432c <SDMMC_CmdSendStatus>:
{
 800432c:	b530      	push	{r4, r5, lr}
 800432e:	b087      	sub	sp, #28
 8004330:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004332:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004334:	250d      	movs	r5, #13
 8004336:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004338:	2340      	movs	r3, #64	@ 0x40
 800433a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800433c:	2300      	movs	r3, #0
 800433e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004344:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004346:	a901      	add	r1, sp, #4
 8004348:	f7ff fe47 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800434c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004350:	4629      	mov	r1, r5
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff fe7e 	bl	8004054 <SDMMC_GetCmdResp1>
}
 8004358:	b007      	add	sp, #28
 800435a:	bd30      	pop	{r4, r5, pc}

0800435c <SDMMC_GetCmdResp2>:
{
 800435c:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800435e:	4b14      	ldr	r3, [pc, #80]	@ (80043b0 <SDMMC_GetCmdResp2+0x54>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <SDMMC_GetCmdResp2+0x58>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	0a5b      	lsrs	r3, r3, #9
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004372:	461a      	mov	r2, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b1ba      	cbz	r2, 80043a8 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8004378:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800437a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800437e:	d0f8      	beq.n	8004372 <SDMMC_GetCmdResp2+0x16>
 8004380:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004384:	d1f5      	bne.n	8004372 <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004386:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004388:	f013 0f04 	tst.w	r3, #4
 800438c:	d106      	bne.n	800439c <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800438e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004390:	f010 0001 	ands.w	r0, r0, #1
 8004394:	d105      	bne.n	80043a2 <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004396:	23c5      	movs	r3, #197	@ 0xc5
 8004398:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800439a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800439c:	2004      	movs	r0, #4
 800439e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043a0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043a2:	2001      	movs	r0, #1
 80043a4:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043a6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80043a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000004 	.word	0x20000004
 80043b4:	10624dd3 	.word	0x10624dd3

080043b8 <SDMMC_CmdSendCID>:
{
 80043b8:	b510      	push	{r4, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80043c2:	2202      	movs	r2, #2
 80043c4:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80043c6:	22c0      	movs	r2, #192	@ 0xc0
 80043c8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043d0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043d2:	a901      	add	r1, sp, #4
 80043d4:	f7ff fe01 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80043d8:	4620      	mov	r0, r4
 80043da:	f7ff ffbf 	bl	800435c <SDMMC_GetCmdResp2>
}
 80043de:	b006      	add	sp, #24
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <SDMMC_CmdSendCSD>:
{
 80043e2:	b510      	push	{r4, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80043e8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80043ea:	2309      	movs	r3, #9
 80043ec:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80043ee:	23c0      	movs	r3, #192	@ 0xc0
 80043f0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043f2:	2300      	movs	r3, #0
 80043f4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043fa:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043fc:	a901      	add	r1, sp, #4
 80043fe:	f7ff fdec 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff ffaa 	bl	800435c <SDMMC_GetCmdResp2>
}
 8004408:	b006      	add	sp, #24
 800440a:	bd10      	pop	{r4, pc}

0800440c <SDMMC_GetCmdResp3>:
{
 800440c:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <SDMMC_GetCmdResp3+0x44>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a10      	ldr	r2, [pc, #64]	@ (8004454 <SDMMC_GetCmdResp3+0x48>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004422:	461a      	mov	r2, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b182      	cbz	r2, 800444a <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8004428:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800442a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800442e:	d0f8      	beq.n	8004422 <SDMMC_GetCmdResp3+0x16>
 8004430:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004434:	d1f5      	bne.n	8004422 <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004436:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004438:	f010 0004 	ands.w	r0, r0, #4
 800443c:	d102      	bne.n	8004444 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800443e:	23c5      	movs	r3, #197	@ 0xc5
 8004440:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004442:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004444:	2004      	movs	r0, #4
 8004446:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004448:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800444a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800444e:	4770      	bx	lr
 8004450:	20000004 	.word	0x20000004
 8004454:	10624dd3 	.word	0x10624dd3

08004458 <SDMMC_CmdAppOperCommand>:
{
 8004458:	b510      	push	{r4, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800445e:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8004462:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004466:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004468:	2329      	movs	r3, #41	@ 0x29
 800446a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800446c:	2340      	movs	r3, #64	@ 0x40
 800446e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004470:	2300      	movs	r3, #0
 8004472:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004478:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800447a:	a901      	add	r1, sp, #4
 800447c:	f7ff fdad 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004480:	4620      	mov	r0, r4
 8004482:	f7ff ffc3 	bl	800440c <SDMMC_GetCmdResp3>
}
 8004486:	b006      	add	sp, #24
 8004488:	bd10      	pop	{r4, pc}
	...

0800448c <SDMMC_GetCmdResp6>:
{
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4605      	mov	r5, r0
 8004490:	460e      	mov	r6, r1
 8004492:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004494:	4b23      	ldr	r3, [pc, #140]	@ (8004524 <SDMMC_GetCmdResp6+0x98>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a23      	ldr	r2, [pc, #140]	@ (8004528 <SDMMC_GetCmdResp6+0x9c>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0a5b      	lsrs	r3, r3, #9
 80044a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80044a8:	461a      	mov	r2, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b38a      	cbz	r2, 8004512 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 80044ae:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044b0:	f014 0f45 	tst.w	r4, #69	@ 0x45
 80044b4:	d0f8      	beq.n	80044a8 <SDMMC_GetCmdResp6+0x1c>
 80044b6:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80044ba:	d1f5      	bne.n	80044a8 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044bc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80044be:	f013 0f04 	tst.w	r3, #4
 80044c2:	d106      	bne.n	80044d2 <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80044c4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80044c6:	f013 0f01 	tst.w	r3, #1
 80044ca:	d005      	beq.n	80044d8 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044cc:	2001      	movs	r0, #1
 80044ce:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044d0:	e021      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044d2:	2004      	movs	r0, #4
 80044d4:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044d6:	e01e      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80044d8:	4628      	mov	r0, r5
 80044da:	f7ff fd90 	bl	8003ffe <SDIO_GetCommandResponse>
 80044de:	42b0      	cmp	r0, r6
 80044e0:	d001      	beq.n	80044e6 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044e2:	2001      	movs	r0, #1
 80044e4:	e017      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044e6:	23c5      	movs	r3, #197	@ 0xc5
 80044e8:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80044ea:	2100      	movs	r1, #0
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff fd89 	bl	8004004 <SDIO_GetResponse>
 80044f2:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80044f4:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 80044f8:	d008      	beq.n	800450c <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80044fa:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80044fe:	d10b      	bne.n	8004518 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004500:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004504:	d00b      	beq.n	800451e <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004506:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800450a:	e004      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004510:	e001      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8004512:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004518:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800451c:	e7fb      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800451e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004522:	e7f8      	b.n	8004516 <SDMMC_GetCmdResp6+0x8a>
 8004524:	20000004 	.word	0x20000004
 8004528:	10624dd3 	.word	0x10624dd3

0800452c <SDMMC_CmdSetRelAdd>:
{
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	4604      	mov	r4, r0
 8004532:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004538:	2603      	movs	r6, #3
 800453a:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800453c:	2240      	movs	r2, #64	@ 0x40
 800453e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004540:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004546:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004548:	a901      	add	r1, sp, #4
 800454a:	f7ff fd46 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800454e:	462a      	mov	r2, r5
 8004550:	4631      	mov	r1, r6
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff ff9a 	bl	800448c <SDMMC_GetCmdResp6>
}
 8004558:	b006      	add	sp, #24
 800455a:	bd70      	pop	{r4, r5, r6, pc}

0800455c <SDMMC_GetCmdResp7>:
{
 800455c:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800455e:	4b16      	ldr	r3, [pc, #88]	@ (80045b8 <SDMMC_GetCmdResp7+0x5c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a16      	ldr	r2, [pc, #88]	@ (80045bc <SDMMC_GetCmdResp7+0x60>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004572:	461a      	mov	r2, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b1e2      	cbz	r2, 80045b2 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004578:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800457a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800457e:	d0f8      	beq.n	8004572 <SDMMC_GetCmdResp7+0x16>
 8004580:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004584:	d1f5      	bne.n	8004572 <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004586:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004588:	f013 0f04 	tst.w	r3, #4
 800458c:	d10b      	bne.n	80045a6 <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800458e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004590:	f013 0301 	ands.w	r3, r3, #1
 8004594:	d10a      	bne.n	80045ac <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004596:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004598:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800459c:	d00b      	beq.n	80045b6 <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800459e:	2240      	movs	r2, #64	@ 0x40
 80045a0:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80045a2:	4618      	mov	r0, r3
 80045a4:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045a6:	2004      	movs	r0, #4
 80045a8:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045aa:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045ac:	2001      	movs	r0, #1
 80045ae:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045b0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80045b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80045b6:	4770      	bx	lr
 80045b8:	20000004 	.word	0x20000004
 80045bc:	10624dd3 	.word	0x10624dd3

080045c0 <SDMMC_CmdOperCond>:
{
 80045c0:	b510      	push	{r4, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80045c6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80045ca:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80045cc:	2308      	movs	r3, #8
 80045ce:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045d0:	2340      	movs	r3, #64	@ 0x40
 80045d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045d4:	2300      	movs	r3, #0
 80045d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045dc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045de:	a901      	add	r1, sp, #4
 80045e0:	f7ff fcfb 	bl	8003fda <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff ffb9 	bl	800455c <SDMMC_GetCmdResp7>
}
 80045ea:	b006      	add	sp, #24
 80045ec:	bd10      	pop	{r4, pc}

080045ee <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045ee:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f4:	9b01      	ldr	r3, [sp, #4]
 80045f6:	3301      	adds	r3, #1
 80045f8:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004600:	d815      	bhi.n	800462e <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004602:	6903      	ldr	r3, [r0, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	daf5      	bge.n	80045f4 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800460c:	6903      	ldr	r3, [r0, #16]
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8004614:	9b01      	ldr	r3, [sp, #4]
 8004616:	3301      	adds	r3, #1
 8004618:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800461a:	9b01      	ldr	r3, [sp, #4]
 800461c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004620:	d808      	bhi.n	8004634 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004622:	6903      	ldr	r3, [r0, #16]
 8004624:	f013 0f01 	tst.w	r3, #1
 8004628:	d1f4      	bne.n	8004614 <USB_CoreReset+0x26>

  return HAL_OK;
 800462a:	2000      	movs	r0, #0
 800462c:	e000      	b.n	8004630 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800462e:	2003      	movs	r0, #3
}
 8004630:	b002      	add	sp, #8
 8004632:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004634:	2003      	movs	r0, #3
 8004636:	e7fb      	b.n	8004630 <USB_CoreReset+0x42>

08004638 <USB_CoreInit>:
{
 8004638:	b084      	sub	sp, #16
 800463a:	b510      	push	{r4, lr}
 800463c:	4604      	mov	r4, r0
 800463e:	a803      	add	r0, sp, #12
 8004640:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004644:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d121      	bne.n	8004690 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800464e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004652:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004654:	68e3      	ldr	r3, [r4, #12]
 8004656:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800465a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465e:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004660:	68e3      	ldr	r3, [r4, #12]
 8004662:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004666:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8004668:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d00a      	beq.n	8004686 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff ffbc 	bl	80045ee <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004676:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d01c      	beq.n	80046b8 <USB_CoreInit+0x80>
}
 800467e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004682:	b004      	add	sp, #16
 8004684:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004686:	68e3      	ldr	r3, [r4, #12]
 8004688:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800468c:	60e3      	str	r3, [r4, #12]
 800468e:	e7ef      	b.n	8004670 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004690:	68e3      	ldr	r3, [r4, #12]
 8004692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004696:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff ffa8 	bl	80045ee <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800469e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80046a2:	b923      	cbnz	r3, 80046ae <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046aa:	63a3      	str	r3, [r4, #56]	@ 0x38
 80046ac:	e7e3      	b.n	8004676 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80046b6:	e7de      	b.n	8004676 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046b8:	68a3      	ldr	r3, [r4, #8]
 80046ba:	f043 0306 	orr.w	r3, r3, #6
 80046be:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046c0:	68a3      	ldr	r3, [r4, #8]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	60a3      	str	r3, [r4, #8]
 80046c8:	e7d9      	b.n	800467e <USB_CoreInit+0x46>
	...

080046cc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80046cc:	2a02      	cmp	r2, #2
 80046ce:	d00a      	beq.n	80046e6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046d0:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046d2:	68c3      	ldr	r3, [r0, #12]
 80046d4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80046d8:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046da:	68c3      	ldr	r3, [r0, #12]
 80046dc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80046e0:	60c3      	str	r3, [r0, #12]
}
 80046e2:	2000      	movs	r0, #0
 80046e4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046e6:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <USB_SetTurnaroundTime+0xa8>)
 80046e8:	440b      	add	r3, r1
 80046ea:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <USB_SetTurnaroundTime+0xac>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d92f      	bls.n	8004750 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046f0:	4b22      	ldr	r3, [pc, #136]	@ (800477c <USB_SetTurnaroundTime+0xb0>)
 80046f2:	440b      	add	r3, r1
 80046f4:	4a22      	ldr	r2, [pc, #136]	@ (8004780 <USB_SetTurnaroundTime+0xb4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d92c      	bls.n	8004754 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046fa:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80046fe:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8004702:	4a20      	ldr	r2, [pc, #128]	@ (8004784 <USB_SetTurnaroundTime+0xb8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d927      	bls.n	8004758 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004708:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800470c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <USB_SetTurnaroundTime+0xbc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d322      	bcc.n	800475c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004716:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <USB_SetTurnaroundTime+0xc0>)
 8004718:	440b      	add	r3, r1
 800471a:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <USB_SetTurnaroundTime+0xc4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d91f      	bls.n	8004760 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004720:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <USB_SetTurnaroundTime+0xc8>)
 8004722:	440b      	add	r3, r1
 8004724:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <USB_SetTurnaroundTime+0xcc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d31c      	bcc.n	8004764 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800472a:	4b1c      	ldr	r3, [pc, #112]	@ (800479c <USB_SetTurnaroundTime+0xd0>)
 800472c:	440b      	add	r3, r1
 800472e:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <USB_SetTurnaroundTime+0xd4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d319      	bcc.n	8004768 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004734:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8004738:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800473c:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <USB_SetTurnaroundTime+0xd8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d314      	bcc.n	800476c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004742:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <USB_SetTurnaroundTime+0xdc>)
 8004744:	440b      	add	r3, r1
 8004746:	4a19      	ldr	r2, [pc, #100]	@ (80047ac <USB_SetTurnaroundTime+0xe0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d211      	bcs.n	8004770 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800474c:	2207      	movs	r2, #7
 800474e:	e7c0      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8004750:	220f      	movs	r2, #15
 8004752:	e7be      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8004754:	220e      	movs	r2, #14
 8004756:	e7bc      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8004758:	220d      	movs	r2, #13
 800475a:	e7ba      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800475c:	220c      	movs	r2, #12
 800475e:	e7b8      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8004760:	220b      	movs	r2, #11
 8004762:	e7b6      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8004764:	220a      	movs	r2, #10
 8004766:	e7b4      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8004768:	2209      	movs	r2, #9
 800476a:	e7b2      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800476c:	2208      	movs	r2, #8
 800476e:	e7b0      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8004770:	2206      	movs	r2, #6
 8004772:	e7ae      	b.n	80046d2 <USB_SetTurnaroundTime+0x6>
 8004774:	ff275340 	.word	0xff275340
 8004778:	000c34ff 	.word	0x000c34ff
 800477c:	ff1b1e40 	.word	0xff1b1e40
 8004780:	000f423f 	.word	0x000f423f
 8004784:	00124f7f 	.word	0x00124f7f
 8004788:	0013d620 	.word	0x0013d620
 800478c:	fee5b660 	.word	0xfee5b660
 8004790:	0016e35f 	.word	0x0016e35f
 8004794:	feced300 	.word	0xfeced300
 8004798:	001b7740 	.word	0x001b7740
 800479c:	feb35bc0 	.word	0xfeb35bc0
 80047a0:	002191c0 	.word	0x002191c0
 80047a4:	00387520 	.word	0x00387520
 80047a8:	fe5954e0 	.word	0xfe5954e0
 80047ac:	00419ce0 	.word	0x00419ce0

080047b0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047b0:	6883      	ldr	r3, [r0, #8]
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6083      	str	r3, [r0, #8]
}
 80047b8:	2000      	movs	r0, #0
 80047ba:	4770      	bx	lr

080047bc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047bc:	6883      	ldr	r3, [r0, #8]
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	6083      	str	r3, [r0, #8]
}
 80047c4:	2000      	movs	r0, #0
 80047c6:	4770      	bx	lr

080047c8 <USB_FlushTxFifo>:
{
 80047c8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	9301      	str	r3, [sp, #4]
    count++;
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	3301      	adds	r3, #1
 80047d2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047da:	d815      	bhi.n	8004808 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047dc:	6903      	ldr	r3, [r0, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	daf5      	bge.n	80047ce <USB_FlushTxFifo+0x6>
  count = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047e6:	0189      	lsls	r1, r1, #6
 80047e8:	f041 0120 	orr.w	r1, r1, #32
 80047ec:	6101      	str	r1, [r0, #16]
    count++;
 80047ee:	9b01      	ldr	r3, [sp, #4]
 80047f0:	3301      	adds	r3, #1
 80047f2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047fa:	d808      	bhi.n	800480e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047fc:	6903      	ldr	r3, [r0, #16]
 80047fe:	f013 0f20 	tst.w	r3, #32
 8004802:	d1f4      	bne.n	80047ee <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8004804:	2000      	movs	r0, #0
 8004806:	e000      	b.n	800480a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8004808:	2003      	movs	r0, #3
}
 800480a:	b002      	add	sp, #8
 800480c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800480e:	2003      	movs	r0, #3
 8004810:	e7fb      	b.n	800480a <USB_FlushTxFifo+0x42>

08004812 <USB_FlushRxFifo>:
{
 8004812:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	9301      	str	r3, [sp, #4]
    count++;
 8004818:	9b01      	ldr	r3, [sp, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004824:	d813      	bhi.n	800484e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004826:	6903      	ldr	r3, [r0, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	daf5      	bge.n	8004818 <USB_FlushRxFifo+0x6>
  count = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004830:	2310      	movs	r3, #16
 8004832:	6103      	str	r3, [r0, #16]
    count++;
 8004834:	9b01      	ldr	r3, [sp, #4]
 8004836:	3301      	adds	r3, #1
 8004838:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800483a:	9b01      	ldr	r3, [sp, #4]
 800483c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004840:	d808      	bhi.n	8004854 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004842:	6903      	ldr	r3, [r0, #16]
 8004844:	f013 0f10 	tst.w	r3, #16
 8004848:	d1f4      	bne.n	8004834 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800484a:	2000      	movs	r0, #0
 800484c:	e000      	b.n	8004850 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800484e:	2003      	movs	r0, #3
}
 8004850:	b002      	add	sp, #8
 8004852:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004854:	2003      	movs	r0, #3
 8004856:	e7fb      	b.n	8004850 <USB_FlushRxFifo+0x3e>

08004858 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004858:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800485c:	4319      	orrs	r1, r3
 800485e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004862:	2000      	movs	r0, #0
 8004864:	4770      	bx	lr
	...

08004868 <USB_DevInit>:
{
 8004868:	b084      	sub	sp, #16
 800486a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486c:	4604      	mov	r4, r0
 800486e:	a807      	add	r0, sp, #28
 8004870:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	e006      	b.n	8004886 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8004878:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800487c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004880:	2100      	movs	r1, #0
 8004882:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004884:	3301      	adds	r3, #1
 8004886:	2b0e      	cmp	r3, #14
 8004888:	d9f6      	bls.n	8004878 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800488a:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800488e:	bb06      	cbnz	r6, 80048d2 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004890:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800489c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800489e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048a2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048a6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80048aa:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048b2:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ba:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d115      	bne.n	80048ee <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80048c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80048c6:	b96b      	cbnz	r3, 80048e4 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c8:	2100      	movs	r1, #0
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff ffc4 	bl	8004858 <USB_SetDevSpeed>
 80048d0:	e011      	b.n	80048f6 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048d8:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80048e2:	e7e7      	b.n	80048b4 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048e4:	2101      	movs	r1, #1
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff ffb6 	bl	8004858 <USB_SetDevSpeed>
 80048ec:	e003      	b.n	80048f6 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ee:	2103      	movs	r1, #3
 80048f0:	4620      	mov	r0, r4
 80048f2:	f7ff ffb1 	bl	8004858 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048f6:	2110      	movs	r1, #16
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff ff65 	bl	80047c8 <USB_FlushTxFifo>
 80048fe:	4605      	mov	r5, r0
 8004900:	b100      	cbz	r0, 8004904 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8004902:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ff84 	bl	8004812 <USB_FlushRxFifo>
 800490a:	b100      	cbz	r0, 800490e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800490c:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800490e:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8004912:	2300      	movs	r3, #0
 8004914:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004918:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800491c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004920:	e00a      	b.n	8004938 <USB_DevInit+0xd0>
      if (i == 0U)
 8004922:	b9cb      	cbnz	r3, 8004958 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004924:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8004928:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800492c:	2200      	movs	r2, #0
 800492e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004930:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8004934:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004936:	3301      	adds	r3, #1
 8004938:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800493c:	4299      	cmp	r1, r3
 800493e:	d910      	bls.n	8004962 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004940:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004944:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8004948:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 800494c:	2800      	cmp	r0, #0
 800494e:	dbe8      	blt.n	8004922 <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004950:	2000      	movs	r0, #0
 8004952:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8004956:	e7e9      	b.n	800492c <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800495c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8004960:	e7e4      	b.n	800492c <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004962:	2300      	movs	r3, #0
 8004964:	e00a      	b.n	800497c <USB_DevInit+0x114>
      if (i == 0U)
 8004966:	b1bb      	cbz	r3, 8004998 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004968:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800496c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004970:	2200      	movs	r2, #0
 8004972:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004974:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8004978:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497a:	3301      	adds	r3, #1
 800497c:	4299      	cmp	r1, r3
 800497e:	d910      	bls.n	80049a2 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004980:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004984:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8004988:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800498c:	2f00      	cmp	r7, #0
 800498e:	dbea      	blt.n	8004966 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004990:	2700      	movs	r7, #0
 8004992:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8004996:	e7eb      	b.n	8004970 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004998:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800499c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80049a0:	e7e6      	b.n	8004970 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049a2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80049a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049aa:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049b2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80049b6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80049b8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80049bc:	b91b      	cbnz	r3, 80049c6 <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049be:	69a3      	ldr	r3, [r4, #24]
 80049c0:	f043 0310 	orr.w	r3, r3, #16
 80049c4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049c6:	69a2      	ldr	r2, [r4, #24]
 80049c8:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <USB_DevInit+0x190>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80049ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80049d2:	b11b      	cbz	r3, 80049dc <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049d4:	69a3      	ldr	r3, [r4, #24]
 80049d6:	f043 0308 	orr.w	r3, r3, #8
 80049da:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80049dc:	2e01      	cmp	r6, #1
 80049de:	d004      	beq.n	80049ea <USB_DevInit+0x182>
}
 80049e0:	4628      	mov	r0, r5
 80049e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049e6:	b004      	add	sp, #16
 80049e8:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049ea:	69a3      	ldr	r3, [r4, #24]
 80049ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049f0:	f043 0304 	orr.w	r3, r3, #4
 80049f4:	61a3      	str	r3, [r4, #24]
 80049f6:	e7f3      	b.n	80049e0 <USB_DevInit+0x178>
 80049f8:	803c3800 	.word	0x803c3800

080049fc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049fc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a00:	f013 0306 	ands.w	r3, r3, #6
 8004a04:	d007      	beq.n	8004a16 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d007      	beq.n	8004a1a <USB_GetDevSpeed+0x1e>
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d001      	beq.n	8004a12 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8004a0e:	200f      	movs	r0, #15
}
 8004a10:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8004a12:	2002      	movs	r0, #2
 8004a14:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8004a16:	2000      	movs	r0, #0
 8004a18:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8004a1a:	2002      	movs	r0, #2
 8004a1c:	4770      	bx	lr

08004a1e <USB_ActivateEndpoint>:
{
 8004a1e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004a20:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8004a24:	784b      	ldrb	r3, [r1, #1]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d023      	beq.n	8004a72 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a2a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8004a2e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8004a32:	f00c 040f 	and.w	r4, ip, #15
 8004a36:	2201      	movs	r2, #1
 8004a38:	40a2      	lsls	r2, r4
 8004a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a3e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a42:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8004a46:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004a4a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004a4e:	d10e      	bne.n	8004a6e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a50:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a5a:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a5c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004a6e:	2000      	movs	r0, #0
 8004a70:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a72:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004a76:	f00c 0e0f 	and.w	lr, ip, #15
 8004a7a:	fa03 f30e 	lsl.w	r3, r3, lr
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a86:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8004a8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004a8e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004a92:	d1ec      	bne.n	8004a6e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a94:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa4:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004ab6:	e7da      	b.n	8004a6e <USB_ActivateEndpoint+0x50>

08004ab8 <USB_DeactivateEndpoint>:
{
 8004ab8:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8004aba:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004abc:	784a      	ldrb	r2, [r1, #1]
 8004abe:	2a01      	cmp	r2, #1
 8004ac0:	d026      	beq.n	8004b10 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ac2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004ac6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	db52      	blt.n	8004b74 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ace:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8004ad2:	780a      	ldrb	r2, [r1, #0]
 8004ad4:	f002 020f 	and.w	r2, r2, #15
 8004ad8:	f04f 0c01 	mov.w	ip, #1
 8004adc:	fa0c f202 	lsl.w	r2, ip, r2
 8004ae0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8004ae4:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ae8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004aec:	7809      	ldrb	r1, [r1, #0]
 8004aee:	f001 010f 	and.w	r1, r1, #15
 8004af2:	fa0c fc01 	lsl.w	ip, ip, r1
 8004af6:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8004afa:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004afe:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004b02:	4a23      	ldr	r2, [pc, #140]	@ (8004b90 <USB_DeactivateEndpoint+0xd8>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	bc30      	pop	{r4, r5}
 8004b0e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b10:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004b14:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	db1e      	blt.n	8004b5a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b1c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8004b20:	780a      	ldrb	r2, [r1, #0]
 8004b22:	f002 020f 	and.w	r2, r2, #15
 8004b26:	2401      	movs	r4, #1
 8004b28:	fa04 f202 	lsl.w	r2, r4, r2
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	ea25 0202 	bic.w	r2, r5, r2
 8004b32:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b36:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004b3a:	7809      	ldrb	r1, [r1, #0]
 8004b3c:	f001 010f 	and.w	r1, r1, #15
 8004b40:	408c      	lsls	r4, r1
 8004b42:	b2a4      	uxth	r4, r4
 8004b44:	ea22 0204 	bic.w	r2, r2, r4
 8004b48:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b4c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004b50:	4a10      	ldr	r2, [pc, #64]	@ (8004b94 <USB_DeactivateEndpoint+0xdc>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8004b58:	e7d7      	b.n	8004b0a <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b5a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004b5e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004b62:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b66:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004b6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b6e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8004b72:	e7d3      	b.n	8004b1c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b74:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004b78:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004b7c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b80:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004b84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b88:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8004b8c:	e79f      	b.n	8004ace <USB_DeactivateEndpoint+0x16>
 8004b8e:	bf00      	nop
 8004b90:	eff37800 	.word	0xeff37800
 8004b94:	ec337800 	.word	0xec337800

08004b98 <USB_EPStopXfer>:
{
 8004b98:	b410      	push	{r4}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8004ba2:	7848      	ldrb	r0, [r1, #1]
 8004ba4:	2801      	cmp	r0, #1
 8004ba6:	d00b      	beq.n	8004bc0 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ba8:	780b      	ldrb	r3, [r1, #0]
 8004baa:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004bae:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	db2d      	blt.n	8004c12 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb6:	2000      	movs	r0, #0
}
 8004bb8:	b003      	add	sp, #12
 8004bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bbe:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bc0:	780b      	ldrb	r3, [r1, #0]
 8004bc2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004bc6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	db01      	blt.n	8004bd2 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e7f2      	b.n	8004bb8 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bd2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004bd6:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004bda:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004bde:	780b      	ldrb	r3, [r1, #0]
 8004be0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004be4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004be8:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004bec:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8004bf0:	9b01      	ldr	r3, [sp, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004bf6:	9c01      	ldr	r4, [sp, #4]
 8004bf8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d8db      	bhi.n	8004bb8 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c00:	780b      	ldrb	r3, [r1, #0]
 8004c02:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004c06:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dbf0      	blt.n	8004bf0 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e7d2      	b.n	8004bb8 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c12:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004c16:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8004c1a:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c1e:	780b      	ldrb	r3, [r1, #0]
 8004c20:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004c24:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004c28:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8004c2c:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8004c30:	9b01      	ldr	r3, [sp, #4]
 8004c32:	3301      	adds	r3, #1
 8004c34:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004c36:	9801      	ldr	r0, [sp, #4]
 8004c38:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004c3c:	4298      	cmp	r0, r3
 8004c3e:	d808      	bhi.n	8004c52 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c40:	780b      	ldrb	r3, [r1, #0]
 8004c42:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004c46:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dbf0      	blt.n	8004c30 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7b2      	b.n	8004bb8 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8004c52:	2001      	movs	r0, #1
 8004c54:	e7b0      	b.n	8004bb8 <USB_EPStopXfer+0x20>

08004c56 <USB_WritePacket>:
{
 8004c56:	b510      	push	{r4, lr}
 8004c58:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004c5c:	b984      	cbnz	r4, 8004c80 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c5e:	3303      	adds	r3, #3
 8004c60:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8004c64:	f04f 0c00 	mov.w	ip, #0
 8004c68:	e008      	b.n	8004c7c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c6a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c72:	f851 4b04 	ldr.w	r4, [r1], #4
 8004c76:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8004c78:	f10c 0c01 	add.w	ip, ip, #1
 8004c7c:	45f4      	cmp	ip, lr
 8004c7e:	d3f4      	bcc.n	8004c6a <USB_WritePacket+0x14>
}
 8004c80:	2000      	movs	r0, #0
 8004c82:	bd10      	pop	{r4, pc}

08004c84 <USB_EPStartXfer>:
{
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c86:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8004c88:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004c8a:	784b      	ldrb	r3, [r1, #1]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d02f      	beq.n	8004cf0 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c90:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8004c94:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8004c98:	691d      	ldr	r5, [r3, #16]
 8004c9a:	0ced      	lsrs	r5, r5, #19
 8004c9c:	04ed      	lsls	r5, r5, #19
 8004c9e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ca0:	691d      	ldr	r5, [r3, #16]
 8004ca2:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8004ca6:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8004caa:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8004cac:	2c00      	cmp	r4, #0
 8004cae:	f040 80d2 	bne.w	8004e56 <USB_EPStartXfer+0x1d2>
      if (ep->xfer_len > 0U)
 8004cb2:	690c      	ldr	r4, [r1, #16]
 8004cb4:	b10c      	cbz	r4, 8004cba <USB_EPStartXfer+0x36>
        ep->xfer_len = ep->maxpacket;
 8004cb6:	688c      	ldr	r4, [r1, #8]
 8004cb8:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8004cba:	688c      	ldr	r4, [r1, #8]
 8004cbc:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cbe:	691d      	ldr	r5, [r3, #16]
 8004cc0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004cc4:	432c      	orrs	r4, r5
 8004cc6:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cc8:	691c      	ldr	r4, [r3, #16]
 8004cca:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004cce:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004cd0:	2a01      	cmp	r2, #1
 8004cd2:	f000 80e3 	beq.w	8004e9c <USB_EPStartXfer+0x218>
    if (ep->type == EP_TYPE_ISOC)
 8004cd6:	790b      	ldrb	r3, [r1, #4]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f000 80e5 	beq.w	8004ea8 <USB_EPStartXfer+0x224>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cde:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004ce2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ce6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8004cea:	2000      	movs	r0, #0
 8004cec:	b003      	add	sp, #12
 8004cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004cf0:	690b      	ldr	r3, [r1, #16]
 8004cf2:	bb83      	cbnz	r3, 8004d56 <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cf4:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8004cf8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004cfc:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8004d00:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8004d04:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d08:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004d0c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004d10:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d14:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004d18:	0ced      	lsrs	r5, r5, #19
 8004d1a:	04ed      	lsls	r5, r5, #19
 8004d1c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8004d20:	2a01      	cmp	r2, #1
 8004d22:	d056      	beq.n	8004dd2 <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d24:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004d28:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004d2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d30:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004d34:	790b      	ldrb	r3, [r1, #4]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d074      	beq.n	8004e24 <USB_EPStartXfer+0x1a0>
        if (ep->xfer_len > 0U)
 8004d3a:	690b      	ldr	r3, [r1, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0d4      	beq.n	8004cea <USB_EPStartXfer+0x66>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d40:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8004d44:	7809      	ldrb	r1, [r1, #0]
 8004d46:	f001 010f 	and.w	r1, r1, #15
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	408a      	lsls	r2, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004d54:	e7c9      	b.n	8004cea <USB_EPStartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d56:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5e:	691d      	ldr	r5, [r3, #16]
 8004d60:	0ced      	lsrs	r5, r5, #19
 8004d62:	04ed      	lsls	r5, r5, #19
 8004d64:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d66:	691d      	ldr	r5, [r3, #16]
 8004d68:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8004d6c:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8004d70:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8004d72:	b984      	cbnz	r4, 8004d96 <USB_EPStartXfer+0x112>
        if (ep->xfer_len > ep->maxpacket)
 8004d74:	690e      	ldr	r6, [r1, #16]
 8004d76:	688d      	ldr	r5, [r1, #8]
 8004d78:	42ae      	cmp	r6, r5
 8004d7a:	d900      	bls.n	8004d7e <USB_EPStartXfer+0xfa>
          ep->xfer_len = ep->maxpacket;
 8004d7c:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d7e:	691d      	ldr	r5, [r3, #16]
 8004d80:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004d84:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d86:	691d      	ldr	r5, [r3, #16]
 8004d88:	690e      	ldr	r6, [r1, #16]
 8004d8a:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8004d8e:	ea45 050c 	orr.w	r5, r5, ip
 8004d92:	611d      	str	r5, [r3, #16]
 8004d94:	e7c4      	b.n	8004d20 <USB_EPStartXfer+0x9c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d96:	690d      	ldr	r5, [r1, #16]
 8004d98:	688e      	ldr	r6, [r1, #8]
 8004d9a:	4435      	add	r5, r6
 8004d9c:	3d01      	subs	r5, #1
 8004d9e:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004da2:	691e      	ldr	r6, [r3, #16]
 8004da4:	fa1f fc85 	uxth.w	ip, r5
 8004da8:	4f49      	ldr	r7, [pc, #292]	@ (8004ed0 <USB_EPStartXfer+0x24c>)
 8004daa:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8004dae:	4335      	orrs	r5, r6
 8004db0:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004db2:	790d      	ldrb	r5, [r1, #4]
 8004db4:	2d01      	cmp	r5, #1
 8004db6:	d1e6      	bne.n	8004d86 <USB_EPStartXfer+0x102>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004db8:	691d      	ldr	r5, [r3, #16]
 8004dba:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8004dbe:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004dc0:	691d      	ldr	r5, [r3, #16]
 8004dc2:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8004dc6:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8004dca:	ea45 050c 	orr.w	r5, r5, ip
 8004dce:	611d      	str	r5, [r3, #16]
 8004dd0:	e7d9      	b.n	8004d86 <USB_EPStartXfer+0x102>
      if ((uint32_t)ep->dma_addr != 0U)
 8004dd2:	69cb      	ldr	r3, [r1, #28]
 8004dd4:	b11b      	cbz	r3, 8004dde <USB_EPStartXfer+0x15a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dd6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004dda:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004dde:	790b      	ldrb	r3, [r1, #4]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d008      	beq.n	8004df6 <USB_EPStartXfer+0x172>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004de4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004de8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004dec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004df0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004df4:	e779      	b.n	8004cea <USB_EPStartXfer+0x66>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004df6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004dfa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004dfe:	d108      	bne.n	8004e12 <USB_EPStartXfer+0x18e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e00:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004e04:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e0c:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004e10:	e7e8      	b.n	8004de4 <USB_EPStartXfer+0x160>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e12:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004e16:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004e22:	e7df      	b.n	8004de4 <USB_EPStartXfer+0x160>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e24:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004e28:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e2c:	d10c      	bne.n	8004e48 <USB_EPStartXfer+0x1c4>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e2e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004e32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e36:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e3a:	9200      	str	r2, [sp, #0]
 8004e3c:	8a0b      	ldrh	r3, [r1, #16]
 8004e3e:	780a      	ldrb	r2, [r1, #0]
 8004e40:	68c9      	ldr	r1, [r1, #12]
 8004e42:	f7ff ff08 	bl	8004c56 <USB_WritePacket>
 8004e46:	e750      	b.n	8004cea <USB_EPStartXfer+0x66>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e48:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004e54:	e7f1      	b.n	8004e3a <USB_EPStartXfer+0x1b6>
      if (ep->xfer_len == 0U)
 8004e56:	690c      	ldr	r4, [r1, #16]
 8004e58:	b954      	cbnz	r4, 8004e70 <USB_EPStartXfer+0x1ec>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e5a:	691c      	ldr	r4, [r3, #16]
 8004e5c:	688d      	ldr	r5, [r1, #8]
 8004e5e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004e62:	432c      	orrs	r4, r5
 8004e64:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e66:	691c      	ldr	r4, [r3, #16]
 8004e68:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004e6c:	611c      	str	r4, [r3, #16]
 8004e6e:	e72f      	b.n	8004cd0 <USB_EPStartXfer+0x4c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e70:	688d      	ldr	r5, [r1, #8]
 8004e72:	442c      	add	r4, r5
 8004e74:	3c01      	subs	r4, #1
 8004e76:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e7a:	b2a4      	uxth	r4, r4
 8004e7c:	fb04 f505 	mul.w	r5, r4, r5
 8004e80:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e82:	691d      	ldr	r5, [r3, #16]
 8004e84:	4e12      	ldr	r6, [pc, #72]	@ (8004ed0 <USB_EPStartXfer+0x24c>)
 8004e86:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8004e8a:	432c      	orrs	r4, r5
 8004e8c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e8e:	691c      	ldr	r4, [r3, #16]
 8004e90:	6a0d      	ldr	r5, [r1, #32]
 8004e92:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004e96:	432c      	orrs	r4, r5
 8004e98:	611c      	str	r4, [r3, #16]
 8004e9a:	e719      	b.n	8004cd0 <USB_EPStartXfer+0x4c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e9c:	68ca      	ldr	r2, [r1, #12]
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	f43f af19 	beq.w	8004cd6 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ea4:	615a      	str	r2, [r3, #20]
 8004ea6:	e716      	b.n	8004cd6 <USB_EPStartXfer+0x52>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ea8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004eac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004eb0:	d106      	bne.n	8004ec0 <USB_EPStartXfer+0x23c>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eb2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004eb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004eba:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004ebe:	e70e      	b.n	8004cde <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ec0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec8:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004ecc:	e707      	b.n	8004cde <USB_EPStartXfer+0x5a>
 8004ece:	bf00      	nop
 8004ed0:	1ff80000 	.word	0x1ff80000

08004ed4 <USB_ReadPacket>:
{
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	4684      	mov	ip, r0
 8004ed8:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8004eda:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8004ede:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e005      	b.n	8004ef2 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ee6:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8004eea:	6809      	ldr	r1, [r1, #0]
 8004eec:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	4573      	cmp	r3, lr
 8004ef4:	d3f7      	bcc.n	8004ee6 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8004ef6:	b17a      	cbz	r2, 8004f18 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ef8:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8004efc:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8004f00:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f02:	b2cb      	uxtb	r3, r1
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	fa24 f303 	lsr.w	r3, r4, r3
 8004f0a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004f0e:	3101      	adds	r1, #1
      remaining_bytes--;
 8004f10:	3a01      	subs	r2, #1
 8004f12:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d1f4      	bne.n	8004f02 <USB_ReadPacket+0x2e>
}
 8004f18:	bd10      	pop	{r4, pc}

08004f1a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004f1a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004f1c:	784a      	ldrb	r2, [r1, #1]
 8004f1e:	2a01      	cmp	r2, #1
 8004f20:	d014      	beq.n	8004f4c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f22:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004f26:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	db06      	blt.n	8004f3c <USB_EPSetStall+0x22>
 8004f2e:	b12b      	cbz	r3, 8004f3c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f30:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004f34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f38:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004f40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f44:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f4c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004f50:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	db06      	blt.n	8004f66 <USB_EPSetStall+0x4c>
 8004f58:	b12b      	cbz	r3, 8004f66 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f5a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004f5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f62:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f66:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f6e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004f72:	e7e9      	b.n	8004f48 <USB_EPSetStall+0x2e>

08004f74 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004f74:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004f76:	784a      	ldrb	r2, [r1, #1]
 8004f78:	2a01      	cmp	r2, #1
 8004f7a:	d00e      	beq.n	8004f9a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f7c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004f80:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004f84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f88:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f8c:	790b      	ldrb	r3, [r1, #4]
 8004f8e:	3b02      	subs	r3, #2
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d915      	bls.n	8004fc2 <USB_EPClearStall+0x4e>
}
 8004f96:	2000      	movs	r0, #0
 8004f98:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f9a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004f9e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004fa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fa6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004faa:	790b      	ldrb	r3, [r1, #4]
 8004fac:	3b02      	subs	r3, #2
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d8f0      	bhi.n	8004f96 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fb4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fbc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004fc0:	e7e9      	b.n	8004f96 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fc2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004fce:	e7e2      	b.n	8004f96 <USB_EPClearStall+0x22>

08004fd0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fd0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004fd4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004fd8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004fdc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004fe0:	0109      	lsls	r1, r1, #4
 8004fe2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8004fec:	2000      	movs	r0, #0
 8004fee:	4770      	bx	lr

08004ff0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ff0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004ff4:	f023 0303 	bic.w	r3, r3, #3
 8004ff8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ffc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8005000:	f023 0302 	bic.w	r3, r3, #2
 8005004:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8005008:	2000      	movs	r0, #0
 800500a:	4770      	bx	lr

0800500c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800500c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005018:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8005024:	2000      	movs	r0, #0
 8005026:	4770      	bx	lr

08005028 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005028:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800502a:	6980      	ldr	r0, [r0, #24]
}
 800502c:	4010      	ands	r0, r2
 800502e:	4770      	bx	lr

08005030 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005030:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8005034:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005038:	69c0      	ldr	r0, [r0, #28]
 800503a:	4018      	ands	r0, r3
}
 800503c:	0c00      	lsrs	r0, r0, #16
 800503e:	4770      	bx	lr

08005040 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005040:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8005044:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005048:	69c0      	ldr	r0, [r0, #28]
 800504a:	4018      	ands	r0, r3
}
 800504c:	b280      	uxth	r0, r0
 800504e:	4770      	bx	lr

08005050 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005050:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005054:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005058:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800505c:	6940      	ldr	r0, [r0, #20]
}
 800505e:	4010      	ands	r0, r2
 8005060:	4770      	bx	lr

08005062 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8005062:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005066:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800506a:	f001 0c0f 	and.w	ip, r1, #15
 800506e:	fa23 f30c 	lsr.w	r3, r3, ip
 8005072:	01db      	lsls	r3, r3, #7
 8005074:	b2db      	uxtb	r3, r3
 8005076:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005078:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800507c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8005080:	6880      	ldr	r0, [r0, #8]
}
 8005082:	4018      	ands	r0, r3
 8005084:	4770      	bx	lr

08005086 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005086:	6940      	ldr	r0, [r0, #20]
}
 8005088:	f000 0001 	and.w	r0, r0, #1
 800508c:	4770      	bx	lr

0800508e <USB_SetCurrentMode>:
{
 800508e:	b538      	push	{r3, r4, r5, lr}
 8005090:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005092:	68c3      	ldr	r3, [r0, #12]
 8005094:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005098:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800509a:	2901      	cmp	r1, #1
 800509c:	d013      	beq.n	80050c6 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800509e:	bb19      	cbnz	r1, 80050e8 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050a0:	68c3      	ldr	r3, [r0, #12]
 80050a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80050a8:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80050aa:	200a      	movs	r0, #10
 80050ac:	f7fb fef8 	bl	8000ea0 <HAL_Delay>
      ms += 10U;
 80050b0:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050b2:	4628      	mov	r0, r5
 80050b4:	f7ff ffe7 	bl	8005086 <USB_GetMode>
 80050b8:	b108      	cbz	r0, 80050be <USB_SetCurrentMode+0x30>
 80050ba:	2cc7      	cmp	r4, #199	@ 0xc7
 80050bc:	d9f5      	bls.n	80050aa <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050be:	2cc8      	cmp	r4, #200	@ 0xc8
 80050c0:	d014      	beq.n	80050ec <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80050c2:	2000      	movs	r0, #0
}
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050c6:	68c3      	ldr	r3, [r0, #12]
 80050c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050cc:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80050ce:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80050d0:	200a      	movs	r0, #10
 80050d2:	f7fb fee5 	bl	8000ea0 <HAL_Delay>
      ms += 10U;
 80050d6:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050d8:	4628      	mov	r0, r5
 80050da:	f7ff ffd4 	bl	8005086 <USB_GetMode>
 80050de:	2801      	cmp	r0, #1
 80050e0:	d0ed      	beq.n	80050be <USB_SetCurrentMode+0x30>
 80050e2:	2cc7      	cmp	r4, #199	@ 0xc7
 80050e4:	d9f4      	bls.n	80050d0 <USB_SetCurrentMode+0x42>
 80050e6:	e7ea      	b.n	80050be <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80050e8:	2001      	movs	r0, #1
 80050ea:	e7eb      	b.n	80050c4 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7e9      	b.n	80050c4 <USB_SetCurrentMode+0x36>

080050f0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050f0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80050f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80050f8:	f023 0307 	bic.w	r3, r3, #7
 80050fc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005100:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8005104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005108:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800510c:	2000      	movs	r0, #0
 800510e:	4770      	bx	lr

08005110 <USB_EP0_OutStart>:
{
 8005110:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005112:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005114:	4b15      	ldr	r3, [pc, #84]	@ (800516c <USB_EP0_OutStart+0x5c>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d903      	bls.n	8005122 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800511a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800511e:	2b00      	cmp	r3, #0
 8005120:	db16      	blt.n	8005150 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005122:	2400      	movs	r4, #0
 8005124:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005128:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800512c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8005130:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005134:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8005138:	f044 0418 	orr.w	r4, r4, #24
 800513c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005140:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8005144:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8005148:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800514c:	2901      	cmp	r1, #1
 800514e:	d003      	beq.n	8005158 <USB_EP0_OutStart+0x48>
}
 8005150:	2000      	movs	r0, #0
 8005152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005156:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005158:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800515c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005160:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005164:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8005168:	e7f2      	b.n	8005150 <USB_EP0_OutStart+0x40>
 800516a:	bf00      	nop
 800516c:	4f54300a 	.word	0x4f54300a

08005170 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005170:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005172:	4903      	ldr	r1, [pc, #12]	@ (8005180 <MX_FATFS_Init+0x10>)
 8005174:	4803      	ldr	r0, [pc, #12]	@ (8005184 <MX_FATFS_Init+0x14>)
 8005176:	f003 ff3d 	bl	8008ff4 <FATFS_LinkDriver>
 800517a:	4b03      	ldr	r3, [pc, #12]	@ (8005188 <MX_FATFS_Init+0x18>)
 800517c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800517e:	bd08      	pop	{r3, pc}
 8005180:	20001148 	.word	0x20001148
 8005184:	0800a688 	.word	0x0800a688
 8005188:	2000114c 	.word	0x2000114c

0800518c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800518c:	2000      	movs	r0, #0
 800518e:	4770      	bx	lr

08005190 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005190:	b500      	push	{lr}
 8005192:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	460a      	mov	r2, r1
 800519a:	4601      	mov	r1, r0
 800519c:	4803      	ldr	r0, [pc, #12]	@ (80051ac <BSP_SD_ReadBlocks+0x1c>)
 800519e:	f7fd fff5 	bl	800318c <HAL_SD_ReadBlocks>
 80051a2:	b100      	cbz	r0, 80051a6 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 80051a4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80051a6:	b003      	add	sp, #12
 80051a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80051ac:	20000b84 	.word	0x20000b84

080051b0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80051b0:	b500      	push	{lr}
 80051b2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	460a      	mov	r2, r1
 80051ba:	4601      	mov	r1, r0
 80051bc:	4803      	ldr	r0, [pc, #12]	@ (80051cc <BSP_SD_WriteBlocks+0x1c>)
 80051be:	f7fe f90d 	bl	80033dc <HAL_SD_WriteBlocks>
 80051c2:	b100      	cbz	r0, 80051c6 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 80051c4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80051c6:	b003      	add	sp, #12
 80051c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80051cc:	20000b84 	.word	0x20000b84

080051d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80051d0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80051d2:	4803      	ldr	r0, [pc, #12]	@ (80051e0 <BSP_SD_GetCardState+0x10>)
 80051d4:	f7fe fbe7 	bl	80039a6 <HAL_SD_GetCardState>
}
 80051d8:	3804      	subs	r0, #4
 80051da:	bf18      	it	ne
 80051dc:	2001      	movne	r0, #1
 80051de:	bd08      	pop	{r3, pc}
 80051e0:	20000b84 	.word	0x20000b84

080051e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80051e4:	b508      	push	{r3, lr}
 80051e6:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80051e8:	4801      	ldr	r0, [pc, #4]	@ (80051f0 <BSP_SD_GetCardInfo+0xc>)
 80051ea:	f7fe fbca 	bl	8003982 <HAL_SD_GetCardInfo>
}
 80051ee:	bd08      	pop	{r3, pc}
 80051f0:	20000b84 	.word	0x20000b84

080051f4 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 80051f4:	4770      	bx	lr

080051f6 <HAL_SD_AbortCallback>:
{
 80051f6:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 80051f8:	f7ff fffc 	bl	80051f4 <BSP_SD_AbortCallback>
}
 80051fc:	bd08      	pop	{r3, pc}

080051fe <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 80051fe:	4770      	bx	lr

08005200 <HAL_SD_TxCpltCallback>:
{
 8005200:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8005202:	f7ff fffc 	bl	80051fe <BSP_SD_WriteCpltCallback>
}
 8005206:	bd08      	pop	{r3, pc}

08005208 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8005208:	4770      	bx	lr

0800520a <HAL_SD_RxCpltCallback>:
{
 800520a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800520c:	f7ff fffc 	bl	8005208 <BSP_SD_ReadCpltCallback>
}
 8005210:	bd08      	pop	{r3, pc}

08005212 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005212:	b500      	push	{lr}
 8005214:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8005216:	2301      	movs	r3, #1
 8005218:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800521c:	f000 f818 	bl	8005250 <BSP_PlatformIsDetected>
 8005220:	b910      	cbnz	r0, 8005228 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8005222:	2300      	movs	r3, #0
 8005224:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8005228:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800522c:	b003      	add	sp, #12
 800522e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005234 <BSP_SD_Init>:
{
 8005234:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005236:	f7ff ffec 	bl	8005212 <BSP_SD_IsDetected>
 800523a:	2801      	cmp	r0, #1
 800523c:	d001      	beq.n	8005242 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 800523e:	2001      	movs	r0, #1
}
 8005240:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 8005242:	4802      	ldr	r0, [pc, #8]	@ (800524c <BSP_SD_Init+0x18>)
 8005244:	f7fe fb82 	bl	800394c <HAL_SD_Init>
  return sd_state;
 8005248:	e7fa      	b.n	8005240 <BSP_SD_Init+0xc>
 800524a:	bf00      	nop
 800524c:	20000b84 	.word	0x20000b84

08005250 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005250:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005256:	4804      	ldr	r0, [pc, #16]	@ (8005268 <BSP_PlatformIsDetected+0x18>)
 8005258:	f7fc f97a 	bl	8001550 <HAL_GPIO_ReadPin>
 800525c:	b908      	cbnz	r0, 8005262 <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 800525e:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8005260:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8005262:	2000      	movs	r0, #0
 8005264:	e7fc      	b.n	8005260 <BSP_PlatformIsDetected+0x10>
 8005266:	bf00      	nop
 8005268:	40020000 	.word	0x40020000

0800526c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800526c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800526e:	4b07      	ldr	r3, [pc, #28]	@ (800528c <SD_CheckStatus+0x20>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005274:	f7ff ffac 	bl	80051d0 <BSP_SD_GetCardState>
 8005278:	b920      	cbnz	r0, 8005284 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800527a:	4a04      	ldr	r2, [pc, #16]	@ (800528c <SD_CheckStatus+0x20>)
 800527c:	7813      	ldrb	r3, [r2, #0]
 800527e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005282:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8005284:	4b01      	ldr	r3, [pc, #4]	@ (800528c <SD_CheckStatus+0x20>)
 8005286:	7818      	ldrb	r0, [r3, #0]
}
 8005288:	bd08      	pop	{r3, pc}
 800528a:	bf00      	nop
 800528c:	20000010 	.word	0x20000010

08005290 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8005294:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <SD_initialize+0x24>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800529a:	f7ff ffcb 	bl	8005234 <BSP_SD_Init>
 800529e:	b110      	cbz	r0, 80052a6 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80052a0:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <SD_initialize+0x24>)
 80052a2:	7818      	ldrb	r0, [r3, #0]
}
 80052a4:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff ffe0 	bl	800526c <SD_CheckStatus>
 80052ac:	4b01      	ldr	r3, [pc, #4]	@ (80052b4 <SD_initialize+0x24>)
 80052ae:	7018      	strb	r0, [r3, #0]
 80052b0:	e7f6      	b.n	80052a0 <SD_initialize+0x10>
 80052b2:	bf00      	nop
 80052b4:	20000010 	.word	0x20000010

080052b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80052b8:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 80052ba:	f7ff ffd7 	bl	800526c <SD_CheckStatus>
}
 80052be:	bd08      	pop	{r3, pc}

080052c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80052c0:	b508      	push	{r3, lr}
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052cc:	f7ff ff60 	bl	8005190 <BSP_SD_ReadBlocks>
 80052d0:	b930      	cbnz	r0, 80052e0 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80052d2:	f7ff ff7d 	bl	80051d0 <BSP_SD_GetCardState>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1fa      	bne.n	80052d2 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e7fb      	b.n	80052dc <SD_read+0x1c>

080052e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80052e4:	b508      	push	{r3, lr}
 80052e6:	4608      	mov	r0, r1
 80052e8:	4611      	mov	r1, r2
 80052ea:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052f0:	f7ff ff5e 	bl	80051b0 <BSP_SD_WriteBlocks>
 80052f4:	b930      	cbnz	r0, 8005304 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80052f6:	f7ff ff6b 	bl	80051d0 <BSP_SD_GetCardState>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d1fa      	bne.n	80052f6 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e7fb      	b.n	8005300 <SD_write+0x1c>

08005308 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005308:	b530      	push	{r4, r5, lr}
 800530a:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800530c:	4b13      	ldr	r3, [pc, #76]	@ (800535c <SD_ioctl+0x54>)
 800530e:	7818      	ldrb	r0, [r3, #0]
 8005310:	f010 0401 	ands.w	r4, r0, #1
 8005314:	d11b      	bne.n	800534e <SD_ioctl+0x46>
 8005316:	4615      	mov	r5, r2

  switch (cmd)
 8005318:	2903      	cmp	r1, #3
 800531a:	d81c      	bhi.n	8005356 <SD_ioctl+0x4e>
 800531c:	e8df f001 	tbb	[pc, r1]
 8005320:	100a0402 	.word	0x100a0402
 8005324:	460c      	mov	r4, r1
 8005326:	e013      	b.n	8005350 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005328:	4668      	mov	r0, sp
 800532a:	f7ff ff5b 	bl	80051e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800532e:	9b06      	ldr	r3, [sp, #24]
 8005330:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8005332:	e00d      	b.n	8005350 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005334:	4668      	mov	r0, sp
 8005336:	f7ff ff55 	bl	80051e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800533a:	9b07      	ldr	r3, [sp, #28]
 800533c:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800533e:	e007      	b.n	8005350 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005340:	4668      	mov	r0, sp
 8005342:	f7ff ff4f 	bl	80051e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800534c:	e000      	b.n	8005350 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800534e:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005350:	4620      	mov	r0, r4
 8005352:	b009      	add	sp, #36	@ 0x24
 8005354:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8005356:	2404      	movs	r4, #4
 8005358:	e7fa      	b.n	8005350 <SD_ioctl+0x48>
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010

08005360 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8005360:	236d      	movs	r3, #109	@ 0x6d
 8005362:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_CfgDesc;
}
 8005364:	4800      	ldr	r0, [pc, #0]	@ (8005368 <USBD_AUDIO_GetCfgDesc+0x8>)
 8005366:	4770      	bx	lr
 8005368:	20000020 	.word	0x20000020

0800536c <USBD_AUDIO_DataIn>:
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
}
 800536c:	2000      	movs	r0, #0
 800536e:	4770      	bx	lr

08005370 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005370:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005372:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005376:	f102 03b0 	add.w	r3, r2, #176	@ 0xb0
 800537a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (haudio == NULL)
 800537e:	b1f4      	cbz	r4, 80053be <USBD_AUDIO_EP0_RxReady+0x4e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8005380:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 8005384:	f891 1b8a 	ldrb.w	r1, [r1, #2954]	@ 0xb8a
 8005388:	2901      	cmp	r1, #1
 800538a:	d001      	beq.n	8005390 <USBD_AUDIO_EP0_RxReady+0x20>
      haudio->control.cmd = 0U;
      haudio->control.len = 0U;
    }
  }

  return (uint8_t)USBD_OK;
 800538c:	2000      	movs	r0, #0
}
 800538e:	bd10      	pop	{r4, pc}
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8005390:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 8005394:	f891 1bcc 	ldrb.w	r1, [r1, #3020]	@ 0xbcc
 8005398:	2902      	cmp	r1, #2
 800539a:	d001      	beq.n	80053a0 <USBD_AUDIO_EP0_RxReady+0x30>
  return (uint8_t)USBD_OK;
 800539c:	2000      	movs	r0, #0
 800539e:	e7f6      	b.n	800538e <USBD_AUDIO_EP0_RxReady+0x1e>
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 80053a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80053a4:	6842      	ldr	r2, [r0, #4]
 80053a6:	6912      	ldr	r2, [r2, #16]
 80053a8:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 80053ac:	f894 0b8b 	ldrb.w	r0, [r4, #2955]	@ 0xb8b
 80053b0:	4790      	blx	r2
      haudio->control.cmd = 0U;
 80053b2:	2000      	movs	r0, #0
 80053b4:	f884 0b8a 	strb.w	r0, [r4, #2954]	@ 0xb8a
      haudio->control.len = 0U;
 80053b8:	f884 0bcb 	strb.w	r0, [r4, #3019]	@ 0xbcb
 80053bc:	e7e7      	b.n	800538e <USBD_AUDIO_EP0_RxReady+0x1e>
    return (uint8_t)USBD_FAIL;
 80053be:	2003      	movs	r0, #3
 80053c0:	e7e5      	b.n	800538e <USBD_AUDIO_EP0_RxReady+0x1e>

080053c2 <USBD_AUDIO_EP0_TxReady>:
{
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
}
 80053c2:	2000      	movs	r0, #0
 80053c4:	4770      	bx	lr

080053c6 <USBD_AUDIO_SOF>:
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 80053c6:	2000      	movs	r0, #0
 80053c8:	4770      	bx	lr

080053ca <USBD_AUDIO_IsoINIncomplete>:
{
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
}
 80053ca:	2000      	movs	r0, #0
 80053cc:	4770      	bx	lr
	...

080053d0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80053d0:	230a      	movs	r3, #10
 80053d2:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
}
 80053d4:	4800      	ldr	r0, [pc, #0]	@ (80053d8 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 80053d6:	4770      	bx	lr
 80053d8:	20000014 	.word	0x20000014

080053dc <USBD_AUDIO_IsoOutIncomplete>:
{
 80053dc:	b508      	push	{r3, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053de:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80053e2:	33b0      	adds	r3, #176	@ 0xb0
 80053e4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80053e8:	b152      	cbz	r2, 8005400 <USBD_AUDIO_IsoOutIncomplete+0x24>
                               &haudio->buffer[haudio->wr_ptr],
 80053ea:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 80053ee:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 80053f2:	441a      	add	r2, r3
 80053f4:	2358      	movs	r3, #88	@ 0x58
 80053f6:	3204      	adds	r2, #4
 80053f8:	f004 f88c 	bl	8009514 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80053fc:	2000      	movs	r0, #0
}
 80053fe:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8005400:	2003      	movs	r0, #3
 8005402:	e7fc      	b.n	80053fe <USBD_AUDIO_IsoOutIncomplete+0x22>

08005404 <USBD_AUDIO_DataOut>:
{
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005406:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800540a:	33b0      	adds	r3, #176	@ 0xb0
 800540c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (haudio == NULL)
 8005410:	2d00      	cmp	r5, #0
 8005412:	d056      	beq.n	80054c2 <USBD_AUDIO_DataOut+0xbe>
 8005414:	4604      	mov	r4, r0
  if (epnum == AUDIOOutEpAdd)
 8005416:	2901      	cmp	r1, #1
 8005418:	d001      	beq.n	800541e <USBD_AUDIO_DataOut+0x1a>
  return (uint8_t)USBD_OK;
 800541a:	2000      	movs	r0, #0
}
 800541c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800541e:	f004 f829 	bl	8009474 <USBD_LL_GetRxDataSize>
 8005422:	b286      	uxth	r6, r0
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8005424:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005428:	33b0      	adds	r3, #176	@ 0xb0
 800542a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f505 5780 	add.w	r7, r5, #4096	@ 0x1000
 8005436:	f8b7 0b88 	ldrh.w	r0, [r7, #2952]	@ 0xb88
 800543a:	4428      	add	r0, r5
 800543c:	2201      	movs	r2, #1
 800543e:	4631      	mov	r1, r6
 8005440:	3004      	adds	r0, #4
 8005442:	4798      	blx	r3
    haudio->wr_ptr += PacketSize;
 8005444:	f8b7 3b88 	ldrh.w	r3, [r7, #2952]	@ 0xb88
 8005448:	4433      	add	r3, r6
 800544a:	b29b      	uxth	r3, r3
 800544c:	f8a7 3b88 	strh.w	r3, [r7, #2952]	@ 0xb88
    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8005450:	f5b3 5fdc 	cmp.w	r3, #7040	@ 0x1b80
 8005454:	d306      	bcc.n	8005464 <USBD_AUDIO_DataOut+0x60>
      haudio->wr_ptr = 0U;
 8005456:	2200      	movs	r2, #0
 8005458:	f8a7 2b88 	strh.w	r2, [r7, #2952]	@ 0xb88
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800545c:	f897 3b84 	ldrb.w	r3, [r7, #2948]	@ 0xb84
 8005460:	2b03      	cmp	r3, #3
 8005462:	d018      	beq.n	8005496 <USBD_AUDIO_DataOut+0x92>
    if (haudio->rd_enable == 0U)
 8005464:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8005468:	f893 3b85 	ldrb.w	r3, [r3, #2949]	@ 0xb85
 800546c:	b933      	cbnz	r3, 800547c <USBD_AUDIO_DataOut+0x78>
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800546e:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8005472:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
 8005476:	f5b3 6f5c 	cmp.w	r3, #3520	@ 0xdc0
 800547a:	d01c      	beq.n	80054b6 <USBD_AUDIO_DataOut+0xb2>
                                 &haudio->buffer[haudio->wr_ptr],
 800547c:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8005480:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	@ 0xb88
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8005484:	18ea      	adds	r2, r5, r3
 8005486:	2358      	movs	r3, #88	@ 0x58
 8005488:	3204      	adds	r2, #4
 800548a:	2101      	movs	r1, #1
 800548c:	4620      	mov	r0, r4
 800548e:	f004 f841 	bl	8009514 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005492:	2000      	movs	r0, #0
 8005494:	e7c2      	b.n	800541c <USBD_AUDIO_DataOut+0x18>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8005496:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800549a:	33b0      	adds	r3, #176	@ 0xb0
 800549c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 80054aa:	1d28      	adds	r0, r5, #4
 80054ac:	4798      	blx	r3
        haudio->offset = AUDIO_OFFSET_NONE;
 80054ae:	2200      	movs	r2, #0
 80054b0:	f887 2b84 	strb.w	r2, [r7, #2948]	@ 0xb84
 80054b4:	e7d6      	b.n	8005464 <USBD_AUDIO_DataOut+0x60>
        haudio->rd_enable = 1U;
 80054b6:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2b85 	strb.w	r2, [r3, #2949]	@ 0xb85
 80054c0:	e7dc      	b.n	800547c <USBD_AUDIO_DataOut+0x78>
    return (uint8_t)USBD_FAIL;
 80054c2:	2003      	movs	r0, #3
 80054c4:	e7aa      	b.n	800541c <USBD_AUDIO_DataOut+0x18>

080054c6 <AUDIO_REQ_GetCurrent>:
{
 80054c6:	b570      	push	{r4, r5, r6, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054c8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80054cc:	33b0      	adds	r3, #176	@ 0xb0
 80054ce:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  if (haudio == NULL)
 80054d2:	b18c      	cbz	r4, 80054f8 <AUDIO_REQ_GetCurrent+0x32>
 80054d4:	4605      	mov	r5, r0
 80054d6:	460e      	mov	r6, r1
  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 80054d8:	f504 54dc 	add.w	r4, r4, #7040	@ 0x1b80
 80054dc:	340b      	adds	r4, #11
 80054de:	2240      	movs	r2, #64	@ 0x40
 80054e0:	2100      	movs	r1, #0
 80054e2:	4620      	mov	r0, r4
 80054e4:	f004 fa28 	bl	8009938 <memset>
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 80054e8:	88f2      	ldrh	r2, [r6, #6]
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80054ea:	2a40      	cmp	r2, #64	@ 0x40
 80054ec:	bf28      	it	cs
 80054ee:	2240      	movcs	r2, #64	@ 0x40
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 fed4 	bl	80062a0 <USBD_CtlSendData>
}
 80054f8:	bd70      	pop	{r4, r5, r6, pc}

080054fa <AUDIO_REQ_SetCurrent>:
{
 80054fa:	b508      	push	{r3, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005500:	33b0      	adds	r3, #176	@ 0xb0
 8005502:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (haudio == NULL)
 8005506:	b1c3      	cbz	r3, 800553a <AUDIO_REQ_SetCurrent+0x40>
  if (req->wLength != 0U)
 8005508:	88ca      	ldrh	r2, [r1, #6]
 800550a:	b1b2      	cbz	r2, 800553a <AUDIO_REQ_SetCurrent+0x40>
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800550c:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8005510:	f04f 0c01 	mov.w	ip, #1
 8005514:	f882 cb8a 	strb.w	ip, [r2, #2954]	@ 0xb8a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8005518:	88ca      	ldrh	r2, [r1, #6]
 800551a:	2a3f      	cmp	r2, #63	@ 0x3f
 800551c:	d80e      	bhi.n	800553c <AUDIO_REQ_SetCurrent+0x42>
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	f503 5c80 	add.w	ip, r3, #4096	@ 0x1000
 8005524:	f88c 2bcb 	strb.w	r2, [ip, #3019]	@ 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8005528:	8889      	ldrh	r1, [r1, #4]
 800552a:	0a09      	lsrs	r1, r1, #8
 800552c:	f88c 1bcc 	strb.w	r1, [ip, #3020]	@ 0xbcc
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8005530:	f503 51dc 	add.w	r1, r3, #7040	@ 0x1b80
 8005534:	310b      	adds	r1, #11
 8005536:	f000 fec8 	bl	80062ca <USBD_CtlPrepareRx>
}
 800553a:	bd08      	pop	{r3, pc}
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800553c:	2240      	movs	r2, #64	@ 0x40
 800553e:	e7ef      	b.n	8005520 <AUDIO_REQ_SetCurrent+0x26>

08005540 <USBD_AUDIO_GetAudioHeaderDesc>:
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pAudioDesc =  NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005540:	8842      	ldrh	r2, [r0, #2]
 8005542:	7803      	ldrb	r3, [r0, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d917      	bls.n	8005578 <USBD_AUDIO_GetAudioHeaderDesc+0x38>
{
 8005548:	b510      	push	{r4, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	4604      	mov	r4, r0
  {
    ptr = desc->bLength;
 800554e:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < desc->wTotalLength)
 8005552:	8863      	ldrh	r3, [r4, #2]
 8005554:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005558:	429a      	cmp	r2, r3
 800555a:	d20a      	bcs.n	8005572 <USBD_AUDIO_GetAudioHeaderDesc+0x32>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800555c:	f10d 0106 	add.w	r1, sp, #6
 8005560:	f000 faff 	bl	8005b62 <USBD_GetNextDesc>
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8005564:	7843      	ldrb	r3, [r0, #1]
 8005566:	2b24      	cmp	r3, #36	@ 0x24
 8005568:	d1f3      	bne.n	8005552 <USBD_AUDIO_GetAudioHeaderDesc+0x12>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800556a:	7883      	ldrb	r3, [r0, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800556c:	2b01      	cmp	r3, #1
 800556e:	d1f0      	bne.n	8005552 <USBD_AUDIO_GetAudioHeaderDesc+0x12>
 8005570:	e000      	b.n	8005574 <USBD_AUDIO_GetAudioHeaderDesc+0x34>
  uint8_t *pAudioDesc =  NULL;
 8005572:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pAudioDesc;
}
 8005574:	b002      	add	sp, #8
 8005576:	bd10      	pop	{r4, pc}
  uint8_t *pAudioDesc =  NULL;
 8005578:	2000      	movs	r0, #0
}
 800557a:	4770      	bx	lr

0800557c <USBD_AUDIO_Setup>:
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b083      	sub	sp, #12
 8005580:	460e      	mov	r6, r1
  uint16_t status_info = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	f8ad 3006 	strh.w	r3, [sp, #6]
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005588:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800558c:	33b0      	adds	r3, #176	@ 0xb0
 800558e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (haudio == NULL)
 8005592:	2900      	cmp	r1, #0
 8005594:	d07c      	beq.n	8005690 <USBD_AUDIO_Setup+0x114>
 8005596:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005598:	7834      	ldrb	r4, [r6, #0]
 800559a:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 800559e:	d015      	beq.n	80055cc <USBD_AUDIO_Setup+0x50>
 80055a0:	2c20      	cmp	r4, #32
 80055a2:	d16e      	bne.n	8005682 <USBD_AUDIO_Setup+0x106>
      switch (req->bRequest)
 80055a4:	7873      	ldrb	r3, [r6, #1]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d006      	beq.n	80055b8 <USBD_AUDIO_Setup+0x3c>
 80055aa:	2b81      	cmp	r3, #129	@ 0x81
 80055ac:	d109      	bne.n	80055c2 <USBD_AUDIO_Setup+0x46>
          AUDIO_REQ_GetCurrent(pdev, req);
 80055ae:	4631      	mov	r1, r6
 80055b0:	f7ff ff89 	bl	80054c6 <AUDIO_REQ_GetCurrent>
  USBD_StatusTypeDef ret = USBD_OK;
 80055b4:	2400      	movs	r4, #0
          break;
 80055b6:	e068      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
          AUDIO_REQ_SetCurrent(pdev, req);
 80055b8:	4631      	mov	r1, r6
 80055ba:	f7ff ff9e 	bl	80054fa <AUDIO_REQ_SetCurrent>
  USBD_StatusTypeDef ret = USBD_OK;
 80055be:	2400      	movs	r4, #0
          break;
 80055c0:	e063      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
          USBD_CtlError(pdev, req);
 80055c2:	4631      	mov	r1, r6
 80055c4:	f000 faf2 	bl	8005bac <USBD_CtlError>
          ret = USBD_FAIL;
 80055c8:	2403      	movs	r4, #3
          break;
 80055ca:	e05e      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
      switch (req->bRequest)
 80055cc:	7877      	ldrb	r7, [r6, #1]
 80055ce:	2f0b      	cmp	r7, #11
 80055d0:	d852      	bhi.n	8005678 <USBD_AUDIO_Setup+0xfc>
 80055d2:	e8df f007 	tbb	[pc, r7]
 80055d6:	5a06      	.short	0x5a06
 80055d8:	51515151 	.word	0x51515151
 80055dc:	51515117 	.word	0x51515117
 80055e0:	3d2f      	.short	0x3d2f
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d004      	beq.n	80055f6 <USBD_AUDIO_Setup+0x7a>
            USBD_CtlError(pdev, req);
 80055ec:	4631      	mov	r1, r6
 80055ee:	f000 fadd 	bl	8005bac <USBD_CtlError>
            ret = USBD_FAIL;
 80055f2:	2403      	movs	r4, #3
 80055f4:	e049      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055f6:	2202      	movs	r2, #2
 80055f8:	f10d 0106 	add.w	r1, sp, #6
 80055fc:	f000 fe50 	bl	80062a0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005600:	463c      	mov	r4, r7
 8005602:	e042      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8005604:	8873      	ldrh	r3, [r6, #2]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	2b21      	cmp	r3, #33	@ 0x21
 800560a:	d13e      	bne.n	800568a <USBD_AUDIO_Setup+0x10e>
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800560c:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8005610:	f7ff ff96 	bl	8005540 <USBD_AUDIO_GetAudioHeaderDesc>
            if (pbuf != NULL)
 8005614:	4601      	mov	r1, r0
 8005616:	b138      	cbz	r0, 8005628 <USBD_AUDIO_Setup+0xac>
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8005618:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800561a:	2a09      	cmp	r2, #9
 800561c:	bf28      	it	cs
 800561e:	2209      	movcs	r2, #9
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fe3d 	bl	80062a0 <USBD_CtlSendData>
 8005626:	e030      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
              USBD_CtlError(pdev, req);
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fabe 	bl	8005bac <USBD_CtlError>
              ret = USBD_FAIL;
 8005630:	2403      	movs	r4, #3
 8005632:	e02a      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005634:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d004      	beq.n	8005648 <USBD_AUDIO_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800563e:	4631      	mov	r1, r6
 8005640:	f000 fab4 	bl	8005bac <USBD_CtlError>
            ret = USBD_FAIL;
 8005644:	2403      	movs	r4, #3
 8005646:	e020      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8005648:	2201      	movs	r2, #1
 800564a:	f000 fe29 	bl	80062a0 <USBD_CtlSendData>
 800564e:	e01c      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005650:	f890 729c 	ldrb.w	r7, [r0, #668]	@ 0x29c
 8005654:	b2ff      	uxtb	r7, r7
 8005656:	2f03      	cmp	r7, #3
 8005658:	d109      	bne.n	800566e <USBD_AUDIO_Setup+0xf2>
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800565a:	78b3      	ldrb	r3, [r6, #2]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d801      	bhi.n	8005664 <USBD_AUDIO_Setup+0xe8>
              haudio->alt_setting = (uint8_t)(req->wValue);
 8005660:	600b      	str	r3, [r1, #0]
 8005662:	e012      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
              USBD_CtlError(pdev, req);
 8005664:	4631      	mov	r1, r6
 8005666:	f000 faa1 	bl	8005bac <USBD_CtlError>
              ret = USBD_FAIL;
 800566a:	463c      	mov	r4, r7
 800566c:	e00d      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
            USBD_CtlError(pdev, req);
 800566e:	4631      	mov	r1, r6
 8005670:	f000 fa9c 	bl	8005bac <USBD_CtlError>
            ret = USBD_FAIL;
 8005674:	2403      	movs	r4, #3
 8005676:	e008      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
          USBD_CtlError(pdev, req);
 8005678:	4631      	mov	r1, r6
 800567a:	f000 fa97 	bl	8005bac <USBD_CtlError>
          ret = USBD_FAIL;
 800567e:	2403      	movs	r4, #3
          break;
 8005680:	e003      	b.n	800568a <USBD_AUDIO_Setup+0x10e>
      USBD_CtlError(pdev, req);
 8005682:	4631      	mov	r1, r6
 8005684:	f000 fa92 	bl	8005bac <USBD_CtlError>
      ret = USBD_FAIL;
 8005688:	2403      	movs	r4, #3
}
 800568a:	4620      	mov	r0, r4
 800568c:	b003      	add	sp, #12
 800568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8005690:	2403      	movs	r4, #3
 8005692:	e7fa      	b.n	800568a <USBD_AUDIO_Setup+0x10e>

08005694 <USBD_AUDIO_DeInit>:
{
 8005694:	b510      	push	{r4, lr}
 8005696:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8005698:	2101      	movs	r1, #1
 800569a:	f003 ff13 	bl	80094c4 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	f8a4 3178 	strh.w	r3, [r4, #376]	@ 0x178
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80056a4:	f8a4 317a 	strh.w	r3, [r4, #378]	@ 0x17a
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056a8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80056ac:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80056b0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056b4:	b1aa      	cbz	r2, 80056e2 <USBD_AUDIO_DeInit+0x4e>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 80056b6:	33b0      	adds	r3, #176	@ 0xb0
 80056b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2000      	movs	r0, #0
 80056c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056c4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80056c8:	33b0      	adds	r3, #176	@ 0xb0
 80056ca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80056ce:	f003 fedb 	bl	8009488 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056d2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80056d6:	33b0      	adds	r3, #176	@ 0xb0
 80056d8:	2200      	movs	r2, #0
 80056da:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80056de:	f8c4 22bc 	str.w	r2, [r4, #700]	@ 0x2bc
}
 80056e2:	2000      	movs	r0, #0
 80056e4:	bd10      	pop	{r4, pc}

080056e6 <USBD_AUDIO_Init>:
{
 80056e6:	b538      	push	{r3, r4, r5, lr}
 80056e8:	4604      	mov	r4, r0
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80056ea:	f641 30d0 	movw	r0, #7120	@ 0x1bd0
 80056ee:	f003 fec7 	bl	8009480 <USBD_static_malloc>
  if (haudio == NULL)
 80056f2:	b3b0      	cbz	r0, 8005762 <USBD_AUDIO_Init+0x7c>
 80056f4:	4605      	mov	r5, r0
  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 80056f6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80056fa:	33b0      	adds	r3, #176	@ 0xb0
 80056fc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005700:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005704:	7c23      	ldrb	r3, [r4, #16]
 8005706:	bba3      	cbnz	r3, 8005772 <USBD_AUDIO_Init+0x8c>
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8005708:	2301      	movs	r3, #1
 800570a:	f8a4 317a 	strh.w	r3, [r4, #378]	@ 0x17a
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800570e:	2358      	movs	r3, #88	@ 0x58
 8005710:	2201      	movs	r2, #1
 8005712:	4611      	mov	r1, r2
 8005714:	4620      	mov	r0, r4
 8005716:	f003 feca 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800571a:	2301      	movs	r3, #1
 800571c:	f8a4 3178 	strh.w	r3, [r4, #376]	@ 0x178
  haudio->alt_setting = 0U;
 8005720:	2200      	movs	r2, #0
 8005722:	602a      	str	r2, [r5, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8005724:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8005728:	2103      	movs	r1, #3
 800572a:	f883 1b84 	strb.w	r1, [r3, #2948]	@ 0xb84
  haudio->wr_ptr = 0U;
 800572e:	f8a3 2b88 	strh.w	r2, [r3, #2952]	@ 0xb88
  haudio->rd_ptr = 0U;
 8005732:	f8a3 2b86 	strh.w	r2, [r3, #2950]	@ 0xb86
  haudio->rd_enable = 0U;
 8005736:	f883 2b85 	strb.w	r2, [r3, #2949]	@ 0xb85
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800573a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800573e:	33b0      	adds	r3, #176	@ 0xb0
 8005740:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2146      	movs	r1, #70	@ 0x46
 800574a:	f245 6054 	movw	r0, #22100	@ 0x5654
 800574e:	4798      	blx	r3
 8005750:	b998      	cbnz	r0, 800577a <USBD_AUDIO_Init+0x94>
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8005752:	2358      	movs	r3, #88	@ 0x58
 8005754:	1d2a      	adds	r2, r5, #4
 8005756:	2101      	movs	r1, #1
 8005758:	4620      	mov	r0, r4
 800575a:	f003 fedb 	bl	8009514 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800575e:	2000      	movs	r0, #0
}
 8005760:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005762:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005766:	33b0      	adds	r3, #176	@ 0xb0
 8005768:	2200      	movs	r2, #0
 800576a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800576e:	2002      	movs	r0, #2
 8005770:	e7f6      	b.n	8005760 <USBD_AUDIO_Init+0x7a>
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8005772:	2301      	movs	r3, #1
 8005774:	f8a4 317a 	strh.w	r3, [r4, #378]	@ 0x17a
 8005778:	e7c9      	b.n	800570e <USBD_AUDIO_Init+0x28>
    return (uint8_t)USBD_FAIL;
 800577a:	2003      	movs	r0, #3
 800577c:	e7f0      	b.n	8005760 <USBD_AUDIO_Init+0x7a>

0800577e <USBD_AUDIO_RegisterInterface>:
  if (fops == NULL)
 800577e:	b139      	cbz	r1, 8005790 <USBD_AUDIO_RegisterInterface+0x12>
  pdev->pUserData[pdev->classId] = fops;
 8005780:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005784:	33b0      	adds	r3, #176	@ 0xb0
 8005786:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800578a:	6041      	str	r1, [r0, #4]
  return (uint8_t)USBD_OK;
 800578c:	2000      	movs	r0, #0
 800578e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005790:	2003      	movs	r0, #3
}
 8005792:	4770      	bx	lr

08005794 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005794:	b198      	cbz	r0, 80057be <USBD_Init+0x2a>
{
 8005796:	b508      	push	{r3, lr}
 8005798:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800579a:	2000      	movs	r0, #0
 800579c:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80057a0:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057a4:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057a8:	b109      	cbz	r1, 80057ae <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80057aa:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057ae:	2101      	movs	r1, #1
 80057b0:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 80057b4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057b6:	4618      	mov	r0, r3
 80057b8:	f003 fe12 	bl	80093e0 <USBD_LL_Init>

  return ret;
}
 80057bc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80057be:	2003      	movs	r0, #3
}
 80057c0:	4770      	bx	lr

080057c2 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057c2:	b510      	push	{r4, lr}
 80057c4:	b082      	sub	sp, #8
  uint16_t len = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80057cc:	b189      	cbz	r1, 80057f2 <USBD_RegisterClass+0x30>
 80057ce:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057d0:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80057d4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80057d6:	b123      	cbz	r3, 80057e2 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057d8:	f10d 0006 	add.w	r0, sp, #6
 80057dc:	4798      	blx	r3
 80057de:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80057e2:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80057ec:	2000      	movs	r0, #0
}
 80057ee:	b002      	add	sp, #8
 80057f0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80057f2:	2003      	movs	r0, #3
 80057f4:	e7fb      	b.n	80057ee <USBD_RegisterClass+0x2c>

080057f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057f6:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057f8:	f003 fe51 	bl	800949e <USBD_LL_Start>
}
 80057fc:	bd08      	pop	{r3, pc}

080057fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057fe:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005800:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005804:	b113      	cbz	r3, 800580c <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800580a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800580c:	2000      	movs	r0, #0
 800580e:	e7fc      	b.n	800580a <USBD_SetClassConfig+0xc>

08005810 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005810:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005812:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4798      	blx	r3
 800581a:	b900      	cbnz	r0, 800581e <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800581c:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 800581e:	2003      	movs	r0, #3
 8005820:	e7fc      	b.n	800581c <USBD_ClrClassConfig+0xc>

08005822 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005822:	b538      	push	{r3, r4, r5, lr}
 8005824:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005826:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800582a:	4628      	mov	r0, r5
 800582c:	f000 f9aa 	bl	8005b84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005830:	2301      	movs	r3, #1
 8005832:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005836:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800583a:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800583e:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8005842:	f001 031f 	and.w	r3, r1, #31
 8005846:	2b01      	cmp	r3, #1
 8005848:	d00d      	beq.n	8005866 <USBD_LL_SetupStage+0x44>
 800584a:	2b02      	cmp	r3, #2
 800584c:	d010      	beq.n	8005870 <USBD_LL_SetupStage+0x4e>
 800584e:	b12b      	cbz	r3, 800585c <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005850:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005854:	4620      	mov	r0, r4
 8005856:	f003 fe3d 	bl	80094d4 <USBD_LL_StallEP>
      break;
 800585a:	e003      	b.n	8005864 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800585c:	4629      	mov	r1, r5
 800585e:	4620      	mov	r0, r4
 8005860:	f000 fb66 	bl	8005f30 <USBD_StdDevReq>
  }

  return ret;
}
 8005864:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005866:	4629      	mov	r1, r5
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fb9c 	bl	8005fa6 <USBD_StdItfReq>
      break;
 800586e:	e7f9      	b.n	8005864 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005870:	4629      	mov	r1, r5
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fbd9 	bl	800602a <USBD_StdEPReq>
      break;
 8005878:	e7f4      	b.n	8005864 <USBD_LL_SetupStage+0x42>

0800587a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800587a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800587e:	2301      	movs	r3, #1
 8005880:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005884:	2300      	movs	r3, #0
 8005886:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800588a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800588c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005890:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005894:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005898:	b1db      	cbz	r3, 80058d2 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	b1db      	cbz	r3, 80058d6 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800589e:	2100      	movs	r1, #0
 80058a0:	4798      	blx	r3
 80058a2:	4607      	mov	r7, r0
 80058a4:	b9c8      	cbnz	r0, 80058da <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058a6:	2340      	movs	r3, #64	@ 0x40
 80058a8:	2200      	movs	r2, #0
 80058aa:	4611      	mov	r1, r2
 80058ac:	4620      	mov	r0, r4
 80058ae:	f003 fdfe 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058b2:	2601      	movs	r6, #1
 80058b4:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058b8:	2540      	movs	r5, #64	@ 0x40
 80058ba:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058be:	462b      	mov	r3, r5
 80058c0:	2200      	movs	r2, #0
 80058c2:	2180      	movs	r1, #128	@ 0x80
 80058c4:	4620      	mov	r0, r4
 80058c6:	f003 fdf2 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058ca:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058cc:	6225      	str	r5, [r4, #32]

  return ret;
}
 80058ce:	4638      	mov	r0, r7
 80058d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80058d2:	2700      	movs	r7, #0
 80058d4:	e7e7      	b.n	80058a6 <USBD_LL_Reset+0x2c>
 80058d6:	2700      	movs	r7, #0
 80058d8:	e7e5      	b.n	80058a6 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80058da:	2703      	movs	r7, #3
 80058dc:	e7e3      	b.n	80058a6 <USBD_LL_Reset+0x2c>

080058de <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80058de:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80058e0:	2000      	movs	r0, #0
 80058e2:	4770      	bx	lr

080058e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80058e4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d004      	beq.n	80058f8 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80058ee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058f8:	2304      	movs	r3, #4
 80058fa:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80058fe:	2000      	movs	r0, #0
 8005900:	4770      	bx	lr

08005902 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005902:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b04      	cmp	r3, #4
 800590a:	d001      	beq.n	8005910 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800590c:	2000      	movs	r0, #0
 800590e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8005910:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800591a:	e7f7      	b.n	800590c <USBD_LL_Resume+0xa>

0800591c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800591c:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b03      	cmp	r3, #3
 8005926:	d001      	beq.n	800592c <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8005928:	2000      	movs	r0, #0
 800592a:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800592c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f9      	beq.n	8005928 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f6      	beq.n	8005928 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800593a:	4798      	blx	r3
 800593c:	e7f4      	b.n	8005928 <USBD_LL_SOF+0xc>

0800593e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800593e:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8005940:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005944:	33ae      	adds	r3, #174	@ 0xae
 8005946:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800594a:	b15a      	cbz	r2, 8005964 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b03      	cmp	r3, #3
 8005954:	d001      	beq.n	800595a <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005956:	2000      	movs	r0, #0
}
 8005958:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800595a:	6a13      	ldr	r3, [r2, #32]
 800595c:	b123      	cbz	r3, 8005968 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800595e:	4798      	blx	r3
  return USBD_OK;
 8005960:	2000      	movs	r0, #0
 8005962:	e7f9      	b.n	8005958 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8005964:	2003      	movs	r0, #3
 8005966:	e7f7      	b.n	8005958 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8005968:	2000      	movs	r0, #0
 800596a:	e7f5      	b.n	8005958 <USBD_LL_IsoINIncomplete+0x1a>

0800596c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800596c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800596e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005972:	33ae      	adds	r3, #174	@ 0xae
 8005974:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8005978:	b15a      	cbz	r2, 8005992 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b03      	cmp	r3, #3
 8005982:	d001      	beq.n	8005988 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005984:	2000      	movs	r0, #0
}
 8005986:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005988:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800598a:	b123      	cbz	r3, 8005996 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800598c:	4798      	blx	r3
  return USBD_OK;
 800598e:	2000      	movs	r0, #0
 8005990:	e7f9      	b.n	8005986 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8005992:	2003      	movs	r0, #3
 8005994:	e7f7      	b.n	8005986 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8005996:	2000      	movs	r0, #0
 8005998:	e7f5      	b.n	8005986 <USBD_LL_IsoOUTIncomplete+0x1a>

0800599a <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800599a:	2000      	movs	r0, #0
 800599c:	4770      	bx	lr

0800599e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800599e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80059aa:	b123      	cbz	r3, 80059b6 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	7901      	ldrb	r1, [r0, #4]
 80059b0:	4798      	blx	r3
 80059b2:	b910      	cbnz	r0, 80059ba <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80059b4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80059b6:	2000      	movs	r0, #0
 80059b8:	e7fc      	b.n	80059b4 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 80059ba:	2003      	movs	r0, #3
 80059bc:	e7fa      	b.n	80059b4 <USBD_LL_DevDisconnected+0x16>

080059be <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80059be:	2000      	movs	r0, #0
 80059c0:	4770      	bx	lr

080059c2 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80059c2:	2000      	movs	r0, #0
 80059c4:	4770      	bx	lr

080059c6 <USBD_LL_DataOutStage>:
{
 80059c6:	b538      	push	{r3, r4, r5, lr}
 80059c8:	4604      	mov	r4, r0
  if (epnum == 0U)
 80059ca:	460d      	mov	r5, r1
 80059cc:	2900      	cmp	r1, #0
 80059ce:	d143      	bne.n	8005a58 <USBD_LL_DataOutStage+0x92>
 80059d0:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059d2:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80059d6:	2a03      	cmp	r2, #3
 80059d8:	d001      	beq.n	80059de <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 80059da:	4608      	mov	r0, r1
}
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80059de:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 80059e2:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 80059e6:	4291      	cmp	r1, r2
 80059e8:	d812      	bhi.n	8005a10 <USBD_LL_DataOutStage+0x4a>
        switch (pdev->request.bmRequest & 0x1FU)
 80059ea:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d017      	beq.n	8005a26 <USBD_LL_DataOutStage+0x60>
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d01c      	beq.n	8005a34 <USBD_LL_DataOutStage+0x6e>
 80059fa:	4628      	mov	r0, r5
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059fc:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d01b      	beq.n	8005a3e <USBD_LL_DataOutStage+0x78>
        (void)USBD_CtlSendStatus(pdev);
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 fc76 	bl	80062f8 <USBD_CtlSendStatus>
  return USBD_OK;
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e7e5      	b.n	80059dc <USBD_LL_DataOutStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8005a10:	1a89      	subs	r1, r1, r2
 8005a12:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a16:	428a      	cmp	r2, r1
 8005a18:	bf28      	it	cs
 8005a1a:	460a      	movcs	r2, r1
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	f000 fc63 	bl	80062e8 <USBD_CtlContinueRx>
  return USBD_OK;
 8005a22:	4628      	mov	r0, r5
 8005a24:	e7da      	b.n	80059dc <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a26:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8005a2a:	f7ff ffc8 	bl	80059be <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d1e9      	bne.n	8005a06 <USBD_LL_DataOutStage+0x40>
 8005a32:	e7e3      	b.n	80059fc <USBD_LL_DataOutStage+0x36>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a34:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8005a38:	f7ff ffc3 	bl	80059c2 <USBD_CoreFindEP>
            break;
 8005a3c:	e7f7      	b.n	8005a2e <USBD_LL_DataOutStage+0x68>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a3e:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8005a42:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	d0dc      	beq.n	8005a06 <USBD_LL_DataOutStage+0x40>
              pdev->classId = idx;
 8005a4c:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	4620      	mov	r0, r4
 8005a54:	4798      	blx	r3
 8005a56:	e7d6      	b.n	8005a06 <USBD_LL_DataOutStage+0x40>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a58:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005a5c:	f7ff ffb1 	bl	80059c2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a60:	b990      	cbnz	r0, 8005a88 <USBD_LL_DataOutStage+0xc2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a62:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d1b7      	bne.n	80059dc <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a6c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8005a70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d0b0      	beq.n	80059dc <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8005a7a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	4629      	mov	r1, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	4798      	blx	r3
      if (ret != USBD_OK)
 8005a86:	e7a9      	b.n	80059dc <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e7a7      	b.n	80059dc <USBD_LL_DataOutStage+0x16>

08005a8c <USBD_LL_DataInStage>:
{
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4604      	mov	r4, r0
  if (epnum == 0U)
 8005a90:	460d      	mov	r5, r1
 8005a92:	2900      	cmp	r1, #0
 8005a94:	d14b      	bne.n	8005b2e <USBD_LL_DataInStage+0xa2>
 8005a96:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a98:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005a9c:	2a02      	cmp	r2, #2
 8005a9e:	d007      	beq.n	8005ab0 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8005aa0:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8005aa4:	b118      	cbz	r0, 8005aae <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8005aac:	4628      	mov	r0, r5
}
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005ab0:	69c2      	ldr	r2, [r0, #28]
 8005ab2:	6a01      	ldr	r1, [r0, #32]
 8005ab4:	428a      	cmp	r2, r1
 8005ab6:	d80e      	bhi.n	8005ad6 <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 8005ab8:	428a      	cmp	r2, r1
 8005aba:	d018      	beq.n	8005aee <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005abc:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d027      	beq.n	8005b16 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ac6:	2180      	movs	r1, #128	@ 0x80
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f003 fd03 	bl	80094d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 fc1d 	bl	800630e <USBD_CtlReceiveStatus>
 8005ad4:	e7e4      	b.n	8005aa0 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005ad6:	1a52      	subs	r2, r2, r1
 8005ad8:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ada:	4619      	mov	r1, r3
 8005adc:	f000 fbed 	bl	80062ba <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f003 fd14 	bl	8009514 <USBD_LL_PrepareReceive>
 8005aec:	e7d8      	b.n	8005aa0 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8005aee:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005af0:	4299      	cmp	r1, r3
 8005af2:	d8e3      	bhi.n	8005abc <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8005af4:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d2df      	bcs.n	8005abc <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005afc:	2200      	movs	r2, #0
 8005afe:	4611      	mov	r1, r2
 8005b00:	f000 fbdb 	bl	80062ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b04:	2100      	movs	r1, #0
 8005b06:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f003 fd00 	bl	8009514 <USBD_LL_PrepareReceive>
 8005b14:	e7c4      	b.n	8005aa0 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b16:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	d0d2      	beq.n	8005ac6 <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4798      	blx	r3
 8005b2c:	e7cb      	b.n	8005ac6 <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b2e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005b32:	f7ff ff46 	bl	80059c2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b36:	b990      	cbnz	r0, 8005b5e <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b38:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d1b5      	bne.n	8005aae <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b42:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8005b46:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	2a00      	cmp	r2, #0
 8005b4e:	d0ae      	beq.n	8005aae <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8005b50:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	4629      	mov	r1, r5
 8005b58:	4620      	mov	r0, r4
 8005b5a:	4798      	blx	r3
          if (ret != USBD_OK)
 8005b5c:	e7a7      	b.n	8005aae <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e7a5      	b.n	8005aae <USBD_LL_DataInStage+0x22>

08005b62 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8005b62:	880b      	ldrh	r3, [r1, #0]
 8005b64:	7802      	ldrb	r2, [r0, #0]
 8005b66:	4413      	add	r3, r2
 8005b68:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b6a:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8005b6c:	4418      	add	r0, r3
 8005b6e:	4770      	bx	lr

08005b70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b70:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8005b72:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005b74:	e002      	b.n	8005b7c <USBD_GetLen+0xc>
  {
    len++;
 8005b76:	3001      	adds	r0, #1
 8005b78:	b2c0      	uxtb	r0, r0
    pbuff++;
 8005b7a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	d1f9      	bne.n	8005b76 <USBD_GetLen+0x6>
  }

  return len;
}
 8005b82:	4770      	bx	lr

08005b84 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005b84:	780b      	ldrb	r3, [r1, #0]
 8005b86:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b88:	784b      	ldrb	r3, [r1, #1]
 8005b8a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8005b8c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8005b8e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8005b94:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8005b96:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b98:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8005b9e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8005ba0:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ba2:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ba4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005ba8:	80c3      	strh	r3, [r0, #6]
}
 8005baa:	4770      	bx	lr

08005bac <USBD_CtlError>:
{
 8005bac:	b510      	push	{r4, lr}
 8005bae:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	f003 fc8f 	bl	80094d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f003 fc8b 	bl	80094d4 <USBD_LL_StallEP>
}
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <USBD_GetDescriptor>:
{
 8005bc0:	b530      	push	{r4, r5, lr}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005bce:	884a      	ldrh	r2, [r1, #2]
 8005bd0:	0a13      	lsrs	r3, r2, #8
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	f200 80ab 	bhi.w	8005d30 <USBD_GetDescriptor+0x170>
 8005bda:	e8df f003 	tbb	[pc, r3]
 8005bde:	1f04      	.short	0x1f04
 8005be0:	8da9a933 	.word	0x8da9a933
 8005be4:	9a          	.byte	0x9a
 8005be5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005be6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f10d 0106 	add.w	r1, sp, #6
 8005bf0:	7c00      	ldrb	r0, [r0, #16]
 8005bf2:	4798      	blx	r3
  if (req->wLength != 0U)
 8005bf4:	88ea      	ldrh	r2, [r5, #6]
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	f000 80a3 	beq.w	8005d42 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8005bfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8099 	beq.w	8005d38 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8005c06:	429a      	cmp	r2, r3
 8005c08:	bf28      	it	cs
 8005c0a:	461a      	movcs	r2, r3
 8005c0c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c10:	4601      	mov	r1, r0
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 fb44 	bl	80062a0 <USBD_CtlSendData>
}
 8005c18:	b003      	add	sp, #12
 8005c1a:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c1c:	7c03      	ldrb	r3, [r0, #16]
 8005c1e:	b943      	cbnz	r3, 8005c32 <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	f10d 0006 	add.w	r0, sp, #6
 8005c2a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005c30:	e7e0      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	f10d 0006 	add.w	r0, sp, #6
 8005c3c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005c42:	e7d7      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	2a05      	cmp	r2, #5
 8005c48:	d852      	bhi.n	8005cf0 <USBD_GetDescriptor+0x130>
 8005c4a:	e8df f002 	tbb	[pc, r2]
 8005c4e:	1003      	.short	0x1003
 8005c50:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b123      	cbz	r3, 8005c66 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c5c:	f10d 0106 	add.w	r1, sp, #6
 8005c60:	7c00      	ldrb	r0, [r0, #16]
 8005c62:	4798      	blx	r3
  if (err != 0U)
 8005c64:	e7c6      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7ff ffa0 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005c6c:	e7d4      	b.n	8005c18 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	b123      	cbz	r3, 8005c80 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c76:	f10d 0106 	add.w	r1, sp, #6
 8005c7a:	7c00      	ldrb	r0, [r0, #16]
 8005c7c:	4798      	blx	r3
  if (err != 0U)
 8005c7e:	e7b9      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7ff ff93 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005c86:	e7c7      	b.n	8005c18 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	b123      	cbz	r3, 8005c9a <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c90:	f10d 0106 	add.w	r1, sp, #6
 8005c94:	7c00      	ldrb	r0, [r0, #16]
 8005c96:	4798      	blx	r3
  if (err != 0U)
 8005c98:	e7ac      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	f7ff ff86 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005ca0:	e7ba      	b.n	8005c18 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ca2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	b123      	cbz	r3, 8005cb4 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005caa:	f10d 0106 	add.w	r1, sp, #6
 8005cae:	7c00      	ldrb	r0, [r0, #16]
 8005cb0:	4798      	blx	r3
  if (err != 0U)
 8005cb2:	e79f      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	f7ff ff79 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005cba:	e7ad      	b.n	8005c18 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005cbc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	b123      	cbz	r3, 8005cce <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005cc4:	f10d 0106 	add.w	r1, sp, #6
 8005cc8:	7c00      	ldrb	r0, [r0, #16]
 8005cca:	4798      	blx	r3
  if (err != 0U)
 8005ccc:	e792      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7ff ff6c 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005cd4:	e7a0      	b.n	8005c18 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cd6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	b123      	cbz	r3, 8005ce8 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cde:	f10d 0106 	add.w	r1, sp, #6
 8005ce2:	7c00      	ldrb	r0, [r0, #16]
 8005ce4:	4798      	blx	r3
  if (err != 0U)
 8005ce6:	e785      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7ff ff5f 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005cee:	e793      	b.n	8005c18 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7ff ff5b 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005cf6:	e78f      	b.n	8005c18 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf8:	7c03      	ldrb	r3, [r0, #16]
 8005cfa:	b933      	cbnz	r3, 8005d0a <USBD_GetDescriptor+0x14a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005cfc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d02:	f10d 0006 	add.w	r0, sp, #6
 8005d06:	4798      	blx	r3
  if (err != 0U)
 8005d08:	e774      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7ff ff4e 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005d10:	e782      	b.n	8005c18 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	7c03      	ldrb	r3, [r0, #16]
 8005d14:	b943      	cbnz	r3, 8005d28 <USBD_GetDescriptor+0x168>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d16:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1c:	f10d 0006 	add.w	r0, sp, #6
 8005d20:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d22:	2307      	movs	r3, #7
 8005d24:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005d26:	e765      	b.n	8005bf4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005d28:	4629      	mov	r1, r5
 8005d2a:	f7ff ff3f 	bl	8005bac <USBD_CtlError>
  if (err != 0U)
 8005d2e:	e773      	b.n	8005c18 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7ff ff3b 	bl	8005bac <USBD_CtlError>
    return;
 8005d36:	e76f      	b.n	8005c18 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff ff36 	bl	8005bac <USBD_CtlError>
 8005d40:	e76a      	b.n	8005c18 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 fad8 	bl	80062f8 <USBD_CtlSendStatus>
 8005d48:	e766      	b.n	8005c18 <USBD_GetDescriptor+0x58>

08005d4a <USBD_SetAddress>:
{
 8005d4a:	b538      	push	{r3, r4, r5, lr}
 8005d4c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d4e:	888b      	ldrh	r3, [r1, #4]
 8005d50:	b9fb      	cbnz	r3, 8005d92 <USBD_SetAddress+0x48>
 8005d52:	88cb      	ldrh	r3, [r1, #6]
 8005d54:	b9eb      	cbnz	r3, 8005d92 <USBD_SetAddress+0x48>
 8005d56:	884b      	ldrh	r3, [r1, #2]
 8005d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d5a:	d81a      	bhi.n	8005d92 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d5c:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d60:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d00c      	beq.n	8005d84 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8005d6a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f003 fbc0 	bl	80094f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fabf 	bl	80062f8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005d7a:	b135      	cbz	r5, 8005d8a <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005d82:	e009      	b.n	8005d98 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8005d84:	f7ff ff12 	bl	8005bac <USBD_CtlError>
 8005d88:	e006      	b.n	8005d98 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005d90:	e002      	b.n	8005d98 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff ff0a 	bl	8005bac <USBD_CtlError>
}
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
	...

08005d9c <USBD_SetConfig>:
{
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8005da2:	788d      	ldrb	r5, [r1, #2]
 8005da4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e64 <USBD_SetConfig+0xc8>)
 8005da6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005da8:	2d01      	cmp	r5, #1
 8005daa:	d810      	bhi.n	8005dce <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8005dac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d00f      	beq.n	8005dd6 <USBD_SetConfig+0x3a>
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d026      	beq.n	8005e08 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8005dba:	f7ff fef7 	bl	8005bac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dbe:	4b29      	ldr	r3, [pc, #164]	@ (8005e64 <USBD_SetConfig+0xc8>)
 8005dc0:	7819      	ldrb	r1, [r3, #0]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f7ff fd24 	bl	8005810 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005dc8:	2503      	movs	r5, #3
}
 8005dca:	4628      	mov	r0, r5
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8005dce:	f7ff feed 	bl	8005bac <USBD_CtlError>
    return USBD_FAIL;
 8005dd2:	2503      	movs	r5, #3
 8005dd4:	e7f9      	b.n	8005dca <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8005dd6:	b1a5      	cbz	r5, 8005e02 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8005dd8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7ff fd0f 	bl	80057fe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005de0:	4605      	mov	r5, r0
 8005de2:	b138      	cbz	r0, 8005df4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8005de4:	4631      	mov	r1, r6
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7ff fee0 	bl	8005bac <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dec:	2302      	movs	r3, #2
 8005dee:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005df2:	e7ea      	b.n	8005dca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 fa7f 	bl	80062f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005e00:	e7e3      	b.n	8005dca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8005e02:	f000 fa79 	bl	80062f8 <USBD_CtlSendStatus>
 8005e06:	e7e0      	b.n	8005dca <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8005e08:	b1cd      	cbz	r5, 8005e3e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8005e0a:	6841      	ldr	r1, [r0, #4]
 8005e0c:	428d      	cmp	r5, r1
 8005e0e:	d025      	beq.n	8005e5c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e10:	b2c9      	uxtb	r1, r1
 8005e12:	f7ff fcfd 	bl	8005810 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e16:	4b13      	ldr	r3, [pc, #76]	@ (8005e64 <USBD_SetConfig+0xc8>)
 8005e18:	7819      	ldrb	r1, [r3, #0]
 8005e1a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f7ff fcee 	bl	80057fe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005e22:	4605      	mov	r5, r0
 8005e24:	b1b0      	cbz	r0, 8005e54 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8005e26:	4631      	mov	r1, r6
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7ff febf 	bl	8005bac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e2e:	7921      	ldrb	r1, [r4, #4]
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff fced 	bl	8005810 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e36:	2302      	movs	r3, #2
 8005e38:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005e3c:	e7c5      	b.n	8005dca <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005e44:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7ff fce2 	bl	8005810 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 fa53 	bl	80062f8 <USBD_CtlSendStatus>
 8005e52:	e7ba      	b.n	8005dca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fa4f 	bl	80062f8 <USBD_CtlSendStatus>
 8005e5a:	e7b6      	b.n	8005dca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8005e5c:	f000 fa4c 	bl	80062f8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005e60:	2500      	movs	r5, #0
 8005e62:	e7b2      	b.n	8005dca <USBD_SetConfig+0x2e>
 8005e64:	2000114d 	.word	0x2000114d

08005e68 <USBD_GetConfig>:
{
 8005e68:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8005e6a:	88cb      	ldrh	r3, [r1, #6]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10b      	bne.n	8005e88 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8005e70:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d909      	bls.n	8005e8e <USBD_GetConfig+0x26>
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d109      	bne.n	8005e92 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e7e:	2201      	movs	r2, #1
 8005e80:	1d01      	adds	r1, r0, #4
 8005e82:	f000 fa0d 	bl	80062a0 <USBD_CtlSendData>
        break;
 8005e86:	e001      	b.n	8005e8c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8005e88:	f7ff fe90 	bl	8005bac <USBD_CtlError>
}
 8005e8c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	b913      	cbnz	r3, 8005e98 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8005e92:	f7ff fe8b 	bl	8005bac <USBD_CtlError>
}
 8005e96:	e7f9      	b.n	8005e8c <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8005e98:	4601      	mov	r1, r0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f000 f9fd 	bl	80062a0 <USBD_CtlSendData>
        break;
 8005ea6:	e7f1      	b.n	8005e8c <USBD_GetConfig+0x24>

08005ea8 <USBD_GetStatus>:
{
 8005ea8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005eaa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d812      	bhi.n	8005eda <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8005eb4:	88cb      	ldrh	r3, [r1, #6]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d10c      	bne.n	8005ed4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8005ebe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005ec2:	b10b      	cbz	r3, 8005ec8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f100 010c 	add.w	r1, r0, #12
 8005ece:	f000 f9e7 	bl	80062a0 <USBD_CtlSendData>
}
 8005ed2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8005ed4:	f7ff fe6a 	bl	8005bac <USBD_CtlError>
        break;
 8005ed8:	e7fb      	b.n	8005ed2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8005eda:	f7ff fe67 	bl	8005bac <USBD_CtlError>
}
 8005ede:	e7f8      	b.n	8005ed2 <USBD_GetStatus+0x2a>

08005ee0 <USBD_SetFeature>:
{
 8005ee0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ee2:	884b      	ldrh	r3, [r1, #2]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d004      	beq.n	8005ef2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d007      	beq.n	8005efc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8005eec:	f7ff fe5e 	bl	8005bac <USBD_CtlError>
}
 8005ef0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8005ef2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ef6:	f000 f9ff 	bl	80062f8 <USBD_CtlSendStatus>
 8005efa:	e7f9      	b.n	8005ef0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005efc:	888b      	ldrh	r3, [r1, #4]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f04:	f000 f9f8 	bl	80062f8 <USBD_CtlSendStatus>
 8005f08:	e7f2      	b.n	8005ef0 <USBD_SetFeature+0x10>

08005f0a <USBD_ClrFeature>:
{
 8005f0a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005f0c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f10:	3b01      	subs	r3, #1
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d809      	bhi.n	8005f2a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f16:	884b      	ldrh	r3, [r1, #2]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d000      	beq.n	8005f1e <USBD_ClrFeature+0x14>
}
 8005f1c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f24:	f000 f9e8 	bl	80062f8 <USBD_CtlSendStatus>
 8005f28:	e7f8      	b.n	8005f1c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005f2a:	f7ff fe3f 	bl	8005bac <USBD_CtlError>
}
 8005f2e:	e7f5      	b.n	8005f1c <USBD_ClrFeature+0x12>

08005f30 <USBD_StdDevReq>:
{
 8005f30:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f32:	780c      	ldrb	r4, [r1, #0]
 8005f34:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8005f38:	2c20      	cmp	r4, #32
 8005f3a:	d006      	beq.n	8005f4a <USBD_StdDevReq+0x1a>
 8005f3c:	2c40      	cmp	r4, #64	@ 0x40
 8005f3e:	d004      	beq.n	8005f4a <USBD_StdDevReq+0x1a>
 8005f40:	b16c      	cbz	r4, 8005f5e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8005f42:	f7ff fe33 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005f46:	2400      	movs	r4, #0
      break;
 8005f48:	e007      	b.n	8005f5a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f4a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005f4e:	33ae      	adds	r3, #174	@ 0xae
 8005f50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	4798      	blx	r3
 8005f58:	4604      	mov	r4, r0
}
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005f5e:	784d      	ldrb	r5, [r1, #1]
 8005f60:	2d09      	cmp	r5, #9
 8005f62:	d81d      	bhi.n	8005fa0 <USBD_StdDevReq+0x70>
 8005f64:	e8df f005 	tbb	[pc, r5]
 8005f68:	161c1912 	.word	0x161c1912
 8005f6c:	1c05081c 	.word	0x1c05081c
 8005f70:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8005f72:	f7ff fe25 	bl	8005bc0 <USBD_GetDescriptor>
          break;
 8005f76:	e7f0      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8005f78:	f7ff fee7 	bl	8005d4a <USBD_SetAddress>
          break;
 8005f7c:	e7ed      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8005f7e:	f7ff ff0d 	bl	8005d9c <USBD_SetConfig>
 8005f82:	4604      	mov	r4, r0
          break;
 8005f84:	e7e9      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8005f86:	f7ff ff6f 	bl	8005e68 <USBD_GetConfig>
          break;
 8005f8a:	e7e6      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8005f8c:	f7ff ff8c 	bl	8005ea8 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005f90:	462c      	mov	r4, r5
          break;
 8005f92:	e7e2      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8005f94:	f7ff ffa4 	bl	8005ee0 <USBD_SetFeature>
          break;
 8005f98:	e7df      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8005f9a:	f7ff ffb6 	bl	8005f0a <USBD_ClrFeature>
          break;
 8005f9e:	e7dc      	b.n	8005f5a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8005fa0:	f7ff fe04 	bl	8005bac <USBD_CtlError>
          break;
 8005fa4:	e7d9      	b.n	8005f5a <USBD_StdDevReq+0x2a>

08005fa6 <USBD_StdItfReq>:
{
 8005fa6:	b570      	push	{r4, r5, r6, lr}
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fac:	780b      	ldrb	r3, [r1, #0]
 8005fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d007      	beq.n	8005fc6 <USBD_StdItfReq+0x20>
 8005fb6:	2b40      	cmp	r3, #64	@ 0x40
 8005fb8:	d005      	beq.n	8005fc6 <USBD_StdItfReq+0x20>
 8005fba:	b123      	cbz	r3, 8005fc6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8005fbc:	f7ff fdf6 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc0:	2600      	movs	r6, #0
}
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8005fc6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d826      	bhi.n	800601e <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fd0:	7921      	ldrb	r1, [r4, #4]
 8005fd2:	2901      	cmp	r1, #1
 8005fd4:	d905      	bls.n	8005fe2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f7ff fde7 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005fde:	2600      	movs	r6, #0
 8005fe0:	e7ef      	b.n	8005fc2 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f7ff fceb 	bl	80059be <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fe8:	b968      	cbnz	r0, 8006006 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8005fea:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8005fee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005ff2:	6891      	ldr	r1, [r2, #8]
 8005ff4:	b189      	cbz	r1, 800601a <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8005ff6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ffa:	6893      	ldr	r3, [r2, #8]
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	4798      	blx	r3
 8006002:	4606      	mov	r6, r0
 8006004:	e000      	b.n	8006008 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8006006:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006008:	88e3      	ldrh	r3, [r4, #6]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1d9      	bne.n	8005fc2 <USBD_StdItfReq+0x1c>
 800600e:	2e00      	cmp	r6, #0
 8006010:	d1d7      	bne.n	8005fc2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8006012:	4628      	mov	r0, r5
 8006014:	f000 f970 	bl	80062f8 <USBD_CtlSendStatus>
 8006018:	e7d3      	b.n	8005fc2 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800601a:	2603      	movs	r6, #3
 800601c:	e7f4      	b.n	8006008 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f7ff fdc3 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2600      	movs	r6, #0
          break;
 8006028:	e7cb      	b.n	8005fc2 <USBD_StdItfReq+0x1c>

0800602a <USBD_StdEPReq>:
{
 800602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	4606      	mov	r6, r0
 8006030:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8006032:	888b      	ldrh	r3, [r1, #4]
 8006034:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006036:	780c      	ldrb	r4, [r1, #0]
 8006038:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800603c:	2c20      	cmp	r4, #32
 800603e:	d008      	beq.n	8006052 <USBD_StdEPReq+0x28>
 8006040:	2c40      	cmp	r4, #64	@ 0x40
 8006042:	d006      	beq.n	8006052 <USBD_StdEPReq+0x28>
 8006044:	b1dc      	cbz	r4, 800607e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8006046:	f7ff fdb1 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800604a:	2400      	movs	r4, #0
}
 800604c:	4620      	mov	r0, r4
 800604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006052:	4639      	mov	r1, r7
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff fcb4 	bl	80059c2 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800605a:	4604      	mov	r4, r0
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 80f8 	bne.w	8006252 <USBD_StdEPReq+0x228>
        pdev->classId = idx;
 8006062:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8006066:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800606a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0eb      	beq.n	800604c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	4798      	blx	r3
 800607a:	4604      	mov	r4, r0
 800607c:	e7e6      	b.n	800604c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800607e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8006082:	f1b8 0f01 	cmp.w	r8, #1
 8006086:	d031      	beq.n	80060ec <USBD_StdEPReq+0xc2>
 8006088:	f1b8 0f03 	cmp.w	r8, #3
 800608c:	d005      	beq.n	800609a <USBD_StdEPReq+0x70>
 800608e:	f1b8 0f00 	cmp.w	r8, #0
 8006092:	d067      	beq.n	8006164 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8006094:	f7ff fd8a 	bl	8005bac <USBD_CtlError>
          break;
 8006098:	e7d8      	b.n	800604c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800609a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d004      	beq.n	80060ae <USBD_StdEPReq+0x84>
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d012      	beq.n	80060ce <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 80060a8:	f7ff fd80 	bl	8005bac <USBD_CtlError>
              break;
 80060ac:	e7ce      	b.n	800604c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ae:	b10f      	cbz	r7, 80060b4 <USBD_StdEPReq+0x8a>
 80060b0:	2f80      	cmp	r7, #128	@ 0x80
 80060b2:	d104      	bne.n	80060be <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff fd78 	bl	8005bac <USBD_CtlError>
 80060bc:	e7c6      	b.n	800604c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060be:	4639      	mov	r1, r7
 80060c0:	f003 fa08 	bl	80094d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c4:	2180      	movs	r1, #128	@ 0x80
 80060c6:	4630      	mov	r0, r6
 80060c8:	f003 fa04 	bl	80094d4 <USBD_LL_StallEP>
 80060cc:	e7be      	b.n	800604c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060ce:	884b      	ldrh	r3, [r1, #2]
 80060d0:	b923      	cbnz	r3, 80060dc <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060d2:	b11f      	cbz	r7, 80060dc <USBD_StdEPReq+0xb2>
 80060d4:	2f80      	cmp	r7, #128	@ 0x80
 80060d6:	d001      	beq.n	80060dc <USBD_StdEPReq+0xb2>
 80060d8:	88cb      	ldrh	r3, [r1, #6]
 80060da:	b11b      	cbz	r3, 80060e4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 f90b 	bl	80062f8 <USBD_CtlSendStatus>
              break;
 80060e2:	e7b3      	b.n	800604c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060e4:	4639      	mov	r1, r7
 80060e6:	f003 f9f5 	bl	80094d4 <USBD_LL_StallEP>
 80060ea:	e7f7      	b.n	80060dc <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80060ec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d004      	beq.n	8006100 <USBD_StdEPReq+0xd6>
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d012      	beq.n	8006120 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80060fa:	f7ff fd57 	bl	8005bac <USBD_CtlError>
              break;
 80060fe:	e7a5      	b.n	800604c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006100:	b10f      	cbz	r7, 8006106 <USBD_StdEPReq+0xdc>
 8006102:	2f80      	cmp	r7, #128	@ 0x80
 8006104:	d104      	bne.n	8006110 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8006106:	4629      	mov	r1, r5
 8006108:	4630      	mov	r0, r6
 800610a:	f7ff fd4f 	bl	8005bac <USBD_CtlError>
 800610e:	e79d      	b.n	800604c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006110:	4639      	mov	r1, r7
 8006112:	f003 f9df 	bl	80094d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006116:	2180      	movs	r1, #128	@ 0x80
 8006118:	4630      	mov	r0, r6
 800611a:	f003 f9db 	bl	80094d4 <USBD_LL_StallEP>
 800611e:	e795      	b.n	800604c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006120:	884b      	ldrh	r3, [r1, #2]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d192      	bne.n	800604c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006126:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800612a:	d117      	bne.n	800615c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800612c:	4630      	mov	r0, r6
 800612e:	f000 f8e3 	bl	80062f8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006132:	4639      	mov	r1, r7
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff fc44 	bl	80059c2 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800613a:	2800      	cmp	r0, #0
 800613c:	d186      	bne.n	800604c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800613e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8006142:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8006146:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800614a:	6892      	ldr	r2, [r2, #8]
 800614c:	2a00      	cmp	r2, #0
 800614e:	f000 8082 	beq.w	8006256 <USBD_StdEPReq+0x22c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006152:	4629      	mov	r1, r5
 8006154:	4630      	mov	r0, r6
 8006156:	4790      	blx	r2
 8006158:	4604      	mov	r4, r0
 800615a:	e777      	b.n	800604c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800615c:	4639      	mov	r1, r7
 800615e:	f003 f9c1 	bl	80094e4 <USBD_LL_ClearStallEP>
 8006162:	e7e3      	b.n	800612c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8006164:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	2a02      	cmp	r2, #2
 800616c:	d005      	beq.n	800617a <USBD_StdEPReq+0x150>
 800616e:	2a03      	cmp	r2, #3
 8006170:	d027      	beq.n	80061c2 <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8006172:	f7ff fd1b 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	4644      	mov	r4, r8
              break;
 8006178:	e768      	b.n	800604c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800617a:	b10f      	cbz	r7, 8006180 <USBD_StdEPReq+0x156>
 800617c:	2f80      	cmp	r7, #128	@ 0x80
 800617e:	d113      	bne.n	80061a8 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006180:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006184:	d114      	bne.n	80061b0 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006186:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800618a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800618e:	00b9      	lsls	r1, r7, #2
 8006190:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8006194:	4431      	add	r1, r6
 8006196:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8006198:	2300      	movs	r3, #0
 800619a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800619c:	2202      	movs	r2, #2
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f87e 	bl	80062a0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80061a4:	4644      	mov	r4, r8
              break;
 80061a6:	e751      	b.n	800604c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80061a8:	f7ff fd00 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80061ac:	4644      	mov	r4, r8
                break;
 80061ae:	e74d      	b.n	800604c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061b0:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80061b4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80061b8:	00b9      	lsls	r1, r7, #2
 80061ba:	3110      	adds	r1, #16
 80061bc:	4431      	add	r1, r6
 80061be:	3104      	adds	r1, #4
 80061c0:	e7ea      	b.n	8006198 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 80061c2:	b25b      	sxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db1f      	blt.n	8006208 <USBD_StdEPReq+0x1de>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061c8:	f007 020f 	and.w	r2, r7, #15
 80061cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80061d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061d4:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 80061d8:	b31a      	cbz	r2, 8006222 <USBD_StdEPReq+0x1f8>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061da:	2b00      	cmp	r3, #0
 80061dc:	db25      	blt.n	800622a <USBD_StdEPReq+0x200>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061de:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061e6:	009c      	lsls	r4, r3, #2
 80061e8:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 80061ec:	4434      	add	r4, r6
 80061ee:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061f0:	b10f      	cbz	r7, 80061f6 <USBD_StdEPReq+0x1cc>
 80061f2:	2f80      	cmp	r7, #128	@ 0x80
 80061f4:	d122      	bne.n	800623c <USBD_StdEPReq+0x212>
                pep->status = 0x0000U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061fa:	2202      	movs	r2, #2
 80061fc:	4621      	mov	r1, r4
 80061fe:	4630      	mov	r0, r6
 8006200:	f000 f84e 	bl	80062a0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006204:	4644      	mov	r4, r8
              break;
 8006206:	e721      	b.n	800604c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006208:	f007 020f 	and.w	r2, r7, #15
 800620c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006210:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006214:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8006216:	2a00      	cmp	r2, #0
 8006218:	d1df      	bne.n	80061da <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 800621a:	f7ff fcc7 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	4644      	mov	r4, r8
                  break;
 8006220:	e714      	b.n	800604c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8006222:	f7ff fcc3 	bl	8005bac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006226:	4644      	mov	r4, r8
                  break;
 8006228:	e710      	b.n	800604c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800622a:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800622e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006232:	009c      	lsls	r4, r3, #2
 8006234:	3410      	adds	r4, #16
 8006236:	4434      	add	r4, r6
 8006238:	3404      	adds	r4, #4
 800623a:	e7d9      	b.n	80061f0 <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800623c:	4639      	mov	r1, r7
 800623e:	4630      	mov	r0, r6
 8006240:	f003 f902 	bl	8009448 <USBD_LL_IsStallEP>
 8006244:	b110      	cbz	r0, 800624c <USBD_StdEPReq+0x222>
                pep->status = 0x0001U;
 8006246:	2301      	movs	r3, #1
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	e7d6      	b.n	80061fa <USBD_StdEPReq+0x1d0>
                pep->status = 0x0000U;
 800624c:	2300      	movs	r3, #0
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	e7d3      	b.n	80061fa <USBD_StdEPReq+0x1d0>
  USBD_StatusTypeDef ret = USBD_OK;
 8006252:	2400      	movs	r4, #0
 8006254:	e6fa      	b.n	800604c <USBD_StdEPReq+0x22>
 8006256:	4604      	mov	r4, r0
 8006258:	e6f8      	b.n	800604c <USBD_StdEPReq+0x22>

0800625a <USBD_GetString>:
  if (desc == NULL)
 800625a:	b300      	cbz	r0, 800629e <USBD_GetString+0x44>
{
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	460d      	mov	r5, r1
 8006260:	4616      	mov	r6, r2
 8006262:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006264:	f7ff fc84 	bl	8005b70 <USBD_GetLen>
 8006268:	3001      	adds	r0, #1
 800626a:	0043      	lsls	r3, r0, #1
 800626c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006270:	d806      	bhi.n	8006280 <USBD_GetString+0x26>
 8006272:	b29b      	uxth	r3, r3
 8006274:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8006276:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006278:	2303      	movs	r3, #3
 800627a:	706b      	strb	r3, [r5, #1]
  idx++;
 800627c:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800627e:	e00a      	b.n	8006296 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006284:	e7f6      	b.n	8006274 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8006286:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8006288:	3401      	adds	r4, #1
    idx++;
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800628e:	2100      	movs	r1, #0
 8006290:	54a9      	strb	r1, [r5, r2]
    idx++;
 8006292:	3302      	adds	r3, #2
 8006294:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8006296:	7822      	ldrb	r2, [r4, #0]
 8006298:	2a00      	cmp	r2, #0
 800629a:	d1f4      	bne.n	8006286 <USBD_GetString+0x2c>
}
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	4770      	bx	lr

080062a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062a0:	b508      	push	{r3, lr}
 80062a2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062a4:	2202      	movs	r2, #2
 80062a6:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80062aa:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80062ac:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062ae:	460a      	mov	r2, r1
 80062b0:	2100      	movs	r1, #0
 80062b2:	f003 f927 	bl	8009504 <USBD_LL_Transmit>

  return USBD_OK;
}
 80062b6:	2000      	movs	r0, #0
 80062b8:	bd08      	pop	{r3, pc}

080062ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062ba:	b508      	push	{r3, lr}
 80062bc:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062be:	460a      	mov	r2, r1
 80062c0:	2100      	movs	r1, #0
 80062c2:	f003 f91f 	bl	8009504 <USBD_LL_Transmit>

  return USBD_OK;
}
 80062c6:	2000      	movs	r0, #0
 80062c8:	bd08      	pop	{r3, pc}

080062ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062ca:	b508      	push	{r3, lr}
 80062cc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062ce:	2203      	movs	r2, #3
 80062d0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80062d4:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062d8:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062dc:	460a      	mov	r2, r1
 80062de:	2100      	movs	r1, #0
 80062e0:	f003 f918 	bl	8009514 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80062e4:	2000      	movs	r0, #0
 80062e6:	bd08      	pop	{r3, pc}

080062e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062e8:	b508      	push	{r3, lr}
 80062ea:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062ec:	460a      	mov	r2, r1
 80062ee:	2100      	movs	r1, #0
 80062f0:	f003 f910 	bl	8009514 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80062f4:	2000      	movs	r0, #0
 80062f6:	bd08      	pop	{r3, pc}

080062f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80062f8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80062fa:	2204      	movs	r2, #4
 80062fc:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006300:	2300      	movs	r3, #0
 8006302:	461a      	mov	r2, r3
 8006304:	4619      	mov	r1, r3
 8006306:	f003 f8fd 	bl	8009504 <USBD_LL_Transmit>

  return USBD_OK;
}
 800630a:	2000      	movs	r0, #0
 800630c:	bd08      	pop	{r3, pc}

0800630e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800630e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006310:	2205      	movs	r2, #5
 8006312:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006316:	2300      	movs	r3, #0
 8006318:	461a      	mov	r2, r3
 800631a:	4619      	mov	r1, r3
 800631c:	f003 f8fa 	bl	8009514 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006320:	2000      	movs	r0, #0
 8006322:	bd08      	pop	{r3, pc}

08006324 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006324:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006326:	4b04      	ldr	r3, [pc, #16]	@ (8006338 <disk_status+0x14>)
 8006328:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800632c:	6852      	ldr	r2, [r2, #4]
 800632e:	6852      	ldr	r2, [r2, #4]
 8006330:	4403      	add	r3, r0
 8006332:	7a18      	ldrb	r0, [r3, #8]
 8006334:	4790      	blx	r2
  return stat;
}
 8006336:	bd08      	pop	{r3, pc}
 8006338:	200015d8 	.word	0x200015d8

0800633c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800633c:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <disk_initialize+0x28>)
 800633e:	5c1b      	ldrb	r3, [r3, r0]
 8006340:	b973      	cbnz	r3, 8006360 <disk_initialize+0x24>
{
 8006342:	b510      	push	{r4, lr}
 8006344:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006346:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <disk_initialize+0x28>)
 8006348:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800634c:	6852      	ldr	r2, [r2, #4]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	4403      	add	r3, r0
 8006352:	7a18      	ldrb	r0, [r3, #8]
 8006354:	4790      	blx	r2
    if(stat == RES_OK)
 8006356:	b910      	cbnz	r0, 800635e <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 8006358:	4b02      	ldr	r3, [pc, #8]	@ (8006364 <disk_initialize+0x28>)
 800635a:	2201      	movs	r2, #1
 800635c:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 800635e:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 8006360:	2000      	movs	r0, #0
}
 8006362:	4770      	bx	lr
 8006364:	200015d8 	.word	0x200015d8

08006368 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006368:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800636a:	4c04      	ldr	r4, [pc, #16]	@ (800637c <disk_read+0x14>)
 800636c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006370:	686d      	ldr	r5, [r5, #4]
 8006372:	68ad      	ldr	r5, [r5, #8]
 8006374:	4404      	add	r4, r0
 8006376:	7a20      	ldrb	r0, [r4, #8]
 8006378:	47a8      	blx	r5
  return res;
}
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	200015d8 	.word	0x200015d8

08006380 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006380:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006382:	4c04      	ldr	r4, [pc, #16]	@ (8006394 <disk_write+0x14>)
 8006384:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006388:	686d      	ldr	r5, [r5, #4]
 800638a:	68ed      	ldr	r5, [r5, #12]
 800638c:	4404      	add	r4, r0
 800638e:	7a20      	ldrb	r0, [r4, #8]
 8006390:	47a8      	blx	r5
  return res;
}
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	200015d8 	.word	0x200015d8

08006398 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006398:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800639a:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <disk_ioctl+0x14>)
 800639c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80063a0:	6864      	ldr	r4, [r4, #4]
 80063a2:	6924      	ldr	r4, [r4, #16]
 80063a4:	4403      	add	r3, r0
 80063a6:	7a18      	ldrb	r0, [r3, #8]
 80063a8:	47a0      	blx	r4
  return res;
}
 80063aa:	bd10      	pop	{r4, pc}
 80063ac:	200015d8 	.word	0x200015d8

080063b0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80063b0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80063b2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80063b4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80063b8:	4770      	bx	lr

080063ba <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80063ba:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 80063bc:	7882      	ldrb	r2, [r0, #2]
 80063be:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 80063c2:	7843      	ldrb	r3, [r0, #1]
 80063c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80063c8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80063ca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80063ce:	4770      	bx	lr

080063d0 <ld_qword>:
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
	QWORD rv;

	rv = ptr[7];
 80063d0:	79c3      	ldrb	r3, [r0, #7]
	rv = rv << 8 | ptr[6];
 80063d2:	7982      	ldrb	r2, [r0, #6]
 80063d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[5];
 80063d8:	7943      	ldrb	r3, [r0, #5]
 80063da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[4];
 80063de:	7902      	ldrb	r2, [r0, #4]
 80063e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[3];
 80063e4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80063e8:	78c1      	ldrb	r1, [r0, #3]
 80063ea:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[2];
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80063f4:	7882      	ldrb	r2, [r0, #2]
 80063f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[1];
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006400:	7841      	ldrb	r1, [r0, #1]
 8006402:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800640a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800640e:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 8006412:	4770      	bx	lr

08006414 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006414:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8006416:	0a09      	lsrs	r1, r1, #8
 8006418:	7041      	strb	r1, [r0, #1]
}
 800641a:	4770      	bx	lr

0800641c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800641c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800641e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006422:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006424:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006428:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800642a:	0e09      	lsrs	r1, r1, #24
 800642c:	70c1      	strb	r1, [r0, #3]
}
 800642e:	4770      	bx	lr

08006430 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006430:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006432:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006436:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006438:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800643c:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800643e:	0e12      	lsrs	r2, r2, #24
 8006440:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8006442:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006444:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006448:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800644a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800644e:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 8006450:	0e1b      	lsrs	r3, r3, #24
 8006452:	71c3      	strb	r3, [r0, #7]
}
 8006454:	4770      	bx	lr

08006456 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8006456:	4694      	mov	ip, r2
 8006458:	b132      	cbz	r2, 8006468 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800645a:	780a      	ldrb	r2, [r1, #0]
 800645c:	3101      	adds	r1, #1
 800645e:	7002      	strb	r2, [r0, #0]
 8006460:	3001      	adds	r0, #1
		} while (--cnt);
 8006462:	f1bc 0c01 	subs.w	ip, ip, #1
 8006466:	d1f8      	bne.n	800645a <mem_cpy+0x4>
	}
}
 8006468:	4770      	bx	lr

0800646a <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800646a:	7001      	strb	r1, [r0, #0]
 800646c:	3001      	adds	r0, #1
	} while (--cnt);
 800646e:	3a01      	subs	r2, #1
 8006470:	d1fb      	bne.n	800646a <mem_set>
}
 8006472:	4770      	bx	lr

08006474 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006474:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8006476:	f89c 0000 	ldrb.w	r0, [ip]
 800647a:	f10c 0c01 	add.w	ip, ip, #1
 800647e:	780b      	ldrb	r3, [r1, #0]
 8006480:	3101      	adds	r1, #1
 8006482:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8006484:	3a01      	subs	r2, #1
 8006486:	d001      	beq.n	800648c <mem_cmp+0x18>
 8006488:	2800      	cmp	r0, #0
 800648a:	d0f4      	beq.n	8006476 <mem_cmp+0x2>

	return r;
}
 800648c:	4770      	bx	lr

0800648e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800648e:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8006490:	e000      	b.n	8006494 <chk_chr+0x6>
 8006492:	3301      	adds	r3, #1
 8006494:	7818      	ldrb	r0, [r3, #0]
 8006496:	b108      	cbz	r0, 800649c <chk_chr+0xe>
 8006498:	4288      	cmp	r0, r1
 800649a:	d1fa      	bne.n	8006492 <chk_chr+0x4>
	return *str;
}
 800649c:	4770      	bx	lr
	...

080064a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064a0:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064a2:	2500      	movs	r5, #0
 80064a4:	462b      	mov	r3, r5
 80064a6:	e001      	b.n	80064ac <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80064a8:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064aa:	3301      	adds	r3, #1
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d815      	bhi.n	80064dc <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 80064b0:	011a      	lsls	r2, r3, #4
 80064b2:	4c17      	ldr	r4, [pc, #92]	@ (8006510 <chk_lock+0x70>)
 80064b4:	58a2      	ldr	r2, [r4, r2]
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	d0f6      	beq.n	80064a8 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064ba:	6804      	ldr	r4, [r0, #0]
 80064bc:	42a2      	cmp	r2, r4
 80064be:	d1f4      	bne.n	80064aa <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 80064c0:	4a13      	ldr	r2, [pc, #76]	@ (8006510 <chk_lock+0x70>)
 80064c2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80064c6:	6854      	ldr	r4, [r2, #4]
 80064c8:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064ca:	4294      	cmp	r4, r2
 80064cc:	d1ed      	bne.n	80064aa <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 80064ce:	4a10      	ldr	r2, [pc, #64]	@ (8006510 <chk_lock+0x70>)
 80064d0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80064d4:	6894      	ldr	r4, [r2, #8]
 80064d6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 80064d8:	4294      	cmp	r4, r2
 80064da:	d1e6      	bne.n	80064aa <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d00a      	beq.n	80064f6 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064e0:	b9a1      	cbnz	r1, 800650c <chk_lock+0x6c>
 80064e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006510 <chk_lock+0x70>)
 80064e4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80064e8:	899b      	ldrh	r3, [r3, #12]
 80064ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ee:	d00b      	beq.n	8006508 <chk_lock+0x68>
 80064f0:	2000      	movs	r0, #0
}
 80064f2:	bc30      	pop	{r4, r5}
 80064f4:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80064f6:	b92d      	cbnz	r5, 8006504 <chk_lock+0x64>
 80064f8:	2902      	cmp	r1, #2
 80064fa:	d001      	beq.n	8006500 <chk_lock+0x60>
 80064fc:	2012      	movs	r0, #18
 80064fe:	e7f8      	b.n	80064f2 <chk_lock+0x52>
 8006500:	2000      	movs	r0, #0
 8006502:	e7f6      	b.n	80064f2 <chk_lock+0x52>
 8006504:	2000      	movs	r0, #0
 8006506:	e7f4      	b.n	80064f2 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006508:	2010      	movs	r0, #16
 800650a:	e7f2      	b.n	80064f2 <chk_lock+0x52>
 800650c:	2010      	movs	r0, #16
 800650e:	e7f0      	b.n	80064f2 <chk_lock+0x52>
 8006510:	200015b0 	.word	0x200015b0

08006514 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006514:	2000      	movs	r0, #0
 8006516:	e000      	b.n	800651a <enq_lock+0x6>
 8006518:	3001      	adds	r0, #1
 800651a:	2801      	cmp	r0, #1
 800651c:	d804      	bhi.n	8006528 <enq_lock+0x14>
 800651e:	0103      	lsls	r3, r0, #4
 8006520:	4a03      	ldr	r2, [pc, #12]	@ (8006530 <enq_lock+0x1c>)
 8006522:	58d3      	ldr	r3, [r2, r3]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f7      	bne.n	8006518 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8006528:	3802      	subs	r0, #2
 800652a:	bf18      	it	ne
 800652c:	2001      	movne	r0, #1
 800652e:	4770      	bx	lr
 8006530:	200015b0 	.word	0x200015b0

08006534 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006534:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006536:	2300      	movs	r3, #0
 8006538:	e000      	b.n	800653c <inc_lock+0x8>
 800653a:	3301      	adds	r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d813      	bhi.n	8006568 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8006540:	011a      	lsls	r2, r3, #4
 8006542:	4c23      	ldr	r4, [pc, #140]	@ (80065d0 <inc_lock+0x9c>)
 8006544:	58a4      	ldr	r4, [r4, r2]
 8006546:	6802      	ldr	r2, [r0, #0]
 8006548:	4294      	cmp	r4, r2
 800654a:	d1f6      	bne.n	800653a <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 800654c:	4a20      	ldr	r2, [pc, #128]	@ (80065d0 <inc_lock+0x9c>)
 800654e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006552:	6854      	ldr	r4, [r2, #4]
 8006554:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006556:	4294      	cmp	r4, r2
 8006558:	d1ef      	bne.n	800653a <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800655a:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <inc_lock+0x9c>)
 800655c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006560:	6894      	ldr	r4, [r2, #8]
 8006562:	6b02      	ldr	r2, [r0, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8006564:	4294      	cmp	r4, r2
 8006566:	d1e8      	bne.n	800653a <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006568:	2b02      	cmp	r3, #2
 800656a:	d008      	beq.n	800657e <inc_lock+0x4a>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800656c:	b1f9      	cbz	r1, 80065ae <inc_lock+0x7a>
 800656e:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <inc_lock+0x9c>)
 8006570:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006574:	8992      	ldrh	r2, [r2, #12]
 8006576:	bb4a      	cbnz	r2, 80065cc <inc_lock+0x98>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800657c:	e01d      	b.n	80065ba <inc_lock+0x86>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800657e:	2300      	movs	r3, #0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d805      	bhi.n	8006590 <inc_lock+0x5c>
 8006584:	011a      	lsls	r2, r3, #4
 8006586:	4c12      	ldr	r4, [pc, #72]	@ (80065d0 <inc_lock+0x9c>)
 8006588:	58a2      	ldr	r2, [r4, r2]
 800658a:	b10a      	cbz	r2, 8006590 <inc_lock+0x5c>
 800658c:	3301      	adds	r3, #1
 800658e:	e7f7      	b.n	8006580 <inc_lock+0x4c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006590:	2b02      	cmp	r3, #2
 8006592:	d019      	beq.n	80065c8 <inc_lock+0x94>
		Files[i].fs = dp->obj.fs;
 8006594:	4d0e      	ldr	r5, [pc, #56]	@ (80065d0 <inc_lock+0x9c>)
 8006596:	011c      	lsls	r4, r3, #4
 8006598:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800659c:	6806      	ldr	r6, [r0, #0]
 800659e:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80065a0:	6884      	ldr	r4, [r0, #8]
 80065a2:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80065a4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80065a6:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80065a8:	2000      	movs	r0, #0
 80065aa:	8190      	strh	r0, [r2, #12]
 80065ac:	e7de      	b.n	800656c <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065ae:	4a08      	ldr	r2, [pc, #32]	@ (80065d0 <inc_lock+0x9c>)
 80065b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80065b4:	8992      	ldrh	r2, [r2, #12]
 80065b6:	3201      	adds	r2, #1
 80065b8:	b292      	uxth	r2, r2
 80065ba:	4905      	ldr	r1, [pc, #20]	@ (80065d0 <inc_lock+0x9c>)
 80065bc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80065c0:	818a      	strh	r2, [r1, #12]

	return i + 1;
 80065c2:	1c58      	adds	r0, r3, #1
}
 80065c4:	bc70      	pop	{r4, r5, r6}
 80065c6:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065c8:	2000      	movs	r0, #0
 80065ca:	e7fb      	b.n	80065c4 <inc_lock+0x90>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80065cc:	2000      	movs	r0, #0
 80065ce:	e7f9      	b.n	80065c4 <inc_lock+0x90>
 80065d0:	200015b0 	.word	0x200015b0

080065d4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065d4:	3801      	subs	r0, #1
 80065d6:	2801      	cmp	r0, #1
 80065d8:	d815      	bhi.n	8006606 <dec_lock+0x32>
		n = Files[i].ctr;
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <dec_lock+0x3c>)
 80065dc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80065e0:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e6:	d003      	beq.n	80065f0 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 80065e8:	b143      	cbz	r3, 80065fc <dec_lock+0x28>
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	e000      	b.n	80065f2 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065f0:	2300      	movs	r3, #0
		Files[i].ctr = n;
 80065f2:	4a07      	ldr	r2, [pc, #28]	@ (8006610 <dec_lock+0x3c>)
 80065f4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80065f8:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065fa:	b933      	cbnz	r3, 800660a <dec_lock+0x36>
 80065fc:	0103      	lsls	r3, r0, #4
 80065fe:	2000      	movs	r0, #0
 8006600:	4a03      	ldr	r2, [pc, #12]	@ (8006610 <dec_lock+0x3c>)
 8006602:	50d0      	str	r0, [r2, r3]
 8006604:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006606:	2002      	movs	r0, #2
 8006608:	4770      	bx	lr
		res = FR_OK;
 800660a:	2000      	movs	r0, #0
	}
	return res;
}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	200015b0 	.word	0x200015b0

08006614 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006614:	2300      	movs	r3, #0
 8006616:	e003      	b.n	8006620 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8006618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800661c:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800661e:	3301      	adds	r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d811      	bhi.n	8006648 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006624:	011a      	lsls	r2, r3, #4
 8006626:	4909      	ldr	r1, [pc, #36]	@ (800664c <clear_lock+0x38>)
 8006628:	588a      	ldr	r2, [r1, r2]
 800662a:	4282      	cmp	r2, r0
 800662c:	d1f7      	bne.n	800661e <clear_lock+0xa>
{
 800662e:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	2400      	movs	r4, #0
 8006634:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8006636:	3301      	adds	r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d8ed      	bhi.n	8006618 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	4903      	ldr	r1, [pc, #12]	@ (800664c <clear_lock+0x38>)
 8006640:	588a      	ldr	r2, [r1, r2]
 8006642:	4282      	cmp	r2, r0
 8006644:	d1f7      	bne.n	8006636 <clear_lock+0x22>
 8006646:	e7f3      	b.n	8006630 <clear_lock+0x1c>
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	200015b0 	.word	0x200015b0

08006650 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006650:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006652:	69c3      	ldr	r3, [r0, #28]
 8006654:	3b02      	subs	r3, #2
 8006656:	428b      	cmp	r3, r1
 8006658:	d904      	bls.n	8006664 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800665a:	8943      	ldrh	r3, [r0, #10]
 800665c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800665e:	fb01 0003 	mla	r0, r1, r3, r0
 8006662:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006664:	2000      	movs	r0, #0
}
 8006666:	4770      	bx	lr

08006668 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006668:	b510      	push	{r4, lr}
 800666a:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800666c:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800666e:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8006670:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006672:	0a50      	lsrs	r0, r2, #9
 8006674:	895a      	ldrh	r2, [r3, #10]
 8006676:	2300      	movs	r3, #0
 8006678:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800667c:	0a49      	lsrs	r1, r1, #9
 800667e:	f7f9 fdf7 	bl	8000270 <__aeabi_uldivmod>
 8006682:	4602      	mov	r2, r0
 8006684:	e001      	b.n	800668a <clmt_clust+0x22>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8006686:	1a12      	subs	r2, r2, r0
 8006688:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800668a:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800668c:	b118      	cbz	r0, 8006696 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800668e:	4282      	cmp	r2, r0
 8006690:	d2f9      	bcs.n	8006686 <clmt_clust+0x1e>
	}
	return cl + *tbl;	/* Return the cluster number */
 8006692:	6860      	ldr	r0, [r4, #4]
 8006694:	4410      	add	r0, r2
}
 8006696:	bd10      	pop	{r4, pc}

08006698 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4606      	mov	r6, r0
 800669c:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800669e:	f101 001a 	add.w	r0, r1, #26
 80066a2:	f7ff fe85 	bl	80063b0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80066a6:	7833      	ldrb	r3, [r6, #0]
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d000      	beq.n	80066ae <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80066b0:	f105 0014 	add.w	r0, r5, #20
 80066b4:	f7ff fe7c 	bl	80063b0 <ld_word>
 80066b8:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 80066bc:	e7f6      	b.n	80066ac <ld_clust+0x14>

080066be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80066be:	b570      	push	{r4, r5, r6, lr}
 80066c0:	4606      	mov	r6, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80066c6:	b291      	uxth	r1, r2
 80066c8:	f104 001a 	add.w	r0, r4, #26
 80066cc:	f7ff fea2 	bl	8006414 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80066d0:	7833      	ldrb	r3, [r6, #0]
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d000      	beq.n	80066d8 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80066d8:	0c29      	lsrs	r1, r5, #16
 80066da:	f104 0014 	add.w	r0, r4, #20
 80066de:	f7ff fe99 	bl	8006414 <st_word>
}
 80066e2:	e7f8      	b.n	80066d6 <st_clust+0x18>

080066e4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80066e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e8:	4680      	mov	r8, r0
 80066ea:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80066ec:	f101 001a 	add.w	r0, r1, #26
 80066f0:	f7ff fe5e 	bl	80063b0 <ld_word>
 80066f4:	bb50      	cbnz	r0, 800674c <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80066f6:	7835      	ldrb	r5, [r6, #0]
 80066f8:	f025 0540 	bic.w	r5, r5, #64	@ 0x40
 80066fc:	3d01      	subs	r5, #1
 80066fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006702:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006706:	2701      	movs	r7, #1
 8006708:	2400      	movs	r4, #0
 800670a:	e004      	b.n	8006716 <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800670c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006710:	4298      	cmp	r0, r3
 8006712:	d120      	bne.n	8006756 <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006714:	3401      	adds	r4, #1
 8006716:	2c0c      	cmp	r4, #12
 8006718:	d80d      	bhi.n	8006736 <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800671a:	4b12      	ldr	r3, [pc, #72]	@ (8006764 <pick_lfn+0x80>)
 800671c:	5d18      	ldrb	r0, [r3, r4]
 800671e:	4430      	add	r0, r6
 8006720:	f7ff fe46 	bl	80063b0 <ld_word>
		if (wc) {
 8006724:	2f00      	cmp	r7, #0
 8006726:	d0f1      	beq.n	800670c <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006728:	2dfe      	cmp	r5, #254	@ 0xfe
 800672a:	d812      	bhi.n	8006752 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800672c:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 8006730:	4607      	mov	r7, r0
 8006732:	3501      	adds	r5, #1
 8006734:	e7ee      	b.n	8006714 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006736:	7833      	ldrb	r3, [r6, #0]
 8006738:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800673c:	d00d      	beq.n	800675a <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800673e:	2dfe      	cmp	r5, #254	@ 0xfe
 8006740:	d80d      	bhi.n	800675e <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 8006748:	2001      	movs	r0, #1
 800674a:	e000      	b.n	800674e <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800674c:	2000      	movs	r0, #0
}
 800674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006752:	2000      	movs	r0, #0
 8006754:	e7fb      	b.n	800674e <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006756:	2000      	movs	r0, #0
 8006758:	e7f9      	b.n	800674e <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800675a:	2001      	movs	r0, #1
 800675c:	e7f7      	b.n	800674e <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800675e:	2000      	movs	r0, #0
 8006760:	e7f5      	b.n	800674e <pick_lfn+0x6a>
 8006762:	bf00      	nop
 8006764:	0800a6bc 	.word	0x0800a6bc

08006768 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800676c:	4680      	mov	r8, r0
 800676e:	460f      	mov	r7, r1
 8006770:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006772:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006774:	230f      	movs	r3, #15
 8006776:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8006778:	2400      	movs	r4, #0
 800677a:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800677c:	4621      	mov	r1, r4
 800677e:	f107 001a 	add.w	r0, r7, #26
 8006782:	f7ff fe47 	bl	8006414 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006786:	f109 36ff 	add.w	r6, r9, #4294967295	@ 0xffffffff
 800678a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800678e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8006792:	4625      	mov	r5, r4
 8006794:	e002      	b.n	800679c <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8006796:	3401      	adds	r4, #1
 8006798:	2c0c      	cmp	r4, #12
 800679a:	d811      	bhi.n	80067c0 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800679c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067a0:	429d      	cmp	r5, r3
 80067a2:	d002      	beq.n	80067aa <put_lfn+0x42>
 80067a4:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 80067a8:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80067aa:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <put_lfn+0x74>)
 80067ac:	5d18      	ldrb	r0, [r3, r4]
 80067ae:	4629      	mov	r1, r5
 80067b0:	4438      	add	r0, r7
 80067b2:	f7ff fe2f 	bl	8006414 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	d1ed      	bne.n	8006796 <put_lfn+0x2e>
 80067ba:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80067be:	e7ea      	b.n	8006796 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80067c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067c4:	429d      	cmp	r5, r3
 80067c6:	d002      	beq.n	80067ce <put_lfn+0x66>
 80067c8:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 80067cc:	b90b      	cbnz	r3, 80067d2 <put_lfn+0x6a>
 80067ce:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80067d2:	f887 9000 	strb.w	r9, [r7]
}
 80067d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067da:	bf00      	nop
 80067dc:	0800a6bc 	.word	0x0800a6bc

080067e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	4605      	mov	r5, r0
 80067e6:	4616      	mov	r6, r2
 80067e8:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80067ea:	220b      	movs	r2, #11
 80067ec:	f7ff fe33 	bl	8006456 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80067f0:	2c05      	cmp	r4, #5
 80067f2:	d811      	bhi.n	8006818 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 80067f4:	2307      	movs	r3, #7
 80067f6:	e01f      	b.n	8006838 <gen_numname+0x58>
 80067f8:	3101      	adds	r1, #1
 80067fa:	290f      	cmp	r1, #15
 80067fc:	d80c      	bhi.n	8006818 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 80067fe:	f003 0c01 	and.w	ip, r3, #1
 8006802:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 8006806:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006808:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 800680c:	d0f4      	beq.n	80067f8 <gen_numname+0x18>
 800680e:	f484 3488 	eor.w	r4, r4, #69632	@ 0x11000
 8006812:	f084 0421 	eor.w	r4, r4, #33	@ 0x21
 8006816:	e7ef      	b.n	80067f8 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8006818:	8833      	ldrh	r3, [r6, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ea      	beq.n	80067f4 <gen_numname+0x14>
			wc = *lfn++;
 800681e:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8006820:	2100      	movs	r1, #0
 8006822:	e7ea      	b.n	80067fa <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8006824:	1e5a      	subs	r2, r3, #1
 8006826:	3308      	adds	r3, #8
 8006828:	446b      	add	r3, sp
 800682a:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 800682e:	0921      	lsrs	r1, r4, #4
	} while (seq);
 8006830:	2c0f      	cmp	r4, #15
 8006832:	d90a      	bls.n	800684a <gen_numname+0x6a>
		ns[i--] = c;
 8006834:	4613      	mov	r3, r2
		seq /= 16;
 8006836:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 8006838:	f004 020f 	and.w	r2, r4, #15
 800683c:	f102 0130 	add.w	r1, r2, #48	@ 0x30
		if (c > '9') c += 7;
 8006840:	2939      	cmp	r1, #57	@ 0x39
 8006842:	d9ef      	bls.n	8006824 <gen_numname+0x44>
 8006844:	f102 0137 	add.w	r1, r2, #55	@ 0x37
 8006848:	e7ec      	b.n	8006824 <gen_numname+0x44>
	ns[i] = '~';
 800684a:	217e      	movs	r1, #126	@ 0x7e
 800684c:	f102 0308 	add.w	r3, r2, #8
 8006850:	446b      	add	r3, sp
 8006852:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <gen_numname+0x7c>
 800685a:	3301      	adds	r3, #1
 800685c:	4293      	cmp	r3, r2
 800685e:	d209      	bcs.n	8006874 <gen_numname+0x94>
 8006860:	5ce9      	ldrb	r1, [r5, r3]
 8006862:	2920      	cmp	r1, #32
 8006864:	d1f9      	bne.n	800685a <gen_numname+0x7a>
 8006866:	e005      	b.n	8006874 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006868:	2020      	movs	r0, #32
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 800686e:	2907      	cmp	r1, #7
 8006870:	d809      	bhi.n	8006886 <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006872:	460b      	mov	r3, r1
 8006874:	2a07      	cmp	r2, #7
 8006876:	d8f7      	bhi.n	8006868 <gen_numname+0x88>
 8006878:	f102 0108 	add.w	r1, r2, #8
 800687c:	4469      	add	r1, sp
 800687e:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8006882:	3201      	adds	r2, #1
 8006884:	e7f1      	b.n	800686a <gen_numname+0x8a>
}
 8006886:	b002      	add	sp, #8
 8006888:	bd70      	pop	{r4, r5, r6, pc}

0800688a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800688a:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800688c:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8006890:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006892:	01c3      	lsls	r3, r0, #7
 8006894:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8006898:	780a      	ldrb	r2, [r1, #0]
 800689a:	3101      	adds	r1, #1
 800689c:	fa52 f383 	uxtab	r3, r2, r3
 80068a0:	b2d8      	uxtb	r0, r3
	} while (--n);
 80068a2:	f1bc 0c01 	subs.w	ip, ip, #1
 80068a6:	d1f4      	bne.n	8006892 <sum_sfn+0x8>
	return sum;
}
 80068a8:	4770      	bx	lr

080068aa <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80068aa:	b500      	push	{lr}
 80068ac:	4686      	mov	lr, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80068ae:	7841      	ldrb	r1, [r0, #1]
 80068b0:	3101      	adds	r1, #1
 80068b2:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 80068b4:	2000      	movs	r0, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	e001      	b.n	80068be <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 80068ba:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 80068bc:	3301      	adds	r3, #1
 80068be:	428b      	cmp	r3, r1
 80068c0:	d20a      	bcs.n	80068d8 <xdir_sum+0x2e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d0f9      	beq.n	80068ba <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80068c6:	0842      	lsrs	r2, r0, #1
 80068c8:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 80068cc:	f81e c003 	ldrb.w	ip, [lr, r3]
 80068d0:	fa1c f282 	uxtah	r2, ip, r2
 80068d4:	b290      	uxth	r0, r2
 80068d6:	e7f1      	b.n	80068bc <xdir_sum+0x12>
		}
	}
	return sum;
}
 80068d8:	f85d fb04 	ldr.w	pc, [sp], #4

080068dc <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80068dc:	6803      	ldr	r3, [r0, #0]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	6002      	str	r2, [r0, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80068e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068ea:	b292      	uxth	r2, r2
 80068ec:	2a19      	cmp	r2, #25
 80068ee:	d802      	bhi.n	80068f6 <get_achar+0x1a>
 80068f0:	3b20      	subs	r3, #32
 80068f2:	b298      	uxth	r0, r3
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80068f4:	4770      	bx	lr
 80068f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068f8:	d902      	bls.n	8006900 <get_achar+0x24>
 80068fa:	3b80      	subs	r3, #128	@ 0x80
 80068fc:	4a01      	ldr	r2, [pc, #4]	@ (8006904 <get_achar+0x28>)
 80068fe:	5cd0      	ldrb	r0, [r2, r3]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	0800a6cc 	.word	0x0800a6cc

08006908 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	4607      	mov	r7, r0
 8006910:	9101      	str	r1, [sp, #4]
 8006912:	4614      	mov	r4, r2
 8006914:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8006916:	4626      	mov	r6, r4
 8006918:	3c01      	subs	r4, #1
 800691a:	b14e      	cbz	r6, 8006930 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800691c:	a801      	add	r0, sp, #4
 800691e:	f7ff ffdd 	bl	80068dc <get_achar>
 8006922:	2800      	cmp	r0, #0
 8006924:	d1f7      	bne.n	8006916 <pattern_matching+0xe>
 8006926:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8006928:	4630      	mov	r0, r6
 800692a:	b004      	add	sp, #16
 800692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8006930:	783b      	ldrb	r3, [r7, #0]
 8006932:	bb1b      	cbnz	r3, 800697c <pattern_matching+0x74>
 8006934:	f1b8 0f00 	cmp.w	r8, #0
 8006938:	d020      	beq.n	800697c <pattern_matching+0x74>
 800693a:	2601      	movs	r6, #1
 800693c:	e7f4      	b.n	8006928 <pattern_matching+0x20>
 800693e:	4633      	mov	r3, r6
 8006940:	4632      	mov	r2, r6
 8006942:	e001      	b.n	8006948 <pattern_matching+0x40>
 8006944:	4633      	mov	r3, r6
 8006946:	4632      	mov	r2, r6
					if (*pp++ == '?') nm++; else nx = 1;
 8006948:	9903      	ldr	r1, [sp, #12]
 800694a:	1c48      	adds	r0, r1, #1
 800694c:	9003      	str	r0, [sp, #12]
 800694e:	780c      	ldrb	r4, [r1, #0]
 8006950:	2c3f      	cmp	r4, #63	@ 0x3f
 8006952:	d02a      	beq.n	80069aa <pattern_matching+0xa2>
 8006954:	2301      	movs	r3, #1
				} while (*pp == '?' || *pp == '*');
 8006956:	7849      	ldrb	r1, [r1, #1]
 8006958:	293f      	cmp	r1, #63	@ 0x3f
 800695a:	d0f5      	beq.n	8006948 <pattern_matching+0x40>
 800695c:	292a      	cmp	r1, #42	@ 0x2a
 800695e:	d0f3      	beq.n	8006948 <pattern_matching+0x40>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8006960:	9902      	ldr	r1, [sp, #8]
 8006962:	f7ff ffd1 	bl	8006908 <pattern_matching>
 8006966:	bb10      	cbnz	r0, 80069ae <pattern_matching+0xa6>
				nc = *np; break;	/* Branch mismatched */
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800696c:	a801      	add	r0, sp, #4
 800696e:	f7ff ffb5 	bl	80068dc <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8006972:	f1b8 0f00 	cmp.w	r8, #0
 8006976:	d01c      	beq.n	80069b2 <pattern_matching+0xaa>
 8006978:	2d00      	cmp	r5, #0
 800697a:	d0d5      	beq.n	8006928 <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800697c:	9703      	str	r7, [sp, #12]
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b3f      	cmp	r3, #63	@ 0x3f
 8006988:	d0dc      	beq.n	8006944 <pattern_matching+0x3c>
 800698a:	2b2a      	cmp	r3, #42	@ 0x2a
 800698c:	d0d7      	beq.n	800693e <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 800698e:	a803      	add	r0, sp, #12
 8006990:	f7ff ffa4 	bl	80068dc <get_achar>
 8006994:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 8006996:	a802      	add	r0, sp, #8
 8006998:	f7ff ffa0 	bl	80068dc <get_achar>
 800699c:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800699e:	4284      	cmp	r4, r0
 80069a0:	d1e4      	bne.n	800696c <pattern_matching+0x64>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80069a2:	2c00      	cmp	r4, #0
 80069a4:	d1ed      	bne.n	8006982 <pattern_matching+0x7a>
 80069a6:	2601      	movs	r6, #1
 80069a8:	e7be      	b.n	8006928 <pattern_matching+0x20>
					if (*pp++ == '?') nm++; else nx = 1;
 80069aa:	3201      	adds	r2, #1
 80069ac:	e7d3      	b.n	8006956 <pattern_matching+0x4e>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80069ae:	2601      	movs	r6, #1
 80069b0:	e7ba      	b.n	8006928 <pattern_matching+0x20>
	return 0;
 80069b2:	4646      	mov	r6, r8
 80069b4:	e7b8      	b.n	8006928 <pattern_matching+0x20>

080069b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80069b6:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80069b8:	6800      	ldr	r0, [r0, #0]
 80069ba:	b138      	cbz	r0, 80069cc <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80069bc:	4602      	mov	r2, r0
 80069be:	7813      	ldrb	r3, [r2, #0]
 80069c0:	2b1f      	cmp	r3, #31
 80069c2:	d906      	bls.n	80069d2 <get_ldnumber+0x1c>
 80069c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80069c6:	d004      	beq.n	80069d2 <get_ldnumber+0x1c>
 80069c8:	3201      	adds	r2, #1
 80069ca:	e7f8      	b.n	80069be <get_ldnumber+0x8>
	int vol = -1;
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069d0:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80069d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80069d4:	d001      	beq.n	80069da <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80069d6:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80069d8:	4770      	bx	lr
{
 80069da:	b410      	push	{r4}
			i = *tp++ - '0';
 80069dc:	4603      	mov	r3, r0
 80069de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069e2:	3830      	subs	r0, #48	@ 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80069e4:	2809      	cmp	r0, #9
 80069e6:	d808      	bhi.n	80069fa <get_ldnumber+0x44>
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d002      	beq.n	80069f2 <get_ldnumber+0x3c>
	int vol = -1;
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069f0:	e005      	b.n	80069fe <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80069f2:	b938      	cbnz	r0, 8006a04 <get_ldnumber+0x4e>
					*path = ++tt;
 80069f4:	3201      	adds	r2, #1
 80069f6:	600a      	str	r2, [r1, #0]
 80069f8:	e001      	b.n	80069fe <get_ldnumber+0x48>
	int vol = -1;
 80069fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80069fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a02:	4770      	bx	lr
	int vol = -1;
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return vol;
 8006a08:	e7f9      	b.n	80069fe <get_ldnumber+0x48>

08006a0a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a0a:	b538      	push	{r3, r4, r5, lr}
 8006a0c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a0e:	4604      	mov	r4, r0
 8006a10:	b198      	cbz	r0, 8006a3a <validate+0x30>
 8006a12:	6803      	ldr	r3, [r0, #0]
 8006a14:	b19b      	cbz	r3, 8006a3e <validate+0x34>
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	b1a2      	cbz	r2, 8006a44 <validate+0x3a>
 8006a1a:	8881      	ldrh	r1, [r0, #4]
 8006a1c:	88da      	ldrh	r2, [r3, #6]
 8006a1e:	4291      	cmp	r1, r2
 8006a20:	d003      	beq.n	8006a2a <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8006a22:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a24:	2400      	movs	r4, #0
 8006a26:	602c      	str	r4, [r5, #0]
	return res;
}
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a2a:	7858      	ldrb	r0, [r3, #1]
 8006a2c:	f7ff fc7a 	bl	8006324 <disk_status>
 8006a30:	f010 0001 	ands.w	r0, r0, #1
 8006a34:	d109      	bne.n	8006a4a <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a36:	6824      	ldr	r4, [r4, #0]
 8006a38:	e7f5      	b.n	8006a26 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006a3a:	2009      	movs	r0, #9
 8006a3c:	e7f3      	b.n	8006a26 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a3e:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8006a40:	2009      	movs	r0, #9
 8006a42:	e7f0      	b.n	8006a26 <validate+0x1c>
 8006a44:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a46:	2400      	movs	r4, #0
 8006a48:	e7ed      	b.n	8006a26 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006a4a:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a4c:	2400      	movs	r4, #0
 8006a4e:	e7ea      	b.n	8006a26 <validate+0x1c>

08006a50 <sync_window>:
{
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a54:	78c5      	ldrb	r5, [r0, #3]
 8006a56:	b915      	cbnz	r5, 8006a5e <sync_window+0xe>
}
 8006a58:	4628      	mov	r0, r5
 8006a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8006a60:	6b47      	ldr	r7, [r0, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a62:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 8006a66:	2301      	movs	r3, #1
 8006a68:	463a      	mov	r2, r7
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	7840      	ldrb	r0, [r0, #1]
 8006a6e:	f7ff fc87 	bl	8006380 <disk_write>
 8006a72:	4605      	mov	r5, r0
 8006a74:	b9a0      	cbnz	r0, 8006aa0 <sync_window+0x50>
			fs->wflag = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006a7c:	1afb      	subs	r3, r7, r3
 8006a7e:	6a22      	ldr	r2, [r4, #32]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d2e9      	bcs.n	8006a58 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a84:	78a6      	ldrb	r6, [r4, #2]
 8006a86:	e008      	b.n	8006a9a <sync_window+0x4a>
					wsect += fs->fsize;
 8006a88:	6a23      	ldr	r3, [r4, #32]
 8006a8a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	463a      	mov	r2, r7
 8006a90:	4641      	mov	r1, r8
 8006a92:	7860      	ldrb	r0, [r4, #1]
 8006a94:	f7ff fc74 	bl	8006380 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a98:	3e01      	subs	r6, #1
 8006a9a:	2e01      	cmp	r6, #1
 8006a9c:	d8f4      	bhi.n	8006a88 <sync_window+0x38>
 8006a9e:	e7db      	b.n	8006a58 <sync_window+0x8>
			res = FR_DISK_ERR;
 8006aa0:	2501      	movs	r5, #1
 8006aa2:	e7d9      	b.n	8006a58 <sync_window+0x8>

08006aa4 <move_window>:
{
 8006aa4:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006aa6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	d102      	bne.n	8006ab2 <move_window+0xe>
	FRESULT res = FR_OK;
 8006aac:	2600      	movs	r6, #0
}
 8006aae:	4630      	mov	r0, r6
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8006ab6:	f7ff ffcb 	bl	8006a50 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006aba:	4606      	mov	r6, r0
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d1f6      	bne.n	8006aae <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8006ac8:	7860      	ldrb	r0, [r4, #1]
 8006aca:	f7ff fc4d 	bl	8006368 <disk_read>
 8006ace:	b110      	cbz	r0, 8006ad6 <move_window+0x32>
				res = FR_DISK_ERR;
 8006ad0:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ad2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
			fs->winsect = sector;
 8006ad6:	6365      	str	r5, [r4, #52]	@ 0x34
 8006ad8:	e7e9      	b.n	8006aae <move_window+0xa>
	...

08006adc <check_fs>:
{
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	70c3      	strb	r3, [r0, #3]
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ae8:	6343      	str	r3, [r0, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006aea:	f7ff ffdb 	bl	8006aa4 <move_window>
 8006aee:	bb60      	cbnz	r0, 8006b4a <check_fs+0x6e>
 8006af0:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006af2:	f204 2036 	addw	r0, r4, #566	@ 0x236
 8006af6:	f7ff fc5b 	bl	80063b0 <ld_word>
 8006afa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006afe:	4298      	cmp	r0, r3
 8006b00:	d125      	bne.n	8006b4e <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006b02:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8006b06:	2be9      	cmp	r3, #233	@ 0xe9
 8006b08:	d00e      	beq.n	8006b28 <check_fs+0x4c>
 8006b0a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b0c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8006b10:	4a11      	ldr	r2, [pc, #68]	@ (8006b58 <check_fs+0x7c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d008      	beq.n	8006b28 <check_fs+0x4c>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8006b16:	220b      	movs	r2, #11
 8006b18:	4910      	ldr	r1, [pc, #64]	@ (8006b5c <check_fs+0x80>)
 8006b1a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006b1e:	f7ff fca9 	bl	8006474 <mem_cmp>
 8006b22:	b1b8      	cbz	r0, 8006b54 <check_fs+0x78>
	return 2;
 8006b24:	2502      	movs	r5, #2
 8006b26:	e013      	b.n	8006b50 <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006b28:	f104 006e 	add.w	r0, r4, #110	@ 0x6e
 8006b2c:	f7ff fc45 	bl	80063ba <ld_dword>
 8006b30:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8006b34:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <check_fs+0x84>)
 8006b36:	4298      	cmp	r0, r3
 8006b38:	d00a      	beq.n	8006b50 <check_fs+0x74>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006b3a:	f104 008a 	add.w	r0, r4, #138	@ 0x8a
 8006b3e:	f7ff fc3c 	bl	80063ba <ld_dword>
 8006b42:	4b08      	ldr	r3, [pc, #32]	@ (8006b64 <check_fs+0x88>)
 8006b44:	4298      	cmp	r0, r3
 8006b46:	d1e6      	bne.n	8006b16 <check_fs+0x3a>
 8006b48:	e002      	b.n	8006b50 <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006b4a:	2504      	movs	r5, #4
 8006b4c:	e000      	b.n	8006b50 <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006b4e:	2503      	movs	r5, #3
}
 8006b50:	4628      	mov	r0, r5
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8006b54:	2501      	movs	r5, #1
 8006b56:	e7fb      	b.n	8006b50 <check_fs+0x74>
 8006b58:	009000eb 	.word	0x009000eb
 8006b5c:	0800a69c 	.word	0x0800a69c
 8006b60:	00544146 	.word	0x00544146
 8006b64:	33544146 	.word	0x33544146

08006b68 <find_volume>:
{
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	460d      	mov	r5, r1
 8006b70:	4616      	mov	r6, r2
	*rfs = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8006b76:	f7ff ff1e 	bl	80069b6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b7a:	1e07      	subs	r7, r0, #0
 8006b7c:	f2c0 81ea 	blt.w	8006f54 <find_volume+0x3ec>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006b80:	4bb1      	ldr	r3, [pc, #708]	@ (8006e48 <find_volume+0x2e0>)
 8006b82:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006b86:	2c00      	cmp	r4, #0
 8006b88:	f000 81e9 	beq.w	8006f5e <find_volume+0x3f6>
	*rfs = fs;							/* Return pointer to the file system object */
 8006b8c:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006b8e:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006b92:	7823      	ldrb	r3, [r4, #0]
 8006b94:	b173      	cbz	r3, 8006bb4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8006b96:	7860      	ldrb	r0, [r4, #1]
 8006b98:	f7ff fbc4 	bl	8006324 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006b9c:	f010 0501 	ands.w	r5, r0, #1
 8006ba0:	d108      	bne.n	8006bb4 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	f000 81d7 	beq.w	8006f56 <find_volume+0x3ee>
 8006ba8:	f010 0f04 	tst.w	r0, #4
 8006bac:	f000 81d3 	beq.w	8006f56 <find_volume+0x3ee>
				return FR_WRITE_PROTECTED;
 8006bb0:	250a      	movs	r5, #10
 8006bb2:	e1d0      	b.n	8006f56 <find_volume+0x3ee>
	fs->fs_type = 0;					/* Clear the file system object */
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006bb8:	b2f8      	uxtb	r0, r7
 8006bba:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006bbc:	f7ff fbbe 	bl	800633c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006bc0:	f010 0501 	ands.w	r5, r0, #1
 8006bc4:	f040 81cd 	bne.w	8006f62 <find_volume+0x3fa>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006bc8:	b11e      	cbz	r6, 8006bd2 <find_volume+0x6a>
 8006bca:	f010 0f04 	tst.w	r0, #4
 8006bce:	f040 81ca 	bne.w	8006f66 <find_volume+0x3fe>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff ff81 	bl	8006adc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006bda:	2802      	cmp	r0, #2
 8006bdc:	f000 8083 	beq.w	8006ce6 <find_volume+0x17e>
	bsect = 0;
 8006be0:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006be2:	2804      	cmp	r0, #4
 8006be4:	f000 81c1 	beq.w	8006f6a <find_volume+0x402>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006be8:	2801      	cmp	r0, #1
 8006bea:	f200 81c0 	bhi.w	8006f6e <find_volume+0x406>
	if (fmt == 1) {
 8006bee:	f000 810c 	beq.w	8006e0a <find_volume+0x2a2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006bf2:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8006bf6:	f7ff fbdb 	bl	80063b0 <ld_word>
 8006bfa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8006bfe:	f040 81cc 	bne.w	8006f9a <find_volume+0x432>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006c02:	f104 004e 	add.w	r0, r4, #78	@ 0x4e
 8006c06:	f7ff fbd3 	bl	80063b0 <ld_word>
 8006c0a:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006c0c:	b920      	cbnz	r0, 8006c18 <find_volume+0xb0>
 8006c0e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8006c12:	f7ff fbd2 	bl	80063ba <ld_dword>
 8006c16:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8006c18:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006c1a:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 8006c1e:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006c20:	1e53      	subs	r3, r2, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	f200 81ba 	bhi.w	8006f9e <find_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006c2a:	fb07 f802 	mul.w	r8, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006c2e:	f894 9045 	ldrb.w	r9, [r4, #69]	@ 0x45
 8006c32:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	f000 81b2 	beq.w	8006fa2 <find_volume+0x43a>
 8006c3e:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8006c42:	ea19 0f03 	tst.w	r9, r3
 8006c46:	f040 81ae 	bne.w	8006fa6 <find_volume+0x43e>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c4a:	f104 0049 	add.w	r0, r4, #73	@ 0x49
 8006c4e:	f7ff fbaf 	bl	80063b0 <ld_word>
 8006c52:	4682      	mov	sl, r0
 8006c54:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006c56:	f010 0f0f 	tst.w	r0, #15
 8006c5a:	f040 81a6 	bne.w	8006faa <find_volume+0x442>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c5e:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 8006c62:	f7ff fba5 	bl	80063b0 <ld_word>
 8006c66:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c68:	b920      	cbnz	r0, 8006c74 <find_volume+0x10c>
 8006c6a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c6e:	f7ff fba4 	bl	80063ba <ld_dword>
 8006c72:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c74:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 8006c78:	f7ff fb9a 	bl	80063b0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f000 8195 	beq.w	8006fae <find_volume+0x446>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c84:	eb00 0308 	add.w	r3, r0, r8
 8006c88:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c8c:	459b      	cmp	fp, r3
 8006c8e:	f0c0 8190 	bcc.w	8006fb2 <find_volume+0x44a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c92:	ebab 0b03 	sub.w	fp, fp, r3
 8006c96:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c9a:	45cb      	cmp	fp, r9
 8006c9c:	f0c0 818b 	bcc.w	8006fb6 <find_volume+0x44e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ca0:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8006ca4:	4281      	cmp	r1, r0
 8006ca6:	f200 80d3 	bhi.w	8006e50 <find_volume+0x2e8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006caa:	f640 70f5 	movw	r0, #4085	@ 0xff5
 8006cae:	4281      	cmp	r1, r0
 8006cb0:	f240 810a 	bls.w	8006ec8 <find_volume+0x360>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006cb4:	f04f 0b02 	mov.w	fp, #2
 8006cb8:	e0cc      	b.n	8006e54 <find_volume+0x2ec>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006cba:	2000      	movs	r0, #0
 8006cbc:	ab06      	add	r3, sp, #24
 8006cbe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006cc2:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006cc6:	3601      	adds	r6, #1
 8006cc8:	2e03      	cmp	r6, #3
 8006cca:	d80e      	bhi.n	8006cea <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006ccc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006cd0:	0133      	lsls	r3, r6, #4
 8006cd2:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006cd6:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006cd8:	7903      	ldrb	r3, [r0, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ed      	beq.n	8006cba <find_volume+0x152>
 8006cde:	3008      	adds	r0, #8
 8006ce0:	f7ff fb6b 	bl	80063ba <ld_dword>
 8006ce4:	e7ea      	b.n	8006cbc <find_volume+0x154>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	e7ee      	b.n	8006cc8 <find_volume+0x160>
 8006cea:	2700      	movs	r7, #0
 8006cec:	e00a      	b.n	8006d04 <find_volume+0x19c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7ff fef3 	bl	8006adc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006cf6:	2801      	cmp	r0, #1
 8006cf8:	f67f af73 	bls.w	8006be2 <find_volume+0x7a>
 8006cfc:	3701      	adds	r7, #1
 8006cfe:	2f03      	cmp	r7, #3
 8006d00:	f63f af6f 	bhi.w	8006be2 <find_volume+0x7a>
			bsect = br[i];
 8006d04:	ab06      	add	r3, sp, #24
 8006d06:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006d0a:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	d1ed      	bne.n	8006cee <find_volume+0x186>
 8006d12:	2003      	movs	r0, #3
 8006d14:	e7f2      	b.n	8006cfc <find_volume+0x194>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8006d16:	3301      	adds	r3, #1
 8006d18:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d1a:	d804      	bhi.n	8006d26 <find_volume+0x1be>
 8006d1c:	18e2      	adds	r2, r4, r3
 8006d1e:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d0f7      	beq.n	8006d16 <find_volume+0x1ae>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8006d26:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d28:	f240 8123 	bls.w	8006f72 <find_volume+0x40a>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8006d2c:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8006d30:	f7ff fb3e 	bl	80063b0 <ld_word>
 8006d34:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006d38:	f040 811d 	bne.w	8006f76 <find_volume+0x40e>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8006d3c:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8006d40:	2b09      	cmp	r3, #9
 8006d42:	f040 811a 	bne.w	8006f7a <find_volume+0x412>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8006d46:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8006d4a:	f7ff fb41 	bl	80063d0 <ld_qword>
 8006d4e:	1987      	adds	r7, r0, r6
 8006d50:	f141 0800 	adc.w	r8, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d58:	42bb      	cmp	r3, r7
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	eb73 0308 	sbcs.w	r3, r3, r8
 8006d62:	f0c0 810c 	bcc.w	8006f7e <find_volume+0x416>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8006d66:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8006d6a:	f7ff fb26 	bl	80063ba <ld_dword>
 8006d6e:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8006d70:	f894 a0a6 	ldrb.w	sl, [r4, #166]	@ 0xa6
 8006d74:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006d78:	f1ba 0f01 	cmp.w	sl, #1
 8006d7c:	f040 8101 	bne.w	8006f82 <find_volume+0x41a>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8006d80:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8006d84:	2201      	movs	r2, #1
 8006d86:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006d90:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80f7 	beq.w	8006f86 <find_volume+0x41e>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8006d98:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 8006d9c:	f7ff fb0d 	bl	80063ba <ld_dword>
 8006da0:	4683      	mov	fp, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8006da2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e4c <find_volume+0x2e4>)
 8006da4:	4298      	cmp	r0, r3
 8006da6:	f200 80f0 	bhi.w	8006f8a <find_volume+0x422>
		fs->n_fatent = nclst + 2;
 8006daa:	1c83      	adds	r3, r0, #2
 8006dac:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 8006dae:	6266      	str	r6, [r4, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8006db0:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8006db4:	f7ff fb01 	bl	80063ba <ld_dword>
 8006db8:	eb00 0906 	add.w	r9, r0, r6
 8006dbc:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8006dc0:	f104 0088 	add.w	r0, r4, #136	@ 0x88
 8006dc4:	f7ff faf9 	bl	80063ba <ld_dword>
 8006dc8:	4430      	add	r0, r6
 8006dca:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006dd2:	fb0b f303 	mul.w	r3, fp, r3
 8006dd6:	eb19 0903 	adds.w	r9, r9, r3
 8006dda:	4152      	adcs	r2, r2
 8006ddc:	454f      	cmp	r7, r9
 8006dde:	eb78 0202 	sbcs.w	r2, r8, r2
 8006de2:	f0c0 80d4 	bcc.w	8006f8e <find_volume+0x426>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8006de6:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8006dea:	f7ff fae6 	bl	80063ba <ld_dword>
 8006dee:	4601      	mov	r1, r0
 8006df0:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7ff fc2c 	bl	8006650 <clust2sect>
 8006df8:	4601      	mov	r1, r0
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7ff fe52 	bl	8006aa4 <move_window>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	f040 80c6 	bne.w	8006f92 <find_volume+0x42a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8006e06:	2600      	movs	r6, #0
 8006e08:	e002      	b.n	8006e10 <find_volume+0x2a8>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8006e0a:	230b      	movs	r3, #11
 8006e0c:	e784      	b.n	8006d18 <find_volume+0x1b0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8006e0e:	3620      	adds	r6, #32
 8006e10:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8006e14:	d20d      	bcs.n	8006e32 <find_volume+0x2ca>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8006e16:	19a3      	adds	r3, r4, r6
 8006e18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e1c:	2b81      	cmp	r3, #129	@ 0x81
 8006e1e:	d1f6      	bne.n	8006e0e <find_volume+0x2a6>
 8006e20:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8006e24:	f106 0014 	add.w	r0, r6, #20
 8006e28:	4418      	add	r0, r3
 8006e2a:	f7ff fac6 	bl	80063ba <ld_dword>
 8006e2e:	2802      	cmp	r0, #2
 8006e30:	d1ed      	bne.n	8006e0e <find_volume+0x2a6>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8006e32:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8006e36:	f000 80ae 	beq.w	8006f96 <find_volume+0x42e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e3e:	61a3      	str	r3, [r4, #24]
 8006e40:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 8006e42:	f04f 0b04 	mov.w	fp, #4
 8006e46:	e02f      	b.n	8006ea8 <find_volume+0x340>
 8006e48:	200015d4 	.word	0x200015d4
 8006e4c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8006e50:	f04f 0b03 	mov.w	fp, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006e54:	f101 0902 	add.w	r9, r1, #2
 8006e58:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006e5c:	6266      	str	r6, [r4, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006e5e:	4432      	add	r2, r6
 8006e60:	62a2      	str	r2, [r4, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006e62:	4433      	add	r3, r6
 8006e64:	6323      	str	r3, [r4, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006e66:	f1bb 0f03 	cmp.w	fp, #3
 8006e6a:	d030      	beq.n	8006ece <find_volume+0x366>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006e6c:	f1ba 0f00 	cmp.w	sl, #0
 8006e70:	f000 80a7 	beq.w	8006fc2 <find_volume+0x45a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006e74:	4442      	add	r2, r8
 8006e76:	62e2      	str	r2, [r4, #44]	@ 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e78:	f1bb 0f02 	cmp.w	fp, #2
 8006e7c:	d038      	beq.n	8006ef0 <find_volume+0x388>
 8006e7e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8006e82:	f009 0901 	and.w	r9, r9, #1
 8006e86:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006e8a:	f209 13ff 	addw	r3, r9, #511	@ 0x1ff
 8006e8e:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8006e92:	f0c0 8098 	bcc.w	8006fc6 <find_volume+0x45e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e9a:	61a3      	str	r3, [r4, #24]
 8006e9c:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8006e9e:	2380      	movs	r3, #128	@ 0x80
 8006ea0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006ea2:	f1bb 0f03 	cmp.w	fp, #3
 8006ea6:	d026      	beq.n	8006ef6 <find_volume+0x38e>
	fs->fs_type = fmt;		/* FAT sub-type */
 8006ea8:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006eac:	4a47      	ldr	r2, [pc, #284]	@ (8006fcc <find_volume+0x464>)
 8006eae:	8813      	ldrh	r3, [r2, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]
 8006eb6:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006eb8:	4b45      	ldr	r3, [pc, #276]	@ (8006fd0 <find_volume+0x468>)
 8006eba:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8006ebc:	4b45      	ldr	r3, [pc, #276]	@ (8006fd4 <find_volume+0x46c>)
 8006ebe:	6123      	str	r3, [r4, #16]
	clear_lock(fs);
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff fba7 	bl	8006614 <clear_lock>
	return FR_OK;
 8006ec6:	e046      	b.n	8006f56 <find_volume+0x3ee>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006ec8:	f04f 0b01 	mov.w	fp, #1
 8006ecc:	e7c2      	b.n	8006e54 <find_volume+0x2ec>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ece:	f104 0062 	add.w	r0, r4, #98	@ 0x62
 8006ed2:	f7ff fa6d 	bl	80063b0 <ld_word>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d16f      	bne.n	8006fba <find_volume+0x452>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006eda:	f1ba 0f00 	cmp.w	sl, #0
 8006ede:	d16e      	bne.n	8006fbe <find_volume+0x456>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ee0:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8006ee4:	f7ff fa69 	bl	80063ba <ld_dword>
 8006ee8:	62e0      	str	r0, [r4, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006eea:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006eee:	e7cc      	b.n	8006e8a <find_volume+0x322>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ef0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006ef4:	e7c9      	b.n	8006e8a <find_volume+0x322>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006ef6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006efa:	f7ff fa59 	bl	80063b0 <ld_word>
 8006efe:	2801      	cmp	r0, #1
 8006f00:	d1d2      	bne.n	8006ea8 <find_volume+0x340>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006f02:	1c71      	adds	r1, r6, #1
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff fdcd 	bl	8006aa4 <move_window>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d1cc      	bne.n	8006ea8 <find_volume+0x340>
			fs->fsi_flag = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f12:	f204 2036 	addw	r0, r4, #566	@ 0x236
 8006f16:	f7ff fa4b 	bl	80063b0 <ld_word>
 8006f1a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006f1e:	4298      	cmp	r0, r3
 8006f20:	d1c2      	bne.n	8006ea8 <find_volume+0x340>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006f22:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006f26:	f7ff fa48 	bl	80063ba <ld_dword>
 8006f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8006fd8 <find_volume+0x470>)
 8006f2c:	4298      	cmp	r0, r3
 8006f2e:	d1bb      	bne.n	8006ea8 <find_volume+0x340>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006f30:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8006f34:	f7ff fa41 	bl	80063ba <ld_dword>
 8006f38:	4b28      	ldr	r3, [pc, #160]	@ (8006fdc <find_volume+0x474>)
 8006f3a:	4298      	cmp	r0, r3
 8006f3c:	d1b4      	bne.n	8006ea8 <find_volume+0x340>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006f3e:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8006f42:	f7ff fa3a 	bl	80063ba <ld_dword>
 8006f46:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006f48:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8006f4c:	f7ff fa35 	bl	80063ba <ld_dword>
 8006f50:	6160      	str	r0, [r4, #20]
 8006f52:	e7a9      	b.n	8006ea8 <find_volume+0x340>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f54:	250b      	movs	r5, #11
}
 8006f56:	4628      	mov	r0, r5
 8006f58:	b007      	add	sp, #28
 8006f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f5e:	250c      	movs	r5, #12
 8006f60:	e7f9      	b.n	8006f56 <find_volume+0x3ee>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f62:	2503      	movs	r5, #3
 8006f64:	e7f7      	b.n	8006f56 <find_volume+0x3ee>
		return FR_WRITE_PROTECTED;
 8006f66:	250a      	movs	r5, #10
 8006f68:	e7f5      	b.n	8006f56 <find_volume+0x3ee>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f6a:	2501      	movs	r5, #1
 8006f6c:	e7f3      	b.n	8006f56 <find_volume+0x3ee>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f6e:	250d      	movs	r5, #13
 8006f70:	e7f1      	b.n	8006f56 <find_volume+0x3ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8006f72:	250d      	movs	r5, #13
 8006f74:	e7ef      	b.n	8006f56 <find_volume+0x3ee>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8006f76:	250d      	movs	r5, #13
 8006f78:	e7ed      	b.n	8006f56 <find_volume+0x3ee>
			return FR_NO_FILESYSTEM;
 8006f7a:	250d      	movs	r5, #13
 8006f7c:	e7eb      	b.n	8006f56 <find_volume+0x3ee>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8006f7e:	250d      	movs	r5, #13
 8006f80:	e7e9      	b.n	8006f56 <find_volume+0x3ee>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006f82:	250d      	movs	r5, #13
 8006f84:	e7e7      	b.n	8006f56 <find_volume+0x3ee>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8006f86:	250d      	movs	r5, #13
 8006f88:	e7e5      	b.n	8006f56 <find_volume+0x3ee>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8006f8a:	250d      	movs	r5, #13
 8006f8c:	e7e3      	b.n	8006f56 <find_volume+0x3ee>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8006f8e:	250d      	movs	r5, #13
 8006f90:	e7e1      	b.n	8006f56 <find_volume+0x3ee>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8006f92:	4655      	mov	r5, sl
 8006f94:	e7df      	b.n	8006f56 <find_volume+0x3ee>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8006f96:	250d      	movs	r5, #13
 8006f98:	e7dd      	b.n	8006f56 <find_volume+0x3ee>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f9a:	250d      	movs	r5, #13
 8006f9c:	e7db      	b.n	8006f56 <find_volume+0x3ee>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f9e:	250d      	movs	r5, #13
 8006fa0:	e7d9      	b.n	8006f56 <find_volume+0x3ee>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006fa2:	250d      	movs	r5, #13
 8006fa4:	e7d7      	b.n	8006f56 <find_volume+0x3ee>
 8006fa6:	250d      	movs	r5, #13
 8006fa8:	e7d5      	b.n	8006f56 <find_volume+0x3ee>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006faa:	250d      	movs	r5, #13
 8006fac:	e7d3      	b.n	8006f56 <find_volume+0x3ee>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006fae:	250d      	movs	r5, #13
 8006fb0:	e7d1      	b.n	8006f56 <find_volume+0x3ee>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006fb2:	250d      	movs	r5, #13
 8006fb4:	e7cf      	b.n	8006f56 <find_volume+0x3ee>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fb6:	250d      	movs	r5, #13
 8006fb8:	e7cd      	b.n	8006f56 <find_volume+0x3ee>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006fba:	250d      	movs	r5, #13
 8006fbc:	e7cb      	b.n	8006f56 <find_volume+0x3ee>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006fbe:	250d      	movs	r5, #13
 8006fc0:	e7c9      	b.n	8006f56 <find_volume+0x3ee>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006fc2:	250d      	movs	r5, #13
 8006fc4:	e7c7      	b.n	8006f56 <find_volume+0x3ee>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006fc6:	250d      	movs	r5, #13
 8006fc8:	e7c5      	b.n	8006f56 <find_volume+0x3ee>
 8006fca:	bf00      	nop
 8006fcc:	200015d0 	.word	0x200015d0
 8006fd0:	20001150 	.word	0x20001150
 8006fd4:	20001350 	.word	0x20001350
 8006fd8:	41615252 	.word	0x41615252
 8006fdc:	61417272 	.word	0x61417272

08006fe0 <find_bitmap>:
{
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8006fe8:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 8006fea:	69c3      	ldr	r3, [r0, #28]
 8006fec:	3b02      	subs	r3, #2
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	d800      	bhi.n	8006ff4 <find_bitmap+0x14>
 8006ff2:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
 8006ff4:	46b8      	mov	r8, r7
 8006ff6:	463c      	mov	r4, r7
 8006ff8:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8006ffa:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8006ffc:	eb01 3114 	add.w	r1, r1, r4, lsr #12
 8007000:	4628      	mov	r0, r5
 8007002:	f7ff fd4f 	bl	8006aa4 <move_window>
 8007006:	4684      	mov	ip, r0
 8007008:	bb40      	cbnz	r0, 800705c <find_bitmap+0x7c>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800700a:	f3c4 00c8 	ubfx	r0, r4, #3, #9
 800700e:	f004 0207 	and.w	r2, r4, #7
 8007012:	2301      	movs	r3, #1
 8007014:	4093      	lsls	r3, r2
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e009      	b.n	800702e <find_bitmap+0x4e>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800701a:	46a0      	mov	r8, r4
 800701c:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
 800701e:	42a7      	cmp	r7, r4
 8007020:	d01f      	beq.n	8007062 <find_bitmap+0x82>
			} while (bm);
 8007022:	b923      	cbnz	r3, 800702e <find_bitmap+0x4e>
		} while (++i < SS(fs));
 8007024:	3001      	adds	r0, #1
 8007026:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800702a:	d2e6      	bcs.n	8006ffa <find_bitmap+0x1a>
			bm = 1;
 800702c:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800702e:	182a      	adds	r2, r5, r0
 8007030:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8007034:	401a      	ands	r2, r3
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800703a:	3401      	adds	r4, #1
 800703c:	69e9      	ldr	r1, [r5, #28]
 800703e:	3902      	subs	r1, #2
 8007040:	42a1      	cmp	r1, r4
 8007042:	d803      	bhi.n	800704c <find_bitmap+0x6c>
					val = 0; bm = 0; i = SS(fs);
 8007044:	4663      	mov	r3, ip
 8007046:	2400      	movs	r4, #0
 8007048:	f44f 7000 	mov.w	r0, #512	@ 0x200
				if (!bv) {	/* Is it a free cluster? */
 800704c:	2a00      	cmp	r2, #0
 800704e:	d1e4      	bne.n	800701a <find_bitmap+0x3a>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8007050:	3601      	adds	r6, #1
 8007052:	454e      	cmp	r6, r9
 8007054:	d1e3      	bne.n	800701e <find_bitmap+0x3e>
 8007056:	f108 0002 	add.w	r0, r8, #2
 800705a:	e003      	b.n	8007064 <find_bitmap+0x84>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800705c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007060:	e000      	b.n	8007064 <find_bitmap+0x84>
				if (val == clst) return 0;	/* All cluster scanned? */
 8007062:	2000      	movs	r0, #0
}
 8007064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007068 <change_bitmap>:
{
 8007068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800706c:	4606      	mov	r6, r0
 800706e:	4617      	mov	r7, r2
 8007070:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8007072:	1e8b      	subs	r3, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8007074:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007076:	eb01 3113 	add.w	r1, r1, r3, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800707a:	f3c3 05c8 	ubfx	r5, r3, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	2401      	movs	r4, #1
 8007084:	409c      	lsls	r4, r3
 8007086:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8007088:	f101 0901 	add.w	r9, r1, #1
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff fd09 	bl	8006aa4 <move_window>
 8007092:	4602      	mov	r2, r0
 8007094:	b110      	cbz	r0, 800709c <change_bitmap+0x34>
 8007096:	2201      	movs	r2, #1
 8007098:	e01e      	b.n	80070d8 <change_bitmap+0x70>
			bm = 1;
 800709a:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800709c:	1973      	adds	r3, r6, r5
 800709e:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 80070a2:	4221      	tst	r1, r4
 80070a4:	bf14      	ite	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	2300      	moveq	r3, #0
 80070aa:	4543      	cmp	r3, r8
 80070ac:	d013      	beq.n	80070d6 <change_bitmap+0x6e>
				fs->win[i] ^= bm;	/* Flip the bit */
 80070ae:	1973      	adds	r3, r6, r5
 80070b0:	4061      	eors	r1, r4
 80070b2:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
				fs->wflag = 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80070ba:	3f01      	subs	r7, #1
 80070bc:	d00c      	beq.n	80070d8 <change_bitmap+0x70>
			} while (bm <<= 1);		/* Next bit */
 80070be:	409c      	lsls	r4, r3
 80070c0:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80070c4:	d1ea      	bne.n	800709c <change_bitmap+0x34>
		} while (++i < SS(fs));		/* Next byte */
 80070c6:	441d      	add	r5, r3
			bm = 1;
 80070c8:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
 80070ca:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80070ce:	d3e4      	bcc.n	800709a <change_bitmap+0x32>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80070d0:	4649      	mov	r1, r9
		i = 0;
 80070d2:	2500      	movs	r5, #0
 80070d4:	e7d8      	b.n	8007088 <change_bitmap+0x20>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80070d6:	2202      	movs	r2, #2
}
 80070d8:	4610      	mov	r0, r2
 80070da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080070de <put_fat>:
{
 80070de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80070e2:	2901      	cmp	r1, #1
 80070e4:	f240 8086 	bls.w	80071f4 <put_fat+0x116>
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4616      	mov	r6, r2
 80070ee:	69c3      	ldr	r3, [r0, #28]
 80070f0:	428b      	cmp	r3, r1
 80070f2:	f240 8083 	bls.w	80071fc <put_fat+0x11e>
		switch (fs->fs_type) {
 80070f6:	7803      	ldrb	r3, [r0, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d068      	beq.n	80071ce <put_fat+0xf0>
 80070fc:	d836      	bhi.n	800716c <put_fat+0x8e>
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d132      	bne.n	8007168 <put_fat+0x8a>
			bc = (UINT)clst; bc += bc / 2;
 8007102:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007106:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007108:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800710c:	f7ff fcca 	bl	8006aa4 <move_window>
			if (res != FR_OK) break;
 8007110:	4607      	mov	r7, r0
 8007112:	2800      	cmp	r0, #0
 8007114:	d16f      	bne.n	80071f6 <put_fat+0x118>
			p = fs->win + bc++ % SS(fs);
 8007116:	f105 0a38 	add.w	sl, r5, #56	@ 0x38
 800711a:	f108 0901 	add.w	r9, r8, #1
 800711e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007122:	f014 0401 	ands.w	r4, r4, #1
 8007126:	d048      	beq.n	80071ba <put_fat+0xdc>
 8007128:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800712c:	0132      	lsls	r2, r6, #4
 800712e:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	4313      	orrs	r3, r2
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800713e:	2301      	movs	r3, #1
 8007140:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007142:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8007144:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff fcab 	bl	8006aa4 <move_window>
			if (res != FR_OK) break;
 800714e:	4607      	mov	r7, r0
 8007150:	2800      	cmp	r0, #0
 8007152:	d150      	bne.n	80071f6 <put_fat+0x118>
			p = fs->win + bc % SS(fs);
 8007154:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007158:	b38c      	cbz	r4, 80071be <put_fat+0xe0>
 800715a:	f3c6 1307 	ubfx	r3, r6, #4, #8
 800715e:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	70eb      	strb	r3, [r5, #3]
			break;
 8007166:	e046      	b.n	80071f6 <put_fat+0x118>
		switch (fs->fs_type) {
 8007168:	2702      	movs	r7, #2
 800716a:	e044      	b.n	80071f6 <put_fat+0x118>
 800716c:	3b03      	subs	r3, #3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b01      	cmp	r3, #1
 8007172:	d845      	bhi.n	8007200 <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007174:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007176:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800717a:	f7ff fc93 	bl	8006aa4 <move_window>
			if (res != FR_OK) break;
 800717e:	4607      	mov	r7, r0
 8007180:	bbc8      	cbnz	r0, 80071f6 <put_fat+0x118>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8007182:	782b      	ldrb	r3, [r5, #0]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d00c      	beq.n	80071a2 <put_fat+0xc4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007188:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
 800718c:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8007190:	00a3      	lsls	r3, r4, #2
 8007192:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007196:	4418      	add	r0, r3
 8007198:	f7ff f90f 	bl	80063ba <ld_dword>
 800719c:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 80071a0:	4306      	orrs	r6, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80071a2:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80071a6:	00a4      	lsls	r4, r4, #2
 80071a8:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 80071ac:	4631      	mov	r1, r6
 80071ae:	4420      	add	r0, r4
 80071b0:	f7ff f934 	bl	800641c <st_dword>
			fs->wflag = 1;
 80071b4:	2301      	movs	r3, #1
 80071b6:	70eb      	strb	r3, [r5, #3]
			break;
 80071b8:	e01d      	b.n	80071f6 <put_fat+0x118>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071ba:	b2f3      	uxtb	r3, r6
 80071bc:	e7bd      	b.n	800713a <put_fat+0x5c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071be:	f81a 3009 	ldrb.w	r3, [sl, r9]
 80071c2:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80071c6:	f023 030f 	bic.w	r3, r3, #15
 80071ca:	4333      	orrs	r3, r6
 80071cc:	e7c7      	b.n	800715e <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80071ce:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80071d0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80071d4:	f7ff fc66 	bl	8006aa4 <move_window>
			if (res != FR_OK) break;
 80071d8:	4607      	mov	r7, r0
 80071da:	b960      	cbnz	r0, 80071f6 <put_fat+0x118>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80071dc:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80071e0:	0064      	lsls	r4, r4, #1
 80071e2:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 80071e6:	b2b1      	uxth	r1, r6
 80071e8:	4420      	add	r0, r4
 80071ea:	f7ff f913 	bl	8006414 <st_word>
			fs->wflag = 1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	70eb      	strb	r3, [r5, #3]
			break;
 80071f2:	e000      	b.n	80071f6 <put_fat+0x118>
	FRESULT res = FR_INT_ERR;
 80071f4:	2702      	movs	r7, #2
}
 80071f6:	4638      	mov	r0, r7
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 80071fc:	2702      	movs	r7, #2
 80071fe:	e7fa      	b.n	80071f6 <put_fat+0x118>
		switch (fs->fs_type) {
 8007200:	2702      	movs	r7, #2
 8007202:	e7f8      	b.n	80071f6 <put_fat+0x118>

08007204 <fill_last_frag>:
{
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800720c:	e007      	b.n	800721e <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800720e:	4632      	mov	r2, r6
 8007210:	f7ff ff65 	bl	80070de <put_fat>
		if (res != FR_OK) return res;
 8007214:	4603      	mov	r3, r0
 8007216:	b958      	cbnz	r0, 8007230 <fill_last_frag+0x2c>
		obj->n_frag--;
 8007218:	69e3      	ldr	r3, [r4, #28]
 800721a:	3b01      	subs	r3, #1
 800721c:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800721e:	69e3      	ldr	r3, [r4, #28]
 8007220:	b133      	cbz	r3, 8007230 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1aea      	subs	r2, r5, r3
 8007226:	1c51      	adds	r1, r2, #1
 8007228:	2b01      	cmp	r3, #1
 800722a:	d9f0      	bls.n	800720e <fill_last_frag+0xa>
 800722c:	3202      	adds	r2, #2
 800722e:	e7ef      	b.n	8007210 <fill_last_frag+0xc>
}
 8007230:	4618      	mov	r0, r3
 8007232:	bd70      	pop	{r4, r5, r6, pc}

08007234 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8007234:	79c3      	ldrb	r3, [r0, #7]
 8007236:	2b03      	cmp	r3, #3
 8007238:	d002      	beq.n	8007240 <fill_first_frag+0xc>
	return FR_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	4770      	bx	lr
{
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8007244:	6881      	ldr	r1, [r0, #8]
 8007246:	6984      	ldr	r4, [r0, #24]
 8007248:	b14c      	cbz	r4, 800725e <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 800724a:	1c4d      	adds	r5, r1, #1
 800724c:	462a      	mov	r2, r5
 800724e:	6830      	ldr	r0, [r6, #0]
 8007250:	f7ff ff45 	bl	80070de <put_fat>
			if (res != FR_OK) return res;
 8007254:	4603      	mov	r3, r0
 8007256:	b920      	cbnz	r0, 8007262 <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8007258:	3c01      	subs	r4, #1
 800725a:	4629      	mov	r1, r5
 800725c:	e7f4      	b.n	8007248 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800725e:	2300      	movs	r3, #0
 8007260:	71f3      	strb	r3, [r6, #7]
}
 8007262:	4618      	mov	r0, r3
 8007264:	bd70      	pop	{r4, r5, r6, pc}

08007266 <get_fat>:
{
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007268:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800726a:	2901      	cmp	r1, #1
 800726c:	f240 8094 	bls.w	8007398 <get_fat+0x132>
 8007270:	4603      	mov	r3, r0
 8007272:	460c      	mov	r4, r1
 8007274:	69ea      	ldr	r2, [r5, #28]
 8007276:	428a      	cmp	r2, r1
 8007278:	f240 8090 	bls.w	800739c <get_fat+0x136>
		switch (fs->fs_type) {
 800727c:	782a      	ldrb	r2, [r5, #0]
 800727e:	3a01      	subs	r2, #1
 8007280:	2a03      	cmp	r2, #3
 8007282:	f200 808d 	bhi.w	80073a0 <get_fat+0x13a>
 8007286:	e8df f002 	tbb	[pc, r2]
 800728a:	2b02      	.short	0x2b02
 800728c:	4f3c      	.short	0x4f3c
			bc = (UINT)clst; bc += bc / 2;
 800728e:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007292:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8007294:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8007298:	4628      	mov	r0, r5
 800729a:	f7ff fc03 	bl	8006aa4 <move_window>
 800729e:	b110      	cbz	r0, 80072a6 <get_fat+0x40>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072a4:	e079      	b.n	800739a <get_fat+0x134>
			wc = fs->win[bc++ % SS(fs)];
 80072a6:	1c77      	adds	r7, r6, #1
 80072a8:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80072ac:	442e      	add	r6, r5
 80072ae:	f896 6038 	ldrb.w	r6, [r6, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072b2:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80072b4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80072b8:	4628      	mov	r0, r5
 80072ba:	f7ff fbf3 	bl	8006aa4 <move_window>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d170      	bne.n	80073a4 <get_fat+0x13e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80072c2:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80072c6:	442f      	add	r7, r5
 80072c8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80072cc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80072d0:	f014 0f01 	tst.w	r4, #1
 80072d4:	d001      	beq.n	80072da <get_fat+0x74>
 80072d6:	0930      	lsrs	r0, r6, #4
 80072d8:	e05f      	b.n	800739a <get_fat+0x134>
 80072da:	f3c6 000b 	ubfx	r0, r6, #0, #12
 80072de:	e05c      	b.n	800739a <get_fat+0x134>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072e0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80072e2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80072e6:	4628      	mov	r0, r5
 80072e8:	f7ff fbdc 	bl	8006aa4 <move_window>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d15c      	bne.n	80073aa <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072f0:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80072f4:	0064      	lsls	r4, r4, #1
 80072f6:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 80072fa:	4420      	add	r0, r4
 80072fc:	f7ff f858 	bl	80063b0 <ld_word>
			break;
 8007300:	e04b      	b.n	800739a <get_fat+0x134>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007302:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8007304:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007308:	4628      	mov	r0, r5
 800730a:	f7ff fbcb 	bl	8006aa4 <move_window>
 800730e:	2800      	cmp	r0, #0
 8007310:	d14e      	bne.n	80073b0 <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007312:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8007316:	00a4      	lsls	r4, r4, #2
 8007318:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800731c:	4420      	add	r0, r4
 800731e:	f7ff f84c 	bl	80063ba <ld_dword>
 8007322:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8007326:	e038      	b.n	800739a <get_fat+0x134>
			if (obj->objsize) {
 8007328:	6902      	ldr	r2, [r0, #16]
 800732a:	6941      	ldr	r1, [r0, #20]
 800732c:	ea52 0001 	orrs.w	r0, r2, r1
 8007330:	d041      	beq.n	80073b6 <get_fat+0x150>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8007332:	6898      	ldr	r0, [r3, #8]
 8007334:	1a20      	subs	r0, r4, r0
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8007336:	3a01      	subs	r2, #1
 8007338:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 800733c:	0a52      	lsrs	r2, r2, #9
 800733e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007342:	8969      	ldrh	r1, [r5, #10]
 8007344:	fbb2 f2f1 	udiv	r2, r2, r1
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8007348:	79d9      	ldrb	r1, [r3, #7]
 800734a:	2902      	cmp	r1, #2
 800734c:	d008      	beq.n	8007360 <get_fat+0xfa>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800734e:	2903      	cmp	r1, #3
 8007350:	d00b      	beq.n	800736a <get_fat+0x104>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8007352:	2902      	cmp	r1, #2
 8007354:	d034      	beq.n	80073c0 <get_fat+0x15a>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	b163      	cbz	r3, 8007374 <get_fat+0x10e>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800735a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800735e:	e01c      	b.n	800739a <get_fat+0x134>
					if (cofs <= clen) {
 8007360:	4290      	cmp	r0, r2
 8007362:	d8f4      	bhi.n	800734e <get_fat+0xe8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8007364:	d029      	beq.n	80073ba <get_fat+0x154>
 8007366:	1c60      	adds	r0, r4, #1
 8007368:	e017      	b.n	800739a <get_fat+0x134>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	4282      	cmp	r2, r0
 800736e:	d9f0      	bls.n	8007352 <get_fat+0xec>
					val = clst + 1; 	/* Generate the value */
 8007370:	1c60      	adds	r0, r4, #1
					break;
 8007372:	e012      	b.n	800739a <get_fat+0x134>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007374:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8007376:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800737a:	4628      	mov	r0, r5
 800737c:	f7ff fb92 	bl	8006aa4 <move_window>
 8007380:	bb00      	cbnz	r0, 80073c4 <get_fat+0x15e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8007382:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8007386:	00a3      	lsls	r3, r4, #2
 8007388:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800738c:	4418      	add	r0, r3
 800738e:	f7ff f814 	bl	80063ba <ld_dword>
 8007392:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007396:	e000      	b.n	800739a <get_fat+0x134>
		val = 1;	/* Internal error */
 8007398:	2001      	movs	r0, #1
}
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800739c:	2001      	movs	r0, #1
 800739e:	e7fc      	b.n	800739a <get_fat+0x134>
		switch (fs->fs_type) {
 80073a0:	2001      	movs	r0, #1
 80073a2:	e7fa      	b.n	800739a <get_fat+0x134>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073a8:	e7f7      	b.n	800739a <get_fat+0x134>
 80073aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073ae:	e7f4      	b.n	800739a <get_fat+0x134>
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073b4:	e7f1      	b.n	800739a <get_fat+0x134>
			val = 1;	/* Internal error */
 80073b6:	2001      	movs	r0, #1
 80073b8:	e7ef      	b.n	800739a <get_fat+0x134>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80073ba:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80073be:	e7ec      	b.n	800739a <get_fat+0x134>
			val = 1;	/* Internal error */
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7ea      	b.n	800739a <get_fat+0x134>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	return val;
 80073c8:	e7e7      	b.n	800739a <get_fat+0x134>

080073ca <dir_sdi>:
{
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	4607      	mov	r7, r0
 80073d0:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80073d2:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80073d6:	f898 3000 	ldrb.w	r3, [r8]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d028      	beq.n	8007430 <dir_sdi+0x66>
 80073de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80073e2:	42b3      	cmp	r3, r6
 80073e4:	d942      	bls.n	800746c <dir_sdi+0xa2>
 80073e6:	f016 0f1f 	tst.w	r6, #31
 80073ea:	d142      	bne.n	8007472 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 80073ec:	633e      	str	r6, [r7, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80073ee:	68bc      	ldr	r4, [r7, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80073f0:	bb0c      	cbnz	r4, 8007436 <dir_sdi+0x6c>
 80073f2:	f898 3000 	ldrb.w	r3, [r8]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d903      	bls.n	8007402 <dir_sdi+0x38>
		clst = fs->dirbase;
 80073fa:	f8d8 402c 	ldr.w	r4, [r8, #44]	@ 0x2c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80073fe:	2300      	movs	r3, #0
 8007400:	71fb      	strb	r3, [r7, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007402:	b9c4      	cbnz	r4, 8007436 <dir_sdi+0x6c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007404:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007408:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 800740c:	d933      	bls.n	8007476 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800740e:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8007412:	63bb      	str	r3, [r7, #56]	@ 0x38
	dp->clust = clst;					/* Current cluster# */
 8007414:	637c      	str	r4, [r7, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	b3ab      	cbz	r3, 8007486 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800741a:	eb03 2356 	add.w	r3, r3, r6, lsr #9
 800741e:	63bb      	str	r3, [r7, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007420:	f108 0838 	add.w	r8, r8, #56	@ 0x38
 8007424:	f3c6 0108 	ubfx	r1, r6, #0, #9
 8007428:	4441      	add	r1, r8
 800742a:	63f9      	str	r1, [r7, #60]	@ 0x3c
	return FR_OK;
 800742c:	2000      	movs	r0, #0
 800742e:	e01e      	b.n	800746e <dir_sdi+0xa4>
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007430:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007434:	e7d5      	b.n	80073e2 <dir_sdi+0x18>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007436:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800743a:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800743c:	42ae      	cmp	r6, r5
 800743e:	d30f      	bcc.n	8007460 <dir_sdi+0x96>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007440:	4621      	mov	r1, r4
 8007442:	4638      	mov	r0, r7
 8007444:	f7ff ff0f 	bl	8007266 <get_fat>
 8007448:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800744a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800744e:	d014      	beq.n	800747a <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007450:	2801      	cmp	r0, #1
 8007452:	d914      	bls.n	800747e <dir_sdi+0xb4>
 8007454:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007458:	4283      	cmp	r3, r0
 800745a:	d912      	bls.n	8007482 <dir_sdi+0xb8>
			ofs -= csz;
 800745c:	1b76      	subs	r6, r6, r5
 800745e:	e7ed      	b.n	800743c <dir_sdi+0x72>
		dp->sect = clust2sect(fs, clst);
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff f8f4 	bl	8006650 <clust2sect>
 8007468:	63b8      	str	r0, [r7, #56]	@ 0x38
 800746a:	e7d3      	b.n	8007414 <dir_sdi+0x4a>
		return FR_INT_ERR;
 800746c:	2002      	movs	r0, #2
}
 800746e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8007472:	2002      	movs	r0, #2
 8007474:	e7fb      	b.n	800746e <dir_sdi+0xa4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007476:	2002      	movs	r0, #2
 8007478:	e7f9      	b.n	800746e <dir_sdi+0xa4>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800747a:	2001      	movs	r0, #1
 800747c:	e7f7      	b.n	800746e <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800747e:	2002      	movs	r0, #2
 8007480:	e7f5      	b.n	800746e <dir_sdi+0xa4>
 8007482:	2002      	movs	r0, #2
 8007484:	e7f3      	b.n	800746e <dir_sdi+0xa4>
	if (!dp->sect) return FR_INT_ERR;
 8007486:	2002      	movs	r0, #2
 8007488:	e7f1      	b.n	800746e <dir_sdi+0xa4>

0800748a <create_chain>:
{
 800748a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800748e:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8007490:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8007494:	4689      	mov	r9, r1
 8007496:	b941      	cbnz	r1, 80074aa <create_chain+0x20>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007498:	f8d8 6014 	ldr.w	r6, [r8, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800749c:	b1b6      	cbz	r6, 80074cc <create_chain+0x42>
 800749e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80074a2:	42b3      	cmp	r3, r6
 80074a4:	d813      	bhi.n	80074ce <create_chain+0x44>
 80074a6:	2601      	movs	r6, #1
 80074a8:	e011      	b.n	80074ce <create_chain+0x44>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80074aa:	f7ff fedc 	bl	8007266 <get_fat>
 80074ae:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80074b0:	2801      	cmp	r0, #1
 80074b2:	f240 809e 	bls.w	80075f2 <create_chain+0x168>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80074b6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80074ba:	f000 80a4 	beq.w	8007606 <create_chain+0x17c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80074be:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80074c2:	4283      	cmp	r3, r0
 80074c4:	f200 809f 	bhi.w	8007606 <create_chain+0x17c>
		scl = clst;
 80074c8:	464e      	mov	r6, r9
 80074ca:	e000      	b.n	80074ce <create_chain+0x44>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80074cc:	2601      	movs	r6, #1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80074ce:	f898 3000 	ldrb.w	r3, [r8]
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d001      	beq.n	80074da <create_chain+0x50>
		ncl = scl;	/* Start cluster */
 80074d6:	4634      	mov	r4, r6
 80074d8:	e052      	b.n	8007580 <create_chain+0xf6>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80074da:	2201      	movs	r2, #1
 80074dc:	4631      	mov	r1, r6
 80074de:	4640      	mov	r0, r8
 80074e0:	f7ff fd7e 	bl	8006fe0 <find_bitmap>
 80074e4:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80074e6:	1e43      	subs	r3, r0, #1
 80074e8:	f113 0f03 	cmn.w	r3, #3
 80074ec:	f200 808b 	bhi.w	8007606 <create_chain+0x17c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80074f0:	2301      	movs	r3, #1
 80074f2:	461a      	mov	r2, r3
 80074f4:	4601      	mov	r1, r0
 80074f6:	4640      	mov	r0, r8
 80074f8:	f7ff fdb6 	bl	8007068 <change_bitmap>
 80074fc:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
 80074fe:	2802      	cmp	r0, #2
 8007500:	d079      	beq.n	80075f6 <create_chain+0x16c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8007502:	2801      	cmp	r0, #1
 8007504:	d079      	beq.n	80075fa <create_chain+0x170>
		if (clst == 0) {							/* Is it a new chain? */
 8007506:	f1b9 0f00 	cmp.w	r9, #0
 800750a:	d118      	bne.n	800753e <create_chain+0xb4>
			obj->stat = 2;							/* Set status 'contiguous' */
 800750c:	2202      	movs	r2, #2
 800750e:	71fa      	strb	r2, [r7, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8007510:	79fa      	ldrb	r2, [r7, #7]
 8007512:	2a02      	cmp	r2, #2
 8007514:	d064      	beq.n	80075e0 <create_chain+0x156>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8007516:	f109 0201 	add.w	r2, r9, #1
 800751a:	42aa      	cmp	r2, r5
 800751c:	d01b      	beq.n	8007556 <create_chain+0xcc>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	b90b      	cbnz	r3, 8007526 <create_chain+0x9c>
 8007522:	2301      	movs	r3, #1
 8007524:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8007526:	462a      	mov	r2, r5
 8007528:	4649      	mov	r1, r9
 800752a:	4638      	mov	r0, r7
 800752c:	f7ff fe6a 	bl	8007204 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 8007530:	4603      	mov	r3, r0
 8007532:	2800      	cmp	r0, #0
 8007534:	d156      	bne.n	80075e4 <create_chain+0x15a>
 8007536:	2201      	movs	r2, #1
 8007538:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800753a:	462c      	mov	r4, r5
 800753c:	e034      	b.n	80075a8 <create_chain+0x11e>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800753e:	79fa      	ldrb	r2, [r7, #7]
 8007540:	2a02      	cmp	r2, #2
 8007542:	d1e5      	bne.n	8007510 <create_chain+0x86>
 8007544:	1c72      	adds	r2, r6, #1
 8007546:	42aa      	cmp	r2, r5
 8007548:	d0e2      	beq.n	8007510 <create_chain+0x86>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	1ab2      	subs	r2, r6, r2
 800754e:	61ba      	str	r2, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8007550:	2203      	movs	r2, #3
 8007552:	71fa      	strb	r2, [r7, #7]
 8007554:	e7dc      	b.n	8007510 <create_chain+0x86>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	b10a      	cbz	r2, 800755e <create_chain+0xd4>
 800755a:	3201      	adds	r2, #1
 800755c:	e000      	b.n	8007560 <create_chain+0xd6>
 800755e:	2202      	movs	r2, #2
 8007560:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8007562:	462c      	mov	r4, r5
 8007564:	e020      	b.n	80075a8 <create_chain+0x11e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007566:	4621      	mov	r1, r4
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff fe7c 	bl	8007266 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800756e:	4605      	mov	r5, r0
 8007570:	b178      	cbz	r0, 8007592 <create_chain+0x108>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007572:	2801      	cmp	r0, #1
 8007574:	d047      	beq.n	8007606 <create_chain+0x17c>
 8007576:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800757a:	d044      	beq.n	8007606 <create_chain+0x17c>
			if (ncl == scl) return 0;		/* No free cluster */
 800757c:	42b4      	cmp	r4, r6
 800757e:	d041      	beq.n	8007604 <create_chain+0x17a>
			ncl++;							/* Next cluster */
 8007580:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007582:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007586:	42a3      	cmp	r3, r4
 8007588:	d8ed      	bhi.n	8007566 <create_chain+0xdc>
				if (ncl > scl) return 0;	/* No free cluster */
 800758a:	2e01      	cmp	r6, #1
 800758c:	d938      	bls.n	8007600 <create_chain+0x176>
				ncl = 2;
 800758e:	2402      	movs	r4, #2
 8007590:	e7e9      	b.n	8007566 <create_chain+0xdc>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007592:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007596:	4621      	mov	r1, r4
 8007598:	4640      	mov	r0, r8
 800759a:	f7ff fda0 	bl	80070de <put_fat>
		if (res == FR_OK && clst != 0) {
 800759e:	4603      	mov	r3, r0
 80075a0:	bb00      	cbnz	r0, 80075e4 <create_chain+0x15a>
 80075a2:	f1b9 0f00 	cmp.w	r9, #0
 80075a6:	d114      	bne.n	80075d2 <create_chain+0x148>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80075a8:	b9e3      	cbnz	r3, 80075e4 <create_chain+0x15a>
		fs->last_clst = ncl;
 80075aa:	f8c8 4014 	str.w	r4, [r8, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80075ae:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80075b2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80075b6:	3b02      	subs	r3, #2
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d802      	bhi.n	80075c2 <create_chain+0x138>
 80075bc:	3a01      	subs	r2, #1
 80075be:	f8c8 2018 	str.w	r2, [r8, #24]
		fs->fsi_flag |= 1;
 80075c2:	f898 3004 	ldrb.w	r3, [r8, #4]
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	f888 3004 	strb.w	r3, [r8, #4]
 80075ce:	4625      	mov	r5, r4
 80075d0:	e019      	b.n	8007606 <create_chain+0x17c>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80075d2:	4622      	mov	r2, r4
 80075d4:	4649      	mov	r1, r9
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff fd81 	bl	80070de <put_fat>
 80075dc:	4603      	mov	r3, r0
 80075de:	e7e3      	b.n	80075a8 <create_chain+0x11e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80075e0:	462c      	mov	r4, r5
 80075e2:	e7e1      	b.n	80075a8 <create_chain+0x11e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d001      	beq.n	80075ec <create_chain+0x162>
 80075e8:	2501      	movs	r5, #1
 80075ea:	e00c      	b.n	8007606 <create_chain+0x17c>
 80075ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80075f0:	e009      	b.n	8007606 <create_chain+0x17c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80075f2:	2501      	movs	r5, #1
 80075f4:	e007      	b.n	8007606 <create_chain+0x17c>
		if (res == FR_INT_ERR) return 1;
 80075f6:	2501      	movs	r5, #1
 80075f8:	e005      	b.n	8007606 <create_chain+0x17c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80075fa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80075fe:	e002      	b.n	8007606 <create_chain+0x17c>
				if (ncl > scl) return 0;	/* No free cluster */
 8007600:	2500      	movs	r5, #0
 8007602:	e000      	b.n	8007606 <create_chain+0x17c>
			if (ncl == scl) return 0;		/* No free cluster */
 8007604:	2500      	movs	r5, #0
}
 8007606:	4628      	mov	r0, r5
 8007608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800760c <remove_chain>:
{
 800760c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8007610:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007612:	2901      	cmp	r1, #1
 8007614:	d96b      	bls.n	80076ee <remove_chain+0xe2>
 8007616:	4607      	mov	r7, r0
 8007618:	460c      	mov	r4, r1
 800761a:	4691      	mov	r9, r2
 800761c:	69eb      	ldr	r3, [r5, #28]
 800761e:	428b      	cmp	r3, r1
 8007620:	d967      	bls.n	80076f2 <remove_chain+0xe6>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007622:	b172      	cbz	r2, 8007642 <remove_chain+0x36>
 8007624:	782b      	ldrb	r3, [r5, #0]
 8007626:	2b04      	cmp	r3, #4
 8007628:	d102      	bne.n	8007630 <remove_chain+0x24>
 800762a:	79c3      	ldrb	r3, [r0, #7]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d008      	beq.n	8007642 <remove_chain+0x36>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007634:	4649      	mov	r1, r9
 8007636:	4628      	mov	r0, r5
 8007638:	f7ff fd51 	bl	80070de <put_fat>
		if (res != FR_OK) return res;
 800763c:	4603      	mov	r3, r0
 800763e:	2800      	cmp	r0, #0
 8007640:	d158      	bne.n	80076f4 <remove_chain+0xe8>
{
 8007642:	46a0      	mov	r8, r4
 8007644:	e011      	b.n	800766a <remove_chain+0x5e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007646:	2200      	movs	r2, #0
 8007648:	4631      	mov	r1, r6
 800764a:	4628      	mov	r0, r5
 800764c:	f7ff fd47 	bl	80070de <put_fat>
			if (res != FR_OK) return res;
 8007650:	4603      	mov	r3, r0
 8007652:	b1c8      	cbz	r0, 8007688 <remove_chain+0x7c>
 8007654:	e04e      	b.n	80076f4 <remove_chain+0xe8>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8007656:	1c73      	adds	r3, r6, #1
 8007658:	42a3      	cmp	r3, r4
 800765a:	d003      	beq.n	8007664 <remove_chain+0x58>
			if (fs->fs_type == FS_EXFAT) {
 800765c:	782b      	ldrb	r3, [r5, #0]
 800765e:	2b04      	cmp	r3, #4
 8007660:	d01e      	beq.n	80076a0 <remove_chain+0x94>
			scl = ecl = nxt;
 8007662:	46a0      	mov	r8, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007664:	69eb      	ldr	r3, [r5, #28]
 8007666:	42a3      	cmp	r3, r4
 8007668:	d926      	bls.n	80076b8 <remove_chain+0xac>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800766a:	4626      	mov	r6, r4
 800766c:	4621      	mov	r1, r4
 800766e:	4638      	mov	r0, r7
 8007670:	f7ff fdf9 	bl	8007266 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8007674:	4604      	mov	r4, r0
 8007676:	b1f8      	cbz	r0, 80076b8 <remove_chain+0xac>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007678:	2801      	cmp	r0, #1
 800767a:	d03e      	beq.n	80076fa <remove_chain+0xee>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800767c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8007680:	d03d      	beq.n	80076fe <remove_chain+0xf2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8007682:	782b      	ldrb	r3, [r5, #0]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d1de      	bne.n	8007646 <remove_chain+0x3a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007688:	69aa      	ldr	r2, [r5, #24]
 800768a:	69eb      	ldr	r3, [r5, #28]
 800768c:	3b02      	subs	r3, #2
 800768e:	429a      	cmp	r2, r3
 8007690:	d2e1      	bcs.n	8007656 <remove_chain+0x4a>
			fs->free_clst++;
 8007692:	3201      	adds	r2, #1
 8007694:	61aa      	str	r2, [r5, #24]
			fs->fsi_flag |= 1;
 8007696:	792b      	ldrb	r3, [r5, #4]
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	712b      	strb	r3, [r5, #4]
 800769e:	e7da      	b.n	8007656 <remove_chain+0x4a>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80076a0:	eba6 0208 	sub.w	r2, r6, r8
 80076a4:	2300      	movs	r3, #0
 80076a6:	3201      	adds	r2, #1
 80076a8:	4641      	mov	r1, r8
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7ff fcdc 	bl	8007068 <change_bitmap>
				if (res != FR_OK) return res;
 80076b0:	4603      	mov	r3, r0
 80076b2:	b9f8      	cbnz	r0, 80076f4 <remove_chain+0xe8>
			scl = ecl = nxt;
 80076b4:	46a0      	mov	r8, r4
 80076b6:	e7d5      	b.n	8007664 <remove_chain+0x58>
	if (fs->fs_type == FS_EXFAT) {
 80076b8:	782b      	ldrb	r3, [r5, #0]
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d001      	beq.n	80076c2 <remove_chain+0xb6>
	return FR_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	e018      	b.n	80076f4 <remove_chain+0xe8>
		if (pclst == 0) {	/* Does the object have no chain? */
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	d102      	bne.n	80076ce <remove_chain+0xc2>
			obj->stat = 0;		/* Change the object status 'initial' */
 80076c8:	2300      	movs	r3, #0
 80076ca:	71fb      	strb	r3, [r7, #7]
 80076cc:	e012      	b.n	80076f4 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d001      	beq.n	80076d8 <remove_chain+0xcc>
	return FR_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e00d      	b.n	80076f4 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	454b      	cmp	r3, r9
 80076dc:	d811      	bhi.n	8007702 <remove_chain+0xf6>
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	4413      	add	r3, r2
 80076e2:	454b      	cmp	r3, r9
 80076e4:	d30f      	bcc.n	8007706 <remove_chain+0xfa>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80076e6:	2302      	movs	r3, #2
 80076e8:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e002      	b.n	80076f4 <remove_chain+0xe8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076ee:	2302      	movs	r3, #2
 80076f0:	e000      	b.n	80076f4 <remove_chain+0xe8>
 80076f2:	2302      	movs	r3, #2
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076fa:	2302      	movs	r3, #2
 80076fc:	e7fa      	b.n	80076f4 <remove_chain+0xe8>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076fe:	2301      	movs	r3, #1
 8007700:	e7f8      	b.n	80076f4 <remove_chain+0xe8>
	return FR_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e7f6      	b.n	80076f4 <remove_chain+0xe8>
 8007706:	2300      	movs	r3, #0
 8007708:	e7f4      	b.n	80076f4 <remove_chain+0xe8>

0800770a <dir_next>:
{
 800770a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 800770e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007710:	6b05      	ldr	r5, [r0, #48]	@ 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007712:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007714:	2b00      	cmp	r3, #0
 8007716:	d078      	beq.n	800780a <dir_next+0x100>
 8007718:	4604      	mov	r4, r0
 800771a:	4688      	mov	r8, r1
 800771c:	3520      	adds	r5, #32
 800771e:	7832      	ldrb	r2, [r6, #0]
 8007720:	2a04      	cmp	r2, #4
 8007722:	d016      	beq.n	8007752 <dir_next+0x48>
 8007724:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007728:	42aa      	cmp	r2, r5
 800772a:	d970      	bls.n	800780e <dir_next+0x104>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800772c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8007730:	b93f      	cbnz	r7, 8007742 <dir_next+0x38>
		dp->sect++;				/* Next sector */
 8007732:	3301      	adds	r3, #1
 8007734:	63a3      	str	r3, [r4, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 8007736:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007738:	b991      	cbnz	r1, 8007760 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800773a:	8933      	ldrh	r3, [r6, #8]
 800773c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8007740:	d90a      	bls.n	8007758 <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 8007742:	6325      	str	r5, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007744:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 8007748:	443b      	add	r3, r7
 800774a:	63e3      	str	r3, [r4, #60]	@ 0x3c
	return FR_OK;
 800774c:	2000      	movs	r0, #0
}
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007756:	e7e7      	b.n	8007728 <dir_next+0x1e>
				dp->sect = 0; return FR_NO_FILE;
 8007758:	2300      	movs	r3, #0
 800775a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800775c:	2004      	movs	r0, #4
 800775e:	e7f6      	b.n	800774e <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007760:	8973      	ldrh	r3, [r6, #10]
 8007762:	3b01      	subs	r3, #1
 8007764:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8007768:	d1eb      	bne.n	8007742 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff fd7b 	bl	8007266 <get_fat>
 8007770:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007772:	2801      	cmp	r0, #1
 8007774:	d94d      	bls.n	8007812 <dir_next+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007776:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800777a:	d04c      	beq.n	8007816 <dir_next+0x10c>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800777c:	69f3      	ldr	r3, [r6, #28]
 800777e:	4283      	cmp	r3, r0
 8007780:	d83b      	bhi.n	80077fa <dir_next+0xf0>
					if (!stretch) {								/* If no stretch, report EOT */
 8007782:	f1b8 0f00 	cmp.w	r8, #0
 8007786:	d015      	beq.n	80077b4 <dir_next+0xaa>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800778a:	4620      	mov	r0, r4
 800778c:	f7ff fe7d 	bl	800748a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007790:	4682      	mov	sl, r0
 8007792:	2800      	cmp	r0, #0
 8007794:	d041      	beq.n	800781a <dir_next+0x110>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007796:	2801      	cmp	r0, #1
 8007798:	d041      	beq.n	800781e <dir_next+0x114>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800779a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800779e:	d040      	beq.n	8007822 <dir_next+0x118>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80077a0:	79e3      	ldrb	r3, [r4, #7]
 80077a2:	f043 0304 	orr.w	r3, r3, #4
 80077a6:	71e3      	strb	r3, [r4, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7ff f951 	bl	8006a50 <sync_window>
 80077ae:	b128      	cbz	r0, 80077bc <dir_next+0xb2>
 80077b0:	2001      	movs	r0, #1
 80077b2:	e7cc      	b.n	800774e <dir_next+0x44>
						dp->sect = 0; return FR_NO_FILE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80077b8:	2004      	movs	r0, #4
 80077ba:	e7c8      	b.n	800774e <dir_next+0x44>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80077bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077c0:	2100      	movs	r1, #0
 80077c2:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 80077c6:	f7fe fe50 	bl	800646a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077ca:	4651      	mov	r1, sl
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7fe ff3f 	bl	8006650 <clust2sect>
 80077d2:	6370      	str	r0, [r6, #52]	@ 0x34
 80077d4:	8973      	ldrh	r3, [r6, #10]
 80077d6:	454b      	cmp	r3, r9
 80077d8:	d90b      	bls.n	80077f2 <dir_next+0xe8>
						fs->wflag = 1;
 80077da:	2301      	movs	r3, #1
 80077dc:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80077de:	4630      	mov	r0, r6
 80077e0:	f7ff f936 	bl	8006a50 <sync_window>
 80077e4:	b9f8      	cbnz	r0, 8007826 <dir_next+0x11c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077e6:	f109 0901 	add.w	r9, r9, #1
 80077ea:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80077ec:	3301      	adds	r3, #1
 80077ee:	6373      	str	r3, [r6, #52]	@ 0x34
 80077f0:	e7f0      	b.n	80077d4 <dir_next+0xca>
					fs->winsect -= n;							/* Restore window offset */
 80077f2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80077f4:	eba3 0309 	sub.w	r3, r3, r9
 80077f8:	6373      	str	r3, [r6, #52]	@ 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80077fa:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 80077fe:	4651      	mov	r1, sl
 8007800:	4630      	mov	r0, r6
 8007802:	f7fe ff25 	bl	8006650 <clust2sect>
 8007806:	63a0      	str	r0, [r4, #56]	@ 0x38
 8007808:	e79b      	b.n	8007742 <dir_next+0x38>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800780a:	2004      	movs	r0, #4
 800780c:	e79f      	b.n	800774e <dir_next+0x44>
 800780e:	2004      	movs	r0, #4
 8007810:	e79d      	b.n	800774e <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007812:	2002      	movs	r0, #2
 8007814:	e79b      	b.n	800774e <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007816:	2001      	movs	r0, #1
 8007818:	e799      	b.n	800774e <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800781a:	2007      	movs	r0, #7
 800781c:	e797      	b.n	800774e <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800781e:	2002      	movs	r0, #2
 8007820:	e795      	b.n	800774e <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007822:	2001      	movs	r0, #1
 8007824:	e793      	b.n	800774e <dir_next+0x44>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007826:	2001      	movs	r0, #1
 8007828:	e791      	b.n	800774e <dir_next+0x44>
	...

0800782c <load_xdir>:
{
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	6907      	ldr	r7, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 8007836:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007838:	f7ff f934 	bl	8006aa4 <move_window>
	if (res != FR_OK) return res;
 800783c:	4605      	mov	r5, r0
 800783e:	b920      	cbnz	r0, 800784a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8007840:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007842:	780b      	ldrb	r3, [r1, #0]
 8007844:	2b85      	cmp	r3, #133	@ 0x85
 8007846:	d003      	beq.n	8007850 <load_xdir+0x24>
 8007848:	2502      	movs	r5, #2
}
 800784a:	4628      	mov	r0, r5
 800784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8007850:	2220      	movs	r2, #32
 8007852:	4638      	mov	r0, r7
 8007854:	f7fe fdff 	bl	8006456 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8007858:	787e      	ldrb	r6, [r7, #1]
 800785a:	3601      	adds	r6, #1
 800785c:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800785e:	f1a6 0360 	sub.w	r3, r6, #96	@ 0x60
 8007862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007866:	d851      	bhi.n	800790c <load_xdir+0xe0>
	res = dir_next(dp, 0);
 8007868:	2100      	movs	r1, #0
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff ff4d 	bl	800770a <dir_next>
	if (res != FR_OK) return res;
 8007870:	4605      	mov	r5, r0
 8007872:	2800      	cmp	r0, #0
 8007874:	d1e9      	bne.n	800784a <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 8007876:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	f7ff f913 	bl	8006aa4 <move_window>
	if (res != FR_OK) return res;
 800787e:	4605      	mov	r5, r0
 8007880:	2800      	cmp	r0, #0
 8007882:	d1e2      	bne.n	800784a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8007884:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007886:	780b      	ldrb	r3, [r1, #0]
 8007888:	2bc0      	cmp	r3, #192	@ 0xc0
 800788a:	d001      	beq.n	8007890 <load_xdir+0x64>
 800788c:	2502      	movs	r5, #2
 800788e:	e7dc      	b.n	800784a <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8007890:	2220      	movs	r2, #32
 8007892:	18b8      	adds	r0, r7, r2
 8007894:	f7fe fddf 	bl	8006456 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8007898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800789c:	332c      	adds	r3, #44	@ 0x2c
 800789e:	4a1e      	ldr	r2, [pc, #120]	@ (8007918 <load_xdir+0xec>)
 80078a0:	fba2 2303 	umull	r2, r3, r2, r3
 80078a4:	08db      	lsrs	r3, r3, #3
 80078a6:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80078aa:	d331      	bcc.n	8007910 <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 80078ac:	f04f 0840 	mov.w	r8, #64	@ 0x40
 80078b0:	e003      	b.n	80078ba <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 80078b2:	f108 0820 	add.w	r8, r8, #32
 80078b6:	4546      	cmp	r6, r8
 80078b8:	d91a      	bls.n	80078f0 <load_xdir+0xc4>
		res = dir_next(dp, 0);
 80078ba:	2100      	movs	r1, #0
 80078bc:	4620      	mov	r0, r4
 80078be:	f7ff ff24 	bl	800770a <dir_next>
		if (res != FR_OK) return res;
 80078c2:	4605      	mov	r5, r0
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1c0      	bne.n	800784a <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 80078c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	f7ff f8ea 	bl	8006aa4 <move_window>
		if (res != FR_OK) return res;
 80078d0:	4605      	mov	r5, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d1b9      	bne.n	800784a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80078d6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80078d8:	780b      	ldrb	r3, [r1, #0]
 80078da:	2bc1      	cmp	r3, #193	@ 0xc1
 80078dc:	d11a      	bne.n	8007914 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80078de:	f5b8 7f18 	cmp.w	r8, #608	@ 0x260
 80078e2:	d2e6      	bcs.n	80078b2 <load_xdir+0x86>
 80078e4:	2220      	movs	r2, #32
 80078e6:	eb07 0008 	add.w	r0, r7, r8
 80078ea:	f7fe fdb4 	bl	8006456 <mem_cpy>
 80078ee:	e7e0      	b.n	80078b2 <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 80078f0:	f5b8 7f18 	cmp.w	r8, #608	@ 0x260
 80078f4:	d8a9      	bhi.n	800784a <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80078f6:	4638      	mov	r0, r7
 80078f8:	f7fe ffd7 	bl	80068aa <xdir_sum>
 80078fc:	4604      	mov	r4, r0
 80078fe:	1cb8      	adds	r0, r7, #2
 8007900:	f7fe fd56 	bl	80063b0 <ld_word>
 8007904:	4284      	cmp	r4, r0
 8007906:	d0a0      	beq.n	800784a <load_xdir+0x1e>
 8007908:	2502      	movs	r5, #2
 800790a:	e79e      	b.n	800784a <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800790c:	2502      	movs	r5, #2
 800790e:	e79c      	b.n	800784a <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8007910:	2502      	movs	r5, #2
 8007912:	e79a      	b.n	800784a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8007914:	2502      	movs	r5, #2
 8007916:	e798      	b.n	800784a <load_xdir+0x1e>
 8007918:	88888889 	.word	0x88888889

0800791c <load_obj_dir>:
{
 800791c:	b510      	push	{r4, lr}
 800791e:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
 8007920:	680b      	ldr	r3, [r1, #0]
 8007922:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
 8007924:	6a0b      	ldr	r3, [r1, #32]
 8007926:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8007928:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
 800792c:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800792e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007930:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007934:	6103      	str	r3, [r0, #16]
 8007936:	2300      	movs	r3, #0
 8007938:	6143      	str	r3, [r0, #20]
	dp->blk_ofs = obj->c_ofs;
 800793a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800793c:	64c1      	str	r1, [r0, #76]	@ 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800793e:	f7ff fd44 	bl	80073ca <dir_sdi>
	if (res == FR_OK) {
 8007942:	b100      	cbz	r0, 8007946 <load_obj_dir+0x2a>
}
 8007944:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
 8007946:	4620      	mov	r0, r4
 8007948:	f7ff ff70 	bl	800782c <load_xdir>
 800794c:	e7fa      	b.n	8007944 <load_obj_dir+0x28>

0800794e <dir_read>:
{
 800794e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007952:	4604      	mov	r4, r0
 8007954:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8007956:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8007958:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800795c:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 800795e:	2504      	movs	r5, #4
	while (dp->sect) {
 8007960:	e042      	b.n	80079e8 <dir_read+0x9a>
			if (_USE_LABEL && vol) {
 8007962:	f1b8 0f00 	cmp.w	r8, #0
 8007966:	d002      	beq.n	800796e <dir_read+0x20>
				if (c == 0x83) break;	/* Volume label entry? */
 8007968:	2b83      	cmp	r3, #131	@ 0x83
 800796a:	d137      	bne.n	80079dc <dir_read+0x8e>
 800796c:	e060      	b.n	8007a30 <dir_read+0xe2>
				if (c == 0x85) {		/* Start of the file entry block? */
 800796e:	2b85      	cmp	r3, #133	@ 0x85
 8007970:	d134      	bne.n	80079dc <dir_read+0x8e>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8007972:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007974:	64e3      	str	r3, [r4, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff ff58 	bl	800782c <load_xdir>
					if (res == FR_OK) {
 800797c:	4605      	mov	r5, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d157      	bne.n	8007a32 <dir_read+0xe4>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8007982:	6933      	ldr	r3, [r6, #16]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800798a:	71a3      	strb	r3, [r4, #6]
 800798c:	e050      	b.n	8007a30 <dir_read+0xe2>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800798e:	2a0f      	cmp	r2, #15
 8007990:	d119      	bne.n	80079c6 <dir_read+0x78>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007992:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007996:	d006      	beq.n	80079a6 <dir_read+0x58>
						sum = dp->dir[LDIR_Chksum];
 8007998:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800799c:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;
 80079a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80079a2:	64e2      	str	r2, [r4, #76]	@ 0x4c
						c &= (BYTE)~LLEF; ord = c;
 80079a4:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80079a6:	42bb      	cmp	r3, r7
 80079a8:	d001      	beq.n	80079ae <dir_read+0x60>
 80079aa:	27ff      	movs	r7, #255	@ 0xff
 80079ac:	e016      	b.n	80079dc <dir_read+0x8e>
 80079ae:	7b4b      	ldrb	r3, [r1, #13]
 80079b0:	454b      	cmp	r3, r9
 80079b2:	d001      	beq.n	80079b8 <dir_read+0x6a>
 80079b4:	27ff      	movs	r7, #255	@ 0xff
 80079b6:	e011      	b.n	80079dc <dir_read+0x8e>
 80079b8:	68f0      	ldr	r0, [r6, #12]
 80079ba:	f7fe fe93 	bl	80066e4 <pick_lfn>
 80079be:	b3a0      	cbz	r0, 8007a2a <dir_read+0xdc>
 80079c0:	3f01      	subs	r7, #1
 80079c2:	b2ff      	uxtb	r7, r7
 80079c4:	e00a      	b.n	80079dc <dir_read+0x8e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80079c6:	b927      	cbnz	r7, 80079d2 <dir_read+0x84>
 80079c8:	4608      	mov	r0, r1
 80079ca:	f7fe ff5e 	bl	800688a <sum_sfn>
 80079ce:	4548      	cmp	r0, r9
 80079d0:	d02e      	beq.n	8007a30 <dir_read+0xe2>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80079d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079d6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80079d8:	e02a      	b.n	8007a30 <dir_read+0xe2>
				ord = 0xFF;
 80079da:	27ff      	movs	r7, #255	@ 0xff
		res = dir_next(dp, 0);		/* Next entry */
 80079dc:	2100      	movs	r1, #0
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff fe93 	bl	800770a <dir_next>
		if (res != FR_OK) break;
 80079e4:	4605      	mov	r5, r0
 80079e6:	bb18      	cbnz	r0, 8007a30 <dir_read+0xe2>
	while (dp->sect) {
 80079e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80079ea:	b309      	cbz	r1, 8007a30 <dir_read+0xe2>
		res = move_window(fs, dp->sect);
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff f859 	bl	8006aa4 <move_window>
		if (res != FR_OK) break;
 80079f2:	4605      	mov	r5, r0
 80079f4:	b9e0      	cbnz	r0, 8007a30 <dir_read+0xe2>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80079f6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80079f8:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 80079fa:	b1c3      	cbz	r3, 8007a2e <dir_read+0xe0>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80079fc:	7832      	ldrb	r2, [r6, #0]
 80079fe:	2a04      	cmp	r2, #4
 8007a00:	d0af      	beq.n	8007962 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007a02:	7aca      	ldrb	r2, [r1, #11]
 8007a04:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007a08:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007a0a:	2be5      	cmp	r3, #229	@ 0xe5
 8007a0c:	d0e5      	beq.n	80079da <dir_read+0x8c>
 8007a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a10:	d009      	beq.n	8007a26 <dir_read+0xd8>
 8007a12:	f022 0020 	bic.w	r0, r2, #32
 8007a16:	2808      	cmp	r0, #8
 8007a18:	bf14      	ite	ne
 8007a1a:	2000      	movne	r0, #0
 8007a1c:	2001      	moveq	r0, #1
 8007a1e:	4540      	cmp	r0, r8
 8007a20:	d0b5      	beq.n	800798e <dir_read+0x40>
				ord = 0xFF;
 8007a22:	27ff      	movs	r7, #255	@ 0xff
 8007a24:	e7da      	b.n	80079dc <dir_read+0x8e>
 8007a26:	27ff      	movs	r7, #255	@ 0xff
 8007a28:	e7d8      	b.n	80079dc <dir_read+0x8e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007a2a:	27ff      	movs	r7, #255	@ 0xff
 8007a2c:	e7d6      	b.n	80079dc <dir_read+0x8e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007a2e:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007a30:	b10d      	cbz	r5, 8007a36 <dir_read+0xe8>
 8007a32:	2300      	movs	r3, #0
 8007a34:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8007a36:	4628      	mov	r0, r5
 8007a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007a3c <dir_alloc>:
{
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	4604      	mov	r4, r0
 8007a40:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8007a42:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8007a44:	2100      	movs	r1, #0
 8007a46:	f7ff fcc0 	bl	80073ca <dir_sdi>
	if (res == FR_OK) {
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	bb10      	cbnz	r0, 8007a94 <dir_alloc+0x58>
		n = 0;
 8007a4e:	2500      	movs	r5, #0
 8007a50:	e00f      	b.n	8007a72 <dir_alloc+0x36>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8007a52:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007a54:	f992 2000 	ldrsb.w	r2, [r2]
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	da01      	bge.n	8007a60 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	e002      	b.n	8007a66 <dir_alloc+0x2a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a60:	3501      	adds	r5, #1
 8007a62:	42bd      	cmp	r5, r7
 8007a64:	d016      	beq.n	8007a94 <dir_alloc+0x58>
			res = dir_next(dp, 1);
 8007a66:	2101      	movs	r1, #1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f7ff fe4e 	bl	800770a <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a6e:	4603      	mov	r3, r0
 8007a70:	b980      	cbnz	r0, 8007a94 <dir_alloc+0x58>
			res = move_window(fs, dp->sect);
 8007a72:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff f815 	bl	8006aa4 <move_window>
			if (res != FR_OK) break;
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	b950      	cbnz	r0, 8007a94 <dir_alloc+0x58>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8007a7e:	7832      	ldrb	r2, [r6, #0]
 8007a80:	2a04      	cmp	r2, #4
 8007a82:	d0e6      	beq.n	8007a52 <dir_alloc+0x16>
 8007a84:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	2ae5      	cmp	r2, #229	@ 0xe5
 8007a8a:	d0e9      	beq.n	8007a60 <dir_alloc+0x24>
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d0e7      	beq.n	8007a60 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8007a90:	2500      	movs	r5, #0
 8007a92:	e7e8      	b.n	8007a66 <dir_alloc+0x2a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d001      	beq.n	8007a9c <dir_alloc+0x60>
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a9c:	2307      	movs	r3, #7
 8007a9e:	e7fb      	b.n	8007a98 <dir_alloc+0x5c>

08007aa0 <store_xdir>:
{
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8007aa4:	6803      	ldr	r3, [r0, #0]
 8007aa6:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7fe fefe 	bl	80068aa <xdir_sum>
 8007aae:	4601      	mov	r1, r0
 8007ab0:	1cb0      	adds	r0, r6, #2
 8007ab2:	f7fe fcaf 	bl	8006414 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8007ab6:	7877      	ldrb	r7, [r6, #1]
 8007ab8:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
 8007aba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007abc:	4620      	mov	r0, r4
 8007abe:	f7ff fc84 	bl	80073ca <dir_sdi>
 8007ac2:	4605      	mov	r5, r0
	while (res == FR_OK) {
 8007ac4:	e005      	b.n	8007ad2 <store_xdir+0x32>
		dirb += SZDIRE;
 8007ac6:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4620      	mov	r0, r4
 8007acc:	f7ff fe1d 	bl	800770a <dir_next>
 8007ad0:	4605      	mov	r5, r0
	while (res == FR_OK) {
 8007ad2:	b97d      	cbnz	r5, 8007af4 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
 8007ad4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ad6:	6820      	ldr	r0, [r4, #0]
 8007ad8:	f7fe ffe4 	bl	8006aa4 <move_window>
		if (res != FR_OK) break;
 8007adc:	4605      	mov	r5, r0
 8007ade:	b948      	cbnz	r0, 8007af4 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007ae6:	f7fe fcb6 	bl	8006456 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8007af0:	3f01      	subs	r7, #1
 8007af2:	d1e8      	bne.n	8007ac6 <store_xdir+0x26>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8007af4:	2d02      	cmp	r5, #2
 8007af6:	bf28      	it	cs
 8007af8:	2502      	movcs	r5, #2
}
 8007afa:	b2e8      	uxtb	r0, r5
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b00 <create_name>:
{
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	b083      	sub	sp, #12
 8007b06:	4607      	mov	r7, r0
 8007b08:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007b0a:	f8d1 9000 	ldr.w	r9, [r1]
 8007b0e:	6803      	ldr	r3, [r0, #0]
 8007b10:	68dd      	ldr	r5, [r3, #12]
 8007b12:	2400      	movs	r4, #0
 8007b14:	4623      	mov	r3, r4
 8007b16:	e012      	b.n	8007b3e <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b18:	3601      	adds	r6, #1
 8007b1a:	f819 3006 	ldrb.w	r3, [r9, r6]
 8007b1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b20:	d0fa      	beq.n	8007b18 <create_name+0x18>
 8007b22:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b24:	d0f8      	beq.n	8007b18 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8007b26:	444e      	add	r6, r9
 8007b28:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b2c:	281f      	cmp	r0, #31
 8007b2e:	d823      	bhi.n	8007b78 <create_name+0x78>
 8007b30:	f04f 0804 	mov.w	r8, #4
 8007b34:	e024      	b.n	8007b80 <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 8007b36:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 8007b3a:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8007b3c:	4633      	mov	r3, r6
 8007b3e:	1c5e      	adds	r6, r3, #1
 8007b40:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8007b44:	281f      	cmp	r0, #31
 8007b46:	d9ee      	bls.n	8007b26 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007b48:	282f      	cmp	r0, #47	@ 0x2f
 8007b4a:	d0e6      	beq.n	8007b1a <create_name+0x1a>
 8007b4c:	285c      	cmp	r0, #92	@ 0x5c
 8007b4e:	d0e4      	beq.n	8007b1a <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007b50:	2cfe      	cmp	r4, #254	@ 0xfe
 8007b52:	f200 80df 	bhi.w	8007d14 <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007b56:	2101      	movs	r1, #1
 8007b58:	f001 fa52 	bl	8009000 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f000 80da 	beq.w	8007d18 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007b64:	287f      	cmp	r0, #127	@ 0x7f
 8007b66:	d8e6      	bhi.n	8007b36 <create_name+0x36>
 8007b68:	4601      	mov	r1, r0
 8007b6a:	486d      	ldr	r0, [pc, #436]	@ (8007d20 <create_name+0x220>)
 8007b6c:	f7fe fc8f 	bl	800648e <chk_chr>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d0e0      	beq.n	8007b36 <create_name+0x36>
 8007b74:	2006      	movs	r0, #6
 8007b76:	e085      	b.n	8007c84 <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b78:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007b7c:	e000      	b.n	8007b80 <create_name+0x80>
		di--;
 8007b7e:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007b80:	b144      	cbz	r4, 8007b94 <create_name+0x94>
		w = lfn[di - 1];
 8007b82:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 8007b86:	3b01      	subs	r3, #1
 8007b88:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d0f6      	beq.n	8007b7e <create_name+0x7e>
 8007b90:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b92:	d0f4      	beq.n	8007b7e <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 8007b94:	2300      	movs	r3, #0
 8007b96:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	f000 80be 	beq.w	8007d1c <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 8007ba0:	220b      	movs	r2, #11
 8007ba2:	2120      	movs	r1, #32
 8007ba4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8007ba8:	f7fe fc5f 	bl	800646a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <create_name+0xb2>
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8007bb6:	2a20      	cmp	r2, #32
 8007bb8:	d0fa      	beq.n	8007bb0 <create_name+0xb0>
 8007bba:	2a2e      	cmp	r2, #46	@ 0x2e
 8007bbc:	d0f8      	beq.n	8007bb0 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007bbe:	b11b      	cbz	r3, 8007bc8 <create_name+0xc8>
 8007bc0:	f048 0803 	orr.w	r8, r8, #3
 8007bc4:	e000      	b.n	8007bc8 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007bc6:	3c01      	subs	r4, #1
 8007bc8:	b16c      	cbz	r4, 8007be6 <create_name+0xe6>
 8007bca:	f104 4200 	add.w	r2, r4, #2147483648	@ 0x80000000
 8007bce:	3a01      	subs	r2, #1
 8007bd0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8007bd4:	2a2e      	cmp	r2, #46	@ 0x2e
 8007bd6:	d1f6      	bne.n	8007bc6 <create_name+0xc6>
 8007bd8:	f04f 0b08 	mov.w	fp, #8
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	f8cd a004 	str.w	sl, [sp, #4]
 8007be4:	e00a      	b.n	8007bfc <create_name+0xfc>
 8007be6:	46a2      	mov	sl, r4
 8007be8:	f04f 0b08 	mov.w	fp, #8
 8007bec:	2200      	movs	r2, #0
 8007bee:	9201      	str	r2, [sp, #4]
 8007bf0:	e004      	b.n	8007bfc <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007bf2:	454c      	cmp	r4, r9
 8007bf4:	d00b      	beq.n	8007c0e <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 8007bf6:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	f103 0901 	add.w	r9, r3, #1
 8007c00:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8007c04:	b1fe      	cbz	r6, 8007c46 <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007c06:	2e20      	cmp	r6, #32
 8007c08:	d0f5      	beq.n	8007bf6 <create_name+0xf6>
 8007c0a:	2e2e      	cmp	r6, #46	@ 0x2e
 8007c0c:	d0f1      	beq.n	8007bf2 <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007c0e:	45da      	cmp	sl, fp
 8007c10:	d210      	bcs.n	8007c34 <create_name+0x134>
 8007c12:	454c      	cmp	r4, r9
 8007c14:	d00e      	beq.n	8007c34 <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 8007c16:	2e7f      	cmp	r6, #127	@ 0x7f
 8007c18:	d844      	bhi.n	8007ca4 <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d14f      	bne.n	8007cbe <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007c1e:	f048 0803 	orr.w	r8, r8, #3
 8007c22:	265f      	movs	r6, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8007c24:	eb07 030a 	add.w	r3, r7, sl
 8007c28:	f883 6040 	strb.w	r6, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 8007c2c:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8007c2e:	f10a 0a01 	add.w	sl, sl, #1
 8007c32:	e7e3      	b.n	8007bfc <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 8007c34:	f1bb 0f0b 	cmp.w	fp, #11
 8007c38:	d027      	beq.n	8007c8a <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007c3a:	454c      	cmp	r4, r9
 8007c3c:	d001      	beq.n	8007c42 <create_name+0x142>
 8007c3e:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8007c42:	454c      	cmp	r4, r9
 8007c44:	d224      	bcs.n	8007c90 <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c46:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007c4a:	2be5      	cmp	r3, #229	@ 0xe5
 8007c4c:	d053      	beq.n	8007cf6 <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 8007c4e:	f1bb 0f08 	cmp.w	fp, #8
 8007c52:	d054      	beq.n	8007cfe <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	f003 020c 	and.w	r2, r3, #12
 8007c5a:	2a0c      	cmp	r2, #12
 8007c5c:	d003      	beq.n	8007c66 <create_name+0x166>
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d101      	bne.n	8007c6a <create_name+0x16a>
 8007c66:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c6a:	f018 0f02 	tst.w	r8, #2
 8007c6e:	d106      	bne.n	8007c7e <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d046      	beq.n	8007d08 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c7a:	2a04      	cmp	r2, #4
 8007c7c:	d047      	beq.n	8007d0e <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c7e:	f887 804b 	strb.w	r8, [r7, #75]	@ 0x4b
	return FR_OK;
 8007c82:	2000      	movs	r0, #0
}
 8007c84:	b003      	add	sp, #12
 8007c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8007c8a:	f048 0803 	orr.w	r8, r8, #3
 8007c8e:	e7da      	b.n	8007c46 <create_name+0x146>
			b <<= 2; continue;
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007c98:	4623      	mov	r3, r4
 8007c9a:	f04f 0b0b 	mov.w	fp, #11
 8007c9e:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8007ca2:	e7ab      	b.n	8007bfc <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f001 f9aa 	bl	8009000 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007cac:	4606      	mov	r6, r0
 8007cae:	b118      	cbz	r0, 8007cb8 <create_name+0x1b8>
 8007cb0:	f1a0 0680 	sub.w	r6, r0, #128	@ 0x80
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d24 <create_name+0x224>)
 8007cb6:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8007cb8:	f048 0802 	orr.w	r8, r8, #2
 8007cbc:	e7ad      	b.n	8007c1a <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4819      	ldr	r0, [pc, #100]	@ (8007d28 <create_name+0x228>)
 8007cc2:	f7fe fbe4 	bl	800648e <chk_chr>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d1a9      	bne.n	8007c1e <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007cca:	f1a6 0341 	sub.w	r3, r6, #65	@ 0x41
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2b19      	cmp	r3, #25
 8007cd2:	d804      	bhi.n	8007cde <create_name+0x1de>
					b |= 2;
 8007cd4:	9b01      	ldr	r3, [sp, #4]
 8007cd6:	f043 0302 	orr.w	r3, r3, #2
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	e7a2      	b.n	8007c24 <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 8007cde:	f1a6 0361 	sub.w	r3, r6, #97	@ 0x61
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b19      	cmp	r3, #25
 8007ce6:	d89d      	bhi.n	8007c24 <create_name+0x124>
						b |= 1; w -= 0x20;
 8007ce8:	9b01      	ldr	r3, [sp, #4]
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	3e20      	subs	r6, #32
 8007cf2:	b2b6      	uxth	r6, r6
 8007cf4:	e796      	b.n	8007c24 <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007cf6:	2305      	movs	r3, #5
 8007cf8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8007cfc:	e7a7      	b.n	8007c4e <create_name+0x14e>
	if (ni == 8) b <<= 2;
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	e7a5      	b.n	8007c54 <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007d08:	f048 0810 	orr.w	r8, r8, #16
 8007d0c:	e7b5      	b.n	8007c7a <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007d0e:	f048 0808 	orr.w	r8, r8, #8
 8007d12:	e7b4      	b.n	8007c7e <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007d14:	2006      	movs	r0, #6
 8007d16:	e7b5      	b.n	8007c84 <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007d18:	2006      	movs	r0, #6
 8007d1a:	e7b3      	b.n	8007c84 <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007d1c:	2006      	movs	r0, #6
 8007d1e:	e7b1      	b.n	8007c84 <create_name+0x184>
 8007d20:	0800a6a8 	.word	0x0800a6a8
 8007d24:	0800a6cc 	.word	0x0800a6cc
 8007d28:	0800a6b4 	.word	0x0800a6b4

08007d2c <get_xdir_info>:
{
 8007d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d30:	4607      	mov	r7, r0
 8007d32:	4688      	mov	r8, r1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8007d34:	2600      	movs	r6, #0
 8007d36:	2440      	movs	r4, #64	@ 0x40
	di = 0;
 8007d38:	4635      	mov	r5, r6
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8007d3a:	e00e      	b.n	8007d5a <get_xdir_info+0x2e>
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8007d3c:	1938      	adds	r0, r7, r4
 8007d3e:	f7fe fb37 	bl	80063b0 <ld_word>
 8007d42:	2100      	movs	r1, #0
 8007d44:	f001 f95c 	bl	8009000 <ff_convert>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8007d48:	b180      	cbz	r0, 8007d6c <get_xdir_info+0x40>
 8007d4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8007d4c:	d836      	bhi.n	8007dbc <get_xdir_info+0x90>
		fno->fname[di++] = (char)w;
 8007d4e:	eb08 0205 	add.w	r2, r8, r5
 8007d52:	7690      	strb	r0, [r2, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8007d54:	3402      	adds	r4, #2
 8007d56:	3601      	adds	r6, #1
		fno->fname[di++] = (char)w;
 8007d58:	3501      	adds	r5, #1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8007d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d5e:	42b3      	cmp	r3, r6
 8007d60:	d905      	bls.n	8007d6e <get_xdir_info+0x42>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8007d62:	f014 0f1f 	tst.w	r4, #31
 8007d66:	d1e9      	bne.n	8007d3c <get_xdir_info+0x10>
 8007d68:	3402      	adds	r4, #2
 8007d6a:	e7e7      	b.n	8007d3c <get_xdir_info+0x10>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8007d6c:	2500      	movs	r5, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8007d6e:	b925      	cbnz	r5, 8007d7a <get_xdir_info+0x4e>
 8007d70:	eb08 0305 	add.w	r3, r8, r5
 8007d74:	223f      	movs	r2, #63	@ 0x3f
 8007d76:	769a      	strb	r2, [r3, #26]
 8007d78:	3501      	adds	r5, #1
	fno->fname[di] = 0;						/* Terminate file name */
 8007d7a:	4445      	add	r5, r8
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	76ab      	strb	r3, [r5, #26]
	fno->altname[0] = 0;							/* No SFN */
 8007d80:	f888 300d 	strb.w	r3, [r8, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8007d84:	793b      	ldrb	r3, [r7, #4]
 8007d86:	f888 300c 	strb.w	r3, [r8, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007d8a:	f013 0f10 	tst.w	r3, #16
 8007d8e:	d117      	bne.n	8007dc0 <get_xdir_info+0x94>
 8007d90:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8007d94:	f7fe fb1c 	bl	80063d0 <ld_qword>
 8007d98:	f8c8 0000 	str.w	r0, [r8]
 8007d9c:	f8c8 1004 	str.w	r1, [r8, #4]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8007da0:	f107 000c 	add.w	r0, r7, #12
 8007da4:	f7fe fb04 	bl	80063b0 <ld_word>
 8007da8:	f8a8 000a 	strh.w	r0, [r8, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8007dac:	f107 000e 	add.w	r0, r7, #14
 8007db0:	f7fe fafe 	bl	80063b0 <ld_word>
 8007db4:	f8a8 0008 	strh.w	r0, [r8, #8]
}
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	e7d6      	b.n	8007d6e <get_xdir_info+0x42>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	e7e8      	b.n	8007d98 <get_xdir_info+0x6c>

08007dc6 <get_fileinfo>:
{
 8007dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007dca:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8007dce:	2300      	movs	r3, #0
 8007dd0:	768b      	strb	r3, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007dd2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d075      	beq.n	8007ec4 <get_fileinfo+0xfe>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	460c      	mov	r4, r1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8007ddc:	f898 3000 	ldrb.w	r3, [r8]
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d016      	beq.n	8007e12 <get_fileinfo+0x4c>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007de4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dea:	d01b      	beq.n	8007e24 <get_fileinfo+0x5e>
			i = j = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007df0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007df4:	1c5f      	adds	r7, r3, #1
 8007df6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8007dfa:	b180      	cbz	r0, 8007e1e <get_fileinfo+0x58>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	f001 f8ff 	bl	8009000 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007e02:	b158      	cbz	r0, 8007e1c <get_fileinfo+0x56>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007e04:	2dfe      	cmp	r5, #254	@ 0xfe
 8007e06:	d811      	bhi.n	8007e2c <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 8007e08:	1962      	adds	r2, r4, r5
 8007e0a:	7690      	strb	r0, [r2, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007e0c:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 8007e0e:	3501      	adds	r5, #1
 8007e10:	e7ee      	b.n	8007df0 <get_fileinfo+0x2a>
		get_xdir_info(fs->dirbuf, fno);
 8007e12:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007e16:	f7ff ff89 	bl	8007d2c <get_xdir_info>
		return;
 8007e1a:	e053      	b.n	8007ec4 <get_fileinfo+0xfe>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007e1c:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007e1e:	4425      	add	r5, r4
 8007e20:	2300      	movs	r3, #0
 8007e22:	76ab      	strb	r3, [r5, #26]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007e24:	7ea5      	ldrb	r5, [r4, #26]
	i = j = 0;
 8007e26:	2200      	movs	r2, #0
 8007e28:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8007e2a:	e012      	b.n	8007e52 <get_fileinfo+0x8c>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	e7f6      	b.n	8007e1e <get_fileinfo+0x58>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007e30:	23e5      	movs	r3, #229	@ 0xe5
 8007e32:	e017      	b.n	8007e64 <get_fileinfo+0x9e>
			if (!lfv) fno->fname[j] = '.';
 8007e34:	b915      	cbnz	r5, 8007e3c <get_fileinfo+0x76>
 8007e36:	18a0      	adds	r0, r4, r2
 8007e38:	272e      	movs	r7, #46	@ 0x2e
 8007e3a:	7687      	strb	r7, [r0, #26]
			fno->altname[j++] = '.';
 8007e3c:	18a0      	adds	r0, r4, r2
 8007e3e:	272e      	movs	r7, #46	@ 0x2e
 8007e40:	7347      	strb	r7, [r0, #13]
 8007e42:	3201      	adds	r2, #1
 8007e44:	e010      	b.n	8007e68 <get_fileinfo+0xa2>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007e46:	2010      	movs	r0, #16
 8007e48:	e01c      	b.n	8007e84 <get_fileinfo+0xbe>
			fno->fname[j] = c;
 8007e4a:	18a0      	adds	r0, r4, r2
 8007e4c:	7683      	strb	r3, [r0, #26]
		j++;
 8007e4e:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007e50:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 8007e52:	2b0a      	cmp	r3, #10
 8007e54:	d81b      	bhi.n	8007e8e <get_fileinfo+0xc8>
		c = (TCHAR)dp->dir[i++];
 8007e56:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8007e58:	1c59      	adds	r1, r3, #1
 8007e5a:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d0f7      	beq.n	8007e50 <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d0e5      	beq.n	8007e30 <get_fileinfo+0x6a>
		if (i == 9) {						/* Insert a . if extension is exist */
 8007e64:	2909      	cmp	r1, #9
 8007e66:	d0e5      	beq.n	8007e34 <get_fileinfo+0x6e>
		fno->altname[j] = c;
 8007e68:	18a0      	adds	r0, r4, r2
 8007e6a:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	d1ee      	bne.n	8007e4e <get_fileinfo+0x88>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007e70:	f1a3 0041 	sub.w	r0, r3, #65	@ 0x41
 8007e74:	b2c0      	uxtb	r0, r0
 8007e76:	2819      	cmp	r0, #25
 8007e78:	d8e7      	bhi.n	8007e4a <get_fileinfo+0x84>
 8007e7a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8007e7c:	7b07      	ldrb	r7, [r0, #12]
 8007e7e:	2908      	cmp	r1, #8
 8007e80:	d8e1      	bhi.n	8007e46 <get_fileinfo+0x80>
 8007e82:	2008      	movs	r0, #8
 8007e84:	4207      	tst	r7, r0
 8007e86:	d0e0      	beq.n	8007e4a <get_fileinfo+0x84>
				c += 0x20;			/* To lower */
 8007e88:	3320      	adds	r3, #32
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	e7dd      	b.n	8007e4a <get_fileinfo+0x84>
	if (!lfv) {
 8007e8e:	b935      	cbnz	r5, 8007e9e <get_fileinfo+0xd8>
		fno->fname[j] = 0;
 8007e90:	18a3      	adds	r3, r4, r2
 8007e92:	2100      	movs	r1, #0
 8007e94:	7699      	strb	r1, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007e96:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8007e98:	7b1b      	ldrb	r3, [r3, #12]
 8007e9a:	b903      	cbnz	r3, 8007e9e <get_fileinfo+0xd8>
 8007e9c:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007e9e:	4422      	add	r2, r4
 8007ea0:	2500      	movs	r5, #0
 8007ea2:	7355      	strb	r5, [r2, #13]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007ea4:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8007ea6:	7adb      	ldrb	r3, [r3, #11]
 8007ea8:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007eaa:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8007eac:	301c      	adds	r0, #28
 8007eae:	f7fe fa84 	bl	80063ba <ld_dword>
 8007eb2:	6020      	str	r0, [r4, #0]
 8007eb4:	6065      	str	r5, [r4, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007eb6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8007eb8:	3016      	adds	r0, #22
 8007eba:	f7fe fa7e 	bl	80063ba <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007ebe:	8160      	strh	r0, [r4, #10]
 8007ec0:	0c00      	lsrs	r0, r0, #16
 8007ec2:	8120      	strh	r0, [r4, #8]
}
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ec8 <xname_sum>:
{
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4604      	mov	r4, r0
	WORD sum = 0;
 8007ecc:	2500      	movs	r5, #0
	while ((chr = *name++) != 0) {
 8007ece:	e011      	b.n	8007ef4 <xname_sum+0x2c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8007ed0:	f001 f8b4 	bl	800903c <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8007ed4:	086b      	lsrs	r3, r5, #1
 8007ed6:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
 8007eda:	b2c2      	uxtb	r2, r0
 8007edc:	fa12 f383 	uxtah	r3, r2, r3
 8007ee0:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8007ee2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8007ee6:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8007eea:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8007eee:	fa10 f383 	uxtah	r3, r0, r3
 8007ef2:	b29d      	uxth	r5, r3
	while ((chr = *name++) != 0) {
 8007ef4:	f834 0b02 	ldrh.w	r0, [r4], #2
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1e9      	bne.n	8007ed0 <xname_sum+0x8>
}
 8007efc:	4628      	mov	r0, r5
 8007efe:	bd38      	pop	{r3, r4, r5, pc}

08007f00 <create_xdir>:
{
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4607      	mov	r7, r0
 8007f06:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
 8007f08:	2240      	movs	r2, #64	@ 0x40
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	f7fe faad 	bl	800646a <mem_set>
	dirb[XDIR_Type] = 0x85;
 8007f10:	2385      	movs	r3, #133	@ 0x85
 8007f12:	703b      	strb	r3, [r7, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8007f14:	23c0      	movs	r3, #192	@ 0xc0
 8007f16:	f887 3020 	strb.w	r3, [r7, #32]
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8007f1a:	2501      	movs	r5, #1
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	46a9      	mov	r9, r5
 8007f20:	2440      	movs	r4, #64	@ 0x40
 8007f22:	e017      	b.n	8007f54 <create_xdir+0x54>
			st_word(dirb + i, chr); 		/* Store it */
 8007f24:	4629      	mov	r1, r5
 8007f26:	1938      	adds	r0, r7, r4
 8007f28:	f7fe fa74 	bl	8006414 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8007f2c:	3402      	adds	r4, #2
 8007f2e:	f014 0f1f 	tst.w	r4, #31
 8007f32:	d008      	beq.n	8007f46 <create_xdir+0x46>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	d0f5      	beq.n	8007f24 <create_xdir+0x24>
 8007f38:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	d0f1      	beq.n	8007f24 <create_xdir+0x24>
 8007f40:	3601      	adds	r6, #1
 8007f42:	b2f6      	uxtb	r6, r6
 8007f44:	e7ee      	b.n	8007f24 <create_xdir+0x24>
		nb++;
 8007f46:	f109 0901 	add.w	r9, r9, #1
 8007f4a:	fa5f f989 	uxtb.w	r9, r9
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8007f4e:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8007f52:	b133      	cbz	r3, 8007f62 <create_xdir+0x62>
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8007f54:	1c63      	adds	r3, r4, #1
 8007f56:	22c1      	movs	r2, #193	@ 0xc1
 8007f58:	553a      	strb	r2, [r7, r4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	54fa      	strb	r2, [r7, r3]
 8007f5e:	3402      	adds	r4, #2
 8007f60:	e7e8      	b.n	8007f34 <create_xdir+0x34>
	dirb[XDIR_NumName] = nc;	/* Set name length */
 8007f62:	f887 6023 	strb.w	r6, [r7, #35]	@ 0x23
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8007f66:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	f7ff ffac 	bl	8007ec8 <xname_sum>
 8007f70:	4601      	mov	r1, r0
 8007f72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007f76:	f7fe fa4d 	bl	8006414 <st_word>
}
 8007f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08007f80 <cmp_lfn>:
{
 8007f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	4681      	mov	r9, r0
 8007f86:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007f88:	f101 001a 	add.w	r0, r1, #26
 8007f8c:	f7fe fa10 	bl	80063b0 <ld_word>
 8007f90:	bbc8      	cbnz	r0, 8008006 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007f92:	783e      	ldrb	r6, [r7, #0]
 8007f94:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8007f98:	3e01      	subs	r6, #1
 8007f9a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007f9e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007fa2:	f04f 0801 	mov.w	r8, #1
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	e006      	b.n	8007fb8 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8007faa:	2000      	movs	r0, #0
 8007fac:	e02c      	b.n	8008008 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	d12a      	bne.n	800800c <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007fb6:	3501      	adds	r5, #1
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	d818      	bhi.n	8007fee <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007fbc:	4b17      	ldr	r3, [pc, #92]	@ (800801c <cmp_lfn+0x9c>)
 8007fbe:	5d58      	ldrb	r0, [r3, r5]
 8007fc0:	4438      	add	r0, r7
 8007fc2:	f7fe f9f5 	bl	80063b0 <ld_word>
 8007fc6:	4604      	mov	r4, r0
		if (wc) {
 8007fc8:	f1b8 0f00 	cmp.w	r8, #0
 8007fcc:	d0ef      	beq.n	8007fae <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007fce:	2efe      	cmp	r6, #254	@ 0xfe
 8007fd0:	d8eb      	bhi.n	8007faa <cmp_lfn+0x2a>
 8007fd2:	f001 f833 	bl	800903c <ff_wtoupper>
 8007fd6:	4680      	mov	r8, r0
 8007fd8:	f106 0a01 	add.w	sl, r6, #1
 8007fdc:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8007fe0:	f001 f82c 	bl	800903c <ff_wtoupper>
 8007fe4:	4580      	cmp	r8, r0
 8007fe6:	d1e0      	bne.n	8007faa <cmp_lfn+0x2a>
			wc = uc;
 8007fe8:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007fea:	4656      	mov	r6, sl
 8007fec:	e7e3      	b.n	8007fb6 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007fee:	783b      	ldrb	r3, [r7, #0]
 8007ff0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007ff4:	d00c      	beq.n	8008010 <cmp_lfn+0x90>
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d00b      	beq.n	8008014 <cmp_lfn+0x94>
 8007ffc:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8008000:	b953      	cbnz	r3, 8008018 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8008002:	2001      	movs	r0, #1
 8008004:	e000      	b.n	8008008 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008006:	2000      	movs	r0, #0
}
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800800c:	2000      	movs	r0, #0
 800800e:	e7fb      	b.n	8008008 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8008010:	2001      	movs	r0, #1
 8008012:	e7f9      	b.n	8008008 <cmp_lfn+0x88>
 8008014:	2001      	movs	r0, #1
 8008016:	e7f7      	b.n	8008008 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008018:	2000      	movs	r0, #0
 800801a:	e7f5      	b.n	8008008 <cmp_lfn+0x88>
 800801c:	0800a6bc 	.word	0x0800a6bc

08008020 <dir_find>:
{
 8008020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8008026:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008028:	2100      	movs	r1, #0
 800802a:	f7ff f9ce 	bl	80073ca <dir_sdi>
	if (res != FR_OK) return res;
 800802e:	4606      	mov	r6, r0
 8008030:	2800      	cmp	r0, #0
 8008032:	f040 80ab 	bne.w	800818c <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008036:	783b      	ldrb	r3, [r7, #0]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d006      	beq.n	800804a <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800803c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008040:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8008042:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8008046:	46c8      	mov	r8, r9
 8008048:	e046      	b.n	80080d8 <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff ff3c 	bl	8007ec8 <xname_sum>
 8008050:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8008052:	e020      	b.n	8008096 <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8008054:	6938      	ldr	r0, [r7, #16]
 8008056:	4440      	add	r0, r8
 8008058:	f7fe f9aa 	bl	80063b0 <ld_word>
 800805c:	f000 ffee 	bl	800903c <ff_wtoupper>
 8008060:	4681      	mov	r9, r0
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
 8008068:	f000 ffe8 	bl	800903c <ff_wtoupper>
 800806c:	4581      	cmp	r9, r0
 800806e:	d10c      	bne.n	800808a <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8008070:	3d01      	subs	r5, #1
 8008072:	b2ed      	uxtb	r5, r5
 8008074:	f108 0802 	add.w	r8, r8, #2
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	b12d      	cbz	r5, 800808a <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
 800807e:	f018 0f1f 	tst.w	r8, #31
 8008082:	d1e7      	bne.n	8008054 <dir_find+0x34>
 8008084:	f108 0802 	add.w	r8, r8, #2
 8008088:	e7e4      	b.n	8008054 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800808a:	b925      	cbnz	r5, 8008096 <dir_find+0x76>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d07a      	beq.n	800818c <dir_find+0x16c>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8008096:	2100      	movs	r1, #0
 8008098:	4620      	mov	r0, r4
 800809a:	f7ff fc58 	bl	800794e <dir_read>
 800809e:	4606      	mov	r6, r0
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d173      	bne.n	800818c <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80080a4:	693d      	ldr	r5, [r7, #16]
 80080a6:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80080aa:	f7fe f981 	bl	80063b0 <ld_word>
 80080ae:	4558      	cmp	r0, fp
 80080b0:	d1f1      	bne.n	8008096 <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80080b2:	f895 5023 	ldrb.w	r5, [r5, #35]	@ 0x23
 80080b6:	f04f 0a00 	mov.w	sl, #0
 80080ba:	f04f 0840 	mov.w	r8, #64	@ 0x40
 80080be:	e7dd      	b.n	800807c <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080c4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80080c6:	f04f 08ff 	mov.w	r8, #255	@ 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80080ca:	2100      	movs	r1, #0
 80080cc:	4620      	mov	r0, r4
 80080ce:	f7ff fb1c 	bl	800770a <dir_next>
	} while (res == FR_OK);
 80080d2:	4606      	mov	r6, r0
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d159      	bne.n	800818c <dir_find+0x16c>
		res = move_window(fs, dp->sect);
 80080d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80080da:	4638      	mov	r0, r7
 80080dc:	f7fe fce2 	bl	8006aa4 <move_window>
		if (res != FR_OK) break;
 80080e0:	4606      	mov	r6, r0
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d152      	bne.n	800818c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80080e6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80080e8:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d04d      	beq.n	800818a <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80080ee:	7aea      	ldrb	r2, [r5, #11]
 80080f0:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 80080f4:	71a1      	strb	r1, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80080f6:	2be5      	cmp	r3, #229	@ 0xe5
 80080f8:	d0e2      	beq.n	80080c0 <dir_find+0xa0>
 80080fa:	f012 0f08 	tst.w	r2, #8
 80080fe:	d015      	beq.n	800812c <dir_find+0x10c>
 8008100:	290f      	cmp	r1, #15
 8008102:	d1dd      	bne.n	80080c0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008104:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 8008108:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800810c:	d1dd      	bne.n	80080ca <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800810e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008112:	d006      	beq.n	8008122 <dir_find+0x102>
						sum = dp->dir[LDIR_Chksum];
 8008114:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008118:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800811c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800811e:	64e2      	str	r2, [r4, #76]	@ 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008120:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008122:	4543      	cmp	r3, r8
 8008124:	d01e      	beq.n	8008164 <dir_find+0x144>
 8008126:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800812a:	e7ce      	b.n	80080ca <dir_find+0xaa>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800812c:	290f      	cmp	r1, #15
 800812e:	d0e9      	beq.n	8008104 <dir_find+0xe4>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	d104      	bne.n	8008140 <dir_find+0x120>
 8008136:	4628      	mov	r0, r5
 8008138:	f7fe fba7 	bl	800688a <sum_sfn>
 800813c:	4548      	cmp	r0, r9
 800813e:	d025      	beq.n	800818c <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008140:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8008144:	f013 0f01 	tst.w	r3, #1
 8008148:	d106      	bne.n	8008158 <dir_find+0x138>
 800814a:	220b      	movs	r2, #11
 800814c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8008150:	4628      	mov	r0, r5
 8008152:	f7fe f98f 	bl	8006474 <mem_cmp>
 8008156:	b1c8      	cbz	r0, 800818c <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800815c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800815e:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8008162:	e7b2      	b.n	80080ca <dir_find+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008164:	7b6b      	ldrb	r3, [r5, #13]
 8008166:	454b      	cmp	r3, r9
 8008168:	d002      	beq.n	8008170 <dir_find+0x150>
 800816a:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800816e:	e7ac      	b.n	80080ca <dir_find+0xaa>
 8008170:	4629      	mov	r1, r5
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff ff04 	bl	8007f80 <cmp_lfn>
 8008178:	b120      	cbz	r0, 8008184 <dir_find+0x164>
 800817a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800817e:	fa5f f888 	uxtb.w	r8, r8
 8008182:	e7a2      	b.n	80080ca <dir_find+0xaa>
 8008184:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8008188:	e79f      	b.n	80080ca <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800818a:	2604      	movs	r6, #4
}
 800818c:	4630      	mov	r0, r6
 800818e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008192 <follow_path>:
{
 8008192:	b530      	push	{r4, r5, lr}
 8008194:	b083      	sub	sp, #12
 8008196:	4604      	mov	r4, r0
 8008198:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800819a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800819c:	e001      	b.n	80081a2 <follow_path+0x10>
 800819e:	3301      	adds	r3, #1
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	9b01      	ldr	r3, [sp, #4]
 80081a4:	781a      	ldrb	r2, [r3, #0]
 80081a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80081a8:	d0f9      	beq.n	800819e <follow_path+0xc>
 80081aa:	2a5c      	cmp	r2, #92	@ 0x5c
 80081ac:	d0f7      	beq.n	800819e <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 80081ae:	2200      	movs	r2, #0
 80081b0:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80081b2:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b1f      	cmp	r3, #31
 80081b8:	d82c      	bhi.n	8008214 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 80081ba:	2380      	movs	r3, #128	@ 0x80
 80081bc:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 80081c0:	4611      	mov	r1, r2
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7ff f901 	bl	80073ca <dir_sdi>
 80081c8:	4603      	mov	r3, r0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	b003      	add	sp, #12
 80081ce:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80081d0:	2804      	cmp	r0, #4
 80081d2:	d1fa      	bne.n	80081ca <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80081d4:	f012 0f04 	tst.w	r2, #4
 80081d8:	d1f7      	bne.n	80081ca <follow_path+0x38>
 80081da:	2305      	movs	r3, #5
 80081dc:	e7f5      	b.n	80081ca <follow_path+0x38>
				obj->c_scl = obj->sclust;
 80081de:	68a3      	ldr	r3, [r4, #8]
 80081e0:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80081e8:	79e2      	ldrb	r2, [r4, #7]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	6263      	str	r3, [r4, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 80081ee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80081f0:	62a3      	str	r3, [r4, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80081f2:	6928      	ldr	r0, [r5, #16]
 80081f4:	3034      	adds	r0, #52	@ 0x34
 80081f6:	f7fe f8e0 	bl	80063ba <ld_dword>
 80081fa:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80081fc:	692b      	ldr	r3, [r5, #16]
 80081fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008208:	6928      	ldr	r0, [r5, #16]
 800820a:	3038      	adds	r0, #56	@ 0x38
 800820c:	f7fe f8e0 	bl	80063d0 <ld_qword>
 8008210:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008214:	a901      	add	r1, sp, #4
 8008216:	4620      	mov	r0, r4
 8008218:	f7ff fc72 	bl	8007b00 <create_name>
			if (res != FR_OK) break;
 800821c:	4603      	mov	r3, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d1d3      	bne.n	80081ca <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008222:	4620      	mov	r0, r4
 8008224:	f7ff fefc 	bl	8008020 <dir_find>
			ns = dp->fn[NSFLAG];
 8008228:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800822c:	4603      	mov	r3, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	d1ce      	bne.n	80081d0 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008232:	f012 0f04 	tst.w	r2, #4
 8008236:	d1c8      	bne.n	80081ca <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008238:	79a3      	ldrb	r3, [r4, #6]
 800823a:	f013 0f10 	tst.w	r3, #16
 800823e:	d00d      	beq.n	800825c <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8008240:	782b      	ldrb	r3, [r5, #0]
 8008242:	2b04      	cmp	r3, #4
 8008244:	d0cb      	beq.n	80081de <follow_path+0x4c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008246:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800824a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800824c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008250:	4419      	add	r1, r3
 8008252:	4628      	mov	r0, r5
 8008254:	f7fe fa20 	bl	8006698 <ld_clust>
 8008258:	60a0      	str	r0, [r4, #8]
 800825a:	e7db      	b.n	8008214 <follow_path+0x82>
				res = FR_NO_PATH; break;
 800825c:	2305      	movs	r3, #5
 800825e:	e7b4      	b.n	80081ca <follow_path+0x38>

08008260 <dir_register>:
{
 8008260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008264:	b09b      	sub	sp, #108	@ 0x6c
	FATFS *fs = dp->obj.fs;
 8008266:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008268:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 800826c:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 8008270:	f040 80e6 	bne.w	8008440 <dir_register+0x1e0>
 8008274:	4606      	mov	r6, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008276:	2400      	movs	r4, #0
 8008278:	e000      	b.n	800827c <dir_register+0x1c>
 800827a:	3401      	adds	r4, #1
 800827c:	68eb      	ldr	r3, [r5, #12]
 800827e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1f9      	bne.n	800827a <dir_register+0x1a>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008286:	782b      	ldrb	r3, [r5, #0]
 8008288:	2b04      	cmp	r3, #4
 800828a:	d022      	beq.n	80082d2 <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
 800828c:	f106 0740 	add.w	r7, r6, #64	@ 0x40
 8008290:	220c      	movs	r2, #12
 8008292:	4639      	mov	r1, r7
 8008294:	a817      	add	r0, sp, #92	@ 0x5c
 8008296:	f7fe f8de 	bl	8006456 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800829a:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 800829e:	f013 0f01 	tst.w	r3, #1
 80082a2:	d075      	beq.n	8008390 <dir_register+0x130>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80082a4:	2340      	movs	r3, #64	@ 0x40
 80082a6:	f886 304b 	strb.w	r3, [r6, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 80082aa:	f04f 0801 	mov.w	r8, #1
 80082ae:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80082b2:	d863      	bhi.n	800837c <dir_register+0x11c>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80082b4:	4643      	mov	r3, r8
 80082b6:	68ea      	ldr	r2, [r5, #12]
 80082b8:	a917      	add	r1, sp, #92	@ 0x5c
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7fe fa90 	bl	80067e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff fead 	bl	8008020 <dir_find>
			if (res != FR_OK) break;
 80082c6:	4681      	mov	r9, r0
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d157      	bne.n	800837c <dir_register+0x11c>
		for (n = 1; n < 100; n++) {
 80082cc:	f108 0801 	add.w	r8, r8, #1
 80082d0:	e7ed      	b.n	80082ae <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80082d2:	340e      	adds	r4, #14
 80082d4:	4b5f      	ldr	r3, [pc, #380]	@ (8008454 <dir_register+0x1f4>)
 80082d6:	fba3 3404 	umull	r3, r4, r3, r4
 80082da:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80082dc:	1ca1      	adds	r1, r4, #2
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff fbac 	bl	8007a3c <dir_alloc>
		if (res != FR_OK) return res;
 80082e4:	4681      	mov	r9, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f040 80ac 	bne.w	8008444 <dir_register+0x1e4>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80082ec:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80082ee:	3401      	adds	r4, #1
 80082f0:	eba3 1344 	sub.w	r3, r3, r4, lsl #5
 80082f4:	64f3      	str	r3, [r6, #76]	@ 0x4c
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80082f6:	68b3      	ldr	r3, [r6, #8]
 80082f8:	b11b      	cbz	r3, 8008302 <dir_register+0xa2>
 80082fa:	79f3      	ldrb	r3, [r6, #7]
 80082fc:	f013 0f04 	tst.w	r3, #4
 8008300:	d104      	bne.n	800830c <dir_register+0xac>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8008302:	68e9      	ldr	r1, [r5, #12]
 8008304:	6928      	ldr	r0, [r5, #16]
 8008306:	f7ff fdfb 	bl	8007f00 <create_xdir>
		return FR_OK;
 800830a:	e09b      	b.n	8008444 <dir_register+0x1e4>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800830c:	6933      	ldr	r3, [r6, #16]
 800830e:	6971      	ldr	r1, [r6, #20]
 8008310:	896a      	ldrh	r2, [r5, #10]
 8008312:	0252      	lsls	r2, r2, #9
 8008314:	189b      	adds	r3, r3, r2
 8008316:	f141 0100 	adc.w	r1, r1, #0
 800831a:	6133      	str	r3, [r6, #16]
 800831c:	6171      	str	r1, [r6, #20]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800831e:	4630      	mov	r0, r6
 8008320:	f7fe ff88 	bl	8007234 <fill_first_frag>
			if (res != FR_OK) return res;
 8008324:	b108      	cbz	r0, 800832a <dir_register+0xca>
 8008326:	4681      	mov	r9, r0
 8008328:	e08c      	b.n	8008444 <dir_register+0x1e4>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800832a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800832e:	6b71      	ldr	r1, [r6, #52]	@ 0x34
 8008330:	4630      	mov	r0, r6
 8008332:	f7fe ff67 	bl	8007204 <fill_last_frag>
			if (res != FR_OK) return res;
 8008336:	b108      	cbz	r0, 800833c <dir_register+0xdc>
 8008338:	4681      	mov	r9, r0
 800833a:	e083      	b.n	8008444 <dir_register+0x1e4>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800833c:	4631      	mov	r1, r6
 800833e:	4668      	mov	r0, sp
 8008340:	f7ff faec 	bl	800791c <load_obj_dir>
			if (res != FR_OK) return res;
 8008344:	b108      	cbz	r0, 800834a <dir_register+0xea>
 8008346:	4681      	mov	r9, r0
 8008348:	e07c      	b.n	8008444 <dir_register+0x1e4>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800834a:	6928      	ldr	r0, [r5, #16]
 800834c:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8008350:	3038      	adds	r0, #56	@ 0x38
 8008352:	f7fe f86d 	bl	8006430 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8008356:	6928      	ldr	r0, [r5, #16]
 8008358:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800835c:	3028      	adds	r0, #40	@ 0x28
 800835e:	f7fe f867 	bl	8006430 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8008362:	79f3      	ldrb	r3, [r6, #7]
 8008364:	692a      	ldr	r2, [r5, #16]
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
			res = store_xdir(&dj);							/* Store the object status */
 800836e:	4668      	mov	r0, sp
 8008370:	f7ff fb96 	bl	8007aa0 <store_xdir>
			if (res != FR_OK) return res;
 8008374:	2800      	cmp	r0, #0
 8008376:	d0c4      	beq.n	8008302 <dir_register+0xa2>
 8008378:	4681      	mov	r9, r0
 800837a:	e063      	b.n	8008444 <dir_register+0x1e4>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800837c:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8008380:	d064      	beq.n	800844c <dir_register+0x1ec>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008382:	f1b9 0f04 	cmp.w	r9, #4
 8008386:	d15d      	bne.n	8008444 <dir_register+0x1e4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008388:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 800838c:	f886 304b 	strb.w	r3, [r6, #75]	@ 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008390:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 8008394:	f013 0f02 	tst.w	r3, #2
 8008398:	d02b      	beq.n	80083f2 <dir_register+0x192>
 800839a:	340c      	adds	r4, #12
 800839c:	4b2e      	ldr	r3, [pc, #184]	@ (8008458 <dir_register+0x1f8>)
 800839e:	fba3 3404 	umull	r3, r4, r3, r4
 80083a2:	08a4      	lsrs	r4, r4, #2
 80083a4:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80083a6:	4621      	mov	r1, r4
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff fb47 	bl	8007a3c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80083ae:	4681      	mov	r9, r0
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d147      	bne.n	8008444 <dir_register+0x1e4>
 80083b4:	3c01      	subs	r4, #1
 80083b6:	d11e      	bne.n	80083f6 <dir_register+0x196>
	if (res == FR_OK) {
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	d142      	bne.n	8008444 <dir_register+0x1e4>
		res = move_window(fs, dp->sect);
 80083be:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7fe fb6f 	bl	8006aa4 <move_window>
		if (res == FR_OK) {
 80083c6:	4681      	mov	r9, r0
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d13b      	bne.n	8008444 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083cc:	2220      	movs	r2, #32
 80083ce:	2100      	movs	r1, #0
 80083d0:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80083d2:	f7fe f84a 	bl	800646a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80083d6:	220b      	movs	r2, #11
 80083d8:	4639      	mov	r1, r7
 80083da:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80083dc:	f7fe f83b 	bl	8006456 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80083e0:	f896 304b 	ldrb.w	r3, [r6, #75]	@ 0x4b
 80083e4:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80083e6:	f003 0318 	and.w	r3, r3, #24
 80083ea:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80083ec:	2301      	movs	r3, #1
 80083ee:	70eb      	strb	r3, [r5, #3]
 80083f0:	e028      	b.n	8008444 <dir_register+0x1e4>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80083f2:	2401      	movs	r4, #1
 80083f4:	e7d7      	b.n	80083a6 <dir_register+0x146>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80083f6:	6b31      	ldr	r1, [r6, #48]	@ 0x30
 80083f8:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7fe ffe4 	bl	80073ca <dir_sdi>
		if (res == FR_OK) {
 8008402:	4681      	mov	r9, r0
 8008404:	b9f0      	cbnz	r0, 8008444 <dir_register+0x1e4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008406:	4638      	mov	r0, r7
 8008408:	f7fe fa3f 	bl	800688a <sum_sfn>
 800840c:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 800840e:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8008410:	4628      	mov	r0, r5
 8008412:	f7fe fb47 	bl	8006aa4 <move_window>
				if (res != FR_OK) break;
 8008416:	4681      	mov	r9, r0
 8008418:	2800      	cmp	r0, #0
 800841a:	d1cd      	bne.n	80083b8 <dir_register+0x158>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800841c:	4643      	mov	r3, r8
 800841e:	b2e2      	uxtb	r2, r4
 8008420:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 8008422:	68e8      	ldr	r0, [r5, #12]
 8008424:	f7fe f9a0 	bl	8006768 <put_lfn>
				fs->wflag = 1;
 8008428:	2301      	movs	r3, #1
 800842a:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800842c:	2100      	movs	r1, #0
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff f96b 	bl	800770a <dir_next>
			} while (res == FR_OK && --nent);
 8008434:	4681      	mov	r9, r0
 8008436:	2800      	cmp	r0, #0
 8008438:	d1be      	bne.n	80083b8 <dir_register+0x158>
 800843a:	3c01      	subs	r4, #1
 800843c:	d1e7      	bne.n	800840e <dir_register+0x1ae>
 800843e:	e7bb      	b.n	80083b8 <dir_register+0x158>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008440:	f04f 0906 	mov.w	r9, #6
}
 8008444:	4648      	mov	r0, r9
 8008446:	b01b      	add	sp, #108	@ 0x6c
 8008448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800844c:	f04f 0907 	mov.w	r9, #7
 8008450:	e7f8      	b.n	8008444 <dir_register+0x1e4>
 8008452:	bf00      	nop
 8008454:	88888889 	.word	0x88888889
 8008458:	4ec4ec4f 	.word	0x4ec4ec4f

0800845c <sync_fs>:
{
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008460:	f7fe faf6 	bl	8006a50 <sync_window>
	if (res == FR_OK) {
 8008464:	4605      	mov	r5, r0
 8008466:	b948      	cbnz	r0, 800847c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008468:	7823      	ldrb	r3, [r4, #0]
 800846a:	2b03      	cmp	r3, #3
 800846c:	d008      	beq.n	8008480 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800846e:	2200      	movs	r2, #0
 8008470:	4611      	mov	r1, r2
 8008472:	7860      	ldrb	r0, [r4, #1]
 8008474:	f7fd ff90 	bl	8006398 <disk_ioctl>
 8008478:	b100      	cbz	r0, 800847c <sync_fs+0x20>
 800847a:	2501      	movs	r5, #1
}
 800847c:	4628      	mov	r0, r5
 800847e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008480:	7923      	ldrb	r3, [r4, #4]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d1f3      	bne.n	800846e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8008486:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 800848a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800848e:	2100      	movs	r1, #0
 8008490:	4630      	mov	r0, r6
 8008492:	f7fd ffea 	bl	800646a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008496:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800849a:	f204 2036 	addw	r0, r4, #566	@ 0x236
 800849e:	f7fd ffb9 	bl	8006414 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80084a2:	490f      	ldr	r1, [pc, #60]	@ (80084e0 <sync_fs+0x84>)
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7fd ffb9 	bl	800641c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80084aa:	490e      	ldr	r1, [pc, #56]	@ (80084e4 <sync_fs+0x88>)
 80084ac:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 80084b0:	f7fd ffb4 	bl	800641c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80084b4:	69a1      	ldr	r1, [r4, #24]
 80084b6:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 80084ba:	f7fd ffaf 	bl	800641c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80084be:	6961      	ldr	r1, [r4, #20]
 80084c0:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 80084c4:	f7fd ffaa 	bl	800641c <st_dword>
			fs->winsect = fs->volbase + 1;
 80084c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084ca:	3201      	adds	r2, #1
 80084cc:	6362      	str	r2, [r4, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80084ce:	2301      	movs	r3, #1
 80084d0:	4631      	mov	r1, r6
 80084d2:	7860      	ldrb	r0, [r4, #1]
 80084d4:	f7fd ff54 	bl	8006380 <disk_write>
			fs->fsi_flag = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	7123      	strb	r3, [r4, #4]
 80084dc:	e7c7      	b.n	800846e <sync_fs+0x12>
 80084de:	bf00      	nop
 80084e0:	41615252 	.word	0x41615252
 80084e4:	61417272 	.word	0x61417272

080084e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	9001      	str	r0, [sp, #4]
 80084ee:	9100      	str	r1, [sp, #0]
 80084f0:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80084f2:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80084f4:	a803      	add	r0, sp, #12
 80084f6:	f7fe fa5e 	bl	80069b6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80084fa:	1e04      	subs	r4, r0, #0
 80084fc:	db1c      	blt.n	8008538 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80084fe:	4b10      	ldr	r3, [pc, #64]	@ (8008540 <f_mount+0x58>)
 8008500:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8008504:	b125      	cbz	r5, 8008510 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008506:	4628      	mov	r0, r5
 8008508:	f7fe f884 	bl	8006614 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800850c:	2300      	movs	r3, #0
 800850e:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	b10b      	cbz	r3, 8008518 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008518:	9b01      	ldr	r3, [sp, #4]
 800851a:	4a09      	ldr	r2, [pc, #36]	@ (8008540 <f_mount+0x58>)
 800851c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008520:	b163      	cbz	r3, 800853c <f_mount+0x54>
 8008522:	2e01      	cmp	r6, #1
 8008524:	d002      	beq.n	800852c <f_mount+0x44>
 8008526:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8008528:	b004      	add	sp, #16
 800852a:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800852c:	2200      	movs	r2, #0
 800852e:	a901      	add	r1, sp, #4
 8008530:	4668      	mov	r0, sp
 8008532:	f7fe fb19 	bl	8006b68 <find_volume>
	LEAVE_FF(fs, res);
 8008536:	e7f7      	b.n	8008528 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008538:	200b      	movs	r0, #11
 800853a:	e7f5      	b.n	8008528 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800853c:	2000      	movs	r0, #0
 800853e:	e7f3      	b.n	8008528 <f_mount+0x40>
 8008540:	200015d4 	.word	0x200015d4

08008544 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	b09a      	sub	sp, #104	@ 0x68
 800854a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800854c:	2800      	cmp	r0, #0
 800854e:	f000 81a1 	beq.w	8008894 <f_open+0x350>
 8008552:	4614      	mov	r4, r2
 8008554:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008556:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800855a:	463a      	mov	r2, r7
 800855c:	a903      	add	r1, sp, #12
 800855e:	a801      	add	r0, sp, #4
 8008560:	f7fe fb02 	bl	8006b68 <find_volume>
	if (res == FR_OK) {
 8008564:	4605      	mov	r5, r0
 8008566:	b128      	cbz	r0, 8008574 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008568:	2300      	movs	r3, #0
 800856a:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800856c:	4628      	mov	r0, r5
 800856e:	b01a      	add	sp, #104	@ 0x68
 8008570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008578:	9901      	ldr	r1, [sp, #4]
 800857a:	a804      	add	r0, sp, #16
 800857c:	f7ff fe09 	bl	8008192 <follow_path>
		if (res == FR_OK) {
 8008580:	4605      	mov	r5, r0
 8008582:	b960      	cbnz	r0, 800859e <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008584:	f99d 305b 	ldrsb.w	r3, [sp, #91]	@ 0x5b
 8008588:	2b00      	cmp	r3, #0
 800858a:	db5b      	blt.n	8008644 <f_open+0x100>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800858c:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 8008590:	bf14      	ite	ne
 8008592:	2101      	movne	r1, #1
 8008594:	2100      	moveq	r1, #0
 8008596:	a804      	add	r0, sp, #16
 8008598:	f7fd ff82 	bl	80064a0 <chk_lock>
 800859c:	4605      	mov	r5, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800859e:	f014 0f1c 	tst.w	r4, #28
 80085a2:	f000 80bb 	beq.w	800871c <f_open+0x1d8>
			if (res != FR_OK) {					/* No file, create new */
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	d058      	beq.n	800865c <f_open+0x118>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80085aa:	2d04      	cmp	r5, #4
 80085ac:	d04c      	beq.n	8008648 <f_open+0x104>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085ae:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	d1d8      	bne.n	8008568 <f_open+0x24>
 80085b6:	f017 0f08 	tst.w	r7, #8
 80085ba:	f000 80c1 	beq.w	8008740 <f_open+0x1fc>
				dw = GET_FATTIME();
 80085be:	f7fc fde5 	bl	800518c <get_fattime>
 80085c2:	4604      	mov	r4, r0
				if (fs->fs_type == FS_EXFAT) {
 80085c4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80085c8:	f898 3000 	ldrb.w	r3, [r8]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d04f      	beq.n	8008670 <f_open+0x12c>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085d0:	4601      	mov	r1, r0
 80085d2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80085d4:	300e      	adds	r0, #14
 80085d6:	f7fd ff21 	bl	800641c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085da:	4621      	mov	r1, r4
 80085dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80085de:	3016      	adds	r0, #22
 80085e0:	f7fd ff1c 	bl	800641c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80085e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085e6:	2220      	movs	r2, #32
 80085e8:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80085ea:	9c03      	ldr	r4, [sp, #12]
 80085ec:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 80085f0:	4641      	mov	r1, r8
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7fe f850 	bl	8006698 <ld_clust>
 80085f8:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80085fa:	2200      	movs	r2, #0
 80085fc:	4641      	mov	r1, r8
 80085fe:	4620      	mov	r0, r4
 8008600:	f7fe f85d 	bl	80066be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008604:	2100      	movs	r1, #0
 8008606:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008608:	301c      	adds	r0, #28
 800860a:	f7fd ff07 	bl	800641c <st_dword>
					fs->wflag = 1;
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	f000 8092 	beq.w	8008740 <f_open+0x1fc>
						dw = fs->winsect;
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8008620:	2200      	movs	r2, #0
 8008622:	4649      	mov	r1, r9
 8008624:	a804      	add	r0, sp, #16
 8008626:	f7fe fff1 	bl	800760c <remove_chain>
						if (res == FR_OK) {
 800862a:	4605      	mov	r5, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	d19b      	bne.n	8008568 <f_open+0x24>
							res = move_window(fs, dw);
 8008630:	4621      	mov	r1, r4
 8008632:	9803      	ldr	r0, [sp, #12]
 8008634:	f7fe fa36 	bl	8006aa4 <move_window>
 8008638:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800863a:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 800863e:	9a03      	ldr	r2, [sp, #12]
 8008640:	6153      	str	r3, [r2, #20]
 8008642:	e07d      	b.n	8008740 <f_open+0x1fc>
				res = FR_INVALID_NAME;
 8008644:	2506      	movs	r5, #6
 8008646:	e7aa      	b.n	800859e <f_open+0x5a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008648:	f7fd ff64 	bl	8006514 <enq_lock>
 800864c:	b908      	cbnz	r0, 8008652 <f_open+0x10e>
 800864e:	2512      	movs	r5, #18
 8008650:	e7ad      	b.n	80085ae <f_open+0x6a>
 8008652:	a804      	add	r0, sp, #16
 8008654:	f7ff fe04 	bl	8008260 <dir_register>
 8008658:	4605      	mov	r5, r0
 800865a:	e7a8      	b.n	80085ae <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800865c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008660:	f013 0f11 	tst.w	r3, #17
 8008664:	d16b      	bne.n	800873e <f_open+0x1fa>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008666:	f014 0f04 	tst.w	r4, #4
 800866a:	d0a2      	beq.n	80085b2 <f_open+0x6e>
 800866c:	2508      	movs	r5, #8
 800866e:	e77b      	b.n	8008568 <f_open+0x24>
					fp->obj.fs = fs;
 8008670:	f8c6 8000 	str.w	r8, [r6]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8008674:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8008678:	3034      	adds	r0, #52	@ 0x34
 800867a:	f7fd fe9e 	bl	80063ba <ld_dword>
 800867e:	60b0      	str	r0, [r6, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008680:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8008684:	3038      	adds	r0, #56	@ 0x38
 8008686:	f7fd fea3 	bl	80063d0 <ld_qword>
 800868a:	e9c6 0104 	strd	r0, r1, [r6, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800868e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008692:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	71f3      	strb	r3, [r6, #7]
					fp->obj.n_frag = 0;
 800869c:	61f5      	str	r5, [r6, #28]
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800869e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80086a2:	4621      	mov	r1, r4
 80086a4:	3008      	adds	r0, #8
 80086a6:	f7fd feb9 	bl	800641c <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	7515      	strb	r5, [r2, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80086b0:	6918      	ldr	r0, [r3, #16]
 80086b2:	4621      	mov	r1, r4
 80086b4:	300c      	adds	r0, #12
 80086b6:	f7fd feb1 	bl	800641c <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	7555      	strb	r5, [r2, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80086c0:	691a      	ldr	r2, [r3, #16]
 80086c2:	2120      	movs	r1, #32
 80086c4:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80086c6:	6918      	ldr	r0, [r3, #16]
 80086c8:	4629      	mov	r1, r5
 80086ca:	3034      	adds	r0, #52	@ 0x34
 80086cc:	f7fd fea6 	bl	800641c <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	6918      	ldr	r0, [r3, #16]
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	3038      	adds	r0, #56	@ 0x38
 80086da:	f7fd fea9 	bl	8006430 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	6918      	ldr	r0, [r3, #16]
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	3028      	adds	r0, #40	@ 0x28
 80086e8:	f7fd fea2 	bl	8006430 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 80086f6:	a804      	add	r0, sp, #16
 80086f8:	f7ff f9d2 	bl	8007aa0 <store_xdir>
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80086fc:	4605      	mov	r5, r0
 80086fe:	2800      	cmp	r0, #0
 8008700:	f47f af32 	bne.w	8008568 <f_open+0x24>
 8008704:	68b1      	ldr	r1, [r6, #8]
 8008706:	b1d9      	cbz	r1, 8008740 <f_open+0x1fc>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008708:	2200      	movs	r2, #0
 800870a:	4630      	mov	r0, r6
 800870c:	f7fe ff7e 	bl	800760c <remove_chain>
 8008710:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8008712:	68b3      	ldr	r3, [r6, #8]
 8008714:	3b01      	subs	r3, #1
 8008716:	9a03      	ldr	r2, [sp, #12]
 8008718:	6153      	str	r3, [r2, #20]
 800871a:	e011      	b.n	8008740 <f_open+0x1fc>
			if (res == FR_OK) {					/* Following succeeded */
 800871c:	2d00      	cmp	r5, #0
 800871e:	f47f af23 	bne.w	8008568 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008722:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008726:	f013 0f10 	tst.w	r3, #16
 800872a:	f040 80ad 	bne.w	8008888 <f_open+0x344>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800872e:	f014 0f02 	tst.w	r4, #2
 8008732:	d005      	beq.n	8008740 <f_open+0x1fc>
 8008734:	f013 0f01 	tst.w	r3, #1
 8008738:	d002      	beq.n	8008740 <f_open+0x1fc>
						res = FR_DENIED;
 800873a:	2507      	movs	r5, #7
 800873c:	e714      	b.n	8008568 <f_open+0x24>
					res = FR_DENIED;
 800873e:	2507      	movs	r5, #7
		if (res == FR_OK) {
 8008740:	2d00      	cmp	r5, #0
 8008742:	f47f af11 	bne.w	8008568 <f_open+0x24>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008746:	f017 0f08 	tst.w	r7, #8
 800874a:	d001      	beq.n	8008750 <f_open+0x20c>
				mode |= FA_MODIFIED;
 800874c:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008754:	64b3      	str	r3, [r6, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8008756:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008758:	64f3      	str	r3, [r6, #76]	@ 0x4c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800875a:	2f01      	cmp	r7, #1
 800875c:	bf94      	ite	ls
 800875e:	2100      	movls	r1, #0
 8008760:	2101      	movhi	r1, #1
 8008762:	a804      	add	r0, sp, #16
 8008764:	f7fd fee6 	bl	8006534 <inc_lock>
 8008768:	62f0      	str	r0, [r6, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800876a:	2800      	cmp	r0, #0
 800876c:	f000 808e 	beq.w	800888c <f_open+0x348>
			if (fs->fs_type == FS_EXFAT) {
 8008770:	9c03      	ldr	r4, [sp, #12]
 8008772:	7823      	ldrb	r3, [r4, #0]
 8008774:	2b04      	cmp	r3, #4
 8008776:	d034      	beq.n	80087e2 <f_open+0x29e>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008778:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 800877c:	4641      	mov	r1, r8
 800877e:	4620      	mov	r0, r4
 8008780:	f7fd ff8a 	bl	8006698 <ld_clust>
 8008784:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008786:	f108 001c 	add.w	r0, r8, #28
 800878a:	f7fd fe16 	bl	80063ba <ld_dword>
 800878e:	6130      	str	r0, [r6, #16]
 8008790:	2300      	movs	r3, #0
 8008792:	6173      	str	r3, [r6, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008794:	2100      	movs	r1, #0
 8008796:	6531      	str	r1, [r6, #80]	@ 0x50
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008798:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	88db      	ldrh	r3, [r3, #6]
 800879e:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80087a0:	f886 7030 	strb.w	r7, [r6, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 80087a4:	f886 1031 	strb.w	r1, [r6, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80087a8:	6471      	str	r1, [r6, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	e9c6 230e 	strd	r2, r3, [r6, #56]	@ 0x38
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80087b2:	f106 0954 	add.w	r9, r6, #84	@ 0x54
 80087b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ba:	4648      	mov	r0, r9
 80087bc:	f7fd fe55 	bl	800646a <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80087c0:	f017 0f20 	tst.w	r7, #32
 80087c4:	d05c      	beq.n	8008880 <f_open+0x33c>
 80087c6:	6934      	ldr	r4, [r6, #16]
 80087c8:	6977      	ldr	r7, [r6, #20]
 80087ca:	ea54 0307 	orrs.w	r3, r4, r7
 80087ce:	d057      	beq.n	8008880 <f_open+0x33c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80087d0:	63b4      	str	r4, [r6, #56]	@ 0x38
 80087d2:	63f7      	str	r7, [r6, #60]	@ 0x3c
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 80087da:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80087de:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087e0:	e021      	b.n	8008826 <f_open+0x2e2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80087e2:	9b06      	ldr	r3, [sp, #24]
 80087e4:	6233      	str	r3, [r6, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80087e6:	9b08      	ldr	r3, [sp, #32]
 80087e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80087ec:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	6273      	str	r3, [r6, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80087f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087f6:	62b3      	str	r3, [r6, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80087f8:	6920      	ldr	r0, [r4, #16]
 80087fa:	3034      	adds	r0, #52	@ 0x34
 80087fc:	f7fd fddd 	bl	80063ba <ld_dword>
 8008800:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008802:	6920      	ldr	r0, [r4, #16]
 8008804:	3038      	adds	r0, #56	@ 0x38
 8008806:	f7fd fde3 	bl	80063d0 <ld_qword>
 800880a:	e9c6 0104 	strd	r0, r1, [r6, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	71f3      	strb	r3, [r6, #7]
 800881a:	e7bb      	b.n	8008794 <f_open+0x250>
					if (clst <= 1) res = FR_INT_ERR;
 800881c:	2502      	movs	r5, #2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800881e:	ebb4 0408 	subs.w	r4, r4, r8
 8008822:	f167 0700 	sbc.w	r7, r7, #0
 8008826:	b985      	cbnz	r5, 800884a <f_open+0x306>
 8008828:	46d0      	mov	r8, sl
 800882a:	45a2      	cmp	sl, r4
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	41bb      	sbcs	r3, r7
 8008832:	d20a      	bcs.n	800884a <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8008834:	4630      	mov	r0, r6
 8008836:	f7fe fd16 	bl	8007266 <get_fat>
 800883a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800883c:	2801      	cmp	r0, #1
 800883e:	d9ed      	bls.n	800881c <f_open+0x2d8>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008840:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8008844:	d1eb      	bne.n	800881e <f_open+0x2da>
 8008846:	2501      	movs	r5, #1
 8008848:	e7e9      	b.n	800881e <f_open+0x2da>
				fp->clust = clst;
 800884a:	6431      	str	r1, [r6, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800884c:	2d00      	cmp	r5, #0
 800884e:	f47f ae8b 	bne.w	8008568 <f_open+0x24>
 8008852:	f3c4 0308 	ubfx	r3, r4, #0, #9
 8008856:	b19b      	cbz	r3, 8008880 <f_open+0x33c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008858:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800885c:	4640      	mov	r0, r8
 800885e:	f7fd fef7 	bl	8006650 <clust2sect>
 8008862:	b908      	cbnz	r0, 8008868 <f_open+0x324>
						res = FR_INT_ERR;
 8008864:	2502      	movs	r5, #2
 8008866:	e67f      	b.n	8008568 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008868:	0a64      	lsrs	r4, r4, #9
 800886a:	ea44 54c7 	orr.w	r4, r4, r7, lsl #23
 800886e:	1822      	adds	r2, r4, r0
 8008870:	6472      	str	r2, [r6, #68]	@ 0x44
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008872:	2301      	movs	r3, #1
 8008874:	4649      	mov	r1, r9
 8008876:	f898 0001 	ldrb.w	r0, [r8, #1]
 800887a:	f7fd fd75 	bl	8006368 <disk_read>
 800887e:	b938      	cbnz	r0, 8008890 <f_open+0x34c>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008880:	2d00      	cmp	r5, #0
 8008882:	f43f ae73 	beq.w	800856c <f_open+0x28>
 8008886:	e66f      	b.n	8008568 <f_open+0x24>
					res = FR_NO_FILE;
 8008888:	2504      	movs	r5, #4
 800888a:	e66d      	b.n	8008568 <f_open+0x24>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800888c:	2502      	movs	r5, #2
 800888e:	e66b      	b.n	8008568 <f_open+0x24>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008890:	2501      	movs	r5, #1
 8008892:	e669      	b.n	8008568 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008894:	2509      	movs	r5, #9
 8008896:	e669      	b.n	800856c <f_open+0x28>

08008898 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	b085      	sub	sp, #20
 800889e:	4604      	mov	r4, r0
 80088a0:	460e      	mov	r6, r1
 80088a2:	4615      	mov	r5, r2
 80088a4:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80088ac:	a903      	add	r1, sp, #12
 80088ae:	f7fe f8ac 	bl	8006a0a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088b2:	9001      	str	r0, [sp, #4]
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f040 80be 	bne.w	8008a36 <f_read+0x19e>
 80088ba:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 80b8 	bne.w	8008a36 <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80088c6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80088ca:	f013 0f01 	tst.w	r3, #1
 80088ce:	f000 80d3 	beq.w	8008a78 <f_read+0x1e0>
	remain = fp->obj.objsize - fp->fptr;
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	6962      	ldr	r2, [r4, #20]
 80088d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80088d8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80088da:	1a1b      	subs	r3, r3, r0
 80088dc:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80088e0:	42ab      	cmp	r3, r5
 80088e2:	f172 0200 	sbcs.w	r2, r2, #0
 80088e6:	d266      	bcs.n	80089b6 <f_read+0x11e>
 80088e8:	461d      	mov	r5, r3
 80088ea:	e064      	b.n	80089b6 <f_read+0x11e>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80088ec:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80088ee:	b119      	cbz	r1, 80088f8 <f_read+0x60>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7fd feb9 	bl	8006668 <clmt_clust>
 80088f6:	e072      	b.n	80089de <f_read+0x146>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80088f8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7fe fcb3 	bl	8007266 <get_fat>
 8008900:	e06d      	b.n	80089de <f_read+0x146>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008902:	f04f 0a02 	mov.w	sl, #2
 8008906:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 800890a:	f8cd a004 	str.w	sl, [sp, #4]
 800890e:	e092      	b.n	8008a36 <f_read+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008910:	f04f 0a01 	mov.w	sl, #1
 8008914:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008918:	f8cd a004 	str.w	sl, [sp, #4]
 800891c:	e08b      	b.n	8008a36 <f_read+0x19e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800891e:	f04f 0a02 	mov.w	sl, #2
 8008922:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008926:	f8cd a004 	str.w	sl, [sp, #4]
 800892a:	e084      	b.n	8008a36 <f_read+0x19e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800892c:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8008930:	2b00      	cmp	r3, #0
 8008932:	db02      	blt.n	800893a <f_read+0xa2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008934:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8008938:	e02f      	b.n	800899a <f_read+0x102>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800893a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800893c:	eba0 0009 	sub.w	r0, r0, r9
 8008940:	4550      	cmp	r0, sl
 8008942:	d2f7      	bcs.n	8008934 <f_read+0x9c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008948:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 800894c:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 8008950:	f7fd fd81 	bl	8006456 <mem_cpy>
 8008954:	e7ee      	b.n	8008934 <f_read+0x9c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008956:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008958:	454a      	cmp	r2, r9
 800895a:	d00d      	beq.n	8008978 <f_read+0xe0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800895c:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8008960:	2b00      	cmp	r3, #0
 8008962:	db6c      	blt.n	8008a3e <f_read+0x1a6>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008964:	2301      	movs	r3, #1
 8008966:	464a      	mov	r2, r9
 8008968:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 800896c:	9803      	ldr	r0, [sp, #12]
 800896e:	7840      	ldrb	r0, [r0, #1]
 8008970:	f7fd fcfa 	bl	8006368 <disk_read>
 8008974:	2800      	cmp	r0, #0
 8008976:	d178      	bne.n	8008a6a <f_read+0x1d2>
			}
#endif
			fp->sect = sect;
 8008978:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800897c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800897e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008982:	f5c3 7700 	rsb	r7, r3, #512	@ 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008986:	42bd      	cmp	r5, r7
 8008988:	d200      	bcs.n	800898c <f_read+0xf4>
 800898a:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800898c:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8008990:	463a      	mov	r2, r7
 8008992:	4419      	add	r1, r3
 8008994:	4630      	mov	r0, r6
 8008996:	f7fd fd5e 	bl	8006456 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800899a:	443e      	add	r6, r7
 800899c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800899e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	f142 0200 	adc.w	r2, r2, #0
 80089a6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80089a8:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80089aa:	f8d8 3000 	ldr.w	r3, [r8]
 80089ae:	443b      	add	r3, r7
 80089b0:	f8c8 3000 	str.w	r3, [r8]
 80089b4:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	d03d      	beq.n	8008a36 <f_read+0x19e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80089ba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80089bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80089be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80089c2:	2900      	cmp	r1, #0
 80089c4:	d1da      	bne.n	800897c <f_read+0xe4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80089c6:	0a57      	lsrs	r7, r2, #9
 80089c8:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
 80089cc:	9903      	ldr	r1, [sp, #12]
 80089ce:	8949      	ldrh	r1, [r1, #10]
 80089d0:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80089d2:	400f      	ands	r7, r1
 80089d4:	d109      	bne.n	80089ea <f_read+0x152>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80089d6:	ea52 0103 	orrs.w	r1, r2, r3
 80089da:	d187      	bne.n	80088ec <f_read+0x54>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80089dc:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80089de:	2801      	cmp	r0, #1
 80089e0:	d98f      	bls.n	8008902 <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089e2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80089e6:	d093      	beq.n	8008910 <f_read+0x78>
				fp->clust = clst;				/* Update current cluster */
 80089e8:	6420      	str	r0, [r4, #64]	@ 0x40
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80089ee:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80089f0:	4658      	mov	r0, fp
 80089f2:	f7fd fe2d 	bl	8006650 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089f6:	4681      	mov	r9, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d090      	beq.n	800891e <f_read+0x86>
			sect += csect;
 80089fc:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80089fe:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a02:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8008a06:	d3a6      	bcc.n	8008956 <f_read+0xbe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a08:	eb07 030a 	add.w	r3, r7, sl
 8008a0c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d901      	bls.n	8008a18 <f_read+0x180>
					cc = fs->csize - csect;
 8008a14:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a18:	4653      	mov	r3, sl
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008a22:	f7fd fca1 	bl	8006368 <disk_read>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d080      	beq.n	800892c <f_read+0x94>
 8008a2a:	f04f 0a01 	mov.w	sl, #1
 8008a2e:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008a32:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8008a36:	9801      	ldr	r0, [sp, #4]
 8008a38:	b005      	add	sp, #20
 8008a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8008a44:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008a48:	f7fd fc9a 	bl	8006380 <disk_write>
 8008a4c:	b930      	cbnz	r0, 8008a5c <f_read+0x1c4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a4e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a56:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008a5a:	e783      	b.n	8008964 <f_read+0xcc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a5c:	f04f 0a01 	mov.w	sl, #1
 8008a60:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008a64:	f8cd a004 	str.w	sl, [sp, #4]
 8008a68:	e7e5      	b.n	8008a36 <f_read+0x19e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a6a:	f04f 0a01 	mov.w	sl, #1
 8008a6e:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008a72:	f8cd a004 	str.w	sl, [sp, #4]
 8008a76:	e7de      	b.n	8008a36 <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a78:	2307      	movs	r3, #7
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	e7db      	b.n	8008a36 <f_read+0x19e>

08008a7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	4604      	mov	r4, r0
 8008a86:	460e      	mov	r6, r1
 8008a88:	4615      	mov	r5, r2
 8008a8a:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a92:	a903      	add	r1, sp, #12
 8008a94:	f7fd ffb9 	bl	8006a0a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a98:	9001      	str	r0, [sp, #4]
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d151      	bne.n	8008b42 <f_write+0xc4>
 8008a9e:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d14c      	bne.n	8008b42 <f_write+0xc4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008aa8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008aac:	f013 0f02 	tst.w	r3, #2
 8008ab0:	f000 8105 	beq.w	8008cbe <f_write+0x240>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	f000 80cb 	beq.w	8008c54 <f_write+0x1d6>
 8008abe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008ac0:	42eb      	cmn	r3, r5
 8008ac2:	f0c0 80c7 	bcc.w	8008c54 <f_write+0x1d6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ac6:	43dd      	mvns	r5, r3
 8008ac8:	e0c4      	b.n	8008c54 <f_write+0x1d6>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008aca:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d03c      	beq.n	8008b4a <f_write+0xcc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f7fd fdc9 	bl	8006668 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f000 80ea 	beq.w	8008cb0 <f_write+0x232>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008adc:	2801      	cmp	r0, #1
 8008ade:	d039      	beq.n	8008b54 <f_write+0xd6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ae0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8008ae4:	d03d      	beq.n	8008b62 <f_write+0xe4>
				fp->clust = clst;			/* Update current cluster */
 8008ae6:	6420      	str	r0, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ae8:	68a3      	ldr	r3, [r4, #8]
 8008aea:	b903      	cbnz	r3, 8008aee <f_write+0x70>
 8008aec:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008aee:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	db3c      	blt.n	8008b70 <f_write+0xf2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008af6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008afa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8008afc:	4658      	mov	r0, fp
 8008afe:	f7fd fda7 	bl	8006650 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b02:	4681      	mov	r9, r0
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d04a      	beq.n	8008b9e <f_write+0x120>
			sect += csect;
 8008b08:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008b0a:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b0e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8008b12:	d362      	bcc.n	8008bda <f_write+0x15c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b14:	eb07 030a 	add.w	r3, r7, sl
 8008b18:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d901      	bls.n	8008b24 <f_write+0xa6>
					cc = fs->csize - csect;
 8008b20:	eba2 0a07 	sub.w	sl, r2, r7
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b24:	4653      	mov	r3, sl
 8008b26:	464a      	mov	r2, r9
 8008b28:	4631      	mov	r1, r6
 8008b2a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008b2e:	f7fd fc27 	bl	8006380 <disk_write>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d03a      	beq.n	8008bac <f_write+0x12e>
 8008b36:	f04f 0a01 	mov.w	sl, #1
 8008b3a:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008b3e:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8008b42:	9801      	ldr	r0, [sp, #4]
 8008b44:	b005      	add	sp, #20
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b4a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f7fe fc9c 	bl	800748a <create_chain>
 8008b52:	e7c0      	b.n	8008ad6 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b54:	f04f 0a02 	mov.w	sl, #2
 8008b58:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008b5c:	f8cd a004 	str.w	sl, [sp, #4]
 8008b60:	e7ef      	b.n	8008b42 <f_write+0xc4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b62:	f04f 0a01 	mov.w	sl, #1
 8008b66:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008b6a:	f8cd a004 	str.w	sl, [sp, #4]
 8008b6e:	e7e8      	b.n	8008b42 <f_write+0xc4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b70:	2301      	movs	r3, #1
 8008b72:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008b74:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8008b78:	9803      	ldr	r0, [sp, #12]
 8008b7a:	7840      	ldrb	r0, [r0, #1]
 8008b7c:	f7fd fc00 	bl	8006380 <disk_write>
 8008b80:	b930      	cbnz	r0, 8008b90 <f_write+0x112>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b82:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008b8e:	e7b2      	b.n	8008af6 <f_write+0x78>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b90:	f04f 0a01 	mov.w	sl, #1
 8008b94:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008b98:	f8cd a004 	str.w	sl, [sp, #4]
 8008b9c:	e7d1      	b.n	8008b42 <f_write+0xc4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b9e:	f04f 0a02 	mov.w	sl, #2
 8008ba2:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008ba6:	f8cd a004 	str.w	sl, [sp, #4]
 8008baa:	e7ca      	b.n	8008b42 <f_write+0xc4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008bac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008bae:	eba1 0109 	sub.w	r1, r1, r9
 8008bb2:	4551      	cmp	r1, sl
 8008bb4:	d302      	bcc.n	8008bbc <f_write+0x13e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008bb6:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8008bba:	e02f      	b.n	8008c1c <f_write+0x19e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bc0:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 8008bc4:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008bc8:	f7fd fc45 	bl	8006456 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bcc:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008bd8:	e7ed      	b.n	8008bb6 <f_write+0x138>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008bda:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008bdc:	454b      	cmp	r3, r9
 8008bde:	d006      	beq.n	8008bee <f_write+0x170>
				fp->fptr < fp->obj.objsize &&
 8008be0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8008be2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008be4:	6921      	ldr	r1, [r4, #16]
 8008be6:	6962      	ldr	r2, [r4, #20]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008be8:	4288      	cmp	r0, r1
 8008bea:	4193      	sbcs	r3, r2
 8008bec:	d34f      	bcc.n	8008c8e <f_write+0x210>
			fp->sect = sect;
 8008bee:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008bf2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf8:	f5c3 7700 	rsb	r7, r3, #512	@ 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008bfc:	42bd      	cmp	r5, r7
 8008bfe:	d200      	bcs.n	8008c02 <f_write+0x184>
 8008c00:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008c02:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008c06:	463a      	mov	r2, r7
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4418      	add	r0, r3
 8008c0c:	f7fd fc23 	bl	8006456 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c10:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008c14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c18:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c1c:	443e      	add	r6, r7
 8008c1e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008c20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008c22:	18ba      	adds	r2, r7, r2
 8008c24:	f143 0300 	adc.w	r3, r3, #0
 8008c28:	63a2      	str	r2, [r4, #56]	@ 0x38
 8008c2a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008c2c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8008c30:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	4572      	cmp	r2, lr
 8008c3a:	eb73 030c 	sbcs.w	r3, r3, ip
 8008c3e:	d201      	bcs.n	8008c44 <f_write+0x1c6>
 8008c40:	4670      	mov	r0, lr
 8008c42:	4661      	mov	r1, ip
 8008c44:	6120      	str	r0, [r4, #16]
 8008c46:	6161      	str	r1, [r4, #20]
 8008c48:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4c:	443b      	add	r3, r7
 8008c4e:	f8c8 3000 	str.w	r3, [r8]
 8008c52:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 8008c54:	b365      	cbz	r5, 8008cb0 <f_write+0x232>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c56:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008c58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008c5a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d1c7      	bne.n	8008bf2 <f_write+0x174>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c62:	0a57      	lsrs	r7, r2, #9
 8008c64:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
 8008c68:	9903      	ldr	r1, [sp, #12]
 8008c6a:	8949      	ldrh	r1, [r1, #10]
 8008c6c:	3901      	subs	r1, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8008c6e:	400f      	ands	r7, r1
 8008c70:	f47f af3d 	bne.w	8008aee <f_write+0x70>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c74:	ea52 0103 	orrs.w	r1, r2, r3
 8008c78:	f47f af27 	bne.w	8008aca <f_write+0x4c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c7c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f47f af2c 	bne.w	8008adc <f_write+0x5e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c84:	2100      	movs	r1, #0
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7fe fbff 	bl	800748a <create_chain>
 8008c8c:	e723      	b.n	8008ad6 <f_write+0x58>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c8e:	2301      	movs	r3, #1
 8008c90:	464a      	mov	r2, r9
 8008c92:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8008c96:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008c9a:	f7fd fb65 	bl	8006368 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d0a5      	beq.n	8008bee <f_write+0x170>
					ABORT(fs, FR_DISK_ERR);
 8008ca2:	f04f 0a01 	mov.w	sl, #1
 8008ca6:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8008caa:	f8cd a004 	str.w	sl, [sp, #4]
 8008cae:	e748      	b.n	8008b42 <f_write+0xc4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008cb0:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	LEAVE_FF(fs, FR_OK);
 8008cbc:	e741      	b.n	8008b42 <f_write+0xc4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008cbe:	2307      	movs	r3, #7
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	e73e      	b.n	8008b42 <f_write+0xc4>

08008cc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	b098      	sub	sp, #96	@ 0x60
 8008cc8:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008cca:	a917      	add	r1, sp, #92	@ 0x5c
 8008ccc:	f7fd fe9d 	bl	8006a0a <validate>
	if (res == FR_OK) {
 8008cd0:	b998      	cbnz	r0, 8008cfa <f_sync+0x36>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008cd2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008cd6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008cda:	d00e      	beq.n	8008cfa <f_sync+0x36>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008cdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ce0:	d10d      	bne.n	8008cfe <f_sync+0x3a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ce2:	f7fc fa53 	bl	800518c <get_fattime>
 8008ce6:	4605      	mov	r5, r0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008ce8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008cea:	7803      	ldrb	r3, [r0, #0]
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d017      	beq.n	8008d20 <f_sync+0x5c>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008cf0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008cf2:	f7fd fed7 	bl	8006aa4 <move_window>
				if (res == FR_OK) {
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d061      	beq.n	8008dbe <f_sync+0xfa>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8008cfa:	b018      	add	sp, #96	@ 0x60
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008cfe:	2301      	movs	r3, #1
 8008d00:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008d02:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8008d06:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008d08:	7840      	ldrb	r0, [r0, #1]
 8008d0a:	f7fd fb39 	bl	8006380 <disk_write>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d17b      	bne.n	8008e0a <f_sync+0x146>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d12:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d1a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008d1e:	e7e0      	b.n	8008ce2 <f_sync+0x1e>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8008d20:	4620      	mov	r0, r4
 8008d22:	f7fe fa87 	bl	8007234 <fill_first_frag>
				if (res == FR_OK) {
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d1e7      	bne.n	8008cfa <f_sync+0x36>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d2e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8008d30:	4620      	mov	r0, r4
 8008d32:	f7fe fa67 	bl	8007204 <fill_last_frag>
				if (res == FR_OK) {
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d1df      	bne.n	8008cfa <f_sync+0x36>
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4668      	mov	r0, sp
 8008d3e:	f7fe fded 	bl	800791c <load_obj_dir>
					if (res == FR_OK) {
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d1d9      	bne.n	8008cfa <f_sync+0x36>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8008d46:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d48:	6919      	ldr	r1, [r3, #16]
 8008d4a:	790a      	ldrb	r2, [r1, #4]
 8008d4c:	f042 0220 	orr.w	r2, r2, #32
 8008d50:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8008d52:	79e2      	ldrb	r2, [r4, #7]
 8008d54:	6919      	ldr	r1, [r3, #16]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	f881 2021 	strb.w	r2, [r1, #33]	@ 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8008d5e:	6918      	ldr	r0, [r3, #16]
 8008d60:	68a1      	ldr	r1, [r4, #8]
 8008d62:	3034      	adds	r0, #52	@ 0x34
 8008d64:	f7fd fb5a 	bl	800641c <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8008d68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d6a:	6918      	ldr	r0, [r3, #16]
 8008d6c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8008d70:	3038      	adds	r0, #56	@ 0x38
 8008d72:	f7fd fb5d 	bl	8006430 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8008d76:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d78:	6918      	ldr	r0, [r3, #16]
 8008d7a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8008d7e:	3028      	adds	r0, #40	@ 0x28
 8008d80:	f7fd fb56 	bl	8006430 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008d84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d86:	6918      	ldr	r0, [r3, #16]
 8008d88:	4629      	mov	r1, r5
 8008d8a:	300c      	adds	r0, #12
 8008d8c:	f7fd fb46 	bl	800641c <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008d90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	2100      	movs	r1, #0
 8008d96:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8008d98:	6918      	ldr	r0, [r3, #16]
 8008d9a:	3010      	adds	r0, #16
 8008d9c:	f7fd fb3e 	bl	800641c <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8008da0:	4668      	mov	r0, sp
 8008da2:	f7fe fe7d 	bl	8007aa0 <store_xdir>
						if (res == FR_OK) {
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d1a7      	bne.n	8008cfa <f_sync+0x36>
							res = sync_fs(fs);
 8008daa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008dac:	f7ff fb56 	bl	800845c <sync_fs>
							fp->flag &= (BYTE)~FA_MODIFIED;
 8008db0:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008dbc:	e79d      	b.n	8008cfa <f_sync+0x36>
					dir = fp->dir_ptr;
 8008dbe:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008dc0:	7af3      	ldrb	r3, [r6, #11]
 8008dc2:	f043 0320 	orr.w	r3, r3, #32
 8008dc6:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008dc8:	68a2      	ldr	r2, [r4, #8]
 8008dca:	4631      	mov	r1, r6
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	f7fd fc76 	bl	80066be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008dd2:	6921      	ldr	r1, [r4, #16]
 8008dd4:	f106 001c 	add.w	r0, r6, #28
 8008dd8:	f7fd fb20 	bl	800641c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ddc:	4629      	mov	r1, r5
 8008dde:	f106 0016 	add.w	r0, r6, #22
 8008de2:	f7fd fb1b 	bl	800641c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008de6:	2100      	movs	r1, #0
 8008de8:	f106 0012 	add.w	r0, r6, #18
 8008dec:	f7fd fb12 	bl	8006414 <st_word>
					fs->wflag = 1;
 8008df0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008df2:	2201      	movs	r2, #1
 8008df4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008df6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008df8:	f7ff fb30 	bl	800845c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008dfc:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e04:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008e08:	e777      	b.n	8008cfa <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	e775      	b.n	8008cfa <f_sync+0x36>

08008e0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e14:	f7ff ff56 	bl	8008cc4 <f_sync>
	if (res == FR_OK)
 8008e18:	b108      	cbz	r0, 8008e1e <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008e1a:	b002      	add	sp, #8
 8008e1c:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e1e:	a901      	add	r1, sp, #4
 8008e20:	4620      	mov	r0, r4
 8008e22:	f7fd fdf2 	bl	8006a0a <validate>
		if (res == FR_OK) {
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d1f7      	bne.n	8008e1a <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e2a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008e2c:	f7fd fbd2 	bl	80065d4 <dec_lock>
			if (res == FR_OK)
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d1f2      	bne.n	8008e1a <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e34:	6020      	str	r0, [r4, #0]
 8008e36:	e7f0      	b.n	8008e1a <f_close+0xc>

08008e38 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008e38:	b530      	push	{r4, r5, lr}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d060      	beq.n	8008f04 <f_opendir+0xcc>
 8008e42:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8008e44:	2200      	movs	r2, #0
 8008e46:	a903      	add	r1, sp, #12
 8008e48:	a801      	add	r0, sp, #4
 8008e4a:	f7fd fe8d 	bl	8006b68 <find_volume>
	if (res == FR_OK) {
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b120      	cbz	r0, 8008e5c <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008e52:	2300      	movs	r3, #0
 8008e54:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008e56:	4628      	mov	r0, r5
 8008e58:	b005      	add	sp, #20
 8008e5a:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008e60:	9901      	ldr	r1, [sp, #4]
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff f995 	bl	8008192 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8008e68:	4605      	mov	r5, r0
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d143      	bne.n	8008ef6 <f_opendir+0xbe>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008e6e:	f994 304b 	ldrsb.w	r3, [r4, #75]	@ 0x4b
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	db0c      	blt.n	8008e90 <f_opendir+0x58>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008e76:	79a3      	ldrb	r3, [r4, #6]
 8008e78:	f013 0f10 	tst.w	r3, #16
 8008e7c:	d03a      	beq.n	8008ef4 <f_opendir+0xbc>
					if (fs->fs_type == FS_EXFAT) {
 8008e7e:	9d03      	ldr	r5, [sp, #12]
 8008e80:	782b      	ldrb	r3, [r5, #0]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d012      	beq.n	8008eac <f_opendir+0x74>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008e86:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f7fd fc05 	bl	8006698 <ld_clust>
 8008e8e:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	88db      	ldrh	r3, [r3, #6]
 8008e94:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008e96:	2100      	movs	r1, #0
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7fe fa96 	bl	80073ca <dir_sdi>
				if (res == FR_OK) {
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	bb48      	cbnz	r0, 8008ef6 <f_opendir+0xbe>
					if (obj->sclust) {
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	b9f3      	cbnz	r3, 8008ee4 <f_opendir+0xac>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eaa:	e024      	b.n	8008ef6 <f_opendir+0xbe>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8008eac:	68a3      	ldr	r3, [r4, #8]
 8008eae:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008eb6:	79e2      	ldrb	r2, [r4, #7]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	6263      	str	r3, [r4, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 8008ebc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008ebe:	62a3      	str	r3, [r4, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8008ec0:	6928      	ldr	r0, [r5, #16]
 8008ec2:	3034      	adds	r0, #52	@ 0x34
 8008ec4:	f7fd fa79 	bl	80063ba <ld_dword>
 8008ec8:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008eca:	6928      	ldr	r0, [r5, #16]
 8008ecc:	3038      	adds	r0, #56	@ 0x38
 8008ece:	f7fd fa7f 	bl	80063d0 <ld_qword>
 8008ed2:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008ed6:	692b      	ldr	r3, [r5, #16]
 8008ed8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	71e3      	strb	r3, [r4, #7]
 8008ee2:	e7d5      	b.n	8008e90 <f_opendir+0x58>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7fd fb24 	bl	8006534 <inc_lock>
 8008eec:	62e0      	str	r0, [r4, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008eee:	b910      	cbnz	r0, 8008ef6 <f_opendir+0xbe>
 8008ef0:	2512      	movs	r5, #18
 8008ef2:	e002      	b.n	8008efa <f_opendir+0xc2>
					res = FR_NO_PATH;
 8008ef4:	2505      	movs	r5, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008ef6:	2d04      	cmp	r5, #4
 8008ef8:	d002      	beq.n	8008f00 <f_opendir+0xc8>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008efa:	2d00      	cmp	r5, #0
 8008efc:	d0ab      	beq.n	8008e56 <f_opendir+0x1e>
 8008efe:	e7a8      	b.n	8008e52 <f_opendir+0x1a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008f00:	2505      	movs	r5, #5
 8008f02:	e7a6      	b.n	8008e52 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 8008f04:	2509      	movs	r5, #9
 8008f06:	e7a6      	b.n	8008e56 <f_opendir+0x1e>

08008f08 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008f10:	a901      	add	r1, sp, #4
 8008f12:	f7fd fd7a 	bl	8006a0a <validate>
	if (res == FR_OK) {
 8008f16:	4606      	mov	r6, r0
 8008f18:	b9c0      	cbnz	r0, 8008f4c <f_readdir+0x44>
		if (!fno) {
 8008f1a:	b195      	cbz	r5, 8008f42 <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7fe fd15 	bl	800794e <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008f24:	2804      	cmp	r0, #4
 8008f26:	d000      	beq.n	8008f2a <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 8008f28:	b998      	cbnz	r0, 8008f52 <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7fe ff4a 	bl	8007dc6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008f32:	2100      	movs	r1, #0
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7fe fbe8 	bl	800770a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008f3a:	2804      	cmp	r0, #4
 8008f3c:	d006      	beq.n	8008f4c <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008f3e:	4606      	mov	r6, r0
 8008f40:	e004      	b.n	8008f4c <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008f42:	2100      	movs	r1, #0
 8008f44:	4620      	mov	r0, r4
 8008f46:	f7fe fa40 	bl	80073ca <dir_sdi>
 8008f4a:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	b002      	add	sp, #8
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 8008f52:	4606      	mov	r6, r0
 8008f54:	e7fa      	b.n	8008f4c <f_readdir+0x44>

08008f56 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8008f56:	b570      	push	{r4, r5, r6, lr}
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f7ff ffd2 	bl	8008f08 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8008f64:	4606      	mov	r6, r0
 8008f66:	b958      	cbnz	r0, 8008f80 <f_findnext+0x2a>
 8008f68:	b154      	cbz	r4, 8008f80 <f_findnext+0x2a>
 8008f6a:	7ea3      	ldrb	r3, [r4, #26]
 8008f6c:	b143      	cbz	r3, 8008f80 <f_findnext+0x2a>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008f6e:	2300      	movs	r3, #0
 8008f70:	461a      	mov	r2, r3
 8008f72:	f104 011a 	add.w	r1, r4, #26
 8008f76:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8008f78:	f7fd fcc6 	bl	8006908 <pattern_matching>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d0ed      	beq.n	8008f5c <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8008f80:	4630      	mov	r0, r6
 8008f82:	bd70      	pop	{r4, r5, r6, pc}

08008f84 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4604      	mov	r4, r0
 8008f88:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8008f8a:	6503      	str	r3, [r0, #80]	@ 0x50
	res = f_opendir(dp, path);		/* Open the target directory */
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	f7ff ff53 	bl	8008e38 <f_opendir>
	if (res == FR_OK) {
 8008f92:	b100      	cbz	r0, 8008f96 <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 8008f96:	4629      	mov	r1, r5
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff ffdc 	bl	8008f56 <f_findnext>
 8008f9e:	e7f9      	b.n	8008f94 <f_findfirst+0x10>

08008fa0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008fa0:	4b13      	ldr	r3, [pc, #76]	@ (8008ff0 <FATFS_LinkDriverEx+0x50>)
 8008fa2:	7a5b      	ldrb	r3, [r3, #9]
 8008fa4:	bb13      	cbnz	r3, 8008fec <FATFS_LinkDriverEx+0x4c>
{
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008fae:	4b10      	ldr	r3, [pc, #64]	@ (8008ff0 <FATFS_LinkDriverEx+0x50>)
 8008fb0:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008fb4:	fa5f fc8c 	uxtb.w	ip, ip
 8008fb8:	f04f 0e00 	mov.w	lr, #0
 8008fbc:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008fc0:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008fc4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008fc8:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008fcc:	7a5c      	ldrb	r4, [r3, #9]
 8008fce:	441c      	add	r4, r3
 8008fd0:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008fd2:	7a5a      	ldrb	r2, [r3, #9]
 8008fd4:	1c54      	adds	r4, r2, #1
 8008fd6:	b2e4      	uxtb	r4, r4
 8008fd8:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008fda:	3230      	adds	r2, #48	@ 0x30
 8008fdc:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008fde:	233a      	movs	r3, #58	@ 0x3a
 8008fe0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008fe2:	232f      	movs	r3, #47	@ 0x2f
 8008fe4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008fe6:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008fea:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008fec:	2001      	movs	r0, #1
}
 8008fee:	4770      	bx	lr
 8008ff0:	200015d8 	.word	0x200015d8

08008ff4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ff4:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f7ff ffd2 	bl	8008fa0 <FATFS_LinkDriverEx>
}
 8008ffc:	bd08      	pop	{r3, pc}
	...

08009000 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009000:	287f      	cmp	r0, #127	@ 0x7f
 8009002:	d917      	bls.n	8009034 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009004:	b131      	cbz	r1, 8009014 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009006:	28ff      	cmp	r0, #255	@ 0xff
 8009008:	d813      	bhi.n	8009032 <ff_convert+0x32>
 800900a:	3880      	subs	r0, #128	@ 0x80
 800900c:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <ff_convert+0x38>)
 800900e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8009012:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009014:	2300      	movs	r3, #0
 8009016:	2b7f      	cmp	r3, #127	@ 0x7f
 8009018:	d807      	bhi.n	800902a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800901a:	4a07      	ldr	r2, [pc, #28]	@ (8009038 <ff_convert+0x38>)
 800901c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009020:	4282      	cmp	r2, r0
 8009022:	d002      	beq.n	800902a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8009024:	3301      	adds	r3, #1
 8009026:	b29b      	uxth	r3, r3
 8009028:	e7f5      	b.n	8009016 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800902a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800902e:	b2c0      	uxtb	r0, r0
 8009030:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009032:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	0800a9fc 	.word	0x0800a9fc

0800903c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800903c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8009040:	d207      	bcs.n	8009052 <ff_wtoupper+0x16>
 8009042:	4b23      	ldr	r3, [pc, #140]	@ (80090d0 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8009044:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8009046:	2a00      	cmp	r2, #0
 8009048:	d041      	beq.n	80090ce <ff_wtoupper+0x92>
 800904a:	4290      	cmp	r0, r2
 800904c:	d33f      	bcc.n	80090ce <ff_wtoupper+0x92>
{
 800904e:	b510      	push	{r4, lr}
 8009050:	e006      	b.n	8009060 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 8009052:	4b20      	ldr	r3, [pc, #128]	@ (80090d4 <ff_wtoupper+0x98>)
 8009054:	e7f6      	b.n	8009044 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009056:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 8009058:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800905a:	b1da      	cbz	r2, 8009094 <ff_wtoupper+0x58>
 800905c:	4290      	cmp	r0, r2
 800905e:	d319      	bcc.n	8009094 <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009060:	f103 0e04 	add.w	lr, r3, #4
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	0a19      	lsrs	r1, r3, #8
 8009068:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800906a:	eb03 0c02 	add.w	ip, r3, r2
 800906e:	4560      	cmp	r0, ip
 8009070:	db04      	blt.n	800907c <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8009072:	2900      	cmp	r1, #0
 8009074:	d1ef      	bne.n	8009056 <ff_wtoupper+0x1a>
 8009076:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800907a:	e7ed      	b.n	8009058 <ff_wtoupper+0x1c>
			switch (cmd) {
 800907c:	2908      	cmp	r1, #8
 800907e:	d809      	bhi.n	8009094 <ff_wtoupper+0x58>
 8009080:	e8df f001 	tbb	[pc, r1]
 8009084:	120f0905 	.word	0x120f0905
 8009088:	1e1b1815 	.word	0x1e1b1815
 800908c:	21          	.byte	0x21
 800908d:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800908e:	1a84      	subs	r4, r0, r2
 8009090:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 8009094:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009096:	1a83      	subs	r3, r0, r2
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	1ac0      	subs	r0, r0, r3
 800909e:	b280      	uxth	r0, r0
 80090a0:	e7f8      	b.n	8009094 <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 80090a2:	3810      	subs	r0, #16
 80090a4:	b280      	uxth	r0, r0
 80090a6:	e7f5      	b.n	8009094 <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80090a8:	3820      	subs	r0, #32
 80090aa:	b280      	uxth	r0, r0
 80090ac:	e7f2      	b.n	8009094 <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80090ae:	3830      	subs	r0, #48	@ 0x30
 80090b0:	b280      	uxth	r0, r0
 80090b2:	e7ef      	b.n	8009094 <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80090b4:	381a      	subs	r0, #26
 80090b6:	b280      	uxth	r0, r0
 80090b8:	e7ec      	b.n	8009094 <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 80090ba:	3008      	adds	r0, #8
 80090bc:	b280      	uxth	r0, r0
 80090be:	e7e9      	b.n	8009094 <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 80090c0:	3850      	subs	r0, #80	@ 0x50
 80090c2:	b280      	uxth	r0, r0
 80090c4:	e7e6      	b.n	8009094 <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80090c6:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 80090ca:	b280      	uxth	r0, r0
 80090cc:	e7e2      	b.n	8009094 <ff_wtoupper+0x58>
}
 80090ce:	4770      	bx	lr
 80090d0:	0800a808 	.word	0x0800a808
 80090d4:	0800a74c 	.word	0x0800a74c

080090d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090da:	2200      	movs	r2, #0
 80090dc:	490f      	ldr	r1, [pc, #60]	@ (800911c <MX_USB_DEVICE_Init+0x44>)
 80090de:	4810      	ldr	r0, [pc, #64]	@ (8009120 <MX_USB_DEVICE_Init+0x48>)
 80090e0:	f7fc fb58 	bl	8005794 <USBD_Init>
 80090e4:	b970      	cbnz	r0, 8009104 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80090e6:	490f      	ldr	r1, [pc, #60]	@ (8009124 <MX_USB_DEVICE_Init+0x4c>)
 80090e8:	480d      	ldr	r0, [pc, #52]	@ (8009120 <MX_USB_DEVICE_Init+0x48>)
 80090ea:	f7fc fb6a 	bl	80057c2 <USBD_RegisterClass>
 80090ee:	b960      	cbnz	r0, 800910a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80090f0:	490d      	ldr	r1, [pc, #52]	@ (8009128 <MX_USB_DEVICE_Init+0x50>)
 80090f2:	480b      	ldr	r0, [pc, #44]	@ (8009120 <MX_USB_DEVICE_Init+0x48>)
 80090f4:	f7fc fb43 	bl	800577e <USBD_AUDIO_RegisterInterface>
 80090f8:	b950      	cbnz	r0, 8009110 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090fa:	4809      	ldr	r0, [pc, #36]	@ (8009120 <MX_USB_DEVICE_Init+0x48>)
 80090fc:	f7fc fb7b 	bl	80057f6 <USBD_Start>
 8009100:	b948      	cbnz	r0, 8009116 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009102:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009104:	f7f7 fad4 	bl	80006b0 <Error_Handler>
 8009108:	e7ed      	b.n	80090e6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800910a:	f7f7 fad1 	bl	80006b0 <Error_Handler>
 800910e:	e7ef      	b.n	80090f0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009110:	f7f7 face 	bl	80006b0 <Error_Handler>
 8009114:	e7f1      	b.n	80090fa <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009116:	f7f7 facb 	bl	80006b0 <Error_Handler>
}
 800911a:	e7f2      	b.n	8009102 <MX_USB_DEVICE_Init+0x2a>
 800911c:	20000118 	.word	0x20000118
 8009120:	200015e4 	.word	0x200015e4
 8009124:	20000090 	.word	0x20000090
 8009128:	200000c8 	.word	0x200000c8

0800912c <AUDIO_Init_FS>:
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
  /* USER CODE END 0 */
}
 800912c:	2000      	movs	r0, #0
 800912e:	4770      	bx	lr

08009130 <AUDIO_DeInit_FS>:
{
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
  /* USER CODE END 1 */
}
 8009130:	2000      	movs	r0, #0
 8009132:	4770      	bx	lr

08009134 <AUDIO_AudioCmd_FS>:
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
  /* USER CODE END 2 */
}
 8009134:	2000      	movs	r0, #0
 8009136:	4770      	bx	lr

08009138 <AUDIO_VolumeCtl_FS>:
{
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8009138:	2000      	movs	r0, #0
 800913a:	4770      	bx	lr

0800913c <AUDIO_MuteCtl_FS>:
{
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800913c:	2000      	movs	r0, #0
 800913e:	4770      	bx	lr

08009140 <AUDIO_PeriodicTC_FS>:
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009140:	2000      	movs	r0, #0
 8009142:	4770      	bx	lr

08009144 <AUDIO_GetState_FS>:
static int8_t AUDIO_GetState_FS(void)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8009144:	2000      	movs	r0, #0
 8009146:	4770      	bx	lr

08009148 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009148:	2312      	movs	r3, #18
 800914a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800914c:	4800      	ldr	r0, [pc, #0]	@ (8009150 <USBD_FS_DeviceDescriptor+0x8>)
 800914e:	4770      	bx	lr
 8009150:	20000104 	.word	0x20000104

08009154 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009154:	2304      	movs	r3, #4
 8009156:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8009158:	4800      	ldr	r0, [pc, #0]	@ (800915c <USBD_FS_LangIDStrDescriptor+0x8>)
 800915a:	4770      	bx	lr
 800915c:	20000100 	.word	0x20000100

08009160 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8009160:	2300      	movs	r3, #0
 8009162:	4293      	cmp	r3, r2
 8009164:	d21e      	bcs.n	80091a4 <IntToUnicode+0x44>
{
 8009166:	b500      	push	{lr}
 8009168:	e010      	b.n	800918c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800916a:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800916e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8009172:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8009174:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009178:	f10c 0c01 	add.w	ip, ip, #1
 800917c:	f04f 0e00 	mov.w	lr, #0
 8009180:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8009184:	3301      	adds	r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	4293      	cmp	r3, r2
 800918a:	d209      	bcs.n	80091a0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800918c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8009190:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8009194:	d2e9      	bcs.n	800916a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8009196:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800919a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800919e:	e7e8      	b.n	8009172 <IntToUnicode+0x12>
  }
}
 80091a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80091a4:	4770      	bx	lr
	...

080091a8 <Get_SerialNum>:
{
 80091a8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091aa:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <Get_SerialNum+0x30>)
 80091ac:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091b0:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091b4:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 80091b8:	18c0      	adds	r0, r0, r3
 80091ba:	d100      	bne.n	80091be <Get_SerialNum+0x16>
}
 80091bc:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091be:	4d07      	ldr	r5, [pc, #28]	@ (80091dc <Get_SerialNum+0x34>)
 80091c0:	2208      	movs	r2, #8
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7ff ffcc 	bl	8009160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091c8:	2204      	movs	r2, #4
 80091ca:	f105 0110 	add.w	r1, r5, #16
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7ff ffc6 	bl	8009160 <IntToUnicode>
}
 80091d4:	e7f2      	b.n	80091bc <Get_SerialNum+0x14>
 80091d6:	bf00      	nop
 80091d8:	1fff7000 	.word	0x1fff7000
 80091dc:	200000e6 	.word	0x200000e6

080091e0 <USBD_FS_SerialStrDescriptor>:
{
 80091e0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80091e2:	231a      	movs	r3, #26
 80091e4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80091e6:	f7ff ffdf 	bl	80091a8 <Get_SerialNum>
}
 80091ea:	4801      	ldr	r0, [pc, #4]	@ (80091f0 <USBD_FS_SerialStrDescriptor+0x10>)
 80091ec:	bd08      	pop	{r3, pc}
 80091ee:	bf00      	nop
 80091f0:	200000e4 	.word	0x200000e4

080091f4 <USBD_FS_ProductStrDescriptor>:
{
 80091f4:	b508      	push	{r3, lr}
 80091f6:	460a      	mov	r2, r1
  if(speed == 0)
 80091f8:	b928      	cbnz	r0, 8009206 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091fa:	4905      	ldr	r1, [pc, #20]	@ (8009210 <USBD_FS_ProductStrDescriptor+0x1c>)
 80091fc:	4805      	ldr	r0, [pc, #20]	@ (8009214 <USBD_FS_ProductStrDescriptor+0x20>)
 80091fe:	f7fd f82c 	bl	800625a <USBD_GetString>
}
 8009202:	4803      	ldr	r0, [pc, #12]	@ (8009210 <USBD_FS_ProductStrDescriptor+0x1c>)
 8009204:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009206:	4902      	ldr	r1, [pc, #8]	@ (8009210 <USBD_FS_ProductStrDescriptor+0x1c>)
 8009208:	4802      	ldr	r0, [pc, #8]	@ (8009214 <USBD_FS_ProductStrDescriptor+0x20>)
 800920a:	f7fd f826 	bl	800625a <USBD_GetString>
 800920e:	e7f8      	b.n	8009202 <USBD_FS_ProductStrDescriptor+0xe>
 8009210:	200018c0 	.word	0x200018c0
 8009214:	0800aafc 	.word	0x0800aafc

08009218 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009218:	b510      	push	{r4, lr}
 800921a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800921c:	4c03      	ldr	r4, [pc, #12]	@ (800922c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800921e:	4621      	mov	r1, r4
 8009220:	4803      	ldr	r0, [pc, #12]	@ (8009230 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009222:	f7fd f81a 	bl	800625a <USBD_GetString>
}
 8009226:	4620      	mov	r0, r4
 8009228:	bd10      	pop	{r4, pc}
 800922a:	bf00      	nop
 800922c:	200018c0 	.word	0x200018c0
 8009230:	0800ab0c 	.word	0x0800ab0c

08009234 <USBD_FS_ConfigStrDescriptor>:
{
 8009234:	b508      	push	{r3, lr}
 8009236:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8009238:	b928      	cbnz	r0, 8009246 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800923a:	4905      	ldr	r1, [pc, #20]	@ (8009250 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800923c:	4805      	ldr	r0, [pc, #20]	@ (8009254 <USBD_FS_ConfigStrDescriptor+0x20>)
 800923e:	f7fd f80c 	bl	800625a <USBD_GetString>
}
 8009242:	4803      	ldr	r0, [pc, #12]	@ (8009250 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009244:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009246:	4902      	ldr	r1, [pc, #8]	@ (8009250 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009248:	4802      	ldr	r0, [pc, #8]	@ (8009254 <USBD_FS_ConfigStrDescriptor+0x20>)
 800924a:	f7fd f806 	bl	800625a <USBD_GetString>
 800924e:	e7f8      	b.n	8009242 <USBD_FS_ConfigStrDescriptor+0xe>
 8009250:	200018c0 	.word	0x200018c0
 8009254:	0800ab18 	.word	0x0800ab18

08009258 <USBD_FS_InterfaceStrDescriptor>:
{
 8009258:	b508      	push	{r3, lr}
 800925a:	460a      	mov	r2, r1
  if(speed == 0)
 800925c:	b928      	cbnz	r0, 800926a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800925e:	4905      	ldr	r1, [pc, #20]	@ (8009274 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009260:	4805      	ldr	r0, [pc, #20]	@ (8009278 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009262:	f7fc fffa 	bl	800625a <USBD_GetString>
}
 8009266:	4803      	ldr	r0, [pc, #12]	@ (8009274 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009268:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800926a:	4902      	ldr	r1, [pc, #8]	@ (8009274 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800926c:	4802      	ldr	r0, [pc, #8]	@ (8009278 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800926e:	f7fc fff4 	bl	800625a <USBD_GetString>
 8009272:	e7f8      	b.n	8009266 <USBD_FS_InterfaceStrDescriptor+0xe>
 8009274:	200018c0 	.word	0x200018c0
 8009278:	0800ab28 	.word	0x0800ab28

0800927c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800927c:	b530      	push	{r4, r5, lr}
 800927e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009280:	2300      	movs	r3, #0
 8009282:	9303      	str	r3, [sp, #12]
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	9305      	str	r3, [sp, #20]
 8009288:	9306      	str	r3, [sp, #24]
 800928a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800928c:	6803      	ldr	r3, [r0, #0]
 800928e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009292:	d001      	beq.n	8009298 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009294:	b009      	add	sp, #36	@ 0x24
 8009296:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009298:	2500      	movs	r5, #0
 800929a:	9501      	str	r5, [sp, #4]
 800929c:	4c16      	ldr	r4, [pc, #88]	@ (80092f8 <HAL_PCD_MspInit+0x7c>)
 800929e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092a0:	f043 0301 	orr.w	r3, r3, #1
 80092a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80092a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80092b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b6:	2302      	movs	r3, #2
 80092b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ba:	2303      	movs	r3, #3
 80092bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092be:	230a      	movs	r3, #10
 80092c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092c2:	a903      	add	r1, sp, #12
 80092c4:	480d      	ldr	r0, [pc, #52]	@ (80092fc <HAL_PCD_MspInit+0x80>)
 80092c6:	f7f8 f84d 	bl	8001364 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80092d2:	9502      	str	r5, [sp, #8]
 80092d4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80092d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092da:	6463      	str	r3, [r4, #68]	@ 0x44
 80092dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80092de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092e2:	9302      	str	r3, [sp, #8]
 80092e4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092e6:	462a      	mov	r2, r5
 80092e8:	4629      	mov	r1, r5
 80092ea:	2043      	movs	r0, #67	@ 0x43
 80092ec:	f7f7 fe40 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092f0:	2043      	movs	r0, #67	@ 0x43
 80092f2:	f7f7 fe4d 	bl	8000f90 <HAL_NVIC_EnableIRQ>
}
 80092f6:	e7cd      	b.n	8009294 <HAL_PCD_MspInit+0x18>
 80092f8:	40023800 	.word	0x40023800
 80092fc:	40020000 	.word	0x40020000

08009300 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009302:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8009306:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800930a:	f7fc fa8a 	bl	8005822 <USBD_LL_SetupStage>
}
 800930e:	bd08      	pop	{r3, pc}

08009310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009312:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009316:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800931a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800931e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009322:	f7fc fb50 	bl	80059c6 <USBD_LL_DataOutStage>
}
 8009326:	bd08      	pop	{r3, pc}

08009328 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009328:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800932a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800932e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009332:	6a1a      	ldr	r2, [r3, #32]
 8009334:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009338:	f7fc fba8 	bl	8005a8c <USBD_LL_DataInStage>
}
 800933c:	bd08      	pop	{r3, pc}

0800933e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009340:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009344:	f7fc faea 	bl	800591c <USBD_LL_SOF>
}
 8009348:	bd08      	pop	{r3, pc}

0800934a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934a:	b510      	push	{r4, lr}
 800934c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800934e:	79c1      	ldrb	r1, [r0, #7]
 8009350:	b111      	cbz	r1, 8009358 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009352:	2902      	cmp	r1, #2
 8009354:	d109      	bne.n	800936a <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 8009356:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009358:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800935c:	f7fc fabf 	bl	80058de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009364:	f7fc fa89 	bl	800587a <USBD_LL_Reset>
}
 8009368:	bd10      	pop	{r4, pc}
    Error_Handler();
 800936a:	f7f7 f9a1 	bl	80006b0 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800936e:	2101      	movs	r1, #1
 8009370:	e7f2      	b.n	8009358 <HAL_PCD_ResetCallback+0xe>
	...

08009374 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b510      	push	{r4, lr}
 8009376:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009378:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800937c:	f7fc fab2 	bl	80058e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009380:	6822      	ldr	r2, [r4, #0]
 8009382:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800938e:	7ae3      	ldrb	r3, [r4, #11]
 8009390:	b123      	cbz	r3, 800939c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009392:	4a03      	ldr	r2, [pc, #12]	@ (80093a0 <HAL_PCD_SuspendCallback+0x2c>)
 8009394:	6913      	ldr	r3, [r2, #16]
 8009396:	f043 0306 	orr.w	r3, r3, #6
 800939a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800939c:	bd10      	pop	{r4, pc}
 800939e:	bf00      	nop
 80093a0:	e000ed00 	.word	0xe000ed00

080093a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093a6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80093aa:	f7fc faaa 	bl	8005902 <USBD_LL_Resume>
}
 80093ae:	bd08      	pop	{r3, pc}

080093b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b0:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093b2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80093b6:	f7fc fad9 	bl	800596c <USBD_LL_IsoOUTIncomplete>
}
 80093ba:	bd08      	pop	{r3, pc}

080093bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093be:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80093c2:	f7fc fabc 	bl	800593e <USBD_LL_IsoINIncomplete>
}
 80093c6:	bd08      	pop	{r3, pc}

080093c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c8:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093ca:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80093ce:	f7fc fae4 	bl	800599a <USBD_LL_DevConnected>
}
 80093d2:	bd08      	pop	{r3, pc}

080093d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093d6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80093da:	f7fc fae0 	bl	800599e <USBD_LL_DevDisconnected>
}
 80093de:	bd08      	pop	{r3, pc}

080093e0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093e0:	7802      	ldrb	r2, [r0, #0]
 80093e2:	b10a      	cbz	r2, 80093e8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80093e4:	2000      	movs	r0, #0
 80093e6:	4770      	bx	lr
{
 80093e8:	b510      	push	{r4, lr}
 80093ea:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80093ec:	4815      	ldr	r0, [pc, #84]	@ (8009444 <USBD_LL_Init+0x64>)
 80093ee:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80093f2:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80093fa:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093fc:	2304      	movs	r3, #4
 80093fe:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009400:	2202      	movs	r2, #2
 8009402:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009404:	2300      	movs	r3, #0
 8009406:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009408:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800940a:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800940c:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800940e:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009410:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009412:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009414:	f7f8 fc18 	bl	8001c48 <HAL_PCD_Init>
 8009418:	b980      	cbnz	r0, 800943c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800941a:	4c0a      	ldr	r4, [pc, #40]	@ (8009444 <USBD_LL_Init+0x64>)
 800941c:	2180      	movs	r1, #128	@ 0x80
 800941e:	4620      	mov	r0, r4
 8009420:	f7f9 f9df 	bl	80027e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009424:	2240      	movs	r2, #64	@ 0x40
 8009426:	2100      	movs	r1, #0
 8009428:	4620      	mov	r0, r4
 800942a:	f7f9 f9b4 	bl	8002796 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800942e:	2280      	movs	r2, #128	@ 0x80
 8009430:	2101      	movs	r1, #1
 8009432:	4620      	mov	r0, r4
 8009434:	f7f9 f9af 	bl	8002796 <HAL_PCDEx_SetTxFiFo>
}
 8009438:	2000      	movs	r0, #0
 800943a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800943c:	f7f7 f938 	bl	80006b0 <Error_Handler>
 8009440:	e7eb      	b.n	800941a <USBD_LL_Init+0x3a>
 8009442:	bf00      	nop
 8009444:	20003694 	.word	0x20003694

08009448 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009448:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800944c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009450:	d108      	bne.n	8009464 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009452:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009456:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800945a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800945e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8009462:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009464:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009468:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800946c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009470:	7d98      	ldrb	r0, [r3, #22]
 8009472:	4770      	bx	lr

08009474 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009474:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009476:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800947a:	f7f8 fde9 	bl	8002050 <HAL_PCD_EP_GetRxCount>
}
 800947e:	bd08      	pop	{r3, pc}

08009480 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8009480:	4800      	ldr	r0, [pc, #0]	@ (8009484 <USBD_static_malloc+0x4>)
 8009482:	4770      	bx	lr
 8009484:	20001ac0 	.word	0x20001ac0

08009488 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009488:	4770      	bx	lr

0800948a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800948a:	2803      	cmp	r0, #3
 800948c:	d805      	bhi.n	800949a <USBD_Get_USB_Status+0x10>
 800948e:	e8df f000 	tbb	[pc, r0]
 8009492:	0405      	.short	0x0405
 8009494:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009496:	2001      	movs	r0, #1
    break;
 8009498:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800949a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800949c:	4770      	bx	lr

0800949e <USBD_LL_Start>:
{
 800949e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80094a0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80094a4:	f7f8 fc51 	bl	8001d4a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a8:	f7ff ffef 	bl	800948a <USBD_Get_USB_Status>
}
 80094ac:	bd08      	pop	{r3, pc}

080094ae <USBD_LL_OpenEP>:
{
 80094ae:	b508      	push	{r3, lr}
 80094b0:	4694      	mov	ip, r2
 80094b2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094b4:	4663      	mov	r3, ip
 80094b6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80094ba:	f7f8 fd26 	bl	8001f0a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80094be:	f7ff ffe4 	bl	800948a <USBD_Get_USB_Status>
}
 80094c2:	bd08      	pop	{r3, pc}

080094c4 <USBD_LL_CloseEP>:
{
 80094c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094c6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80094ca:	f7f8 fd64 	bl	8001f96 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ce:	f7ff ffdc 	bl	800948a <USBD_Get_USB_Status>
}
 80094d2:	bd08      	pop	{r3, pc}

080094d4 <USBD_LL_StallEP>:
{
 80094d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094d6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80094da:	f7f8 fde7 	bl	80020ac <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80094de:	f7ff ffd4 	bl	800948a <USBD_Get_USB_Status>
}
 80094e2:	bd08      	pop	{r3, pc}

080094e4 <USBD_LL_ClearStallEP>:
{
 80094e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094e6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80094ea:	f7f8 fe22 	bl	8002132 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ee:	f7ff ffcc 	bl	800948a <USBD_Get_USB_Status>
}
 80094f2:	bd08      	pop	{r3, pc}

080094f4 <USBD_LL_SetUSBAddress>:
{
 80094f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094f6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80094fa:	f7f8 fcf3 	bl	8001ee4 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fe:	f7ff ffc4 	bl	800948a <USBD_Get_USB_Status>
}
 8009502:	bd08      	pop	{r3, pc}

08009504 <USBD_LL_Transmit>:
{
 8009504:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009506:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800950a:	f7f8 fdaa 	bl	8002062 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800950e:	f7ff ffbc 	bl	800948a <USBD_Get_USB_Status>
}
 8009512:	bd08      	pop	{r3, pc}

08009514 <USBD_LL_PrepareReceive>:
{
 8009514:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009516:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800951a:	f7f8 fd74 	bl	8002006 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800951e:	f7ff ffb4 	bl	800948a <USBD_Get_USB_Status>
}
 8009522:	bd08      	pop	{r3, pc}

08009524 <std>:
 8009524:	2300      	movs	r3, #0
 8009526:	b510      	push	{r4, lr}
 8009528:	4604      	mov	r4, r0
 800952a:	e9c0 3300 	strd	r3, r3, [r0]
 800952e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009532:	6083      	str	r3, [r0, #8]
 8009534:	8181      	strh	r1, [r0, #12]
 8009536:	6643      	str	r3, [r0, #100]	@ 0x64
 8009538:	81c2      	strh	r2, [r0, #14]
 800953a:	6183      	str	r3, [r0, #24]
 800953c:	4619      	mov	r1, r3
 800953e:	2208      	movs	r2, #8
 8009540:	305c      	adds	r0, #92	@ 0x5c
 8009542:	f000 f9f9 	bl	8009938 <memset>
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x58>)
 8009548:	6263      	str	r3, [r4, #36]	@ 0x24
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <std+0x5c>)
 800954c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800954e:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <std+0x60>)
 8009550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009552:	4b0d      	ldr	r3, [pc, #52]	@ (8009588 <std+0x64>)
 8009554:	6323      	str	r3, [r4, #48]	@ 0x30
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <std+0x68>)
 8009558:	6224      	str	r4, [r4, #32]
 800955a:	429c      	cmp	r4, r3
 800955c:	d006      	beq.n	800956c <std+0x48>
 800955e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009562:	4294      	cmp	r4, r2
 8009564:	d002      	beq.n	800956c <std+0x48>
 8009566:	33d0      	adds	r3, #208	@ 0xd0
 8009568:	429c      	cmp	r4, r3
 800956a:	d105      	bne.n	8009578 <std+0x54>
 800956c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f000 ba58 	b.w	8009a28 <__retarget_lock_init_recursive>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	08009789 	.word	0x08009789
 8009580:	080097ab 	.word	0x080097ab
 8009584:	080097e3 	.word	0x080097e3
 8009588:	08009807 	.word	0x08009807
 800958c:	20003b78 	.word	0x20003b78

08009590 <stdio_exit_handler>:
 8009590:	4a02      	ldr	r2, [pc, #8]	@ (800959c <stdio_exit_handler+0xc>)
 8009592:	4903      	ldr	r1, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x10>)
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <stdio_exit_handler+0x14>)
 8009596:	f000 b869 	b.w	800966c <_fwalk_sglue>
 800959a:	bf00      	nop
 800959c:	20000134 	.word	0x20000134
 80095a0:	0800a2c9 	.word	0x0800a2c9
 80095a4:	20000144 	.word	0x20000144

080095a8 <cleanup_stdio>:
 80095a8:	6841      	ldr	r1, [r0, #4]
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <cleanup_stdio+0x34>)
 80095ac:	4299      	cmp	r1, r3
 80095ae:	b510      	push	{r4, lr}
 80095b0:	4604      	mov	r4, r0
 80095b2:	d001      	beq.n	80095b8 <cleanup_stdio+0x10>
 80095b4:	f000 fe88 	bl	800a2c8 <_fflush_r>
 80095b8:	68a1      	ldr	r1, [r4, #8]
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <cleanup_stdio+0x38>)
 80095bc:	4299      	cmp	r1, r3
 80095be:	d002      	beq.n	80095c6 <cleanup_stdio+0x1e>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fe81 	bl	800a2c8 <_fflush_r>
 80095c6:	68e1      	ldr	r1, [r4, #12]
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <cleanup_stdio+0x3c>)
 80095ca:	4299      	cmp	r1, r3
 80095cc:	d004      	beq.n	80095d8 <cleanup_stdio+0x30>
 80095ce:	4620      	mov	r0, r4
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f000 be78 	b.w	800a2c8 <_fflush_r>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	bf00      	nop
 80095dc:	20003b78 	.word	0x20003b78
 80095e0:	20003be0 	.word	0x20003be0
 80095e4:	20003c48 	.word	0x20003c48

080095e8 <global_stdio_init.part.0>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x30>)
 80095ec:	4c0b      	ldr	r4, [pc, #44]	@ (800961c <global_stdio_init.part.0+0x34>)
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <global_stdio_init.part.0+0x38>)
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	4620      	mov	r0, r4
 80095f4:	2200      	movs	r2, #0
 80095f6:	2104      	movs	r1, #4
 80095f8:	f7ff ff94 	bl	8009524 <std>
 80095fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009600:	2201      	movs	r2, #1
 8009602:	2109      	movs	r1, #9
 8009604:	f7ff ff8e 	bl	8009524 <std>
 8009608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800960c:	2202      	movs	r2, #2
 800960e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009612:	2112      	movs	r1, #18
 8009614:	f7ff bf86 	b.w	8009524 <std>
 8009618:	20003cb0 	.word	0x20003cb0
 800961c:	20003b78 	.word	0x20003b78
 8009620:	08009591 	.word	0x08009591

08009624 <__sfp_lock_acquire>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__sfp_lock_acquire+0x8>)
 8009626:	f000 ba00 	b.w	8009a2a <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	20003cb9 	.word	0x20003cb9

08009630 <__sfp_lock_release>:
 8009630:	4801      	ldr	r0, [pc, #4]	@ (8009638 <__sfp_lock_release+0x8>)
 8009632:	f000 b9fb 	b.w	8009a2c <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	20003cb9 	.word	0x20003cb9

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	f7ff fff0 	bl	8009624 <__sfp_lock_acquire>
 8009644:	6a23      	ldr	r3, [r4, #32]
 8009646:	b11b      	cbz	r3, 8009650 <__sinit+0x14>
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f7ff bff0 	b.w	8009630 <__sfp_lock_release>
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x28>)
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <__sinit+0x2c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f5      	bne.n	8009648 <__sinit+0xc>
 800965c:	f7ff ffc4 	bl	80095e8 <global_stdio_init.part.0>
 8009660:	e7f2      	b.n	8009648 <__sinit+0xc>
 8009662:	bf00      	nop
 8009664:	080095a9 	.word	0x080095a9
 8009668:	20003cb0 	.word	0x20003cb0

0800966c <_fwalk_sglue>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4607      	mov	r7, r0
 8009672:	4688      	mov	r8, r1
 8009674:	4614      	mov	r4, r2
 8009676:	2600      	movs	r6, #0
 8009678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800967c:	f1b9 0901 	subs.w	r9, r9, #1
 8009680:	d505      	bpl.n	800968e <_fwalk_sglue+0x22>
 8009682:	6824      	ldr	r4, [r4, #0]
 8009684:	2c00      	cmp	r4, #0
 8009686:	d1f7      	bne.n	8009678 <_fwalk_sglue+0xc>
 8009688:	4630      	mov	r0, r6
 800968a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d907      	bls.n	80096a4 <_fwalk_sglue+0x38>
 8009694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009698:	3301      	adds	r3, #1
 800969a:	d003      	beq.n	80096a4 <_fwalk_sglue+0x38>
 800969c:	4629      	mov	r1, r5
 800969e:	4638      	mov	r0, r7
 80096a0:	47c0      	blx	r8
 80096a2:	4306      	orrs	r6, r0
 80096a4:	3568      	adds	r5, #104	@ 0x68
 80096a6:	e7e9      	b.n	800967c <_fwalk_sglue+0x10>

080096a8 <iprintf>:
 80096a8:	b40f      	push	{r0, r1, r2, r3}
 80096aa:	b507      	push	{r0, r1, r2, lr}
 80096ac:	4906      	ldr	r1, [pc, #24]	@ (80096c8 <iprintf+0x20>)
 80096ae:	ab04      	add	r3, sp, #16
 80096b0:	6808      	ldr	r0, [r1, #0]
 80096b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b6:	6881      	ldr	r1, [r0, #8]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	f000 fadb 	bl	8009c74 <_vfiprintf_r>
 80096be:	b003      	add	sp, #12
 80096c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c4:	b004      	add	sp, #16
 80096c6:	4770      	bx	lr
 80096c8:	20000140 	.word	0x20000140

080096cc <_puts_r>:
 80096cc:	6a03      	ldr	r3, [r0, #32]
 80096ce:	b570      	push	{r4, r5, r6, lr}
 80096d0:	6884      	ldr	r4, [r0, #8]
 80096d2:	4605      	mov	r5, r0
 80096d4:	460e      	mov	r6, r1
 80096d6:	b90b      	cbnz	r3, 80096dc <_puts_r+0x10>
 80096d8:	f7ff ffb0 	bl	800963c <__sinit>
 80096dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096de:	07db      	lsls	r3, r3, #31
 80096e0:	d405      	bmi.n	80096ee <_puts_r+0x22>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d402      	bmi.n	80096ee <_puts_r+0x22>
 80096e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ea:	f000 f99e 	bl	8009a2a <__retarget_lock_acquire_recursive>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	0719      	lsls	r1, r3, #28
 80096f2:	d502      	bpl.n	80096fa <_puts_r+0x2e>
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d135      	bne.n	8009766 <_puts_r+0x9a>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 f8c5 	bl	800988c <__swsetup_r>
 8009702:	b380      	cbz	r0, 8009766 <_puts_r+0x9a>
 8009704:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800970a:	07da      	lsls	r2, r3, #31
 800970c:	d405      	bmi.n	800971a <_puts_r+0x4e>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	059b      	lsls	r3, r3, #22
 8009712:	d402      	bmi.n	800971a <_puts_r+0x4e>
 8009714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009716:	f000 f989 	bl	8009a2c <__retarget_lock_release_recursive>
 800971a:	4628      	mov	r0, r5
 800971c:	bd70      	pop	{r4, r5, r6, pc}
 800971e:	2b00      	cmp	r3, #0
 8009720:	da04      	bge.n	800972c <_puts_r+0x60>
 8009722:	69a2      	ldr	r2, [r4, #24]
 8009724:	429a      	cmp	r2, r3
 8009726:	dc17      	bgt.n	8009758 <_puts_r+0x8c>
 8009728:	290a      	cmp	r1, #10
 800972a:	d015      	beq.n	8009758 <_puts_r+0x8c>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	7019      	strb	r1, [r3, #0]
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800973a:	3b01      	subs	r3, #1
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	2900      	cmp	r1, #0
 8009740:	d1ed      	bne.n	800971e <_puts_r+0x52>
 8009742:	2b00      	cmp	r3, #0
 8009744:	da11      	bge.n	800976a <_puts_r+0x9e>
 8009746:	4622      	mov	r2, r4
 8009748:	210a      	movs	r1, #10
 800974a:	4628      	mov	r0, r5
 800974c:	f000 f85f 	bl	800980e <__swbuf_r>
 8009750:	3001      	adds	r0, #1
 8009752:	d0d7      	beq.n	8009704 <_puts_r+0x38>
 8009754:	250a      	movs	r5, #10
 8009756:	e7d7      	b.n	8009708 <_puts_r+0x3c>
 8009758:	4622      	mov	r2, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f857 	bl	800980e <__swbuf_r>
 8009760:	3001      	adds	r0, #1
 8009762:	d1e7      	bne.n	8009734 <_puts_r+0x68>
 8009764:	e7ce      	b.n	8009704 <_puts_r+0x38>
 8009766:	3e01      	subs	r6, #1
 8009768:	e7e4      	b.n	8009734 <_puts_r+0x68>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	6022      	str	r2, [r4, #0]
 8009770:	220a      	movs	r2, #10
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7ee      	b.n	8009754 <_puts_r+0x88>
	...

08009778 <puts>:
 8009778:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <puts+0xc>)
 800977a:	4601      	mov	r1, r0
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f7ff bfa5 	b.w	80096cc <_puts_r>
 8009782:	bf00      	nop
 8009784:	20000140 	.word	0x20000140

08009788 <__sread>:
 8009788:	b510      	push	{r4, lr}
 800978a:	460c      	mov	r4, r1
 800978c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009790:	f000 f8fc 	bl	800998c <_read_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	bfab      	itete	ge
 8009798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800979a:	89a3      	ldrhlt	r3, [r4, #12]
 800979c:	181b      	addge	r3, r3, r0
 800979e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097a2:	bfac      	ite	ge
 80097a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097a6:	81a3      	strhlt	r3, [r4, #12]
 80097a8:	bd10      	pop	{r4, pc}

080097aa <__swrite>:
 80097aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ae:	461f      	mov	r7, r3
 80097b0:	898b      	ldrh	r3, [r1, #12]
 80097b2:	05db      	lsls	r3, r3, #23
 80097b4:	4605      	mov	r5, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	4616      	mov	r6, r2
 80097ba:	d505      	bpl.n	80097c8 <__swrite+0x1e>
 80097bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c0:	2302      	movs	r3, #2
 80097c2:	2200      	movs	r2, #0
 80097c4:	f000 f8d0 	bl	8009968 <_lseek_r>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	4632      	mov	r2, r6
 80097d6:	463b      	mov	r3, r7
 80097d8:	4628      	mov	r0, r5
 80097da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097de:	f000 b8e7 	b.w	80099b0 <_write_r>

080097e2 <__sseek>:
 80097e2:	b510      	push	{r4, lr}
 80097e4:	460c      	mov	r4, r1
 80097e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ea:	f000 f8bd 	bl	8009968 <_lseek_r>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	bf15      	itete	ne
 80097f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097fe:	81a3      	strheq	r3, [r4, #12]
 8009800:	bf18      	it	ne
 8009802:	81a3      	strhne	r3, [r4, #12]
 8009804:	bd10      	pop	{r4, pc}

08009806 <__sclose>:
 8009806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980a:	f000 b89d 	b.w	8009948 <_close_r>

0800980e <__swbuf_r>:
 800980e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009810:	460e      	mov	r6, r1
 8009812:	4614      	mov	r4, r2
 8009814:	4605      	mov	r5, r0
 8009816:	b118      	cbz	r0, 8009820 <__swbuf_r+0x12>
 8009818:	6a03      	ldr	r3, [r0, #32]
 800981a:	b90b      	cbnz	r3, 8009820 <__swbuf_r+0x12>
 800981c:	f7ff ff0e 	bl	800963c <__sinit>
 8009820:	69a3      	ldr	r3, [r4, #24]
 8009822:	60a3      	str	r3, [r4, #8]
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	071a      	lsls	r2, r3, #28
 8009828:	d501      	bpl.n	800982e <__swbuf_r+0x20>
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	b943      	cbnz	r3, 8009840 <__swbuf_r+0x32>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f000 f82b 	bl	800988c <__swsetup_r>
 8009836:	b118      	cbz	r0, 8009840 <__swbuf_r+0x32>
 8009838:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800983c:	4638      	mov	r0, r7
 800983e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	6922      	ldr	r2, [r4, #16]
 8009844:	1a98      	subs	r0, r3, r2
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	b2f6      	uxtb	r6, r6
 800984a:	4283      	cmp	r3, r0
 800984c:	4637      	mov	r7, r6
 800984e:	dc05      	bgt.n	800985c <__swbuf_r+0x4e>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 fd38 	bl	800a2c8 <_fflush_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d1ed      	bne.n	8009838 <__swbuf_r+0x2a>
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	3b01      	subs	r3, #1
 8009860:	60a3      	str	r3, [r4, #8]
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	6022      	str	r2, [r4, #0]
 8009868:	701e      	strb	r6, [r3, #0]
 800986a:	6962      	ldr	r2, [r4, #20]
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	429a      	cmp	r2, r3
 8009870:	d004      	beq.n	800987c <__swbuf_r+0x6e>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	07db      	lsls	r3, r3, #31
 8009876:	d5e1      	bpl.n	800983c <__swbuf_r+0x2e>
 8009878:	2e0a      	cmp	r6, #10
 800987a:	d1df      	bne.n	800983c <__swbuf_r+0x2e>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fd22 	bl	800a2c8 <_fflush_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	d0d9      	beq.n	800983c <__swbuf_r+0x2e>
 8009888:	e7d6      	b.n	8009838 <__swbuf_r+0x2a>
	...

0800988c <__swsetup_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4b29      	ldr	r3, [pc, #164]	@ (8009934 <__swsetup_r+0xa8>)
 8009890:	4605      	mov	r5, r0
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	460c      	mov	r4, r1
 8009896:	b118      	cbz	r0, 80098a0 <__swsetup_r+0x14>
 8009898:	6a03      	ldr	r3, [r0, #32]
 800989a:	b90b      	cbnz	r3, 80098a0 <__swsetup_r+0x14>
 800989c:	f7ff fece 	bl	800963c <__sinit>
 80098a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a4:	0719      	lsls	r1, r3, #28
 80098a6:	d422      	bmi.n	80098ee <__swsetup_r+0x62>
 80098a8:	06da      	lsls	r2, r3, #27
 80098aa:	d407      	bmi.n	80098bc <__swsetup_r+0x30>
 80098ac:	2209      	movs	r2, #9
 80098ae:	602a      	str	r2, [r5, #0]
 80098b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098ba:	e033      	b.n	8009924 <__swsetup_r+0x98>
 80098bc:	0758      	lsls	r0, r3, #29
 80098be:	d512      	bpl.n	80098e6 <__swsetup_r+0x5a>
 80098c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098c2:	b141      	cbz	r1, 80098d6 <__swsetup_r+0x4a>
 80098c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098c8:	4299      	cmp	r1, r3
 80098ca:	d002      	beq.n	80098d2 <__swsetup_r+0x46>
 80098cc:	4628      	mov	r0, r5
 80098ce:	f000 f8af 	bl	8009a30 <_free_r>
 80098d2:	2300      	movs	r3, #0
 80098d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	2300      	movs	r3, #0
 80098e0:	6063      	str	r3, [r4, #4]
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0308 	orr.w	r3, r3, #8
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	b94b      	cbnz	r3, 8009906 <__swsetup_r+0x7a>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098fc:	d003      	beq.n	8009906 <__swsetup_r+0x7a>
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f000 fd2f 	bl	800a364 <__smakebuf_r>
 8009906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990a:	f013 0201 	ands.w	r2, r3, #1
 800990e:	d00a      	beq.n	8009926 <__swsetup_r+0x9a>
 8009910:	2200      	movs	r2, #0
 8009912:	60a2      	str	r2, [r4, #8]
 8009914:	6962      	ldr	r2, [r4, #20]
 8009916:	4252      	negs	r2, r2
 8009918:	61a2      	str	r2, [r4, #24]
 800991a:	6922      	ldr	r2, [r4, #16]
 800991c:	b942      	cbnz	r2, 8009930 <__swsetup_r+0xa4>
 800991e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009922:	d1c5      	bne.n	80098b0 <__swsetup_r+0x24>
 8009924:	bd38      	pop	{r3, r4, r5, pc}
 8009926:	0799      	lsls	r1, r3, #30
 8009928:	bf58      	it	pl
 800992a:	6962      	ldrpl	r2, [r4, #20]
 800992c:	60a2      	str	r2, [r4, #8]
 800992e:	e7f4      	b.n	800991a <__swsetup_r+0x8e>
 8009930:	2000      	movs	r0, #0
 8009932:	e7f7      	b.n	8009924 <__swsetup_r+0x98>
 8009934:	20000140 	.word	0x20000140

08009938 <memset>:
 8009938:	4402      	add	r2, r0
 800993a:	4603      	mov	r3, r0
 800993c:	4293      	cmp	r3, r2
 800993e:	d100      	bne.n	8009942 <memset+0xa>
 8009940:	4770      	bx	lr
 8009942:	f803 1b01 	strb.w	r1, [r3], #1
 8009946:	e7f9      	b.n	800993c <memset+0x4>

08009948 <_close_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d06      	ldr	r5, [pc, #24]	@ (8009964 <_close_r+0x1c>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	f7f7 f9ee 	bl	8000d34 <_close>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_close_r+0x1a>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_close_r+0x1a>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20003cb4 	.word	0x20003cb4

08009968 <_lseek_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d07      	ldr	r5, [pc, #28]	@ (8009988 <_lseek_r+0x20>)
 800996c:	4604      	mov	r4, r0
 800996e:	4608      	mov	r0, r1
 8009970:	4611      	mov	r1, r2
 8009972:	2200      	movs	r2, #0
 8009974:	602a      	str	r2, [r5, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	f7f7 f9e6 	bl	8000d48 <_lseek>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_lseek_r+0x1e>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_lseek_r+0x1e>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	20003cb4 	.word	0x20003cb4

0800998c <_read_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	@ (80099ac <_read_r+0x20>)
 8009990:	4604      	mov	r4, r0
 8009992:	4608      	mov	r0, r1
 8009994:	4611      	mov	r1, r2
 8009996:	2200      	movs	r2, #0
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f7f7 f9ba 	bl	8000d14 <_read>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_read_r+0x1e>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_read_r+0x1e>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	20003cb4 	.word	0x20003cb4

080099b0 <_write_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	@ (80099d0 <_write_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7f6 fe52 	bl	8000668 <_write>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_write_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_write_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20003cb4 	.word	0x20003cb4

080099d4 <__errno>:
 80099d4:	4b01      	ldr	r3, [pc, #4]	@ (80099dc <__errno+0x8>)
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20000140 	.word	0x20000140

080099e0 <__libc_init_array>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009a18 <__libc_init_array+0x38>)
 80099e4:	4c0d      	ldr	r4, [pc, #52]	@ (8009a1c <__libc_init_array+0x3c>)
 80099e6:	1b64      	subs	r4, r4, r5
 80099e8:	10a4      	asrs	r4, r4, #2
 80099ea:	2600      	movs	r6, #0
 80099ec:	42a6      	cmp	r6, r4
 80099ee:	d109      	bne.n	8009a04 <__libc_init_array+0x24>
 80099f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009a20 <__libc_init_array+0x40>)
 80099f2:	4c0c      	ldr	r4, [pc, #48]	@ (8009a24 <__libc_init_array+0x44>)
 80099f4:	f000 fd24 	bl	800a440 <_init>
 80099f8:	1b64      	subs	r4, r4, r5
 80099fa:	10a4      	asrs	r4, r4, #2
 80099fc:	2600      	movs	r6, #0
 80099fe:	42a6      	cmp	r6, r4
 8009a00:	d105      	bne.n	8009a0e <__libc_init_array+0x2e>
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a08:	4798      	blx	r3
 8009a0a:	3601      	adds	r6, #1
 8009a0c:	e7ee      	b.n	80099ec <__libc_init_array+0xc>
 8009a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a12:	4798      	blx	r3
 8009a14:	3601      	adds	r6, #1
 8009a16:	e7f2      	b.n	80099fe <__libc_init_array+0x1e>
 8009a18:	0800ab74 	.word	0x0800ab74
 8009a1c:	0800ab74 	.word	0x0800ab74
 8009a20:	0800ab74 	.word	0x0800ab74
 8009a24:	0800ab78 	.word	0x0800ab78

08009a28 <__retarget_lock_init_recursive>:
 8009a28:	4770      	bx	lr

08009a2a <__retarget_lock_acquire_recursive>:
 8009a2a:	4770      	bx	lr

08009a2c <__retarget_lock_release_recursive>:
 8009a2c:	4770      	bx	lr
	...

08009a30 <_free_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4605      	mov	r5, r0
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d041      	beq.n	8009abc <_free_r+0x8c>
 8009a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a3c:	1f0c      	subs	r4, r1, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfb8      	it	lt
 8009a42:	18e4      	addlt	r4, r4, r3
 8009a44:	f000 f8e0 	bl	8009c08 <__malloc_lock>
 8009a48:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac0 <_free_r+0x90>)
 8009a4a:	6813      	ldr	r3, [r2, #0]
 8009a4c:	b933      	cbnz	r3, 8009a5c <_free_r+0x2c>
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	6014      	str	r4, [r2, #0]
 8009a52:	4628      	mov	r0, r5
 8009a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a58:	f000 b8dc 	b.w	8009c14 <__malloc_unlock>
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d908      	bls.n	8009a72 <_free_r+0x42>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	1821      	adds	r1, r4, r0
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf01      	itttt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	1809      	addeq	r1, r1, r0
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	e7ed      	b.n	8009a4e <_free_r+0x1e>
 8009a72:	461a      	mov	r2, r3
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	b10b      	cbz	r3, 8009a7c <_free_r+0x4c>
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	d9fa      	bls.n	8009a72 <_free_r+0x42>
 8009a7c:	6811      	ldr	r1, [r2, #0]
 8009a7e:	1850      	adds	r0, r2, r1
 8009a80:	42a0      	cmp	r0, r4
 8009a82:	d10b      	bne.n	8009a9c <_free_r+0x6c>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	4401      	add	r1, r0
 8009a88:	1850      	adds	r0, r2, r1
 8009a8a:	4283      	cmp	r3, r0
 8009a8c:	6011      	str	r1, [r2, #0]
 8009a8e:	d1e0      	bne.n	8009a52 <_free_r+0x22>
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	6053      	str	r3, [r2, #4]
 8009a96:	4408      	add	r0, r1
 8009a98:	6010      	str	r0, [r2, #0]
 8009a9a:	e7da      	b.n	8009a52 <_free_r+0x22>
 8009a9c:	d902      	bls.n	8009aa4 <_free_r+0x74>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	e7d6      	b.n	8009a52 <_free_r+0x22>
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	1821      	adds	r1, r4, r0
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	bf04      	itt	eq
 8009aac:	6819      	ldreq	r1, [r3, #0]
 8009aae:	685b      	ldreq	r3, [r3, #4]
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	bf04      	itt	eq
 8009ab4:	1809      	addeq	r1, r1, r0
 8009ab6:	6021      	streq	r1, [r4, #0]
 8009ab8:	6054      	str	r4, [r2, #4]
 8009aba:	e7ca      	b.n	8009a52 <_free_r+0x22>
 8009abc:	bd38      	pop	{r3, r4, r5, pc}
 8009abe:	bf00      	nop
 8009ac0:	20003cc0 	.word	0x20003cc0

08009ac4 <sbrk_aligned>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8009b04 <sbrk_aligned+0x40>)
 8009ac8:	460c      	mov	r4, r1
 8009aca:	6831      	ldr	r1, [r6, #0]
 8009acc:	4605      	mov	r5, r0
 8009ace:	b911      	cbnz	r1, 8009ad6 <sbrk_aligned+0x12>
 8009ad0:	f000 fca6 	bl	800a420 <_sbrk_r>
 8009ad4:	6030      	str	r0, [r6, #0]
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f000 fca1 	bl	800a420 <_sbrk_r>
 8009ade:	1c43      	adds	r3, r0, #1
 8009ae0:	d103      	bne.n	8009aea <sbrk_aligned+0x26>
 8009ae2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}
 8009aea:	1cc4      	adds	r4, r0, #3
 8009aec:	f024 0403 	bic.w	r4, r4, #3
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d0f8      	beq.n	8009ae6 <sbrk_aligned+0x22>
 8009af4:	1a21      	subs	r1, r4, r0
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 fc92 	bl	800a420 <_sbrk_r>
 8009afc:	3001      	adds	r0, #1
 8009afe:	d1f2      	bne.n	8009ae6 <sbrk_aligned+0x22>
 8009b00:	e7ef      	b.n	8009ae2 <sbrk_aligned+0x1e>
 8009b02:	bf00      	nop
 8009b04:	20003cbc 	.word	0x20003cbc

08009b08 <_malloc_r>:
 8009b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b0c:	1ccd      	adds	r5, r1, #3
 8009b0e:	f025 0503 	bic.w	r5, r5, #3
 8009b12:	3508      	adds	r5, #8
 8009b14:	2d0c      	cmp	r5, #12
 8009b16:	bf38      	it	cc
 8009b18:	250c      	movcc	r5, #12
 8009b1a:	2d00      	cmp	r5, #0
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	db01      	blt.n	8009b24 <_malloc_r+0x1c>
 8009b20:	42a9      	cmp	r1, r5
 8009b22:	d904      	bls.n	8009b2e <_malloc_r+0x26>
 8009b24:	230c      	movs	r3, #12
 8009b26:	6033      	str	r3, [r6, #0]
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c04 <_malloc_r+0xfc>
 8009b32:	f000 f869 	bl	8009c08 <__malloc_lock>
 8009b36:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3a:	461c      	mov	r4, r3
 8009b3c:	bb44      	cbnz	r4, 8009b90 <_malloc_r+0x88>
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff ffbf 	bl	8009ac4 <sbrk_aligned>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	4604      	mov	r4, r0
 8009b4a:	d158      	bne.n	8009bfe <_malloc_r+0xf6>
 8009b4c:	f8d8 4000 	ldr.w	r4, [r8]
 8009b50:	4627      	mov	r7, r4
 8009b52:	2f00      	cmp	r7, #0
 8009b54:	d143      	bne.n	8009bde <_malloc_r+0xd6>
 8009b56:	2c00      	cmp	r4, #0
 8009b58:	d04b      	beq.n	8009bf2 <_malloc_r+0xea>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	4630      	mov	r0, r6
 8009b60:	eb04 0903 	add.w	r9, r4, r3
 8009b64:	f000 fc5c 	bl	800a420 <_sbrk_r>
 8009b68:	4581      	cmp	r9, r0
 8009b6a:	d142      	bne.n	8009bf2 <_malloc_r+0xea>
 8009b6c:	6821      	ldr	r1, [r4, #0]
 8009b6e:	1a6d      	subs	r5, r5, r1
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ffa6 	bl	8009ac4 <sbrk_aligned>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d03a      	beq.n	8009bf2 <_malloc_r+0xea>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	442b      	add	r3, r5
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	f8d8 3000 	ldr.w	r3, [r8]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	bb62      	cbnz	r2, 8009be4 <_malloc_r+0xdc>
 8009b8a:	f8c8 7000 	str.w	r7, [r8]
 8009b8e:	e00f      	b.n	8009bb0 <_malloc_r+0xa8>
 8009b90:	6822      	ldr	r2, [r4, #0]
 8009b92:	1b52      	subs	r2, r2, r5
 8009b94:	d420      	bmi.n	8009bd8 <_malloc_r+0xd0>
 8009b96:	2a0b      	cmp	r2, #11
 8009b98:	d917      	bls.n	8009bca <_malloc_r+0xc2>
 8009b9a:	1961      	adds	r1, r4, r5
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	6025      	str	r5, [r4, #0]
 8009ba0:	bf18      	it	ne
 8009ba2:	6059      	strne	r1, [r3, #4]
 8009ba4:	6863      	ldr	r3, [r4, #4]
 8009ba6:	bf08      	it	eq
 8009ba8:	f8c8 1000 	streq.w	r1, [r8]
 8009bac:	5162      	str	r2, [r4, r5]
 8009bae:	604b      	str	r3, [r1, #4]
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 f82f 	bl	8009c14 <__malloc_unlock>
 8009bb6:	f104 000b 	add.w	r0, r4, #11
 8009bba:	1d23      	adds	r3, r4, #4
 8009bbc:	f020 0007 	bic.w	r0, r0, #7
 8009bc0:	1ac2      	subs	r2, r0, r3
 8009bc2:	bf1c      	itt	ne
 8009bc4:	1a1b      	subne	r3, r3, r0
 8009bc6:	50a3      	strne	r3, [r4, r2]
 8009bc8:	e7af      	b.n	8009b2a <_malloc_r+0x22>
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	bf0c      	ite	eq
 8009bd0:	f8c8 2000 	streq.w	r2, [r8]
 8009bd4:	605a      	strne	r2, [r3, #4]
 8009bd6:	e7eb      	b.n	8009bb0 <_malloc_r+0xa8>
 8009bd8:	4623      	mov	r3, r4
 8009bda:	6864      	ldr	r4, [r4, #4]
 8009bdc:	e7ae      	b.n	8009b3c <_malloc_r+0x34>
 8009bde:	463c      	mov	r4, r7
 8009be0:	687f      	ldr	r7, [r7, #4]
 8009be2:	e7b6      	b.n	8009b52 <_malloc_r+0x4a>
 8009be4:	461a      	mov	r2, r3
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d1fb      	bne.n	8009be4 <_malloc_r+0xdc>
 8009bec:	2300      	movs	r3, #0
 8009bee:	6053      	str	r3, [r2, #4]
 8009bf0:	e7de      	b.n	8009bb0 <_malloc_r+0xa8>
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	6033      	str	r3, [r6, #0]
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f000 f80c 	bl	8009c14 <__malloc_unlock>
 8009bfc:	e794      	b.n	8009b28 <_malloc_r+0x20>
 8009bfe:	6005      	str	r5, [r0, #0]
 8009c00:	e7d6      	b.n	8009bb0 <_malloc_r+0xa8>
 8009c02:	bf00      	nop
 8009c04:	20003cc0 	.word	0x20003cc0

08009c08 <__malloc_lock>:
 8009c08:	4801      	ldr	r0, [pc, #4]	@ (8009c10 <__malloc_lock+0x8>)
 8009c0a:	f7ff bf0e 	b.w	8009a2a <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20003cb8 	.word	0x20003cb8

08009c14 <__malloc_unlock>:
 8009c14:	4801      	ldr	r0, [pc, #4]	@ (8009c1c <__malloc_unlock+0x8>)
 8009c16:	f7ff bf09 	b.w	8009a2c <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20003cb8 	.word	0x20003cb8

08009c20 <__sfputc_r>:
 8009c20:	6893      	ldr	r3, [r2, #8]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	b410      	push	{r4}
 8009c28:	6093      	str	r3, [r2, #8]
 8009c2a:	da08      	bge.n	8009c3e <__sfputc_r+0x1e>
 8009c2c:	6994      	ldr	r4, [r2, #24]
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	db01      	blt.n	8009c36 <__sfputc_r+0x16>
 8009c32:	290a      	cmp	r1, #10
 8009c34:	d103      	bne.n	8009c3e <__sfputc_r+0x1e>
 8009c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c3a:	f7ff bde8 	b.w	800980e <__swbuf_r>
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	1c58      	adds	r0, r3, #1
 8009c42:	6010      	str	r0, [r2, #0]
 8009c44:	7019      	strb	r1, [r3, #0]
 8009c46:	4608      	mov	r0, r1
 8009c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <__sfputs_r>:
 8009c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c50:	4606      	mov	r6, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	18d5      	adds	r5, r2, r3
 8009c58:	42ac      	cmp	r4, r5
 8009c5a:	d101      	bne.n	8009c60 <__sfputs_r+0x12>
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e007      	b.n	8009c70 <__sfputs_r+0x22>
 8009c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c64:	463a      	mov	r2, r7
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ffda 	bl	8009c20 <__sfputc_r>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d1f3      	bne.n	8009c58 <__sfputs_r+0xa>
 8009c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c74 <_vfiprintf_r>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	460d      	mov	r5, r1
 8009c7a:	b09d      	sub	sp, #116	@ 0x74
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	4698      	mov	r8, r3
 8009c80:	4606      	mov	r6, r0
 8009c82:	b118      	cbz	r0, 8009c8c <_vfiprintf_r+0x18>
 8009c84:	6a03      	ldr	r3, [r0, #32]
 8009c86:	b90b      	cbnz	r3, 8009c8c <_vfiprintf_r+0x18>
 8009c88:	f7ff fcd8 	bl	800963c <__sinit>
 8009c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c8e:	07d9      	lsls	r1, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_vfiprintf_r+0x2a>
 8009c92:	89ab      	ldrh	r3, [r5, #12]
 8009c94:	059a      	lsls	r2, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_vfiprintf_r+0x2a>
 8009c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c9a:	f7ff fec6 	bl	8009a2a <__retarget_lock_acquire_recursive>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	071b      	lsls	r3, r3, #28
 8009ca2:	d501      	bpl.n	8009ca8 <_vfiprintf_r+0x34>
 8009ca4:	692b      	ldr	r3, [r5, #16]
 8009ca6:	b99b      	cbnz	r3, 8009cd0 <_vfiprintf_r+0x5c>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7ff fdee 	bl	800988c <__swsetup_r>
 8009cb0:	b170      	cbz	r0, 8009cd0 <_vfiprintf_r+0x5c>
 8009cb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cb4:	07dc      	lsls	r4, r3, #31
 8009cb6:	d504      	bpl.n	8009cc2 <_vfiprintf_r+0x4e>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cbc:	b01d      	add	sp, #116	@ 0x74
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	89ab      	ldrh	r3, [r5, #12]
 8009cc4:	0598      	lsls	r0, r3, #22
 8009cc6:	d4f7      	bmi.n	8009cb8 <_vfiprintf_r+0x44>
 8009cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cca:	f7ff feaf 	bl	8009a2c <__retarget_lock_release_recursive>
 8009cce:	e7f3      	b.n	8009cb8 <_vfiprintf_r+0x44>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd4:	2320      	movs	r3, #32
 8009cd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cde:	2330      	movs	r3, #48	@ 0x30
 8009ce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e90 <_vfiprintf_r+0x21c>
 8009ce4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ce8:	f04f 0901 	mov.w	r9, #1
 8009cec:	4623      	mov	r3, r4
 8009cee:	469a      	mov	sl, r3
 8009cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf4:	b10a      	cbz	r2, 8009cfa <_vfiprintf_r+0x86>
 8009cf6:	2a25      	cmp	r2, #37	@ 0x25
 8009cf8:	d1f9      	bne.n	8009cee <_vfiprintf_r+0x7a>
 8009cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8009cfe:	d00b      	beq.n	8009d18 <_vfiprintf_r+0xa4>
 8009d00:	465b      	mov	r3, fp
 8009d02:	4622      	mov	r2, r4
 8009d04:	4629      	mov	r1, r5
 8009d06:	4630      	mov	r0, r6
 8009d08:	f7ff ffa1 	bl	8009c4e <__sfputs_r>
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f000 80a7 	beq.w	8009e60 <_vfiprintf_r+0x1ec>
 8009d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d14:	445a      	add	r2, fp
 8009d16:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d18:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 809f 	beq.w	8009e60 <_vfiprintf_r+0x1ec>
 8009d22:	2300      	movs	r3, #0
 8009d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d2c:	f10a 0a01 	add.w	sl, sl, #1
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	9307      	str	r3, [sp, #28]
 8009d34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d38:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d3a:	4654      	mov	r4, sl
 8009d3c:	2205      	movs	r2, #5
 8009d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d42:	4853      	ldr	r0, [pc, #332]	@ (8009e90 <_vfiprintf_r+0x21c>)
 8009d44:	f7f6 fa44 	bl	80001d0 <memchr>
 8009d48:	9a04      	ldr	r2, [sp, #16]
 8009d4a:	b9d8      	cbnz	r0, 8009d84 <_vfiprintf_r+0x110>
 8009d4c:	06d1      	lsls	r1, r2, #27
 8009d4e:	bf44      	itt	mi
 8009d50:	2320      	movmi	r3, #32
 8009d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d56:	0713      	lsls	r3, r2, #28
 8009d58:	bf44      	itt	mi
 8009d5a:	232b      	movmi	r3, #43	@ 0x2b
 8009d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d60:	f89a 3000 	ldrb.w	r3, [sl]
 8009d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d66:	d015      	beq.n	8009d94 <_vfiprintf_r+0x120>
 8009d68:	9a07      	ldr	r2, [sp, #28]
 8009d6a:	4654      	mov	r4, sl
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f04f 0c0a 	mov.w	ip, #10
 8009d72:	4621      	mov	r1, r4
 8009d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d78:	3b30      	subs	r3, #48	@ 0x30
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	d94b      	bls.n	8009e16 <_vfiprintf_r+0x1a2>
 8009d7e:	b1b0      	cbz	r0, 8009dae <_vfiprintf_r+0x13a>
 8009d80:	9207      	str	r2, [sp, #28]
 8009d82:	e014      	b.n	8009dae <_vfiprintf_r+0x13a>
 8009d84:	eba0 0308 	sub.w	r3, r0, r8
 8009d88:	fa09 f303 	lsl.w	r3, r9, r3
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	46a2      	mov	sl, r4
 8009d92:	e7d2      	b.n	8009d3a <_vfiprintf_r+0xc6>
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	1d19      	adds	r1, r3, #4
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	9103      	str	r1, [sp, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bfbb      	ittet	lt
 8009da0:	425b      	neglt	r3, r3
 8009da2:	f042 0202 	orrlt.w	r2, r2, #2
 8009da6:	9307      	strge	r3, [sp, #28]
 8009da8:	9307      	strlt	r3, [sp, #28]
 8009daa:	bfb8      	it	lt
 8009dac:	9204      	strlt	r2, [sp, #16]
 8009dae:	7823      	ldrb	r3, [r4, #0]
 8009db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009db2:	d10a      	bne.n	8009dca <_vfiprintf_r+0x156>
 8009db4:	7863      	ldrb	r3, [r4, #1]
 8009db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009db8:	d132      	bne.n	8009e20 <_vfiprintf_r+0x1ac>
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	1d1a      	adds	r2, r3, #4
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	9203      	str	r2, [sp, #12]
 8009dc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dc6:	3402      	adds	r4, #2
 8009dc8:	9305      	str	r3, [sp, #20]
 8009dca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ea0 <_vfiprintf_r+0x22c>
 8009dce:	7821      	ldrb	r1, [r4, #0]
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	f7f6 f9fc 	bl	80001d0 <memchr>
 8009dd8:	b138      	cbz	r0, 8009dea <_vfiprintf_r+0x176>
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	eba0 000a 	sub.w	r0, r0, sl
 8009de0:	2240      	movs	r2, #64	@ 0x40
 8009de2:	4082      	lsls	r2, r0
 8009de4:	4313      	orrs	r3, r2
 8009de6:	3401      	adds	r4, #1
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dee:	4829      	ldr	r0, [pc, #164]	@ (8009e94 <_vfiprintf_r+0x220>)
 8009df0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009df4:	2206      	movs	r2, #6
 8009df6:	f7f6 f9eb 	bl	80001d0 <memchr>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d03f      	beq.n	8009e7e <_vfiprintf_r+0x20a>
 8009dfe:	4b26      	ldr	r3, [pc, #152]	@ (8009e98 <_vfiprintf_r+0x224>)
 8009e00:	bb1b      	cbnz	r3, 8009e4a <_vfiprintf_r+0x1d6>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e10:	443b      	add	r3, r7
 8009e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e14:	e76a      	b.n	8009cec <_vfiprintf_r+0x78>
 8009e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e7a8      	b.n	8009d72 <_vfiprintf_r+0xfe>
 8009e20:	2300      	movs	r3, #0
 8009e22:	3401      	adds	r4, #1
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	4619      	mov	r1, r3
 8009e28:	f04f 0c0a 	mov.w	ip, #10
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e32:	3a30      	subs	r2, #48	@ 0x30
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d903      	bls.n	8009e40 <_vfiprintf_r+0x1cc>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0c6      	beq.n	8009dca <_vfiprintf_r+0x156>
 8009e3c:	9105      	str	r1, [sp, #20]
 8009e3e:	e7c4      	b.n	8009dca <_vfiprintf_r+0x156>
 8009e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e44:	4604      	mov	r4, r0
 8009e46:	2301      	movs	r3, #1
 8009e48:	e7f0      	b.n	8009e2c <_vfiprintf_r+0x1b8>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b12      	ldr	r3, [pc, #72]	@ (8009e9c <_vfiprintf_r+0x228>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4630      	mov	r0, r6
 8009e56:	f3af 8000 	nop.w
 8009e5a:	4607      	mov	r7, r0
 8009e5c:	1c78      	adds	r0, r7, #1
 8009e5e:	d1d6      	bne.n	8009e0e <_vfiprintf_r+0x19a>
 8009e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e62:	07d9      	lsls	r1, r3, #31
 8009e64:	d405      	bmi.n	8009e72 <_vfiprintf_r+0x1fe>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	059a      	lsls	r2, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_vfiprintf_r+0x1fe>
 8009e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e6e:	f7ff fddd 	bl	8009a2c <__retarget_lock_release_recursive>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	065b      	lsls	r3, r3, #25
 8009e76:	f53f af1f 	bmi.w	8009cb8 <_vfiprintf_r+0x44>
 8009e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e7c:	e71e      	b.n	8009cbc <_vfiprintf_r+0x48>
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <_vfiprintf_r+0x228>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f879 	bl	8009f80 <_printf_i>
 8009e8e:	e7e4      	b.n	8009e5a <_vfiprintf_r+0x1e6>
 8009e90:	0800ab38 	.word	0x0800ab38
 8009e94:	0800ab42 	.word	0x0800ab42
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	08009c4f 	.word	0x08009c4f
 8009ea0:	0800ab3e 	.word	0x0800ab3e

08009ea4 <_printf_common>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	4698      	mov	r8, r3
 8009eac:	688a      	ldr	r2, [r1, #8]
 8009eae:	690b      	ldr	r3, [r1, #16]
 8009eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	bfb8      	it	lt
 8009eb8:	4613      	movlt	r3, r2
 8009eba:	6033      	str	r3, [r6, #0]
 8009ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	b10a      	cbz	r2, 8009eca <_printf_common+0x26>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	6033      	str	r3, [r6, #0]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	0699      	lsls	r1, r3, #26
 8009ece:	bf42      	ittt	mi
 8009ed0:	6833      	ldrmi	r3, [r6, #0]
 8009ed2:	3302      	addmi	r3, #2
 8009ed4:	6033      	strmi	r3, [r6, #0]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	f015 0506 	ands.w	r5, r5, #6
 8009edc:	d106      	bne.n	8009eec <_printf_common+0x48>
 8009ede:	f104 0a19 	add.w	sl, r4, #25
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	6832      	ldr	r2, [r6, #0]
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	dc26      	bgt.n	8009f3a <_printf_common+0x96>
 8009eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ef0:	6822      	ldr	r2, [r4, #0]
 8009ef2:	3b00      	subs	r3, #0
 8009ef4:	bf18      	it	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	0692      	lsls	r2, r2, #26
 8009efa:	d42b      	bmi.n	8009f54 <_printf_common+0xb0>
 8009efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f00:	4641      	mov	r1, r8
 8009f02:	4638      	mov	r0, r7
 8009f04:	47c8      	blx	r9
 8009f06:	3001      	adds	r0, #1
 8009f08:	d01e      	beq.n	8009f48 <_printf_common+0xa4>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	f003 0306 	and.w	r3, r3, #6
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	bf02      	ittt	eq
 8009f16:	68e5      	ldreq	r5, [r4, #12]
 8009f18:	6833      	ldreq	r3, [r6, #0]
 8009f1a:	1aed      	subeq	r5, r5, r3
 8009f1c:	68a3      	ldr	r3, [r4, #8]
 8009f1e:	bf0c      	ite	eq
 8009f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f24:	2500      	movne	r5, #0
 8009f26:	4293      	cmp	r3, r2
 8009f28:	bfc4      	itt	gt
 8009f2a:	1a9b      	subgt	r3, r3, r2
 8009f2c:	18ed      	addgt	r5, r5, r3
 8009f2e:	2600      	movs	r6, #0
 8009f30:	341a      	adds	r4, #26
 8009f32:	42b5      	cmp	r5, r6
 8009f34:	d11a      	bne.n	8009f6c <_printf_common+0xc8>
 8009f36:	2000      	movs	r0, #0
 8009f38:	e008      	b.n	8009f4c <_printf_common+0xa8>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	4641      	mov	r1, r8
 8009f40:	4638      	mov	r0, r7
 8009f42:	47c8      	blx	r9
 8009f44:	3001      	adds	r0, #1
 8009f46:	d103      	bne.n	8009f50 <_printf_common+0xac>
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f50:	3501      	adds	r5, #1
 8009f52:	e7c6      	b.n	8009ee2 <_printf_common+0x3e>
 8009f54:	18e1      	adds	r1, r4, r3
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	2030      	movs	r0, #48	@ 0x30
 8009f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f5e:	4422      	add	r2, r4
 8009f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f68:	3302      	adds	r3, #2
 8009f6a:	e7c7      	b.n	8009efc <_printf_common+0x58>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4641      	mov	r1, r8
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c8      	blx	r9
 8009f76:	3001      	adds	r0, #1
 8009f78:	d0e6      	beq.n	8009f48 <_printf_common+0xa4>
 8009f7a:	3601      	adds	r6, #1
 8009f7c:	e7d9      	b.n	8009f32 <_printf_common+0x8e>
	...

08009f80 <_printf_i>:
 8009f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	7e0f      	ldrb	r7, [r1, #24]
 8009f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f88:	2f78      	cmp	r7, #120	@ 0x78
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	469a      	mov	sl, r3
 8009f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f96:	d807      	bhi.n	8009fa8 <_printf_i+0x28>
 8009f98:	2f62      	cmp	r7, #98	@ 0x62
 8009f9a:	d80a      	bhi.n	8009fb2 <_printf_i+0x32>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	f000 80d2 	beq.w	800a146 <_printf_i+0x1c6>
 8009fa2:	2f58      	cmp	r7, #88	@ 0x58
 8009fa4:	f000 80b9 	beq.w	800a11a <_printf_i+0x19a>
 8009fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fb0:	e03a      	b.n	800a028 <_printf_i+0xa8>
 8009fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fb6:	2b15      	cmp	r3, #21
 8009fb8:	d8f6      	bhi.n	8009fa8 <_printf_i+0x28>
 8009fba:	a101      	add	r1, pc, #4	@ (adr r1, 8009fc0 <_printf_i+0x40>)
 8009fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc0:	0800a019 	.word	0x0800a019
 8009fc4:	0800a02d 	.word	0x0800a02d
 8009fc8:	08009fa9 	.word	0x08009fa9
 8009fcc:	08009fa9 	.word	0x08009fa9
 8009fd0:	08009fa9 	.word	0x08009fa9
 8009fd4:	08009fa9 	.word	0x08009fa9
 8009fd8:	0800a02d 	.word	0x0800a02d
 8009fdc:	08009fa9 	.word	0x08009fa9
 8009fe0:	08009fa9 	.word	0x08009fa9
 8009fe4:	08009fa9 	.word	0x08009fa9
 8009fe8:	08009fa9 	.word	0x08009fa9
 8009fec:	0800a12d 	.word	0x0800a12d
 8009ff0:	0800a057 	.word	0x0800a057
 8009ff4:	0800a0e7 	.word	0x0800a0e7
 8009ff8:	08009fa9 	.word	0x08009fa9
 8009ffc:	08009fa9 	.word	0x08009fa9
 800a000:	0800a14f 	.word	0x0800a14f
 800a004:	08009fa9 	.word	0x08009fa9
 800a008:	0800a057 	.word	0x0800a057
 800a00c:	08009fa9 	.word	0x08009fa9
 800a010:	08009fa9 	.word	0x08009fa9
 800a014:	0800a0ef 	.word	0x0800a0ef
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6032      	str	r2, [r6, #0]
 800a020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a028:	2301      	movs	r3, #1
 800a02a:	e09d      	b.n	800a168 <_printf_i+0x1e8>
 800a02c:	6833      	ldr	r3, [r6, #0]
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	6031      	str	r1, [r6, #0]
 800a034:	0606      	lsls	r6, r0, #24
 800a036:	d501      	bpl.n	800a03c <_printf_i+0xbc>
 800a038:	681d      	ldr	r5, [r3, #0]
 800a03a:	e003      	b.n	800a044 <_printf_i+0xc4>
 800a03c:	0645      	lsls	r5, r0, #25
 800a03e:	d5fb      	bpl.n	800a038 <_printf_i+0xb8>
 800a040:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a044:	2d00      	cmp	r5, #0
 800a046:	da03      	bge.n	800a050 <_printf_i+0xd0>
 800a048:	232d      	movs	r3, #45	@ 0x2d
 800a04a:	426d      	negs	r5, r5
 800a04c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a050:	4859      	ldr	r0, [pc, #356]	@ (800a1b8 <_printf_i+0x238>)
 800a052:	230a      	movs	r3, #10
 800a054:	e011      	b.n	800a07a <_printf_i+0xfa>
 800a056:	6821      	ldr	r1, [r4, #0]
 800a058:	6833      	ldr	r3, [r6, #0]
 800a05a:	0608      	lsls	r0, r1, #24
 800a05c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a060:	d402      	bmi.n	800a068 <_printf_i+0xe8>
 800a062:	0649      	lsls	r1, r1, #25
 800a064:	bf48      	it	mi
 800a066:	b2ad      	uxthmi	r5, r5
 800a068:	2f6f      	cmp	r7, #111	@ 0x6f
 800a06a:	4853      	ldr	r0, [pc, #332]	@ (800a1b8 <_printf_i+0x238>)
 800a06c:	6033      	str	r3, [r6, #0]
 800a06e:	bf14      	ite	ne
 800a070:	230a      	movne	r3, #10
 800a072:	2308      	moveq	r3, #8
 800a074:	2100      	movs	r1, #0
 800a076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a07a:	6866      	ldr	r6, [r4, #4]
 800a07c:	60a6      	str	r6, [r4, #8]
 800a07e:	2e00      	cmp	r6, #0
 800a080:	bfa2      	ittt	ge
 800a082:	6821      	ldrge	r1, [r4, #0]
 800a084:	f021 0104 	bicge.w	r1, r1, #4
 800a088:	6021      	strge	r1, [r4, #0]
 800a08a:	b90d      	cbnz	r5, 800a090 <_printf_i+0x110>
 800a08c:	2e00      	cmp	r6, #0
 800a08e:	d04b      	beq.n	800a128 <_printf_i+0x1a8>
 800a090:	4616      	mov	r6, r2
 800a092:	fbb5 f1f3 	udiv	r1, r5, r3
 800a096:	fb03 5711 	mls	r7, r3, r1, r5
 800a09a:	5dc7      	ldrb	r7, [r0, r7]
 800a09c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0a0:	462f      	mov	r7, r5
 800a0a2:	42bb      	cmp	r3, r7
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	d9f4      	bls.n	800a092 <_printf_i+0x112>
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d10b      	bne.n	800a0c4 <_printf_i+0x144>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	07df      	lsls	r7, r3, #31
 800a0b0:	d508      	bpl.n	800a0c4 <_printf_i+0x144>
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	6861      	ldr	r1, [r4, #4]
 800a0b6:	4299      	cmp	r1, r3
 800a0b8:	bfde      	ittt	le
 800a0ba:	2330      	movle	r3, #48	@ 0x30
 800a0bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a0c4:	1b92      	subs	r2, r2, r6
 800a0c6:	6122      	str	r2, [r4, #16]
 800a0c8:	f8cd a000 	str.w	sl, [sp]
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	aa03      	add	r2, sp, #12
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	f7ff fee6 	bl	8009ea4 <_printf_common>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d14a      	bne.n	800a172 <_printf_i+0x1f2>
 800a0dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0e0:	b004      	add	sp, #16
 800a0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	f043 0320 	orr.w	r3, r3, #32
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	4833      	ldr	r0, [pc, #204]	@ (800a1bc <_printf_i+0x23c>)
 800a0f0:	2778      	movs	r7, #120	@ 0x78
 800a0f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	6831      	ldr	r1, [r6, #0]
 800a0fa:	061f      	lsls	r7, r3, #24
 800a0fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a100:	d402      	bmi.n	800a108 <_printf_i+0x188>
 800a102:	065f      	lsls	r7, r3, #25
 800a104:	bf48      	it	mi
 800a106:	b2ad      	uxthmi	r5, r5
 800a108:	6031      	str	r1, [r6, #0]
 800a10a:	07d9      	lsls	r1, r3, #31
 800a10c:	bf44      	itt	mi
 800a10e:	f043 0320 	orrmi.w	r3, r3, #32
 800a112:	6023      	strmi	r3, [r4, #0]
 800a114:	b11d      	cbz	r5, 800a11e <_printf_i+0x19e>
 800a116:	2310      	movs	r3, #16
 800a118:	e7ac      	b.n	800a074 <_printf_i+0xf4>
 800a11a:	4827      	ldr	r0, [pc, #156]	@ (800a1b8 <_printf_i+0x238>)
 800a11c:	e7e9      	b.n	800a0f2 <_printf_i+0x172>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	f023 0320 	bic.w	r3, r3, #32
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	e7f6      	b.n	800a116 <_printf_i+0x196>
 800a128:	4616      	mov	r6, r2
 800a12a:	e7bd      	b.n	800a0a8 <_printf_i+0x128>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	6825      	ldr	r5, [r4, #0]
 800a130:	6961      	ldr	r1, [r4, #20]
 800a132:	1d18      	adds	r0, r3, #4
 800a134:	6030      	str	r0, [r6, #0]
 800a136:	062e      	lsls	r6, r5, #24
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	d501      	bpl.n	800a140 <_printf_i+0x1c0>
 800a13c:	6019      	str	r1, [r3, #0]
 800a13e:	e002      	b.n	800a146 <_printf_i+0x1c6>
 800a140:	0668      	lsls	r0, r5, #25
 800a142:	d5fb      	bpl.n	800a13c <_printf_i+0x1bc>
 800a144:	8019      	strh	r1, [r3, #0]
 800a146:	2300      	movs	r3, #0
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	4616      	mov	r6, r2
 800a14c:	e7bc      	b.n	800a0c8 <_printf_i+0x148>
 800a14e:	6833      	ldr	r3, [r6, #0]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	6032      	str	r2, [r6, #0]
 800a154:	681e      	ldr	r6, [r3, #0]
 800a156:	6862      	ldr	r2, [r4, #4]
 800a158:	2100      	movs	r1, #0
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7f6 f838 	bl	80001d0 <memchr>
 800a160:	b108      	cbz	r0, 800a166 <_printf_i+0x1e6>
 800a162:	1b80      	subs	r0, r0, r6
 800a164:	6060      	str	r0, [r4, #4]
 800a166:	6863      	ldr	r3, [r4, #4]
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	2300      	movs	r3, #0
 800a16c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a170:	e7aa      	b.n	800a0c8 <_printf_i+0x148>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	4632      	mov	r2, r6
 800a176:	4649      	mov	r1, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	47d0      	blx	sl
 800a17c:	3001      	adds	r0, #1
 800a17e:	d0ad      	beq.n	800a0dc <_printf_i+0x15c>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	079b      	lsls	r3, r3, #30
 800a184:	d413      	bmi.n	800a1ae <_printf_i+0x22e>
 800a186:	68e0      	ldr	r0, [r4, #12]
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	4298      	cmp	r0, r3
 800a18c:	bfb8      	it	lt
 800a18e:	4618      	movlt	r0, r3
 800a190:	e7a6      	b.n	800a0e0 <_printf_i+0x160>
 800a192:	2301      	movs	r3, #1
 800a194:	4632      	mov	r2, r6
 800a196:	4649      	mov	r1, r9
 800a198:	4640      	mov	r0, r8
 800a19a:	47d0      	blx	sl
 800a19c:	3001      	adds	r0, #1
 800a19e:	d09d      	beq.n	800a0dc <_printf_i+0x15c>
 800a1a0:	3501      	adds	r5, #1
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	9903      	ldr	r1, [sp, #12]
 800a1a6:	1a5b      	subs	r3, r3, r1
 800a1a8:	42ab      	cmp	r3, r5
 800a1aa:	dcf2      	bgt.n	800a192 <_printf_i+0x212>
 800a1ac:	e7eb      	b.n	800a186 <_printf_i+0x206>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	f104 0619 	add.w	r6, r4, #25
 800a1b4:	e7f5      	b.n	800a1a2 <_printf_i+0x222>
 800a1b6:	bf00      	nop
 800a1b8:	0800ab49 	.word	0x0800ab49
 800a1bc:	0800ab5a 	.word	0x0800ab5a

0800a1c0 <__sflush_r>:
 800a1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	0716      	lsls	r6, r2, #28
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	d454      	bmi.n	800a27a <__sflush_r+0xba>
 800a1d0:	684b      	ldr	r3, [r1, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dc02      	bgt.n	800a1dc <__sflush_r+0x1c>
 800a1d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dd48      	ble.n	800a26e <__sflush_r+0xae>
 800a1dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	d045      	beq.n	800a26e <__sflush_r+0xae>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1e8:	682f      	ldr	r7, [r5, #0]
 800a1ea:	6a21      	ldr	r1, [r4, #32]
 800a1ec:	602b      	str	r3, [r5, #0]
 800a1ee:	d030      	beq.n	800a252 <__sflush_r+0x92>
 800a1f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	0759      	lsls	r1, r3, #29
 800a1f6:	d505      	bpl.n	800a204 <__sflush_r+0x44>
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	1ad2      	subs	r2, r2, r3
 800a1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1fe:	b10b      	cbz	r3, 800a204 <__sflush_r+0x44>
 800a200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a202:	1ad2      	subs	r2, r2, r3
 800a204:	2300      	movs	r3, #0
 800a206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a208:	6a21      	ldr	r1, [r4, #32]
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b0      	blx	r6
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	d106      	bne.n	800a222 <__sflush_r+0x62>
 800a214:	6829      	ldr	r1, [r5, #0]
 800a216:	291d      	cmp	r1, #29
 800a218:	d82b      	bhi.n	800a272 <__sflush_r+0xb2>
 800a21a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c4 <__sflush_r+0x104>)
 800a21c:	410a      	asrs	r2, r1
 800a21e:	07d6      	lsls	r6, r2, #31
 800a220:	d427      	bmi.n	800a272 <__sflush_r+0xb2>
 800a222:	2200      	movs	r2, #0
 800a224:	6062      	str	r2, [r4, #4]
 800a226:	04d9      	lsls	r1, r3, #19
 800a228:	6922      	ldr	r2, [r4, #16]
 800a22a:	6022      	str	r2, [r4, #0]
 800a22c:	d504      	bpl.n	800a238 <__sflush_r+0x78>
 800a22e:	1c42      	adds	r2, r0, #1
 800a230:	d101      	bne.n	800a236 <__sflush_r+0x76>
 800a232:	682b      	ldr	r3, [r5, #0]
 800a234:	b903      	cbnz	r3, 800a238 <__sflush_r+0x78>
 800a236:	6560      	str	r0, [r4, #84]	@ 0x54
 800a238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a23a:	602f      	str	r7, [r5, #0]
 800a23c:	b1b9      	cbz	r1, 800a26e <__sflush_r+0xae>
 800a23e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a242:	4299      	cmp	r1, r3
 800a244:	d002      	beq.n	800a24c <__sflush_r+0x8c>
 800a246:	4628      	mov	r0, r5
 800a248:	f7ff fbf2 	bl	8009a30 <_free_r>
 800a24c:	2300      	movs	r3, #0
 800a24e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a250:	e00d      	b.n	800a26e <__sflush_r+0xae>
 800a252:	2301      	movs	r3, #1
 800a254:	4628      	mov	r0, r5
 800a256:	47b0      	blx	r6
 800a258:	4602      	mov	r2, r0
 800a25a:	1c50      	adds	r0, r2, #1
 800a25c:	d1c9      	bne.n	800a1f2 <__sflush_r+0x32>
 800a25e:	682b      	ldr	r3, [r5, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0c6      	beq.n	800a1f2 <__sflush_r+0x32>
 800a264:	2b1d      	cmp	r3, #29
 800a266:	d001      	beq.n	800a26c <__sflush_r+0xac>
 800a268:	2b16      	cmp	r3, #22
 800a26a:	d11e      	bne.n	800a2aa <__sflush_r+0xea>
 800a26c:	602f      	str	r7, [r5, #0]
 800a26e:	2000      	movs	r0, #0
 800a270:	e022      	b.n	800a2b8 <__sflush_r+0xf8>
 800a272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a276:	b21b      	sxth	r3, r3
 800a278:	e01b      	b.n	800a2b2 <__sflush_r+0xf2>
 800a27a:	690f      	ldr	r7, [r1, #16]
 800a27c:	2f00      	cmp	r7, #0
 800a27e:	d0f6      	beq.n	800a26e <__sflush_r+0xae>
 800a280:	0793      	lsls	r3, r2, #30
 800a282:	680e      	ldr	r6, [r1, #0]
 800a284:	bf08      	it	eq
 800a286:	694b      	ldreq	r3, [r1, #20]
 800a288:	600f      	str	r7, [r1, #0]
 800a28a:	bf18      	it	ne
 800a28c:	2300      	movne	r3, #0
 800a28e:	eba6 0807 	sub.w	r8, r6, r7
 800a292:	608b      	str	r3, [r1, #8]
 800a294:	f1b8 0f00 	cmp.w	r8, #0
 800a298:	dde9      	ble.n	800a26e <__sflush_r+0xae>
 800a29a:	6a21      	ldr	r1, [r4, #32]
 800a29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a29e:	4643      	mov	r3, r8
 800a2a0:	463a      	mov	r2, r7
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b0      	blx	r6
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	dc08      	bgt.n	800a2bc <__sflush_r+0xfc>
 800a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b2:	81a3      	strh	r3, [r4, #12]
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2bc:	4407      	add	r7, r0
 800a2be:	eba8 0800 	sub.w	r8, r8, r0
 800a2c2:	e7e7      	b.n	800a294 <__sflush_r+0xd4>
 800a2c4:	dfbffffe 	.word	0xdfbffffe

0800a2c8 <_fflush_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	690b      	ldr	r3, [r1, #16]
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	b913      	cbnz	r3, 800a2d8 <_fflush_r+0x10>
 800a2d2:	2500      	movs	r5, #0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	b118      	cbz	r0, 800a2e2 <_fflush_r+0x1a>
 800a2da:	6a03      	ldr	r3, [r0, #32]
 800a2dc:	b90b      	cbnz	r3, 800a2e2 <_fflush_r+0x1a>
 800a2de:	f7ff f9ad 	bl	800963c <__sinit>
 800a2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0f3      	beq.n	800a2d2 <_fflush_r+0xa>
 800a2ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2ec:	07d0      	lsls	r0, r2, #31
 800a2ee:	d404      	bmi.n	800a2fa <_fflush_r+0x32>
 800a2f0:	0599      	lsls	r1, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_fflush_r+0x32>
 800a2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2f6:	f7ff fb98 	bl	8009a2a <__retarget_lock_acquire_recursive>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	f7ff ff5f 	bl	800a1c0 <__sflush_r>
 800a302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a304:	07da      	lsls	r2, r3, #31
 800a306:	4605      	mov	r5, r0
 800a308:	d4e4      	bmi.n	800a2d4 <_fflush_r+0xc>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	059b      	lsls	r3, r3, #22
 800a30e:	d4e1      	bmi.n	800a2d4 <_fflush_r+0xc>
 800a310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a312:	f7ff fb8b 	bl	8009a2c <__retarget_lock_release_recursive>
 800a316:	e7dd      	b.n	800a2d4 <_fflush_r+0xc>

0800a318 <__swhatbuf_r>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	460c      	mov	r4, r1
 800a31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a320:	2900      	cmp	r1, #0
 800a322:	b096      	sub	sp, #88	@ 0x58
 800a324:	4615      	mov	r5, r2
 800a326:	461e      	mov	r6, r3
 800a328:	da0d      	bge.n	800a346 <__swhatbuf_r+0x2e>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a330:	f04f 0100 	mov.w	r1, #0
 800a334:	bf14      	ite	ne
 800a336:	2340      	movne	r3, #64	@ 0x40
 800a338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a33c:	2000      	movs	r0, #0
 800a33e:	6031      	str	r1, [r6, #0]
 800a340:	602b      	str	r3, [r5, #0]
 800a342:	b016      	add	sp, #88	@ 0x58
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	466a      	mov	r2, sp
 800a348:	f000 f848 	bl	800a3dc <_fstat_r>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dbec      	blt.n	800a32a <__swhatbuf_r+0x12>
 800a350:	9901      	ldr	r1, [sp, #4]
 800a352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a35a:	4259      	negs	r1, r3
 800a35c:	4159      	adcs	r1, r3
 800a35e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a362:	e7eb      	b.n	800a33c <__swhatbuf_r+0x24>

0800a364 <__smakebuf_r>:
 800a364:	898b      	ldrh	r3, [r1, #12]
 800a366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a368:	079d      	lsls	r5, r3, #30
 800a36a:	4606      	mov	r6, r0
 800a36c:	460c      	mov	r4, r1
 800a36e:	d507      	bpl.n	800a380 <__smakebuf_r+0x1c>
 800a370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	6123      	str	r3, [r4, #16]
 800a378:	2301      	movs	r3, #1
 800a37a:	6163      	str	r3, [r4, #20]
 800a37c:	b003      	add	sp, #12
 800a37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a380:	ab01      	add	r3, sp, #4
 800a382:	466a      	mov	r2, sp
 800a384:	f7ff ffc8 	bl	800a318 <__swhatbuf_r>
 800a388:	9f00      	ldr	r7, [sp, #0]
 800a38a:	4605      	mov	r5, r0
 800a38c:	4639      	mov	r1, r7
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff fbba 	bl	8009b08 <_malloc_r>
 800a394:	b948      	cbnz	r0, 800a3aa <__smakebuf_r+0x46>
 800a396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39a:	059a      	lsls	r2, r3, #22
 800a39c:	d4ee      	bmi.n	800a37c <__smakebuf_r+0x18>
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	f043 0302 	orr.w	r3, r3, #2
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	e7e2      	b.n	800a370 <__smakebuf_r+0xc>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	6020      	str	r0, [r4, #0]
 800a3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3ba:	b15b      	cbz	r3, 800a3d4 <__smakebuf_r+0x70>
 800a3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 f81d 	bl	800a400 <_isatty_r>
 800a3c6:	b128      	cbz	r0, 800a3d4 <__smakebuf_r+0x70>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	431d      	orrs	r5, r3
 800a3d8:	81a5      	strh	r5, [r4, #12]
 800a3da:	e7cf      	b.n	800a37c <__smakebuf_r+0x18>

0800a3dc <_fstat_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	@ (800a3fc <_fstat_r+0x20>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	f7f6 fca6 	bl	8000d3a <_fstat>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d102      	bne.n	800a3f8 <_fstat_r+0x1c>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b103      	cbz	r3, 800a3f8 <_fstat_r+0x1c>
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20003cb4 	.word	0x20003cb4

0800a400 <_isatty_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	@ (800a41c <_isatty_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f6 fc9a 	bl	8000d44 <_isatty>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_isatty_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_isatty_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20003cb4 	.word	0x20003cb4

0800a420 <_sbrk_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	@ (800a43c <_sbrk_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f6 fc8e 	bl	8000d4c <_sbrk>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_sbrk_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_sbrk_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20003cb4 	.word	0x20003cb4

0800a440 <_init>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	bf00      	nop
 800a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a446:	bc08      	pop	{r3}
 800a448:	469e      	mov	lr, r3
 800a44a:	4770      	bx	lr

0800a44c <_fini>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	bf00      	nop
 800a450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a452:	bc08      	pop	{r3}
 800a454:	469e      	mov	lr, r3
 800a456:	4770      	bx	lr
