
blackpill_blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f30  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080010c8  080010c8  000020c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010d8  080010d8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080010d8  080010d8  000020d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010e0  080010e0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010e0  080010e0  000020e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010e4  080010e4  000020e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080010e8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080010f4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080010f4  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ba4  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f9d  00000000  00000000  00006be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00007b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c8  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014393  00000000  00000000  00008218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e63  00000000  00000000  0001c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f46c  00000000  00000000  0002140e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a087a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000868  00000000  00000000  000a08c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000cdc  00000000  00000000  000a1128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a1e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010b0 	.word	0x080010b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080010b0 	.word	0x080010b0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	b089      	sub	sp, #36	@ 0x24
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004cc:	2400      	movs	r4, #0
 80004ce:	9403      	str	r4, [sp, #12]
 80004d0:	9404      	str	r4, [sp, #16]
 80004d2:	9405      	str	r4, [sp, #20]
 80004d4:	9406      	str	r4, [sp, #24]
 80004d6:	9407      	str	r4, [sp, #28]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	9400      	str	r4, [sp, #0]
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <MX_GPIO_Init+0x78>)
 80004dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004de:	f042 0204 	orr.w	r2, r2, #4
 80004e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80004e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004e6:	f002 0204 	and.w	r2, r2, #4
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	9401      	str	r4, [sp, #4]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80004f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004fa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80004fe:	9201      	str	r2, [sp, #4]
 8000500:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	9402      	str	r4, [sp, #8]
 8000504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000506:	f042 0201 	orr.w	r2, r2, #1
 800050a:	631a      	str	r2, [r3, #48]	@ 0x30
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	9b02      	ldr	r3, [sp, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000516:	4d0b      	ldr	r5, [pc, #44]	@ (8000544 <MX_GPIO_Init+0x7c>)
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051e:	4628      	mov	r0, r5
 8000520:	f000 fa8a 	bl	8000a38 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800052a:	2311      	movs	r3, #17
 800052c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000532:	a903      	add	r1, sp, #12
 8000534:	4628      	mov	r0, r5
 8000536:	f000 f99b 	bl	8000870 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800053a:	b009      	add	sp, #36	@ 0x24
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800
 8000544:	40020800 	.word	0x40020800

08000548 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800054a:	e7fe      	b.n	800054a <Error_Handler+0x2>

0800054c <SystemClock_Config>:
{
 800054c:	b500      	push	{lr}
 800054e:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000550:	2230      	movs	r2, #48	@ 0x30
 8000552:	2100      	movs	r1, #0
 8000554:	a808      	add	r0, sp, #32
 8000556:	f000 fd7f 	bl	8001058 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800055a:	2300      	movs	r3, #0
 800055c:	9303      	str	r3, [sp, #12]
 800055e:	9304      	str	r3, [sp, #16]
 8000560:	9305      	str	r3, [sp, #20]
 8000562:	9306      	str	r3, [sp, #24]
 8000564:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	4a1f      	ldr	r2, [pc, #124]	@ (80005e8 <SystemClock_Config+0x9c>)
 800056a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800056c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000570:	6411      	str	r1, [r2, #64]	@ 0x40
 8000572:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000574:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000578:	9201      	str	r2, [sp, #4]
 800057a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <SystemClock_Config+0xa0>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800058e:	9302      	str	r3, [sp, #8]
 8000590:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800059a:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005a4:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 80005a6:	220c      	movs	r2, #12
 80005a8:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 80005aa:	2260      	movs	r2, #96	@ 0x60
 80005ac:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	a808      	add	r0, sp, #32
 80005b6:	f000 fa4f 	bl	8000a58 <HAL_RCC_OscConfig>
 80005ba:	b988      	cbnz	r0, 80005e0 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005cc:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d0:	2103      	movs	r1, #3
 80005d2:	a803      	add	r0, sp, #12
 80005d4:	f000 fc90 	bl	8000ef8 <HAL_RCC_ClockConfig>
 80005d8:	b920      	cbnz	r0, 80005e4 <SystemClock_Config+0x98>
}
 80005da:	b015      	add	sp, #84	@ 0x54
 80005dc:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80005e0:	f7ff ffb2 	bl	8000548 <Error_Handler>
        Error_Handler();
 80005e4:	f7ff ffb0 	bl	8000548 <Error_Handler>
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <main>:
{
 80005f0:	b508      	push	{r3, lr}
    HAL_Init();
 80005f2:	f000 f893 	bl	800071c <HAL_Init>
    SystemClock_Config();
 80005f6:	f7ff ffa9 	bl	800054c <SystemClock_Config>
    MX_GPIO_Init();
 80005fa:	f7ff ff65 	bl	80004c8 <MX_GPIO_Init>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	4804      	ldr	r0, [pc, #16]	@ (8000614 <main+0x24>)
 8000604:	f000 fa1e 	bl	8000a44 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800060c:	f000 f8b2 	bl	8000774 <HAL_Delay>
    while (1)
 8000610:	e7f5      	b.n	80005fe <main+0xe>
 8000612:	bf00      	nop
 8000614:	40020800 	.word	0x40020800

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	2100      	movs	r1, #0
 800061c:	9100      	str	r1, [sp, #0]
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <HAL_MspInit+0x34>)
 8000620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000622:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000626:	645a      	str	r2, [r3, #68]	@ 0x44
 8000628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800062a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	9101      	str	r1, [sp, #4]
 8000634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000636:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800063a:	641a      	str	r2, [r3, #64]	@ 0x40
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	b002      	add	sp, #8
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler>

08000652 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler>

08000654 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler>

08000656 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler>

08000658 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler>

0800065a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	4770      	bx	lr

0800065c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f875 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bd08      	pop	{r3, pc}

08000668 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <SystemInit+0x10>)
 800066a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800066e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000672:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000680:	f7ff fff2 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	@ (80006bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	@ (80006c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f000 fcdd 	bl	8001068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ae:	f7ff ff9f 	bl	80005f0 <main>
  bx  lr    
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c0:	080010e8 	.word	0x080010e8
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c8:	2000002c 	.word	0x2000002c

080006cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <HAL_InitTick+0x40>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000714 <HAL_InitTick+0x44>)
 80006e2:	6810      	ldr	r0, [r2, #0]
 80006e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80006e8:	f000 f8ae 	bl	8000848 <HAL_SYSTICK_Config>
 80006ec:	b968      	cbnz	r0, 800070a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	2c0f      	cmp	r4, #15
 80006f0:	d901      	bls.n	80006f6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006f2:	2001      	movs	r0, #1
 80006f4:	e00a      	b.n	800070c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f6:	2200      	movs	r2, #0
 80006f8:	4621      	mov	r1, r4
 80006fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006fe:	f000 f893 	bl	8000828 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <HAL_InitTick+0x48>)
 8000704:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000706:	2000      	movs	r0, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800070a:	2001      	movs	r0, #1
}
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop
 8000710:	20000004 	.word	0x20000004
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008

0800071c <HAL_Init>:
{
 800071c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <HAL_Init+0x30>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000726:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800072e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000736:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f863 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800073e:	200f      	movs	r0, #15
 8000740:	f7ff ffc6 	bl	80006d0 <HAL_InitTick>
  HAL_MspInit();
 8000744:	f7ff ff68 	bl	8000618 <HAL_MspInit>
}
 8000748:	2000      	movs	r0, #0
 800074a:	bd08      	pop	{r3, pc}
 800074c:	40023c00 	.word	0x40023c00

08000750 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000750:	4a03      	ldr	r2, [pc, #12]	@ (8000760 <HAL_IncTick+0x10>)
 8000752:	6811      	ldr	r1, [r2, #0]
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <HAL_IncTick+0x14>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	440b      	add	r3, r1
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000768:	4b01      	ldr	r3, [pc, #4]	@ (8000770 <HAL_GetTick+0x8>)
 800076a:	6818      	ldr	r0, [r3, #0]
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000028 	.word	0x20000028

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b538      	push	{r3, r4, r5, lr}
 8000776:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff fff6 	bl	8000768 <HAL_GetTick>
 800077c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000782:	d002      	beq.n	800078a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <HAL_Delay+0x24>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800078a:	f7ff ffed 	bl	8000768 <HAL_GetTick>
 800078e:	1b40      	subs	r0, r0, r5
 8000790:	42a0      	cmp	r0, r4
 8000792:	d3fa      	bcc.n	800078a <HAL_Delay+0x16>
  {
  }
}
 8000794:	bd38      	pop	{r3, r4, r5, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800079c:	2800      	cmp	r0, #0
 800079e:	db08      	blt.n	80007b2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	0109      	lsls	r1, r1, #4
 80007a2:	b2c9      	uxtb	r1, r1
 80007a4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80007a8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80007ac:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80007b0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	f000 000f 	and.w	r0, r0, #15
 80007b6:	0109      	lsls	r1, r1, #4
 80007b8:	b2c9      	uxtb	r1, r1
 80007ba:	4b01      	ldr	r3, [pc, #4]	@ (80007c0 <__NVIC_SetPriority+0x24>)
 80007bc:	5419      	strb	r1, [r3, r0]
  }
}
 80007be:	4770      	bx	lr
 80007c0:	e000ed14 	.word	0xe000ed14

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ca:	f1c0 0c07 	rsb	ip, r0, #7
 80007ce:	f1bc 0f04 	cmp.w	ip, #4
 80007d2:	bf28      	it	cs
 80007d4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d8:	1d03      	adds	r3, r0, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d90f      	bls.n	80007fe <NVIC_EncodePriority+0x3a>
 80007de:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80007e4:	fa0e f00c 	lsl.w	r0, lr, ip
 80007e8:	ea21 0100 	bic.w	r1, r1, r0
 80007ec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ee:	fa0e fe03 	lsl.w	lr, lr, r3
 80007f2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80007f6:	ea41 0002 	orr.w	r0, r1, r2
 80007fa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	2300      	movs	r3, #0
 8000800:	e7ee      	b.n	80007e0 <NVIC_EncodePriority+0x1c>
	...

08000804 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000806:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000808:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	0200      	lsls	r0, r0, #8
 8000812:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000816:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000820:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000828:	b510      	push	{r4, lr}
 800082a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_NVIC_SetPriority+0x1c>)
 800082e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000830:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000834:	f7ff ffc6 	bl	80007c4 <NVIC_EncodePriority>
 8000838:	4601      	mov	r1, r0
 800083a:	4620      	mov	r0, r4
 800083c:	f7ff ffae 	bl	800079c <__NVIC_SetPriority>
}
 8000840:	bd10      	pop	{r4, pc}
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	3801      	subs	r0, #1
 800084a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800084e:	d20b      	bcs.n	8000868 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000850:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000854:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	4a05      	ldr	r2, [pc, #20]	@ (800086c <HAL_SYSTICK_Config+0x24>)
 8000858:	21f0      	movs	r1, #240	@ 0xf0
 800085a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085e:	2000      	movs	r0, #0
 8000860:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	2207      	movs	r2, #7
 8000864:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000866:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000868:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000870:	2300      	movs	r3, #0
 8000872:	2b0f      	cmp	r3, #15
 8000874:	f200 80d7 	bhi.w	8000a26 <HAL_GPIO_Init+0x1b6>
{
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	e065      	b.n	800094a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000880:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000884:	2403      	movs	r4, #3
 8000886:	fa04 f40e 	lsl.w	r4, r4, lr
 800088a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800088e:	68cc      	ldr	r4, [r1, #12]
 8000890:	fa04 f40e 	lsl.w	r4, r4, lr
 8000894:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000896:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000898:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800089e:	684a      	ldr	r2, [r1, #4]
 80008a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80008a4:	409a      	lsls	r2, r3
 80008a6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80008a8:	6042      	str	r2, [r0, #4]
 80008aa:	e05c      	b.n	8000966 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ac:	08dc      	lsrs	r4, r3, #3
 80008ae:	3408      	adds	r4, #8
 80008b0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b4:	f003 0507 	and.w	r5, r3, #7
 80008b8:	00ad      	lsls	r5, r5, #2
 80008ba:	f04f 0e0f 	mov.w	lr, #15
 80008be:	fa0e fe05 	lsl.w	lr, lr, r5
 80008c2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c6:	690a      	ldr	r2, [r1, #16]
 80008c8:	40aa      	lsls	r2, r5
 80008ca:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80008ce:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80008d2:	e05c      	b.n	800098e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d4:	2204      	movs	r2, #4
 80008d6:	e000      	b.n	80008da <HAL_GPIO_Init+0x6a>
 80008d8:	2200      	movs	r2, #0
 80008da:	fa02 f20e 	lsl.w	r2, r2, lr
 80008de:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008e0:	3402      	adds	r4, #2
 80008e2:	4d51      	ldr	r5, [pc, #324]	@ (8000a28 <HAL_GPIO_Init+0x1b8>)
 80008e4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008e8:	4a50      	ldr	r2, [pc, #320]	@ (8000a2c <HAL_GPIO_Init+0x1bc>)
 80008ea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80008ec:	ea6f 020c 	mvn.w	r2, ip
 80008f0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80008f4:	684e      	ldr	r6, [r1, #4]
 80008f6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80008fa:	d001      	beq.n	8000900 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80008fc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000900:	4c4a      	ldr	r4, [pc, #296]	@ (8000a2c <HAL_GPIO_Init+0x1bc>)
 8000902:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000904:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000906:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800090a:	684e      	ldr	r6, [r1, #4]
 800090c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000910:	d001      	beq.n	8000916 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000912:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000916:	4c45      	ldr	r4, [pc, #276]	@ (8000a2c <HAL_GPIO_Init+0x1bc>)
 8000918:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800091a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800091c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000920:	684e      	ldr	r6, [r1, #4]
 8000922:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000926:	d001      	beq.n	800092c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000928:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800092c:	4c3f      	ldr	r4, [pc, #252]	@ (8000a2c <HAL_GPIO_Init+0x1bc>)
 800092e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000930:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000932:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000934:	684d      	ldr	r5, [r1, #4]
 8000936:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800093a:	d001      	beq.n	8000940 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800093c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000940:	4c3a      	ldr	r4, [pc, #232]	@ (8000a2c <HAL_GPIO_Init+0x1bc>)
 8000942:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000944:	3301      	adds	r3, #1
 8000946:	2b0f      	cmp	r3, #15
 8000948:	d86b      	bhi.n	8000a22 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 800094a:	2201      	movs	r2, #1
 800094c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094e:	680c      	ldr	r4, [r1, #0]
 8000950:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000954:	ea32 0404 	bics.w	r4, r2, r4
 8000958:	d1f4      	bne.n	8000944 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800095a:	684c      	ldr	r4, [r1, #4]
 800095c:	f004 0403 	and.w	r4, r4, #3
 8000960:	3c01      	subs	r4, #1
 8000962:	2c01      	cmp	r4, #1
 8000964:	d98b      	bls.n	800087e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000966:	684a      	ldr	r2, [r1, #4]
 8000968:	f002 0203 	and.w	r2, r2, #3
 800096c:	2a03      	cmp	r2, #3
 800096e:	d009      	beq.n	8000984 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000970:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000972:	005d      	lsls	r5, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	40aa      	lsls	r2, r5
 8000978:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097c:	688a      	ldr	r2, [r1, #8]
 800097e:	40aa      	lsls	r2, r5
 8000980:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000982:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000984:	684a      	ldr	r2, [r1, #4]
 8000986:	f002 0203 	and.w	r2, r2, #3
 800098a:	2a02      	cmp	r2, #2
 800098c:	d08e      	beq.n	80008ac <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800098e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000990:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f20e 	lsl.w	r2, r2, lr
 800099a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800099e:	684a      	ldr	r2, [r1, #4]
 80009a0:	f002 0203 	and.w	r2, r2, #3
 80009a4:	fa02 f20e 	lsl.w	r2, r2, lr
 80009a8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80009aa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009ac:	684a      	ldr	r2, [r1, #4]
 80009ae:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80009b2:	d0c7      	beq.n	8000944 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b4:	2200      	movs	r2, #0
 80009b6:	9201      	str	r2, [sp, #4]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a30 <HAL_GPIO_Init+0x1c0>)
 80009ba:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80009bc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80009c0:	6454      	str	r4, [r2, #68]	@ 0x44
 80009c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80009c4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80009c8:	9201      	str	r2, [sp, #4]
 80009ca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80009cc:	089c      	lsrs	r4, r3, #2
 80009ce:	1ca5      	adds	r5, r4, #2
 80009d0:	4a15      	ldr	r2, [pc, #84]	@ (8000a28 <HAL_GPIO_Init+0x1b8>)
 80009d2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d6:	f003 0e03 	and.w	lr, r3, #3
 80009da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f20e 	lsl.w	r2, r2, lr
 80009e4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e8:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <HAL_GPIO_Init+0x1c4>)
 80009ea:	4290      	cmp	r0, r2
 80009ec:	f43f af74 	beq.w	80008d8 <HAL_GPIO_Init+0x68>
 80009f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80009f4:	4290      	cmp	r0, r2
 80009f6:	d00e      	beq.n	8000a16 <HAL_GPIO_Init+0x1a6>
 80009f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80009fc:	4290      	cmp	r0, r2
 80009fe:	d00c      	beq.n	8000a1a <HAL_GPIO_Init+0x1aa>
 8000a00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a04:	4290      	cmp	r0, r2
 8000a06:	d00a      	beq.n	8000a1e <HAL_GPIO_Init+0x1ae>
 8000a08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a0c:	4290      	cmp	r0, r2
 8000a0e:	f43f af61 	beq.w	80008d4 <HAL_GPIO_Init+0x64>
 8000a12:	2207      	movs	r2, #7
 8000a14:	e761      	b.n	80008da <HAL_GPIO_Init+0x6a>
 8000a16:	2201      	movs	r2, #1
 8000a18:	e75f      	b.n	80008da <HAL_GPIO_Init+0x6a>
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	e75d      	b.n	80008da <HAL_GPIO_Init+0x6a>
 8000a1e:	2203      	movs	r2, #3
 8000a20:	e75b      	b.n	80008da <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000a22:	b002      	add	sp, #8
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	4770      	bx	lr
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40013c00 	.word	0x40013c00
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a38:	b10a      	cbz	r2, 8000a3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a3a:	6181      	str	r1, [r0, #24]
 8000a3c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a3e:	0409      	lsls	r1, r1, #16
 8000a40:	6181      	str	r1, [r0, #24]
  }
}
 8000a42:	4770      	bx	lr

08000a44 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a44:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a46:	ea01 0203 	and.w	r2, r1, r3
 8000a4a:	ea21 0103 	bic.w	r1, r1, r3
 8000a4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a52:	6181      	str	r1, [r0, #24]
}
 8000a54:	4770      	bx	lr
	...

08000a58 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	f000 81e0 	beq.w	8000e1e <HAL_RCC_OscConfig+0x3c6>
{
 8000a5e:	b570      	push	{r4, r5, r6, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a64:	6803      	ldr	r3, [r0, #0]
 8000a66:	f013 0f01 	tst.w	r3, #1
 8000a6a:	d03b      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000a6c:	4b9f      	ldr	r3, [pc, #636]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d02c      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a78:	4b9c      	ldr	r3, [pc, #624]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	d021      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a84:	6863      	ldr	r3, [r4, #4]
 8000a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a8a:	d04f      	beq.n	8000b2c <HAL_RCC_OscConfig+0xd4>
 8000a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000a90:	d052      	beq.n	8000b38 <HAL_RCC_OscConfig+0xe0>
 8000a92:	4b96      	ldr	r3, [pc, #600]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000aa2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d050      	beq.n	8000b4c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aaa:	f7ff fe5d 	bl	8000768 <HAL_GetTick>
 8000aae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab0:	4b8e      	ldr	r3, [pc, #568]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ab8:	d114      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aba:	f7ff fe55 	bl	8000768 <HAL_GetTick>
 8000abe:	1b40      	subs	r0, r0, r5
 8000ac0:	2864      	cmp	r0, #100	@ 0x64
 8000ac2:	d9f5      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	e1b1      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ac8:	4b88      	ldr	r3, [pc, #544]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000ad0:	d0d8      	beq.n	8000a84 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad2:	4b86      	ldr	r3, [pc, #536]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ada:	d003      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x8c>
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 819f 	beq.w	8000e22 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	f013 0f02 	tst.w	r3, #2
 8000aea:	d054      	beq.n	8000b96 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000aec:	4b7f      	ldr	r3, [pc, #508]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f013 0f0c 	tst.w	r3, #12
 8000af4:	d03e      	beq.n	8000b74 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000af6:	4b7d      	ldr	r3, [pc, #500]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000afe:	2b08      	cmp	r3, #8
 8000b00:	d033      	beq.n	8000b6a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000b02:	68e3      	ldr	r3, [r4, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d068      	beq.n	8000bda <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b08:	4b79      	ldr	r3, [pc, #484]	@ (8000cf0 <HAL_RCC_OscConfig+0x298>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fe2b 	bl	8000768 <HAL_GetTick>
 8000b12:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b14:	4b75      	ldr	r3, [pc, #468]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f013 0f02 	tst.w	r3, #2
 8000b1c:	d154      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b1e:	f7ff fe23 	bl	8000768 <HAL_GetTick>
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	2802      	cmp	r0, #2
 8000b26:	d9f5      	bls.n	8000b14 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e17f      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2c:	4a6f      	ldr	r2, [pc, #444]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e7b5      	b.n	8000aa4 <HAL_RCC_OscConfig+0x4c>
 8000b38:	4b6c      	ldr	r3, [pc, #432]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	e7ab      	b.n	8000aa4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000b4c:	f7ff fe0c 	bl	8000768 <HAL_GetTick>
 8000b50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b52:	4b66      	ldr	r3, [pc, #408]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b5a:	d0c3      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fe04 	bl	8000768 <HAL_GetTick>
 8000b60:	1b40      	subs	r0, r0, r5
 8000b62:	2864      	cmp	r0, #100	@ 0x64
 8000b64:	d9f5      	bls.n	8000b52 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	e160      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b6a:	4b60      	ldr	r3, [pc, #384]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000b72:	d1c6      	bne.n	8000b02 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b74:	4b5d      	ldr	r3, [pc, #372]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f013 0f02 	tst.w	r3, #2
 8000b7c:	d003      	beq.n	8000b86 <HAL_RCC_OscConfig+0x12e>
 8000b7e:	68e3      	ldr	r3, [r4, #12]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 8150 	bne.w	8000e26 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b86:	4a59      	ldr	r2, [pc, #356]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000b8e:	6921      	ldr	r1, [r4, #16]
 8000b90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b94:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	f013 0f08 	tst.w	r3, #8
 8000b9c:	d042      	beq.n	8000c24 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000b9e:	6963      	ldr	r3, [r4, #20]
 8000ba0:	b36b      	cbz	r3, 8000bfe <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ba2:	4b53      	ldr	r3, [pc, #332]	@ (8000cf0 <HAL_RCC_OscConfig+0x298>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000baa:	f7ff fddd 	bl	8000768 <HAL_GetTick>
 8000bae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000bb4:	f013 0f02 	tst.w	r3, #2
 8000bb8:	d134      	bne.n	8000c24 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bba:	f7ff fdd5 	bl	8000768 <HAL_GetTick>
 8000bbe:	1b40      	subs	r0, r0, r5
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9f5      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	e131      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc8:	4a48      	ldr	r2, [pc, #288]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000bd0:	6921      	ldr	r1, [r4, #16]
 8000bd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e7dd      	b.n	8000b96 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000bda:	4b45      	ldr	r3, [pc, #276]	@ (8000cf0 <HAL_RCC_OscConfig+0x298>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000be0:	f7ff fdc2 	bl	8000768 <HAL_GetTick>
 8000be4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be6:	4b41      	ldr	r3, [pc, #260]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f013 0f02 	tst.w	r3, #2
 8000bee:	d0d2      	beq.n	8000b96 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf0:	f7ff fdba 	bl	8000768 <HAL_GetTick>
 8000bf4:	1b40      	subs	r0, r0, r5
 8000bf6:	2802      	cmp	r0, #2
 8000bf8:	d9f5      	bls.n	8000be6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	e116      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <HAL_RCC_OscConfig+0x298>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c06:	f7ff fdaf 	bl	8000768 <HAL_GetTick>
 8000c0a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c0c:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c10:	f013 0f02 	tst.w	r3, #2
 8000c14:	d006      	beq.n	8000c24 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c16:	f7ff fda7 	bl	8000768 <HAL_GetTick>
 8000c1a:	1b40      	subs	r0, r0, r5
 8000c1c:	2802      	cmp	r0, #2
 8000c1e:	d9f5      	bls.n	8000c0c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000c20:	2003      	movs	r0, #3
 8000c22:	e103      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	f013 0f04 	tst.w	r3, #4
 8000c2a:	d077      	beq.n	8000d1c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000c34:	d133      	bne.n	8000c9e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c3e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c4e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <HAL_RCC_OscConfig+0x29c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000c58:	d023      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5a:	68a3      	ldr	r3, [r4, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d034      	beq.n	8000cca <HAL_RCC_OscConfig+0x272>
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d038      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x27e>
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000c66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000c68:	f022 0201 	bic.w	r2, r2, #1
 8000c6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000c70:	f022 0204 	bic.w	r2, r2, #4
 8000c74:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c76:	68a3      	ldr	r3, [r4, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d03d      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c7c:	f7ff fd74 	bl	8000768 <HAL_GetTick>
 8000c80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c86:	f013 0f02 	tst.w	r3, #2
 8000c8a:	d146      	bne.n	8000d1a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fd6c 	bl	8000768 <HAL_GetTick>
 8000c90:	1b80      	subs	r0, r0, r6
 8000c92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c96:	4298      	cmp	r0, r3
 8000c98:	d9f3      	bls.n	8000c82 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	e0c6      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	e7d6      	b.n	8000c50 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca2:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <HAL_RCC_OscConfig+0x29c>)
 8000ca4:	6813      	ldr	r3, [r2, #0]
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000caa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000cac:	f7ff fd5c 	bl	8000768 <HAL_GetTick>
 8000cb0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <HAL_RCC_OscConfig+0x29c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000cba:	d1ce      	bne.n	8000c5a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cbc:	f7ff fd54 	bl	8000768 <HAL_GetTick>
 8000cc0:	1b80      	subs	r0, r0, r6
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	d9f5      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	e0b0      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cca:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000ccc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000cd4:	e7cf      	b.n	8000c76 <HAL_RCC_OscConfig+0x21e>
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_RCC_OscConfig+0x294>)
 8000cd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000cda:	f042 0204 	orr.w	r2, r2, #4
 8000cde:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ce8:	e7c5      	b.n	8000c76 <HAL_RCC_OscConfig+0x21e>
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	42470000 	.word	0x42470000
 8000cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf8:	f7ff fd36 	bl	8000768 <HAL_GetTick>
 8000cfc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cfe:	4b52      	ldr	r3, [pc, #328]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d02:	f013 0f02 	tst.w	r3, #2
 8000d06:	d008      	beq.n	8000d1a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d08:	f7ff fd2e 	bl	8000768 <HAL_GetTick>
 8000d0c:	1b80      	subs	r0, r0, r6
 8000d0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d12:	4298      	cmp	r0, r3
 8000d14:	d9f3      	bls.n	8000cfe <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000d16:	2003      	movs	r0, #3
 8000d18:	e088      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000d1a:	b9ed      	cbnz	r5, 8000d58 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d1c:	69a3      	ldr	r3, [r4, #24]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8083 	beq.w	8000e2a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d24:	4a48      	ldr	r2, [pc, #288]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000d26:	6892      	ldr	r2, [r2, #8]
 8000d28:	f002 020c 	and.w	r2, r2, #12
 8000d2c:	2a08      	cmp	r2, #8
 8000d2e:	d051      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d017      	beq.n	8000d64 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d34:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <HAL_RCC_OscConfig+0x3f4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fd15 	bl	8000768 <HAL_GetTick>
 8000d3e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d40:	4b41      	ldr	r3, [pc, #260]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d48:	d042      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d4a:	f7ff fd0d 	bl	8000768 <HAL_GetTick>
 8000d4e:	1b00      	subs	r0, r0, r4
 8000d50:	2802      	cmp	r0, #2
 8000d52:	d9f5      	bls.n	8000d40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000d54:	2003      	movs	r0, #3
 8000d56:	e069      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d58:	4a3b      	ldr	r2, [pc, #236]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000d5a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	e7db      	b.n	8000d1c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000d64:	4b39      	ldr	r3, [pc, #228]	@ (8000e4c <HAL_RCC_OscConfig+0x3f4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fcfd 	bl	8000768 <HAL_GetTick>
 8000d6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d78:	d006      	beq.n	8000d88 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d7a:	f7ff fcf5 	bl	8000768 <HAL_GetTick>
 8000d7e:	1b40      	subs	r0, r0, r5
 8000d80:	2802      	cmp	r0, #2
 8000d82:	d9f5      	bls.n	8000d70 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000d84:	2003      	movs	r0, #3
 8000d86:	e051      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d88:	69e3      	ldr	r3, [r4, #28]
 8000d8a:	6a22      	ldr	r2, [r4, #32]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000d90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d94:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000d96:	0852      	lsrs	r2, r2, #1
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000da0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000da4:	4a28      	ldr	r2, [pc, #160]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000da6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000da8:	4b28      	ldr	r3, [pc, #160]	@ (8000e4c <HAL_RCC_OscConfig+0x3f4>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000dae:	f7ff fcdb 	bl	8000768 <HAL_GetTick>
 8000db2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000dbc:	d106      	bne.n	8000dcc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dbe:	f7ff fcd3 	bl	8000768 <HAL_GetTick>
 8000dc2:	1b00      	subs	r0, r0, r4
 8000dc4:	2802      	cmp	r0, #2
 8000dc6:	d9f5      	bls.n	8000db4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000dc8:	2003      	movs	r0, #3
 8000dca:	e02f      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e02d      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e02b      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d02b      	beq.n	8000e30 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_RCC_OscConfig+0x3f0>)
 8000dda:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ddc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8000de0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d126      	bne.n	8000e34 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000dea:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d123      	bne.n	8000e38 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000df0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000df2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000df6:	401a      	ands	r2, r3
 8000df8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000dfc:	d11e      	bne.n	8000e3c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000dfe:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000e02:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e04:	0852      	lsrs	r2, r2, #1
 8000e06:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e08:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000e0c:	d118      	bne.n	8000e40 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e0e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000e12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e14:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000e18:	d114      	bne.n	8000e44 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e006      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
}
 8000e20:	4770      	bx	lr
        return HAL_ERROR;
 8000e22:	2001      	movs	r0, #1
 8000e24:	e002      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8000e26:	2001      	movs	r0, #1
 8000e28:	e000      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8000e2a:	2000      	movs	r0, #0
}
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
 8000e32:	e7fb      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7f9      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
 8000e38:	2001      	movs	r0, #1
 8000e3a:	e7f7      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	e7f5      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
 8000e40:	2001      	movs	r0, #1
 8000e42:	e7f3      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
 8000e44:	2001      	movs	r0, #1
 8000e46:	e7f1      	b.n	8000e2c <HAL_RCC_OscConfig+0x3d4>
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000

08000e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e50:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d041      	beq.n	8000ee2 <HAL_RCC_GetSysClockFreq+0x92>
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d141      	bne.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e62:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e70:	d012      	beq.n	8000e98 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e72:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e74:	6859      	ldr	r1, [r3, #4]
 8000e76:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e7a:	481d      	ldr	r0, [pc, #116]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	fba1 0100 	umull	r0, r1, r1, r0
 8000e82:	f7ff f9a9 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e8e:	3301      	adds	r3, #1
 8000e90:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000e92:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000e96:	e027      	b.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000ea0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000ea4:	ebbc 0c00 	subs.w	ip, ip, r0
 8000ea8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000eac:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000eb0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000eb4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000eb8:	ebb1 010c 	subs.w	r1, r1, ip
 8000ebc:	eb63 030e 	sbc.w	r3, r3, lr
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000ec6:	00c9      	lsls	r1, r1, #3
 8000ec8:	eb11 0c00 	adds.w	ip, r1, r0
 8000ecc:	f143 0300 	adc.w	r3, r3, #0
 8000ed0:	0299      	lsls	r1, r3, #10
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000ed8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000edc:	f7ff f97c 	bl	80001d8 <__aeabi_uldivmod>
 8000ee0:	e7d1      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8000ee2:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ee4:	e000      	b.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee6:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ee8:	bd08      	pop	{r3, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	017d7840 	.word	0x017d7840
 8000ef4:	00f42400 	.word	0x00f42400

08000ef8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	f000 809b 	beq.w	8001034 <HAL_RCC_ClockConfig+0x13c>
{
 8000efe:	b570      	push	{r4, r5, r6, lr}
 8000f00:	460d      	mov	r5, r1
 8000f02:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f04:	4b4f      	ldr	r3, [pc, #316]	@ (8001044 <HAL_RCC_ClockConfig+0x14c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d208      	bcs.n	8000f22 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f10:	b2cb      	uxtb	r3, r1
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <HAL_RCC_ClockConfig+0x14c>)
 8000f14:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f16:	6813      	ldr	r3, [r2, #0]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	f040 808b 	bne.w	8001038 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	f013 0f02 	tst.w	r3, #2
 8000f28:	d017      	beq.n	8000f5a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f2a:	f013 0f04 	tst.w	r3, #4
 8000f2e:	d004      	beq.n	8000f3a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f30:	4a45      	ldr	r2, [pc, #276]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000f32:	6893      	ldr	r3, [r2, #8]
 8000f34:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f38:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	f013 0f08 	tst.w	r3, #8
 8000f40:	d004      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000f44:	6893      	ldr	r3, [r2, #8]
 8000f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f4a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000f4e:	6893      	ldr	r3, [r2, #8]
 8000f50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f54:	68a1      	ldr	r1, [r4, #8]
 8000f56:	430b      	orrs	r3, r1
 8000f58:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f013 0f01 	tst.w	r3, #1
 8000f60:	d032      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f62:	6863      	ldr	r3, [r4, #4]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d021      	beq.n	8000fac <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f68:	1e9a      	subs	r2, r3, #2
 8000f6a:	2a01      	cmp	r2, #1
 8000f6c:	d925      	bls.n	8000fba <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6e:	4a36      	ldr	r2, [pc, #216]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	f012 0f02 	tst.w	r2, #2
 8000f76:	d061      	beq.n	800103c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f78:	4933      	ldr	r1, [pc, #204]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000f7a:	688a      	ldr	r2, [r1, #8]
 8000f7c:	f022 0203 	bic.w	r2, r2, #3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000f84:	f7ff fbf0 	bl	8000768 <HAL_GetTick>
 8000f88:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	6862      	ldr	r2, [r4, #4]
 8000f94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f98:	d016      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9a:	f7ff fbe5 	bl	8000768 <HAL_GetTick>
 8000f9e:	1b80      	subs	r0, r0, r6
 8000fa0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fa4:	4298      	cmp	r0, r3
 8000fa6:	d9f0      	bls.n	8000f8a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000fa8:	2003      	movs	r0, #3
 8000faa:	e042      	b.n	8001032 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fac:	4a26      	ldr	r2, [pc, #152]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000fb4:	d1e0      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e03b      	b.n	8001032 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fba:	4a23      	ldr	r2, [pc, #140]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000fc2:	d1d9      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	e034      	b.n	8001032 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <HAL_RCC_ClockConfig+0x14c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	42ab      	cmp	r3, r5
 8000fd2:	d907      	bls.n	8000fe4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd4:	b2ea      	uxtb	r2, r5
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_RCC_ClockConfig+0x14c>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	42ab      	cmp	r3, r5
 8000fe2:	d12d      	bne.n	8001040 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	f013 0f04 	tst.w	r3, #4
 8000fea:	d006      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fec:	4a16      	ldr	r2, [pc, #88]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000ff4:	68e1      	ldr	r1, [r4, #12]
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f013 0f08 	tst.w	r3, #8
 8001000:	d007      	beq.n	8001012 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001002:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8001004:	6893      	ldr	r3, [r2, #8]
 8001006:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800100a:	6921      	ldr	r1, [r4, #16]
 800100c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001010:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001012:	f7ff ff1d 	bl	8000e50 <HAL_RCC_GetSysClockFreq>
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <HAL_RCC_ClockConfig+0x150>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800101e:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_RCC_ClockConfig+0x154>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	40d8      	lsrs	r0, r3
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_RCC_ClockConfig+0x158>)
 8001026:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_RCC_ClockConfig+0x15c>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f7ff fb50 	bl	80006d0 <HAL_InitTick>
  return HAL_OK;
 8001030:	2000      	movs	r0, #0
}
 8001032:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
}
 8001036:	4770      	bx	lr
      return HAL_ERROR;
 8001038:	2001      	movs	r0, #1
 800103a:	e7fa      	b.n	8001032 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800103c:	2001      	movs	r0, #1
 800103e:	e7f8      	b.n	8001032 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
 8001042:	e7f6      	b.n	8001032 <HAL_RCC_ClockConfig+0x13a>
 8001044:	40023c00 	.word	0x40023c00
 8001048:	40023800 	.word	0x40023800
 800104c:	080010c8 	.word	0x080010c8
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008

08001058 <memset>:
 8001058:	4402      	add	r2, r0
 800105a:	4603      	mov	r3, r0
 800105c:	4293      	cmp	r3, r2
 800105e:	d100      	bne.n	8001062 <memset+0xa>
 8001060:	4770      	bx	lr
 8001062:	f803 1b01 	strb.w	r1, [r3], #1
 8001066:	e7f9      	b.n	800105c <memset+0x4>

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4d0d      	ldr	r5, [pc, #52]	@ (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	@ (80010a4 <__libc_init_array+0x3c>)
 800106e:	1b64      	subs	r4, r4, r5
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2600      	movs	r6, #0
 8001074:	42a6      	cmp	r6, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4d0b      	ldr	r5, [pc, #44]	@ (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	@ (80010ac <__libc_init_array+0x44>)
 800107c:	f000 f818 	bl	80010b0 <_init>
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2600      	movs	r6, #0
 8001086:	42a6      	cmp	r6, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001090:	4798      	blx	r3
 8001092:	3601      	adds	r6, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f855 3b04 	ldr.w	r3, [r5], #4
 800109a:	4798      	blx	r3
 800109c:	3601      	adds	r6, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	080010e0 	.word	0x080010e0
 80010a4:	080010e0 	.word	0x080010e0
 80010a8:	080010e0 	.word	0x080010e0
 80010ac:	080010e4 	.word	0x080010e4

080010b0 <_init>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr

080010bc <_fini>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	bf00      	nop
 80010c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c2:	bc08      	pop	{r3}
 80010c4:	469e      	mov	lr, r3
 80010c6:	4770      	bx	lr
