
stm32world_uart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca0  08003ca0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ca8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          0000047c  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f0f  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c0  00000000  00000000  00015fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000088ea  00000000  00000000  00018067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d00  00000000  00000000  00020958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f2  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ff95  00000000  00000000  0002204a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001310a  00000000  00000000  00041fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c22ce  00000000  00000000  000550e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001173b7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002c30  00000000  00000000  001173fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0011a02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b90 	.word	0x08003b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003b90 	.word	0x08003b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000574:	2400      	movs	r4, #0
 8000576:	9405      	str	r4, [sp, #20]
 8000578:	9406      	str	r4, [sp, #24]
 800057a:	9407      	str	r4, [sp, #28]
 800057c:	9408      	str	r4, [sp, #32]
 800057e:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	9401      	str	r4, [sp, #4]
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f042 0204 	orr.w	r2, r2, #4
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f002 0204 	and.w	r2, r2, #4
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	9402      	str	r4, [sp, #8]
 8000598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005a6:	9202      	str	r2, [sp, #8]
 80005a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9403      	str	r4, [sp, #12]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f042 0201 	orr.w	r2, r2, #1
 80005b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f002 0201 	and.w	r2, r2, #1
 80005ba:	9203      	str	r2, [sp, #12]
 80005bc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	9404      	str	r4, [sp, #16]
 80005c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c2:	f042 0202 	orr.w	r2, r2, #2
 80005c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	9304      	str	r3, [sp, #16]
 80005d0:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005d2:	4d0b      	ldr	r5, [pc, #44]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	4628      	mov	r0, r5
 80005dc:	f000 ff8a 	bl	80014f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e6:	2311      	movs	r3, #17
 80005e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ee:	a905      	add	r1, sp, #20
 80005f0:	4628      	mov	r0, r5
 80005f2:	f000 fe89 	bl	8001308 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	b00b      	add	sp, #44	@ 0x2c
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020800 	.word	0x40020800

08000604 <MX_DMA_Init>:
{
 8000604:	b500      	push	{lr}
 8000606:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000608:	2100      	movs	r1, #0
 800060a:	9101      	str	r1, [sp, #4]
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_DMA_Init+0x30>)
 800060e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000610:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000614:	631a      	str	r2, [r3, #48]	@ 0x30
 8000616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000620:	460a      	mov	r2, r1
 8000622:	200d      	movs	r0, #13
 8000624:	f000 fbe2 	bl	8000dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000628:	200d      	movs	r0, #13
 800062a:	f000 fbef 	bl	8000e0c <HAL_NVIC_EnableIRQ>
}
 800062e:	b003      	add	sp, #12
 8000630:	f85d fb04 	ldr.w	pc, [sp], #4
 8000634:	40023800 	.word	0x40023800

08000638 <HAL_GetTick>:
    return uwTick;
 8000638:	4b01      	ldr	r3, [pc, #4]	@ (8000640 <HAL_GetTick+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000394 	.word	0x20000394

08000644 <_write>:
    if (fd == 1 || fd == 2) {
 8000644:	3801      	subs	r0, #1
 8000646:	2801      	cmp	r0, #1
 8000648:	d80a      	bhi.n	8000660 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800064a:	b510      	push	{r4, lr}
 800064c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000652:	b292      	uxth	r2, r2
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <_write+0x28>)
 8000656:	f001 fde2 	bl	800221e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800065a:	b920      	cbnz	r0, 8000666 <_write+0x22>
            return len;
 800065c:	4620      	mov	r0, r4
}
 800065e:	bd10      	pop	{r4, pc}
    return -1;
 8000660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000664:	4770      	bx	lr
            return -1;
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800066a:	e7f8      	b.n	800065e <_write+0x1a>
 800066c:	200002b8 	.word	0x200002b8

08000670 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000670:	b508      	push	{r3, lr}
    if (htim->Instance == TIM6) {
 8000672:	6802      	ldr	r2, [r0, #0]
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000676:	429a      	cmp	r2, r3
 8000678:	d000      	beq.n	800067c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800067a:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Off LED
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000684:	f000 ff36 	bl	80014f4 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop(&htim6); // Kill the Timer
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800068a:	f001 fa73 	bl	8001b74 <HAL_TIM_Base_Stop>
}
 800068e:	e7f4      	b.n	800067a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000690:	40001000 	.word	0x40001000
 8000694:	40020800 	.word	0x40020800
 8000698:	20000348 	.word	0x20000348

0800069c <led_flash>:
void led_flash() {
 800069c:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <led_flash+0x18>)
 80006a6:	f000 ff25 	bl	80014f4 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start_IT(&htim6);
 80006aa:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <led_flash+0x1c>)
 80006ac:	f001 fa76 	bl	8001b9c <HAL_TIM_Base_Start_IT>
}
 80006b0:	bd08      	pop	{r3, pc}
 80006b2:	bf00      	nop
 80006b4:	40020800 	.word	0x40020800
 80006b8:	20000348 	.word	0x20000348

080006bc <process_character>:
void process_character(char ch) {
 80006bc:	b510      	push	{r4, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	f88d 0007 	strb.w	r0, [sp, #7]
    switch (ch) {
 80006c4:	b2c3      	uxtb	r3, r0
 80006c6:	b12b      	cbz	r3, 80006d4 <process_character+0x18>
        if (strlen < BUFFER_SIZE) {
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <process_character+0x40>)
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	2c7f      	cmp	r4, #127	@ 0x7f
 80006ce:	d90b      	bls.n	80006e8 <process_character+0x2c>
}
 80006d0:	b002      	add	sp, #8
 80006d2:	bd10      	pop	{r4, pc}
        printf("Received    : %s\n", receive_buffer);
 80006d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000700 <process_character+0x44>)
 80006d6:	4621      	mov	r1, r4
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <process_character+0x48>)
 80006da:	f002 f9a3 	bl	8002a24 <iprintf>
        receive_buffer[0] = '\0';
 80006de:	2300      	movs	r3, #0
 80006e0:	7023      	strb	r3, [r4, #0]
        strlen = 0;
 80006e2:	4a06      	ldr	r2, [pc, #24]	@ (80006fc <process_character+0x40>)
 80006e4:	6013      	str	r3, [r2, #0]
        break;
 80006e6:	e7f3      	b.n	80006d0 <process_character+0x14>
            strncat((char*) &receive_buffer, &ch, 1); // Danger, Will Robinson!  this could go horribly wrong!
 80006e8:	2201      	movs	r2, #1
 80006ea:	f10d 0107 	add.w	r1, sp, #7
 80006ee:	4804      	ldr	r0, [pc, #16]	@ (8000700 <process_character+0x44>)
 80006f0:	f002 fb08 	bl	8002d04 <strncat>
            ++strlen;
 80006f4:	3401      	adds	r4, #1
 80006f6:	4b01      	ldr	r3, [pc, #4]	@ (80006fc <process_character+0x40>)
 80006f8:	601c      	str	r4, [r3, #0]
}
 80006fa:	e7e9      	b.n	80006d0 <process_character+0x14>
 80006fc:	20000088 	.word	0x20000088
 8000700:	2000010c 	.word	0x2000010c
 8000704:	08003ba8 	.word	0x08003ba8

08000708 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset) {
 8000708:	b510      	push	{r4, lr}
 800070a:	460c      	mov	r4, r1
    led_flash();
 800070c:	f7ff ffc6 	bl	800069c <led_flash>
    if (offset != last_offset) {
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_UARTEx_RxEventCallback+0x34>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	42a3      	cmp	r3, r4
 8000716:	d010      	beq.n	800073a <HAL_UARTEx_RxEventCallback+0x32>
        if (offset < last_offset)
 8000718:	d90b      	bls.n	8000732 <HAL_UARTEx_RxEventCallback+0x2a>
            last_offset = 0;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_UARTEx_RxEventCallback+0x34>)
 800071c:	2200      	movs	r2, #0
 800071e:	801a      	strh	r2, [r3, #0]
 8000720:	e007      	b.n	8000732 <HAL_UARTEx_RxEventCallback+0x2a>
            process_character((char) dma_buffer[last_offset]);
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <HAL_UARTEx_RxEventCallback+0x38>)
 8000724:	5cd0      	ldrb	r0, [r2, r3]
 8000726:	f7ff ffc9 	bl	80006bc <process_character>
            ++last_offset;
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <HAL_UARTEx_RxEventCallback+0x34>)
 800072c:	8813      	ldrh	r3, [r2, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	8013      	strh	r3, [r2, #0]
        while (last_offset < offset) {
 8000732:	4b02      	ldr	r3, [pc, #8]	@ (800073c <HAL_UARTEx_RxEventCallback+0x34>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	42a3      	cmp	r3, r4
 8000738:	d3f3      	bcc.n	8000722 <HAL_UARTEx_RxEventCallback+0x1a>
}
 800073a:	bd10      	pop	{r4, pc}
 800073c:	20000084 	.word	0x20000084
 8000740:	2000008c 	.word	0x2000008c

08000744 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000746:	e7fe      	b.n	8000746 <Error_Handler+0x2>

08000748 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000748:	b508      	push	{r3, lr}
    printf("UART Error\n");
 800074a:	4802      	ldr	r0, [pc, #8]	@ (8000754 <HAL_UART_ErrorCallback+0xc>)
 800074c:	f002 f9d2 	bl	8002af4 <puts>
    Error_Handler();
 8000750:	f7ff fff8 	bl	8000744 <Error_Handler>
 8000754:	08003bbc 	.word	0x08003bbc

08000758 <MX_USART1_UART_Init>:
{
 8000758:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800075a:	480a      	ldr	r0, [pc, #40]	@ (8000784 <MX_USART1_UART_Init+0x2c>)
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MX_USART1_UART_Init+0x30>)
 800075e:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000760:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000764:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	2300      	movs	r3, #0
 8000768:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800076a:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800076c:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800076e:	220c      	movs	r2, #12
 8000770:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	f001 fd22 	bl	80021be <HAL_UART_Init>
 800077a:	b900      	cbnz	r0, 800077e <MX_USART1_UART_Init+0x26>
}
 800077c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800077e:	f7ff ffe1 	bl	8000744 <Error_Handler>
 8000782:	bf00      	nop
 8000784:	200002b8 	.word	0x200002b8
 8000788:	40011000 	.word	0x40011000

0800078c <MX_USART2_UART_Init>:
{
 800078c:	b508      	push	{r3, lr}
    huart2.Instance = USART2;
 800078e:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x28>)
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART2_UART_Init+0x2c>)
 8000792:	6003      	str	r3, [r0, #0]
    huart2.Init.BaudRate = 2000000;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x30>)
 8000796:	6043      	str	r3, [r0, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000798:	2300      	movs	r3, #0
 800079a:	6083      	str	r3, [r0, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	60c3      	str	r3, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	6103      	str	r3, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	220c      	movs	r2, #12
 80007a2:	6142      	str	r2, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a4:	6183      	str	r3, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a6:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a8:	f001 fd09 	bl	80021be <HAL_UART_Init>
 80007ac:	b900      	cbnz	r0, 80007b0 <MX_USART2_UART_Init+0x24>
}
 80007ae:	bd08      	pop	{r3, pc}
        Error_Handler();
 80007b0:	f7ff ffc8 	bl	8000744 <Error_Handler>
 80007b4:	20000270 	.word	0x20000270
 80007b8:	40004400 	.word	0x40004400
 80007bc:	001e8480 	.word	0x001e8480

080007c0 <MX_UART4_Init>:
{
 80007c0:	b508      	push	{r3, lr}
    huart4.Instance = UART4;
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <MX_UART4_Init+0x28>)
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_UART4_Init+0x2c>)
 80007c6:	6003      	str	r3, [r0, #0]
    huart4.Init.BaudRate = 2000000;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_UART4_Init+0x30>)
 80007ca:	6043      	str	r3, [r0, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007cc:	2300      	movs	r3, #0
 80007ce:	6083      	str	r3, [r0, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 80007d0:	60c3      	str	r3, [r0, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 80007d2:	6103      	str	r3, [r0, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 80007d4:	220c      	movs	r2, #12
 80007d6:	6142      	str	r2, [r0, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d8:	6183      	str	r3, [r0, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007da:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart4) != HAL_OK)
 80007dc:	f001 fcef 	bl	80021be <HAL_UART_Init>
 80007e0:	b900      	cbnz	r0, 80007e4 <MX_UART4_Init+0x24>
}
 80007e2:	bd08      	pop	{r3, pc}
        Error_Handler();
 80007e4:	f7ff ffae 	bl	8000744 <Error_Handler>
 80007e8:	20000300 	.word	0x20000300
 80007ec:	40004c00 	.word	0x40004c00
 80007f0:	001e8480 	.word	0x001e8480

080007f4 <MX_TIM6_Init>:
{
 80007f4:	b500      	push	{lr}
 80007f6:	b083      	sub	sp, #12
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007f8:	2300      	movs	r3, #0
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	9301      	str	r3, [sp, #4]
    htim6.Instance = TIM6;
 80007fe:	480e      	ldr	r0, [pc, #56]	@ (8000838 <MX_TIM6_Init+0x44>)
 8000800:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <MX_TIM6_Init+0x48>)
 8000802:	6002      	str	r2, [r0, #0]
    htim6.Init.Prescaler = 83;
 8000804:	2253      	movs	r2, #83	@ 0x53
 8000806:	6042      	str	r2, [r0, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	6083      	str	r3, [r0, #8]
    htim6.Init.Period = 29999;
 800080a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800080e:	60c2      	str	r2, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000812:	f001 fb27 	bl	8001e64 <HAL_TIM_Base_Init>
 8000816:	b958      	cbnz	r0, 8000830 <MX_TIM6_Init+0x3c>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000818:	2320      	movs	r3, #32
 800081a:	9300      	str	r3, [sp, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	9301      	str	r3, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000820:	4669      	mov	r1, sp
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_TIM6_Init+0x44>)
 8000824:	f001 fb4a 	bl	8001ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	b920      	cbnz	r0, 8000834 <MX_TIM6_Init+0x40>
}
 800082a:	b003      	add	sp, #12
 800082c:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000830:	f7ff ff88 	bl	8000744 <Error_Handler>
        Error_Handler();
 8000834:	f7ff ff86 	bl	8000744 <Error_Handler>
 8000838:	20000348 	.word	0x20000348
 800083c:	40001000 	.word	0x40001000

08000840 <SystemClock_Config>:
{
 8000840:	b500      	push	{lr}
 8000842:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000844:	2230      	movs	r2, #48	@ 0x30
 8000846:	2100      	movs	r1, #0
 8000848:	a808      	add	r0, sp, #32
 800084a:	f002 fa53 	bl	8002cf4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800084e:	2300      	movs	r3, #0
 8000850:	9303      	str	r3, [sp, #12]
 8000852:	9304      	str	r3, [sp, #16]
 8000854:	9305      	str	r3, [sp, #20]
 8000856:	9306      	str	r3, [sp, #24]
 8000858:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <SystemClock_Config+0xa0>)
 800085e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000860:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000864:	6411      	str	r1, [r2, #64]	@ 0x40
 8000866:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000868:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <SystemClock_Config+0xa4>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088e:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000898:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800089a:	2208      	movs	r2, #8
 800089c:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800089e:	22a8      	movs	r2, #168	@ 0xa8
 80008a0:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a2:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	a808      	add	r0, sp, #32
 80008aa:	f000 fe29 	bl	8001500 <HAL_RCC_OscConfig>
 80008ae:	b998      	cbnz	r0, 80008d8 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c0:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c8:	2105      	movs	r1, #5
 80008ca:	a803      	add	r0, sp, #12
 80008cc:	f001 f87c 	bl	80019c8 <HAL_RCC_ClockConfig>
 80008d0:	b920      	cbnz	r0, 80008dc <SystemClock_Config+0x9c>
}
 80008d2:	b015      	add	sp, #84	@ 0x54
 80008d4:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80008d8:	f7ff ff34 	bl	8000744 <Error_Handler>
        Error_Handler();
 80008dc:	f7ff ff32 	bl	8000744 <Error_Handler>
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <main>:
{
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_Init();
 80008ea:	f000 fa05 	bl	8000cf8 <HAL_Init>
    SystemClock_Config();
 80008ee:	f7ff ffa7 	bl	8000840 <SystemClock_Config>
    MX_GPIO_Init();
 80008f2:	f7ff fe3d 	bl	8000570 <MX_GPIO_Init>
    MX_DMA_Init();
 80008f6:	f7ff fe85 	bl	8000604 <MX_DMA_Init>
    MX_USART1_UART_Init();
 80008fa:	f7ff ff2d 	bl	8000758 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 80008fe:	f7ff ff45 	bl	800078c <MX_USART2_UART_Init>
    MX_UART4_Init();
 8000902:	f7ff ff5d 	bl	80007c0 <MX_UART4_Init>
    MX_TIM6_Init();
 8000906:	f7ff ff75 	bl	80007f4 <MX_TIM6_Init>
    printf("\n\n\n\n--------\nStarting\n");
 800090a:	481b      	ldr	r0, [pc, #108]	@ (8000978 <main+0x90>)
 800090c:	f002 f8f2 	bl	8002af4 <puts>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t*) &dma_buffer, BUFFER_SIZE);
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	491a      	ldr	r1, [pc, #104]	@ (800097c <main+0x94>)
 8000914:	481a      	ldr	r0, [pc, #104]	@ (8000980 <main+0x98>)
 8000916:	f001 ff8f 	bl	8002838 <HAL_UARTEx_ReceiveToIdle_DMA>
    uint32_t now = 0, next_tick = 1000;
 800091a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800091e:	e026      	b.n	800096e <main+0x86>
            printf("Tick %lu (loop = %lu)\n", now / 1000, loop_cnt);
 8000920:	4c18      	ldr	r4, [pc, #96]	@ (8000984 <main+0x9c>)
 8000922:	fba4 3405 	umull	r3, r4, r4, r5
 8000926:	09a4      	lsrs	r4, r4, #6
 8000928:	4f17      	ldr	r7, [pc, #92]	@ (8000988 <main+0xa0>)
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4621      	mov	r1, r4
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <main+0xa4>)
 8000930:	f002 f878 	bl	8002a24 <iprintf>
            sprintf(transmit_buffer, "This is a reasonable long data string with a number %lu", now / 1000);
 8000934:	4e16      	ldr	r6, [pc, #88]	@ (8000990 <main+0xa8>)
 8000936:	4622      	mov	r2, r4
 8000938:	4916      	ldr	r1, [pc, #88]	@ (8000994 <main+0xac>)
 800093a:	4630      	mov	r0, r6
 800093c:	f002 f8e2 	bl	8002b04 <siprintf>
            printf("Transmitting: %s\n", transmit_buffer);
 8000940:	4631      	mov	r1, r6
 8000942:	4815      	ldr	r0, [pc, #84]	@ (8000998 <main+0xb0>)
 8000944:	f002 f86e 	bl	8002a24 <iprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &transmit_buffer, strlen(transmit_buffer) + 1, HAL_MAX_DELAY);
 8000948:	4630      	mov	r0, r6
 800094a:	f7ff fc41 	bl	80001d0 <strlen>
 800094e:	1c42      	adds	r2, r0, #1
 8000950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000954:	b292      	uxth	r2, r2
 8000956:	4631      	mov	r1, r6
 8000958:	4810      	ldr	r0, [pc, #64]	@ (800099c <main+0xb4>)
 800095a:	f001 fc60 	bl	800221e <HAL_UART_Transmit>
            loop_cnt = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
            next_tick = now + 1000;
 8000962:	f505 717a 	add.w	r1, r5, #1000	@ 0x3e8
        ++loop_cnt;
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <main+0xa0>)
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	6013      	str	r3, [r2, #0]
        now = uwTick;
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <main+0xb8>)
 8000970:	681d      	ldr	r5, [r3, #0]
        if (now >= next_tick) {
 8000972:	42a9      	cmp	r1, r5
 8000974:	d8f7      	bhi.n	8000966 <main+0x7e>
 8000976:	e7d3      	b.n	8000920 <main+0x38>
 8000978:	08003bc8 	.word	0x08003bc8
 800097c:	2000008c 	.word	0x2000008c
 8000980:	20000300 	.word	0x20000300
 8000984:	10624dd3 	.word	0x10624dd3
 8000988:	2000020c 	.word	0x2000020c
 800098c:	08003be0 	.word	0x08003be0
 8000990:	2000018c 	.word	0x2000018c
 8000994:	08003bf8 	.word	0x08003bf8
 8000998:	08003c30 	.word	0x08003c30
 800099c:	20000270 	.word	0x20000270
 80009a0:	20000394 	.word	0x20000394

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2100      	movs	r1, #0
 80009a8:	9100      	str	r1, [sp, #0]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_MspInit+0x34>)
 80009ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80009b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009b6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80009ba:	9200      	str	r2, [sp, #0]
 80009bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	9101      	str	r1, [sp, #4]
 80009c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	b002      	add	sp, #8
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80009dc:	6802      	ldr	r2, [r0, #0]
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d000      	beq.n	80009e6 <HAL_TIM_Base_MspInit+0xa>
 80009e4:	4770      	bx	lr
{
 80009e6:	b500      	push	{lr}
 80009e8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ea:	2100      	movs	r1, #0
 80009ec:	9101      	str	r1, [sp, #4]
 80009ee:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 80009f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f4:	f042 0210 	orr.w	r2, r2, #16
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a04:	460a      	mov	r2, r1
 8000a06:	2036      	movs	r0, #54	@ 0x36
 8000a08:	f000 f9f0 	bl	8000dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a0c:	2036      	movs	r0, #54	@ 0x36
 8000a0e:	f000 f9fd 	bl	8000e0c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a12:	b003      	add	sp, #12
 8000a14:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a18:	40001000 	.word	0x40001000

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b530      	push	{r4, r5, lr}
 8000a1e:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	9307      	str	r3, [sp, #28]
 8000a24:	9308      	str	r3, [sp, #32]
 8000a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(huart->Instance==UART4)
 8000a2c:	6803      	ldr	r3, [r0, #0]
 8000a2e:	4a4c      	ldr	r2, [pc, #304]	@ (8000b60 <HAL_UART_MspInit+0x144>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d007      	beq.n	8000a44 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8000a34:	4a4b      	ldr	r2, [pc, #300]	@ (8000b64 <HAL_UART_MspInit+0x148>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d04a      	beq.n	8000ad0 <HAL_UART_MspInit+0xb4>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000a3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b68 <HAL_UART_MspInit+0x14c>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d06b      	beq.n	8000b18 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a40:	b00d      	add	sp, #52	@ 0x34
 8000a42:	bd30      	pop	{r4, r5, pc}
 8000a44:	4604      	mov	r4, r0
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a46:	2500      	movs	r5, #0
 8000a48:	9501      	str	r5, [sp, #4]
 8000a4a:	4b48      	ldr	r3, [pc, #288]	@ (8000b6c <HAL_UART_MspInit+0x150>)
 8000a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a4e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000a52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a56:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8000a5a:	9201      	str	r2, [sp, #4]
 8000a5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	9502      	str	r5, [sp, #8]
 8000a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a62:	f042 0201 	orr.w	r2, r2, #1
 8000a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a72:	2303      	movs	r3, #3
 8000a74:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2202      	movs	r2, #2
 8000a78:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	a907      	add	r1, sp, #28
 8000a82:	483b      	ldr	r0, [pc, #236]	@ (8000b70 <HAL_UART_MspInit+0x154>)
 8000a84:	f000 fc40 	bl	8001308 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000a88:	483a      	ldr	r0, [pc, #232]	@ (8000b74 <HAL_UART_MspInit+0x158>)
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b78 <HAL_UART_MspInit+0x15c>)
 8000a8c:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000a8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a92:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a94:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a96:	60c5      	str	r5, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	6103      	str	r3, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9e:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa0:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa6:	61c3      	str	r3, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa8:	6205      	str	r5, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aaa:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000aac:	f000 fa46 	bl	8000f3c <HAL_DMA_Init>
 8000ab0:	b958      	cbnz	r0, 8000aca <HAL_UART_MspInit+0xae>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000ab2:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <HAL_UART_MspInit+0x158>)
 8000ab4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000ab6:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4611      	mov	r1, r2
 8000abc:	2034      	movs	r0, #52	@ 0x34
 8000abe:	f000 f995 	bl	8000dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ac2:	2034      	movs	r0, #52	@ 0x34
 8000ac4:	f000 f9a2 	bl	8000e0c <HAL_NVIC_EnableIRQ>
 8000ac8:	e7ba      	b.n	8000a40 <HAL_UART_MspInit+0x24>
      Error_Handler();
 8000aca:	f7ff fe3b 	bl	8000744 <Error_Handler>
 8000ace:	e7f0      	b.n	8000ab2 <HAL_UART_MspInit+0x96>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	9103      	str	r1, [sp, #12]
 8000ad4:	4b25      	ldr	r3, [pc, #148]	@ (8000b6c <HAL_UART_MspInit+0x150>)
 8000ad6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ad8:	f042 0210 	orr.w	r2, r2, #16
 8000adc:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ade:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ae0:	f002 0210 	and.w	r2, r2, #16
 8000ae4:	9203      	str	r2, [sp, #12]
 8000ae6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	9104      	str	r1, [sp, #16]
 8000aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aec:	f042 0201 	orr.w	r2, r2, #1
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	9304      	str	r3, [sp, #16]
 8000afa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000afc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b00:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	a907      	add	r1, sp, #28
 8000b10:	4817      	ldr	r0, [pc, #92]	@ (8000b70 <HAL_UART_MspInit+0x154>)
 8000b12:	f000 fbf9 	bl	8001308 <HAL_GPIO_Init>
 8000b16:	e793      	b.n	8000a40 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b18:	2100      	movs	r1, #0
 8000b1a:	9105      	str	r1, [sp, #20]
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <HAL_UART_MspInit+0x150>)
 8000b1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b20:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b24:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b28:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000b2c:	9205      	str	r2, [sp, #20]
 8000b2e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	9106      	str	r1, [sp, #24]
 8000b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b34:	f042 0201 	orr.w	r2, r2, #1
 8000b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	9306      	str	r3, [sp, #24]
 8000b42:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b44:	230c      	movs	r3, #12
 8000b46:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	a907      	add	r1, sp, #28
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <HAL_UART_MspInit+0x154>)
 8000b58:	f000 fbd6 	bl	8001308 <HAL_GPIO_Init>
}
 8000b5c:	e770      	b.n	8000a40 <HAL_UART_MspInit+0x24>
 8000b5e:	bf00      	nop
 8000b60:	40004c00 	.word	0x40004c00
 8000b64:	40011000 	.word	0x40011000
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	20000210 	.word	0x20000210
 8000b78:	40026040 	.word	0x40026040

08000b7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler>

08000b7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler>

08000b80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler>

08000b82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler>

08000b84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler>

08000b86 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f8cd 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bd08      	pop	{r3, pc}

08000b94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000b94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000b96:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <DMA1_Stream2_IRQHandler+0xc>)
 8000b98:	f000 fac8 	bl	800112c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000b9c:	bd08      	pop	{r3, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000210 	.word	0x20000210

08000ba4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ba4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ba6:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <UART4_IRQHandler+0xc>)
 8000ba8:	f001 fc56 	bl	8002458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bac:	bd08      	pop	{r3, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000300 	.word	0x20000300

08000bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb6:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM6_DAC_IRQHandler+0xc>)
 8000bb8:	f001 f838 	bl	8001c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bbc:	bd08      	pop	{r3, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000348 	.word	0x20000348

08000bc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	2500      	movs	r5, #0
 8000bcc:	e006      	b.n	8000bdc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000bce:	f3af 8000 	nop.w
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000bda:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	42b5      	cmp	r5, r6
 8000bde:	dbf6      	blt.n	8000bce <_read+0xa>
  }

  return len;
}
 8000be0:	4630      	mov	r0, r6
 8000be2:	bd70      	pop	{r4, r5, r6, pc}

08000be4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bee:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <_sbrk+0x38>)
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <_sbrk+0x40>)
 8000c06:	6800      	ldr	r0, [r0, #0]
 8000c08:	b140      	cbz	r0, 8000c1c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <_sbrk+0x40>)
 8000c0c:	6800      	ldr	r0, [r0, #0]
 8000c0e:	4403      	add	r3, r0
 8000c10:	1a52      	subs	r2, r2, r1
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d806      	bhi.n	8000c24 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c16:	4a09      	ldr	r2, [pc, #36]	@ (8000c3c <_sbrk+0x40>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c1a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <_sbrk+0x40>)
 8000c1e:	4c08      	ldr	r4, [pc, #32]	@ (8000c40 <_sbrk+0x44>)
 8000c20:	6004      	str	r4, [r0, #0]
 8000c22:	e7f2      	b.n	8000c0a <_sbrk+0xe>
    errno = ENOMEM;
 8000c24:	f002 f8c8 	bl	8002db8 <__errno>
 8000c28:	230c      	movs	r3, #12
 8000c2a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	e7f3      	b.n	8000c1a <_sbrk+0x1e>
 8000c32:	bf00      	nop
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	20000390 	.word	0x20000390
 8000c40:	200004e8 	.word	0x200004e8

08000c44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4a03      	ldr	r2, [pc, #12]	@ (8000c54 <SystemInit+0x10>)
 8000c46:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c4a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff fff2 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f002 f89d 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fe2d 	bl	80008e8 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c9c:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8000ca0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca4:	200004e4 	.word	0x200004e4

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b510      	push	{r4, lr}
 8000cae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_InitTick+0x40>)
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_InitTick+0x44>)
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc4:	f000 f8a6 	bl	8000e14 <HAL_SYSTICK_Config>
 8000cc8:	b968      	cbnz	r0, 8000ce6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	2c0f      	cmp	r4, #15
 8000ccc:	d901      	bls.n	8000cd2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
 8000cd0:	e00a      	b.n	8000ce8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cda:	f000 f887 	bl	8000dec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cde:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_InitTick+0x48>)
 8000ce0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
}
 8000ce8:	bd10      	pop	{r4, pc}
 8000cea:	bf00      	nop
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <HAL_Init>:
{
 8000cf8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_Init+0x30>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d12:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f857 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f7ff ffc6 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000d20:	f7ff fe40 	bl	80009a4 <HAL_MspInit>
}
 8000d24:	2000      	movs	r0, #0
 8000d26:	bd08      	pop	{r3, pc}
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d2c:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <HAL_IncTick+0x10>)
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_IncTick+0x14>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	440b      	add	r3, r1
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000394 	.word	0x20000394
 8000d40:	20000004 	.word	0x20000004

08000d44 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d44:	2800      	cmp	r0, #0
 8000d46:	db07      	blt.n	8000d58 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d48:	f000 021f 	and.w	r2, r0, #31
 8000d4c:	0940      	lsrs	r0, r0, #5
 8000d4e:	2301      	movs	r3, #1
 8000d50:	4093      	lsls	r3, r2
 8000d52:	4a02      	ldr	r2, [pc, #8]	@ (8000d5c <__NVIC_EnableIRQ+0x18>)
 8000d54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d60:	2800      	cmp	r0, #0
 8000d62:	db08      	blt.n	8000d76 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	0109      	lsls	r1, r1, #4
 8000d66:	b2c9      	uxtb	r1, r1
 8000d68:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000d6c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000d70:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000d74:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	f000 000f 	and.w	r0, r0, #15
 8000d7a:	0109      	lsls	r1, r1, #4
 8000d7c:	b2c9      	uxtb	r1, r1
 8000d7e:	4b01      	ldr	r3, [pc, #4]	@ (8000d84 <__NVIC_SetPriority+0x24>)
 8000d80:	5419      	strb	r1, [r3, r0]
  }
}
 8000d82:	4770      	bx	lr
 8000d84:	e000ed14 	.word	0xe000ed14

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8e:	f1c0 0c07 	rsb	ip, r0, #7
 8000d92:	f1bc 0f04 	cmp.w	ip, #4
 8000d96:	bf28      	it	cs
 8000d98:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9c:	1d03      	adds	r3, r0, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d90f      	bls.n	8000dc2 <NVIC_EncodePriority+0x3a>
 8000da2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000da8:	fa0e f00c 	lsl.w	r0, lr, ip
 8000dac:	ea21 0100 	bic.w	r1, r1, r0
 8000db0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000db6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000dba:	ea41 0002 	orr.w	r0, r1, r2
 8000dbe:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e7ee      	b.n	8000da4 <NVIC_EncodePriority+0x1c>
	...

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dcc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000dd0:	041b      	lsls	r3, r3, #16
 8000dd2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	0200      	lsls	r0, r0, #8
 8000dd6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dda:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000de4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_NVIC_SetPriority+0x1c>)
 8000df2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000df8:	f7ff ffc6 	bl	8000d88 <NVIC_EncodePriority>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f7ff ffae 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e04:	bd10      	pop	{r4, pc}
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f7ff ff99 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e12:	bd08      	pop	{r3, pc}

08000e14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	3801      	subs	r0, #1
 8000e16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e1a:	d20b      	bcs.n	8000e34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <HAL_SYSTICK_Config+0x24>)
 8000e24:	21f0      	movs	r1, #240	@ 0xf0
 8000e26:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	2207      	movs	r2, #7
 8000e30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e3c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e3e:	6805      	ldr	r5, [r0, #0]
 8000e40:	682c      	ldr	r4, [r5, #0]
 8000e42:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000e46:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e48:	6804      	ldr	r4, [r0, #0]
 8000e4a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e4c:	6883      	ldr	r3, [r0, #8]
 8000e4e:	2b40      	cmp	r3, #64	@ 0x40
 8000e50:	d005      	beq.n	8000e5e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000e52:	6803      	ldr	r3, [r0, #0]
 8000e54:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000e56:	6803      	ldr	r3, [r0, #0]
 8000e58:	60da      	str	r2, [r3, #12]
  }
}
 8000e5a:	bc30      	pop	{r4, r5}
 8000e5c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000e5e:	6803      	ldr	r3, [r0, #0]
 8000e60:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000e62:	6803      	ldr	r3, [r0, #0]
 8000e64:	60d9      	str	r1, [r3, #12]
 8000e66:	e7f8      	b.n	8000e5a <DMA_SetConfig+0x1e>

08000e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e68:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e6a:	6803      	ldr	r3, [r0, #0]
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	3910      	subs	r1, #16
 8000e70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <DMA_CalcBaseAndBitshift+0x3c>)
 8000e72:	fba2 4201 	umull	r4, r2, r2, r1
 8000e76:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e78:	4c0b      	ldr	r4, [pc, #44]	@ (8000ea8 <DMA_CalcBaseAndBitshift+0x40>)
 8000e7a:	5ca2      	ldrb	r2, [r4, r2]
 8000e7c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000e7e:	295f      	cmp	r1, #95	@ 0x5f
 8000e80:	d909      	bls.n	8000e96 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000e8e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e94:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	6583      	str	r3, [r0, #88]	@ 0x58
 8000ea0:	e7f5      	b.n	8000e8e <DMA_CalcBaseAndBitshift+0x26>
 8000ea2:	bf00      	nop
 8000ea4:	aaaaaaab 	.word	0xaaaaaaab
 8000ea8:	08003c5c 	.word	0x08003c5c

08000eac <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eae:	6982      	ldr	r2, [r0, #24]
 8000eb0:	b992      	cbnz	r2, 8000ed8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d00a      	beq.n	8000ecc <DMA_CheckFifoParam+0x20>
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d002      	beq.n	8000ec0 <DMA_CheckFifoParam+0x14>
 8000eba:	b10b      	cbz	r3, 8000ec0 <DMA_CheckFifoParam+0x14>
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ec0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ec2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000ec6:	d128      	bne.n	8000f1a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000ec8:	2000      	movs	r0, #0
 8000eca:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ecc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ece:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000ed2:	d024      	beq.n	8000f1e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ed8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000edc:	d009      	beq.n	8000ef2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d925      	bls.n	8000f2e <DMA_CheckFifoParam+0x82>
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d125      	bne.n	8000f32 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ee8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000eec:	d123      	bne.n	8000f36 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000eee:	2000      	movs	r0, #0
 8000ef0:	4770      	bx	lr
    switch (tmp)
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d803      	bhi.n	8000efe <DMA_CheckFifoParam+0x52>
 8000ef6:	e8df f003 	tbb	[pc, r3]
 8000efa:	0414      	.short	0x0414
 8000efc:	0a14      	.short	0x0a14
 8000efe:	2000      	movs	r0, #0
 8000f00:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f02:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f04:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f08:	d10d      	bne.n	8000f26 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f0e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f14:	d009      	beq.n	8000f2a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2000      	movs	r0, #0
 8000f18:	4770      	bx	lr
        status = HAL_ERROR;
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f1e:	2001      	movs	r0, #1
 8000f20:	4770      	bx	lr
      status = HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
 8000f24:	4770      	bx	lr
        status = HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
 8000f28:	4770      	bx	lr
        status = HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4770      	bx	lr
      status = HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
 8000f30:	4770      	bx	lr
    switch (tmp)
 8000f32:	2000      	movs	r0, #0
 8000f34:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000f36:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_DMA_Init>:
{
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fb7a 	bl	8000638 <HAL_GetTick>
  if(hdma == NULL)
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	d05b      	beq.n	8001000 <HAL_DMA_Init+0xc4>
 8000f48:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000f50:	2300      	movs	r3, #0
 8000f52:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f012 0f01 	tst.w	r2, #1
 8000f68:	d00a      	beq.n	8000f80 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f6a:	f7ff fb65 	bl	8000638 <HAL_GetTick>
 8000f6e:	1b43      	subs	r3, r0, r5
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d9f5      	bls.n	8000f60 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f74:	2320      	movs	r3, #32
 8000f76:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000f80:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f82:	4920      	ldr	r1, [pc, #128]	@ (8001004 <HAL_DMA_Init+0xc8>)
 8000f84:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f86:	6862      	ldr	r2, [r4, #4]
 8000f88:	68a0      	ldr	r0, [r4, #8]
 8000f8a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8c:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f8e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f90:	6920      	ldr	r0, [r4, #16]
 8000f92:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f94:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f98:	69a0      	ldr	r0, [r4, #24]
 8000f9a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa0:	6a20      	ldr	r0, [r4, #32]
 8000fa2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fa6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000fa8:	2904      	cmp	r1, #4
 8000faa:	d01e      	beq.n	8000fea <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000fac:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000fae:	6826      	ldr	r6, [r4, #0]
 8000fb0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fb2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000fb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000fb8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d107      	bne.n	8000fce <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000fbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fc0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000fc4:	b11b      	cbz	r3, 8000fce <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff ff70 	bl	8000eac <DMA_CheckFifoParam>
 8000fcc:	b990      	cbnz	r0, 8000ff4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000fce:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff ff49 	bl	8000e68 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000fd8:	233f      	movs	r3, #63	@ 0x3f
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fde:	2000      	movs	r0, #0
 8000fe0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000fe8:	e7c9      	b.n	8000f7e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000fec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	e7db      	b.n	8000fac <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8000ffe:	e7be      	b.n	8000f7e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
 8001002:	e7bc      	b.n	8000f7e <HAL_DMA_Init+0x42>
 8001004:	f010803f 	.word	0xf010803f

08001008 <HAL_DMA_Start_IT>:
{
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800100c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800100e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001012:	2801      	cmp	r0, #1
 8001014:	d02b      	beq.n	800106e <HAL_DMA_Start_IT+0x66>
 8001016:	2001      	movs	r0, #1
 8001018:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800101c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001020:	b2c0      	uxtb	r0, r0
 8001022:	2801      	cmp	r0, #1
 8001024:	d004      	beq.n	8001030 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001026:	2300      	movs	r3, #0
 8001028:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 800102c:	2002      	movs	r0, #2
}
 800102e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001030:	2002      	movs	r0, #2
 8001032:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001036:	2000      	movs	r0, #0
 8001038:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fefe 	bl	8000e3c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001042:	233f      	movs	r3, #63	@ 0x3f
 8001044:	4093      	lsls	r3, r2
 8001046:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f043 0316 	orr.w	r3, r3, #22
 8001050:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001052:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001054:	b123      	cbz	r3, 8001060 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001056:	6822      	ldr	r2, [r4, #0]
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001060:	6822      	ldr	r2, [r4, #0]
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800106a:	2000      	movs	r0, #0
 800106c:	e7df      	b.n	800102e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800106e:	2002      	movs	r0, #2
 8001070:	e7dd      	b.n	800102e <HAL_DMA_Start_IT+0x26>

08001072 <HAL_DMA_Abort>:
{
 8001072:	b570      	push	{r4, r5, r6, lr}
 8001074:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001076:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fade 	bl	8000638 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d006      	beq.n	8001094 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800108a:	2300      	movs	r3, #0
 800108c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
}
 8001092:	bd70      	pop	{r4, r5, r6, pc}
 8001094:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001096:	6822      	ldr	r2, [r4, #0]
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f023 0316 	bic.w	r3, r3, #22
 800109e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a0:	6822      	ldr	r2, [r4, #0]
 80010a2:	6953      	ldr	r3, [r2, #20]
 80010a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010a8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010ac:	b1e3      	cbz	r3, 80010e8 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f023 0308 	bic.w	r3, r3, #8
 80010b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80010b8:	6822      	ldr	r2, [r4, #0]
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f013 0f01 	tst.w	r3, #1
 80010ca:	d011      	beq.n	80010f0 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010cc:	f7ff fab4 	bl	8000638 <HAL_GetTick>
 80010d0:	1b43      	subs	r3, r0, r5
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d9f5      	bls.n	80010c2 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d6:	2320      	movs	r3, #32
 80010d8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010da:	2003      	movs	r0, #3
 80010dc:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80010e0:	2300      	movs	r3, #0
 80010e2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80010e6:	e7d4      	b.n	8001092 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1df      	bne.n	80010ae <HAL_DMA_Abort+0x3c>
 80010ee:	e7e3      	b.n	80010b8 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010f2:	233f      	movs	r3, #63	@ 0x3f
 80010f4:	4093      	lsls	r3, r2
 80010f6:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80010fe:	2000      	movs	r0, #0
 8001100:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001104:	e7c5      	b.n	8001092 <HAL_DMA_Abort+0x20>

08001106 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001106:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d003      	beq.n	8001118 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001118:	2305      	movs	r3, #5
 800111a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800111e:	6802      	ldr	r2, [r0, #0]
 8001120:	6813      	ldr	r3, [r2, #0]
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001128:	2000      	movs	r0, #0
}
 800112a:	4770      	bx	lr

0800112c <HAL_DMA_IRQHandler>:
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001136:	4b72      	ldr	r3, [pc, #456]	@ (8001300 <HAL_DMA_IRQHandler+0x1d4>)
 8001138:	681d      	ldr	r5, [r3, #0]
 800113a:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <HAL_DMA_IRQHandler+0x1d8>)
 800113c:	fba3 3505 	umull	r3, r5, r3, r5
 8001140:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001142:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001144:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001146:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001148:	2308      	movs	r3, #8
 800114a:	4093      	lsls	r3, r2
 800114c:	4233      	tst	r3, r6
 800114e:	d010      	beq.n	8001172 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001150:	6803      	ldr	r3, [r0, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	f012 0f04 	tst.w	r2, #4
 8001158:	d00b      	beq.n	8001172 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	f022 0204 	bic.w	r2, r2, #4
 8001160:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001162:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001164:	2308      	movs	r3, #8
 8001166:	4093      	lsls	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800116a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001172:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001174:	2301      	movs	r3, #1
 8001176:	4093      	lsls	r3, r2
 8001178:	4233      	tst	r3, r6
 800117a:	d009      	beq.n	8001190 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	6952      	ldr	r2, [r2, #20]
 8001180:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001184:	d004      	beq.n	8001190 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001186:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001188:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001190:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001192:	2304      	movs	r3, #4
 8001194:	4093      	lsls	r3, r2
 8001196:	4233      	tst	r3, r6
 8001198:	d009      	beq.n	80011ae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f012 0f02 	tst.w	r2, #2
 80011a2:	d004      	beq.n	80011ae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011a4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011ae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011b0:	2310      	movs	r3, #16
 80011b2:	4093      	lsls	r3, r2
 80011b4:	4233      	tst	r3, r6
 80011b6:	d024      	beq.n	8001202 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	f012 0f08 	tst.w	r2, #8
 80011c0:	d01f      	beq.n	8001202 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011c2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80011cc:	d00d      	beq.n	80011ea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80011d4:	d104      	bne.n	80011e0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80011d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011d8:	b19b      	cbz	r3, 8001202 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80011da:	4620      	mov	r0, r4
 80011dc:	4798      	blx	r3
 80011de:	e010      	b.n	8001202 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80011e2:	b173      	cbz	r3, 8001202 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80011e4:	4620      	mov	r0, r4
 80011e6:	4798      	blx	r3
 80011e8:	e00b      	b.n	8001202 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80011f0:	d103      	bne.n	80011fa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80011fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011fc:	b10b      	cbz	r3, 8001202 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80011fe:	4620      	mov	r0, r4
 8001200:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001202:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001204:	2320      	movs	r3, #32
 8001206:	4093      	lsls	r3, r2
 8001208:	4233      	tst	r3, r6
 800120a:	d055      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800120c:	6822      	ldr	r2, [r4, #0]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	f012 0f10 	tst.w	r2, #16
 8001214:	d050      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001216:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001218:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b05      	cmp	r3, #5
 8001220:	d00e      	beq.n	8001240 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800122a:	d033      	beq.n	8001294 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001232:	d12a      	bne.n	800128a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001234:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03e      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800123a:	4620      	mov	r0, r4
 800123c:	4798      	blx	r3
 800123e:	e03b      	b.n	80012b8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001240:	6822      	ldr	r2, [r4, #0]
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f023 0316 	bic.w	r3, r3, #22
 8001248:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800124a:	6822      	ldr	r2, [r4, #0]
 800124c:	6953      	ldr	r3, [r2, #20]
 800124e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001252:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001256:	b1a3      	cbz	r3, 8001282 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0308 	bic.w	r3, r3, #8
 8001260:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001262:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001264:	233f      	movs	r3, #63	@ 0x3f
 8001266:	4093      	lsls	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800126a:	2301      	movs	r3, #1
 800126c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001270:	2300      	movs	r3, #0
 8001272:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001276:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001278:	2b00      	cmp	r3, #0
 800127a:	d03f      	beq.n	80012fc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800127c:	4620      	mov	r0, r4
 800127e:	4798      	blx	r3
        return;
 8001280:	e03c      	b.n	80012fc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001282:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e7      	bne.n	8001258 <HAL_DMA_IRQHandler+0x12c>
 8001288:	e7eb      	b.n	8001262 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800128a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800128c:	b1a3      	cbz	r3, 80012b8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800128e:	4620      	mov	r0, r4
 8001290:	4798      	blx	r3
 8001292:	e011      	b.n	80012b8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800129a:	d109      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f022 0210 	bic.w	r2, r2, #16
 80012a2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80012aa:	2300      	movs	r3, #0
 80012ac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80012b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012b2:	b10b      	cbz	r3, 80012b8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80012b4:	4620      	mov	r0, r4
 80012b6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012ba:	b1fb      	cbz	r3, 80012fc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012be:	f013 0f01 	tst.w	r3, #1
 80012c2:	d017      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80012c4:	2305      	movs	r3, #5
 80012c6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80012ca:	6822      	ldr	r2, [r4, #0]
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80012d4:	9b01      	ldr	r3, [sp, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d804      	bhi.n	80012e8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f013 0f01 	tst.w	r3, #1
 80012e6:	d1f5      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80012ee:	2300      	movs	r3, #0
 80012f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80012f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80012f6:	b10b      	cbz	r3, 80012fc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80012f8:	4620      	mov	r0, r4
 80012fa:	4798      	blx	r3
}
 80012fc:	b003      	add	sp, #12
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	1b4e81b5 	.word	0x1b4e81b5

08001308 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001308:	2300      	movs	r3, #0
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f200 80e9 	bhi.w	80014e2 <HAL_GPIO_Init+0x1da>
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	e065      	b.n	80013e2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800131c:	2403      	movs	r4, #3
 800131e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001322:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001326:	68cc      	ldr	r4, [r1, #12]
 8001328:	fa04 f40e 	lsl.w	r4, r4, lr
 800132c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800132e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001332:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001336:	684a      	ldr	r2, [r1, #4]
 8001338:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800133c:	409a      	lsls	r2, r3
 800133e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001340:	6042      	str	r2, [r0, #4]
 8001342:	e05c      	b.n	80013fe <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	08dc      	lsrs	r4, r3, #3
 8001346:	3408      	adds	r4, #8
 8001348:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134c:	f003 0507 	and.w	r5, r3, #7
 8001350:	00ad      	lsls	r5, r5, #2
 8001352:	f04f 0e0f 	mov.w	lr, #15
 8001356:	fa0e fe05 	lsl.w	lr, lr, r5
 800135a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135e:	690a      	ldr	r2, [r1, #16]
 8001360:	40aa      	lsls	r2, r5
 8001362:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800136a:	e05c      	b.n	8001426 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136c:	2207      	movs	r2, #7
 800136e:	e000      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 8001370:	2200      	movs	r2, #0
 8001372:	fa02 f20e 	lsl.w	r2, r2, lr
 8001376:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	3402      	adds	r4, #2
 800137a:	4d5a      	ldr	r5, [pc, #360]	@ (80014e4 <HAL_GPIO_Init+0x1dc>)
 800137c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001380:	4a59      	ldr	r2, [pc, #356]	@ (80014e8 <HAL_GPIO_Init+0x1e0>)
 8001382:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001384:	ea6f 020c 	mvn.w	r2, ip
 8001388:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138c:	684e      	ldr	r6, [r1, #4]
 800138e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001392:	d001      	beq.n	8001398 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001394:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001398:	4c53      	ldr	r4, [pc, #332]	@ (80014e8 <HAL_GPIO_Init+0x1e0>)
 800139a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800139c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800139e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a2:	684e      	ldr	r6, [r1, #4]
 80013a4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80013a8:	d001      	beq.n	80013ae <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80013aa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80013ae:	4c4e      	ldr	r4, [pc, #312]	@ (80014e8 <HAL_GPIO_Init+0x1e0>)
 80013b0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80013b2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b8:	684e      	ldr	r6, [r1, #4]
 80013ba:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80013be:	d001      	beq.n	80013c4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80013c0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80013c4:	4c48      	ldr	r4, [pc, #288]	@ (80014e8 <HAL_GPIO_Init+0x1e0>)
 80013c6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	684d      	ldr	r5, [r1, #4]
 80013ce:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80013d2:	d001      	beq.n	80013d8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80013d4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80013d8:	4c43      	ldr	r4, [pc, #268]	@ (80014e8 <HAL_GPIO_Init+0x1e0>)
 80013da:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013dc:	3301      	adds	r3, #1
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	d87d      	bhi.n	80014de <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80013e2:	2201      	movs	r2, #1
 80013e4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	680c      	ldr	r4, [r1, #0]
 80013e8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80013ec:	ea32 0404 	bics.w	r4, r2, r4
 80013f0:	d1f4      	bne.n	80013dc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	684c      	ldr	r4, [r1, #4]
 80013f4:	f004 0403 	and.w	r4, r4, #3
 80013f8:	3c01      	subs	r4, #1
 80013fa:	2c01      	cmp	r4, #1
 80013fc:	d98b      	bls.n	8001316 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fe:	684a      	ldr	r2, [r1, #4]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	2a03      	cmp	r2, #3
 8001406:	d009      	beq.n	800141c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001408:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	005d      	lsls	r5, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	40aa      	lsls	r2, r5
 8001410:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001414:	688a      	ldr	r2, [r1, #8]
 8001416:	40aa      	lsls	r2, r5
 8001418:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800141a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141c:	684a      	ldr	r2, [r1, #4]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	2a02      	cmp	r2, #2
 8001424:	d08e      	beq.n	8001344 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001426:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001428:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001432:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001436:	684a      	ldr	r2, [r1, #4]
 8001438:	f002 0203 	and.w	r2, r2, #3
 800143c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001440:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001442:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	684a      	ldr	r2, [r1, #4]
 8001446:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800144a:	d0c7      	beq.n	80013dc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	2200      	movs	r2, #0
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <HAL_GPIO_Init+0x1e4>)
 8001452:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001454:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001458:	6454      	str	r4, [r2, #68]	@ 0x44
 800145a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800145c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001464:	089c      	lsrs	r4, r3, #2
 8001466:	1ca5      	adds	r5, r4, #2
 8001468:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <HAL_GPIO_Init+0x1dc>)
 800146a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800146e:	f003 0e03 	and.w	lr, r3, #3
 8001472:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f20e 	lsl.w	r2, r2, lr
 800147c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_GPIO_Init+0x1e8>)
 8001482:	4290      	cmp	r0, r2
 8001484:	f43f af74 	beq.w	8001370 <HAL_GPIO_Init+0x68>
 8001488:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800148c:	4290      	cmp	r0, r2
 800148e:	d01a      	beq.n	80014c6 <HAL_GPIO_Init+0x1be>
 8001490:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001494:	4290      	cmp	r0, r2
 8001496:	d018      	beq.n	80014ca <HAL_GPIO_Init+0x1c2>
 8001498:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800149c:	4290      	cmp	r0, r2
 800149e:	d016      	beq.n	80014ce <HAL_GPIO_Init+0x1c6>
 80014a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014a4:	4290      	cmp	r0, r2
 80014a6:	d014      	beq.n	80014d2 <HAL_GPIO_Init+0x1ca>
 80014a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014ac:	4290      	cmp	r0, r2
 80014ae:	d012      	beq.n	80014d6 <HAL_GPIO_Init+0x1ce>
 80014b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d010      	beq.n	80014da <HAL_GPIO_Init+0x1d2>
 80014b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014bc:	4290      	cmp	r0, r2
 80014be:	f43f af55 	beq.w	800136c <HAL_GPIO_Init+0x64>
 80014c2:	2208      	movs	r2, #8
 80014c4:	e755      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 80014c6:	2201      	movs	r2, #1
 80014c8:	e753      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 80014ca:	2202      	movs	r2, #2
 80014cc:	e751      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 80014ce:	2203      	movs	r2, #3
 80014d0:	e74f      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 80014d2:	2204      	movs	r2, #4
 80014d4:	e74d      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 80014d6:	2205      	movs	r2, #5
 80014d8:	e74b      	b.n	8001372 <HAL_GPIO_Init+0x6a>
 80014da:	2206      	movs	r2, #6
 80014dc:	e749      	b.n	8001372 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80014de:	b002      	add	sp, #8
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
 80014e2:	4770      	bx	lr
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40013c00 	.word	0x40013c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	b10a      	cbz	r2, 80014fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	6181      	str	r1, [r0, #24]
 80014f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	0409      	lsls	r1, r1, #16
 80014fc:	6181      	str	r1, [r0, #24]
  }
}
 80014fe:	4770      	bx	lr

08001500 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	2800      	cmp	r0, #0
 8001502:	f000 81e0 	beq.w	80018c6 <HAL_RCC_OscConfig+0x3c6>
{
 8001506:	b570      	push	{r4, r5, r6, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150c:	6803      	ldr	r3, [r0, #0]
 800150e:	f013 0f01 	tst.w	r3, #1
 8001512:	d03b      	beq.n	800158c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001514:	4b9f      	ldr	r3, [pc, #636]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b04      	cmp	r3, #4
 800151e:	d02c      	beq.n	800157a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001520:	4b9c      	ldr	r3, [pc, #624]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001528:	2b08      	cmp	r3, #8
 800152a:	d021      	beq.n	8001570 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d04f      	beq.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001538:	d052      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe0>
 800153a:	4b96      	ldr	r3, [pc, #600]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800154a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800154c:	6863      	ldr	r3, [r4, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d050      	beq.n	80015f4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff f871 	bl	8000638 <HAL_GetTick>
 8001556:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001558:	4b8e      	ldr	r3, [pc, #568]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001560:	d114      	bne.n	800158c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001562:	f7ff f869 	bl	8000638 <HAL_GetTick>
 8001566:	1b40      	subs	r0, r0, r5
 8001568:	2864      	cmp	r0, #100	@ 0x64
 800156a:	d9f5      	bls.n	8001558 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800156c:	2003      	movs	r0, #3
 800156e:	e1b1      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001570:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001578:	d0d8      	beq.n	800152c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157a:	4b86      	ldr	r3, [pc, #536]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001582:	d003      	beq.n	800158c <HAL_RCC_OscConfig+0x8c>
 8001584:	6863      	ldr	r3, [r4, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 819f 	beq.w	80018ca <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	f013 0f02 	tst.w	r3, #2
 8001592:	d054      	beq.n	800163e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001594:	4b7f      	ldr	r3, [pc, #508]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f013 0f0c 	tst.w	r3, #12
 800159c:	d03e      	beq.n	800161c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b7d      	ldr	r3, [pc, #500]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d033      	beq.n	8001612 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015aa:	68e3      	ldr	r3, [r4, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d068      	beq.n	8001682 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b79      	ldr	r3, [pc, #484]	@ (8001798 <HAL_RCC_OscConfig+0x298>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff f83f 	bl	8000638 <HAL_GetTick>
 80015ba:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4b75      	ldr	r3, [pc, #468]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f013 0f02 	tst.w	r3, #2
 80015c4:	d154      	bne.n	8001670 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff f837 	bl	8000638 <HAL_GetTick>
 80015ca:	1b40      	subs	r0, r0, r5
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d9f5      	bls.n	80015bc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
 80015d2:	e17f      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	4a6f      	ldr	r2, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e7b5      	b.n	800154c <HAL_RCC_OscConfig+0x4c>
 80015e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e7ab      	b.n	800154c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80015f4:	f7ff f820 	bl	8000638 <HAL_GetTick>
 80015f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b66      	ldr	r3, [pc, #408]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001602:	d0c3      	beq.n	800158c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff f818 	bl	8000638 <HAL_GetTick>
 8001608:	1b40      	subs	r0, r0, r5
 800160a:	2864      	cmp	r0, #100	@ 0x64
 800160c:	d9f5      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800160e:	2003      	movs	r0, #3
 8001610:	e160      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001612:	4b60      	ldr	r3, [pc, #384]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800161a:	d1c6      	bne.n	80015aa <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161c:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f013 0f02 	tst.w	r3, #2
 8001624:	d003      	beq.n	800162e <HAL_RCC_OscConfig+0x12e>
 8001626:	68e3      	ldr	r3, [r4, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 8150 	bne.w	80018ce <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4a59      	ldr	r2, [pc, #356]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001636:	6921      	ldr	r1, [r4, #16]
 8001638:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800163c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	f013 0f08 	tst.w	r3, #8
 8001644:	d042      	beq.n	80016cc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001646:	6963      	ldr	r3, [r4, #20]
 8001648:	b36b      	cbz	r3, 80016a6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <HAL_RCC_OscConfig+0x298>)
 800164c:	2201      	movs	r2, #1
 800164e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7fe fff1 	bl	8000638 <HAL_GetTick>
 8001656:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	4b4e      	ldr	r3, [pc, #312]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165c:	f013 0f02 	tst.w	r3, #2
 8001660:	d134      	bne.n	80016cc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001662:	f7fe ffe9 	bl	8000638 <HAL_GetTick>
 8001666:	1b40      	subs	r0, r0, r5
 8001668:	2802      	cmp	r0, #2
 800166a:	d9f5      	bls.n	8001658 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800166c:	2003      	movs	r0, #3
 800166e:	e131      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4a48      	ldr	r2, [pc, #288]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001678:	6921      	ldr	r1, [r4, #16]
 800167a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e7dd      	b.n	800163e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <HAL_RCC_OscConfig+0x298>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001688:	f7fe ffd6 	bl	8000638 <HAL_GetTick>
 800168c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f013 0f02 	tst.w	r3, #2
 8001696:	d0d2      	beq.n	800163e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001698:	f7fe ffce 	bl	8000638 <HAL_GetTick>
 800169c:	1b40      	subs	r0, r0, r5
 800169e:	2802      	cmp	r0, #2
 80016a0:	d9f5      	bls.n	800168e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
 80016a4:	e116      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <HAL_RCC_OscConfig+0x298>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7fe ffc3 	bl	8000638 <HAL_GetTick>
 80016b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80016b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b8:	f013 0f02 	tst.w	r3, #2
 80016bc:	d006      	beq.n	80016cc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7fe ffbb 	bl	8000638 <HAL_GetTick>
 80016c2:	1b40      	subs	r0, r0, r5
 80016c4:	2802      	cmp	r0, #2
 80016c6:	d9f5      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80016c8:	2003      	movs	r0, #3
 80016ca:	e103      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	f013 0f04 	tst.w	r3, #4
 80016d2:	d077      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80016dc:	d133      	bne.n	8001746 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 80016e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016f6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	4b28      	ldr	r3, [pc, #160]	@ (800179c <HAL_RCC_OscConfig+0x29c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001700:	d023      	beq.n	800174a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	68a3      	ldr	r3, [r4, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d034      	beq.n	8001772 <HAL_RCC_OscConfig+0x272>
 8001708:	2b05      	cmp	r3, #5
 800170a:	d038      	beq.n	800177e <HAL_RCC_OscConfig+0x27e>
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800170e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	671a      	str	r2, [r3, #112]	@ 0x70
 8001716:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001718:	f022 0204 	bic.w	r2, r2, #4
 800171c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d03d      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7fe ff88 	bl	8000638 <HAL_GetTick>
 8001728:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	f013 0f02 	tst.w	r3, #2
 8001732:	d146      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7fe ff80 	bl	8000638 <HAL_GetTick>
 8001738:	1b80      	subs	r0, r0, r6
 800173a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800173e:	4298      	cmp	r0, r3
 8001740:	d9f3      	bls.n	800172a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001742:	2003      	movs	r0, #3
 8001744:	e0c6      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2500      	movs	r5, #0
 8001748:	e7d6      	b.n	80016f8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4a14      	ldr	r2, [pc, #80]	@ (800179c <HAL_RCC_OscConfig+0x29c>)
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001754:	f7fe ff70 	bl	8000638 <HAL_GetTick>
 8001758:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_RCC_OscConfig+0x29c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001762:	d1ce      	bne.n	8001702 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001764:	f7fe ff68 	bl	8000638 <HAL_GetTick>
 8001768:	1b80      	subs	r0, r0, r6
 800176a:	2802      	cmp	r0, #2
 800176c:	d9f5      	bls.n	800175a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e0b0      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001774:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	@ 0x70
 800177c:	e7cf      	b.n	800171e <HAL_RCC_OscConfig+0x21e>
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_RCC_OscConfig+0x294>)
 8001780:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001782:	f042 0204 	orr.w	r2, r2, #4
 8001786:	671a      	str	r2, [r3, #112]	@ 0x70
 8001788:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001790:	e7c5      	b.n	800171e <HAL_RCC_OscConfig+0x21e>
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	42470000 	.word	0x42470000
 800179c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7fe ff4a 	bl	8000638 <HAL_GetTick>
 80017a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	f013 0f02 	tst.w	r3, #2
 80017ae:	d008      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7fe ff42 	bl	8000638 <HAL_GetTick>
 80017b4:	1b80      	subs	r0, r0, r6
 80017b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017ba:	4298      	cmp	r0, r3
 80017bc:	d9f3      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e088      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c2:	b9ed      	cbnz	r5, 8001800 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c4:	69a3      	ldr	r3, [r4, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8083 	beq.w	80018d2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017cc:	4a48      	ldr	r2, [pc, #288]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 80017ce:	6892      	ldr	r2, [r2, #8]
 80017d0:	f002 020c 	and.w	r2, r2, #12
 80017d4:	2a08      	cmp	r2, #8
 80017d6:	d051      	beq.n	800187c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d017      	beq.n	800180c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <HAL_RCC_OscConfig+0x3f4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7fe ff29 	bl	8000638 <HAL_GetTick>
 80017e6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e8:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80017f0:	d042      	beq.n	8001878 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7fe ff21 	bl	8000638 <HAL_GetTick>
 80017f6:	1b00      	subs	r0, r0, r4
 80017f8:	2802      	cmp	r0, #2
 80017fa:	d9f5      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017fc:	2003      	movs	r0, #3
 80017fe:	e069      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4a3b      	ldr	r2, [pc, #236]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 8001802:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	e7db      	b.n	80017c4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b39      	ldr	r3, [pc, #228]	@ (80018f4 <HAL_RCC_OscConfig+0x3f4>)
 800180e:	2200      	movs	r2, #0
 8001810:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001812:	f7fe ff11 	bl	8000638 <HAL_GetTick>
 8001816:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001820:	d006      	beq.n	8001830 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7fe ff09 	bl	8000638 <HAL_GetTick>
 8001826:	1b40      	subs	r0, r0, r5
 8001828:	2802      	cmp	r0, #2
 800182a:	d9f5      	bls.n	8001818 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800182c:	2003      	movs	r0, #3
 800182e:	e051      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001830:	69e3      	ldr	r3, [r4, #28]
 8001832:	6a22      	ldr	r2, [r4, #32]
 8001834:	4313      	orrs	r3, r2
 8001836:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001838:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800183c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800183e:	0852      	lsrs	r2, r2, #1
 8001840:	3a01      	subs	r2, #1
 8001842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001846:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001848:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800184c:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 800184e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <HAL_RCC_OscConfig+0x3f4>)
 8001852:	2201      	movs	r2, #1
 8001854:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001856:	f7fe feef 	bl	8000638 <HAL_GetTick>
 800185a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7fe fee7 	bl	8000638 <HAL_GetTick>
 800186a:	1b00      	subs	r0, r0, r4
 800186c:	2802      	cmp	r0, #2
 800186e:	d9f5      	bls.n	800185c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001870:	2003      	movs	r0, #3
 8001872:	e02f      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
 8001876:	e02d      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
 8001878:	2000      	movs	r0, #0
 800187a:	e02b      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	2b01      	cmp	r3, #1
 800187e:	d02b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x3f0>)
 8001882:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001888:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188a:	4291      	cmp	r1, r2
 800188c:	d126      	bne.n	80018dc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001892:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001894:	428a      	cmp	r2, r1
 8001896:	d123      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800189e:	401a      	ands	r2, r3
 80018a0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80018a4:	d11e      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80018aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018ac:	0852      	lsrs	r2, r2, #1
 80018ae:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018b6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80018ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018bc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80018c0:	d114      	bne.n	80018ec <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80018c2:	2000      	movs	r0, #0
 80018c4:	e006      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
}
 80018c8:	4770      	bx	lr
        return HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
 80018cc:	e002      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80018d2:	2000      	movs	r0, #0
}
 80018d4:	b002      	add	sp, #8
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
 80018da:	e7fb      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
 80018de:	e7f9      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
 80018e0:	2001      	movs	r0, #1
 80018e2:	e7f7      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
 80018e4:	2001      	movs	r0, #1
 80018e6:	e7f5      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
 80018e8:	2001      	movs	r0, #1
 80018ea:	e7f3      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
 80018ec:	2001      	movs	r0, #1
 80018ee:	e7f1      	b.n	80018d4 <HAL_RCC_OscConfig+0x3d4>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470000 	.word	0x42470000

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fa:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d001      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001906:	482f      	ldr	r0, [pc, #188]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001908:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800190a:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001918:	d02c      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800191c:	6858      	ldr	r0, [r3, #4]
 800191e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001922:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001926:	ebbc 0c00 	subs.w	ip, ip, r0
 800192a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800192e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001932:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001936:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800193a:	ebb1 010c 	subs.w	r1, r1, ip
 800193e:	eb63 030e 	sbc.w	r3, r3, lr
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001948:	00c9      	lsls	r1, r1, #3
 800194a:	eb11 0c00 	adds.w	ip, r1, r0
 800194e:	f143 0300 	adc.w	r3, r3, #0
 8001952:	0299      	lsls	r1, r3, #10
 8001954:	2300      	movs	r3, #0
 8001956:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800195a:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800195e:	f7fe fc8f 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001962:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800196e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001972:	e7c9      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001976:	6858      	ldr	r0, [r3, #4]
 8001978:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800197c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001980:	ebbc 0c00 	subs.w	ip, ip, r0
 8001984:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001988:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800198c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001990:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001994:	ebb1 010c 	subs.w	r1, r1, ip
 8001998:	eb63 030e 	sbc.w	r3, r3, lr
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019a2:	00c9      	lsls	r1, r1, #3
 80019a4:	eb11 0c00 	adds.w	ip, r1, r0
 80019a8:	f143 0300 	adc.w	r3, r3, #0
 80019ac:	0299      	lsls	r1, r3, #10
 80019ae:	2300      	movs	r3, #0
 80019b0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80019b4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80019b8:	f7fe fc62 	bl	8000280 <__aeabi_uldivmod>
 80019bc:	e7d1      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x6a>
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400

080019c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80019c8:	2800      	cmp	r0, #0
 80019ca:	f000 809b 	beq.w	8001b04 <HAL_RCC_ClockConfig+0x13c>
{
 80019ce:	b570      	push	{r4, r5, r6, lr}
 80019d0:	460d      	mov	r5, r1
 80019d2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <HAL_RCC_ClockConfig+0x14c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	428b      	cmp	r3, r1
 80019de:	d208      	bcs.n	80019f2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e0:	b2cb      	uxtb	r3, r1
 80019e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <HAL_RCC_ClockConfig+0x14c>)
 80019e4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	428b      	cmp	r3, r1
 80019ee:	f040 808b 	bne.w	8001b08 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	f013 0f02 	tst.w	r3, #2
 80019f8:	d017      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fa:	f013 0f04 	tst.w	r3, #4
 80019fe:	d004      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4a45      	ldr	r2, [pc, #276]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a02:	6893      	ldr	r3, [r2, #8]
 8001a04:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a08:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f013 0f08 	tst.w	r3, #8
 8001a10:	d004      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a12:	4a41      	ldr	r2, [pc, #260]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a14:	6893      	ldr	r3, [r2, #8]
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a1e:	6893      	ldr	r3, [r2, #8]
 8001a20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a24:	68a1      	ldr	r1, [r4, #8]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f013 0f01 	tst.w	r3, #1
 8001a30:	d032      	beq.n	8001a98 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	6863      	ldr	r3, [r4, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d021      	beq.n	8001a7c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a38:	1e9a      	subs	r2, r3, #2
 8001a3a:	2a01      	cmp	r2, #1
 8001a3c:	d925      	bls.n	8001a8a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4a36      	ldr	r2, [pc, #216]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	f012 0f02 	tst.w	r2, #2
 8001a46:	d061      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a48:	4933      	ldr	r1, [pc, #204]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a4a:	688a      	ldr	r2, [r1, #8]
 8001a4c:	f022 0203 	bic.w	r2, r2, #3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001a54:	f7fe fdf0 	bl	8000638 <HAL_GetTick>
 8001a58:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	6862      	ldr	r2, [r4, #4]
 8001a64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7fe fde5 	bl	8000638 <HAL_GetTick>
 8001a6e:	1b80      	subs	r0, r0, r6
 8001a70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a74:	4298      	cmp	r0, r3
 8001a76:	d9f0      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001a78:	2003      	movs	r0, #3
 8001a7a:	e042      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001a84:	d1e0      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
 8001a88:	e03b      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4a23      	ldr	r2, [pc, #140]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001a92:	d1d9      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e034      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <HAL_RCC_ClockConfig+0x14c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	42ab      	cmp	r3, r5
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	b2ea      	uxtb	r2, r5
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_RCC_ClockConfig+0x14c>)
 8001aa8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	42ab      	cmp	r3, r5
 8001ab2:	d12d      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	f013 0f04 	tst.w	r3, #4
 8001aba:	d006      	beq.n	8001aca <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001abe:	6893      	ldr	r3, [r2, #8]
 8001ac0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001ac4:	68e1      	ldr	r1, [r4, #12]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	f013 0f08 	tst.w	r3, #8
 8001ad0:	d007      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001ad4:	6893      	ldr	r3, [r2, #8]
 8001ad6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001ada:	6921      	ldr	r1, [r4, #16]
 8001adc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ae0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae2:	f7ff ff09 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_RCC_ClockConfig+0x150>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001aee:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <HAL_RCC_ClockConfig+0x154>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	40d8      	lsrs	r0, r3
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_RCC_ClockConfig+0x158>)
 8001af6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_RCC_ClockConfig+0x15c>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	f7ff f8d6 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
}
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b04:	2001      	movs	r0, #1
}
 8001b06:	4770      	bx	lr
      return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e7fa      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7f8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
 8001b12:	e7f6      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
 8001b14:	40023c00 	.word	0x40023c00
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08003c4c 	.word	0x08003c4c
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000008 	.word	0x20000008

08001b28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b28:	4b01      	ldr	r3, [pc, #4]	@ (8001b30 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b36:	f7ff fff7 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b42:	4a03      	ldr	r2, [pc, #12]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b46:	40d8      	lsrs	r0, r3
 8001b48:	bd08      	pop	{r3, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08003c44 	.word	0x08003c44

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b56:	f7ff ffe7 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b62:	4a03      	ldr	r2, [pc, #12]	@ (8001b70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b66:	40d8      	lsrs	r0, r3
 8001b68:	bd08      	pop	{r3, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003c44 	.word	0x08003c44

08001b74 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	6a19      	ldr	r1, [r3, #32]
 8001b78:	f241 1211 	movw	r2, #4369	@ 0x1111
 8001b7c:	4211      	tst	r1, r2
 8001b7e:	d108      	bne.n	8001b92 <HAL_TIM_Base_Stop+0x1e>
 8001b80:	6a19      	ldr	r1, [r3, #32]
 8001b82:	f240 4244 	movw	r2, #1092	@ 0x444
 8001b86:	4211      	tst	r1, r2
 8001b88:	d103      	bne.n	8001b92 <HAL_TIM_Base_Stop+0x1e>
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001b98:	2000      	movs	r0, #0
 8001b9a:	4770      	bx	lr

08001b9c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b9c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d137      	bne.n	8001c16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	6802      	ldr	r2, [r0, #0]
 8001bae:	68d3      	ldr	r3, [r2, #12]
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb6:	6803      	ldr	r3, [r0, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <HAL_TIM_Base_Start_IT+0x84>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bc2:	d01d      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001bc4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d019      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001bcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d015      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001bd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d011      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001bdc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001be4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d009      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
 8001bec:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d005      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	2a06      	cmp	r2, #6
 8001c08:	d007      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c12:	2000      	movs	r0, #0
 8001c14:	4770      	bx	lr
    return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
 8001c18:	4770      	bx	lr
  return HAL_OK;
 8001c1a:	2000      	movs	r0, #0
}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000

08001c24 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c24:	4770      	bx	lr

08001c26 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c28:	4770      	bx	lr

08001c2a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_TIM_IRQHandler>:
{
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001c30:	6803      	ldr	r3, [r0, #0]
 8001c32:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c34:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c36:	f015 0f02 	tst.w	r5, #2
 8001c3a:	d010      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c3c:	f016 0f02 	tst.w	r6, #2
 8001c40:	d00d      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c42:	f06f 0202 	mvn.w	r2, #2
 8001c46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c4c:	6803      	ldr	r3, [r0, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f013 0f03 	tst.w	r3, #3
 8001c54:	d05e      	beq.n	8001d14 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	f7ff ffe6 	bl	8001c26 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c5e:	f015 0f04 	tst.w	r5, #4
 8001c62:	d012      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c64:	f016 0f04 	tst.w	r6, #4
 8001c68:	d00f      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	f06f 0204 	mvn.w	r2, #4
 8001c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001c7e:	d04f      	beq.n	8001d20 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ffd0 	bl	8001c26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	2300      	movs	r3, #0
 8001c88:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c8a:	f015 0f08 	tst.w	r5, #8
 8001c8e:	d012      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c90:	f016 0f08 	tst.w	r6, #8
 8001c94:	d00f      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	f06f 0208 	mvn.w	r2, #8
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f013 0f03 	tst.w	r3, #3
 8001caa:	d040      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff ffba 	bl	8001c26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cb6:	f015 0f10 	tst.w	r5, #16
 8001cba:	d012      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cbc:	f016 0f10 	tst.w	r6, #16
 8001cc0:	d00f      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	f06f 0210 	mvn.w	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001cd6:	d031      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff ffa4 	bl	8001c26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ce2:	f015 0f01 	tst.w	r5, #1
 8001ce6:	d002      	beq.n	8001cee <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ce8:	f016 0f01 	tst.w	r6, #1
 8001cec:	d12d      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cee:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001cf2:	d002      	beq.n	8001cfa <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cf4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001cf8:	d12f      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cfa:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001cfe:	d002      	beq.n	8001d06 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d00:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001d04:	d131      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d06:	f015 0f20 	tst.w	r5, #32
 8001d0a:	d002      	beq.n	8001d12 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d0c:	f016 0f20 	tst.w	r6, #32
 8001d10:	d133      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x14e>
}
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d14:	f7ff ff86 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff ff85 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d1e:	e79c      	b.n	8001c5a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff ff7f 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ff7e 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d2c:	e7ab      	b.n	8001c86 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff ff78 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff ff77 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d3a:	e7ba      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7ff ff71 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff ff70 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d48:	e7c9      	b.n	8001cde <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	f06f 0201 	mvn.w	r2, #1
 8001d50:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7fe fc8c 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
 8001d58:	e7c9      	b.n	8001cee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f000 f8f1 	bl	8001f4a <HAL_TIMEx_BreakCallback>
 8001d68:	e7c7      	b.n	8001cfa <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d70:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff ff59 	bl	8001c2a <HAL_TIM_TriggerCallback>
 8001d78:	e7c5      	b.n	8001d06 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	f06f 0220 	mvn.w	r2, #32
 8001d80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001d82:	4620      	mov	r0, r4
 8001d84:	f000 f8e0 	bl	8001f48 <HAL_TIMEx_CommutCallback>
}
 8001d88:	e7c3      	b.n	8001d12 <HAL_TIM_IRQHandler+0xe6>
	...

08001d8c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d8e:	4a34      	ldr	r2, [pc, #208]	@ (8001e60 <TIM_Base_SetConfig+0xd4>)
 8001d90:	4290      	cmp	r0, r2
 8001d92:	d012      	beq.n	8001dba <TIM_Base_SetConfig+0x2e>
 8001d94:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001d98:	d00f      	beq.n	8001dba <TIM_Base_SetConfig+0x2e>
 8001d9a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d00b      	beq.n	8001dba <TIM_Base_SetConfig+0x2e>
 8001da2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001da6:	4290      	cmp	r0, r2
 8001da8:	d007      	beq.n	8001dba <TIM_Base_SetConfig+0x2e>
 8001daa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d003      	beq.n	8001dba <TIM_Base_SetConfig+0x2e>
 8001db2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001db6:	4290      	cmp	r0, r2
 8001db8:	d103      	bne.n	8001dc2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001dbe:	684a      	ldr	r2, [r1, #4]
 8001dc0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dc2:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <TIM_Base_SetConfig+0xd4>)
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d02a      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001dc8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001dcc:	d027      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001dce:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001dd2:	4290      	cmp	r0, r2
 8001dd4:	d023      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001dd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dda:	4290      	cmp	r0, r2
 8001ddc:	d01f      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001dde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001de2:	4290      	cmp	r0, r2
 8001de4:	d01b      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001de6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001dea:	4290      	cmp	r0, r2
 8001dec:	d017      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001dee:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d013      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d00f      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001dfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e02:	4290      	cmp	r0, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001e06:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001e0a:	4290      	cmp	r0, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001e0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e12:	4290      	cmp	r0, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x92>
 8001e16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	d103      	bne.n	8001e26 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e22:	68ca      	ldr	r2, [r1, #12]
 8001e24:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e2a:	694a      	ldr	r2, [r1, #20]
 8001e2c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001e2e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e30:	688b      	ldr	r3, [r1, #8]
 8001e32:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e34:	680b      	ldr	r3, [r1, #0]
 8001e36:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <TIM_Base_SetConfig+0xd4>)
 8001e3a:	4298      	cmp	r0, r3
 8001e3c:	d003      	beq.n	8001e46 <TIM_Base_SetConfig+0xba>
 8001e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e42:	4298      	cmp	r0, r3
 8001e44:	d101      	bne.n	8001e4a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e46:	690b      	ldr	r3, [r1, #16]
 8001e48:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e4e:	6903      	ldr	r3, [r0, #16]
 8001e50:	f013 0f01 	tst.w	r3, #1
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e56:	6903      	ldr	r3, [r0, #16]
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6103      	str	r3, [r0, #16]
  }
}
 8001e5e:	4770      	bx	lr
 8001e60:	40010000 	.word	0x40010000

08001e64 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001e64:	b340      	cbz	r0, 8001eb8 <HAL_TIM_Base_Init+0x54>
{
 8001e66:	b510      	push	{r4, lr}
 8001e68:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e6e:	b1f3      	cbz	r3, 8001eae <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	2302      	movs	r3, #2
 8001e72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e76:	4621      	mov	r1, r4
 8001e78:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e7c:	f7ff ff86 	bl	8001d8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001e8a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001e8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001e92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e96:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e9e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001ea2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001ea6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001eaa:	2000      	movs	r0, #0
}
 8001eac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001eae:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	f7fe fd93 	bl	80009dc <HAL_TIM_Base_MspInit>
 8001eb6:	e7db      	b.n	8001e70 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
}
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ebc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001ec0:	2a01      	cmp	r2, #1
 8001ec2:	d03d      	beq.n	8001f40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001ec4:	b410      	push	{r4}
 8001ec6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ed8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eda:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ede:	6808      	ldr	r0, [r1, #0]
 8001ee0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ee4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4816      	ldr	r0, [pc, #88]	@ (8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001eea:	4282      	cmp	r2, r0
 8001eec:	d01a      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001eee:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001ef2:	d017      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001ef4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001ef8:	4282      	cmp	r2, r0
 8001efa:	d013      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001efc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f00:	4282      	cmp	r2, r0
 8001f02:	d00f      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f04:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f08:	4282      	cmp	r2, r0
 8001f0a:	d00b      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f0c:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001f10:	4282      	cmp	r2, r0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f14:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8001f18:	4282      	cmp	r2, r0
 8001f1a:	d003      	beq.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f1c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001f20:	4282      	cmp	r2, r0
 8001f22:	d104      	bne.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f24:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f28:	6849      	ldr	r1, [r1, #4]
 8001f2a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f2c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f3e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001f40:	2002      	movs	r0, #2
}
 8001f42:	4770      	bx	lr
 8001f44:	40010000 	.word	0x40010000

08001f48 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f48:	4770      	bx	lr

08001f4a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f4a:	4770      	bx	lr

08001f4c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4e:	f102 030c 	add.w	r3, r2, #12
 8001f52:	e853 3f00 	ldrex	r3, [r3]
 8001f56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5a:	320c      	adds	r2, #12
 8001f5c:	e842 3100 	strex	r1, r3, [r2]
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d1f3      	bne.n	8001f4c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f64:	2320      	movs	r3, #32
 8001f66:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8001f6a:	4770      	bx	lr

08001f6c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6e:	f102 030c 	add.w	r3, r2, #12
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	320c      	adds	r2, #12
 8001f7c:	e842 3100 	strex	r1, r3, [r2]
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d1f3      	bne.n	8001f6c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f84:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f86:	f102 0314 	add.w	r3, r2, #20
 8001f8a:	e853 3f00 	ldrex	r3, [r3]
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f92:	3214      	adds	r2, #20
 8001f94:	e842 3100 	strex	r1, r3, [r2]
 8001f98:	2900      	cmp	r1, #0
 8001f9a:	d1f3      	bne.n	8001f84 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f9c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d005      	beq.n	8001fae <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001fac:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb0:	f102 030c 	add.w	r3, r2, #12
 8001fb4:	e853 3f00 	ldrex	r3, [r3]
 8001fb8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbc:	320c      	adds	r2, #12
 8001fbe:	e842 3100 	strex	r1, r3, [r2]
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	d1f3      	bne.n	8001fae <UART_EndRxTransfer+0x42>
 8001fc6:	e7ec      	b.n	8001fa2 <UART_EndRxTransfer+0x36>

08001fc8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fc8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b21      	cmp	r3, #33	@ 0x21
 8001fd0:	d001      	beq.n	8001fd6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2002      	movs	r0, #2
  }
}
 8001fd4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd6:	6883      	ldr	r3, [r0, #8]
 8001fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fdc:	d017      	beq.n	800200e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fde:	6a03      	ldr	r3, [r0, #32]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	6202      	str	r2, [r0, #32]
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	6803      	ldr	r3, [r0, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001fea:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8001ff4:	b94b      	cbnz	r3, 800200a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ff6:	6802      	ldr	r2, [r0, #0]
 8001ff8:	68d3      	ldr	r3, [r2, #12]
 8001ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ffe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002000:	6802      	ldr	r2, [r0, #0]
 8002002:	68d3      	ldr	r3, [r2, #12]
 8002004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002008:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800200e:	6903      	ldr	r3, [r0, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e4      	bne.n	8001fde <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002014:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	6802      	ldr	r2, [r0, #0]
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002020:	6a03      	ldr	r3, [r0, #32]
 8002022:	3302      	adds	r3, #2
 8002024:	6203      	str	r3, [r0, #32]
 8002026:	e7e0      	b.n	8001fea <UART_Transmit_IT+0x22>

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800202c:	6802      	ldr	r2, [r0, #0]
 800202e:	6913      	ldr	r3, [r2, #16]
 8002030:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002034:	68c1      	ldr	r1, [r0, #12]
 8002036:	430b      	orrs	r3, r1
 8002038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203a:	6883      	ldr	r3, [r0, #8]
 800203c:	6902      	ldr	r2, [r0, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	6943      	ldr	r3, [r0, #20]
 8002042:	431a      	orrs	r2, r3
 8002044:	69c3      	ldr	r3, [r0, #28]
 8002046:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002048:	6801      	ldr	r1, [r0, #0]
 800204a:	68cb      	ldr	r3, [r1, #12]
 800204c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002050:	f023 030c 	bic.w	r3, r3, #12
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	6953      	ldr	r3, [r2, #20]
 800205c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002060:	6981      	ldr	r1, [r0, #24]
 8002062:	430b      	orrs	r3, r1
 8002064:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002066:	6803      	ldr	r3, [r0, #0]
 8002068:	4a31      	ldr	r2, [pc, #196]	@ (8002130 <UART_SetConfig+0x108>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d006      	beq.n	800207c <UART_SetConfig+0x54>
 800206e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002072:	4293      	cmp	r3, r2
 8002074:	d002      	beq.n	800207c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002076:	f7ff fd5d 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 800207a:	e001      	b.n	8002080 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800207c:	f7ff fd6a 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002080:	69e3      	ldr	r3, [r4, #28]
 8002082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002086:	d029      	beq.n	80020dc <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002088:	2100      	movs	r1, #0
 800208a:	1803      	adds	r3, r0, r0
 800208c:	4149      	adcs	r1, r1
 800208e:	181b      	adds	r3, r3, r0
 8002090:	f141 0100 	adc.w	r1, r1, #0
 8002094:	00c9      	lsls	r1, r1, #3
 8002096:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1818      	adds	r0, r3, r0
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80020a4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80020a8:	f141 0100 	adc.w	r1, r1, #0
 80020ac:	f7fe f8e8 	bl	8000280 <__aeabi_uldivmod>
 80020b0:	4a20      	ldr	r2, [pc, #128]	@ (8002134 <UART_SetConfig+0x10c>)
 80020b2:	fba2 3100 	umull	r3, r1, r2, r0
 80020b6:	0949      	lsrs	r1, r1, #5
 80020b8:	2364      	movs	r3, #100	@ 0x64
 80020ba:	fb03 0311 	mls	r3, r3, r1, r0
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	3332      	adds	r3, #50	@ 0x32
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020cc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	6821      	ldr	r1, [r4, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }
}
 80020da:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020dc:	2300      	movs	r3, #0
 80020de:	1802      	adds	r2, r0, r0
 80020e0:	eb43 0103 	adc.w	r1, r3, r3
 80020e4:	1812      	adds	r2, r2, r0
 80020e6:	f141 0100 	adc.w	r1, r1, #0
 80020ea:	00c9      	lsls	r1, r1, #3
 80020ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f0:	00d2      	lsls	r2, r2, #3
 80020f2:	1810      	adds	r0, r2, r0
 80020f4:	f141 0100 	adc.w	r1, r1, #0
 80020f8:	6862      	ldr	r2, [r4, #4]
 80020fa:	1892      	adds	r2, r2, r2
 80020fc:	415b      	adcs	r3, r3
 80020fe:	f7fe f8bf 	bl	8000280 <__aeabi_uldivmod>
 8002102:	4a0c      	ldr	r2, [pc, #48]	@ (8002134 <UART_SetConfig+0x10c>)
 8002104:	fba2 3100 	umull	r3, r1, r2, r0
 8002108:	0949      	lsrs	r1, r1, #5
 800210a:	2364      	movs	r3, #100	@ 0x64
 800210c:	fb03 0311 	mls	r3, r3, r1, r0
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	3332      	adds	r3, #50	@ 0x32
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	005a      	lsls	r2, r3, #1
 800211c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002120:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	6821      	ldr	r1, [r4, #0]
 800212a:	4413      	add	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
 800212e:	e7d4      	b.n	80020da <UART_SetConfig+0xb2>
 8002130:	40011000 	.word	0x40011000
 8002134:	51eb851f 	.word	0x51eb851f

08002138 <UART_WaitOnFlagUntilTimeout>:
{
 8002138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800213c:	b083      	sub	sp, #12
 800213e:	4605      	mov	r5, r0
 8002140:	460e      	mov	r6, r1
 8002142:	4617      	mov	r7, r2
 8002144:	4699      	mov	r9, r3
 8002146:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	681c      	ldr	r4, [r3, #0]
 800214e:	ea36 0404 	bics.w	r4, r6, r4
 8002152:	bf0c      	ite	eq
 8002154:	2401      	moveq	r4, #1
 8002156:	2400      	movne	r4, #0
 8002158:	42bc      	cmp	r4, r7
 800215a:	d128      	bne.n	80021ae <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800215c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002160:	d0f3      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002162:	f7fe fa69 	bl	8000638 <HAL_GetTick>
 8002166:	eba0 0009 	sub.w	r0, r0, r9
 800216a:	4540      	cmp	r0, r8
 800216c:	d823      	bhi.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800216e:	f1b8 0f00 	cmp.w	r8, #0
 8002172:	d022      	beq.n	80021ba <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	f012 0f04 	tst.w	r2, #4
 800217c:	d0e5      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
 800217e:	2e80      	cmp	r6, #128	@ 0x80
 8002180:	d0e3      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
 8002182:	2e40      	cmp	r6, #64	@ 0x40
 8002184:	d0e1      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f012 0f08 	tst.w	r2, #8
 800218c:	d0dd      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800218e:	2400      	movs	r4, #0
 8002190:	9401      	str	r4, [sp, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800219c:	4628      	mov	r0, r5
 800219e:	f7ff fee5 	bl	8001f6c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021a2:	2308      	movs	r3, #8
 80021a4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80021a6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80021aa:	2001      	movs	r0, #1
 80021ac:	e000      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80021ae:	2000      	movs	r0, #0
}
 80021b0:	b003      	add	sp, #12
 80021b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e7fa      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x78>
 80021ba:	2003      	movs	r0, #3
 80021bc:	e7f8      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x78>

080021be <HAL_UART_Init>:
  if (huart == NULL)
 80021be:	b360      	cbz	r0, 800221a <HAL_UART_Init+0x5c>
{
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80021c4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80021c8:	b313      	cbz	r3, 8002210 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80021ca:	2324      	movs	r3, #36	@ 0x24
 80021cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	68d3      	ldr	r3, [r2, #12]
 80021d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff ff24 	bl	8002028 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e0:	6822      	ldr	r2, [r4, #0]
 80021e2:	6913      	ldr	r3, [r2, #16]
 80021e4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80021e8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	6953      	ldr	r3, [r2, #20]
 80021ee:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80021f2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	68d3      	ldr	r3, [r2, #12]
 80021f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021fc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	2000      	movs	r0, #0
 8002200:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002202:	2320      	movs	r3, #32
 8002204:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800220c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800220e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002210:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002214:	f7fe fc02 	bl	8000a1c <HAL_UART_MspInit>
 8002218:	e7d7      	b.n	80021ca <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800221a:	2001      	movs	r0, #1
}
 800221c:	4770      	bx	lr

0800221e <HAL_UART_Transmit>:
{
 800221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	d156      	bne.n	80022de <HAL_UART_Transmit+0xc0>
 8002230:	4604      	mov	r4, r0
 8002232:	460d      	mov	r5, r1
 8002234:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002236:	2900      	cmp	r1, #0
 8002238:	d055      	beq.n	80022e6 <HAL_UART_Transmit+0xc8>
 800223a:	b90a      	cbnz	r2, 8002240 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e04f      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002244:	2321      	movs	r3, #33	@ 0x21
 8002246:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800224a:	f7fe f9f5 	bl	8000638 <HAL_GetTick>
 800224e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002250:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002254:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002258:	68a3      	ldr	r3, [r4, #8]
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225e:	d002      	beq.n	8002266 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002260:	f04f 0800 	mov.w	r8, #0
 8002264:	e014      	b.n	8002290 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002266:	6923      	ldr	r3, [r4, #16]
 8002268:	b32b      	cbz	r3, 80022b6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800226a:	f04f 0800 	mov.w	r8, #0
 800226e:	e00f      	b.n	8002290 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002270:	2320      	movs	r3, #32
 8002272:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
 8002278:	e032      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800227a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002286:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002288:	b292      	uxth	r2, r2
 800228a:	3a01      	subs	r2, #1
 800228c:	b292      	uxth	r2, r2
 800228e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002290:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002292:	b29b      	uxth	r3, r3
 8002294:	b193      	cbz	r3, 80022bc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	9600      	str	r6, [sp, #0]
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff4a 	bl	8002138 <UART_WaitOnFlagUntilTimeout>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d1e3      	bne.n	8002270 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	d0e6      	beq.n	800227a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b4:	e7e7      	b.n	8002286 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80022b6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80022b8:	2500      	movs	r5, #0
 80022ba:	e7e9      	b.n	8002290 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022bc:	9600      	str	r6, [sp, #0]
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	2140      	movs	r1, #64	@ 0x40
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff37 	bl	8002138 <UART_WaitOnFlagUntilTimeout>
 80022ca:	b918      	cbnz	r0, 80022d4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80022cc:	2320      	movs	r3, #32
 80022ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80022d2:	e005      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80022d4:	2320      	movs	r3, #32
 80022d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80022da:	2003      	movs	r0, #3
 80022dc:	e000      	b.n	80022e0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80022de:	2002      	movs	r0, #2
}
 80022e0:	b002      	add	sp, #8
 80022e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
 80022e8:	e7fa      	b.n	80022e0 <HAL_UART_Transmit+0xc2>

080022ea <HAL_UART_TxCpltCallback>:
}
 80022ea:	4770      	bx	lr

080022ec <UART_EndTransmit_IT>:
{
 80022ec:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022ee:	6801      	ldr	r1, [r0, #0]
 80022f0:	68ca      	ldr	r2, [r1, #12]
 80022f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022f6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022f8:	2220      	movs	r2, #32
 80022fa:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80022fe:	f7ff fff4 	bl	80022ea <HAL_UART_TxCpltCallback>
}
 8002302:	2000      	movs	r0, #0
 8002304:	bd08      	pop	{r3, pc}

08002306 <HAL_UART_RxCpltCallback>:
}
 8002306:	4770      	bx	lr

08002308 <HAL_UART_RxHalfCpltCallback>:
}
 8002308:	4770      	bx	lr

0800230a <UART_DMAError>:
{
 800230a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800230c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002312:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b21      	cmp	r3, #33	@ 0x21
 800231a:	d010      	beq.n	800233e <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002324:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b22      	cmp	r3, #34	@ 0x22
 800232c:	d011      	beq.n	8002352 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800232e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8002336:	4620      	mov	r0, r4
 8002338:	f7fe fa06 	bl	8000748 <HAL_UART_ErrorCallback>
}
 800233c:	bd10      	pop	{r4, pc}
 800233e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002342:	2a00      	cmp	r2, #0
 8002344:	d0ea      	beq.n	800231c <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff fdfe 	bl	8001f4c <UART_EndTxTransfer>
 8002350:	e7e4      	b.n	800231c <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002352:	2a00      	cmp	r2, #0
 8002354:	d0eb      	beq.n	800232e <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff fe06 	bl	8001f6c <UART_EndRxTransfer>
 8002360:	e7e5      	b.n	800232e <UART_DMAError+0x24>

08002362 <UART_DMAAbortOnError>:
{
 8002362:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002364:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800236a:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800236c:	f7fe f9ec 	bl	8000748 <HAL_UART_ErrorCallback>
}
 8002370:	bd08      	pop	{r3, pc}

08002372 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002372:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b22      	cmp	r3, #34	@ 0x22
 800237a:	d169      	bne.n	8002450 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237c:	6883      	ldr	r3, [r0, #8]
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002382:	d04f      	beq.n	8002424 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002384:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238a:	d004      	beq.n	8002396 <UART_Receive_IT+0x24>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d156      	bne.n	800243e <UART_Receive_IT+0xcc>
 8002390:	6903      	ldr	r3, [r0, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d153      	bne.n	800243e <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002396:	6803      	ldr	r3, [r0, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800239c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800239e:	3301      	adds	r3, #1
 80023a0:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80023a2:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d151      	bne.n	8002454 <UART_Receive_IT+0xe2>
{
 80023b0:	b500      	push	{lr}
 80023b2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023b4:	6802      	ldr	r2, [r0, #0]
 80023b6:	68d3      	ldr	r3, [r2, #12]
 80023b8:	f023 0320 	bic.w	r3, r3, #32
 80023bc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023be:	6802      	ldr	r2, [r0, #0]
 80023c0:	68d3      	ldr	r3, [r2, #12]
 80023c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023c8:	6802      	ldr	r2, [r0, #0]
 80023ca:	6953      	ldr	r3, [r2, #20]
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d8:	2300      	movs	r3, #0
 80023da:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023dc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d133      	bne.n	800244a <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e2:	2300      	movs	r3, #0
 80023e4:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	f102 030c 	add.w	r3, r2, #12
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f4:	320c      	adds	r2, #12
 80023f6:	e842 3100 	strex	r1, r3, [r2]
 80023fa:	2900      	cmp	r1, #0
 80023fc:	d1f3      	bne.n	80023e6 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f012 0f10 	tst.w	r2, #16
 8002406:	d006      	beq.n	8002416 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002408:	2200      	movs	r2, #0
 800240a:	9201      	str	r2, [sp, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	9201      	str	r2, [sp, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002416:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002418:	f7fe f976 	bl	8000708 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800241c:	2000      	movs	r0, #0
}
 800241e:	b003      	add	sp, #12
 8002420:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002424:	6902      	ldr	r2, [r0, #16]
 8002426:	2a00      	cmp	r2, #0
 8002428:	d1ac      	bne.n	8002384 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800242a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800242c:	6803      	ldr	r3, [r0, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002436:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002438:	3302      	adds	r3, #2
 800243a:	6283      	str	r3, [r0, #40]	@ 0x28
 800243c:	e7b1      	b.n	80023a2 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800243e:	6803      	ldr	r3, [r0, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002446:	7013      	strb	r3, [r2, #0]
 8002448:	e7a8      	b.n	800239c <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800244a:	f7ff ff5c 	bl	8002306 <HAL_UART_RxCpltCallback>
 800244e:	e7e5      	b.n	800241c <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8002450:	2002      	movs	r0, #2
 8002452:	4770      	bx	lr
    return HAL_OK;
 8002454:	2000      	movs	r0, #0
}
 8002456:	4770      	bx	lr

08002458 <HAL_UART_IRQHandler>:
{
 8002458:	b510      	push	{r4, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800245e:	6802      	ldr	r2, [r0, #0]
 8002460:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002462:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002464:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002466:	f013 0f0f 	tst.w	r3, #15
 800246a:	d109      	bne.n	8002480 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246c:	f013 0f20 	tst.w	r3, #32
 8002470:	d00c      	beq.n	800248c <HAL_UART_IRQHandler+0x34>
 8002472:	f010 0f20 	tst.w	r0, #32
 8002476:	d009      	beq.n	800248c <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff ff7a 	bl	8002372 <UART_Receive_IT>
      return;
 800247e:	e016      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002480:	f011 0101 	ands.w	r1, r1, #1
 8002484:	d115      	bne.n	80024b2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002486:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800248a:	d112      	bne.n	80024b2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800248c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800248e:	2901      	cmp	r1, #1
 8002490:	d079      	beq.n	8002586 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002492:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002496:	d003      	beq.n	80024a0 <HAL_UART_IRQHandler+0x48>
 8002498:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800249c:	f040 8114 	bne.w	80026c8 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024a0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80024a4:	d003      	beq.n	80024ae <HAL_UART_IRQHandler+0x56>
 80024a6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80024aa:	f040 8111 	bne.w	80026d0 <HAL_UART_IRQHandler+0x278>
}
 80024ae:	b002      	add	sp, #8
 80024b0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024b2:	f013 0f01 	tst.w	r3, #1
 80024b6:	d006      	beq.n	80024c6 <HAL_UART_IRQHandler+0x6e>
 80024b8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80024bc:	d003      	beq.n	80024c6 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024be:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c6:	f013 0f04 	tst.w	r3, #4
 80024ca:	d004      	beq.n	80024d6 <HAL_UART_IRQHandler+0x7e>
 80024cc:	b119      	cbz	r1, 80024d6 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ce:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024d0:	f042 0202 	orr.w	r2, r2, #2
 80024d4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d6:	f013 0f02 	tst.w	r3, #2
 80024da:	d004      	beq.n	80024e6 <HAL_UART_IRQHandler+0x8e>
 80024dc:	b119      	cbz	r1, 80024e6 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024de:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024e6:	f013 0f08 	tst.w	r3, #8
 80024ea:	d007      	beq.n	80024fc <HAL_UART_IRQHandler+0xa4>
 80024ec:	f010 0f20 	tst.w	r0, #32
 80024f0:	d100      	bne.n	80024f4 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024f2:	b119      	cbz	r1, 80024fc <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024f6:	f042 0208 	orr.w	r2, r2, #8
 80024fa:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024fc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d0d5      	beq.n	80024ae <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002502:	f013 0f20 	tst.w	r3, #32
 8002506:	d002      	beq.n	800250e <HAL_UART_IRQHandler+0xb6>
 8002508:	f010 0f20 	tst.w	r0, #32
 800250c:	d129      	bne.n	8002562 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002516:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002518:	f012 0f08 	tst.w	r2, #8
 800251c:	d100      	bne.n	8002520 <HAL_UART_IRQHandler+0xc8>
 800251e:	b363      	cbz	r3, 800257a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff fd23 	bl	8001f6c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800252e:	d020      	beq.n	8002572 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002530:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002532:	f102 0314 	add.w	r3, r2, #20
 8002536:	e853 3f00 	ldrex	r3, [r3]
 800253a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	3214      	adds	r2, #20
 8002540:	e842 3100 	strex	r1, r3, [r2]
 8002544:	2900      	cmp	r1, #0
 8002546:	d1f3      	bne.n	8002530 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8002548:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800254a:	b173      	cbz	r3, 800256a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800254c:	4a62      	ldr	r2, [pc, #392]	@ (80026d8 <HAL_UART_IRQHandler+0x280>)
 800254e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002550:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002552:	f7fe fdd8 	bl	8001106 <HAL_DMA_Abort_IT>
 8002556:	2800      	cmp	r0, #0
 8002558:	d0a9      	beq.n	80024ae <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800255a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800255c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800255e:	4798      	blx	r3
 8002560:	e7a5      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff05 	bl	8002372 <UART_Receive_IT>
 8002568:	e7d1      	b.n	800250e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800256a:	4620      	mov	r0, r4
 800256c:	f7fe f8ec 	bl	8000748 <HAL_UART_ErrorCallback>
 8002570:	e79d      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8002572:	4620      	mov	r0, r4
 8002574:	f7fe f8e8 	bl	8000748 <HAL_UART_ErrorCallback>
 8002578:	e799      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800257a:	4620      	mov	r0, r4
 800257c:	f7fe f8e4 	bl	8000748 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	2300      	movs	r3, #0
 8002582:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8002584:	e793      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002586:	f013 0f10 	tst.w	r3, #16
 800258a:	d082      	beq.n	8002492 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800258c:	f010 0f10 	tst.w	r0, #16
 8002590:	f43f af7f 	beq.w	8002492 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002594:	2300      	movs	r3, #0
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	6853      	ldr	r3, [r2, #4]
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a2:	6953      	ldr	r3, [r2, #20]
 80025a4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80025a8:	d052      	beq.n	8002650 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025aa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f43f af7b 	beq.w	80024ae <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025b8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80025ba:	4299      	cmp	r1, r3
 80025bc:	f67f af77 	bls.w	80024ae <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 80025c0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025c2:	69d3      	ldr	r3, [r2, #28]
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c8:	d037      	beq.n	800263a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025cc:	f102 030c 	add.w	r3, r2, #12
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	320c      	adds	r2, #12
 80025da:	e842 3100 	strex	r1, r3, [r2]
 80025de:	2900      	cmp	r1, #0
 80025e0:	d1f3      	bne.n	80025ca <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	f102 0314 	add.w	r3, r2, #20
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f0:	3214      	adds	r2, #20
 80025f2:	e842 3100 	strex	r1, r3, [r2]
 80025f6:	2900      	cmp	r1, #0
 80025f8:	d1f3      	bne.n	80025e2 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	f102 0314 	add.w	r3, r2, #20
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002608:	3214      	adds	r2, #20
 800260a:	e842 3100 	strex	r1, r3, [r2]
 800260e:	2900      	cmp	r1, #0
 8002610:	d1f3      	bne.n	80025fa <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8002612:	2320      	movs	r3, #32
 8002614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	2300      	movs	r3, #0
 800261a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261e:	f102 030c 	add.w	r3, r2, #12
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	320c      	adds	r2, #12
 800262c:	e842 3100 	strex	r1, r3, [r2]
 8002630:	2900      	cmp	r1, #0
 8002632:	d1f3      	bne.n	800261c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002634:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002636:	f7fe fd1c 	bl	8001072 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800263a:	2302      	movs	r3, #2
 800263c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800263e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002640:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002642:	b29b      	uxth	r3, r3
 8002644:	1ac9      	subs	r1, r1, r3
 8002646:	b289      	uxth	r1, r1
 8002648:	4620      	mov	r0, r4
 800264a:	f7fe f85d 	bl	8000708 <HAL_UARTEx_RxEventCallback>
      return;
 800264e:	e72e      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002650:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002652:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	1ac9      	subs	r1, r1, r3
 8002658:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800265a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f43f af25 	beq.w	80024ae <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8002664:	2900      	cmp	r1, #0
 8002666:	f43f af22 	beq.w	80024ae <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	f102 030c 	add.w	r3, r2, #12
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	320c      	adds	r2, #12
 800267a:	e842 3000 	strex	r0, r3, [r2]
 800267e:	2800      	cmp	r0, #0
 8002680:	d1f3      	bne.n	800266a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002682:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002684:	f102 0314 	add.w	r3, r2, #20
 8002688:	e853 3f00 	ldrex	r3, [r3]
 800268c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002690:	3214      	adds	r2, #20
 8002692:	e842 3000 	strex	r0, r3, [r2]
 8002696:	2800      	cmp	r0, #0
 8002698:	d1f3      	bne.n	8002682 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800269a:	2320      	movs	r3, #32
 800269c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a0:	2300      	movs	r3, #0
 80026a2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	f102 030c 	add.w	r3, r2, #12
 80026aa:	e853 3f00 	ldrex	r3, [r3]
 80026ae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	320c      	adds	r2, #12
 80026b4:	e842 3000 	strex	r0, r3, [r2]
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d1f3      	bne.n	80026a4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026bc:	2302      	movs	r3, #2
 80026be:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7fe f821 	bl	8000708 <HAL_UARTEx_RxEventCallback>
      return;
 80026c6:	e6f2      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff fc7d 	bl	8001fc8 <UART_Transmit_IT>
    return;
 80026ce:	e6ee      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fe0b 	bl	80022ec <UART_EndTransmit_IT>
    return;
 80026d6:	e6ea      	b.n	80024ae <HAL_UART_IRQHandler+0x56>
 80026d8:	08002363 	.word	0x08002363

080026dc <UART_DMARxHalfCplt>:
{
 80026dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026de:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80026e0:	2301      	movs	r3, #1
 80026e2:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d002      	beq.n	80026f0 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80026ea:	f7ff fe0d 	bl	8002308 <HAL_UART_RxHalfCpltCallback>
}
 80026ee:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80026f0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80026f2:	0849      	lsrs	r1, r1, #1
 80026f4:	f7fe f808 	bl	8000708 <HAL_UARTEx_RxEventCallback>
 80026f8:	e7f9      	b.n	80026ee <UART_DMARxHalfCplt+0x12>

080026fa <UART_DMAReceiveCplt>:
{
 80026fa:	b508      	push	{r3, lr}
 80026fc:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002708:	d12b      	bne.n	8002762 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800270e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002710:	f102 030c 	add.w	r3, r2, #12
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	320c      	adds	r2, #12
 800271e:	e842 3100 	strex	r1, r3, [r2]
 8002722:	2900      	cmp	r1, #0
 8002724:	d1f3      	bne.n	800270e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002726:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	f102 0314 	add.w	r3, r2, #20
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002734:	3214      	adds	r2, #20
 8002736:	e842 3100 	strex	r1, r3, [r2]
 800273a:	2900      	cmp	r1, #0
 800273c:	d1f3      	bne.n	8002726 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	f102 0314 	add.w	r3, r2, #20
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	3214      	adds	r2, #20
 800274e:	e842 3100 	strex	r1, r3, [r2]
 8002752:	2900      	cmp	r1, #0
 8002754:	d1f3      	bne.n	800273e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8002756:	2320      	movs	r3, #32
 8002758:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002762:	2300      	movs	r3, #0
 8002764:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002766:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002768:	2b01      	cmp	r3, #1
 800276a:	d00f      	beq.n	800278c <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800276c:	f7ff fdcb 	bl	8002306 <HAL_UART_RxCpltCallback>
}
 8002770:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002772:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	f102 030c 	add.w	r3, r2, #12
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	320c      	adds	r2, #12
 8002782:	e842 3100 	strex	r1, r3, [r2]
 8002786:	2900      	cmp	r1, #0
 8002788:	d1f3      	bne.n	8002772 <UART_DMAReceiveCplt+0x78>
 800278a:	e7ea      	b.n	8002762 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800278c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800278e:	f7fd ffbb 	bl	8000708 <HAL_UARTEx_RxEventCallback>
 8002792:	e7ed      	b.n	8002770 <UART_DMAReceiveCplt+0x76>

08002794 <UART_Start_Receive_DMA>:
{
 8002794:	b530      	push	{r4, r5, lr}
 8002796:	b083      	sub	sp, #12
 8002798:	4604      	mov	r4, r0
 800279a:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800279c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800279e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	2500      	movs	r5, #0
 80027a2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027a4:	2222      	movs	r2, #34	@ 0x22
 80027a6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80027ac:	481f      	ldr	r0, [pc, #124]	@ (800282c <UART_Start_Receive_DMA+0x98>)
 80027ae:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027b0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027b2:	481f      	ldr	r0, [pc, #124]	@ (8002830 <UART_Start_Receive_DMA+0x9c>)
 80027b4:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027b6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027b8:	481e      	ldr	r0, [pc, #120]	@ (8002834 <UART_Start_Receive_DMA+0xa0>)
 80027ba:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 80027bc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027be:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	460a      	mov	r2, r1
 80027c4:	1d01      	adds	r1, r0, #4
 80027c6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80027c8:	f7fe fc1e 	bl	8001008 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80027cc:	9501      	str	r5, [sp, #4]
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	9201      	str	r2, [sp, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80027da:	6923      	ldr	r3, [r4, #16]
 80027dc:	b15b      	cbz	r3, 80027f6 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	f102 030c 	add.w	r3, r2, #12
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	320c      	adds	r2, #12
 80027ee:	e842 3100 	strex	r1, r3, [r2]
 80027f2:	2900      	cmp	r1, #0
 80027f4:	d1f3      	bne.n	80027de <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f8:	f102 0314 	add.w	r3, r2, #20
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	3214      	adds	r2, #20
 8002806:	e842 3100 	strex	r1, r3, [r2]
 800280a:	2900      	cmp	r1, #0
 800280c:	d1f3      	bne.n	80027f6 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	f102 0314 	add.w	r3, r2, #20
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	3214      	adds	r2, #20
 800281e:	e842 3100 	strex	r1, r3, [r2]
 8002822:	2900      	cmp	r1, #0
 8002824:	d1f3      	bne.n	800280e <UART_Start_Receive_DMA+0x7a>
}
 8002826:	2000      	movs	r0, #0
 8002828:	b003      	add	sp, #12
 800282a:	bd30      	pop	{r4, r5, pc}
 800282c:	080026fb 	.word	0x080026fb
 8002830:	080026dd 	.word	0x080026dd
 8002834:	0800230b 	.word	0x0800230b

08002838 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002838:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	d129      	bne.n	8002896 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
{
 8002842:	b510      	push	{r4, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002848:	b339      	cbz	r1, 800289a <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
 800284a:	b912      	cbnz	r2, 8002852 <HAL_UARTEx_ReceiveToIdle_DMA+0x1a>
      return HAL_ERROR;
 800284c:	2001      	movs	r0, #1
}
 800284e:	b002      	add	sp, #8
 8002850:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002852:	2301      	movs	r3, #1
 8002854:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002856:	2300      	movs	r3, #0
 8002858:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800285a:	f7ff ff9b 	bl	8002794 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800285e:	2800      	cmp	r0, #0
 8002860:	d1f5      	bne.n	800284e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002862:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002864:	2b01      	cmp	r3, #1
 8002866:	d001      	beq.n	800286c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 8002868:	2001      	movs	r0, #1
    return status;
 800286a:	e7f0      	b.n	800284e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	9201      	str	r2, [sp, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800287c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287e:	f102 030c 	add.w	r3, r2, #12
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	320c      	adds	r2, #12
 800288c:	e842 3100 	strex	r1, r3, [r2]
 8002890:	2900      	cmp	r1, #0
 8002892:	d1f3      	bne.n	800287c <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
 8002894:	e7db      	b.n	800284e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 8002896:	2002      	movs	r0, #2
}
 8002898:	4770      	bx	lr
      return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
 800289c:	e7d7      	b.n	800284e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
	...

080028a0 <std>:
 80028a0:	2300      	movs	r3, #0
 80028a2:	b510      	push	{r4, lr}
 80028a4:	4604      	mov	r4, r0
 80028a6:	e9c0 3300 	strd	r3, r3, [r0]
 80028aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028ae:	6083      	str	r3, [r0, #8]
 80028b0:	8181      	strh	r1, [r0, #12]
 80028b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80028b4:	81c2      	strh	r2, [r0, #14]
 80028b6:	6183      	str	r3, [r0, #24]
 80028b8:	4619      	mov	r1, r3
 80028ba:	2208      	movs	r2, #8
 80028bc:	305c      	adds	r0, #92	@ 0x5c
 80028be:	f000 fa19 	bl	8002cf4 <memset>
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <std+0x58>)
 80028c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80028c6:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <std+0x5c>)
 80028c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <std+0x60>)
 80028cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <std+0x64>)
 80028d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <std+0x68>)
 80028d4:	6224      	str	r4, [r4, #32]
 80028d6:	429c      	cmp	r4, r3
 80028d8:	d006      	beq.n	80028e8 <std+0x48>
 80028da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028de:	4294      	cmp	r4, r2
 80028e0:	d002      	beq.n	80028e8 <std+0x48>
 80028e2:	33d0      	adds	r3, #208	@ 0xd0
 80028e4:	429c      	cmp	r4, r3
 80028e6:	d105      	bne.n	80028f4 <std+0x54>
 80028e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f0:	f000 ba8c 	b.w	8002e0c <__retarget_lock_init_recursive>
 80028f4:	bd10      	pop	{r4, pc}
 80028f6:	bf00      	nop
 80028f8:	08002b45 	.word	0x08002b45
 80028fc:	08002b67 	.word	0x08002b67
 8002900:	08002b9f 	.word	0x08002b9f
 8002904:	08002bc3 	.word	0x08002bc3
 8002908:	20000398 	.word	0x20000398

0800290c <stdio_exit_handler>:
 800290c:	4a02      	ldr	r2, [pc, #8]	@ (8002918 <stdio_exit_handler+0xc>)
 800290e:	4903      	ldr	r1, [pc, #12]	@ (800291c <stdio_exit_handler+0x10>)
 8002910:	4803      	ldr	r0, [pc, #12]	@ (8002920 <stdio_exit_handler+0x14>)
 8002912:	f000 b869 	b.w	80029e8 <_fwalk_sglue>
 8002916:	bf00      	nop
 8002918:	2000000c 	.word	0x2000000c
 800291c:	0800395d 	.word	0x0800395d
 8002920:	2000001c 	.word	0x2000001c

08002924 <cleanup_stdio>:
 8002924:	6841      	ldr	r1, [r0, #4]
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <cleanup_stdio+0x34>)
 8002928:	4299      	cmp	r1, r3
 800292a:	b510      	push	{r4, lr}
 800292c:	4604      	mov	r4, r0
 800292e:	d001      	beq.n	8002934 <cleanup_stdio+0x10>
 8002930:	f001 f814 	bl	800395c <_fflush_r>
 8002934:	68a1      	ldr	r1, [r4, #8]
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <cleanup_stdio+0x38>)
 8002938:	4299      	cmp	r1, r3
 800293a:	d002      	beq.n	8002942 <cleanup_stdio+0x1e>
 800293c:	4620      	mov	r0, r4
 800293e:	f001 f80d 	bl	800395c <_fflush_r>
 8002942:	68e1      	ldr	r1, [r4, #12]
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <cleanup_stdio+0x3c>)
 8002946:	4299      	cmp	r1, r3
 8002948:	d004      	beq.n	8002954 <cleanup_stdio+0x30>
 800294a:	4620      	mov	r0, r4
 800294c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002950:	f001 b804 	b.w	800395c <_fflush_r>
 8002954:	bd10      	pop	{r4, pc}
 8002956:	bf00      	nop
 8002958:	20000398 	.word	0x20000398
 800295c:	20000400 	.word	0x20000400
 8002960:	20000468 	.word	0x20000468

08002964 <global_stdio_init.part.0>:
 8002964:	b510      	push	{r4, lr}
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <global_stdio_init.part.0+0x30>)
 8002968:	4c0b      	ldr	r4, [pc, #44]	@ (8002998 <global_stdio_init.part.0+0x34>)
 800296a:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <global_stdio_init.part.0+0x38>)
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	4620      	mov	r0, r4
 8002970:	2200      	movs	r2, #0
 8002972:	2104      	movs	r1, #4
 8002974:	f7ff ff94 	bl	80028a0 <std>
 8002978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800297c:	2201      	movs	r2, #1
 800297e:	2109      	movs	r1, #9
 8002980:	f7ff ff8e 	bl	80028a0 <std>
 8002984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002988:	2202      	movs	r2, #2
 800298a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800298e:	2112      	movs	r1, #18
 8002990:	f7ff bf86 	b.w	80028a0 <std>
 8002994:	200004d0 	.word	0x200004d0
 8002998:	20000398 	.word	0x20000398
 800299c:	0800290d 	.word	0x0800290d

080029a0 <__sfp_lock_acquire>:
 80029a0:	4801      	ldr	r0, [pc, #4]	@ (80029a8 <__sfp_lock_acquire+0x8>)
 80029a2:	f000 ba34 	b.w	8002e0e <__retarget_lock_acquire_recursive>
 80029a6:	bf00      	nop
 80029a8:	200004d9 	.word	0x200004d9

080029ac <__sfp_lock_release>:
 80029ac:	4801      	ldr	r0, [pc, #4]	@ (80029b4 <__sfp_lock_release+0x8>)
 80029ae:	f000 ba2f 	b.w	8002e10 <__retarget_lock_release_recursive>
 80029b2:	bf00      	nop
 80029b4:	200004d9 	.word	0x200004d9

080029b8 <__sinit>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4604      	mov	r4, r0
 80029bc:	f7ff fff0 	bl	80029a0 <__sfp_lock_acquire>
 80029c0:	6a23      	ldr	r3, [r4, #32]
 80029c2:	b11b      	cbz	r3, 80029cc <__sinit+0x14>
 80029c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c8:	f7ff bff0 	b.w	80029ac <__sfp_lock_release>
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <__sinit+0x28>)
 80029ce:	6223      	str	r3, [r4, #32]
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <__sinit+0x2c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f5      	bne.n	80029c4 <__sinit+0xc>
 80029d8:	f7ff ffc4 	bl	8002964 <global_stdio_init.part.0>
 80029dc:	e7f2      	b.n	80029c4 <__sinit+0xc>
 80029de:	bf00      	nop
 80029e0:	08002925 	.word	0x08002925
 80029e4:	200004d0 	.word	0x200004d0

080029e8 <_fwalk_sglue>:
 80029e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029ec:	4607      	mov	r7, r0
 80029ee:	4688      	mov	r8, r1
 80029f0:	4614      	mov	r4, r2
 80029f2:	2600      	movs	r6, #0
 80029f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029f8:	f1b9 0901 	subs.w	r9, r9, #1
 80029fc:	d505      	bpl.n	8002a0a <_fwalk_sglue+0x22>
 80029fe:	6824      	ldr	r4, [r4, #0]
 8002a00:	2c00      	cmp	r4, #0
 8002a02:	d1f7      	bne.n	80029f4 <_fwalk_sglue+0xc>
 8002a04:	4630      	mov	r0, r6
 8002a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a0a:	89ab      	ldrh	r3, [r5, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d907      	bls.n	8002a20 <_fwalk_sglue+0x38>
 8002a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a14:	3301      	adds	r3, #1
 8002a16:	d003      	beq.n	8002a20 <_fwalk_sglue+0x38>
 8002a18:	4629      	mov	r1, r5
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	47c0      	blx	r8
 8002a1e:	4306      	orrs	r6, r0
 8002a20:	3568      	adds	r5, #104	@ 0x68
 8002a22:	e7e9      	b.n	80029f8 <_fwalk_sglue+0x10>

08002a24 <iprintf>:
 8002a24:	b40f      	push	{r0, r1, r2, r3}
 8002a26:	b507      	push	{r0, r1, r2, lr}
 8002a28:	4906      	ldr	r1, [pc, #24]	@ (8002a44 <iprintf+0x20>)
 8002a2a:	ab04      	add	r3, sp, #16
 8002a2c:	6808      	ldr	r0, [r1, #0]
 8002a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a32:	6881      	ldr	r1, [r0, #8]
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	f000 fc67 	bl	8003308 <_vfiprintf_r>
 8002a3a:	b003      	add	sp, #12
 8002a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a40:	b004      	add	sp, #16
 8002a42:	4770      	bx	lr
 8002a44:	20000018 	.word	0x20000018

08002a48 <_puts_r>:
 8002a48:	6a03      	ldr	r3, [r0, #32]
 8002a4a:	b570      	push	{r4, r5, r6, lr}
 8002a4c:	6884      	ldr	r4, [r0, #8]
 8002a4e:	4605      	mov	r5, r0
 8002a50:	460e      	mov	r6, r1
 8002a52:	b90b      	cbnz	r3, 8002a58 <_puts_r+0x10>
 8002a54:	f7ff ffb0 	bl	80029b8 <__sinit>
 8002a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a5a:	07db      	lsls	r3, r3, #31
 8002a5c:	d405      	bmi.n	8002a6a <_puts_r+0x22>
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	0598      	lsls	r0, r3, #22
 8002a62:	d402      	bmi.n	8002a6a <_puts_r+0x22>
 8002a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a66:	f000 f9d2 	bl	8002e0e <__retarget_lock_acquire_recursive>
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	0719      	lsls	r1, r3, #28
 8002a6e:	d502      	bpl.n	8002a76 <_puts_r+0x2e>
 8002a70:	6923      	ldr	r3, [r4, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d135      	bne.n	8002ae2 <_puts_r+0x9a>
 8002a76:	4621      	mov	r1, r4
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f000 f8e5 	bl	8002c48 <__swsetup_r>
 8002a7e:	b380      	cbz	r0, 8002ae2 <_puts_r+0x9a>
 8002a80:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a86:	07da      	lsls	r2, r3, #31
 8002a88:	d405      	bmi.n	8002a96 <_puts_r+0x4e>
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	059b      	lsls	r3, r3, #22
 8002a8e:	d402      	bmi.n	8002a96 <_puts_r+0x4e>
 8002a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a92:	f000 f9bd 	bl	8002e10 <__retarget_lock_release_recursive>
 8002a96:	4628      	mov	r0, r5
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da04      	bge.n	8002aa8 <_puts_r+0x60>
 8002a9e:	69a2      	ldr	r2, [r4, #24]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dc17      	bgt.n	8002ad4 <_puts_r+0x8c>
 8002aa4:	290a      	cmp	r1, #10
 8002aa6:	d015      	beq.n	8002ad4 <_puts_r+0x8c>
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	6022      	str	r2, [r4, #0]
 8002aae:	7019      	strb	r1, [r3, #0]
 8002ab0:	68a3      	ldr	r3, [r4, #8]
 8002ab2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60a3      	str	r3, [r4, #8]
 8002aba:	2900      	cmp	r1, #0
 8002abc:	d1ed      	bne.n	8002a9a <_puts_r+0x52>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da11      	bge.n	8002ae6 <_puts_r+0x9e>
 8002ac2:	4622      	mov	r2, r4
 8002ac4:	210a      	movs	r1, #10
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f000 f87f 	bl	8002bca <__swbuf_r>
 8002acc:	3001      	adds	r0, #1
 8002ace:	d0d7      	beq.n	8002a80 <_puts_r+0x38>
 8002ad0:	250a      	movs	r5, #10
 8002ad2:	e7d7      	b.n	8002a84 <_puts_r+0x3c>
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f000 f877 	bl	8002bca <__swbuf_r>
 8002adc:	3001      	adds	r0, #1
 8002ade:	d1e7      	bne.n	8002ab0 <_puts_r+0x68>
 8002ae0:	e7ce      	b.n	8002a80 <_puts_r+0x38>
 8002ae2:	3e01      	subs	r6, #1
 8002ae4:	e7e4      	b.n	8002ab0 <_puts_r+0x68>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	6022      	str	r2, [r4, #0]
 8002aec:	220a      	movs	r2, #10
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e7ee      	b.n	8002ad0 <_puts_r+0x88>
	...

08002af4 <puts>:
 8002af4:	4b02      	ldr	r3, [pc, #8]	@ (8002b00 <puts+0xc>)
 8002af6:	4601      	mov	r1, r0
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	f7ff bfa5 	b.w	8002a48 <_puts_r>
 8002afe:	bf00      	nop
 8002b00:	20000018 	.word	0x20000018

08002b04 <siprintf>:
 8002b04:	b40e      	push	{r1, r2, r3}
 8002b06:	b500      	push	{lr}
 8002b08:	b09c      	sub	sp, #112	@ 0x70
 8002b0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b0c:	9002      	str	r0, [sp, #8]
 8002b0e:	9006      	str	r0, [sp, #24]
 8002b10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b14:	4809      	ldr	r0, [pc, #36]	@ (8002b3c <siprintf+0x38>)
 8002b16:	9107      	str	r1, [sp, #28]
 8002b18:	9104      	str	r1, [sp, #16]
 8002b1a:	4909      	ldr	r1, [pc, #36]	@ (8002b40 <siprintf+0x3c>)
 8002b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b20:	9105      	str	r1, [sp, #20]
 8002b22:	6800      	ldr	r0, [r0, #0]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	a902      	add	r1, sp, #8
 8002b28:	f000 fac8 	bl	80030bc <_svfiprintf_r>
 8002b2c:	9b02      	ldr	r3, [sp, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	b01c      	add	sp, #112	@ 0x70
 8002b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b38:	b003      	add	sp, #12
 8002b3a:	4770      	bx	lr
 8002b3c:	20000018 	.word	0x20000018
 8002b40:	ffff0208 	.word	0xffff0208

08002b44 <__sread>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	460c      	mov	r4, r1
 8002b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b4c:	f000 f910 	bl	8002d70 <_read_r>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bfab      	itete	ge
 8002b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b56:	89a3      	ldrhlt	r3, [r4, #12]
 8002b58:	181b      	addge	r3, r3, r0
 8002b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b5e:	bfac      	ite	ge
 8002b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b62:	81a3      	strhlt	r3, [r4, #12]
 8002b64:	bd10      	pop	{r4, pc}

08002b66 <__swrite>:
 8002b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6a:	461f      	mov	r7, r3
 8002b6c:	898b      	ldrh	r3, [r1, #12]
 8002b6e:	05db      	lsls	r3, r3, #23
 8002b70:	4605      	mov	r5, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	4616      	mov	r6, r2
 8002b76:	d505      	bpl.n	8002b84 <__swrite+0x1e>
 8002b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f000 f8e4 	bl	8002d4c <_lseek_r>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	4632      	mov	r2, r6
 8002b92:	463b      	mov	r3, r7
 8002b94:	4628      	mov	r0, r5
 8002b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9a:	f000 b8fb 	b.w	8002d94 <_write_r>

08002b9e <__sseek>:
 8002b9e:	b510      	push	{r4, lr}
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba6:	f000 f8d1 	bl	8002d4c <_lseek_r>
 8002baa:	1c43      	adds	r3, r0, #1
 8002bac:	89a3      	ldrh	r3, [r4, #12]
 8002bae:	bf15      	itete	ne
 8002bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002bba:	81a3      	strheq	r3, [r4, #12]
 8002bbc:	bf18      	it	ne
 8002bbe:	81a3      	strhne	r3, [r4, #12]
 8002bc0:	bd10      	pop	{r4, pc}

08002bc2 <__sclose>:
 8002bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc6:	f000 b8b1 	b.w	8002d2c <_close_r>

08002bca <__swbuf_r>:
 8002bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bcc:	460e      	mov	r6, r1
 8002bce:	4614      	mov	r4, r2
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	b118      	cbz	r0, 8002bdc <__swbuf_r+0x12>
 8002bd4:	6a03      	ldr	r3, [r0, #32]
 8002bd6:	b90b      	cbnz	r3, 8002bdc <__swbuf_r+0x12>
 8002bd8:	f7ff feee 	bl	80029b8 <__sinit>
 8002bdc:	69a3      	ldr	r3, [r4, #24]
 8002bde:	60a3      	str	r3, [r4, #8]
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	071a      	lsls	r2, r3, #28
 8002be4:	d501      	bpl.n	8002bea <__swbuf_r+0x20>
 8002be6:	6923      	ldr	r3, [r4, #16]
 8002be8:	b943      	cbnz	r3, 8002bfc <__swbuf_r+0x32>
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 f82b 	bl	8002c48 <__swsetup_r>
 8002bf2:	b118      	cbz	r0, 8002bfc <__swbuf_r+0x32>
 8002bf4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	6922      	ldr	r2, [r4, #16]
 8002c00:	1a98      	subs	r0, r3, r2
 8002c02:	6963      	ldr	r3, [r4, #20]
 8002c04:	b2f6      	uxtb	r6, r6
 8002c06:	4283      	cmp	r3, r0
 8002c08:	4637      	mov	r7, r6
 8002c0a:	dc05      	bgt.n	8002c18 <__swbuf_r+0x4e>
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f000 fea4 	bl	800395c <_fflush_r>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d1ed      	bne.n	8002bf4 <__swbuf_r+0x2a>
 8002c18:	68a3      	ldr	r3, [r4, #8]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	60a3      	str	r3, [r4, #8]
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	6022      	str	r2, [r4, #0]
 8002c24:	701e      	strb	r6, [r3, #0]
 8002c26:	6962      	ldr	r2, [r4, #20]
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d004      	beq.n	8002c38 <__swbuf_r+0x6e>
 8002c2e:	89a3      	ldrh	r3, [r4, #12]
 8002c30:	07db      	lsls	r3, r3, #31
 8002c32:	d5e1      	bpl.n	8002bf8 <__swbuf_r+0x2e>
 8002c34:	2e0a      	cmp	r6, #10
 8002c36:	d1df      	bne.n	8002bf8 <__swbuf_r+0x2e>
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 fe8e 	bl	800395c <_fflush_r>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d0d9      	beq.n	8002bf8 <__swbuf_r+0x2e>
 8002c44:	e7d6      	b.n	8002bf4 <__swbuf_r+0x2a>
	...

08002c48 <__swsetup_r>:
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <__swsetup_r+0xa8>)
 8002c4c:	4605      	mov	r5, r0
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	460c      	mov	r4, r1
 8002c52:	b118      	cbz	r0, 8002c5c <__swsetup_r+0x14>
 8002c54:	6a03      	ldr	r3, [r0, #32]
 8002c56:	b90b      	cbnz	r3, 8002c5c <__swsetup_r+0x14>
 8002c58:	f7ff feae 	bl	80029b8 <__sinit>
 8002c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c60:	0719      	lsls	r1, r3, #28
 8002c62:	d422      	bmi.n	8002caa <__swsetup_r+0x62>
 8002c64:	06da      	lsls	r2, r3, #27
 8002c66:	d407      	bmi.n	8002c78 <__swsetup_r+0x30>
 8002c68:	2209      	movs	r2, #9
 8002c6a:	602a      	str	r2, [r5, #0]
 8002c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c70:	81a3      	strh	r3, [r4, #12]
 8002c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c76:	e033      	b.n	8002ce0 <__swsetup_r+0x98>
 8002c78:	0758      	lsls	r0, r3, #29
 8002c7a:	d512      	bpl.n	8002ca2 <__swsetup_r+0x5a>
 8002c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c7e:	b141      	cbz	r1, 8002c92 <__swsetup_r+0x4a>
 8002c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c84:	4299      	cmp	r1, r3
 8002c86:	d002      	beq.n	8002c8e <__swsetup_r+0x46>
 8002c88:	4628      	mov	r0, r5
 8002c8a:	f000 f8c3 	bl	8002e14 <_free_r>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	6923      	ldr	r3, [r4, #16]
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	6923      	ldr	r3, [r4, #16]
 8002cac:	b94b      	cbnz	r3, 8002cc2 <__swsetup_r+0x7a>
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb8:	d003      	beq.n	8002cc2 <__swsetup_r+0x7a>
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 fe9b 	bl	80039f8 <__smakebuf_r>
 8002cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc6:	f013 0201 	ands.w	r2, r3, #1
 8002cca:	d00a      	beq.n	8002ce2 <__swsetup_r+0x9a>
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60a2      	str	r2, [r4, #8]
 8002cd0:	6962      	ldr	r2, [r4, #20]
 8002cd2:	4252      	negs	r2, r2
 8002cd4:	61a2      	str	r2, [r4, #24]
 8002cd6:	6922      	ldr	r2, [r4, #16]
 8002cd8:	b942      	cbnz	r2, 8002cec <__swsetup_r+0xa4>
 8002cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002cde:	d1c5      	bne.n	8002c6c <__swsetup_r+0x24>
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	0799      	lsls	r1, r3, #30
 8002ce4:	bf58      	it	pl
 8002ce6:	6962      	ldrpl	r2, [r4, #20]
 8002ce8:	60a2      	str	r2, [r4, #8]
 8002cea:	e7f4      	b.n	8002cd6 <__swsetup_r+0x8e>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7f7      	b.n	8002ce0 <__swsetup_r+0x98>
 8002cf0:	20000018 	.word	0x20000018

08002cf4 <memset>:
 8002cf4:	4402      	add	r2, r0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <strncat>:
 8002d04:	b530      	push	{r4, r5, lr}
 8002d06:	4604      	mov	r4, r0
 8002d08:	7825      	ldrb	r5, [r4, #0]
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	3401      	adds	r4, #1
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	d1fa      	bne.n	8002d08 <strncat+0x4>
 8002d12:	3a01      	subs	r2, #1
 8002d14:	d304      	bcc.n	8002d20 <strncat+0x1c>
 8002d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d1a:	f803 4b01 	strb.w	r4, [r3], #1
 8002d1e:	b904      	cbnz	r4, 8002d22 <strncat+0x1e>
 8002d20:	bd30      	pop	{r4, r5, pc}
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d1f5      	bne.n	8002d12 <strncat+0xe>
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e7f3      	b.n	8002d12 <strncat+0xe>
	...

08002d2c <_close_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d06      	ldr	r5, [pc, #24]	@ (8002d48 <_close_r+0x1c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	f7fd ff54 	bl	8000be4 <_close>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_close_r+0x1a>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_close_r+0x1a>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	200004d4 	.word	0x200004d4

08002d4c <_lseek_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	@ (8002d6c <_lseek_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fd ff4c 	bl	8000bf8 <_lseek>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_lseek_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_lseek_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	200004d4 	.word	0x200004d4

08002d70 <_read_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4d07      	ldr	r5, [pc, #28]	@ (8002d90 <_read_r+0x20>)
 8002d74:	4604      	mov	r4, r0
 8002d76:	4608      	mov	r0, r1
 8002d78:	4611      	mov	r1, r2
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	602a      	str	r2, [r5, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f7fd ff20 	bl	8000bc4 <_read>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d102      	bne.n	8002d8e <_read_r+0x1e>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b103      	cbz	r3, 8002d8e <_read_r+0x1e>
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	bd38      	pop	{r3, r4, r5, pc}
 8002d90:	200004d4 	.word	0x200004d4

08002d94 <_write_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4d07      	ldr	r5, [pc, #28]	@ (8002db4 <_write_r+0x20>)
 8002d98:	4604      	mov	r4, r0
 8002d9a:	4608      	mov	r0, r1
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	602a      	str	r2, [r5, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f7fd fc4e 	bl	8000644 <_write>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d102      	bne.n	8002db2 <_write_r+0x1e>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	b103      	cbz	r3, 8002db2 <_write_r+0x1e>
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	bd38      	pop	{r3, r4, r5, pc}
 8002db4:	200004d4 	.word	0x200004d4

08002db8 <__errno>:
 8002db8:	4b01      	ldr	r3, [pc, #4]	@ (8002dc0 <__errno+0x8>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000018 	.word	0x20000018

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002dfc <__libc_init_array+0x38>)
 8002dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e00 <__libc_init_array+0x3c>)
 8002dca:	1b64      	subs	r4, r4, r5
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	2600      	movs	r6, #0
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e04 <__libc_init_array+0x40>)
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e08 <__libc_init_array+0x44>)
 8002dd8:	f000 feda 	bl	8003b90 <_init>
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	2600      	movs	r6, #0
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08003ca0 	.word	0x08003ca0
 8002e00:	08003ca0 	.word	0x08003ca0
 8002e04:	08003ca0 	.word	0x08003ca0
 8002e08:	08003ca4 	.word	0x08003ca4

08002e0c <__retarget_lock_init_recursive>:
 8002e0c:	4770      	bx	lr

08002e0e <__retarget_lock_acquire_recursive>:
 8002e0e:	4770      	bx	lr

08002e10 <__retarget_lock_release_recursive>:
 8002e10:	4770      	bx	lr
	...

08002e14 <_free_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	4605      	mov	r5, r0
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d041      	beq.n	8002ea0 <_free_r+0x8c>
 8002e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e20:	1f0c      	subs	r4, r1, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bfb8      	it	lt
 8002e26:	18e4      	addlt	r4, r4, r3
 8002e28:	f000 f8e0 	bl	8002fec <__malloc_lock>
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <_free_r+0x90>)
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	b933      	cbnz	r3, 8002e40 <_free_r+0x2c>
 8002e32:	6063      	str	r3, [r4, #4]
 8002e34:	6014      	str	r4, [r2, #0]
 8002e36:	4628      	mov	r0, r5
 8002e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e3c:	f000 b8dc 	b.w	8002ff8 <__malloc_unlock>
 8002e40:	42a3      	cmp	r3, r4
 8002e42:	d908      	bls.n	8002e56 <_free_r+0x42>
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	1821      	adds	r1, r4, r0
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	bf01      	itttt	eq
 8002e4c:	6819      	ldreq	r1, [r3, #0]
 8002e4e:	685b      	ldreq	r3, [r3, #4]
 8002e50:	1809      	addeq	r1, r1, r0
 8002e52:	6021      	streq	r1, [r4, #0]
 8002e54:	e7ed      	b.n	8002e32 <_free_r+0x1e>
 8002e56:	461a      	mov	r2, r3
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b10b      	cbz	r3, 8002e60 <_free_r+0x4c>
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	d9fa      	bls.n	8002e56 <_free_r+0x42>
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	1850      	adds	r0, r2, r1
 8002e64:	42a0      	cmp	r0, r4
 8002e66:	d10b      	bne.n	8002e80 <_free_r+0x6c>
 8002e68:	6820      	ldr	r0, [r4, #0]
 8002e6a:	4401      	add	r1, r0
 8002e6c:	1850      	adds	r0, r2, r1
 8002e6e:	4283      	cmp	r3, r0
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	d1e0      	bne.n	8002e36 <_free_r+0x22>
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	6053      	str	r3, [r2, #4]
 8002e7a:	4408      	add	r0, r1
 8002e7c:	6010      	str	r0, [r2, #0]
 8002e7e:	e7da      	b.n	8002e36 <_free_r+0x22>
 8002e80:	d902      	bls.n	8002e88 <_free_r+0x74>
 8002e82:	230c      	movs	r3, #12
 8002e84:	602b      	str	r3, [r5, #0]
 8002e86:	e7d6      	b.n	8002e36 <_free_r+0x22>
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	1821      	adds	r1, r4, r0
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	bf04      	itt	eq
 8002e90:	6819      	ldreq	r1, [r3, #0]
 8002e92:	685b      	ldreq	r3, [r3, #4]
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	bf04      	itt	eq
 8002e98:	1809      	addeq	r1, r1, r0
 8002e9a:	6021      	streq	r1, [r4, #0]
 8002e9c:	6054      	str	r4, [r2, #4]
 8002e9e:	e7ca      	b.n	8002e36 <_free_r+0x22>
 8002ea0:	bd38      	pop	{r3, r4, r5, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200004e0 	.word	0x200004e0

08002ea8 <sbrk_aligned>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4e0f      	ldr	r6, [pc, #60]	@ (8002ee8 <sbrk_aligned+0x40>)
 8002eac:	460c      	mov	r4, r1
 8002eae:	6831      	ldr	r1, [r6, #0]
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	b911      	cbnz	r1, 8002eba <sbrk_aligned+0x12>
 8002eb4:	f000 fe18 	bl	8003ae8 <_sbrk_r>
 8002eb8:	6030      	str	r0, [r6, #0]
 8002eba:	4621      	mov	r1, r4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f000 fe13 	bl	8003ae8 <_sbrk_r>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	d103      	bne.n	8002ece <sbrk_aligned+0x26>
 8002ec6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002eca:	4620      	mov	r0, r4
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
 8002ece:	1cc4      	adds	r4, r0, #3
 8002ed0:	f024 0403 	bic.w	r4, r4, #3
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d0f8      	beq.n	8002eca <sbrk_aligned+0x22>
 8002ed8:	1a21      	subs	r1, r4, r0
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 fe04 	bl	8003ae8 <_sbrk_r>
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d1f2      	bne.n	8002eca <sbrk_aligned+0x22>
 8002ee4:	e7ef      	b.n	8002ec6 <sbrk_aligned+0x1e>
 8002ee6:	bf00      	nop
 8002ee8:	200004dc 	.word	0x200004dc

08002eec <_malloc_r>:
 8002eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	1ccd      	adds	r5, r1, #3
 8002ef2:	f025 0503 	bic.w	r5, r5, #3
 8002ef6:	3508      	adds	r5, #8
 8002ef8:	2d0c      	cmp	r5, #12
 8002efa:	bf38      	it	cc
 8002efc:	250c      	movcc	r5, #12
 8002efe:	2d00      	cmp	r5, #0
 8002f00:	4606      	mov	r6, r0
 8002f02:	db01      	blt.n	8002f08 <_malloc_r+0x1c>
 8002f04:	42a9      	cmp	r1, r5
 8002f06:	d904      	bls.n	8002f12 <_malloc_r+0x26>
 8002f08:	230c      	movs	r3, #12
 8002f0a:	6033      	str	r3, [r6, #0]
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fe8 <_malloc_r+0xfc>
 8002f16:	f000 f869 	bl	8002fec <__malloc_lock>
 8002f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f1e:	461c      	mov	r4, r3
 8002f20:	bb44      	cbnz	r4, 8002f74 <_malloc_r+0x88>
 8002f22:	4629      	mov	r1, r5
 8002f24:	4630      	mov	r0, r6
 8002f26:	f7ff ffbf 	bl	8002ea8 <sbrk_aligned>
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	d158      	bne.n	8002fe2 <_malloc_r+0xf6>
 8002f30:	f8d8 4000 	ldr.w	r4, [r8]
 8002f34:	4627      	mov	r7, r4
 8002f36:	2f00      	cmp	r7, #0
 8002f38:	d143      	bne.n	8002fc2 <_malloc_r+0xd6>
 8002f3a:	2c00      	cmp	r4, #0
 8002f3c:	d04b      	beq.n	8002fd6 <_malloc_r+0xea>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	4639      	mov	r1, r7
 8002f42:	4630      	mov	r0, r6
 8002f44:	eb04 0903 	add.w	r9, r4, r3
 8002f48:	f000 fdce 	bl	8003ae8 <_sbrk_r>
 8002f4c:	4581      	cmp	r9, r0
 8002f4e:	d142      	bne.n	8002fd6 <_malloc_r+0xea>
 8002f50:	6821      	ldr	r1, [r4, #0]
 8002f52:	1a6d      	subs	r5, r5, r1
 8002f54:	4629      	mov	r1, r5
 8002f56:	4630      	mov	r0, r6
 8002f58:	f7ff ffa6 	bl	8002ea8 <sbrk_aligned>
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d03a      	beq.n	8002fd6 <_malloc_r+0xea>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	442b      	add	r3, r5
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	f8d8 3000 	ldr.w	r3, [r8]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	bb62      	cbnz	r2, 8002fc8 <_malloc_r+0xdc>
 8002f6e:	f8c8 7000 	str.w	r7, [r8]
 8002f72:	e00f      	b.n	8002f94 <_malloc_r+0xa8>
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	1b52      	subs	r2, r2, r5
 8002f78:	d420      	bmi.n	8002fbc <_malloc_r+0xd0>
 8002f7a:	2a0b      	cmp	r2, #11
 8002f7c:	d917      	bls.n	8002fae <_malloc_r+0xc2>
 8002f7e:	1961      	adds	r1, r4, r5
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	6025      	str	r5, [r4, #0]
 8002f84:	bf18      	it	ne
 8002f86:	6059      	strne	r1, [r3, #4]
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	bf08      	it	eq
 8002f8c:	f8c8 1000 	streq.w	r1, [r8]
 8002f90:	5162      	str	r2, [r4, r5]
 8002f92:	604b      	str	r3, [r1, #4]
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f82f 	bl	8002ff8 <__malloc_unlock>
 8002f9a:	f104 000b 	add.w	r0, r4, #11
 8002f9e:	1d23      	adds	r3, r4, #4
 8002fa0:	f020 0007 	bic.w	r0, r0, #7
 8002fa4:	1ac2      	subs	r2, r0, r3
 8002fa6:	bf1c      	itt	ne
 8002fa8:	1a1b      	subne	r3, r3, r0
 8002faa:	50a3      	strne	r3, [r4, r2]
 8002fac:	e7af      	b.n	8002f0e <_malloc_r+0x22>
 8002fae:	6862      	ldr	r2, [r4, #4]
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	bf0c      	ite	eq
 8002fb4:	f8c8 2000 	streq.w	r2, [r8]
 8002fb8:	605a      	strne	r2, [r3, #4]
 8002fba:	e7eb      	b.n	8002f94 <_malloc_r+0xa8>
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	6864      	ldr	r4, [r4, #4]
 8002fc0:	e7ae      	b.n	8002f20 <_malloc_r+0x34>
 8002fc2:	463c      	mov	r4, r7
 8002fc4:	687f      	ldr	r7, [r7, #4]
 8002fc6:	e7b6      	b.n	8002f36 <_malloc_r+0x4a>
 8002fc8:	461a      	mov	r2, r3
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d1fb      	bne.n	8002fc8 <_malloc_r+0xdc>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6053      	str	r3, [r2, #4]
 8002fd4:	e7de      	b.n	8002f94 <_malloc_r+0xa8>
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	6033      	str	r3, [r6, #0]
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f000 f80c 	bl	8002ff8 <__malloc_unlock>
 8002fe0:	e794      	b.n	8002f0c <_malloc_r+0x20>
 8002fe2:	6005      	str	r5, [r0, #0]
 8002fe4:	e7d6      	b.n	8002f94 <_malloc_r+0xa8>
 8002fe6:	bf00      	nop
 8002fe8:	200004e0 	.word	0x200004e0

08002fec <__malloc_lock>:
 8002fec:	4801      	ldr	r0, [pc, #4]	@ (8002ff4 <__malloc_lock+0x8>)
 8002fee:	f7ff bf0e 	b.w	8002e0e <__retarget_lock_acquire_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	200004d8 	.word	0x200004d8

08002ff8 <__malloc_unlock>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	@ (8003000 <__malloc_unlock+0x8>)
 8002ffa:	f7ff bf09 	b.w	8002e10 <__retarget_lock_release_recursive>
 8002ffe:	bf00      	nop
 8003000:	200004d8 	.word	0x200004d8

08003004 <__ssputs_r>:
 8003004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003008:	688e      	ldr	r6, [r1, #8]
 800300a:	461f      	mov	r7, r3
 800300c:	42be      	cmp	r6, r7
 800300e:	680b      	ldr	r3, [r1, #0]
 8003010:	4682      	mov	sl, r0
 8003012:	460c      	mov	r4, r1
 8003014:	4690      	mov	r8, r2
 8003016:	d82d      	bhi.n	8003074 <__ssputs_r+0x70>
 8003018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800301c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003020:	d026      	beq.n	8003070 <__ssputs_r+0x6c>
 8003022:	6965      	ldr	r5, [r4, #20]
 8003024:	6909      	ldr	r1, [r1, #16]
 8003026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800302a:	eba3 0901 	sub.w	r9, r3, r1
 800302e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003032:	1c7b      	adds	r3, r7, #1
 8003034:	444b      	add	r3, r9
 8003036:	106d      	asrs	r5, r5, #1
 8003038:	429d      	cmp	r5, r3
 800303a:	bf38      	it	cc
 800303c:	461d      	movcc	r5, r3
 800303e:	0553      	lsls	r3, r2, #21
 8003040:	d527      	bpl.n	8003092 <__ssputs_r+0x8e>
 8003042:	4629      	mov	r1, r5
 8003044:	f7ff ff52 	bl	8002eec <_malloc_r>
 8003048:	4606      	mov	r6, r0
 800304a:	b360      	cbz	r0, 80030a6 <__ssputs_r+0xa2>
 800304c:	6921      	ldr	r1, [r4, #16]
 800304e:	464a      	mov	r2, r9
 8003050:	f000 fd5a 	bl	8003b08 <memcpy>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800305a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800305e:	81a3      	strh	r3, [r4, #12]
 8003060:	6126      	str	r6, [r4, #16]
 8003062:	6165      	str	r5, [r4, #20]
 8003064:	444e      	add	r6, r9
 8003066:	eba5 0509 	sub.w	r5, r5, r9
 800306a:	6026      	str	r6, [r4, #0]
 800306c:	60a5      	str	r5, [r4, #8]
 800306e:	463e      	mov	r6, r7
 8003070:	42be      	cmp	r6, r7
 8003072:	d900      	bls.n	8003076 <__ssputs_r+0x72>
 8003074:	463e      	mov	r6, r7
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	4632      	mov	r2, r6
 800307a:	4641      	mov	r1, r8
 800307c:	f000 fcf8 	bl	8003a70 <memmove>
 8003080:	68a3      	ldr	r3, [r4, #8]
 8003082:	1b9b      	subs	r3, r3, r6
 8003084:	60a3      	str	r3, [r4, #8]
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	4433      	add	r3, r6
 800308a:	6023      	str	r3, [r4, #0]
 800308c:	2000      	movs	r0, #0
 800308e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003092:	462a      	mov	r2, r5
 8003094:	f000 fd46 	bl	8003b24 <_realloc_r>
 8003098:	4606      	mov	r6, r0
 800309a:	2800      	cmp	r0, #0
 800309c:	d1e0      	bne.n	8003060 <__ssputs_r+0x5c>
 800309e:	6921      	ldr	r1, [r4, #16]
 80030a0:	4650      	mov	r0, sl
 80030a2:	f7ff feb7 	bl	8002e14 <_free_r>
 80030a6:	230c      	movs	r3, #12
 80030a8:	f8ca 3000 	str.w	r3, [sl]
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b2:	81a3      	strh	r3, [r4, #12]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030b8:	e7e9      	b.n	800308e <__ssputs_r+0x8a>
	...

080030bc <_svfiprintf_r>:
 80030bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c0:	4698      	mov	r8, r3
 80030c2:	898b      	ldrh	r3, [r1, #12]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	b09d      	sub	sp, #116	@ 0x74
 80030c8:	4607      	mov	r7, r0
 80030ca:	460d      	mov	r5, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	d510      	bpl.n	80030f2 <_svfiprintf_r+0x36>
 80030d0:	690b      	ldr	r3, [r1, #16]
 80030d2:	b973      	cbnz	r3, 80030f2 <_svfiprintf_r+0x36>
 80030d4:	2140      	movs	r1, #64	@ 0x40
 80030d6:	f7ff ff09 	bl	8002eec <_malloc_r>
 80030da:	6028      	str	r0, [r5, #0]
 80030dc:	6128      	str	r0, [r5, #16]
 80030de:	b930      	cbnz	r0, 80030ee <_svfiprintf_r+0x32>
 80030e0:	230c      	movs	r3, #12
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030e8:	b01d      	add	sp, #116	@ 0x74
 80030ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ee:	2340      	movs	r3, #64	@ 0x40
 80030f0:	616b      	str	r3, [r5, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80030f6:	2320      	movs	r3, #32
 80030f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003100:	2330      	movs	r3, #48	@ 0x30
 8003102:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80032a0 <_svfiprintf_r+0x1e4>
 8003106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800310a:	f04f 0901 	mov.w	r9, #1
 800310e:	4623      	mov	r3, r4
 8003110:	469a      	mov	sl, r3
 8003112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003116:	b10a      	cbz	r2, 800311c <_svfiprintf_r+0x60>
 8003118:	2a25      	cmp	r2, #37	@ 0x25
 800311a:	d1f9      	bne.n	8003110 <_svfiprintf_r+0x54>
 800311c:	ebba 0b04 	subs.w	fp, sl, r4
 8003120:	d00b      	beq.n	800313a <_svfiprintf_r+0x7e>
 8003122:	465b      	mov	r3, fp
 8003124:	4622      	mov	r2, r4
 8003126:	4629      	mov	r1, r5
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ff6b 	bl	8003004 <__ssputs_r>
 800312e:	3001      	adds	r0, #1
 8003130:	f000 80a7 	beq.w	8003282 <_svfiprintf_r+0x1c6>
 8003134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003136:	445a      	add	r2, fp
 8003138:	9209      	str	r2, [sp, #36]	@ 0x24
 800313a:	f89a 3000 	ldrb.w	r3, [sl]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 809f 	beq.w	8003282 <_svfiprintf_r+0x1c6>
 8003144:	2300      	movs	r3, #0
 8003146:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800314a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800314e:	f10a 0a01 	add.w	sl, sl, #1
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	9307      	str	r3, [sp, #28]
 8003156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800315a:	931a      	str	r3, [sp, #104]	@ 0x68
 800315c:	4654      	mov	r4, sl
 800315e:	2205      	movs	r2, #5
 8003160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003164:	484e      	ldr	r0, [pc, #312]	@ (80032a0 <_svfiprintf_r+0x1e4>)
 8003166:	f7fd f83b 	bl	80001e0 <memchr>
 800316a:	9a04      	ldr	r2, [sp, #16]
 800316c:	b9d8      	cbnz	r0, 80031a6 <_svfiprintf_r+0xea>
 800316e:	06d0      	lsls	r0, r2, #27
 8003170:	bf44      	itt	mi
 8003172:	2320      	movmi	r3, #32
 8003174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003178:	0711      	lsls	r1, r2, #28
 800317a:	bf44      	itt	mi
 800317c:	232b      	movmi	r3, #43	@ 0x2b
 800317e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003182:	f89a 3000 	ldrb.w	r3, [sl]
 8003186:	2b2a      	cmp	r3, #42	@ 0x2a
 8003188:	d015      	beq.n	80031b6 <_svfiprintf_r+0xfa>
 800318a:	9a07      	ldr	r2, [sp, #28]
 800318c:	4654      	mov	r4, sl
 800318e:	2000      	movs	r0, #0
 8003190:	f04f 0c0a 	mov.w	ip, #10
 8003194:	4621      	mov	r1, r4
 8003196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800319a:	3b30      	subs	r3, #48	@ 0x30
 800319c:	2b09      	cmp	r3, #9
 800319e:	d94b      	bls.n	8003238 <_svfiprintf_r+0x17c>
 80031a0:	b1b0      	cbz	r0, 80031d0 <_svfiprintf_r+0x114>
 80031a2:	9207      	str	r2, [sp, #28]
 80031a4:	e014      	b.n	80031d0 <_svfiprintf_r+0x114>
 80031a6:	eba0 0308 	sub.w	r3, r0, r8
 80031aa:	fa09 f303 	lsl.w	r3, r9, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	9304      	str	r3, [sp, #16]
 80031b2:	46a2      	mov	sl, r4
 80031b4:	e7d2      	b.n	800315c <_svfiprintf_r+0xa0>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	1d19      	adds	r1, r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	9103      	str	r1, [sp, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfbb      	ittet	lt
 80031c2:	425b      	neglt	r3, r3
 80031c4:	f042 0202 	orrlt.w	r2, r2, #2
 80031c8:	9307      	strge	r3, [sp, #28]
 80031ca:	9307      	strlt	r3, [sp, #28]
 80031cc:	bfb8      	it	lt
 80031ce:	9204      	strlt	r2, [sp, #16]
 80031d0:	7823      	ldrb	r3, [r4, #0]
 80031d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80031d4:	d10a      	bne.n	80031ec <_svfiprintf_r+0x130>
 80031d6:	7863      	ldrb	r3, [r4, #1]
 80031d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031da:	d132      	bne.n	8003242 <_svfiprintf_r+0x186>
 80031dc:	9b03      	ldr	r3, [sp, #12]
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	9203      	str	r2, [sp, #12]
 80031e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031e8:	3402      	adds	r4, #2
 80031ea:	9305      	str	r3, [sp, #20]
 80031ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80032b0 <_svfiprintf_r+0x1f4>
 80031f0:	7821      	ldrb	r1, [r4, #0]
 80031f2:	2203      	movs	r2, #3
 80031f4:	4650      	mov	r0, sl
 80031f6:	f7fc fff3 	bl	80001e0 <memchr>
 80031fa:	b138      	cbz	r0, 800320c <_svfiprintf_r+0x150>
 80031fc:	9b04      	ldr	r3, [sp, #16]
 80031fe:	eba0 000a 	sub.w	r0, r0, sl
 8003202:	2240      	movs	r2, #64	@ 0x40
 8003204:	4082      	lsls	r2, r0
 8003206:	4313      	orrs	r3, r2
 8003208:	3401      	adds	r4, #1
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003210:	4824      	ldr	r0, [pc, #144]	@ (80032a4 <_svfiprintf_r+0x1e8>)
 8003212:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003216:	2206      	movs	r2, #6
 8003218:	f7fc ffe2 	bl	80001e0 <memchr>
 800321c:	2800      	cmp	r0, #0
 800321e:	d036      	beq.n	800328e <_svfiprintf_r+0x1d2>
 8003220:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <_svfiprintf_r+0x1ec>)
 8003222:	bb1b      	cbnz	r3, 800326c <_svfiprintf_r+0x1b0>
 8003224:	9b03      	ldr	r3, [sp, #12]
 8003226:	3307      	adds	r3, #7
 8003228:	f023 0307 	bic.w	r3, r3, #7
 800322c:	3308      	adds	r3, #8
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003232:	4433      	add	r3, r6
 8003234:	9309      	str	r3, [sp, #36]	@ 0x24
 8003236:	e76a      	b.n	800310e <_svfiprintf_r+0x52>
 8003238:	fb0c 3202 	mla	r2, ip, r2, r3
 800323c:	460c      	mov	r4, r1
 800323e:	2001      	movs	r0, #1
 8003240:	e7a8      	b.n	8003194 <_svfiprintf_r+0xd8>
 8003242:	2300      	movs	r3, #0
 8003244:	3401      	adds	r4, #1
 8003246:	9305      	str	r3, [sp, #20]
 8003248:	4619      	mov	r1, r3
 800324a:	f04f 0c0a 	mov.w	ip, #10
 800324e:	4620      	mov	r0, r4
 8003250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003254:	3a30      	subs	r2, #48	@ 0x30
 8003256:	2a09      	cmp	r2, #9
 8003258:	d903      	bls.n	8003262 <_svfiprintf_r+0x1a6>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0c6      	beq.n	80031ec <_svfiprintf_r+0x130>
 800325e:	9105      	str	r1, [sp, #20]
 8003260:	e7c4      	b.n	80031ec <_svfiprintf_r+0x130>
 8003262:	fb0c 2101 	mla	r1, ip, r1, r2
 8003266:	4604      	mov	r4, r0
 8003268:	2301      	movs	r3, #1
 800326a:	e7f0      	b.n	800324e <_svfiprintf_r+0x192>
 800326c:	ab03      	add	r3, sp, #12
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	462a      	mov	r2, r5
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <_svfiprintf_r+0x1f0>)
 8003274:	a904      	add	r1, sp, #16
 8003276:	4638      	mov	r0, r7
 8003278:	f3af 8000 	nop.w
 800327c:	1c42      	adds	r2, r0, #1
 800327e:	4606      	mov	r6, r0
 8003280:	d1d6      	bne.n	8003230 <_svfiprintf_r+0x174>
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	065b      	lsls	r3, r3, #25
 8003286:	f53f af2d 	bmi.w	80030e4 <_svfiprintf_r+0x28>
 800328a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800328c:	e72c      	b.n	80030e8 <_svfiprintf_r+0x2c>
 800328e:	ab03      	add	r3, sp, #12
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	462a      	mov	r2, r5
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <_svfiprintf_r+0x1f0>)
 8003296:	a904      	add	r1, sp, #16
 8003298:	4638      	mov	r0, r7
 800329a:	f000 f9bb 	bl	8003614 <_printf_i>
 800329e:	e7ed      	b.n	800327c <_svfiprintf_r+0x1c0>
 80032a0:	08003c64 	.word	0x08003c64
 80032a4:	08003c6e 	.word	0x08003c6e
 80032a8:	00000000 	.word	0x00000000
 80032ac:	08003005 	.word	0x08003005
 80032b0:	08003c6a 	.word	0x08003c6a

080032b4 <__sfputc_r>:
 80032b4:	6893      	ldr	r3, [r2, #8]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	b410      	push	{r4}
 80032bc:	6093      	str	r3, [r2, #8]
 80032be:	da08      	bge.n	80032d2 <__sfputc_r+0x1e>
 80032c0:	6994      	ldr	r4, [r2, #24]
 80032c2:	42a3      	cmp	r3, r4
 80032c4:	db01      	blt.n	80032ca <__sfputc_r+0x16>
 80032c6:	290a      	cmp	r1, #10
 80032c8:	d103      	bne.n	80032d2 <__sfputc_r+0x1e>
 80032ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ce:	f7ff bc7c 	b.w	8002bca <__swbuf_r>
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	1c58      	adds	r0, r3, #1
 80032d6:	6010      	str	r0, [r2, #0]
 80032d8:	7019      	strb	r1, [r3, #0]
 80032da:	4608      	mov	r0, r1
 80032dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <__sfputs_r>:
 80032e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e4:	4606      	mov	r6, r0
 80032e6:	460f      	mov	r7, r1
 80032e8:	4614      	mov	r4, r2
 80032ea:	18d5      	adds	r5, r2, r3
 80032ec:	42ac      	cmp	r4, r5
 80032ee:	d101      	bne.n	80032f4 <__sfputs_r+0x12>
 80032f0:	2000      	movs	r0, #0
 80032f2:	e007      	b.n	8003304 <__sfputs_r+0x22>
 80032f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f8:	463a      	mov	r2, r7
 80032fa:	4630      	mov	r0, r6
 80032fc:	f7ff ffda 	bl	80032b4 <__sfputc_r>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d1f3      	bne.n	80032ec <__sfputs_r+0xa>
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003308 <_vfiprintf_r>:
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	460d      	mov	r5, r1
 800330e:	b09d      	sub	sp, #116	@ 0x74
 8003310:	4614      	mov	r4, r2
 8003312:	4698      	mov	r8, r3
 8003314:	4606      	mov	r6, r0
 8003316:	b118      	cbz	r0, 8003320 <_vfiprintf_r+0x18>
 8003318:	6a03      	ldr	r3, [r0, #32]
 800331a:	b90b      	cbnz	r3, 8003320 <_vfiprintf_r+0x18>
 800331c:	f7ff fb4c 	bl	80029b8 <__sinit>
 8003320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003322:	07d9      	lsls	r1, r3, #31
 8003324:	d405      	bmi.n	8003332 <_vfiprintf_r+0x2a>
 8003326:	89ab      	ldrh	r3, [r5, #12]
 8003328:	059a      	lsls	r2, r3, #22
 800332a:	d402      	bmi.n	8003332 <_vfiprintf_r+0x2a>
 800332c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800332e:	f7ff fd6e 	bl	8002e0e <__retarget_lock_acquire_recursive>
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	071b      	lsls	r3, r3, #28
 8003336:	d501      	bpl.n	800333c <_vfiprintf_r+0x34>
 8003338:	692b      	ldr	r3, [r5, #16]
 800333a:	b99b      	cbnz	r3, 8003364 <_vfiprintf_r+0x5c>
 800333c:	4629      	mov	r1, r5
 800333e:	4630      	mov	r0, r6
 8003340:	f7ff fc82 	bl	8002c48 <__swsetup_r>
 8003344:	b170      	cbz	r0, 8003364 <_vfiprintf_r+0x5c>
 8003346:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003348:	07dc      	lsls	r4, r3, #31
 800334a:	d504      	bpl.n	8003356 <_vfiprintf_r+0x4e>
 800334c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003350:	b01d      	add	sp, #116	@ 0x74
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003356:	89ab      	ldrh	r3, [r5, #12]
 8003358:	0598      	lsls	r0, r3, #22
 800335a:	d4f7      	bmi.n	800334c <_vfiprintf_r+0x44>
 800335c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800335e:	f7ff fd57 	bl	8002e10 <__retarget_lock_release_recursive>
 8003362:	e7f3      	b.n	800334c <_vfiprintf_r+0x44>
 8003364:	2300      	movs	r3, #0
 8003366:	9309      	str	r3, [sp, #36]	@ 0x24
 8003368:	2320      	movs	r3, #32
 800336a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800336e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003372:	2330      	movs	r3, #48	@ 0x30
 8003374:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003524 <_vfiprintf_r+0x21c>
 8003378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800337c:	f04f 0901 	mov.w	r9, #1
 8003380:	4623      	mov	r3, r4
 8003382:	469a      	mov	sl, r3
 8003384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003388:	b10a      	cbz	r2, 800338e <_vfiprintf_r+0x86>
 800338a:	2a25      	cmp	r2, #37	@ 0x25
 800338c:	d1f9      	bne.n	8003382 <_vfiprintf_r+0x7a>
 800338e:	ebba 0b04 	subs.w	fp, sl, r4
 8003392:	d00b      	beq.n	80033ac <_vfiprintf_r+0xa4>
 8003394:	465b      	mov	r3, fp
 8003396:	4622      	mov	r2, r4
 8003398:	4629      	mov	r1, r5
 800339a:	4630      	mov	r0, r6
 800339c:	f7ff ffa1 	bl	80032e2 <__sfputs_r>
 80033a0:	3001      	adds	r0, #1
 80033a2:	f000 80a7 	beq.w	80034f4 <_vfiprintf_r+0x1ec>
 80033a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033a8:	445a      	add	r2, fp
 80033aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80033ac:	f89a 3000 	ldrb.w	r3, [sl]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 809f 	beq.w	80034f4 <_vfiprintf_r+0x1ec>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c0:	f10a 0a01 	add.w	sl, sl, #1
 80033c4:	9304      	str	r3, [sp, #16]
 80033c6:	9307      	str	r3, [sp, #28]
 80033c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80033ce:	4654      	mov	r4, sl
 80033d0:	2205      	movs	r2, #5
 80033d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d6:	4853      	ldr	r0, [pc, #332]	@ (8003524 <_vfiprintf_r+0x21c>)
 80033d8:	f7fc ff02 	bl	80001e0 <memchr>
 80033dc:	9a04      	ldr	r2, [sp, #16]
 80033de:	b9d8      	cbnz	r0, 8003418 <_vfiprintf_r+0x110>
 80033e0:	06d1      	lsls	r1, r2, #27
 80033e2:	bf44      	itt	mi
 80033e4:	2320      	movmi	r3, #32
 80033e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ea:	0713      	lsls	r3, r2, #28
 80033ec:	bf44      	itt	mi
 80033ee:	232b      	movmi	r3, #43	@ 0x2b
 80033f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f4:	f89a 3000 	ldrb.w	r3, [sl]
 80033f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80033fa:	d015      	beq.n	8003428 <_vfiprintf_r+0x120>
 80033fc:	9a07      	ldr	r2, [sp, #28]
 80033fe:	4654      	mov	r4, sl
 8003400:	2000      	movs	r0, #0
 8003402:	f04f 0c0a 	mov.w	ip, #10
 8003406:	4621      	mov	r1, r4
 8003408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800340c:	3b30      	subs	r3, #48	@ 0x30
 800340e:	2b09      	cmp	r3, #9
 8003410:	d94b      	bls.n	80034aa <_vfiprintf_r+0x1a2>
 8003412:	b1b0      	cbz	r0, 8003442 <_vfiprintf_r+0x13a>
 8003414:	9207      	str	r2, [sp, #28]
 8003416:	e014      	b.n	8003442 <_vfiprintf_r+0x13a>
 8003418:	eba0 0308 	sub.w	r3, r0, r8
 800341c:	fa09 f303 	lsl.w	r3, r9, r3
 8003420:	4313      	orrs	r3, r2
 8003422:	9304      	str	r3, [sp, #16]
 8003424:	46a2      	mov	sl, r4
 8003426:	e7d2      	b.n	80033ce <_vfiprintf_r+0xc6>
 8003428:	9b03      	ldr	r3, [sp, #12]
 800342a:	1d19      	adds	r1, r3, #4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	9103      	str	r1, [sp, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	bfbb      	ittet	lt
 8003434:	425b      	neglt	r3, r3
 8003436:	f042 0202 	orrlt.w	r2, r2, #2
 800343a:	9307      	strge	r3, [sp, #28]
 800343c:	9307      	strlt	r3, [sp, #28]
 800343e:	bfb8      	it	lt
 8003440:	9204      	strlt	r2, [sp, #16]
 8003442:	7823      	ldrb	r3, [r4, #0]
 8003444:	2b2e      	cmp	r3, #46	@ 0x2e
 8003446:	d10a      	bne.n	800345e <_vfiprintf_r+0x156>
 8003448:	7863      	ldrb	r3, [r4, #1]
 800344a:	2b2a      	cmp	r3, #42	@ 0x2a
 800344c:	d132      	bne.n	80034b4 <_vfiprintf_r+0x1ac>
 800344e:	9b03      	ldr	r3, [sp, #12]
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	9203      	str	r2, [sp, #12]
 8003456:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800345a:	3402      	adds	r4, #2
 800345c:	9305      	str	r3, [sp, #20]
 800345e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003534 <_vfiprintf_r+0x22c>
 8003462:	7821      	ldrb	r1, [r4, #0]
 8003464:	2203      	movs	r2, #3
 8003466:	4650      	mov	r0, sl
 8003468:	f7fc feba 	bl	80001e0 <memchr>
 800346c:	b138      	cbz	r0, 800347e <_vfiprintf_r+0x176>
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	eba0 000a 	sub.w	r0, r0, sl
 8003474:	2240      	movs	r2, #64	@ 0x40
 8003476:	4082      	lsls	r2, r0
 8003478:	4313      	orrs	r3, r2
 800347a:	3401      	adds	r4, #1
 800347c:	9304      	str	r3, [sp, #16]
 800347e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003482:	4829      	ldr	r0, [pc, #164]	@ (8003528 <_vfiprintf_r+0x220>)
 8003484:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003488:	2206      	movs	r2, #6
 800348a:	f7fc fea9 	bl	80001e0 <memchr>
 800348e:	2800      	cmp	r0, #0
 8003490:	d03f      	beq.n	8003512 <_vfiprintf_r+0x20a>
 8003492:	4b26      	ldr	r3, [pc, #152]	@ (800352c <_vfiprintf_r+0x224>)
 8003494:	bb1b      	cbnz	r3, 80034de <_vfiprintf_r+0x1d6>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	3307      	adds	r3, #7
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	3308      	adds	r3, #8
 80034a0:	9303      	str	r3, [sp, #12]
 80034a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034a4:	443b      	add	r3, r7
 80034a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80034a8:	e76a      	b.n	8003380 <_vfiprintf_r+0x78>
 80034aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ae:	460c      	mov	r4, r1
 80034b0:	2001      	movs	r0, #1
 80034b2:	e7a8      	b.n	8003406 <_vfiprintf_r+0xfe>
 80034b4:	2300      	movs	r3, #0
 80034b6:	3401      	adds	r4, #1
 80034b8:	9305      	str	r3, [sp, #20]
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0c0a 	mov.w	ip, #10
 80034c0:	4620      	mov	r0, r4
 80034c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c6:	3a30      	subs	r2, #48	@ 0x30
 80034c8:	2a09      	cmp	r2, #9
 80034ca:	d903      	bls.n	80034d4 <_vfiprintf_r+0x1cc>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0c6      	beq.n	800345e <_vfiprintf_r+0x156>
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	e7c4      	b.n	800345e <_vfiprintf_r+0x156>
 80034d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d8:	4604      	mov	r4, r0
 80034da:	2301      	movs	r3, #1
 80034dc:	e7f0      	b.n	80034c0 <_vfiprintf_r+0x1b8>
 80034de:	ab03      	add	r3, sp, #12
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	462a      	mov	r2, r5
 80034e4:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <_vfiprintf_r+0x228>)
 80034e6:	a904      	add	r1, sp, #16
 80034e8:	4630      	mov	r0, r6
 80034ea:	f3af 8000 	nop.w
 80034ee:	4607      	mov	r7, r0
 80034f0:	1c78      	adds	r0, r7, #1
 80034f2:	d1d6      	bne.n	80034a2 <_vfiprintf_r+0x19a>
 80034f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034f6:	07d9      	lsls	r1, r3, #31
 80034f8:	d405      	bmi.n	8003506 <_vfiprintf_r+0x1fe>
 80034fa:	89ab      	ldrh	r3, [r5, #12]
 80034fc:	059a      	lsls	r2, r3, #22
 80034fe:	d402      	bmi.n	8003506 <_vfiprintf_r+0x1fe>
 8003500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003502:	f7ff fc85 	bl	8002e10 <__retarget_lock_release_recursive>
 8003506:	89ab      	ldrh	r3, [r5, #12]
 8003508:	065b      	lsls	r3, r3, #25
 800350a:	f53f af1f 	bmi.w	800334c <_vfiprintf_r+0x44>
 800350e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003510:	e71e      	b.n	8003350 <_vfiprintf_r+0x48>
 8003512:	ab03      	add	r3, sp, #12
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	462a      	mov	r2, r5
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <_vfiprintf_r+0x228>)
 800351a:	a904      	add	r1, sp, #16
 800351c:	4630      	mov	r0, r6
 800351e:	f000 f879 	bl	8003614 <_printf_i>
 8003522:	e7e4      	b.n	80034ee <_vfiprintf_r+0x1e6>
 8003524:	08003c64 	.word	0x08003c64
 8003528:	08003c6e 	.word	0x08003c6e
 800352c:	00000000 	.word	0x00000000
 8003530:	080032e3 	.word	0x080032e3
 8003534:	08003c6a 	.word	0x08003c6a

08003538 <_printf_common>:
 8003538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	4616      	mov	r6, r2
 800353e:	4698      	mov	r8, r3
 8003540:	688a      	ldr	r2, [r1, #8]
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003548:	4293      	cmp	r3, r2
 800354a:	bfb8      	it	lt
 800354c:	4613      	movlt	r3, r2
 800354e:	6033      	str	r3, [r6, #0]
 8003550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003554:	4607      	mov	r7, r0
 8003556:	460c      	mov	r4, r1
 8003558:	b10a      	cbz	r2, 800355e <_printf_common+0x26>
 800355a:	3301      	adds	r3, #1
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	0699      	lsls	r1, r3, #26
 8003562:	bf42      	ittt	mi
 8003564:	6833      	ldrmi	r3, [r6, #0]
 8003566:	3302      	addmi	r3, #2
 8003568:	6033      	strmi	r3, [r6, #0]
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	f015 0506 	ands.w	r5, r5, #6
 8003570:	d106      	bne.n	8003580 <_printf_common+0x48>
 8003572:	f104 0a19 	add.w	sl, r4, #25
 8003576:	68e3      	ldr	r3, [r4, #12]
 8003578:	6832      	ldr	r2, [r6, #0]
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	42ab      	cmp	r3, r5
 800357e:	dc26      	bgt.n	80035ce <_printf_common+0x96>
 8003580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	3b00      	subs	r3, #0
 8003588:	bf18      	it	ne
 800358a:	2301      	movne	r3, #1
 800358c:	0692      	lsls	r2, r2, #26
 800358e:	d42b      	bmi.n	80035e8 <_printf_common+0xb0>
 8003590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003594:	4641      	mov	r1, r8
 8003596:	4638      	mov	r0, r7
 8003598:	47c8      	blx	r9
 800359a:	3001      	adds	r0, #1
 800359c:	d01e      	beq.n	80035dc <_printf_common+0xa4>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	6922      	ldr	r2, [r4, #16]
 80035a2:	f003 0306 	and.w	r3, r3, #6
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf02      	ittt	eq
 80035aa:	68e5      	ldreq	r5, [r4, #12]
 80035ac:	6833      	ldreq	r3, [r6, #0]
 80035ae:	1aed      	subeq	r5, r5, r3
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	bf0c      	ite	eq
 80035b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b8:	2500      	movne	r5, #0
 80035ba:	4293      	cmp	r3, r2
 80035bc:	bfc4      	itt	gt
 80035be:	1a9b      	subgt	r3, r3, r2
 80035c0:	18ed      	addgt	r5, r5, r3
 80035c2:	2600      	movs	r6, #0
 80035c4:	341a      	adds	r4, #26
 80035c6:	42b5      	cmp	r5, r6
 80035c8:	d11a      	bne.n	8003600 <_printf_common+0xc8>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e008      	b.n	80035e0 <_printf_common+0xa8>
 80035ce:	2301      	movs	r3, #1
 80035d0:	4652      	mov	r2, sl
 80035d2:	4641      	mov	r1, r8
 80035d4:	4638      	mov	r0, r7
 80035d6:	47c8      	blx	r9
 80035d8:	3001      	adds	r0, #1
 80035da:	d103      	bne.n	80035e4 <_printf_common+0xac>
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e4:	3501      	adds	r5, #1
 80035e6:	e7c6      	b.n	8003576 <_printf_common+0x3e>
 80035e8:	18e1      	adds	r1, r4, r3
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	2030      	movs	r0, #48	@ 0x30
 80035ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035f2:	4422      	add	r2, r4
 80035f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035fc:	3302      	adds	r3, #2
 80035fe:	e7c7      	b.n	8003590 <_printf_common+0x58>
 8003600:	2301      	movs	r3, #1
 8003602:	4622      	mov	r2, r4
 8003604:	4641      	mov	r1, r8
 8003606:	4638      	mov	r0, r7
 8003608:	47c8      	blx	r9
 800360a:	3001      	adds	r0, #1
 800360c:	d0e6      	beq.n	80035dc <_printf_common+0xa4>
 800360e:	3601      	adds	r6, #1
 8003610:	e7d9      	b.n	80035c6 <_printf_common+0x8e>
	...

08003614 <_printf_i>:
 8003614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	7e0f      	ldrb	r7, [r1, #24]
 800361a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800361c:	2f78      	cmp	r7, #120	@ 0x78
 800361e:	4691      	mov	r9, r2
 8003620:	4680      	mov	r8, r0
 8003622:	460c      	mov	r4, r1
 8003624:	469a      	mov	sl, r3
 8003626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800362a:	d807      	bhi.n	800363c <_printf_i+0x28>
 800362c:	2f62      	cmp	r7, #98	@ 0x62
 800362e:	d80a      	bhi.n	8003646 <_printf_i+0x32>
 8003630:	2f00      	cmp	r7, #0
 8003632:	f000 80d2 	beq.w	80037da <_printf_i+0x1c6>
 8003636:	2f58      	cmp	r7, #88	@ 0x58
 8003638:	f000 80b9 	beq.w	80037ae <_printf_i+0x19a>
 800363c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003644:	e03a      	b.n	80036bc <_printf_i+0xa8>
 8003646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800364a:	2b15      	cmp	r3, #21
 800364c:	d8f6      	bhi.n	800363c <_printf_i+0x28>
 800364e:	a101      	add	r1, pc, #4	@ (adr r1, 8003654 <_printf_i+0x40>)
 8003650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003654:	080036ad 	.word	0x080036ad
 8003658:	080036c1 	.word	0x080036c1
 800365c:	0800363d 	.word	0x0800363d
 8003660:	0800363d 	.word	0x0800363d
 8003664:	0800363d 	.word	0x0800363d
 8003668:	0800363d 	.word	0x0800363d
 800366c:	080036c1 	.word	0x080036c1
 8003670:	0800363d 	.word	0x0800363d
 8003674:	0800363d 	.word	0x0800363d
 8003678:	0800363d 	.word	0x0800363d
 800367c:	0800363d 	.word	0x0800363d
 8003680:	080037c1 	.word	0x080037c1
 8003684:	080036eb 	.word	0x080036eb
 8003688:	0800377b 	.word	0x0800377b
 800368c:	0800363d 	.word	0x0800363d
 8003690:	0800363d 	.word	0x0800363d
 8003694:	080037e3 	.word	0x080037e3
 8003698:	0800363d 	.word	0x0800363d
 800369c:	080036eb 	.word	0x080036eb
 80036a0:	0800363d 	.word	0x0800363d
 80036a4:	0800363d 	.word	0x0800363d
 80036a8:	08003783 	.word	0x08003783
 80036ac:	6833      	ldr	r3, [r6, #0]
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6032      	str	r2, [r6, #0]
 80036b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036bc:	2301      	movs	r3, #1
 80036be:	e09d      	b.n	80037fc <_printf_i+0x1e8>
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	1d19      	adds	r1, r3, #4
 80036c6:	6031      	str	r1, [r6, #0]
 80036c8:	0606      	lsls	r6, r0, #24
 80036ca:	d501      	bpl.n	80036d0 <_printf_i+0xbc>
 80036cc:	681d      	ldr	r5, [r3, #0]
 80036ce:	e003      	b.n	80036d8 <_printf_i+0xc4>
 80036d0:	0645      	lsls	r5, r0, #25
 80036d2:	d5fb      	bpl.n	80036cc <_printf_i+0xb8>
 80036d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d8:	2d00      	cmp	r5, #0
 80036da:	da03      	bge.n	80036e4 <_printf_i+0xd0>
 80036dc:	232d      	movs	r3, #45	@ 0x2d
 80036de:	426d      	negs	r5, r5
 80036e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e4:	4859      	ldr	r0, [pc, #356]	@ (800384c <_printf_i+0x238>)
 80036e6:	230a      	movs	r3, #10
 80036e8:	e011      	b.n	800370e <_printf_i+0xfa>
 80036ea:	6821      	ldr	r1, [r4, #0]
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	0608      	lsls	r0, r1, #24
 80036f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80036f4:	d402      	bmi.n	80036fc <_printf_i+0xe8>
 80036f6:	0649      	lsls	r1, r1, #25
 80036f8:	bf48      	it	mi
 80036fa:	b2ad      	uxthmi	r5, r5
 80036fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80036fe:	4853      	ldr	r0, [pc, #332]	@ (800384c <_printf_i+0x238>)
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	bf14      	ite	ne
 8003704:	230a      	movne	r3, #10
 8003706:	2308      	moveq	r3, #8
 8003708:	2100      	movs	r1, #0
 800370a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800370e:	6866      	ldr	r6, [r4, #4]
 8003710:	60a6      	str	r6, [r4, #8]
 8003712:	2e00      	cmp	r6, #0
 8003714:	bfa2      	ittt	ge
 8003716:	6821      	ldrge	r1, [r4, #0]
 8003718:	f021 0104 	bicge.w	r1, r1, #4
 800371c:	6021      	strge	r1, [r4, #0]
 800371e:	b90d      	cbnz	r5, 8003724 <_printf_i+0x110>
 8003720:	2e00      	cmp	r6, #0
 8003722:	d04b      	beq.n	80037bc <_printf_i+0x1a8>
 8003724:	4616      	mov	r6, r2
 8003726:	fbb5 f1f3 	udiv	r1, r5, r3
 800372a:	fb03 5711 	mls	r7, r3, r1, r5
 800372e:	5dc7      	ldrb	r7, [r0, r7]
 8003730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003734:	462f      	mov	r7, r5
 8003736:	42bb      	cmp	r3, r7
 8003738:	460d      	mov	r5, r1
 800373a:	d9f4      	bls.n	8003726 <_printf_i+0x112>
 800373c:	2b08      	cmp	r3, #8
 800373e:	d10b      	bne.n	8003758 <_printf_i+0x144>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	07df      	lsls	r7, r3, #31
 8003744:	d508      	bpl.n	8003758 <_printf_i+0x144>
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	6861      	ldr	r1, [r4, #4]
 800374a:	4299      	cmp	r1, r3
 800374c:	bfde      	ittt	le
 800374e:	2330      	movle	r3, #48	@ 0x30
 8003750:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003754:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003758:	1b92      	subs	r2, r2, r6
 800375a:	6122      	str	r2, [r4, #16]
 800375c:	f8cd a000 	str.w	sl, [sp]
 8003760:	464b      	mov	r3, r9
 8003762:	aa03      	add	r2, sp, #12
 8003764:	4621      	mov	r1, r4
 8003766:	4640      	mov	r0, r8
 8003768:	f7ff fee6 	bl	8003538 <_printf_common>
 800376c:	3001      	adds	r0, #1
 800376e:	d14a      	bne.n	8003806 <_printf_i+0x1f2>
 8003770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003774:	b004      	add	sp, #16
 8003776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	f043 0320 	orr.w	r3, r3, #32
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	4833      	ldr	r0, [pc, #204]	@ (8003850 <_printf_i+0x23c>)
 8003784:	2778      	movs	r7, #120	@ 0x78
 8003786:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	6831      	ldr	r1, [r6, #0]
 800378e:	061f      	lsls	r7, r3, #24
 8003790:	f851 5b04 	ldr.w	r5, [r1], #4
 8003794:	d402      	bmi.n	800379c <_printf_i+0x188>
 8003796:	065f      	lsls	r7, r3, #25
 8003798:	bf48      	it	mi
 800379a:	b2ad      	uxthmi	r5, r5
 800379c:	6031      	str	r1, [r6, #0]
 800379e:	07d9      	lsls	r1, r3, #31
 80037a0:	bf44      	itt	mi
 80037a2:	f043 0320 	orrmi.w	r3, r3, #32
 80037a6:	6023      	strmi	r3, [r4, #0]
 80037a8:	b11d      	cbz	r5, 80037b2 <_printf_i+0x19e>
 80037aa:	2310      	movs	r3, #16
 80037ac:	e7ac      	b.n	8003708 <_printf_i+0xf4>
 80037ae:	4827      	ldr	r0, [pc, #156]	@ (800384c <_printf_i+0x238>)
 80037b0:	e7e9      	b.n	8003786 <_printf_i+0x172>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	f023 0320 	bic.w	r3, r3, #32
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	e7f6      	b.n	80037aa <_printf_i+0x196>
 80037bc:	4616      	mov	r6, r2
 80037be:	e7bd      	b.n	800373c <_printf_i+0x128>
 80037c0:	6833      	ldr	r3, [r6, #0]
 80037c2:	6825      	ldr	r5, [r4, #0]
 80037c4:	6961      	ldr	r1, [r4, #20]
 80037c6:	1d18      	adds	r0, r3, #4
 80037c8:	6030      	str	r0, [r6, #0]
 80037ca:	062e      	lsls	r6, r5, #24
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	d501      	bpl.n	80037d4 <_printf_i+0x1c0>
 80037d0:	6019      	str	r1, [r3, #0]
 80037d2:	e002      	b.n	80037da <_printf_i+0x1c6>
 80037d4:	0668      	lsls	r0, r5, #25
 80037d6:	d5fb      	bpl.n	80037d0 <_printf_i+0x1bc>
 80037d8:	8019      	strh	r1, [r3, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	4616      	mov	r6, r2
 80037e0:	e7bc      	b.n	800375c <_printf_i+0x148>
 80037e2:	6833      	ldr	r3, [r6, #0]
 80037e4:	1d1a      	adds	r2, r3, #4
 80037e6:	6032      	str	r2, [r6, #0]
 80037e8:	681e      	ldr	r6, [r3, #0]
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	2100      	movs	r1, #0
 80037ee:	4630      	mov	r0, r6
 80037f0:	f7fc fcf6 	bl	80001e0 <memchr>
 80037f4:	b108      	cbz	r0, 80037fa <_printf_i+0x1e6>
 80037f6:	1b80      	subs	r0, r0, r6
 80037f8:	6060      	str	r0, [r4, #4]
 80037fa:	6863      	ldr	r3, [r4, #4]
 80037fc:	6123      	str	r3, [r4, #16]
 80037fe:	2300      	movs	r3, #0
 8003800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003804:	e7aa      	b.n	800375c <_printf_i+0x148>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	4632      	mov	r2, r6
 800380a:	4649      	mov	r1, r9
 800380c:	4640      	mov	r0, r8
 800380e:	47d0      	blx	sl
 8003810:	3001      	adds	r0, #1
 8003812:	d0ad      	beq.n	8003770 <_printf_i+0x15c>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	079b      	lsls	r3, r3, #30
 8003818:	d413      	bmi.n	8003842 <_printf_i+0x22e>
 800381a:	68e0      	ldr	r0, [r4, #12]
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	4298      	cmp	r0, r3
 8003820:	bfb8      	it	lt
 8003822:	4618      	movlt	r0, r3
 8003824:	e7a6      	b.n	8003774 <_printf_i+0x160>
 8003826:	2301      	movs	r3, #1
 8003828:	4632      	mov	r2, r6
 800382a:	4649      	mov	r1, r9
 800382c:	4640      	mov	r0, r8
 800382e:	47d0      	blx	sl
 8003830:	3001      	adds	r0, #1
 8003832:	d09d      	beq.n	8003770 <_printf_i+0x15c>
 8003834:	3501      	adds	r5, #1
 8003836:	68e3      	ldr	r3, [r4, #12]
 8003838:	9903      	ldr	r1, [sp, #12]
 800383a:	1a5b      	subs	r3, r3, r1
 800383c:	42ab      	cmp	r3, r5
 800383e:	dcf2      	bgt.n	8003826 <_printf_i+0x212>
 8003840:	e7eb      	b.n	800381a <_printf_i+0x206>
 8003842:	2500      	movs	r5, #0
 8003844:	f104 0619 	add.w	r6, r4, #25
 8003848:	e7f5      	b.n	8003836 <_printf_i+0x222>
 800384a:	bf00      	nop
 800384c:	08003c75 	.word	0x08003c75
 8003850:	08003c86 	.word	0x08003c86

08003854 <__sflush_r>:
 8003854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385c:	0716      	lsls	r6, r2, #28
 800385e:	4605      	mov	r5, r0
 8003860:	460c      	mov	r4, r1
 8003862:	d454      	bmi.n	800390e <__sflush_r+0xba>
 8003864:	684b      	ldr	r3, [r1, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	dc02      	bgt.n	8003870 <__sflush_r+0x1c>
 800386a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	dd48      	ble.n	8003902 <__sflush_r+0xae>
 8003870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003872:	2e00      	cmp	r6, #0
 8003874:	d045      	beq.n	8003902 <__sflush_r+0xae>
 8003876:	2300      	movs	r3, #0
 8003878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800387c:	682f      	ldr	r7, [r5, #0]
 800387e:	6a21      	ldr	r1, [r4, #32]
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	d030      	beq.n	80038e6 <__sflush_r+0x92>
 8003884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	0759      	lsls	r1, r3, #29
 800388a:	d505      	bpl.n	8003898 <__sflush_r+0x44>
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003892:	b10b      	cbz	r3, 8003898 <__sflush_r+0x44>
 8003894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800389c:	6a21      	ldr	r1, [r4, #32]
 800389e:	4628      	mov	r0, r5
 80038a0:	47b0      	blx	r6
 80038a2:	1c43      	adds	r3, r0, #1
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	d106      	bne.n	80038b6 <__sflush_r+0x62>
 80038a8:	6829      	ldr	r1, [r5, #0]
 80038aa:	291d      	cmp	r1, #29
 80038ac:	d82b      	bhi.n	8003906 <__sflush_r+0xb2>
 80038ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003958 <__sflush_r+0x104>)
 80038b0:	410a      	asrs	r2, r1
 80038b2:	07d6      	lsls	r6, r2, #31
 80038b4:	d427      	bmi.n	8003906 <__sflush_r+0xb2>
 80038b6:	2200      	movs	r2, #0
 80038b8:	6062      	str	r2, [r4, #4]
 80038ba:	04d9      	lsls	r1, r3, #19
 80038bc:	6922      	ldr	r2, [r4, #16]
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	d504      	bpl.n	80038cc <__sflush_r+0x78>
 80038c2:	1c42      	adds	r2, r0, #1
 80038c4:	d101      	bne.n	80038ca <__sflush_r+0x76>
 80038c6:	682b      	ldr	r3, [r5, #0]
 80038c8:	b903      	cbnz	r3, 80038cc <__sflush_r+0x78>
 80038ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80038cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038ce:	602f      	str	r7, [r5, #0]
 80038d0:	b1b9      	cbz	r1, 8003902 <__sflush_r+0xae>
 80038d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038d6:	4299      	cmp	r1, r3
 80038d8:	d002      	beq.n	80038e0 <__sflush_r+0x8c>
 80038da:	4628      	mov	r0, r5
 80038dc:	f7ff fa9a 	bl	8002e14 <_free_r>
 80038e0:	2300      	movs	r3, #0
 80038e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80038e4:	e00d      	b.n	8003902 <__sflush_r+0xae>
 80038e6:	2301      	movs	r3, #1
 80038e8:	4628      	mov	r0, r5
 80038ea:	47b0      	blx	r6
 80038ec:	4602      	mov	r2, r0
 80038ee:	1c50      	adds	r0, r2, #1
 80038f0:	d1c9      	bne.n	8003886 <__sflush_r+0x32>
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0c6      	beq.n	8003886 <__sflush_r+0x32>
 80038f8:	2b1d      	cmp	r3, #29
 80038fa:	d001      	beq.n	8003900 <__sflush_r+0xac>
 80038fc:	2b16      	cmp	r3, #22
 80038fe:	d11e      	bne.n	800393e <__sflush_r+0xea>
 8003900:	602f      	str	r7, [r5, #0]
 8003902:	2000      	movs	r0, #0
 8003904:	e022      	b.n	800394c <__sflush_r+0xf8>
 8003906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800390a:	b21b      	sxth	r3, r3
 800390c:	e01b      	b.n	8003946 <__sflush_r+0xf2>
 800390e:	690f      	ldr	r7, [r1, #16]
 8003910:	2f00      	cmp	r7, #0
 8003912:	d0f6      	beq.n	8003902 <__sflush_r+0xae>
 8003914:	0793      	lsls	r3, r2, #30
 8003916:	680e      	ldr	r6, [r1, #0]
 8003918:	bf08      	it	eq
 800391a:	694b      	ldreq	r3, [r1, #20]
 800391c:	600f      	str	r7, [r1, #0]
 800391e:	bf18      	it	ne
 8003920:	2300      	movne	r3, #0
 8003922:	eba6 0807 	sub.w	r8, r6, r7
 8003926:	608b      	str	r3, [r1, #8]
 8003928:	f1b8 0f00 	cmp.w	r8, #0
 800392c:	dde9      	ble.n	8003902 <__sflush_r+0xae>
 800392e:	6a21      	ldr	r1, [r4, #32]
 8003930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003932:	4643      	mov	r3, r8
 8003934:	463a      	mov	r2, r7
 8003936:	4628      	mov	r0, r5
 8003938:	47b0      	blx	r6
 800393a:	2800      	cmp	r0, #0
 800393c:	dc08      	bgt.n	8003950 <__sflush_r+0xfc>
 800393e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800394c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003950:	4407      	add	r7, r0
 8003952:	eba8 0800 	sub.w	r8, r8, r0
 8003956:	e7e7      	b.n	8003928 <__sflush_r+0xd4>
 8003958:	dfbffffe 	.word	0xdfbffffe

0800395c <_fflush_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	690b      	ldr	r3, [r1, #16]
 8003960:	4605      	mov	r5, r0
 8003962:	460c      	mov	r4, r1
 8003964:	b913      	cbnz	r3, 800396c <_fflush_r+0x10>
 8003966:	2500      	movs	r5, #0
 8003968:	4628      	mov	r0, r5
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	b118      	cbz	r0, 8003976 <_fflush_r+0x1a>
 800396e:	6a03      	ldr	r3, [r0, #32]
 8003970:	b90b      	cbnz	r3, 8003976 <_fflush_r+0x1a>
 8003972:	f7ff f821 	bl	80029b8 <__sinit>
 8003976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f3      	beq.n	8003966 <_fflush_r+0xa>
 800397e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003980:	07d0      	lsls	r0, r2, #31
 8003982:	d404      	bmi.n	800398e <_fflush_r+0x32>
 8003984:	0599      	lsls	r1, r3, #22
 8003986:	d402      	bmi.n	800398e <_fflush_r+0x32>
 8003988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800398a:	f7ff fa40 	bl	8002e0e <__retarget_lock_acquire_recursive>
 800398e:	4628      	mov	r0, r5
 8003990:	4621      	mov	r1, r4
 8003992:	f7ff ff5f 	bl	8003854 <__sflush_r>
 8003996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003998:	07da      	lsls	r2, r3, #31
 800399a:	4605      	mov	r5, r0
 800399c:	d4e4      	bmi.n	8003968 <_fflush_r+0xc>
 800399e:	89a3      	ldrh	r3, [r4, #12]
 80039a0:	059b      	lsls	r3, r3, #22
 80039a2:	d4e1      	bmi.n	8003968 <_fflush_r+0xc>
 80039a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039a6:	f7ff fa33 	bl	8002e10 <__retarget_lock_release_recursive>
 80039aa:	e7dd      	b.n	8003968 <_fflush_r+0xc>

080039ac <__swhatbuf_r>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	460c      	mov	r4, r1
 80039b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b4:	2900      	cmp	r1, #0
 80039b6:	b096      	sub	sp, #88	@ 0x58
 80039b8:	4615      	mov	r5, r2
 80039ba:	461e      	mov	r6, r3
 80039bc:	da0d      	bge.n	80039da <__swhatbuf_r+0x2e>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2340      	movne	r3, #64	@ 0x40
 80039cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80039d0:	2000      	movs	r0, #0
 80039d2:	6031      	str	r1, [r6, #0]
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	b016      	add	sp, #88	@ 0x58
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
 80039da:	466a      	mov	r2, sp
 80039dc:	f000 f862 	bl	8003aa4 <_fstat_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	dbec      	blt.n	80039be <__swhatbuf_r+0x12>
 80039e4:	9901      	ldr	r1, [sp, #4]
 80039e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80039ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80039ee:	4259      	negs	r1, r3
 80039f0:	4159      	adcs	r1, r3
 80039f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039f6:	e7eb      	b.n	80039d0 <__swhatbuf_r+0x24>

080039f8 <__smakebuf_r>:
 80039f8:	898b      	ldrh	r3, [r1, #12]
 80039fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039fc:	079d      	lsls	r5, r3, #30
 80039fe:	4606      	mov	r6, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	d507      	bpl.n	8003a14 <__smakebuf_r+0x1c>
 8003a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	6123      	str	r3, [r4, #16]
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	6163      	str	r3, [r4, #20]
 8003a10:	b003      	add	sp, #12
 8003a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a14:	ab01      	add	r3, sp, #4
 8003a16:	466a      	mov	r2, sp
 8003a18:	f7ff ffc8 	bl	80039ac <__swhatbuf_r>
 8003a1c:	9f00      	ldr	r7, [sp, #0]
 8003a1e:	4605      	mov	r5, r0
 8003a20:	4639      	mov	r1, r7
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7ff fa62 	bl	8002eec <_malloc_r>
 8003a28:	b948      	cbnz	r0, 8003a3e <__smakebuf_r+0x46>
 8003a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2e:	059a      	lsls	r2, r3, #22
 8003a30:	d4ee      	bmi.n	8003a10 <__smakebuf_r+0x18>
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	e7e2      	b.n	8003a04 <__smakebuf_r+0xc>
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	6020      	str	r0, [r4, #0]
 8003a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a4e:	b15b      	cbz	r3, 8003a68 <__smakebuf_r+0x70>
 8003a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a54:	4630      	mov	r0, r6
 8003a56:	f000 f837 	bl	8003ac8 <_isatty_r>
 8003a5a:	b128      	cbz	r0, 8003a68 <__smakebuf_r+0x70>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	431d      	orrs	r5, r3
 8003a6c:	81a5      	strh	r5, [r4, #12]
 8003a6e:	e7cf      	b.n	8003a10 <__smakebuf_r+0x18>

08003a70 <memmove>:
 8003a70:	4288      	cmp	r0, r1
 8003a72:	b510      	push	{r4, lr}
 8003a74:	eb01 0402 	add.w	r4, r1, r2
 8003a78:	d902      	bls.n	8003a80 <memmove+0x10>
 8003a7a:	4284      	cmp	r4, r0
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	d807      	bhi.n	8003a90 <memmove+0x20>
 8003a80:	1e43      	subs	r3, r0, #1
 8003a82:	42a1      	cmp	r1, r4
 8003a84:	d008      	beq.n	8003a98 <memmove+0x28>
 8003a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a8e:	e7f8      	b.n	8003a82 <memmove+0x12>
 8003a90:	4402      	add	r2, r0
 8003a92:	4601      	mov	r1, r0
 8003a94:	428a      	cmp	r2, r1
 8003a96:	d100      	bne.n	8003a9a <memmove+0x2a>
 8003a98:	bd10      	pop	{r4, pc}
 8003a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aa2:	e7f7      	b.n	8003a94 <memmove+0x24>

08003aa4 <_fstat_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4d07      	ldr	r5, [pc, #28]	@ (8003ac4 <_fstat_r+0x20>)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4604      	mov	r4, r0
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	f7fd f89a 	bl	8000bea <_fstat>
 8003ab6:	1c43      	adds	r3, r0, #1
 8003ab8:	d102      	bne.n	8003ac0 <_fstat_r+0x1c>
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	b103      	cbz	r3, 8003ac0 <_fstat_r+0x1c>
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	bd38      	pop	{r3, r4, r5, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200004d4 	.word	0x200004d4

08003ac8 <_isatty_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d06      	ldr	r5, [pc, #24]	@ (8003ae4 <_isatty_r+0x1c>)
 8003acc:	2300      	movs	r3, #0
 8003ace:	4604      	mov	r4, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	f7fd f88e 	bl	8000bf4 <_isatty>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_isatty_r+0x1a>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_isatty_r+0x1a>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	200004d4 	.word	0x200004d4

08003ae8 <_sbrk_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4d06      	ldr	r5, [pc, #24]	@ (8003b04 <_sbrk_r+0x1c>)
 8003aec:	2300      	movs	r3, #0
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	f7fd f882 	bl	8000bfc <_sbrk>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_sbrk_r+0x1a>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_sbrk_r+0x1a>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	200004d4 	.word	0x200004d4

08003b08 <memcpy>:
 8003b08:	440a      	add	r2, r1
 8003b0a:	4291      	cmp	r1, r2
 8003b0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003b10:	d100      	bne.n	8003b14 <memcpy+0xc>
 8003b12:	4770      	bx	lr
 8003b14:	b510      	push	{r4, lr}
 8003b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b1e:	4291      	cmp	r1, r2
 8003b20:	d1f9      	bne.n	8003b16 <memcpy+0xe>
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <_realloc_r>:
 8003b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b28:	4680      	mov	r8, r0
 8003b2a:	4615      	mov	r5, r2
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	b921      	cbnz	r1, 8003b3a <_realloc_r+0x16>
 8003b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b34:	4611      	mov	r1, r2
 8003b36:	f7ff b9d9 	b.w	8002eec <_malloc_r>
 8003b3a:	b92a      	cbnz	r2, 8003b48 <_realloc_r+0x24>
 8003b3c:	f7ff f96a 	bl	8002e14 <_free_r>
 8003b40:	2400      	movs	r4, #0
 8003b42:	4620      	mov	r0, r4
 8003b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b48:	f000 f81a 	bl	8003b80 <_malloc_usable_size_r>
 8003b4c:	4285      	cmp	r5, r0
 8003b4e:	4606      	mov	r6, r0
 8003b50:	d802      	bhi.n	8003b58 <_realloc_r+0x34>
 8003b52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b56:	d8f4      	bhi.n	8003b42 <_realloc_r+0x1e>
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f7ff f9c6 	bl	8002eec <_malloc_r>
 8003b60:	4607      	mov	r7, r0
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d0ec      	beq.n	8003b40 <_realloc_r+0x1c>
 8003b66:	42b5      	cmp	r5, r6
 8003b68:	462a      	mov	r2, r5
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	bf28      	it	cs
 8003b6e:	4632      	movcs	r2, r6
 8003b70:	f7ff ffca 	bl	8003b08 <memcpy>
 8003b74:	4621      	mov	r1, r4
 8003b76:	4640      	mov	r0, r8
 8003b78:	f7ff f94c 	bl	8002e14 <_free_r>
 8003b7c:	463c      	mov	r4, r7
 8003b7e:	e7e0      	b.n	8003b42 <_realloc_r+0x1e>

08003b80 <_malloc_usable_size_r>:
 8003b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b84:	1f18      	subs	r0, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfbc      	itt	lt
 8003b8a:	580b      	ldrlt	r3, [r1, r0]
 8003b8c:	18c0      	addlt	r0, r0, r3
 8003b8e:	4770      	bx	lr

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
