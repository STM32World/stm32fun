
stm32world_uart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb8  08003cb8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb8  08003cb8  00004cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc0  08003cc0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00004cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003cc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000003bc  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f4e  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bf  00000000  00000000  00015fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000891f  00000000  00000000  000180a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d00  00000000  00000000  000209c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f2  00000000  00000000  000216c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ff95  00000000  00000000  000220ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013137  00000000  00000000  0004204f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c22dc  00000000  00000000  00055186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00117462  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002c30  00000000  00000000  001174a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0011a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bb0 	.word	0x08003bb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003bb0 	.word	0x08003bb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	2400      	movs	r4, #0
 8000576:	9405      	str	r4, [sp, #20]
 8000578:	9406      	str	r4, [sp, #24]
 800057a:	9407      	str	r4, [sp, #28]
 800057c:	9408      	str	r4, [sp, #32]
 800057e:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	9401      	str	r4, [sp, #4]
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f042 0204 	orr.w	r2, r2, #4
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f002 0204 	and.w	r2, r2, #4
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	9402      	str	r4, [sp, #8]
 8000598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005a6:	9202      	str	r2, [sp, #8]
 80005a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9403      	str	r4, [sp, #12]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f042 0201 	orr.w	r2, r2, #1
 80005b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f002 0201 	and.w	r2, r2, #1
 80005ba:	9203      	str	r2, [sp, #12]
 80005bc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	9404      	str	r4, [sp, #16]
 80005c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c2:	f042 0202 	orr.w	r2, r2, #2
 80005c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	9304      	str	r3, [sp, #16]
 80005d0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005d2:	4d0b      	ldr	r5, [pc, #44]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	4628      	mov	r0, r5
 80005dc:	f000 ff9a 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e6:	2311      	movs	r3, #17
 80005e8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ee:	a905      	add	r1, sp, #20
 80005f0:	4628      	mov	r0, r5
 80005f2:	f000 fe99 	bl	8001328 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	b00b      	add	sp, #44	@ 0x2c
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020800 	.word	0x40020800

08000604 <MX_DMA_Init>:
{
 8000604:	b500      	push	{lr}
 8000606:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000608:	2100      	movs	r1, #0
 800060a:	9101      	str	r1, [sp, #4]
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_DMA_Init+0x30>)
 800060e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000610:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000614:	631a      	str	r2, [r3, #48]	@ 0x30
 8000616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000620:	460a      	mov	r2, r1
 8000622:	200d      	movs	r0, #13
 8000624:	f000 fbf2 	bl	8000e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000628:	200d      	movs	r0, #13
 800062a:	f000 fbff 	bl	8000e2c <HAL_NVIC_EnableIRQ>
}
 800062e:	b003      	add	sp, #12
 8000630:	f85d fb04 	ldr.w	pc, [sp], #4
 8000634:	40023800 	.word	0x40023800

08000638 <HAL_GetTick>:
    return uwTick;
 8000638:	4b01      	ldr	r3, [pc, #4]	@ (8000640 <HAL_GetTick+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200002d4 	.word	0x200002d4

08000644 <_write>:
    if (fd == 1 || fd == 2) {
 8000644:	3801      	subs	r0, #1
 8000646:	2801      	cmp	r0, #1
 8000648:	d80a      	bhi.n	8000660 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800064a:	b510      	push	{r4, lr}
 800064c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000652:	b292      	uxth	r2, r2
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <_write+0x28>)
 8000656:	f001 fdf2 	bl	800223e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800065a:	b920      	cbnz	r0, 8000666 <_write+0x22>
            return len;
 800065c:	4620      	mov	r0, r4
}
 800065e:	bd10      	pop	{r4, pc}
    return -1;
 8000660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000664:	4770      	bx	lr
            return -1;
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800066a:	e7f8      	b.n	800065e <_write+0x1a>
 800066c:	200001f8 	.word	0x200001f8

08000670 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000670:	b508      	push	{r3, lr}
    if (htim->Instance == TIM6) {
 8000672:	6802      	ldr	r2, [r0, #0]
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000676:	429a      	cmp	r2, r3
 8000678:	d000      	beq.n	800067c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800067a:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Off LED
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000684:	f000 ff46 	bl	8001514 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop(&htim6); // Kill the Timer
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800068a:	f001 fa83 	bl	8001b94 <HAL_TIM_Base_Stop>
}
 800068e:	e7f4      	b.n	800067a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000690:	40001000 	.word	0x40001000
 8000694:	40020800 	.word	0x40020800
 8000698:	20000288 	.word	0x20000288

0800069c <led_flash>:
void led_flash() {
 800069c:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <led_flash+0x28>)
 80006a6:	f000 ff35 	bl	8001514 <HAL_GPIO_WritePin>
    if (__HAL_TIM_GET_COUNTER(&htim6) == 1) {
 80006aa:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <led_flash+0x2c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d002      	beq.n	80006ba <led_flash+0x1e>
        __HAL_TIM_SET_COUNTER(&htim6, 1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006b8:	bd08      	pop	{r3, pc}
        HAL_TIM_Base_Start_IT(&htim6);
 80006ba:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <led_flash+0x2c>)
 80006bc:	f001 fa7e 	bl	8001bbc <HAL_TIM_Base_Start_IT>
 80006c0:	e7fa      	b.n	80006b8 <led_flash+0x1c>
 80006c2:	bf00      	nop
 80006c4:	40020800 	.word	0x40020800
 80006c8:	20000288 	.word	0x20000288

080006cc <process_character>:
void process_character(char ch) {
 80006cc:	b510      	push	{r4, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	f88d 0007 	strb.w	r0, [sp, #7]
    switch (ch) {
 80006d4:	b2c3      	uxtb	r3, r0
 80006d6:	b12b      	cbz	r3, 80006e4 <process_character+0x18>
        if (strlen < BUFFER_SIZE) {
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <process_character+0x40>)
 80006da:	681c      	ldr	r4, [r3, #0]
 80006dc:	2c3f      	cmp	r4, #63	@ 0x3f
 80006de:	d90b      	bls.n	80006f8 <process_character+0x2c>
}
 80006e0:	b002      	add	sp, #8
 80006e2:	bd10      	pop	{r4, pc}
        printf("Received    : %s\n", receive_buffer);
 80006e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000710 <process_character+0x44>)
 80006e6:	4621      	mov	r1, r4
 80006e8:	480a      	ldr	r0, [pc, #40]	@ (8000714 <process_character+0x48>)
 80006ea:	f002 f9ab 	bl	8002a44 <iprintf>
        receive_buffer[0] = '\0';
 80006ee:	2300      	movs	r3, #0
 80006f0:	7023      	strb	r3, [r4, #0]
        strlen = 0;
 80006f2:	4a06      	ldr	r2, [pc, #24]	@ (800070c <process_character+0x40>)
 80006f4:	6013      	str	r3, [r2, #0]
        break;
 80006f6:	e7f3      	b.n	80006e0 <process_character+0x14>
            strncat((char*) &receive_buffer, &ch, 1); // Danger, Will Robinson!  this could go horribly wrong!
 80006f8:	2201      	movs	r2, #1
 80006fa:	f10d 0107 	add.w	r1, sp, #7
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <process_character+0x44>)
 8000700:	f002 fb10 	bl	8002d24 <strncat>
            ++strlen;
 8000704:	3401      	adds	r4, #1
 8000706:	4b01      	ldr	r3, [pc, #4]	@ (800070c <process_character+0x40>)
 8000708:	601c      	str	r4, [r3, #0]
}
 800070a:	e7e9      	b.n	80006e0 <process_character+0x14>
 800070c:	20000088 	.word	0x20000088
 8000710:	200000cc 	.word	0x200000cc
 8000714:	08003bc8 	.word	0x08003bc8

08000718 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset) {
 8000718:	b510      	push	{r4, lr}
 800071a:	460c      	mov	r4, r1
    led_flash();
 800071c:	f7ff ffbe 	bl	800069c <led_flash>
    if (offset != last_offset) {
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <HAL_UARTEx_RxEventCallback+0x34>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	42a3      	cmp	r3, r4
 8000726:	d010      	beq.n	800074a <HAL_UARTEx_RxEventCallback+0x32>
        if (offset < last_offset)
 8000728:	d90b      	bls.n	8000742 <HAL_UARTEx_RxEventCallback+0x2a>
            last_offset = 0;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_UARTEx_RxEventCallback+0x34>)
 800072c:	2200      	movs	r2, #0
 800072e:	801a      	strh	r2, [r3, #0]
 8000730:	e007      	b.n	8000742 <HAL_UARTEx_RxEventCallback+0x2a>
            process_character((char) dma_buffer[last_offset]);
 8000732:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <HAL_UARTEx_RxEventCallback+0x38>)
 8000734:	5cd0      	ldrb	r0, [r2, r3]
 8000736:	f7ff ffc9 	bl	80006cc <process_character>
            ++last_offset;
 800073a:	4a04      	ldr	r2, [pc, #16]	@ (800074c <HAL_UARTEx_RxEventCallback+0x34>)
 800073c:	8813      	ldrh	r3, [r2, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	8013      	strh	r3, [r2, #0]
        while (last_offset < offset) {
 8000742:	4b02      	ldr	r3, [pc, #8]	@ (800074c <HAL_UARTEx_RxEventCallback+0x34>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	42a3      	cmp	r3, r4
 8000748:	d3f3      	bcc.n	8000732 <HAL_UARTEx_RxEventCallback+0x1a>
}
 800074a:	bd10      	pop	{r4, pc}
 800074c:	20000084 	.word	0x20000084
 8000750:	2000008c 	.word	0x2000008c

08000754 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000756:	e7fe      	b.n	8000756 <Error_Handler+0x2>

08000758 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000758:	b508      	push	{r3, lr}
    printf("UART Error\n");
 800075a:	4802      	ldr	r0, [pc, #8]	@ (8000764 <HAL_UART_ErrorCallback+0xc>)
 800075c:	f002 f9da 	bl	8002b14 <puts>
    Error_Handler();
 8000760:	f7ff fff8 	bl	8000754 <Error_Handler>
 8000764:	08003bdc 	.word	0x08003bdc

08000768 <MX_USART1_UART_Init>:
{
 8000768:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800076a:	480a      	ldr	r0, [pc, #40]	@ (8000794 <MX_USART1_UART_Init+0x2c>)
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_USART1_UART_Init+0x30>)
 800076e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000770:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000774:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	2300      	movs	r3, #0
 8000778:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077e:	220c      	movs	r2, #12
 8000780:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	f001 fd2a 	bl	80021de <HAL_UART_Init>
 800078a:	b900      	cbnz	r0, 800078e <MX_USART1_UART_Init+0x26>
}
 800078c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800078e:	f7ff ffe1 	bl	8000754 <Error_Handler>
 8000792:	bf00      	nop
 8000794:	200001f8 	.word	0x200001f8
 8000798:	40011000 	.word	0x40011000

0800079c <MX_UART4_Init>:
{
 800079c:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 800079e:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <MX_UART4_Init+0x28>)
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_UART4_Init+0x2c>)
 80007a2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 2625000;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_UART4_Init+0x30>)
 80007a6:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007a8:	2300      	movs	r3, #0
 80007aa:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007ac:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007ae:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007b0:	220c      	movs	r2, #12
 80007b2:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b4:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b6:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007b8:	f001 fd11 	bl	80021de <HAL_UART_Init>
 80007bc:	b900      	cbnz	r0, 80007c0 <MX_UART4_Init+0x24>
}
 80007be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007c0:	f7ff ffc8 	bl	8000754 <Error_Handler>
 80007c4:	20000240 	.word	0x20000240
 80007c8:	40004c00 	.word	0x40004c00
 80007cc:	00280de8 	.word	0x00280de8

080007d0 <MX_USART2_UART_Init>:
{
 80007d0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_USART2_UART_Init+0x28>)
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART2_UART_Init+0x2c>)
 80007d6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 2625000;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART2_UART_Init+0x30>)
 80007da:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007dc:	2300      	movs	r3, #0
 80007de:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	220c      	movs	r2, #12
 80007e6:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e8:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ea:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ec:	f001 fcf7 	bl	80021de <HAL_UART_Init>
 80007f0:	b900      	cbnz	r0, 80007f4 <MX_USART2_UART_Init+0x24>
}
 80007f2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007f4:	f7ff ffae 	bl	8000754 <Error_Handler>
 80007f8:	200001b0 	.word	0x200001b0
 80007fc:	40004400 	.word	0x40004400
 8000800:	00280de8 	.word	0x00280de8

08000804 <MX_TIM6_Init>:
{
 8000804:	b500      	push	{lr}
 8000806:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	9301      	str	r3, [sp, #4]
  htim6.Instance = TIM6;
 800080e:	480e      	ldr	r0, [pc, #56]	@ (8000848 <MX_TIM6_Init+0x44>)
 8000810:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <MX_TIM6_Init+0x48>)
 8000812:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 84 - 1;
 8000814:	2253      	movs	r2, #83	@ 0x53
 8000816:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 30000 - 1;
 800081a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800081e:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000822:	f001 fb2f 	bl	8001e84 <HAL_TIM_Base_Init>
 8000826:	b950      	cbnz	r0, 800083e <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800082e:	4669      	mov	r1, sp
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_TIM6_Init+0x44>)
 8000832:	f001 fb53 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	b920      	cbnz	r0, 8000842 <MX_TIM6_Init+0x3e>
}
 8000838:	b003      	add	sp, #12
 800083a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800083e:	f7ff ff89 	bl	8000754 <Error_Handler>
    Error_Handler();
 8000842:	f7ff ff87 	bl	8000754 <Error_Handler>
 8000846:	bf00      	nop
 8000848:	20000288 	.word	0x20000288
 800084c:	40001000 	.word	0x40001000

08000850 <SystemClock_Config>:
{
 8000850:	b500      	push	{lr}
 8000852:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000854:	2230      	movs	r2, #48	@ 0x30
 8000856:	2100      	movs	r1, #0
 8000858:	a808      	add	r0, sp, #32
 800085a:	f002 fa5b 	bl	8002d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085e:	2300      	movs	r3, #0
 8000860:	9303      	str	r3, [sp, #12]
 8000862:	9304      	str	r3, [sp, #16]
 8000864:	9305      	str	r3, [sp, #20]
 8000866:	9306      	str	r3, [sp, #24]
 8000868:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <SystemClock_Config+0xa0>)
 800086e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000870:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000874:	6411      	str	r1, [r2, #64]	@ 0x40
 8000876:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000878:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800087c:	9201      	str	r2, [sp, #4]
 800087e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <SystemClock_Config+0xa4>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000896:	2301      	movs	r3, #1
 8000898:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008a8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008aa:	2208      	movs	r2, #8
 80008ac:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008ae:	22a8      	movs	r2, #168	@ 0xa8
 80008b0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	a808      	add	r0, sp, #32
 80008ba:	f000 fe31 	bl	8001520 <HAL_RCC_OscConfig>
 80008be:	b998      	cbnz	r0, 80008e8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d8:	2105      	movs	r1, #5
 80008da:	a803      	add	r0, sp, #12
 80008dc:	f001 f884 	bl	80019e8 <HAL_RCC_ClockConfig>
 80008e0:	b920      	cbnz	r0, 80008ec <SystemClock_Config+0x9c>
}
 80008e2:	b015      	add	sp, #84	@ 0x54
 80008e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008e8:	f7ff ff34 	bl	8000754 <Error_Handler>
    Error_Handler();
 80008ec:	f7ff ff32 	bl	8000754 <Error_Handler>
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <main>:
{
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80008fa:	f000 fa0d 	bl	8000d18 <HAL_Init>
  SystemClock_Config();
 80008fe:	f7ff ffa7 	bl	8000850 <SystemClock_Config>
  MX_GPIO_Init();
 8000902:	f7ff fe35 	bl	8000570 <MX_GPIO_Init>
  MX_DMA_Init();
 8000906:	f7ff fe7d 	bl	8000604 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800090a:	f7ff ff2d 	bl	8000768 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800090e:	f7ff ff45 	bl	800079c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000912:	f7ff ff5d 	bl	80007d0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000916:	f7ff ff75 	bl	8000804 <MX_TIM6_Init>
    printf("\n\n\n\n--------\nStarting\n");
 800091a:	481f      	ldr	r0, [pc, #124]	@ (8000998 <main+0xa0>)
 800091c:	f002 f8fa 	bl	8002b14 <puts>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t*) &dma_buffer, BUFFER_SIZE);
 8000920:	2240      	movs	r2, #64	@ 0x40
 8000922:	491e      	ldr	r1, [pc, #120]	@ (800099c <main+0xa4>)
 8000924:	481e      	ldr	r0, [pc, #120]	@ (80009a0 <main+0xa8>)
 8000926:	f001 ff97 	bl	8002858 <HAL_UARTEx_ReceiveToIdle_DMA>
    uint32_t now = 0, next_tick = 1000, next_tx = 1000, tx_cnt = 1;
 800092a:	2601      	movs	r6, #1
 800092c:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8000930:	462f      	mov	r7, r5
 8000932:	e029      	b.n	8000988 <main+0x90>
            printf("Tick %lu (loop = %lu)\n", now / 1000, loop_cnt);
 8000934:	4f1b      	ldr	r7, [pc, #108]	@ (80009a4 <main+0xac>)
 8000936:	491c      	ldr	r1, [pc, #112]	@ (80009a8 <main+0xb0>)
 8000938:	fba1 3104 	umull	r3, r1, r1, r4
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	0989      	lsrs	r1, r1, #6
 8000940:	481a      	ldr	r0, [pc, #104]	@ (80009ac <main+0xb4>)
 8000942:	f002 f87f 	bl	8002a44 <iprintf>
            loop_cnt = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
            next_tick = now + 1000;
 800094a:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
 800094e:	e01f      	b.n	8000990 <main+0x98>
            sprintf(transmit_buffer, "This is a reasonable long data string with a number %lu", tx_cnt);
 8000950:	4d17      	ldr	r5, [pc, #92]	@ (80009b0 <main+0xb8>)
 8000952:	4632      	mov	r2, r6
 8000954:	4917      	ldr	r1, [pc, #92]	@ (80009b4 <main+0xbc>)
 8000956:	4628      	mov	r0, r5
 8000958:	f002 f8e4 	bl	8002b24 <siprintf>
            printf("Transmitting: %s\n", transmit_buffer);
 800095c:	4629      	mov	r1, r5
 800095e:	4816      	ldr	r0, [pc, #88]	@ (80009b8 <main+0xc0>)
 8000960:	f002 f870 	bl	8002a44 <iprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &transmit_buffer, strlen(transmit_buffer) + 1, HAL_MAX_DELAY);
 8000964:	4628      	mov	r0, r5
 8000966:	f7ff fc33 	bl	80001d0 <strlen>
 800096a:	1c42      	adds	r2, r0, #1
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000970:	b292      	uxth	r2, r2
 8000972:	4629      	mov	r1, r5
 8000974:	4811      	ldr	r0, [pc, #68]	@ (80009bc <main+0xc4>)
 8000976:	f001 fc62 	bl	800223e <HAL_UART_Transmit>
            ++tx_cnt;
 800097a:	3601      	adds	r6, #1
            next_tx = now + 1000;
 800097c:	f504 757a 	add.w	r5, r4, #1000	@ 0x3e8
        ++loop_cnt;
 8000980:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <main+0xac>)
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	6013      	str	r3, [r2, #0]
        now = uwTick;
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <main+0xc8>)
 800098a:	681c      	ldr	r4, [r3, #0]
        if (now >= next_tick) {
 800098c:	42a7      	cmp	r7, r4
 800098e:	d9d1      	bls.n	8000934 <main+0x3c>
        if (now >= next_tx) {
 8000990:	42a5      	cmp	r5, r4
 8000992:	d8f5      	bhi.n	8000980 <main+0x88>
 8000994:	e7dc      	b.n	8000950 <main+0x58>
 8000996:	bf00      	nop
 8000998:	08003be8 	.word	0x08003be8
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	20000240 	.word	0x20000240
 80009a4:	2000014c 	.word	0x2000014c
 80009a8:	10624dd3 	.word	0x10624dd3
 80009ac:	08003c00 	.word	0x08003c00
 80009b0:	2000010c 	.word	0x2000010c
 80009b4:	08003c18 	.word	0x08003c18
 80009b8:	08003c50 	.word	0x08003c50
 80009bc:	200001b0 	.word	0x200001b0
 80009c0:	200002d4 	.word	0x200002d4

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2100      	movs	r1, #0
 80009c8:	9100      	str	r1, [sp, #0]
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <HAL_MspInit+0x34>)
 80009cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80009d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009d6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80009da:	9200      	str	r2, [sp, #0]
 80009dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	9101      	str	r1, [sp, #4]
 80009e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	b002      	add	sp, #8
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80009fc:	6802      	ldr	r2, [r0, #0]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d000      	beq.n	8000a06 <HAL_TIM_Base_MspInit+0xa>
 8000a04:	4770      	bx	lr
{
 8000a06:	b500      	push	{lr}
 8000a08:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	9101      	str	r1, [sp, #4]
 8000a0e:	f503 330a 	add.w	r3, r3, #141312	@ 0x22800
 8000a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a14:	f042 0210 	orr.w	r2, r2, #16
 8000a18:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a24:	460a      	mov	r2, r1
 8000a26:	2036      	movs	r0, #54	@ 0x36
 8000a28:	f000 f9f0 	bl	8000e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a2c:	2036      	movs	r0, #54	@ 0x36
 8000a2e:	f000 f9fd 	bl	8000e2c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a32:	b003      	add	sp, #12
 8000a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a38:	40001000 	.word	0x40001000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	2300      	movs	r3, #0
 8000a42:	9307      	str	r3, [sp, #28]
 8000a44:	9308      	str	r3, [sp, #32]
 8000a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(huart->Instance==UART4)
 8000a4c:	6803      	ldr	r3, [r0, #0]
 8000a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000b80 <HAL_UART_MspInit+0x144>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8000a54:	4a4b      	ldr	r2, [pc, #300]	@ (8000b84 <HAL_UART_MspInit+0x148>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d04a      	beq.n	8000af0 <HAL_UART_MspInit+0xb4>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b88 <HAL_UART_MspInit+0x14c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d06b      	beq.n	8000b38 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a60:	b00d      	add	sp, #52	@ 0x34
 8000a62:	bd30      	pop	{r4, r5, pc}
 8000a64:	4604      	mov	r4, r0
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a66:	2500      	movs	r5, #0
 8000a68:	9501      	str	r5, [sp, #4]
 8000a6a:	4b48      	ldr	r3, [pc, #288]	@ (8000b8c <HAL_UART_MspInit+0x150>)
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a6e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000a72:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a76:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	9502      	str	r5, [sp, #8]
 8000a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a82:	f042 0201 	orr.w	r2, r2, #1
 8000a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a92:	2303      	movs	r3, #3
 8000a94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2202      	movs	r2, #2
 8000a98:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	a907      	add	r1, sp, #28
 8000aa2:	483b      	ldr	r0, [pc, #236]	@ (8000b90 <HAL_UART_MspInit+0x154>)
 8000aa4:	f000 fc40 	bl	8001328 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000aa8:	483a      	ldr	r0, [pc, #232]	@ (8000b94 <HAL_UART_MspInit+0x158>)
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <HAL_UART_MspInit+0x15c>)
 8000aac:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000aae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ab2:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab4:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab6:	60c5      	str	r5, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abc:	6103      	str	r3, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000abe:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac0:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac6:	61c3      	str	r3, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac8:	6205      	str	r5, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aca:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000acc:	f000 fa46 	bl	8000f5c <HAL_DMA_Init>
 8000ad0:	b958      	cbnz	r0, 8000aea <HAL_UART_MspInit+0xae>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000ad2:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <HAL_UART_MspInit+0x158>)
 8000ad4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000ad6:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4611      	mov	r1, r2
 8000adc:	2034      	movs	r0, #52	@ 0x34
 8000ade:	f000 f995 	bl	8000e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ae2:	2034      	movs	r0, #52	@ 0x34
 8000ae4:	f000 f9a2 	bl	8000e2c <HAL_NVIC_EnableIRQ>
 8000ae8:	e7ba      	b.n	8000a60 <HAL_UART_MspInit+0x24>
      Error_Handler();
 8000aea:	f7ff fe33 	bl	8000754 <Error_Handler>
 8000aee:	e7f0      	b.n	8000ad2 <HAL_UART_MspInit+0x96>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af0:	2100      	movs	r1, #0
 8000af2:	9103      	str	r1, [sp, #12]
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <HAL_UART_MspInit+0x150>)
 8000af6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000af8:	f042 0210 	orr.w	r2, r2, #16
 8000afc:	645a      	str	r2, [r3, #68]	@ 0x44
 8000afe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b00:	f002 0210 	and.w	r2, r2, #16
 8000b04:	9203      	str	r2, [sp, #12]
 8000b06:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	9104      	str	r1, [sp, #16]
 8000b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b0c:	f042 0201 	orr.w	r2, r2, #1
 8000b10:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b1c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b20:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	a907      	add	r1, sp, #28
 8000b30:	4817      	ldr	r0, [pc, #92]	@ (8000b90 <HAL_UART_MspInit+0x154>)
 8000b32:	f000 fbf9 	bl	8001328 <HAL_GPIO_Init>
 8000b36:	e793      	b.n	8000a60 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b38:	2100      	movs	r1, #0
 8000b3a:	9105      	str	r1, [sp, #20]
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_UART_MspInit+0x150>)
 8000b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b40:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b44:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b48:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000b4c:	9205      	str	r2, [sp, #20]
 8000b4e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	9106      	str	r1, [sp, #24]
 8000b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	9306      	str	r3, [sp, #24]
 8000b62:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b64:	230c      	movs	r3, #12
 8000b66:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b70:	2307      	movs	r3, #7
 8000b72:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	a907      	add	r1, sp, #28
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <HAL_UART_MspInit+0x154>)
 8000b78:	f000 fbd6 	bl	8001328 <HAL_GPIO_Init>
}
 8000b7c:	e770      	b.n	8000a60 <HAL_UART_MspInit+0x24>
 8000b7e:	bf00      	nop
 8000b80:	40004c00 	.word	0x40004c00
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	20000150 	.word	0x20000150
 8000b98:	40026040 	.word	0x40026040

08000b9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler>

08000b9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler>

08000ba0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler>

08000ba2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler>

08000ba4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler>

08000ba6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f8cd 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bd08      	pop	{r3, pc}

08000bb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000bb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000bb6:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <DMA1_Stream2_IRQHandler+0xc>)
 8000bb8:	f000 fac8 	bl	800114c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000bbc:	bd08      	pop	{r3, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000150 	.word	0x20000150

08000bc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bc6:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <UART4_IRQHandler+0xc>)
 8000bc8:	f001 fc56 	bl	8002478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bcc:	bd08      	pop	{r3, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000240 	.word	0x20000240

08000bd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd6:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <TIM6_DAC_IRQHandler+0xc>)
 8000bd8:	f001 f838 	bl	8001c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bdc:	bd08      	pop	{r3, pc}
 8000bde:	bf00      	nop
 8000be0:	20000288 	.word	0x20000288

08000be4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	460c      	mov	r4, r1
 8000be8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	2500      	movs	r5, #0
 8000bec:	e006      	b.n	8000bfc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000bee:	f3af 8000 	nop.w
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000bfa:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	42b5      	cmp	r5, r6
 8000bfe:	dbf6      	blt.n	8000bee <_read+0xa>
  }

  return len;
}
 8000c00:	4630      	mov	r0, r6
 8000c02:	bd70      	pop	{r4, r5, r6, pc}

08000c04 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000c10:	2000      	movs	r0, #0
 8000c12:	4770      	bx	lr

08000c14 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000c14:	2001      	movs	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000c18:	2000      	movs	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b510      	push	{r4, lr}
 8000c1e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <_sbrk+0x38>)
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <_sbrk+0x40>)
 8000c26:	6800      	ldr	r0, [r0, #0]
 8000c28:	b140      	cbz	r0, 8000c3c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <_sbrk+0x40>)
 8000c2c:	6800      	ldr	r0, [r0, #0]
 8000c2e:	4403      	add	r3, r0
 8000c30:	1a52      	subs	r2, r2, r1
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d806      	bhi.n	8000c44 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <_sbrk+0x40>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c3a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c3c:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <_sbrk+0x40>)
 8000c3e:	4c08      	ldr	r4, [pc, #32]	@ (8000c60 <_sbrk+0x44>)
 8000c40:	6004      	str	r4, [r0, #0]
 8000c42:	e7f2      	b.n	8000c2a <_sbrk+0xe>
    errno = ENOMEM;
 8000c44:	f002 f8c8 	bl	8002dd8 <__errno>
 8000c48:	230c      	movs	r3, #12
 8000c4a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	e7f3      	b.n	8000c3a <_sbrk+0x1e>
 8000c52:	bf00      	nop
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200002d0 	.word	0x200002d0
 8000c60:	20000428 	.word	0x20000428

08000c64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4a03      	ldr	r2, [pc, #12]	@ (8000c74 <SystemInit+0x10>)
 8000c66:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c7c:	f7ff fff2 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f002 f89d 	bl	8002de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fe25 	bl	80008f8 <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cbc:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8000cc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cc4:	20000424 	.word	0x20000424

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_InitTick+0x40>)
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d10 <HAL_InitTick+0x44>)
 8000cde:	6810      	ldr	r0, [r2, #0]
 8000ce0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ce4:	f000 f8a6 	bl	8000e34 <HAL_SYSTICK_Config>
 8000ce8:	b968      	cbnz	r0, 8000d06 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	2c0f      	cmp	r4, #15
 8000cec:	d901      	bls.n	8000cf2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	e00a      	b.n	8000d08 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfa:	f000 f887 	bl	8000e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_InitTick+0x48>)
 8000d00:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2000      	movs	r0, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d06:	2001      	movs	r0, #1
}
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_Init>:
{
 8000d18:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_Init+0x30>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d32:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f857 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f7ff ffc6 	bl	8000ccc <HAL_InitTick>
  HAL_MspInit();
 8000d40:	f7ff fe40 	bl	80009c4 <HAL_MspInit>
}
 8000d44:	2000      	movs	r0, #0
 8000d46:	bd08      	pop	{r3, pc}
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d4c:	4a03      	ldr	r2, [pc, #12]	@ (8000d5c <HAL_IncTick+0x10>)
 8000d4e:	6811      	ldr	r1, [r2, #0]
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_IncTick+0x14>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	440b      	add	r3, r1
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200002d4 	.word	0x200002d4
 8000d60:	20000004 	.word	0x20000004

08000d64 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d64:	2800      	cmp	r0, #0
 8000d66:	db07      	blt.n	8000d78 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d68:	f000 021f 	and.w	r2, r0, #31
 8000d6c:	0940      	lsrs	r0, r0, #5
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4093      	lsls	r3, r2
 8000d72:	4a02      	ldr	r2, [pc, #8]	@ (8000d7c <__NVIC_EnableIRQ+0x18>)
 8000d74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d80:	2800      	cmp	r0, #0
 8000d82:	db08      	blt.n	8000d96 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	0109      	lsls	r1, r1, #4
 8000d86:	b2c9      	uxtb	r1, r1
 8000d88:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000d8c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000d90:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000d94:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	f000 000f 	and.w	r0, r0, #15
 8000d9a:	0109      	lsls	r1, r1, #4
 8000d9c:	b2c9      	uxtb	r1, r1
 8000d9e:	4b01      	ldr	r3, [pc, #4]	@ (8000da4 <__NVIC_SetPriority+0x24>)
 8000da0:	5419      	strb	r1, [r3, r0]
  }
}
 8000da2:	4770      	bx	lr
 8000da4:	e000ed14 	.word	0xe000ed14

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000daa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dae:	f1c0 0c07 	rsb	ip, r0, #7
 8000db2:	f1bc 0f04 	cmp.w	ip, #4
 8000db6:	bf28      	it	cs
 8000db8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbc:	1d03      	adds	r3, r0, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d90f      	bls.n	8000de2 <NVIC_EncodePriority+0x3a>
 8000dc2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000dc8:	fa0e f00c 	lsl.w	r0, lr, ip
 8000dcc:	ea21 0100 	bic.w	r1, r1, r0
 8000dd0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000dd6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000dda:	ea41 0002 	orr.w	r0, r1, r2
 8000dde:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	2300      	movs	r3, #0
 8000de4:	e7ee      	b.n	8000dc4 <NVIC_EncodePriority+0x1c>
	...

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000df0:	041b      	lsls	r3, r3, #16
 8000df2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	0200      	lsls	r0, r0, #8
 8000df6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e04:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0c:	b510      	push	{r4, lr}
 8000e0e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_NVIC_SetPriority+0x1c>)
 8000e12:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e14:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e18:	f7ff ffc6 	bl	8000da8 <NVIC_EncodePriority>
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff ffae 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2e:	f7ff ff99 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	3801      	subs	r0, #1
 8000e36:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e3a:	d20b      	bcs.n	8000e54 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e40:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_SYSTICK_Config+0x24>)
 8000e44:	21f0      	movs	r1, #240	@ 0xf0
 8000e46:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	2207      	movs	r2, #7
 8000e50:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e52:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e54:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e5c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e5e:	6805      	ldr	r5, [r0, #0]
 8000e60:	682c      	ldr	r4, [r5, #0]
 8000e62:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000e66:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e68:	6804      	ldr	r4, [r0, #0]
 8000e6a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e6c:	6883      	ldr	r3, [r0, #8]
 8000e6e:	2b40      	cmp	r3, #64	@ 0x40
 8000e70:	d005      	beq.n	8000e7e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000e76:	6803      	ldr	r3, [r0, #0]
 8000e78:	60da      	str	r2, [r3, #12]
  }
}
 8000e7a:	bc30      	pop	{r4, r5}
 8000e7c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000e7e:	6803      	ldr	r3, [r0, #0]
 8000e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000e82:	6803      	ldr	r3, [r0, #0]
 8000e84:	60d9      	str	r1, [r3, #12]
 8000e86:	e7f8      	b.n	8000e7a <DMA_SetConfig+0x1e>

08000e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e88:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e8a:	6803      	ldr	r3, [r0, #0]
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	3910      	subs	r1, #16
 8000e90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec4 <DMA_CalcBaseAndBitshift+0x3c>)
 8000e92:	fba2 4201 	umull	r4, r2, r2, r1
 8000e96:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e98:	4c0b      	ldr	r4, [pc, #44]	@ (8000ec8 <DMA_CalcBaseAndBitshift+0x40>)
 8000e9a:	5ca2      	ldrb	r2, [r4, r2]
 8000e9c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000e9e:	295f      	cmp	r1, #95	@ 0x5f
 8000ea0:	d909      	bls.n	8000eb6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ea2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000eae:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000eb4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000eb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	6583      	str	r3, [r0, #88]	@ 0x58
 8000ec0:	e7f5      	b.n	8000eae <DMA_CalcBaseAndBitshift+0x26>
 8000ec2:	bf00      	nop
 8000ec4:	aaaaaaab 	.word	0xaaaaaaab
 8000ec8:	08003c7c 	.word	0x08003c7c

08000ecc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ecc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ece:	6982      	ldr	r2, [r0, #24]
 8000ed0:	b992      	cbnz	r2, 8000ef8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d00a      	beq.n	8000eec <DMA_CheckFifoParam+0x20>
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d002      	beq.n	8000ee0 <DMA_CheckFifoParam+0x14>
 8000eda:	b10b      	cbz	r3, 8000ee0 <DMA_CheckFifoParam+0x14>
 8000edc:	2000      	movs	r0, #0
 8000ede:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ee2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000ee6:	d128      	bne.n	8000f3a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000ee8:	2000      	movs	r0, #0
 8000eea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000eee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000ef2:	d024      	beq.n	8000f3e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ef8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000efc:	d009      	beq.n	8000f12 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d925      	bls.n	8000f4e <DMA_CheckFifoParam+0x82>
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d125      	bne.n	8000f52 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f08:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f0c:	d123      	bne.n	8000f56 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f0e:	2000      	movs	r0, #0
 8000f10:	4770      	bx	lr
    switch (tmp)
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d803      	bhi.n	8000f1e <DMA_CheckFifoParam+0x52>
 8000f16:	e8df f003 	tbb	[pc, r3]
 8000f1a:	0414      	.short	0x0414
 8000f1c:	0a14      	.short	0x0a14
 8000f1e:	2000      	movs	r0, #0
 8000f20:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f22:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f24:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f28:	d10d      	bne.n	8000f46 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f34:	d009      	beq.n	8000f4a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2000      	movs	r0, #0
 8000f38:	4770      	bx	lr
        status = HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f3e:	2001      	movs	r0, #1
 8000f40:	4770      	bx	lr
      status = HAL_ERROR;
 8000f42:	2001      	movs	r0, #1
 8000f44:	4770      	bx	lr
        status = HAL_ERROR;
 8000f46:	2001      	movs	r0, #1
 8000f48:	4770      	bx	lr
        status = HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	4770      	bx	lr
      status = HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
 8000f50:	4770      	bx	lr
    switch (tmp)
 8000f52:	2000      	movs	r0, #0
 8000f54:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000f56:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_DMA_Init>:
{
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fb6a 	bl	8000638 <HAL_GetTick>
  if(hdma == NULL)
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d05b      	beq.n	8001020 <HAL_DMA_Init+0xc4>
 8000f68:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000f70:	2300      	movs	r3, #0
 8000f72:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f76:	6822      	ldr	r2, [r4, #0]
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f023 0301 	bic.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f012 0f01 	tst.w	r2, #1
 8000f88:	d00a      	beq.n	8000fa0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f8a:	f7ff fb55 	bl	8000638 <HAL_GetTick>
 8000f8e:	1b43      	subs	r3, r0, r5
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d9f5      	bls.n	8000f80 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f94:	2320      	movs	r3, #32
 8000f96:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000fa0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fa2:	4920      	ldr	r1, [pc, #128]	@ (8001024 <HAL_DMA_Init+0xc8>)
 8000fa4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa6:	6862      	ldr	r2, [r4, #4]
 8000fa8:	68a0      	ldr	r0, [r4, #8]
 8000faa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fac:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fae:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb0:	6920      	ldr	r0, [r4, #16]
 8000fb2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb8:	69a0      	ldr	r0, [r4, #24]
 8000fba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fbc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fbe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc0:	6a20      	ldr	r0, [r4, #32]
 8000fc2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000fc8:	2904      	cmp	r1, #4
 8000fca:	d01e      	beq.n	800100a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000fcc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000fce:	6826      	ldr	r6, [r4, #0]
 8000fd0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000fd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000fd8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d107      	bne.n	8000fee <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000fde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fe0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fe2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000fe4:	b11b      	cbz	r3, 8000fee <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff70 	bl	8000ecc <DMA_CheckFifoParam>
 8000fec:	b990      	cbnz	r0, 8001014 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000fee:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff ff49 	bl	8000e88 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000ff8:	233f      	movs	r3, #63	@ 0x3f
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffe:	2000      	movs	r0, #0
 8001000:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001002:	2301      	movs	r3, #1
 8001004:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001008:	e7c9      	b.n	8000f9e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800100a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800100c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800100e:	4301      	orrs	r1, r0
 8001010:	430a      	orrs	r2, r1
 8001012:	e7db      	b.n	8000fcc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001014:	2340      	movs	r3, #64	@ 0x40
 8001016:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001018:	2001      	movs	r0, #1
 800101a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800101e:	e7be      	b.n	8000f9e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001020:	2001      	movs	r0, #1
 8001022:	e7bc      	b.n	8000f9e <HAL_DMA_Init+0x42>
 8001024:	f010803f 	.word	0xf010803f

08001028 <HAL_DMA_Start_IT>:
{
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800102c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800102e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001032:	2801      	cmp	r0, #1
 8001034:	d02b      	beq.n	800108e <HAL_DMA_Start_IT+0x66>
 8001036:	2001      	movs	r0, #1
 8001038:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800103c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001040:	b2c0      	uxtb	r0, r0
 8001042:	2801      	cmp	r0, #1
 8001044:	d004      	beq.n	8001050 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001046:	2300      	movs	r3, #0
 8001048:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 800104c:	2002      	movs	r0, #2
}
 800104e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001050:	2002      	movs	r0, #2
 8001052:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001056:	2000      	movs	r0, #0
 8001058:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff fefe 	bl	8000e5c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001060:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001062:	233f      	movs	r3, #63	@ 0x3f
 8001064:	4093      	lsls	r3, r2
 8001066:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f043 0316 	orr.w	r3, r3, #22
 8001070:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001072:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001074:	b123      	cbz	r3, 8001080 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2000      	movs	r0, #0
 800108c:	e7df      	b.n	800104e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800108e:	2002      	movs	r0, #2
 8001090:	e7dd      	b.n	800104e <HAL_DMA_Start_IT+0x26>

08001092 <HAL_DMA_Abort>:
{
 8001092:	b570      	push	{r4, r5, r6, lr}
 8001094:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001096:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff face 	bl	8000638 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d006      	beq.n	80010b4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80010aa:	2300      	movs	r3, #0
 80010ac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
}
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	f023 0316 	bic.w	r3, r3, #22
 80010be:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010c0:	6822      	ldr	r2, [r4, #0]
 80010c2:	6953      	ldr	r3, [r2, #20]
 80010c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010cc:	b1e3      	cbz	r3, 8001108 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	6813      	ldr	r3, [r2, #0]
 80010d2:	f023 0308 	bic.w	r3, r3, #8
 80010d6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f013 0f01 	tst.w	r3, #1
 80010ea:	d011      	beq.n	8001110 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ec:	f7ff faa4 	bl	8000638 <HAL_GetTick>
 80010f0:	1b43      	subs	r3, r0, r5
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d9f5      	bls.n	80010e2 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f6:	2320      	movs	r3, #32
 80010f8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fa:	2003      	movs	r0, #3
 80010fc:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001100:	2300      	movs	r3, #0
 8001102:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001106:	e7d4      	b.n	80010b2 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001108:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1df      	bne.n	80010ce <HAL_DMA_Abort+0x3c>
 800110e:	e7e3      	b.n	80010d8 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001110:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001112:	233f      	movs	r3, #63	@ 0x3f
 8001114:	4093      	lsls	r3, r2
 8001116:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001118:	2301      	movs	r3, #1
 800111a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800111e:	2000      	movs	r0, #0
 8001120:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001124:	e7c5      	b.n	80010b2 <HAL_DMA_Abort+0x20>

08001126 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001126:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d003      	beq.n	8001138 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001138:	2305      	movs	r3, #5
 800113a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800113e:	6802      	ldr	r2, [r0, #0]
 8001140:	6813      	ldr	r3, [r2, #0]
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001148:	2000      	movs	r0, #0
}
 800114a:	4770      	bx	lr

0800114c <HAL_DMA_IRQHandler>:
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001156:	4b72      	ldr	r3, [pc, #456]	@ (8001320 <HAL_DMA_IRQHandler+0x1d4>)
 8001158:	681d      	ldr	r5, [r3, #0]
 800115a:	4b72      	ldr	r3, [pc, #456]	@ (8001324 <HAL_DMA_IRQHandler+0x1d8>)
 800115c:	fba3 3505 	umull	r3, r5, r3, r5
 8001160:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001162:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001164:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001166:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001168:	2308      	movs	r3, #8
 800116a:	4093      	lsls	r3, r2
 800116c:	4233      	tst	r3, r6
 800116e:	d010      	beq.n	8001192 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f012 0f04 	tst.w	r2, #4
 8001178:	d00b      	beq.n	8001192 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f022 0204 	bic.w	r2, r2, #4
 8001180:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001182:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001184:	2308      	movs	r3, #8
 8001186:	4093      	lsls	r3, r2
 8001188:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800118a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001192:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001194:	2301      	movs	r3, #1
 8001196:	4093      	lsls	r3, r2
 8001198:	4233      	tst	r3, r6
 800119a:	d009      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800119c:	6822      	ldr	r2, [r4, #0]
 800119e:	6952      	ldr	r2, [r2, #20]
 80011a0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80011a4:	d004      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011a6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011b2:	2304      	movs	r3, #4
 80011b4:	4093      	lsls	r3, r2
 80011b6:	4233      	tst	r3, r6
 80011b8:	d009      	beq.n	80011ce <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	f012 0f02 	tst.w	r2, #2
 80011c2:	d004      	beq.n	80011ce <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011c4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011ce:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011d0:	2310      	movs	r3, #16
 80011d2:	4093      	lsls	r3, r2
 80011d4:	4233      	tst	r3, r6
 80011d6:	d024      	beq.n	8001222 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	f012 0f08 	tst.w	r2, #8
 80011e0:	d01f      	beq.n	8001222 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011e2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80011ec:	d00d      	beq.n	800120a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80011f4:	d104      	bne.n	8001200 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80011f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011f8:	b19b      	cbz	r3, 8001222 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80011fa:	4620      	mov	r0, r4
 80011fc:	4798      	blx	r3
 80011fe:	e010      	b.n	8001222 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001200:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001202:	b173      	cbz	r3, 8001222 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001204:	4620      	mov	r0, r4
 8001206:	4798      	blx	r3
 8001208:	e00b      	b.n	8001222 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001210:	d103      	bne.n	800121a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800121a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800121c:	b10b      	cbz	r3, 8001222 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800121e:	4620      	mov	r0, r4
 8001220:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001222:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001224:	2320      	movs	r3, #32
 8001226:	4093      	lsls	r3, r2
 8001228:	4233      	tst	r3, r6
 800122a:	d055      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	f012 0f10 	tst.w	r2, #16
 8001234:	d050      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001236:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001238:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b05      	cmp	r3, #5
 8001240:	d00e      	beq.n	8001260 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800124a:	d033      	beq.n	80012b4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001252:	d12a      	bne.n	80012aa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001254:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001256:	2b00      	cmp	r3, #0
 8001258:	d03e      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800125a:	4620      	mov	r0, r4
 800125c:	4798      	blx	r3
 800125e:	e03b      	b.n	80012d8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001260:	6822      	ldr	r2, [r4, #0]
 8001262:	6813      	ldr	r3, [r2, #0]
 8001264:	f023 0316 	bic.w	r3, r3, #22
 8001268:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6953      	ldr	r3, [r2, #20]
 800126e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001272:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001276:	b1a3      	cbz	r3, 80012a2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f023 0308 	bic.w	r3, r3, #8
 8001280:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001282:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001284:	233f      	movs	r3, #63	@ 0x3f
 8001286:	4093      	lsls	r3, r2
 8001288:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800128a:	2301      	movs	r3, #1
 800128c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001290:	2300      	movs	r3, #0
 8001292:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001296:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001298:	2b00      	cmp	r3, #0
 800129a:	d03f      	beq.n	800131c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800129c:	4620      	mov	r0, r4
 800129e:	4798      	blx	r3
        return;
 80012a0:	e03c      	b.n	800131c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e7      	bne.n	8001278 <HAL_DMA_IRQHandler+0x12c>
 80012a8:	e7eb      	b.n	8001282 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80012aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012ac:	b1a3      	cbz	r3, 80012d8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80012ae:	4620      	mov	r0, r4
 80012b0:	4798      	blx	r3
 80012b2:	e011      	b.n	80012d8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80012ba:	d109      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f022 0210 	bic.w	r2, r2, #16
 80012c2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80012ca:	2300      	movs	r3, #0
 80012cc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80012d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012d2:	b10b      	cbz	r3, 80012d8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80012d4:	4620      	mov	r0, r4
 80012d6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012da:	b1fb      	cbz	r3, 800131c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012de:	f013 0f01 	tst.w	r3, #1
 80012e2:	d017      	beq.n	8001314 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e4:	2305      	movs	r3, #5
 80012e6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80012ea:	6822      	ldr	r2, [r4, #0]
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80012f4:	9b01      	ldr	r3, [sp, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	42ab      	cmp	r3, r5
 80012fc:	d804      	bhi.n	8001308 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f013 0f01 	tst.w	r3, #1
 8001306:	d1f5      	bne.n	80012f4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001308:	2301      	movs	r3, #1
 800130a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800130e:	2300      	movs	r3, #0
 8001310:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001314:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001316:	b10b      	cbz	r3, 800131c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001318:	4620      	mov	r0, r4
 800131a:	4798      	blx	r3
}
 800131c:	b003      	add	sp, #12
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	20000000 	.word	0x20000000
 8001324:	1b4e81b5 	.word	0x1b4e81b5

08001328 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001328:	2300      	movs	r3, #0
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f200 80e9 	bhi.w	8001502 <HAL_GPIO_Init+0x1da>
{
 8001330:	b570      	push	{r4, r5, r6, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	e065      	b.n	8001402 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001336:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800133c:	2403      	movs	r4, #3
 800133e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001342:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001346:	68cc      	ldr	r4, [r1, #12]
 8001348:	fa04 f40e 	lsl.w	r4, r4, lr
 800134c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800134e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	684a      	ldr	r2, [r1, #4]
 8001358:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800135c:	409a      	lsls	r2, r3
 800135e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001360:	6042      	str	r2, [r0, #4]
 8001362:	e05c      	b.n	800141e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001364:	08dc      	lsrs	r4, r3, #3
 8001366:	3408      	adds	r4, #8
 8001368:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136c:	f003 0507 	and.w	r5, r3, #7
 8001370:	00ad      	lsls	r5, r5, #2
 8001372:	f04f 0e0f 	mov.w	lr, #15
 8001376:	fa0e fe05 	lsl.w	lr, lr, r5
 800137a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800137e:	690a      	ldr	r2, [r1, #16]
 8001380:	40aa      	lsls	r2, r5
 8001382:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001386:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800138a:	e05c      	b.n	8001446 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138c:	2207      	movs	r2, #7
 800138e:	e000      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 8001390:	2200      	movs	r2, #0
 8001392:	fa02 f20e 	lsl.w	r2, r2, lr
 8001396:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	3402      	adds	r4, #2
 800139a:	4d5a      	ldr	r5, [pc, #360]	@ (8001504 <HAL_GPIO_Init+0x1dc>)
 800139c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a0:	4a59      	ldr	r2, [pc, #356]	@ (8001508 <HAL_GPIO_Init+0x1e0>)
 80013a2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	ea6f 020c 	mvn.w	r2, ip
 80013a8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ac:	684e      	ldr	r6, [r1, #4]
 80013ae:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80013b2:	d001      	beq.n	80013b8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80013b4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80013b8:	4c53      	ldr	r4, [pc, #332]	@ (8001508 <HAL_GPIO_Init+0x1e0>)
 80013ba:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80013bc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80013be:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c2:	684e      	ldr	r6, [r1, #4]
 80013c4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80013c8:	d001      	beq.n	80013ce <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80013ca:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80013ce:	4c4e      	ldr	r4, [pc, #312]	@ (8001508 <HAL_GPIO_Init+0x1e0>)
 80013d0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80013d2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d8:	684e      	ldr	r6, [r1, #4]
 80013da:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80013de:	d001      	beq.n	80013e4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80013e0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80013e4:	4c48      	ldr	r4, [pc, #288]	@ (8001508 <HAL_GPIO_Init+0x1e0>)
 80013e6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	684d      	ldr	r5, [r1, #4]
 80013ee:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80013f2:	d001      	beq.n	80013f8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80013f4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80013f8:	4c43      	ldr	r4, [pc, #268]	@ (8001508 <HAL_GPIO_Init+0x1e0>)
 80013fa:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fc:	3301      	adds	r3, #1
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d87d      	bhi.n	80014fe <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	680c      	ldr	r4, [r1, #0]
 8001408:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800140c:	ea32 0404 	bics.w	r4, r2, r4
 8001410:	d1f4      	bne.n	80013fc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	684c      	ldr	r4, [r1, #4]
 8001414:	f004 0403 	and.w	r4, r4, #3
 8001418:	3c01      	subs	r4, #1
 800141a:	2c01      	cmp	r4, #1
 800141c:	d98b      	bls.n	8001336 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141e:	684a      	ldr	r2, [r1, #4]
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	2a03      	cmp	r2, #3
 8001426:	d009      	beq.n	800143c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001428:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	005d      	lsls	r5, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	40aa      	lsls	r2, r5
 8001430:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	688a      	ldr	r2, [r1, #8]
 8001436:	40aa      	lsls	r2, r5
 8001438:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800143a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143c:	684a      	ldr	r2, [r1, #4]
 800143e:	f002 0203 	and.w	r2, r2, #3
 8001442:	2a02      	cmp	r2, #2
 8001444:	d08e      	beq.n	8001364 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001446:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001448:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001452:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001456:	684a      	ldr	r2, [r1, #4]
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001460:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001462:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	684a      	ldr	r2, [r1, #4]
 8001466:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800146a:	d0c7      	beq.n	80013fc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	2200      	movs	r2, #0
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	4a26      	ldr	r2, [pc, #152]	@ (800150c <HAL_GPIO_Init+0x1e4>)
 8001472:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001474:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001478:	6454      	str	r4, [r2, #68]	@ 0x44
 800147a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800147c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001484:	089c      	lsrs	r4, r3, #2
 8001486:	1ca5      	adds	r5, r4, #2
 8001488:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <HAL_GPIO_Init+0x1dc>)
 800148a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800148e:	f003 0e03 	and.w	lr, r3, #3
 8001492:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f20e 	lsl.w	r2, r2, lr
 800149c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_GPIO_Init+0x1e8>)
 80014a2:	4290      	cmp	r0, r2
 80014a4:	f43f af74 	beq.w	8001390 <HAL_GPIO_Init+0x68>
 80014a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014ac:	4290      	cmp	r0, r2
 80014ae:	d01a      	beq.n	80014e6 <HAL_GPIO_Init+0x1be>
 80014b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d018      	beq.n	80014ea <HAL_GPIO_Init+0x1c2>
 80014b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014bc:	4290      	cmp	r0, r2
 80014be:	d016      	beq.n	80014ee <HAL_GPIO_Init+0x1c6>
 80014c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d014      	beq.n	80014f2 <HAL_GPIO_Init+0x1ca>
 80014c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014cc:	4290      	cmp	r0, r2
 80014ce:	d012      	beq.n	80014f6 <HAL_GPIO_Init+0x1ce>
 80014d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014d4:	4290      	cmp	r0, r2
 80014d6:	d010      	beq.n	80014fa <HAL_GPIO_Init+0x1d2>
 80014d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014dc:	4290      	cmp	r0, r2
 80014de:	f43f af55 	beq.w	800138c <HAL_GPIO_Init+0x64>
 80014e2:	2208      	movs	r2, #8
 80014e4:	e755      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 80014e6:	2201      	movs	r2, #1
 80014e8:	e753      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 80014ea:	2202      	movs	r2, #2
 80014ec:	e751      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 80014ee:	2203      	movs	r2, #3
 80014f0:	e74f      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 80014f2:	2204      	movs	r2, #4
 80014f4:	e74d      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 80014f6:	2205      	movs	r2, #5
 80014f8:	e74b      	b.n	8001392 <HAL_GPIO_Init+0x6a>
 80014fa:	2206      	movs	r2, #6
 80014fc:	e749      	b.n	8001392 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80014fe:	b002      	add	sp, #8
 8001500:	bd70      	pop	{r4, r5, r6, pc}
 8001502:	4770      	bx	lr
 8001504:	40013800 	.word	0x40013800
 8001508:	40013c00 	.word	0x40013c00
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	b10a      	cbz	r2, 800151a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	6181      	str	r1, [r0, #24]
 8001518:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151a:	0409      	lsls	r1, r1, #16
 800151c:	6181      	str	r1, [r0, #24]
  }
}
 800151e:	4770      	bx	lr

08001520 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	2800      	cmp	r0, #0
 8001522:	f000 81e0 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3c6>
{
 8001526:	b570      	push	{r4, r5, r6, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152c:	6803      	ldr	r3, [r0, #0]
 800152e:	f013 0f01 	tst.w	r3, #1
 8001532:	d03b      	beq.n	80015ac <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001534:	4b9f      	ldr	r3, [pc, #636]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b04      	cmp	r3, #4
 800153e:	d02c      	beq.n	800159a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001540:	4b9c      	ldr	r3, [pc, #624]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001548:	2b08      	cmp	r3, #8
 800154a:	d021      	beq.n	8001590 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154c:	6863      	ldr	r3, [r4, #4]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001552:	d04f      	beq.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001558:	d052      	beq.n	8001600 <HAL_RCC_OscConfig+0xe0>
 800155a:	4b96      	ldr	r3, [pc, #600]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800156a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d050      	beq.n	8001614 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff f861 	bl	8000638 <HAL_GetTick>
 8001576:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	4b8e      	ldr	r3, [pc, #568]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001580:	d114      	bne.n	80015ac <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001582:	f7ff f859 	bl	8000638 <HAL_GetTick>
 8001586:	1b40      	subs	r0, r0, r5
 8001588:	2864      	cmp	r0, #100	@ 0x64
 800158a:	d9f5      	bls.n	8001578 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800158c:	2003      	movs	r0, #3
 800158e:	e1b1      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001590:	4b88      	ldr	r3, [pc, #544]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001598:	d0d8      	beq.n	800154c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4b86      	ldr	r3, [pc, #536]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015a2:	d003      	beq.n	80015ac <HAL_RCC_OscConfig+0x8c>
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 819f 	beq.w	80018ea <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	f013 0f02 	tst.w	r3, #2
 80015b2:	d054      	beq.n	800165e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015b4:	4b7f      	ldr	r3, [pc, #508]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f013 0f0c 	tst.w	r3, #12
 80015bc:	d03e      	beq.n	800163c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b7d      	ldr	r3, [pc, #500]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d033      	beq.n	8001632 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ca:	68e3      	ldr	r3, [r4, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d068      	beq.n	80016a2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b79      	ldr	r3, [pc, #484]	@ (80017b8 <HAL_RCC_OscConfig+0x298>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff f82f 	bl	8000638 <HAL_GetTick>
 80015da:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f013 0f02 	tst.w	r3, #2
 80015e4:	d154      	bne.n	8001690 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff f827 	bl	8000638 <HAL_GetTick>
 80015ea:	1b40      	subs	r0, r0, r5
 80015ec:	2802      	cmp	r0, #2
 80015ee:	d9f5      	bls.n	80015dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80015f0:	2003      	movs	r0, #3
 80015f2:	e17f      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	4a6f      	ldr	r2, [pc, #444]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e7b5      	b.n	800156c <HAL_RCC_OscConfig+0x4c>
 8001600:	4b6c      	ldr	r3, [pc, #432]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e7ab      	b.n	800156c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001614:	f7ff f810 	bl	8000638 <HAL_GetTick>
 8001618:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001622:	d0c3      	beq.n	80015ac <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff f808 	bl	8000638 <HAL_GetTick>
 8001628:	1b40      	subs	r0, r0, r5
 800162a:	2864      	cmp	r0, #100	@ 0x64
 800162c:	d9f5      	bls.n	800161a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800162e:	2003      	movs	r0, #3
 8001630:	e160      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b60      	ldr	r3, [pc, #384]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800163a:	d1c6      	bne.n	80015ca <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163c:	4b5d      	ldr	r3, [pc, #372]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f013 0f02 	tst.w	r3, #2
 8001644:	d003      	beq.n	800164e <HAL_RCC_OscConfig+0x12e>
 8001646:	68e3      	ldr	r3, [r4, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	f040 8150 	bne.w	80018ee <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4a59      	ldr	r2, [pc, #356]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001656:	6921      	ldr	r1, [r4, #16]
 8001658:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800165c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	f013 0f08 	tst.w	r3, #8
 8001664:	d042      	beq.n	80016ec <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001666:	6963      	ldr	r3, [r4, #20]
 8001668:	b36b      	cbz	r3, 80016c6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_OscConfig+0x298>)
 800166c:	2201      	movs	r2, #1
 800166e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7fe ffe1 	bl	8000638 <HAL_GetTick>
 8001676:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001678:	4b4e      	ldr	r3, [pc, #312]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167c:	f013 0f02 	tst.w	r3, #2
 8001680:	d134      	bne.n	80016ec <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001682:	f7fe ffd9 	bl	8000638 <HAL_GetTick>
 8001686:	1b40      	subs	r0, r0, r5
 8001688:	2802      	cmp	r0, #2
 800168a:	d9f5      	bls.n	8001678 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800168c:	2003      	movs	r0, #3
 800168e:	e131      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4a48      	ldr	r2, [pc, #288]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001698:	6921      	ldr	r1, [r4, #16]
 800169a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e7dd      	b.n	800165e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80016a2:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <HAL_RCC_OscConfig+0x298>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016a8:	f7fe ffc6 	bl	8000638 <HAL_GetTick>
 80016ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	4b41      	ldr	r3, [pc, #260]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f013 0f02 	tst.w	r3, #2
 80016b6:	d0d2      	beq.n	800165e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7fe ffbe 	bl	8000638 <HAL_GetTick>
 80016bc:	1b40      	subs	r0, r0, r5
 80016be:	2802      	cmp	r0, #2
 80016c0:	d9f5      	bls.n	80016ae <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80016c2:	2003      	movs	r0, #3
 80016c4:	e116      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <HAL_RCC_OscConfig+0x298>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7fe ffb3 	bl	8000638 <HAL_GetTick>
 80016d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d8:	f013 0f02 	tst.w	r3, #2
 80016dc:	d006      	beq.n	80016ec <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7fe ffab 	bl	8000638 <HAL_GetTick>
 80016e2:	1b40      	subs	r0, r0, r5
 80016e4:	2802      	cmp	r0, #2
 80016e6:	d9f5      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80016e8:	2003      	movs	r0, #3
 80016ea:	e103      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	f013 0f04 	tst.w	r3, #4
 80016f2:	d077      	beq.n	80017e4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f4:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80016fc:	d133      	bne.n	8001766 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001706:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001716:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <HAL_RCC_OscConfig+0x29c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001720:	d023      	beq.n	800176a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001722:	68a3      	ldr	r3, [r4, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d034      	beq.n	8001792 <HAL_RCC_OscConfig+0x272>
 8001728:	2b05      	cmp	r3, #5
 800172a:	d038      	beq.n	800179e <HAL_RCC_OscConfig+0x27e>
 800172c:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800172e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	671a      	str	r2, [r3, #112]	@ 0x70
 8001736:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001738:	f022 0204 	bic.w	r2, r2, #4
 800173c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03d      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7fe ff78 	bl	8000638 <HAL_GetTick>
 8001748:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174e:	f013 0f02 	tst.w	r3, #2
 8001752:	d146      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7fe ff70 	bl	8000638 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800175e:	4298      	cmp	r0, r3
 8001760:	d9f3      	bls.n	800174a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001762:	2003      	movs	r0, #3
 8001764:	e0c6      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2500      	movs	r5, #0
 8001768:	e7d6      	b.n	8001718 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <HAL_RCC_OscConfig+0x29c>)
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001774:	f7fe ff60 	bl	8000638 <HAL_GetTick>
 8001778:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_RCC_OscConfig+0x29c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001782:	d1ce      	bne.n	8001722 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7fe ff58 	bl	8000638 <HAL_GetTick>
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	2802      	cmp	r0, #2
 800178c:	d9f5      	bls.n	800177a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e0b0      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001792:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 8001794:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
 800179c:	e7cf      	b.n	800173e <HAL_RCC_OscConfig+0x21e>
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RCC_OscConfig+0x294>)
 80017a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017a2:	f042 0204 	orr.w	r2, r2, #4
 80017a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80017a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	671a      	str	r2, [r3, #112]	@ 0x70
 80017b0:	e7c5      	b.n	800173e <HAL_RCC_OscConfig+0x21e>
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470000 	.word	0x42470000
 80017bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7fe ff3a 	bl	8000638 <HAL_GetTick>
 80017c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c6:	4b52      	ldr	r3, [pc, #328]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	f013 0f02 	tst.w	r3, #2
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7fe ff32 	bl	8000638 <HAL_GetTick>
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017da:	4298      	cmp	r0, r3
 80017dc:	d9f3      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80017de:	2003      	movs	r0, #3
 80017e0:	e088      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e2:	b9ed      	cbnz	r5, 8001820 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e4:	69a3      	ldr	r3, [r4, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8083 	beq.w	80018f2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ec:	4a48      	ldr	r2, [pc, #288]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 80017ee:	6892      	ldr	r2, [r2, #8]
 80017f0:	f002 020c 	and.w	r2, r2, #12
 80017f4:	2a08      	cmp	r2, #8
 80017f6:	d051      	beq.n	800189c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d017      	beq.n	800182c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <HAL_RCC_OscConfig+0x3f4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7fe ff19 	bl	8000638 <HAL_GetTick>
 8001806:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	4b41      	ldr	r3, [pc, #260]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001810:	d042      	beq.n	8001898 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7fe ff11 	bl	8000638 <HAL_GetTick>
 8001816:	1b00      	subs	r0, r0, r4
 8001818:	2802      	cmp	r0, #2
 800181a:	d9f5      	bls.n	8001808 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800181c:	2003      	movs	r0, #3
 800181e:	e069      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4a3b      	ldr	r2, [pc, #236]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 8001822:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	e7db      	b.n	80017e4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b39      	ldr	r3, [pc, #228]	@ (8001914 <HAL_RCC_OscConfig+0x3f4>)
 800182e:	2200      	movs	r2, #0
 8001830:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001832:	f7fe ff01 	bl	8000638 <HAL_GetTick>
 8001836:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001838:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001840:	d006      	beq.n	8001850 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7fe fef9 	bl	8000638 <HAL_GetTick>
 8001846:	1b40      	subs	r0, r0, r5
 8001848:	2802      	cmp	r0, #2
 800184a:	d9f5      	bls.n	8001838 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800184c:	2003      	movs	r0, #3
 800184e:	e051      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001850:	69e3      	ldr	r3, [r4, #28]
 8001852:	6a22      	ldr	r2, [r4, #32]
 8001854:	4313      	orrs	r3, r2
 8001856:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001858:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800185c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800185e:	0852      	lsrs	r2, r2, #1
 8001860:	3a01      	subs	r2, #1
 8001862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001866:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001868:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800186c:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 800186e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001870:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <HAL_RCC_OscConfig+0x3f4>)
 8001872:	2201      	movs	r2, #1
 8001874:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001876:	f7fe fedf 	bl	8000638 <HAL_GetTick>
 800187a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187c:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe fed7 	bl	8000638 <HAL_GetTick>
 800188a:	1b00      	subs	r0, r0, r4
 800188c:	2802      	cmp	r0, #2
 800188e:	d9f5      	bls.n	800187c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001890:	2003      	movs	r0, #3
 8001892:	e02f      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2000      	movs	r0, #0
 8001896:	e02d      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
 8001898:	2000      	movs	r0, #0
 800189a:	e02b      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	2b01      	cmp	r3, #1
 800189e:	d02b      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x3f0>)
 80018a2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80018a8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	4291      	cmp	r1, r2
 80018ac:	d126      	bne.n	80018fc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018b2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	428a      	cmp	r2, r1
 80018b6:	d123      	bne.n	8001900 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ba:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80018be:	401a      	ands	r2, r3
 80018c0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80018c4:	d11e      	bne.n	8001904 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80018ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018cc:	0852      	lsrs	r2, r2, #1
 80018ce:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80018da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80018e0:	d114      	bne.n	800190c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e006      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80018e6:	2001      	movs	r0, #1
}
 80018e8:	4770      	bx	lr
        return HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
 80018ec:	e002      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80018f2:	2000      	movs	r0, #0
}
 80018f4:	b002      	add	sp, #8
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80018f8:	2001      	movs	r0, #1
 80018fa:	e7fb      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e7f9      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
 8001900:	2001      	movs	r0, #1
 8001902:	e7f7      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
 8001904:	2001      	movs	r0, #1
 8001906:	e7f5      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
 8001908:	2001      	movs	r0, #1
 800190a:	e7f3      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
 800190c:	2001      	movs	r0, #1
 800190e:	e7f1      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d4>
 8001910:	40023800 	.word	0x40023800
 8001914:	42470000 	.word	0x42470000

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191a:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d001      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001926:	482f      	ldr	r0, [pc, #188]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001928:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192a:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001938:	d02c      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800193c:	6858      	ldr	r0, [r3, #4]
 800193e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001942:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001946:	ebbc 0c00 	subs.w	ip, ip, r0
 800194a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800194e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001952:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001956:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800195a:	ebb1 010c 	subs.w	r1, r1, ip
 800195e:	eb63 030e 	sbc.w	r3, r3, lr
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001968:	00c9      	lsls	r1, r1, #3
 800196a:	eb11 0c00 	adds.w	ip, r1, r0
 800196e:	f143 0300 	adc.w	r3, r3, #0
 8001972:	0299      	lsls	r1, r3, #10
 8001974:	2300      	movs	r3, #0
 8001976:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800197a:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800197e:	f7fe fc7f 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001982:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800198a:	3301      	adds	r3, #1
 800198c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800198e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001992:	e7c9      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001996:	6858      	ldr	r0, [r3, #4]
 8001998:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800199c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80019a0:	ebbc 0c00 	subs.w	ip, ip, r0
 80019a4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80019a8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80019ac:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80019b0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80019b4:	ebb1 010c 	subs.w	r1, r1, ip
 80019b8:	eb63 030e 	sbc.w	r3, r3, lr
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019c2:	00c9      	lsls	r1, r1, #3
 80019c4:	eb11 0c00 	adds.w	ip, r1, r0
 80019c8:	f143 0300 	adc.w	r3, r3, #0
 80019cc:	0299      	lsls	r1, r3, #10
 80019ce:	2300      	movs	r3, #0
 80019d0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80019d4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80019d8:	f7fe fc52 	bl	8000280 <__aeabi_uldivmod>
 80019dc:	e7d1      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x6a>
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400

080019e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80019e8:	2800      	cmp	r0, #0
 80019ea:	f000 809b 	beq.w	8001b24 <HAL_RCC_ClockConfig+0x13c>
{
 80019ee:	b570      	push	{r4, r5, r6, lr}
 80019f0:	460d      	mov	r5, r1
 80019f2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b34 <HAL_RCC_ClockConfig+0x14c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d208      	bcs.n	8001a12 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a00:	b2cb      	uxtb	r3, r1
 8001a02:	4a4c      	ldr	r2, [pc, #304]	@ (8001b34 <HAL_RCC_ClockConfig+0x14c>)
 8001a04:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	f040 808b 	bne.w	8001b28 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	f013 0f02 	tst.w	r3, #2
 8001a18:	d017      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1a:	f013 0f04 	tst.w	r3, #4
 8001a1e:	d004      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4a45      	ldr	r2, [pc, #276]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a22:	6893      	ldr	r3, [r2, #8]
 8001a24:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a28:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f013 0f08 	tst.w	r3, #8
 8001a30:	d004      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a32:	4a41      	ldr	r2, [pc, #260]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a34:	6893      	ldr	r3, [r2, #8]
 8001a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a3a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a44:	68a1      	ldr	r1, [r4, #8]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	f013 0f01 	tst.w	r3, #1
 8001a50:	d032      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d021      	beq.n	8001a9c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a58:	1e9a      	subs	r2, r3, #2
 8001a5a:	2a01      	cmp	r2, #1
 8001a5c:	d925      	bls.n	8001aaa <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4a36      	ldr	r2, [pc, #216]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	f012 0f02 	tst.w	r2, #2
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a68:	4933      	ldr	r1, [pc, #204]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a6a:	688a      	ldr	r2, [r1, #8]
 8001a6c:	f022 0203 	bic.w	r2, r2, #3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001a74:	f7fe fde0 	bl	8000638 <HAL_GetTick>
 8001a78:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	6862      	ldr	r2, [r4, #4]
 8001a84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7fe fdd5 	bl	8000638 <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d9f0      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001a98:	2003      	movs	r0, #3
 8001a9a:	e042      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9c:	4a26      	ldr	r2, [pc, #152]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001aa4:	d1e0      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	e03b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4a23      	ldr	r2, [pc, #140]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001ab2:	d1d9      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e034      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_RCC_ClockConfig+0x14c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	42ab      	cmp	r3, r5
 8001ac2:	d907      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac4:	b2ea      	uxtb	r2, r5
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_RCC_ClockConfig+0x14c>)
 8001ac8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	42ab      	cmp	r3, r5
 8001ad2:	d12d      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	f013 0f04 	tst.w	r3, #4
 8001ada:	d006      	beq.n	8001aea <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4a16      	ldr	r2, [pc, #88]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001ade:	6893      	ldr	r3, [r2, #8]
 8001ae0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001ae4:	68e1      	ldr	r1, [r4, #12]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	f013 0f08 	tst.w	r3, #8
 8001af0:	d007      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001af4:	6893      	ldr	r3, [r2, #8]
 8001af6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001afa:	6921      	ldr	r1, [r4, #16]
 8001afc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b02:	f7ff ff09 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_RCC_ClockConfig+0x150>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <HAL_RCC_ClockConfig+0x154>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	40d8      	lsrs	r0, r3
 8001b14:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_RCC_ClockConfig+0x158>)
 8001b16:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_RCC_ClockConfig+0x15c>)
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	f7ff f8d6 	bl	8000ccc <HAL_InitTick>
  return HAL_OK;
 8001b20:	2000      	movs	r0, #0
}
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
}
 8001b26:	4770      	bx	lr
      return HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
 8001b2a:	e7fa      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7f8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
 8001b32:	e7f6      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13a>
 8001b34:	40023c00 	.word	0x40023c00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08003c6c 	.word	0x08003c6c
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b48:	4b01      	ldr	r3, [pc, #4]	@ (8001b50 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b56:	f7ff fff7 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b62:	4a03      	ldr	r2, [pc, #12]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b66:	40d8      	lsrs	r0, r3
 8001b68:	bd08      	pop	{r3, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003c64 	.word	0x08003c64

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b76:	f7ff ffe7 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b82:	4a03      	ldr	r2, [pc, #12]	@ (8001b90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b86:	40d8      	lsrs	r0, r3
 8001b88:	bd08      	pop	{r3, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08003c64 	.word	0x08003c64

08001b94 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b94:	6803      	ldr	r3, [r0, #0]
 8001b96:	6a19      	ldr	r1, [r3, #32]
 8001b98:	f241 1211 	movw	r2, #4369	@ 0x1111
 8001b9c:	4211      	tst	r1, r2
 8001b9e:	d108      	bne.n	8001bb2 <HAL_TIM_Base_Stop+0x1e>
 8001ba0:	6a19      	ldr	r1, [r3, #32]
 8001ba2:	f240 4244 	movw	r2, #1092	@ 0x444
 8001ba6:	4211      	tst	r1, r2
 8001ba8:	d103      	bne.n	8001bb2 <HAL_TIM_Base_Stop+0x1e>
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001bb8:	2000      	movs	r0, #0
 8001bba:	4770      	bx	lr

08001bbc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d137      	bne.n	8001c36 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	68d3      	ldr	r3, [r2, #12]
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd6:	6803      	ldr	r3, [r0, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_TIM_Base_Start_IT+0x84>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d020      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be2:	d01d      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001be4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001bec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d015      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001bf4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d011      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001bfc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00d      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001c04:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
 8001c0c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d005      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c26:	2a06      	cmp	r2, #6
 8001c28:	d007      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c32:	2000      	movs	r0, #0
 8001c34:	4770      	bx	lr
    return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
 8001c38:	4770      	bx	lr
  return HAL_OK;
 8001c3a:	2000      	movs	r0, #0
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000

08001c44 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c44:	4770      	bx	lr

08001c46 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_TIM_IRQHandler>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c54:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c56:	f015 0f02 	tst.w	r5, #2
 8001c5a:	d010      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c5c:	f016 0f02 	tst.w	r6, #2
 8001c60:	d00d      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c62:	f06f 0202 	mvn.w	r2, #2
 8001c66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c6c:	6803      	ldr	r3, [r0, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f013 0f03 	tst.w	r3, #3
 8001c74:	d05e      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	f7ff ffe6 	bl	8001c46 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c7e:	f015 0f04 	tst.w	r5, #4
 8001c82:	d012      	beq.n	8001caa <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c84:	f016 0f04 	tst.w	r6, #4
 8001c88:	d00f      	beq.n	8001caa <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	f06f 0204 	mvn.w	r2, #4
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001c9e:	d04f      	beq.n	8001d40 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ffd0 	bl	8001c46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001caa:	f015 0f08 	tst.w	r5, #8
 8001cae:	d012      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cb0:	f016 0f08 	tst.w	r6, #8
 8001cb4:	d00f      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f06f 0208 	mvn.w	r2, #8
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f013 0f03 	tst.w	r3, #3
 8001cca:	d040      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff ffba 	bl	8001c46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cd6:	f015 0f10 	tst.w	r5, #16
 8001cda:	d012      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cdc:	f016 0f10 	tst.w	r6, #16
 8001ce0:	d00f      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f06f 0210 	mvn.w	r2, #16
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cea:	2308      	movs	r3, #8
 8001cec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001cf6:	d031      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff ffa4 	bl	8001c46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d02:	f015 0f01 	tst.w	r5, #1
 8001d06:	d002      	beq.n	8001d0e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d08:	f016 0f01 	tst.w	r6, #1
 8001d0c:	d12d      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d0e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001d12:	d002      	beq.n	8001d1a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d14:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001d18:	d12f      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d1a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001d1e:	d002      	beq.n	8001d26 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d20:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001d24:	d131      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d26:	f015 0f20 	tst.w	r5, #32
 8001d2a:	d002      	beq.n	8001d32 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d2c:	f016 0f20 	tst.w	r6, #32
 8001d30:	d133      	bne.n	8001d9a <HAL_TIM_IRQHandler+0x14e>
}
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d34:	f7ff ff86 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff ff85 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d3e:	e79c      	b.n	8001c7a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff7f 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff ff7e 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d4c:	e7ab      	b.n	8001ca6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff ff78 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff ff77 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d5a:	e7ba      	b.n	8001cd2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ff71 	bl	8001c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7ff ff70 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d68:	e7c9      	b.n	8001cfe <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f06f 0201 	mvn.w	r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7fe fc7c 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
 8001d78:	e7c9      	b.n	8001d0e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d82:	4620      	mov	r0, r4
 8001d84:	f000 f8f1 	bl	8001f6a <HAL_TIMEx_BreakCallback>
 8001d88:	e7c7      	b.n	8001d1a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d90:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff ff59 	bl	8001c4a <HAL_TIM_TriggerCallback>
 8001d98:	e7c5      	b.n	8001d26 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001da2:	4620      	mov	r0, r4
 8001da4:	f000 f8e0 	bl	8001f68 <HAL_TIMEx_CommutCallback>
}
 8001da8:	e7c3      	b.n	8001d32 <HAL_TIM_IRQHandler+0xe6>
	...

08001dac <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dac:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dae:	4a34      	ldr	r2, [pc, #208]	@ (8001e80 <TIM_Base_SetConfig+0xd4>)
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d012      	beq.n	8001dda <TIM_Base_SetConfig+0x2e>
 8001db4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001db8:	d00f      	beq.n	8001dda <TIM_Base_SetConfig+0x2e>
 8001dba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001dbe:	4290      	cmp	r0, r2
 8001dc0:	d00b      	beq.n	8001dda <TIM_Base_SetConfig+0x2e>
 8001dc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dc6:	4290      	cmp	r0, r2
 8001dc8:	d007      	beq.n	8001dda <TIM_Base_SetConfig+0x2e>
 8001dca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dce:	4290      	cmp	r0, r2
 8001dd0:	d003      	beq.n	8001dda <TIM_Base_SetConfig+0x2e>
 8001dd2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001dd6:	4290      	cmp	r0, r2
 8001dd8:	d103      	bne.n	8001de2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001dde:	684a      	ldr	r2, [r1, #4]
 8001de0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de2:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <TIM_Base_SetConfig+0xd4>)
 8001de4:	4290      	cmp	r0, r2
 8001de6:	d02a      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001de8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001dec:	d027      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001dee:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d023      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d01f      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001dfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e02:	4290      	cmp	r0, r2
 8001e04:	d01b      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e06:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001e0a:	4290      	cmp	r0, r2
 8001e0c:	d017      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e0e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001e12:	4290      	cmp	r0, r2
 8001e14:	d013      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	d00f      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e22:	4290      	cmp	r0, r2
 8001e24:	d00b      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e26:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001e2a:	4290      	cmp	r0, r2
 8001e2c:	d007      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e32:	4290      	cmp	r0, r2
 8001e34:	d003      	beq.n	8001e3e <TIM_Base_SetConfig+0x92>
 8001e36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e3a:	4290      	cmp	r0, r2
 8001e3c:	d103      	bne.n	8001e46 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e42:	68ca      	ldr	r2, [r1, #12]
 8001e44:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e4a:	694a      	ldr	r2, [r1, #20]
 8001e4c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001e4e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e50:	688b      	ldr	r3, [r1, #8]
 8001e52:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e54:	680b      	ldr	r3, [r1, #0]
 8001e56:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <TIM_Base_SetConfig+0xd4>)
 8001e5a:	4298      	cmp	r0, r3
 8001e5c:	d003      	beq.n	8001e66 <TIM_Base_SetConfig+0xba>
 8001e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e62:	4298      	cmp	r0, r3
 8001e64:	d101      	bne.n	8001e6a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e66:	690b      	ldr	r3, [r1, #16]
 8001e68:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e6e:	6903      	ldr	r3, [r0, #16]
 8001e70:	f013 0f01 	tst.w	r3, #1
 8001e74:	d003      	beq.n	8001e7e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e76:	6903      	ldr	r3, [r0, #16]
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6103      	str	r3, [r0, #16]
  }
}
 8001e7e:	4770      	bx	lr
 8001e80:	40010000 	.word	0x40010000

08001e84 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001e84:	b340      	cbz	r0, 8001ed8 <HAL_TIM_Base_Init+0x54>
{
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e8e:	b1f3      	cbz	r3, 8001ece <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e96:	4621      	mov	r1, r4
 8001e98:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e9c:	f7ff ff86 	bl	8001dac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001eaa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001eae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001eb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ebe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001ec2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001ece:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ed2:	f7fe fd93 	bl	80009fc <HAL_TIM_Base_MspInit>
 8001ed6:	e7db      	b.n	8001e90 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
}
 8001eda:	4770      	bx	lr

08001edc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001edc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001ee0:	2a01      	cmp	r2, #1
 8001ee2:	d03d      	beq.n	8001f60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001ee4:	b410      	push	{r4}
 8001ee6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ef4:	6802      	ldr	r2, [r0, #0]
 8001ef6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ef8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001efa:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001efe:	6808      	ldr	r0, [r1, #0]
 8001f00:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f04:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4816      	ldr	r0, [pc, #88]	@ (8001f64 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001f0a:	4282      	cmp	r2, r0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f0e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001f12:	d017      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f14:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001f18:	4282      	cmp	r2, r0
 8001f1a:	d013      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f1c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f20:	4282      	cmp	r2, r0
 8001f22:	d00f      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f24:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f28:	4282      	cmp	r2, r0
 8001f2a:	d00b      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f2c:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001f30:	4282      	cmp	r2, r0
 8001f32:	d007      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f34:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8001f38:	4282      	cmp	r2, r0
 8001f3a:	d003      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001f3c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001f40:	4282      	cmp	r2, r0
 8001f42:	d104      	bne.n	8001f4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f44:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f48:	6849      	ldr	r1, [r1, #4]
 8001f4a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f4c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f5e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001f60:	2002      	movs	r0, #2
}
 8001f62:	4770      	bx	lr
 8001f64:	40010000 	.word	0x40010000

08001f68 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f68:	4770      	bx	lr

08001f6a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f6a:	4770      	bx	lr

08001f6c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6e:	f102 030c 	add.w	r3, r2, #12
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	320c      	adds	r2, #12
 8001f7c:	e842 3100 	strex	r1, r3, [r2]
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d1f3      	bne.n	8001f6c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f84:	2320      	movs	r3, #32
 8001f86:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8001f8a:	4770      	bx	lr

08001f8c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f8c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8e:	f102 030c 	add.w	r3, r2, #12
 8001f92:	e853 3f00 	ldrex	r3, [r3]
 8001f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9a:	320c      	adds	r2, #12
 8001f9c:	e842 3100 	strex	r1, r3, [r2]
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	d1f3      	bne.n	8001f8c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa6:	f102 0314 	add.w	r3, r2, #20
 8001faa:	e853 3f00 	ldrex	r3, [r3]
 8001fae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb2:	3214      	adds	r2, #20
 8001fb4:	e842 3100 	strex	r1, r3, [r2]
 8001fb8:	2900      	cmp	r1, #0
 8001fba:	d1f3      	bne.n	8001fa4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001fcc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	f102 030c 	add.w	r3, r2, #12
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fdc:	320c      	adds	r2, #12
 8001fde:	e842 3100 	strex	r1, r3, [r2]
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f3      	bne.n	8001fce <UART_EndRxTransfer+0x42>
 8001fe6:	e7ec      	b.n	8001fc2 <UART_EndRxTransfer+0x36>

08001fe8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fe8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b21      	cmp	r3, #33	@ 0x21
 8001ff0:	d001      	beq.n	8001ff6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2002      	movs	r0, #2
  }
}
 8001ff4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff6:	6883      	ldr	r3, [r0, #8]
 8001ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ffc:	d017      	beq.n	800202e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ffe:	6a03      	ldr	r3, [r0, #32]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	6202      	str	r2, [r0, #32]
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	6803      	ldr	r3, [r0, #0]
 8002008:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800200a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002014:	b94b      	cbnz	r3, 800202a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002016:	6802      	ldr	r2, [r0, #0]
 8002018:	68d3      	ldr	r3, [r2, #12]
 800201a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800201e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002020:	6802      	ldr	r2, [r0, #0]
 8002022:	68d3      	ldr	r3, [r2, #12]
 8002024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002028:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800202a:	2000      	movs	r0, #0
 800202c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202e:	6903      	ldr	r3, [r0, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e4      	bne.n	8001ffe <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002034:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	6802      	ldr	r2, [r0, #0]
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002040:	6a03      	ldr	r3, [r0, #32]
 8002042:	3302      	adds	r3, #2
 8002044:	6203      	str	r3, [r0, #32]
 8002046:	e7e0      	b.n	800200a <UART_Transmit_IT+0x22>

08002048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002048:	b510      	push	{r4, lr}
 800204a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800204c:	6802      	ldr	r2, [r0, #0]
 800204e:	6913      	ldr	r3, [r2, #16]
 8002050:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002054:	68c1      	ldr	r1, [r0, #12]
 8002056:	430b      	orrs	r3, r1
 8002058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800205a:	6883      	ldr	r3, [r0, #8]
 800205c:	6902      	ldr	r2, [r0, #16]
 800205e:	431a      	orrs	r2, r3
 8002060:	6943      	ldr	r3, [r0, #20]
 8002062:	431a      	orrs	r2, r3
 8002064:	69c3      	ldr	r3, [r0, #28]
 8002066:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002068:	6801      	ldr	r1, [r0, #0]
 800206a:	68cb      	ldr	r3, [r1, #12]
 800206c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002070:	f023 030c 	bic.w	r3, r3, #12
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002078:	6802      	ldr	r2, [r0, #0]
 800207a:	6953      	ldr	r3, [r2, #20]
 800207c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002080:	6981      	ldr	r1, [r0, #24]
 8002082:	430b      	orrs	r3, r1
 8002084:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002086:	6803      	ldr	r3, [r0, #0]
 8002088:	4a31      	ldr	r2, [pc, #196]	@ (8002150 <UART_SetConfig+0x108>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d006      	beq.n	800209c <UART_SetConfig+0x54>
 800208e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002092:	4293      	cmp	r3, r2
 8002094:	d002      	beq.n	800209c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002096:	f7ff fd5d 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800209a:	e001      	b.n	80020a0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800209c:	f7ff fd6a 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a0:	69e3      	ldr	r3, [r4, #28]
 80020a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a6:	d029      	beq.n	80020fc <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020a8:	2100      	movs	r1, #0
 80020aa:	1803      	adds	r3, r0, r0
 80020ac:	4149      	adcs	r1, r1
 80020ae:	181b      	adds	r3, r3, r0
 80020b0:	f141 0100 	adc.w	r1, r1, #0
 80020b4:	00c9      	lsls	r1, r1, #3
 80020b6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1818      	adds	r0, r3, r0
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80020c4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80020c8:	f141 0100 	adc.w	r1, r1, #0
 80020cc:	f7fe f8d8 	bl	8000280 <__aeabi_uldivmod>
 80020d0:	4a20      	ldr	r2, [pc, #128]	@ (8002154 <UART_SetConfig+0x10c>)
 80020d2:	fba2 3100 	umull	r3, r1, r2, r0
 80020d6:	0949      	lsrs	r1, r1, #5
 80020d8:	2364      	movs	r3, #100	@ 0x64
 80020da:	fb03 0311 	mls	r3, r3, r1, r0
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	3332      	adds	r3, #50	@ 0x32
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020ec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	6821      	ldr	r1, [r4, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }
}
 80020fa:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020fc:	2300      	movs	r3, #0
 80020fe:	1802      	adds	r2, r0, r0
 8002100:	eb43 0103 	adc.w	r1, r3, r3
 8002104:	1812      	adds	r2, r2, r0
 8002106:	f141 0100 	adc.w	r1, r1, #0
 800210a:	00c9      	lsls	r1, r1, #3
 800210c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002110:	00d2      	lsls	r2, r2, #3
 8002112:	1810      	adds	r0, r2, r0
 8002114:	f141 0100 	adc.w	r1, r1, #0
 8002118:	6862      	ldr	r2, [r4, #4]
 800211a:	1892      	adds	r2, r2, r2
 800211c:	415b      	adcs	r3, r3
 800211e:	f7fe f8af 	bl	8000280 <__aeabi_uldivmod>
 8002122:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <UART_SetConfig+0x10c>)
 8002124:	fba2 3100 	umull	r3, r1, r2, r0
 8002128:	0949      	lsrs	r1, r1, #5
 800212a:	2364      	movs	r3, #100	@ 0x64
 800212c:	fb03 0311 	mls	r3, r3, r1, r0
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	3332      	adds	r3, #50	@ 0x32
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	005a      	lsls	r2, r3, #1
 800213c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002140:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	6821      	ldr	r1, [r4, #0]
 800214a:	4413      	add	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
 800214e:	e7d4      	b.n	80020fa <UART_SetConfig+0xb2>
 8002150:	40011000 	.word	0x40011000
 8002154:	51eb851f 	.word	0x51eb851f

08002158 <UART_WaitOnFlagUntilTimeout>:
{
 8002158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800215c:	b083      	sub	sp, #12
 800215e:	4605      	mov	r5, r0
 8002160:	460e      	mov	r6, r1
 8002162:	4617      	mov	r7, r2
 8002164:	4699      	mov	r9, r3
 8002166:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216a:	682b      	ldr	r3, [r5, #0]
 800216c:	681c      	ldr	r4, [r3, #0]
 800216e:	ea36 0404 	bics.w	r4, r6, r4
 8002172:	bf0c      	ite	eq
 8002174:	2401      	moveq	r4, #1
 8002176:	2400      	movne	r4, #0
 8002178:	42bc      	cmp	r4, r7
 800217a:	d128      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800217c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002180:	d0f3      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002182:	f7fe fa59 	bl	8000638 <HAL_GetTick>
 8002186:	eba0 0009 	sub.w	r0, r0, r9
 800218a:	4540      	cmp	r0, r8
 800218c:	d823      	bhi.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800218e:	f1b8 0f00 	cmp.w	r8, #0
 8002192:	d022      	beq.n	80021da <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	f012 0f04 	tst.w	r2, #4
 800219c:	d0e5      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x12>
 800219e:	2e80      	cmp	r6, #128	@ 0x80
 80021a0:	d0e3      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x12>
 80021a2:	2e40      	cmp	r6, #64	@ 0x40
 80021a4:	d0e1      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f012 0f08 	tst.w	r2, #8
 80021ac:	d0dd      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021ae:	2400      	movs	r4, #0
 80021b0:	9401      	str	r4, [sp, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	9201      	str	r2, [sp, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80021bc:	4628      	mov	r0, r5
 80021be:	f7ff fee5 	bl	8001f8c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021c2:	2308      	movs	r3, #8
 80021c4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80021c6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80021ca:	2001      	movs	r0, #1
 80021cc:	e000      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80021ce:	2000      	movs	r0, #0
}
 80021d0:	b003      	add	sp, #12
 80021d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80021d6:	2003      	movs	r0, #3
 80021d8:	e7fa      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x78>
 80021da:	2003      	movs	r0, #3
 80021dc:	e7f8      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x78>

080021de <HAL_UART_Init>:
  if (huart == NULL)
 80021de:	b360      	cbz	r0, 800223a <HAL_UART_Init+0x5c>
{
 80021e0:	b510      	push	{r4, lr}
 80021e2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80021e4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80021e8:	b313      	cbz	r3, 8002230 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80021ea:	2324      	movs	r3, #36	@ 0x24
 80021ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	68d3      	ldr	r3, [r2, #12]
 80021f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ff24 	bl	8002048 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	6913      	ldr	r3, [r2, #16]
 8002204:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002208:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	6953      	ldr	r3, [r2, #20]
 800220e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002212:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	68d3      	ldr	r3, [r2, #12]
 8002218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800221c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	2000      	movs	r0, #0
 8002220:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002222:	2320      	movs	r3, #32
 8002224:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800222c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800222e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002230:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002234:	f7fe fc02 	bl	8000a3c <HAL_UART_MspInit>
 8002238:	e7d7      	b.n	80021ea <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
}
 800223c:	4770      	bx	lr

0800223e <HAL_UART_Transmit>:
{
 800223e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002246:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b20      	cmp	r3, #32
 800224e:	d156      	bne.n	80022fe <HAL_UART_Transmit+0xc0>
 8002250:	4604      	mov	r4, r0
 8002252:	460d      	mov	r5, r1
 8002254:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002256:	2900      	cmp	r1, #0
 8002258:	d055      	beq.n	8002306 <HAL_UART_Transmit+0xc8>
 800225a:	b90a      	cbnz	r2, 8002260 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800225c:	2001      	movs	r0, #1
 800225e:	e04f      	b.n	8002300 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	2300      	movs	r3, #0
 8002262:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002264:	2321      	movs	r3, #33	@ 0x21
 8002266:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800226a:	f7fe f9e5 	bl	8000638 <HAL_GetTick>
 800226e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002270:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002274:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68a3      	ldr	r3, [r4, #8]
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800227e:	d002      	beq.n	8002286 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002280:	f04f 0800 	mov.w	r8, #0
 8002284:	e014      	b.n	80022b0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002286:	6923      	ldr	r3, [r4, #16]
 8002288:	b32b      	cbz	r3, 80022d6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800228a:	f04f 0800 	mov.w	r8, #0
 800228e:	e00f      	b.n	80022b0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002290:	2320      	movs	r3, #32
 8002292:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e032      	b.n	8002300 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800229a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80022a6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80022a8:	b292      	uxth	r2, r2
 80022aa:	3a01      	subs	r2, #1
 80022ac:	b292      	uxth	r2, r2
 80022ae:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022b0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b193      	cbz	r3, 80022dc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	9600      	str	r6, [sp, #0]
 80022b8:	463b      	mov	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff ff4a 	bl	8002158 <UART_WaitOnFlagUntilTimeout>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d1e3      	bne.n	8002290 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80022c8:	2d00      	cmp	r5, #0
 80022ca:	d0e6      	beq.n	800229a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d4:	e7e7      	b.n	80022a6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80022d6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80022d8:	2500      	movs	r5, #0
 80022da:	e7e9      	b.n	80022b0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022dc:	9600      	str	r6, [sp, #0]
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	2140      	movs	r1, #64	@ 0x40
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff ff37 	bl	8002158 <UART_WaitOnFlagUntilTimeout>
 80022ea:	b918      	cbnz	r0, 80022f4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80022ec:	2320      	movs	r3, #32
 80022ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80022f2:	e005      	b.n	8002300 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80022f4:	2320      	movs	r3, #32
 80022f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80022fa:	2003      	movs	r0, #3
 80022fc:	e000      	b.n	8002300 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80022fe:	2002      	movs	r0, #2
}
 8002300:	b002      	add	sp, #8
 8002302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002306:	2001      	movs	r0, #1
 8002308:	e7fa      	b.n	8002300 <HAL_UART_Transmit+0xc2>

0800230a <HAL_UART_TxCpltCallback>:
}
 800230a:	4770      	bx	lr

0800230c <UART_EndTransmit_IT>:
{
 800230c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	68ca      	ldr	r2, [r1, #12]
 8002312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002316:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002318:	2220      	movs	r2, #32
 800231a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800231e:	f7ff fff4 	bl	800230a <HAL_UART_TxCpltCallback>
}
 8002322:	2000      	movs	r0, #0
 8002324:	bd08      	pop	{r3, pc}

08002326 <HAL_UART_RxCpltCallback>:
}
 8002326:	4770      	bx	lr

08002328 <HAL_UART_RxHalfCpltCallback>:
}
 8002328:	4770      	bx	lr

0800232a <UART_DMAError>:
{
 800232a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002332:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b21      	cmp	r3, #33	@ 0x21
 800233a:	d010      	beq.n	800235e <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002344:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b22      	cmp	r3, #34	@ 0x22
 800234c:	d011      	beq.n	8002372 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800234e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8002356:	4620      	mov	r0, r4
 8002358:	f7fe f9fe 	bl	8000758 <HAL_UART_ErrorCallback>
}
 800235c:	bd10      	pop	{r4, pc}
 800235e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002362:	2a00      	cmp	r2, #0
 8002364:	d0ea      	beq.n	800233c <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff fdfe 	bl	8001f6c <UART_EndTxTransfer>
 8002370:	e7e4      	b.n	800233c <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002372:	2a00      	cmp	r2, #0
 8002374:	d0eb      	beq.n	800234e <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff fe06 	bl	8001f8c <UART_EndRxTransfer>
 8002380:	e7e5      	b.n	800234e <UART_DMAError+0x24>

08002382 <UART_DMAAbortOnError>:
{
 8002382:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002384:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800238a:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800238c:	f7fe f9e4 	bl	8000758 <HAL_UART_ErrorCallback>
}
 8002390:	bd08      	pop	{r3, pc}

08002392 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002392:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b22      	cmp	r3, #34	@ 0x22
 800239a:	d169      	bne.n	8002470 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	6883      	ldr	r3, [r0, #8]
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a2:	d04f      	beq.n	8002444 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023a4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023aa:	d004      	beq.n	80023b6 <UART_Receive_IT+0x24>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d156      	bne.n	800245e <UART_Receive_IT+0xcc>
 80023b0:	6903      	ldr	r3, [r0, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d153      	bne.n	800245e <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023b6:	6803      	ldr	r3, [r0, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80023bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023be:	3301      	adds	r3, #1
 80023c0:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80023c2:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d151      	bne.n	8002474 <UART_Receive_IT+0xe2>
{
 80023d0:	b500      	push	{lr}
 80023d2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023d4:	6802      	ldr	r2, [r0, #0]
 80023d6:	68d3      	ldr	r3, [r2, #12]
 80023d8:	f023 0320 	bic.w	r3, r3, #32
 80023dc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	68d3      	ldr	r3, [r2, #12]
 80023e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023e8:	6802      	ldr	r2, [r0, #0]
 80023ea:	6953      	ldr	r3, [r2, #20]
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023f2:	2320      	movs	r3, #32
 80023f4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f8:	2300      	movs	r3, #0
 80023fa:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d133      	bne.n	800246a <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002402:	2300      	movs	r3, #0
 8002404:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002406:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	f102 030c 	add.w	r3, r2, #12
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	320c      	adds	r2, #12
 8002416:	e842 3100 	strex	r1, r3, [r2]
 800241a:	2900      	cmp	r1, #0
 800241c:	d1f3      	bne.n	8002406 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800241e:	6803      	ldr	r3, [r0, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f012 0f10 	tst.w	r2, #16
 8002426:	d006      	beq.n	8002436 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002428:	2200      	movs	r2, #0
 800242a:	9201      	str	r2, [sp, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	9201      	str	r2, [sp, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002436:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002438:	f7fe f96e 	bl	8000718 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800243c:	2000      	movs	r0, #0
}
 800243e:	b003      	add	sp, #12
 8002440:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002444:	6902      	ldr	r2, [r0, #16]
 8002446:	2a00      	cmp	r2, #0
 8002448:	d1ac      	bne.n	80023a4 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800244a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800244c:	6803      	ldr	r3, [r0, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002454:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002456:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002458:	3302      	adds	r3, #2
 800245a:	6283      	str	r3, [r0, #40]	@ 0x28
 800245c:	e7b1      	b.n	80023c2 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800245e:	6803      	ldr	r3, [r0, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002466:	7013      	strb	r3, [r2, #0]
 8002468:	e7a8      	b.n	80023bc <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800246a:	f7ff ff5c 	bl	8002326 <HAL_UART_RxCpltCallback>
 800246e:	e7e5      	b.n	800243c <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8002470:	2002      	movs	r0, #2
 8002472:	4770      	bx	lr
    return HAL_OK;
 8002474:	2000      	movs	r0, #0
}
 8002476:	4770      	bx	lr

08002478 <HAL_UART_IRQHandler>:
{
 8002478:	b510      	push	{r4, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800247e:	6802      	ldr	r2, [r0, #0]
 8002480:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002482:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002484:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002486:	f013 0f0f 	tst.w	r3, #15
 800248a:	d109      	bne.n	80024a0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248c:	f013 0f20 	tst.w	r3, #32
 8002490:	d00c      	beq.n	80024ac <HAL_UART_IRQHandler+0x34>
 8002492:	f010 0f20 	tst.w	r0, #32
 8002496:	d009      	beq.n	80024ac <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff ff7a 	bl	8002392 <UART_Receive_IT>
      return;
 800249e:	e016      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024a0:	f011 0101 	ands.w	r1, r1, #1
 80024a4:	d115      	bne.n	80024d2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024a6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80024aa:	d112      	bne.n	80024d2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80024ae:	2901      	cmp	r1, #1
 80024b0:	d079      	beq.n	80025a6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024b6:	d003      	beq.n	80024c0 <HAL_UART_IRQHandler+0x48>
 80024b8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80024bc:	f040 8114 	bne.w	80026e8 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024c0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80024c4:	d003      	beq.n	80024ce <HAL_UART_IRQHandler+0x56>
 80024c6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80024ca:	f040 8111 	bne.w	80026f0 <HAL_UART_IRQHandler+0x278>
}
 80024ce:	b002      	add	sp, #8
 80024d0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024d2:	f013 0f01 	tst.w	r3, #1
 80024d6:	d006      	beq.n	80024e6 <HAL_UART_IRQHandler+0x6e>
 80024d8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80024dc:	d003      	beq.n	80024e6 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024de:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f013 0f04 	tst.w	r3, #4
 80024ea:	d004      	beq.n	80024f6 <HAL_UART_IRQHandler+0x7e>
 80024ec:	b119      	cbz	r1, 80024f6 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80024f0:	f042 0202 	orr.w	r2, r2, #2
 80024f4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f6:	f013 0f02 	tst.w	r3, #2
 80024fa:	d004      	beq.n	8002506 <HAL_UART_IRQHandler+0x8e>
 80024fc:	b119      	cbz	r1, 8002506 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024fe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002500:	f042 0204 	orr.w	r2, r2, #4
 8002504:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002506:	f013 0f08 	tst.w	r3, #8
 800250a:	d007      	beq.n	800251c <HAL_UART_IRQHandler+0xa4>
 800250c:	f010 0f20 	tst.w	r0, #32
 8002510:	d100      	bne.n	8002514 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002512:	b119      	cbz	r1, 800251c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002514:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800251e:	2a00      	cmp	r2, #0
 8002520:	d0d5      	beq.n	80024ce <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002522:	f013 0f20 	tst.w	r3, #32
 8002526:	d002      	beq.n	800252e <HAL_UART_IRQHandler+0xb6>
 8002528:	f010 0f20 	tst.w	r0, #32
 800252c:	d129      	bne.n	8002582 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002536:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002538:	f012 0f08 	tst.w	r2, #8
 800253c:	d100      	bne.n	8002540 <HAL_UART_IRQHandler+0xc8>
 800253e:	b363      	cbz	r3, 800259a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8002540:	4620      	mov	r0, r4
 8002542:	f7ff fd23 	bl	8001f8c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800254e:	d020      	beq.n	8002592 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002550:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002552:	f102 0314 	add.w	r3, r2, #20
 8002556:	e853 3f00 	ldrex	r3, [r3]
 800255a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255e:	3214      	adds	r2, #20
 8002560:	e842 3100 	strex	r1, r3, [r2]
 8002564:	2900      	cmp	r1, #0
 8002566:	d1f3      	bne.n	8002550 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8002568:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800256a:	b173      	cbz	r3, 800258a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256c:	4a62      	ldr	r2, [pc, #392]	@ (80026f8 <HAL_UART_IRQHandler+0x280>)
 800256e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002570:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002572:	f7fe fdd8 	bl	8001126 <HAL_DMA_Abort_IT>
 8002576:	2800      	cmp	r0, #0
 8002578:	d0a9      	beq.n	80024ce <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800257a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800257c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800257e:	4798      	blx	r3
 8002580:	e7a5      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8002582:	4620      	mov	r0, r4
 8002584:	f7ff ff05 	bl	8002392 <UART_Receive_IT>
 8002588:	e7d1      	b.n	800252e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800258a:	4620      	mov	r0, r4
 800258c:	f7fe f8e4 	bl	8000758 <HAL_UART_ErrorCallback>
 8002590:	e79d      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8002592:	4620      	mov	r0, r4
 8002594:	f7fe f8e0 	bl	8000758 <HAL_UART_ErrorCallback>
 8002598:	e799      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800259a:	4620      	mov	r0, r4
 800259c:	f7fe f8dc 	bl	8000758 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80025a4:	e793      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025a6:	f013 0f10 	tst.w	r3, #16
 80025aa:	d082      	beq.n	80024b2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025ac:	f010 0f10 	tst.w	r0, #16
 80025b0:	f43f af7f 	beq.w	80024b2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025b4:	2300      	movs	r3, #0
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	6813      	ldr	r3, [r2, #0]
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	6853      	ldr	r3, [r2, #4]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c2:	6953      	ldr	r3, [r2, #20]
 80025c4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80025c8:	d052      	beq.n	8002670 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025ca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f43f af7b 	beq.w	80024ce <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025d8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80025da:	4299      	cmp	r1, r3
 80025dc:	f67f af77 	bls.w	80024ce <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 80025e0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025e2:	69d3      	ldr	r3, [r2, #28]
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	d037      	beq.n	800265a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ec:	f102 030c 	add.w	r3, r2, #12
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	320c      	adds	r2, #12
 80025fa:	e842 3100 	strex	r1, r3, [r2]
 80025fe:	2900      	cmp	r1, #0
 8002600:	d1f3      	bne.n	80025ea <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002602:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002604:	f102 0314 	add.w	r3, r2, #20
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	3214      	adds	r2, #20
 8002612:	e842 3100 	strex	r1, r3, [r2]
 8002616:	2900      	cmp	r1, #0
 8002618:	d1f3      	bne.n	8002602 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261c:	f102 0314 	add.w	r3, r2, #20
 8002620:	e853 3f00 	ldrex	r3, [r3]
 8002624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	3214      	adds	r2, #20
 800262a:	e842 3100 	strex	r1, r3, [r2]
 800262e:	2900      	cmp	r1, #0
 8002630:	d1f3      	bne.n	800261a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8002632:	2320      	movs	r3, #32
 8002634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002638:	2300      	movs	r3, #0
 800263a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	f102 030c 	add.w	r3, r2, #12
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	320c      	adds	r2, #12
 800264c:	e842 3100 	strex	r1, r3, [r2]
 8002650:	2900      	cmp	r1, #0
 8002652:	d1f3      	bne.n	800263c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002654:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002656:	f7fe fd1c 	bl	8001092 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800265a:	2302      	movs	r3, #2
 800265c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800265e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002660:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002662:	b29b      	uxth	r3, r3
 8002664:	1ac9      	subs	r1, r1, r3
 8002666:	b289      	uxth	r1, r1
 8002668:	4620      	mov	r0, r4
 800266a:	f7fe f855 	bl	8000718 <HAL_UARTEx_RxEventCallback>
      return;
 800266e:	e72e      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002670:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002672:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002674:	b29b      	uxth	r3, r3
 8002676:	1ac9      	subs	r1, r1, r3
 8002678:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800267a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f43f af25 	beq.w	80024ce <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8002684:	2900      	cmp	r1, #0
 8002686:	f43f af22 	beq.w	80024ce <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800268a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268c:	f102 030c 	add.w	r3, r2, #12
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	320c      	adds	r2, #12
 800269a:	e842 3000 	strex	r0, r3, [r2]
 800269e:	2800      	cmp	r0, #0
 80026a0:	d1f3      	bne.n	800268a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	f102 0314 	add.w	r3, r2, #20
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	3214      	adds	r2, #20
 80026b2:	e842 3000 	strex	r0, r3, [r2]
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d1f3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80026ba:	2320      	movs	r3, #32
 80026bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c0:	2300      	movs	r3, #0
 80026c2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	f102 030c 	add.w	r3, r2, #12
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	320c      	adds	r2, #12
 80026d4:	e842 3000 	strex	r0, r3, [r2]
 80026d8:	2800      	cmp	r0, #0
 80026da:	d1f3      	bne.n	80026c4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026dc:	2302      	movs	r3, #2
 80026de:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7fe f819 	bl	8000718 <HAL_UARTEx_RxEventCallback>
      return;
 80026e6:	e6f2      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff fc7d 	bl	8001fe8 <UART_Transmit_IT>
    return;
 80026ee:	e6ee      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff fe0b 	bl	800230c <UART_EndTransmit_IT>
    return;
 80026f6:	e6ea      	b.n	80024ce <HAL_UART_IRQHandler+0x56>
 80026f8:	08002383 	.word	0x08002383

080026fc <UART_DMARxHalfCplt>:
{
 80026fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002700:	2301      	movs	r3, #1
 8002702:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002706:	2b01      	cmp	r3, #1
 8002708:	d002      	beq.n	8002710 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800270a:	f7ff fe0d 	bl	8002328 <HAL_UART_RxHalfCpltCallback>
}
 800270e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002710:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002712:	0849      	lsrs	r1, r1, #1
 8002714:	f7fe f800 	bl	8000718 <HAL_UARTEx_RxEventCallback>
 8002718:	e7f9      	b.n	800270e <UART_DMARxHalfCplt+0x12>

0800271a <UART_DMAReceiveCplt>:
{
 800271a:	b508      	push	{r3, lr}
 800271c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002728:	d12b      	bne.n	8002782 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800272e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	f102 030c 	add.w	r3, r2, #12
 8002734:	e853 3f00 	ldrex	r3, [r3]
 8002738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	320c      	adds	r2, #12
 800273e:	e842 3100 	strex	r1, r3, [r2]
 8002742:	2900      	cmp	r1, #0
 8002744:	d1f3      	bne.n	800272e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002746:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	f102 0314 	add.w	r3, r2, #20
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	3214      	adds	r2, #20
 8002756:	e842 3100 	strex	r1, r3, [r2]
 800275a:	2900      	cmp	r1, #0
 800275c:	d1f3      	bne.n	8002746 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800275e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002760:	f102 0314 	add.w	r3, r2, #20
 8002764:	e853 3f00 	ldrex	r3, [r3]
 8002768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276c:	3214      	adds	r2, #20
 800276e:	e842 3100 	strex	r1, r3, [r2]
 8002772:	2900      	cmp	r1, #0
 8002774:	d1f3      	bne.n	800275e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8002776:	2320      	movs	r3, #32
 8002778:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800277c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800277e:	2b01      	cmp	r3, #1
 8002780:	d007      	beq.n	8002792 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002782:	2300      	movs	r3, #0
 8002784:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002786:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002788:	2b01      	cmp	r3, #1
 800278a:	d00f      	beq.n	80027ac <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800278c:	f7ff fdcb 	bl	8002326 <HAL_UART_RxCpltCallback>
}
 8002790:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002792:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	f102 030c 	add.w	r3, r2, #12
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	320c      	adds	r2, #12
 80027a2:	e842 3100 	strex	r1, r3, [r2]
 80027a6:	2900      	cmp	r1, #0
 80027a8:	d1f3      	bne.n	8002792 <UART_DMAReceiveCplt+0x78>
 80027aa:	e7ea      	b.n	8002782 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ac:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80027ae:	f7fd ffb3 	bl	8000718 <HAL_UARTEx_RxEventCallback>
 80027b2:	e7ed      	b.n	8002790 <UART_DMAReceiveCplt+0x76>

080027b4 <UART_Start_Receive_DMA>:
{
 80027b4:	b530      	push	{r4, r5, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	4604      	mov	r4, r0
 80027ba:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80027bc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 80027be:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	2500      	movs	r5, #0
 80027c2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c4:	2222      	movs	r2, #34	@ 0x22
 80027c6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80027cc:	481f      	ldr	r0, [pc, #124]	@ (800284c <UART_Start_Receive_DMA+0x98>)
 80027ce:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027d0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027d2:	481f      	ldr	r0, [pc, #124]	@ (8002850 <UART_Start_Receive_DMA+0x9c>)
 80027d4:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027d6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027d8:	481e      	ldr	r0, [pc, #120]	@ (8002854 <UART_Start_Receive_DMA+0xa0>)
 80027da:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 80027dc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027de:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	460a      	mov	r2, r1
 80027e4:	1d01      	adds	r1, r0, #4
 80027e6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80027e8:	f7fe fc1e 	bl	8001028 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80027ec:	9501      	str	r5, [sp, #4]
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	9201      	str	r2, [sp, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80027fa:	6923      	ldr	r3, [r4, #16]
 80027fc:	b15b      	cbz	r3, 8002816 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	f102 030c 	add.w	r3, r2, #12
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	320c      	adds	r2, #12
 800280e:	e842 3100 	strex	r1, r3, [r2]
 8002812:	2900      	cmp	r1, #0
 8002814:	d1f3      	bne.n	80027fe <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002816:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	f102 0314 	add.w	r3, r2, #20
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	3214      	adds	r2, #20
 8002826:	e842 3100 	strex	r1, r3, [r2]
 800282a:	2900      	cmp	r1, #0
 800282c:	d1f3      	bne.n	8002816 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	f102 0314 	add.w	r3, r2, #20
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	3214      	adds	r2, #20
 800283e:	e842 3100 	strex	r1, r3, [r2]
 8002842:	2900      	cmp	r1, #0
 8002844:	d1f3      	bne.n	800282e <UART_Start_Receive_DMA+0x7a>
}
 8002846:	2000      	movs	r0, #0
 8002848:	b003      	add	sp, #12
 800284a:	bd30      	pop	{r4, r5, pc}
 800284c:	0800271b 	.word	0x0800271b
 8002850:	080026fd 	.word	0x080026fd
 8002854:	0800232b 	.word	0x0800232b

08002858 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002858:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d129      	bne.n	80028b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
{
 8002862:	b510      	push	{r4, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002868:	b339      	cbz	r1, 80028ba <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
 800286a:	b912      	cbnz	r2, 8002872 <HAL_UARTEx_ReceiveToIdle_DMA+0x1a>
      return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
}
 800286e:	b002      	add	sp, #8
 8002870:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002872:	2301      	movs	r3, #1
 8002874:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002876:	2300      	movs	r3, #0
 8002878:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800287a:	f7ff ff9b 	bl	80027b4 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800287e:	2800      	cmp	r0, #0
 8002880:	d1f5      	bne.n	800286e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002882:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 8002888:	2001      	movs	r0, #1
    return status;
 800288a:	e7f0      	b.n	800286e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800288c:	2300      	movs	r3, #0
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	9201      	str	r2, [sp, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	f102 030c 	add.w	r3, r2, #12
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	320c      	adds	r2, #12
 80028ac:	e842 3100 	strex	r1, r3, [r2]
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d1f3      	bne.n	800289c <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
 80028b4:	e7db      	b.n	800286e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 80028b6:	2002      	movs	r0, #2
}
 80028b8:	4770      	bx	lr
      return HAL_ERROR;
 80028ba:	2001      	movs	r0, #1
 80028bc:	e7d7      	b.n	800286e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
	...

080028c0 <std>:
 80028c0:	2300      	movs	r3, #0
 80028c2:	b510      	push	{r4, lr}
 80028c4:	4604      	mov	r4, r0
 80028c6:	e9c0 3300 	strd	r3, r3, [r0]
 80028ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028ce:	6083      	str	r3, [r0, #8]
 80028d0:	8181      	strh	r1, [r0, #12]
 80028d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80028d4:	81c2      	strh	r2, [r0, #14]
 80028d6:	6183      	str	r3, [r0, #24]
 80028d8:	4619      	mov	r1, r3
 80028da:	2208      	movs	r2, #8
 80028dc:	305c      	adds	r0, #92	@ 0x5c
 80028de:	f000 fa19 	bl	8002d14 <memset>
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <std+0x58>)
 80028e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <std+0x5c>)
 80028e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <std+0x60>)
 80028ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <std+0x64>)
 80028f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <std+0x68>)
 80028f4:	6224      	str	r4, [r4, #32]
 80028f6:	429c      	cmp	r4, r3
 80028f8:	d006      	beq.n	8002908 <std+0x48>
 80028fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028fe:	4294      	cmp	r4, r2
 8002900:	d002      	beq.n	8002908 <std+0x48>
 8002902:	33d0      	adds	r3, #208	@ 0xd0
 8002904:	429c      	cmp	r4, r3
 8002906:	d105      	bne.n	8002914 <std+0x54>
 8002908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002910:	f000 ba8c 	b.w	8002e2c <__retarget_lock_init_recursive>
 8002914:	bd10      	pop	{r4, pc}
 8002916:	bf00      	nop
 8002918:	08002b65 	.word	0x08002b65
 800291c:	08002b87 	.word	0x08002b87
 8002920:	08002bbf 	.word	0x08002bbf
 8002924:	08002be3 	.word	0x08002be3
 8002928:	200002d8 	.word	0x200002d8

0800292c <stdio_exit_handler>:
 800292c:	4a02      	ldr	r2, [pc, #8]	@ (8002938 <stdio_exit_handler+0xc>)
 800292e:	4903      	ldr	r1, [pc, #12]	@ (800293c <stdio_exit_handler+0x10>)
 8002930:	4803      	ldr	r0, [pc, #12]	@ (8002940 <stdio_exit_handler+0x14>)
 8002932:	f000 b869 	b.w	8002a08 <_fwalk_sglue>
 8002936:	bf00      	nop
 8002938:	2000000c 	.word	0x2000000c
 800293c:	0800397d 	.word	0x0800397d
 8002940:	2000001c 	.word	0x2000001c

08002944 <cleanup_stdio>:
 8002944:	6841      	ldr	r1, [r0, #4]
 8002946:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <cleanup_stdio+0x34>)
 8002948:	4299      	cmp	r1, r3
 800294a:	b510      	push	{r4, lr}
 800294c:	4604      	mov	r4, r0
 800294e:	d001      	beq.n	8002954 <cleanup_stdio+0x10>
 8002950:	f001 f814 	bl	800397c <_fflush_r>
 8002954:	68a1      	ldr	r1, [r4, #8]
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <cleanup_stdio+0x38>)
 8002958:	4299      	cmp	r1, r3
 800295a:	d002      	beq.n	8002962 <cleanup_stdio+0x1e>
 800295c:	4620      	mov	r0, r4
 800295e:	f001 f80d 	bl	800397c <_fflush_r>
 8002962:	68e1      	ldr	r1, [r4, #12]
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <cleanup_stdio+0x3c>)
 8002966:	4299      	cmp	r1, r3
 8002968:	d004      	beq.n	8002974 <cleanup_stdio+0x30>
 800296a:	4620      	mov	r0, r4
 800296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002970:	f001 b804 	b.w	800397c <_fflush_r>
 8002974:	bd10      	pop	{r4, pc}
 8002976:	bf00      	nop
 8002978:	200002d8 	.word	0x200002d8
 800297c:	20000340 	.word	0x20000340
 8002980:	200003a8 	.word	0x200003a8

08002984 <global_stdio_init.part.0>:
 8002984:	b510      	push	{r4, lr}
 8002986:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <global_stdio_init.part.0+0x30>)
 8002988:	4c0b      	ldr	r4, [pc, #44]	@ (80029b8 <global_stdio_init.part.0+0x34>)
 800298a:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <global_stdio_init.part.0+0x38>)
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4620      	mov	r0, r4
 8002990:	2200      	movs	r2, #0
 8002992:	2104      	movs	r1, #4
 8002994:	f7ff ff94 	bl	80028c0 <std>
 8002998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800299c:	2201      	movs	r2, #1
 800299e:	2109      	movs	r1, #9
 80029a0:	f7ff ff8e 	bl	80028c0 <std>
 80029a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80029a8:	2202      	movs	r2, #2
 80029aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ae:	2112      	movs	r1, #18
 80029b0:	f7ff bf86 	b.w	80028c0 <std>
 80029b4:	20000410 	.word	0x20000410
 80029b8:	200002d8 	.word	0x200002d8
 80029bc:	0800292d 	.word	0x0800292d

080029c0 <__sfp_lock_acquire>:
 80029c0:	4801      	ldr	r0, [pc, #4]	@ (80029c8 <__sfp_lock_acquire+0x8>)
 80029c2:	f000 ba34 	b.w	8002e2e <__retarget_lock_acquire_recursive>
 80029c6:	bf00      	nop
 80029c8:	20000419 	.word	0x20000419

080029cc <__sfp_lock_release>:
 80029cc:	4801      	ldr	r0, [pc, #4]	@ (80029d4 <__sfp_lock_release+0x8>)
 80029ce:	f000 ba2f 	b.w	8002e30 <__retarget_lock_release_recursive>
 80029d2:	bf00      	nop
 80029d4:	20000419 	.word	0x20000419

080029d8 <__sinit>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	f7ff fff0 	bl	80029c0 <__sfp_lock_acquire>
 80029e0:	6a23      	ldr	r3, [r4, #32]
 80029e2:	b11b      	cbz	r3, 80029ec <__sinit+0x14>
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e8:	f7ff bff0 	b.w	80029cc <__sfp_lock_release>
 80029ec:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <__sinit+0x28>)
 80029ee:	6223      	str	r3, [r4, #32]
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <__sinit+0x2c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f5      	bne.n	80029e4 <__sinit+0xc>
 80029f8:	f7ff ffc4 	bl	8002984 <global_stdio_init.part.0>
 80029fc:	e7f2      	b.n	80029e4 <__sinit+0xc>
 80029fe:	bf00      	nop
 8002a00:	08002945 	.word	0x08002945
 8002a04:	20000410 	.word	0x20000410

08002a08 <_fwalk_sglue>:
 8002a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a0c:	4607      	mov	r7, r0
 8002a0e:	4688      	mov	r8, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	2600      	movs	r6, #0
 8002a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a18:	f1b9 0901 	subs.w	r9, r9, #1
 8002a1c:	d505      	bpl.n	8002a2a <_fwalk_sglue+0x22>
 8002a1e:	6824      	ldr	r4, [r4, #0]
 8002a20:	2c00      	cmp	r4, #0
 8002a22:	d1f7      	bne.n	8002a14 <_fwalk_sglue+0xc>
 8002a24:	4630      	mov	r0, r6
 8002a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a2a:	89ab      	ldrh	r3, [r5, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d907      	bls.n	8002a40 <_fwalk_sglue+0x38>
 8002a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a34:	3301      	adds	r3, #1
 8002a36:	d003      	beq.n	8002a40 <_fwalk_sglue+0x38>
 8002a38:	4629      	mov	r1, r5
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	47c0      	blx	r8
 8002a3e:	4306      	orrs	r6, r0
 8002a40:	3568      	adds	r5, #104	@ 0x68
 8002a42:	e7e9      	b.n	8002a18 <_fwalk_sglue+0x10>

08002a44 <iprintf>:
 8002a44:	b40f      	push	{r0, r1, r2, r3}
 8002a46:	b507      	push	{r0, r1, r2, lr}
 8002a48:	4906      	ldr	r1, [pc, #24]	@ (8002a64 <iprintf+0x20>)
 8002a4a:	ab04      	add	r3, sp, #16
 8002a4c:	6808      	ldr	r0, [r1, #0]
 8002a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a52:	6881      	ldr	r1, [r0, #8]
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	f000 fc67 	bl	8003328 <_vfiprintf_r>
 8002a5a:	b003      	add	sp, #12
 8002a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a60:	b004      	add	sp, #16
 8002a62:	4770      	bx	lr
 8002a64:	20000018 	.word	0x20000018

08002a68 <_puts_r>:
 8002a68:	6a03      	ldr	r3, [r0, #32]
 8002a6a:	b570      	push	{r4, r5, r6, lr}
 8002a6c:	6884      	ldr	r4, [r0, #8]
 8002a6e:	4605      	mov	r5, r0
 8002a70:	460e      	mov	r6, r1
 8002a72:	b90b      	cbnz	r3, 8002a78 <_puts_r+0x10>
 8002a74:	f7ff ffb0 	bl	80029d8 <__sinit>
 8002a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a7a:	07db      	lsls	r3, r3, #31
 8002a7c:	d405      	bmi.n	8002a8a <_puts_r+0x22>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	0598      	lsls	r0, r3, #22
 8002a82:	d402      	bmi.n	8002a8a <_puts_r+0x22>
 8002a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a86:	f000 f9d2 	bl	8002e2e <__retarget_lock_acquire_recursive>
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	0719      	lsls	r1, r3, #28
 8002a8e:	d502      	bpl.n	8002a96 <_puts_r+0x2e>
 8002a90:	6923      	ldr	r3, [r4, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d135      	bne.n	8002b02 <_puts_r+0x9a>
 8002a96:	4621      	mov	r1, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 f8e5 	bl	8002c68 <__swsetup_r>
 8002a9e:	b380      	cbz	r0, 8002b02 <_puts_r+0x9a>
 8002aa0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002aa6:	07da      	lsls	r2, r3, #31
 8002aa8:	d405      	bmi.n	8002ab6 <_puts_r+0x4e>
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	059b      	lsls	r3, r3, #22
 8002aae:	d402      	bmi.n	8002ab6 <_puts_r+0x4e>
 8002ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ab2:	f000 f9bd 	bl	8002e30 <__retarget_lock_release_recursive>
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	bd70      	pop	{r4, r5, r6, pc}
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da04      	bge.n	8002ac8 <_puts_r+0x60>
 8002abe:	69a2      	ldr	r2, [r4, #24]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dc17      	bgt.n	8002af4 <_puts_r+0x8c>
 8002ac4:	290a      	cmp	r1, #10
 8002ac6:	d015      	beq.n	8002af4 <_puts_r+0x8c>
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	6022      	str	r2, [r4, #0]
 8002ace:	7019      	strb	r1, [r3, #0]
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	60a3      	str	r3, [r4, #8]
 8002ada:	2900      	cmp	r1, #0
 8002adc:	d1ed      	bne.n	8002aba <_puts_r+0x52>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	da11      	bge.n	8002b06 <_puts_r+0x9e>
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	210a      	movs	r1, #10
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f000 f87f 	bl	8002bea <__swbuf_r>
 8002aec:	3001      	adds	r0, #1
 8002aee:	d0d7      	beq.n	8002aa0 <_puts_r+0x38>
 8002af0:	250a      	movs	r5, #10
 8002af2:	e7d7      	b.n	8002aa4 <_puts_r+0x3c>
 8002af4:	4622      	mov	r2, r4
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 f877 	bl	8002bea <__swbuf_r>
 8002afc:	3001      	adds	r0, #1
 8002afe:	d1e7      	bne.n	8002ad0 <_puts_r+0x68>
 8002b00:	e7ce      	b.n	8002aa0 <_puts_r+0x38>
 8002b02:	3e01      	subs	r6, #1
 8002b04:	e7e4      	b.n	8002ad0 <_puts_r+0x68>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	6022      	str	r2, [r4, #0]
 8002b0c:	220a      	movs	r2, #10
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e7ee      	b.n	8002af0 <_puts_r+0x88>
	...

08002b14 <puts>:
 8002b14:	4b02      	ldr	r3, [pc, #8]	@ (8002b20 <puts+0xc>)
 8002b16:	4601      	mov	r1, r0
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	f7ff bfa5 	b.w	8002a68 <_puts_r>
 8002b1e:	bf00      	nop
 8002b20:	20000018 	.word	0x20000018

08002b24 <siprintf>:
 8002b24:	b40e      	push	{r1, r2, r3}
 8002b26:	b500      	push	{lr}
 8002b28:	b09c      	sub	sp, #112	@ 0x70
 8002b2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b2c:	9002      	str	r0, [sp, #8]
 8002b2e:	9006      	str	r0, [sp, #24]
 8002b30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b34:	4809      	ldr	r0, [pc, #36]	@ (8002b5c <siprintf+0x38>)
 8002b36:	9107      	str	r1, [sp, #28]
 8002b38:	9104      	str	r1, [sp, #16]
 8002b3a:	4909      	ldr	r1, [pc, #36]	@ (8002b60 <siprintf+0x3c>)
 8002b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b40:	9105      	str	r1, [sp, #20]
 8002b42:	6800      	ldr	r0, [r0, #0]
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	a902      	add	r1, sp, #8
 8002b48:	f000 fac8 	bl	80030dc <_svfiprintf_r>
 8002b4c:	9b02      	ldr	r3, [sp, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	b01c      	add	sp, #112	@ 0x70
 8002b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b58:	b003      	add	sp, #12
 8002b5a:	4770      	bx	lr
 8002b5c:	20000018 	.word	0x20000018
 8002b60:	ffff0208 	.word	0xffff0208

08002b64 <__sread>:
 8002b64:	b510      	push	{r4, lr}
 8002b66:	460c      	mov	r4, r1
 8002b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b6c:	f000 f910 	bl	8002d90 <_read_r>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	bfab      	itete	ge
 8002b74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b76:	89a3      	ldrhlt	r3, [r4, #12]
 8002b78:	181b      	addge	r3, r3, r0
 8002b7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b7e:	bfac      	ite	ge
 8002b80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b82:	81a3      	strhlt	r3, [r4, #12]
 8002b84:	bd10      	pop	{r4, pc}

08002b86 <__swrite>:
 8002b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8a:	461f      	mov	r7, r3
 8002b8c:	898b      	ldrh	r3, [r1, #12]
 8002b8e:	05db      	lsls	r3, r3, #23
 8002b90:	4605      	mov	r5, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	4616      	mov	r6, r2
 8002b96:	d505      	bpl.n	8002ba4 <__swrite+0x1e>
 8002b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f000 f8e4 	bl	8002d6c <_lseek_r>
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002baa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bae:	81a3      	strh	r3, [r4, #12]
 8002bb0:	4632      	mov	r2, r6
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bba:	f000 b8fb 	b.w	8002db4 <_write_r>

08002bbe <__sseek>:
 8002bbe:	b510      	push	{r4, lr}
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc6:	f000 f8d1 	bl	8002d6c <_lseek_r>
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	bf15      	itete	ne
 8002bd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002bd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002bd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002bda:	81a3      	strheq	r3, [r4, #12]
 8002bdc:	bf18      	it	ne
 8002bde:	81a3      	strhne	r3, [r4, #12]
 8002be0:	bd10      	pop	{r4, pc}

08002be2 <__sclose>:
 8002be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be6:	f000 b8b1 	b.w	8002d4c <_close_r>

08002bea <__swbuf_r>:
 8002bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bec:	460e      	mov	r6, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	b118      	cbz	r0, 8002bfc <__swbuf_r+0x12>
 8002bf4:	6a03      	ldr	r3, [r0, #32]
 8002bf6:	b90b      	cbnz	r3, 8002bfc <__swbuf_r+0x12>
 8002bf8:	f7ff feee 	bl	80029d8 <__sinit>
 8002bfc:	69a3      	ldr	r3, [r4, #24]
 8002bfe:	60a3      	str	r3, [r4, #8]
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	071a      	lsls	r2, r3, #28
 8002c04:	d501      	bpl.n	8002c0a <__swbuf_r+0x20>
 8002c06:	6923      	ldr	r3, [r4, #16]
 8002c08:	b943      	cbnz	r3, 8002c1c <__swbuf_r+0x32>
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f000 f82b 	bl	8002c68 <__swsetup_r>
 8002c12:	b118      	cbz	r0, 8002c1c <__swbuf_r+0x32>
 8002c14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002c18:	4638      	mov	r0, r7
 8002c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	6922      	ldr	r2, [r4, #16]
 8002c20:	1a98      	subs	r0, r3, r2
 8002c22:	6963      	ldr	r3, [r4, #20]
 8002c24:	b2f6      	uxtb	r6, r6
 8002c26:	4283      	cmp	r3, r0
 8002c28:	4637      	mov	r7, r6
 8002c2a:	dc05      	bgt.n	8002c38 <__swbuf_r+0x4e>
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f000 fea4 	bl	800397c <_fflush_r>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1ed      	bne.n	8002c14 <__swbuf_r+0x2a>
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60a3      	str	r3, [r4, #8]
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	6022      	str	r2, [r4, #0]
 8002c44:	701e      	strb	r6, [r3, #0]
 8002c46:	6962      	ldr	r2, [r4, #20]
 8002c48:	1c43      	adds	r3, r0, #1
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d004      	beq.n	8002c58 <__swbuf_r+0x6e>
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	07db      	lsls	r3, r3, #31
 8002c52:	d5e1      	bpl.n	8002c18 <__swbuf_r+0x2e>
 8002c54:	2e0a      	cmp	r6, #10
 8002c56:	d1df      	bne.n	8002c18 <__swbuf_r+0x2e>
 8002c58:	4621      	mov	r1, r4
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 fe8e 	bl	800397c <_fflush_r>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d0d9      	beq.n	8002c18 <__swbuf_r+0x2e>
 8002c64:	e7d6      	b.n	8002c14 <__swbuf_r+0x2a>
	...

08002c68 <__swsetup_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <__swsetup_r+0xa8>)
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	460c      	mov	r4, r1
 8002c72:	b118      	cbz	r0, 8002c7c <__swsetup_r+0x14>
 8002c74:	6a03      	ldr	r3, [r0, #32]
 8002c76:	b90b      	cbnz	r3, 8002c7c <__swsetup_r+0x14>
 8002c78:	f7ff feae 	bl	80029d8 <__sinit>
 8002c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c80:	0719      	lsls	r1, r3, #28
 8002c82:	d422      	bmi.n	8002cca <__swsetup_r+0x62>
 8002c84:	06da      	lsls	r2, r3, #27
 8002c86:	d407      	bmi.n	8002c98 <__swsetup_r+0x30>
 8002c88:	2209      	movs	r2, #9
 8002c8a:	602a      	str	r2, [r5, #0]
 8002c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c90:	81a3      	strh	r3, [r4, #12]
 8002c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c96:	e033      	b.n	8002d00 <__swsetup_r+0x98>
 8002c98:	0758      	lsls	r0, r3, #29
 8002c9a:	d512      	bpl.n	8002cc2 <__swsetup_r+0x5a>
 8002c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c9e:	b141      	cbz	r1, 8002cb2 <__swsetup_r+0x4a>
 8002ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ca4:	4299      	cmp	r1, r3
 8002ca6:	d002      	beq.n	8002cae <__swsetup_r+0x46>
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 f8c3 	bl	8002e34 <_free_r>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002cb8:	81a3      	strh	r3, [r4, #12]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6063      	str	r3, [r4, #4]
 8002cbe:	6923      	ldr	r3, [r4, #16]
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	89a3      	ldrh	r3, [r4, #12]
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	81a3      	strh	r3, [r4, #12]
 8002cca:	6923      	ldr	r3, [r4, #16]
 8002ccc:	b94b      	cbnz	r3, 8002ce2 <__swsetup_r+0x7a>
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd8:	d003      	beq.n	8002ce2 <__swsetup_r+0x7a>
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f000 fe9b 	bl	8003a18 <__smakebuf_r>
 8002ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce6:	f013 0201 	ands.w	r2, r3, #1
 8002cea:	d00a      	beq.n	8002d02 <__swsetup_r+0x9a>
 8002cec:	2200      	movs	r2, #0
 8002cee:	60a2      	str	r2, [r4, #8]
 8002cf0:	6962      	ldr	r2, [r4, #20]
 8002cf2:	4252      	negs	r2, r2
 8002cf4:	61a2      	str	r2, [r4, #24]
 8002cf6:	6922      	ldr	r2, [r4, #16]
 8002cf8:	b942      	cbnz	r2, 8002d0c <__swsetup_r+0xa4>
 8002cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002cfe:	d1c5      	bne.n	8002c8c <__swsetup_r+0x24>
 8002d00:	bd38      	pop	{r3, r4, r5, pc}
 8002d02:	0799      	lsls	r1, r3, #30
 8002d04:	bf58      	it	pl
 8002d06:	6962      	ldrpl	r2, [r4, #20]
 8002d08:	60a2      	str	r2, [r4, #8]
 8002d0a:	e7f4      	b.n	8002cf6 <__swsetup_r+0x8e>
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e7f7      	b.n	8002d00 <__swsetup_r+0x98>
 8002d10:	20000018 	.word	0x20000018

08002d14 <memset>:
 8002d14:	4402      	add	r2, r0
 8002d16:	4603      	mov	r3, r0
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <memset+0xa>
 8002d1c:	4770      	bx	lr
 8002d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d22:	e7f9      	b.n	8002d18 <memset+0x4>

08002d24 <strncat>:
 8002d24:	b530      	push	{r4, r5, lr}
 8002d26:	4604      	mov	r4, r0
 8002d28:	7825      	ldrb	r5, [r4, #0]
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	3401      	adds	r4, #1
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	d1fa      	bne.n	8002d28 <strncat+0x4>
 8002d32:	3a01      	subs	r2, #1
 8002d34:	d304      	bcc.n	8002d40 <strncat+0x1c>
 8002d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d3a:	f803 4b01 	strb.w	r4, [r3], #1
 8002d3e:	b904      	cbnz	r4, 8002d42 <strncat+0x1e>
 8002d40:	bd30      	pop	{r4, r5, pc}
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d1f5      	bne.n	8002d32 <strncat+0xe>
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e7f3      	b.n	8002d32 <strncat+0xe>
	...

08002d4c <_close_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d06      	ldr	r5, [pc, #24]	@ (8002d68 <_close_r+0x1c>)
 8002d50:	2300      	movs	r3, #0
 8002d52:	4604      	mov	r4, r0
 8002d54:	4608      	mov	r0, r1
 8002d56:	602b      	str	r3, [r5, #0]
 8002d58:	f7fd ff54 	bl	8000c04 <_close>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d102      	bne.n	8002d66 <_close_r+0x1a>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	b103      	cbz	r3, 8002d66 <_close_r+0x1a>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	20000414 	.word	0x20000414

08002d6c <_lseek_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	4d07      	ldr	r5, [pc, #28]	@ (8002d8c <_lseek_r+0x20>)
 8002d70:	4604      	mov	r4, r0
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	2200      	movs	r2, #0
 8002d78:	602a      	str	r2, [r5, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f7fd ff4c 	bl	8000c18 <_lseek>
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	d102      	bne.n	8002d8a <_lseek_r+0x1e>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	b103      	cbz	r3, 8002d8a <_lseek_r+0x1e>
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000414 	.word	0x20000414

08002d90 <_read_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	4d07      	ldr	r5, [pc, #28]	@ (8002db0 <_read_r+0x20>)
 8002d94:	4604      	mov	r4, r0
 8002d96:	4608      	mov	r0, r1
 8002d98:	4611      	mov	r1, r2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	602a      	str	r2, [r5, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f7fd ff20 	bl	8000be4 <_read>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_read_r+0x1e>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_read_r+0x1e>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	20000414 	.word	0x20000414

08002db4 <_write_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4d07      	ldr	r5, [pc, #28]	@ (8002dd4 <_write_r+0x20>)
 8002db8:	4604      	mov	r4, r0
 8002dba:	4608      	mov	r0, r1
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	602a      	str	r2, [r5, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7fd fc3e 	bl	8000644 <_write>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d102      	bne.n	8002dd2 <_write_r+0x1e>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b103      	cbz	r3, 8002dd2 <_write_r+0x1e>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	20000414 	.word	0x20000414

08002dd8 <__errno>:
 8002dd8:	4b01      	ldr	r3, [pc, #4]	@ (8002de0 <__errno+0x8>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000018 	.word	0x20000018

08002de4 <__libc_init_array>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	4d0d      	ldr	r5, [pc, #52]	@ (8002e1c <__libc_init_array+0x38>)
 8002de8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e20 <__libc_init_array+0x3c>)
 8002dea:	1b64      	subs	r4, r4, r5
 8002dec:	10a4      	asrs	r4, r4, #2
 8002dee:	2600      	movs	r6, #0
 8002df0:	42a6      	cmp	r6, r4
 8002df2:	d109      	bne.n	8002e08 <__libc_init_array+0x24>
 8002df4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e24 <__libc_init_array+0x40>)
 8002df6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e28 <__libc_init_array+0x44>)
 8002df8:	f000 feda 	bl	8003bb0 <_init>
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	2600      	movs	r6, #0
 8002e02:	42a6      	cmp	r6, r4
 8002e04:	d105      	bne.n	8002e12 <__libc_init_array+0x2e>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0c:	4798      	blx	r3
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7ee      	b.n	8002df0 <__libc_init_array+0xc>
 8002e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e16:	4798      	blx	r3
 8002e18:	3601      	adds	r6, #1
 8002e1a:	e7f2      	b.n	8002e02 <__libc_init_array+0x1e>
 8002e1c:	08003cc0 	.word	0x08003cc0
 8002e20:	08003cc0 	.word	0x08003cc0
 8002e24:	08003cc0 	.word	0x08003cc0
 8002e28:	08003cc4 	.word	0x08003cc4

08002e2c <__retarget_lock_init_recursive>:
 8002e2c:	4770      	bx	lr

08002e2e <__retarget_lock_acquire_recursive>:
 8002e2e:	4770      	bx	lr

08002e30 <__retarget_lock_release_recursive>:
 8002e30:	4770      	bx	lr
	...

08002e34 <_free_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	4605      	mov	r5, r0
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	d041      	beq.n	8002ec0 <_free_r+0x8c>
 8002e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e40:	1f0c      	subs	r4, r1, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bfb8      	it	lt
 8002e46:	18e4      	addlt	r4, r4, r3
 8002e48:	f000 f8e0 	bl	800300c <__malloc_lock>
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <_free_r+0x90>)
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	b933      	cbnz	r3, 8002e60 <_free_r+0x2c>
 8002e52:	6063      	str	r3, [r4, #4]
 8002e54:	6014      	str	r4, [r2, #0]
 8002e56:	4628      	mov	r0, r5
 8002e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e5c:	f000 b8dc 	b.w	8003018 <__malloc_unlock>
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	d908      	bls.n	8002e76 <_free_r+0x42>
 8002e64:	6820      	ldr	r0, [r4, #0]
 8002e66:	1821      	adds	r1, r4, r0
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	bf01      	itttt	eq
 8002e6c:	6819      	ldreq	r1, [r3, #0]
 8002e6e:	685b      	ldreq	r3, [r3, #4]
 8002e70:	1809      	addeq	r1, r1, r0
 8002e72:	6021      	streq	r1, [r4, #0]
 8002e74:	e7ed      	b.n	8002e52 <_free_r+0x1e>
 8002e76:	461a      	mov	r2, r3
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b10b      	cbz	r3, 8002e80 <_free_r+0x4c>
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	d9fa      	bls.n	8002e76 <_free_r+0x42>
 8002e80:	6811      	ldr	r1, [r2, #0]
 8002e82:	1850      	adds	r0, r2, r1
 8002e84:	42a0      	cmp	r0, r4
 8002e86:	d10b      	bne.n	8002ea0 <_free_r+0x6c>
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	4401      	add	r1, r0
 8002e8c:	1850      	adds	r0, r2, r1
 8002e8e:	4283      	cmp	r3, r0
 8002e90:	6011      	str	r1, [r2, #0]
 8002e92:	d1e0      	bne.n	8002e56 <_free_r+0x22>
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	6053      	str	r3, [r2, #4]
 8002e9a:	4408      	add	r0, r1
 8002e9c:	6010      	str	r0, [r2, #0]
 8002e9e:	e7da      	b.n	8002e56 <_free_r+0x22>
 8002ea0:	d902      	bls.n	8002ea8 <_free_r+0x74>
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	e7d6      	b.n	8002e56 <_free_r+0x22>
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	1821      	adds	r1, r4, r0
 8002eac:	428b      	cmp	r3, r1
 8002eae:	bf04      	itt	eq
 8002eb0:	6819      	ldreq	r1, [r3, #0]
 8002eb2:	685b      	ldreq	r3, [r3, #4]
 8002eb4:	6063      	str	r3, [r4, #4]
 8002eb6:	bf04      	itt	eq
 8002eb8:	1809      	addeq	r1, r1, r0
 8002eba:	6021      	streq	r1, [r4, #0]
 8002ebc:	6054      	str	r4, [r2, #4]
 8002ebe:	e7ca      	b.n	8002e56 <_free_r+0x22>
 8002ec0:	bd38      	pop	{r3, r4, r5, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000420 	.word	0x20000420

08002ec8 <sbrk_aligned>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4e0f      	ldr	r6, [pc, #60]	@ (8002f08 <sbrk_aligned+0x40>)
 8002ecc:	460c      	mov	r4, r1
 8002ece:	6831      	ldr	r1, [r6, #0]
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	b911      	cbnz	r1, 8002eda <sbrk_aligned+0x12>
 8002ed4:	f000 fe18 	bl	8003b08 <_sbrk_r>
 8002ed8:	6030      	str	r0, [r6, #0]
 8002eda:	4621      	mov	r1, r4
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 fe13 	bl	8003b08 <_sbrk_r>
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	d103      	bne.n	8002eee <sbrk_aligned+0x26>
 8002ee6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002eea:	4620      	mov	r0, r4
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	1cc4      	adds	r4, r0, #3
 8002ef0:	f024 0403 	bic.w	r4, r4, #3
 8002ef4:	42a0      	cmp	r0, r4
 8002ef6:	d0f8      	beq.n	8002eea <sbrk_aligned+0x22>
 8002ef8:	1a21      	subs	r1, r4, r0
 8002efa:	4628      	mov	r0, r5
 8002efc:	f000 fe04 	bl	8003b08 <_sbrk_r>
 8002f00:	3001      	adds	r0, #1
 8002f02:	d1f2      	bne.n	8002eea <sbrk_aligned+0x22>
 8002f04:	e7ef      	b.n	8002ee6 <sbrk_aligned+0x1e>
 8002f06:	bf00      	nop
 8002f08:	2000041c 	.word	0x2000041c

08002f0c <_malloc_r>:
 8002f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f10:	1ccd      	adds	r5, r1, #3
 8002f12:	f025 0503 	bic.w	r5, r5, #3
 8002f16:	3508      	adds	r5, #8
 8002f18:	2d0c      	cmp	r5, #12
 8002f1a:	bf38      	it	cc
 8002f1c:	250c      	movcc	r5, #12
 8002f1e:	2d00      	cmp	r5, #0
 8002f20:	4606      	mov	r6, r0
 8002f22:	db01      	blt.n	8002f28 <_malloc_r+0x1c>
 8002f24:	42a9      	cmp	r1, r5
 8002f26:	d904      	bls.n	8002f32 <_malloc_r+0x26>
 8002f28:	230c      	movs	r3, #12
 8002f2a:	6033      	str	r3, [r6, #0]
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003008 <_malloc_r+0xfc>
 8002f36:	f000 f869 	bl	800300c <__malloc_lock>
 8002f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3e:	461c      	mov	r4, r3
 8002f40:	bb44      	cbnz	r4, 8002f94 <_malloc_r+0x88>
 8002f42:	4629      	mov	r1, r5
 8002f44:	4630      	mov	r0, r6
 8002f46:	f7ff ffbf 	bl	8002ec8 <sbrk_aligned>
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	d158      	bne.n	8003002 <_malloc_r+0xf6>
 8002f50:	f8d8 4000 	ldr.w	r4, [r8]
 8002f54:	4627      	mov	r7, r4
 8002f56:	2f00      	cmp	r7, #0
 8002f58:	d143      	bne.n	8002fe2 <_malloc_r+0xd6>
 8002f5a:	2c00      	cmp	r4, #0
 8002f5c:	d04b      	beq.n	8002ff6 <_malloc_r+0xea>
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	4639      	mov	r1, r7
 8002f62:	4630      	mov	r0, r6
 8002f64:	eb04 0903 	add.w	r9, r4, r3
 8002f68:	f000 fdce 	bl	8003b08 <_sbrk_r>
 8002f6c:	4581      	cmp	r9, r0
 8002f6e:	d142      	bne.n	8002ff6 <_malloc_r+0xea>
 8002f70:	6821      	ldr	r1, [r4, #0]
 8002f72:	1a6d      	subs	r5, r5, r1
 8002f74:	4629      	mov	r1, r5
 8002f76:	4630      	mov	r0, r6
 8002f78:	f7ff ffa6 	bl	8002ec8 <sbrk_aligned>
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d03a      	beq.n	8002ff6 <_malloc_r+0xea>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	442b      	add	r3, r5
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	f8d8 3000 	ldr.w	r3, [r8]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	bb62      	cbnz	r2, 8002fe8 <_malloc_r+0xdc>
 8002f8e:	f8c8 7000 	str.w	r7, [r8]
 8002f92:	e00f      	b.n	8002fb4 <_malloc_r+0xa8>
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	1b52      	subs	r2, r2, r5
 8002f98:	d420      	bmi.n	8002fdc <_malloc_r+0xd0>
 8002f9a:	2a0b      	cmp	r2, #11
 8002f9c:	d917      	bls.n	8002fce <_malloc_r+0xc2>
 8002f9e:	1961      	adds	r1, r4, r5
 8002fa0:	42a3      	cmp	r3, r4
 8002fa2:	6025      	str	r5, [r4, #0]
 8002fa4:	bf18      	it	ne
 8002fa6:	6059      	strne	r1, [r3, #4]
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	bf08      	it	eq
 8002fac:	f8c8 1000 	streq.w	r1, [r8]
 8002fb0:	5162      	str	r2, [r4, r5]
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f000 f82f 	bl	8003018 <__malloc_unlock>
 8002fba:	f104 000b 	add.w	r0, r4, #11
 8002fbe:	1d23      	adds	r3, r4, #4
 8002fc0:	f020 0007 	bic.w	r0, r0, #7
 8002fc4:	1ac2      	subs	r2, r0, r3
 8002fc6:	bf1c      	itt	ne
 8002fc8:	1a1b      	subne	r3, r3, r0
 8002fca:	50a3      	strne	r3, [r4, r2]
 8002fcc:	e7af      	b.n	8002f2e <_malloc_r+0x22>
 8002fce:	6862      	ldr	r2, [r4, #4]
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	bf0c      	ite	eq
 8002fd4:	f8c8 2000 	streq.w	r2, [r8]
 8002fd8:	605a      	strne	r2, [r3, #4]
 8002fda:	e7eb      	b.n	8002fb4 <_malloc_r+0xa8>
 8002fdc:	4623      	mov	r3, r4
 8002fde:	6864      	ldr	r4, [r4, #4]
 8002fe0:	e7ae      	b.n	8002f40 <_malloc_r+0x34>
 8002fe2:	463c      	mov	r4, r7
 8002fe4:	687f      	ldr	r7, [r7, #4]
 8002fe6:	e7b6      	b.n	8002f56 <_malloc_r+0x4a>
 8002fe8:	461a      	mov	r2, r3
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d1fb      	bne.n	8002fe8 <_malloc_r+0xdc>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6053      	str	r3, [r2, #4]
 8002ff4:	e7de      	b.n	8002fb4 <_malloc_r+0xa8>
 8002ff6:	230c      	movs	r3, #12
 8002ff8:	6033      	str	r3, [r6, #0]
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	f000 f80c 	bl	8003018 <__malloc_unlock>
 8003000:	e794      	b.n	8002f2c <_malloc_r+0x20>
 8003002:	6005      	str	r5, [r0, #0]
 8003004:	e7d6      	b.n	8002fb4 <_malloc_r+0xa8>
 8003006:	bf00      	nop
 8003008:	20000420 	.word	0x20000420

0800300c <__malloc_lock>:
 800300c:	4801      	ldr	r0, [pc, #4]	@ (8003014 <__malloc_lock+0x8>)
 800300e:	f7ff bf0e 	b.w	8002e2e <__retarget_lock_acquire_recursive>
 8003012:	bf00      	nop
 8003014:	20000418 	.word	0x20000418

08003018 <__malloc_unlock>:
 8003018:	4801      	ldr	r0, [pc, #4]	@ (8003020 <__malloc_unlock+0x8>)
 800301a:	f7ff bf09 	b.w	8002e30 <__retarget_lock_release_recursive>
 800301e:	bf00      	nop
 8003020:	20000418 	.word	0x20000418

08003024 <__ssputs_r>:
 8003024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	688e      	ldr	r6, [r1, #8]
 800302a:	461f      	mov	r7, r3
 800302c:	42be      	cmp	r6, r7
 800302e:	680b      	ldr	r3, [r1, #0]
 8003030:	4682      	mov	sl, r0
 8003032:	460c      	mov	r4, r1
 8003034:	4690      	mov	r8, r2
 8003036:	d82d      	bhi.n	8003094 <__ssputs_r+0x70>
 8003038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800303c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003040:	d026      	beq.n	8003090 <__ssputs_r+0x6c>
 8003042:	6965      	ldr	r5, [r4, #20]
 8003044:	6909      	ldr	r1, [r1, #16]
 8003046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800304a:	eba3 0901 	sub.w	r9, r3, r1
 800304e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003052:	1c7b      	adds	r3, r7, #1
 8003054:	444b      	add	r3, r9
 8003056:	106d      	asrs	r5, r5, #1
 8003058:	429d      	cmp	r5, r3
 800305a:	bf38      	it	cc
 800305c:	461d      	movcc	r5, r3
 800305e:	0553      	lsls	r3, r2, #21
 8003060:	d527      	bpl.n	80030b2 <__ssputs_r+0x8e>
 8003062:	4629      	mov	r1, r5
 8003064:	f7ff ff52 	bl	8002f0c <_malloc_r>
 8003068:	4606      	mov	r6, r0
 800306a:	b360      	cbz	r0, 80030c6 <__ssputs_r+0xa2>
 800306c:	6921      	ldr	r1, [r4, #16]
 800306e:	464a      	mov	r2, r9
 8003070:	f000 fd5a 	bl	8003b28 <memcpy>
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800307a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800307e:	81a3      	strh	r3, [r4, #12]
 8003080:	6126      	str	r6, [r4, #16]
 8003082:	6165      	str	r5, [r4, #20]
 8003084:	444e      	add	r6, r9
 8003086:	eba5 0509 	sub.w	r5, r5, r9
 800308a:	6026      	str	r6, [r4, #0]
 800308c:	60a5      	str	r5, [r4, #8]
 800308e:	463e      	mov	r6, r7
 8003090:	42be      	cmp	r6, r7
 8003092:	d900      	bls.n	8003096 <__ssputs_r+0x72>
 8003094:	463e      	mov	r6, r7
 8003096:	6820      	ldr	r0, [r4, #0]
 8003098:	4632      	mov	r2, r6
 800309a:	4641      	mov	r1, r8
 800309c:	f000 fcf8 	bl	8003a90 <memmove>
 80030a0:	68a3      	ldr	r3, [r4, #8]
 80030a2:	1b9b      	subs	r3, r3, r6
 80030a4:	60a3      	str	r3, [r4, #8]
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	4433      	add	r3, r6
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	2000      	movs	r0, #0
 80030ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b2:	462a      	mov	r2, r5
 80030b4:	f000 fd46 	bl	8003b44 <_realloc_r>
 80030b8:	4606      	mov	r6, r0
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d1e0      	bne.n	8003080 <__ssputs_r+0x5c>
 80030be:	6921      	ldr	r1, [r4, #16]
 80030c0:	4650      	mov	r0, sl
 80030c2:	f7ff feb7 	bl	8002e34 <_free_r>
 80030c6:	230c      	movs	r3, #12
 80030c8:	f8ca 3000 	str.w	r3, [sl]
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030d8:	e7e9      	b.n	80030ae <__ssputs_r+0x8a>
	...

080030dc <_svfiprintf_r>:
 80030dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e0:	4698      	mov	r8, r3
 80030e2:	898b      	ldrh	r3, [r1, #12]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	b09d      	sub	sp, #116	@ 0x74
 80030e8:	4607      	mov	r7, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	4614      	mov	r4, r2
 80030ee:	d510      	bpl.n	8003112 <_svfiprintf_r+0x36>
 80030f0:	690b      	ldr	r3, [r1, #16]
 80030f2:	b973      	cbnz	r3, 8003112 <_svfiprintf_r+0x36>
 80030f4:	2140      	movs	r1, #64	@ 0x40
 80030f6:	f7ff ff09 	bl	8002f0c <_malloc_r>
 80030fa:	6028      	str	r0, [r5, #0]
 80030fc:	6128      	str	r0, [r5, #16]
 80030fe:	b930      	cbnz	r0, 800310e <_svfiprintf_r+0x32>
 8003100:	230c      	movs	r3, #12
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003108:	b01d      	add	sp, #116	@ 0x74
 800310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310e:	2340      	movs	r3, #64	@ 0x40
 8003110:	616b      	str	r3, [r5, #20]
 8003112:	2300      	movs	r3, #0
 8003114:	9309      	str	r3, [sp, #36]	@ 0x24
 8003116:	2320      	movs	r3, #32
 8003118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800311c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003120:	2330      	movs	r3, #48	@ 0x30
 8003122:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80032c0 <_svfiprintf_r+0x1e4>
 8003126:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800312a:	f04f 0901 	mov.w	r9, #1
 800312e:	4623      	mov	r3, r4
 8003130:	469a      	mov	sl, r3
 8003132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003136:	b10a      	cbz	r2, 800313c <_svfiprintf_r+0x60>
 8003138:	2a25      	cmp	r2, #37	@ 0x25
 800313a:	d1f9      	bne.n	8003130 <_svfiprintf_r+0x54>
 800313c:	ebba 0b04 	subs.w	fp, sl, r4
 8003140:	d00b      	beq.n	800315a <_svfiprintf_r+0x7e>
 8003142:	465b      	mov	r3, fp
 8003144:	4622      	mov	r2, r4
 8003146:	4629      	mov	r1, r5
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ff6b 	bl	8003024 <__ssputs_r>
 800314e:	3001      	adds	r0, #1
 8003150:	f000 80a7 	beq.w	80032a2 <_svfiprintf_r+0x1c6>
 8003154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003156:	445a      	add	r2, fp
 8003158:	9209      	str	r2, [sp, #36]	@ 0x24
 800315a:	f89a 3000 	ldrb.w	r3, [sl]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 809f 	beq.w	80032a2 <_svfiprintf_r+0x1c6>
 8003164:	2300      	movs	r3, #0
 8003166:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800316a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800316e:	f10a 0a01 	add.w	sl, sl, #1
 8003172:	9304      	str	r3, [sp, #16]
 8003174:	9307      	str	r3, [sp, #28]
 8003176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800317a:	931a      	str	r3, [sp, #104]	@ 0x68
 800317c:	4654      	mov	r4, sl
 800317e:	2205      	movs	r2, #5
 8003180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003184:	484e      	ldr	r0, [pc, #312]	@ (80032c0 <_svfiprintf_r+0x1e4>)
 8003186:	f7fd f82b 	bl	80001e0 <memchr>
 800318a:	9a04      	ldr	r2, [sp, #16]
 800318c:	b9d8      	cbnz	r0, 80031c6 <_svfiprintf_r+0xea>
 800318e:	06d0      	lsls	r0, r2, #27
 8003190:	bf44      	itt	mi
 8003192:	2320      	movmi	r3, #32
 8003194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003198:	0711      	lsls	r1, r2, #28
 800319a:	bf44      	itt	mi
 800319c:	232b      	movmi	r3, #43	@ 0x2b
 800319e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031a2:	f89a 3000 	ldrb.w	r3, [sl]
 80031a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80031a8:	d015      	beq.n	80031d6 <_svfiprintf_r+0xfa>
 80031aa:	9a07      	ldr	r2, [sp, #28]
 80031ac:	4654      	mov	r4, sl
 80031ae:	2000      	movs	r0, #0
 80031b0:	f04f 0c0a 	mov.w	ip, #10
 80031b4:	4621      	mov	r1, r4
 80031b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ba:	3b30      	subs	r3, #48	@ 0x30
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d94b      	bls.n	8003258 <_svfiprintf_r+0x17c>
 80031c0:	b1b0      	cbz	r0, 80031f0 <_svfiprintf_r+0x114>
 80031c2:	9207      	str	r2, [sp, #28]
 80031c4:	e014      	b.n	80031f0 <_svfiprintf_r+0x114>
 80031c6:	eba0 0308 	sub.w	r3, r0, r8
 80031ca:	fa09 f303 	lsl.w	r3, r9, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	9304      	str	r3, [sp, #16]
 80031d2:	46a2      	mov	sl, r4
 80031d4:	e7d2      	b.n	800317c <_svfiprintf_r+0xa0>
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	1d19      	adds	r1, r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	9103      	str	r1, [sp, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bfbb      	ittet	lt
 80031e2:	425b      	neglt	r3, r3
 80031e4:	f042 0202 	orrlt.w	r2, r2, #2
 80031e8:	9307      	strge	r3, [sp, #28]
 80031ea:	9307      	strlt	r3, [sp, #28]
 80031ec:	bfb8      	it	lt
 80031ee:	9204      	strlt	r2, [sp, #16]
 80031f0:	7823      	ldrb	r3, [r4, #0]
 80031f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80031f4:	d10a      	bne.n	800320c <_svfiprintf_r+0x130>
 80031f6:	7863      	ldrb	r3, [r4, #1]
 80031f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031fa:	d132      	bne.n	8003262 <_svfiprintf_r+0x186>
 80031fc:	9b03      	ldr	r3, [sp, #12]
 80031fe:	1d1a      	adds	r2, r3, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	9203      	str	r2, [sp, #12]
 8003204:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003208:	3402      	adds	r4, #2
 800320a:	9305      	str	r3, [sp, #20]
 800320c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80032d0 <_svfiprintf_r+0x1f4>
 8003210:	7821      	ldrb	r1, [r4, #0]
 8003212:	2203      	movs	r2, #3
 8003214:	4650      	mov	r0, sl
 8003216:	f7fc ffe3 	bl	80001e0 <memchr>
 800321a:	b138      	cbz	r0, 800322c <_svfiprintf_r+0x150>
 800321c:	9b04      	ldr	r3, [sp, #16]
 800321e:	eba0 000a 	sub.w	r0, r0, sl
 8003222:	2240      	movs	r2, #64	@ 0x40
 8003224:	4082      	lsls	r2, r0
 8003226:	4313      	orrs	r3, r2
 8003228:	3401      	adds	r4, #1
 800322a:	9304      	str	r3, [sp, #16]
 800322c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003230:	4824      	ldr	r0, [pc, #144]	@ (80032c4 <_svfiprintf_r+0x1e8>)
 8003232:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003236:	2206      	movs	r2, #6
 8003238:	f7fc ffd2 	bl	80001e0 <memchr>
 800323c:	2800      	cmp	r0, #0
 800323e:	d036      	beq.n	80032ae <_svfiprintf_r+0x1d2>
 8003240:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <_svfiprintf_r+0x1ec>)
 8003242:	bb1b      	cbnz	r3, 800328c <_svfiprintf_r+0x1b0>
 8003244:	9b03      	ldr	r3, [sp, #12]
 8003246:	3307      	adds	r3, #7
 8003248:	f023 0307 	bic.w	r3, r3, #7
 800324c:	3308      	adds	r3, #8
 800324e:	9303      	str	r3, [sp, #12]
 8003250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003252:	4433      	add	r3, r6
 8003254:	9309      	str	r3, [sp, #36]	@ 0x24
 8003256:	e76a      	b.n	800312e <_svfiprintf_r+0x52>
 8003258:	fb0c 3202 	mla	r2, ip, r2, r3
 800325c:	460c      	mov	r4, r1
 800325e:	2001      	movs	r0, #1
 8003260:	e7a8      	b.n	80031b4 <_svfiprintf_r+0xd8>
 8003262:	2300      	movs	r3, #0
 8003264:	3401      	adds	r4, #1
 8003266:	9305      	str	r3, [sp, #20]
 8003268:	4619      	mov	r1, r3
 800326a:	f04f 0c0a 	mov.w	ip, #10
 800326e:	4620      	mov	r0, r4
 8003270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003274:	3a30      	subs	r2, #48	@ 0x30
 8003276:	2a09      	cmp	r2, #9
 8003278:	d903      	bls.n	8003282 <_svfiprintf_r+0x1a6>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0c6      	beq.n	800320c <_svfiprintf_r+0x130>
 800327e:	9105      	str	r1, [sp, #20]
 8003280:	e7c4      	b.n	800320c <_svfiprintf_r+0x130>
 8003282:	fb0c 2101 	mla	r1, ip, r1, r2
 8003286:	4604      	mov	r4, r0
 8003288:	2301      	movs	r3, #1
 800328a:	e7f0      	b.n	800326e <_svfiprintf_r+0x192>
 800328c:	ab03      	add	r3, sp, #12
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	462a      	mov	r2, r5
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <_svfiprintf_r+0x1f0>)
 8003294:	a904      	add	r1, sp, #16
 8003296:	4638      	mov	r0, r7
 8003298:	f3af 8000 	nop.w
 800329c:	1c42      	adds	r2, r0, #1
 800329e:	4606      	mov	r6, r0
 80032a0:	d1d6      	bne.n	8003250 <_svfiprintf_r+0x174>
 80032a2:	89ab      	ldrh	r3, [r5, #12]
 80032a4:	065b      	lsls	r3, r3, #25
 80032a6:	f53f af2d 	bmi.w	8003104 <_svfiprintf_r+0x28>
 80032aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032ac:	e72c      	b.n	8003108 <_svfiprintf_r+0x2c>
 80032ae:	ab03      	add	r3, sp, #12
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	462a      	mov	r2, r5
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <_svfiprintf_r+0x1f0>)
 80032b6:	a904      	add	r1, sp, #16
 80032b8:	4638      	mov	r0, r7
 80032ba:	f000 f9bb 	bl	8003634 <_printf_i>
 80032be:	e7ed      	b.n	800329c <_svfiprintf_r+0x1c0>
 80032c0:	08003c84 	.word	0x08003c84
 80032c4:	08003c8e 	.word	0x08003c8e
 80032c8:	00000000 	.word	0x00000000
 80032cc:	08003025 	.word	0x08003025
 80032d0:	08003c8a 	.word	0x08003c8a

080032d4 <__sfputc_r>:
 80032d4:	6893      	ldr	r3, [r2, #8]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	b410      	push	{r4}
 80032dc:	6093      	str	r3, [r2, #8]
 80032de:	da08      	bge.n	80032f2 <__sfputc_r+0x1e>
 80032e0:	6994      	ldr	r4, [r2, #24]
 80032e2:	42a3      	cmp	r3, r4
 80032e4:	db01      	blt.n	80032ea <__sfputc_r+0x16>
 80032e6:	290a      	cmp	r1, #10
 80032e8:	d103      	bne.n	80032f2 <__sfputc_r+0x1e>
 80032ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ee:	f7ff bc7c 	b.w	8002bea <__swbuf_r>
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	1c58      	adds	r0, r3, #1
 80032f6:	6010      	str	r0, [r2, #0]
 80032f8:	7019      	strb	r1, [r3, #0]
 80032fa:	4608      	mov	r0, r1
 80032fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003300:	4770      	bx	lr

08003302 <__sfputs_r>:
 8003302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003304:	4606      	mov	r6, r0
 8003306:	460f      	mov	r7, r1
 8003308:	4614      	mov	r4, r2
 800330a:	18d5      	adds	r5, r2, r3
 800330c:	42ac      	cmp	r4, r5
 800330e:	d101      	bne.n	8003314 <__sfputs_r+0x12>
 8003310:	2000      	movs	r0, #0
 8003312:	e007      	b.n	8003324 <__sfputs_r+0x22>
 8003314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003318:	463a      	mov	r2, r7
 800331a:	4630      	mov	r0, r6
 800331c:	f7ff ffda 	bl	80032d4 <__sfputc_r>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d1f3      	bne.n	800330c <__sfputs_r+0xa>
 8003324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003328 <_vfiprintf_r>:
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	460d      	mov	r5, r1
 800332e:	b09d      	sub	sp, #116	@ 0x74
 8003330:	4614      	mov	r4, r2
 8003332:	4698      	mov	r8, r3
 8003334:	4606      	mov	r6, r0
 8003336:	b118      	cbz	r0, 8003340 <_vfiprintf_r+0x18>
 8003338:	6a03      	ldr	r3, [r0, #32]
 800333a:	b90b      	cbnz	r3, 8003340 <_vfiprintf_r+0x18>
 800333c:	f7ff fb4c 	bl	80029d8 <__sinit>
 8003340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003342:	07d9      	lsls	r1, r3, #31
 8003344:	d405      	bmi.n	8003352 <_vfiprintf_r+0x2a>
 8003346:	89ab      	ldrh	r3, [r5, #12]
 8003348:	059a      	lsls	r2, r3, #22
 800334a:	d402      	bmi.n	8003352 <_vfiprintf_r+0x2a>
 800334c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800334e:	f7ff fd6e 	bl	8002e2e <__retarget_lock_acquire_recursive>
 8003352:	89ab      	ldrh	r3, [r5, #12]
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	d501      	bpl.n	800335c <_vfiprintf_r+0x34>
 8003358:	692b      	ldr	r3, [r5, #16]
 800335a:	b99b      	cbnz	r3, 8003384 <_vfiprintf_r+0x5c>
 800335c:	4629      	mov	r1, r5
 800335e:	4630      	mov	r0, r6
 8003360:	f7ff fc82 	bl	8002c68 <__swsetup_r>
 8003364:	b170      	cbz	r0, 8003384 <_vfiprintf_r+0x5c>
 8003366:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003368:	07dc      	lsls	r4, r3, #31
 800336a:	d504      	bpl.n	8003376 <_vfiprintf_r+0x4e>
 800336c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003370:	b01d      	add	sp, #116	@ 0x74
 8003372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003376:	89ab      	ldrh	r3, [r5, #12]
 8003378:	0598      	lsls	r0, r3, #22
 800337a:	d4f7      	bmi.n	800336c <_vfiprintf_r+0x44>
 800337c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800337e:	f7ff fd57 	bl	8002e30 <__retarget_lock_release_recursive>
 8003382:	e7f3      	b.n	800336c <_vfiprintf_r+0x44>
 8003384:	2300      	movs	r3, #0
 8003386:	9309      	str	r3, [sp, #36]	@ 0x24
 8003388:	2320      	movs	r3, #32
 800338a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800338e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003392:	2330      	movs	r3, #48	@ 0x30
 8003394:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003544 <_vfiprintf_r+0x21c>
 8003398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800339c:	f04f 0901 	mov.w	r9, #1
 80033a0:	4623      	mov	r3, r4
 80033a2:	469a      	mov	sl, r3
 80033a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033a8:	b10a      	cbz	r2, 80033ae <_vfiprintf_r+0x86>
 80033aa:	2a25      	cmp	r2, #37	@ 0x25
 80033ac:	d1f9      	bne.n	80033a2 <_vfiprintf_r+0x7a>
 80033ae:	ebba 0b04 	subs.w	fp, sl, r4
 80033b2:	d00b      	beq.n	80033cc <_vfiprintf_r+0xa4>
 80033b4:	465b      	mov	r3, fp
 80033b6:	4622      	mov	r2, r4
 80033b8:	4629      	mov	r1, r5
 80033ba:	4630      	mov	r0, r6
 80033bc:	f7ff ffa1 	bl	8003302 <__sfputs_r>
 80033c0:	3001      	adds	r0, #1
 80033c2:	f000 80a7 	beq.w	8003514 <_vfiprintf_r+0x1ec>
 80033c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033c8:	445a      	add	r2, fp
 80033ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80033cc:	f89a 3000 	ldrb.w	r3, [sl]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 809f 	beq.w	8003514 <_vfiprintf_r+0x1ec>
 80033d6:	2300      	movs	r3, #0
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e0:	f10a 0a01 	add.w	sl, sl, #1
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	9307      	str	r3, [sp, #28]
 80033e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80033ee:	4654      	mov	r4, sl
 80033f0:	2205      	movs	r2, #5
 80033f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f6:	4853      	ldr	r0, [pc, #332]	@ (8003544 <_vfiprintf_r+0x21c>)
 80033f8:	f7fc fef2 	bl	80001e0 <memchr>
 80033fc:	9a04      	ldr	r2, [sp, #16]
 80033fe:	b9d8      	cbnz	r0, 8003438 <_vfiprintf_r+0x110>
 8003400:	06d1      	lsls	r1, r2, #27
 8003402:	bf44      	itt	mi
 8003404:	2320      	movmi	r3, #32
 8003406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800340a:	0713      	lsls	r3, r2, #28
 800340c:	bf44      	itt	mi
 800340e:	232b      	movmi	r3, #43	@ 0x2b
 8003410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003414:	f89a 3000 	ldrb.w	r3, [sl]
 8003418:	2b2a      	cmp	r3, #42	@ 0x2a
 800341a:	d015      	beq.n	8003448 <_vfiprintf_r+0x120>
 800341c:	9a07      	ldr	r2, [sp, #28]
 800341e:	4654      	mov	r4, sl
 8003420:	2000      	movs	r0, #0
 8003422:	f04f 0c0a 	mov.w	ip, #10
 8003426:	4621      	mov	r1, r4
 8003428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800342c:	3b30      	subs	r3, #48	@ 0x30
 800342e:	2b09      	cmp	r3, #9
 8003430:	d94b      	bls.n	80034ca <_vfiprintf_r+0x1a2>
 8003432:	b1b0      	cbz	r0, 8003462 <_vfiprintf_r+0x13a>
 8003434:	9207      	str	r2, [sp, #28]
 8003436:	e014      	b.n	8003462 <_vfiprintf_r+0x13a>
 8003438:	eba0 0308 	sub.w	r3, r0, r8
 800343c:	fa09 f303 	lsl.w	r3, r9, r3
 8003440:	4313      	orrs	r3, r2
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	46a2      	mov	sl, r4
 8003446:	e7d2      	b.n	80033ee <_vfiprintf_r+0xc6>
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	1d19      	adds	r1, r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	9103      	str	r1, [sp, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	bfbb      	ittet	lt
 8003454:	425b      	neglt	r3, r3
 8003456:	f042 0202 	orrlt.w	r2, r2, #2
 800345a:	9307      	strge	r3, [sp, #28]
 800345c:	9307      	strlt	r3, [sp, #28]
 800345e:	bfb8      	it	lt
 8003460:	9204      	strlt	r2, [sp, #16]
 8003462:	7823      	ldrb	r3, [r4, #0]
 8003464:	2b2e      	cmp	r3, #46	@ 0x2e
 8003466:	d10a      	bne.n	800347e <_vfiprintf_r+0x156>
 8003468:	7863      	ldrb	r3, [r4, #1]
 800346a:	2b2a      	cmp	r3, #42	@ 0x2a
 800346c:	d132      	bne.n	80034d4 <_vfiprintf_r+0x1ac>
 800346e:	9b03      	ldr	r3, [sp, #12]
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	9203      	str	r2, [sp, #12]
 8003476:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800347a:	3402      	adds	r4, #2
 800347c:	9305      	str	r3, [sp, #20]
 800347e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003554 <_vfiprintf_r+0x22c>
 8003482:	7821      	ldrb	r1, [r4, #0]
 8003484:	2203      	movs	r2, #3
 8003486:	4650      	mov	r0, sl
 8003488:	f7fc feaa 	bl	80001e0 <memchr>
 800348c:	b138      	cbz	r0, 800349e <_vfiprintf_r+0x176>
 800348e:	9b04      	ldr	r3, [sp, #16]
 8003490:	eba0 000a 	sub.w	r0, r0, sl
 8003494:	2240      	movs	r2, #64	@ 0x40
 8003496:	4082      	lsls	r2, r0
 8003498:	4313      	orrs	r3, r2
 800349a:	3401      	adds	r4, #1
 800349c:	9304      	str	r3, [sp, #16]
 800349e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a2:	4829      	ldr	r0, [pc, #164]	@ (8003548 <_vfiprintf_r+0x220>)
 80034a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034a8:	2206      	movs	r2, #6
 80034aa:	f7fc fe99 	bl	80001e0 <memchr>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d03f      	beq.n	8003532 <_vfiprintf_r+0x20a>
 80034b2:	4b26      	ldr	r3, [pc, #152]	@ (800354c <_vfiprintf_r+0x224>)
 80034b4:	bb1b      	cbnz	r3, 80034fe <_vfiprintf_r+0x1d6>
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	3307      	adds	r3, #7
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	3308      	adds	r3, #8
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034c4:	443b      	add	r3, r7
 80034c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80034c8:	e76a      	b.n	80033a0 <_vfiprintf_r+0x78>
 80034ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ce:	460c      	mov	r4, r1
 80034d0:	2001      	movs	r0, #1
 80034d2:	e7a8      	b.n	8003426 <_vfiprintf_r+0xfe>
 80034d4:	2300      	movs	r3, #0
 80034d6:	3401      	adds	r4, #1
 80034d8:	9305      	str	r3, [sp, #20]
 80034da:	4619      	mov	r1, r3
 80034dc:	f04f 0c0a 	mov.w	ip, #10
 80034e0:	4620      	mov	r0, r4
 80034e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e6:	3a30      	subs	r2, #48	@ 0x30
 80034e8:	2a09      	cmp	r2, #9
 80034ea:	d903      	bls.n	80034f4 <_vfiprintf_r+0x1cc>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0c6      	beq.n	800347e <_vfiprintf_r+0x156>
 80034f0:	9105      	str	r1, [sp, #20]
 80034f2:	e7c4      	b.n	800347e <_vfiprintf_r+0x156>
 80034f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80034f8:	4604      	mov	r4, r0
 80034fa:	2301      	movs	r3, #1
 80034fc:	e7f0      	b.n	80034e0 <_vfiprintf_r+0x1b8>
 80034fe:	ab03      	add	r3, sp, #12
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	462a      	mov	r2, r5
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <_vfiprintf_r+0x228>)
 8003506:	a904      	add	r1, sp, #16
 8003508:	4630      	mov	r0, r6
 800350a:	f3af 8000 	nop.w
 800350e:	4607      	mov	r7, r0
 8003510:	1c78      	adds	r0, r7, #1
 8003512:	d1d6      	bne.n	80034c2 <_vfiprintf_r+0x19a>
 8003514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003516:	07d9      	lsls	r1, r3, #31
 8003518:	d405      	bmi.n	8003526 <_vfiprintf_r+0x1fe>
 800351a:	89ab      	ldrh	r3, [r5, #12]
 800351c:	059a      	lsls	r2, r3, #22
 800351e:	d402      	bmi.n	8003526 <_vfiprintf_r+0x1fe>
 8003520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003522:	f7ff fc85 	bl	8002e30 <__retarget_lock_release_recursive>
 8003526:	89ab      	ldrh	r3, [r5, #12]
 8003528:	065b      	lsls	r3, r3, #25
 800352a:	f53f af1f 	bmi.w	800336c <_vfiprintf_r+0x44>
 800352e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003530:	e71e      	b.n	8003370 <_vfiprintf_r+0x48>
 8003532:	ab03      	add	r3, sp, #12
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	462a      	mov	r2, r5
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <_vfiprintf_r+0x228>)
 800353a:	a904      	add	r1, sp, #16
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f879 	bl	8003634 <_printf_i>
 8003542:	e7e4      	b.n	800350e <_vfiprintf_r+0x1e6>
 8003544:	08003c84 	.word	0x08003c84
 8003548:	08003c8e 	.word	0x08003c8e
 800354c:	00000000 	.word	0x00000000
 8003550:	08003303 	.word	0x08003303
 8003554:	08003c8a 	.word	0x08003c8a

08003558 <_printf_common>:
 8003558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	4616      	mov	r6, r2
 800355e:	4698      	mov	r8, r3
 8003560:	688a      	ldr	r2, [r1, #8]
 8003562:	690b      	ldr	r3, [r1, #16]
 8003564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003568:	4293      	cmp	r3, r2
 800356a:	bfb8      	it	lt
 800356c:	4613      	movlt	r3, r2
 800356e:	6033      	str	r3, [r6, #0]
 8003570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003574:	4607      	mov	r7, r0
 8003576:	460c      	mov	r4, r1
 8003578:	b10a      	cbz	r2, 800357e <_printf_common+0x26>
 800357a:	3301      	adds	r3, #1
 800357c:	6033      	str	r3, [r6, #0]
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	0699      	lsls	r1, r3, #26
 8003582:	bf42      	ittt	mi
 8003584:	6833      	ldrmi	r3, [r6, #0]
 8003586:	3302      	addmi	r3, #2
 8003588:	6033      	strmi	r3, [r6, #0]
 800358a:	6825      	ldr	r5, [r4, #0]
 800358c:	f015 0506 	ands.w	r5, r5, #6
 8003590:	d106      	bne.n	80035a0 <_printf_common+0x48>
 8003592:	f104 0a19 	add.w	sl, r4, #25
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	6832      	ldr	r2, [r6, #0]
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	42ab      	cmp	r3, r5
 800359e:	dc26      	bgt.n	80035ee <_printf_common+0x96>
 80035a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035a4:	6822      	ldr	r2, [r4, #0]
 80035a6:	3b00      	subs	r3, #0
 80035a8:	bf18      	it	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	0692      	lsls	r2, r2, #26
 80035ae:	d42b      	bmi.n	8003608 <_printf_common+0xb0>
 80035b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035b4:	4641      	mov	r1, r8
 80035b6:	4638      	mov	r0, r7
 80035b8:	47c8      	blx	r9
 80035ba:	3001      	adds	r0, #1
 80035bc:	d01e      	beq.n	80035fc <_printf_common+0xa4>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	f003 0306 	and.w	r3, r3, #6
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf02      	ittt	eq
 80035ca:	68e5      	ldreq	r5, [r4, #12]
 80035cc:	6833      	ldreq	r3, [r6, #0]
 80035ce:	1aed      	subeq	r5, r5, r3
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	bf0c      	ite	eq
 80035d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d8:	2500      	movne	r5, #0
 80035da:	4293      	cmp	r3, r2
 80035dc:	bfc4      	itt	gt
 80035de:	1a9b      	subgt	r3, r3, r2
 80035e0:	18ed      	addgt	r5, r5, r3
 80035e2:	2600      	movs	r6, #0
 80035e4:	341a      	adds	r4, #26
 80035e6:	42b5      	cmp	r5, r6
 80035e8:	d11a      	bne.n	8003620 <_printf_common+0xc8>
 80035ea:	2000      	movs	r0, #0
 80035ec:	e008      	b.n	8003600 <_printf_common+0xa8>
 80035ee:	2301      	movs	r3, #1
 80035f0:	4652      	mov	r2, sl
 80035f2:	4641      	mov	r1, r8
 80035f4:	4638      	mov	r0, r7
 80035f6:	47c8      	blx	r9
 80035f8:	3001      	adds	r0, #1
 80035fa:	d103      	bne.n	8003604 <_printf_common+0xac>
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003604:	3501      	adds	r5, #1
 8003606:	e7c6      	b.n	8003596 <_printf_common+0x3e>
 8003608:	18e1      	adds	r1, r4, r3
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	2030      	movs	r0, #48	@ 0x30
 800360e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003612:	4422      	add	r2, r4
 8003614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800361c:	3302      	adds	r3, #2
 800361e:	e7c7      	b.n	80035b0 <_printf_common+0x58>
 8003620:	2301      	movs	r3, #1
 8003622:	4622      	mov	r2, r4
 8003624:	4641      	mov	r1, r8
 8003626:	4638      	mov	r0, r7
 8003628:	47c8      	blx	r9
 800362a:	3001      	adds	r0, #1
 800362c:	d0e6      	beq.n	80035fc <_printf_common+0xa4>
 800362e:	3601      	adds	r6, #1
 8003630:	e7d9      	b.n	80035e6 <_printf_common+0x8e>
	...

08003634 <_printf_i>:
 8003634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003638:	7e0f      	ldrb	r7, [r1, #24]
 800363a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800363c:	2f78      	cmp	r7, #120	@ 0x78
 800363e:	4691      	mov	r9, r2
 8003640:	4680      	mov	r8, r0
 8003642:	460c      	mov	r4, r1
 8003644:	469a      	mov	sl, r3
 8003646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800364a:	d807      	bhi.n	800365c <_printf_i+0x28>
 800364c:	2f62      	cmp	r7, #98	@ 0x62
 800364e:	d80a      	bhi.n	8003666 <_printf_i+0x32>
 8003650:	2f00      	cmp	r7, #0
 8003652:	f000 80d2 	beq.w	80037fa <_printf_i+0x1c6>
 8003656:	2f58      	cmp	r7, #88	@ 0x58
 8003658:	f000 80b9 	beq.w	80037ce <_printf_i+0x19a>
 800365c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003664:	e03a      	b.n	80036dc <_printf_i+0xa8>
 8003666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800366a:	2b15      	cmp	r3, #21
 800366c:	d8f6      	bhi.n	800365c <_printf_i+0x28>
 800366e:	a101      	add	r1, pc, #4	@ (adr r1, 8003674 <_printf_i+0x40>)
 8003670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036e1 	.word	0x080036e1
 800367c:	0800365d 	.word	0x0800365d
 8003680:	0800365d 	.word	0x0800365d
 8003684:	0800365d 	.word	0x0800365d
 8003688:	0800365d 	.word	0x0800365d
 800368c:	080036e1 	.word	0x080036e1
 8003690:	0800365d 	.word	0x0800365d
 8003694:	0800365d 	.word	0x0800365d
 8003698:	0800365d 	.word	0x0800365d
 800369c:	0800365d 	.word	0x0800365d
 80036a0:	080037e1 	.word	0x080037e1
 80036a4:	0800370b 	.word	0x0800370b
 80036a8:	0800379b 	.word	0x0800379b
 80036ac:	0800365d 	.word	0x0800365d
 80036b0:	0800365d 	.word	0x0800365d
 80036b4:	08003803 	.word	0x08003803
 80036b8:	0800365d 	.word	0x0800365d
 80036bc:	0800370b 	.word	0x0800370b
 80036c0:	0800365d 	.word	0x0800365d
 80036c4:	0800365d 	.word	0x0800365d
 80036c8:	080037a3 	.word	0x080037a3
 80036cc:	6833      	ldr	r3, [r6, #0]
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6032      	str	r2, [r6, #0]
 80036d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036dc:	2301      	movs	r3, #1
 80036de:	e09d      	b.n	800381c <_printf_i+0x1e8>
 80036e0:	6833      	ldr	r3, [r6, #0]
 80036e2:	6820      	ldr	r0, [r4, #0]
 80036e4:	1d19      	adds	r1, r3, #4
 80036e6:	6031      	str	r1, [r6, #0]
 80036e8:	0606      	lsls	r6, r0, #24
 80036ea:	d501      	bpl.n	80036f0 <_printf_i+0xbc>
 80036ec:	681d      	ldr	r5, [r3, #0]
 80036ee:	e003      	b.n	80036f8 <_printf_i+0xc4>
 80036f0:	0645      	lsls	r5, r0, #25
 80036f2:	d5fb      	bpl.n	80036ec <_printf_i+0xb8>
 80036f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036f8:	2d00      	cmp	r5, #0
 80036fa:	da03      	bge.n	8003704 <_printf_i+0xd0>
 80036fc:	232d      	movs	r3, #45	@ 0x2d
 80036fe:	426d      	negs	r5, r5
 8003700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003704:	4859      	ldr	r0, [pc, #356]	@ (800386c <_printf_i+0x238>)
 8003706:	230a      	movs	r3, #10
 8003708:	e011      	b.n	800372e <_printf_i+0xfa>
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	6833      	ldr	r3, [r6, #0]
 800370e:	0608      	lsls	r0, r1, #24
 8003710:	f853 5b04 	ldr.w	r5, [r3], #4
 8003714:	d402      	bmi.n	800371c <_printf_i+0xe8>
 8003716:	0649      	lsls	r1, r1, #25
 8003718:	bf48      	it	mi
 800371a:	b2ad      	uxthmi	r5, r5
 800371c:	2f6f      	cmp	r7, #111	@ 0x6f
 800371e:	4853      	ldr	r0, [pc, #332]	@ (800386c <_printf_i+0x238>)
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	bf14      	ite	ne
 8003724:	230a      	movne	r3, #10
 8003726:	2308      	moveq	r3, #8
 8003728:	2100      	movs	r1, #0
 800372a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800372e:	6866      	ldr	r6, [r4, #4]
 8003730:	60a6      	str	r6, [r4, #8]
 8003732:	2e00      	cmp	r6, #0
 8003734:	bfa2      	ittt	ge
 8003736:	6821      	ldrge	r1, [r4, #0]
 8003738:	f021 0104 	bicge.w	r1, r1, #4
 800373c:	6021      	strge	r1, [r4, #0]
 800373e:	b90d      	cbnz	r5, 8003744 <_printf_i+0x110>
 8003740:	2e00      	cmp	r6, #0
 8003742:	d04b      	beq.n	80037dc <_printf_i+0x1a8>
 8003744:	4616      	mov	r6, r2
 8003746:	fbb5 f1f3 	udiv	r1, r5, r3
 800374a:	fb03 5711 	mls	r7, r3, r1, r5
 800374e:	5dc7      	ldrb	r7, [r0, r7]
 8003750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003754:	462f      	mov	r7, r5
 8003756:	42bb      	cmp	r3, r7
 8003758:	460d      	mov	r5, r1
 800375a:	d9f4      	bls.n	8003746 <_printf_i+0x112>
 800375c:	2b08      	cmp	r3, #8
 800375e:	d10b      	bne.n	8003778 <_printf_i+0x144>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	07df      	lsls	r7, r3, #31
 8003764:	d508      	bpl.n	8003778 <_printf_i+0x144>
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	6861      	ldr	r1, [r4, #4]
 800376a:	4299      	cmp	r1, r3
 800376c:	bfde      	ittt	le
 800376e:	2330      	movle	r3, #48	@ 0x30
 8003770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003774:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003778:	1b92      	subs	r2, r2, r6
 800377a:	6122      	str	r2, [r4, #16]
 800377c:	f8cd a000 	str.w	sl, [sp]
 8003780:	464b      	mov	r3, r9
 8003782:	aa03      	add	r2, sp, #12
 8003784:	4621      	mov	r1, r4
 8003786:	4640      	mov	r0, r8
 8003788:	f7ff fee6 	bl	8003558 <_printf_common>
 800378c:	3001      	adds	r0, #1
 800378e:	d14a      	bne.n	8003826 <_printf_i+0x1f2>
 8003790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003794:	b004      	add	sp, #16
 8003796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	4833      	ldr	r0, [pc, #204]	@ (8003870 <_printf_i+0x23c>)
 80037a4:	2778      	movs	r7, #120	@ 0x78
 80037a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	6831      	ldr	r1, [r6, #0]
 80037ae:	061f      	lsls	r7, r3, #24
 80037b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80037b4:	d402      	bmi.n	80037bc <_printf_i+0x188>
 80037b6:	065f      	lsls	r7, r3, #25
 80037b8:	bf48      	it	mi
 80037ba:	b2ad      	uxthmi	r5, r5
 80037bc:	6031      	str	r1, [r6, #0]
 80037be:	07d9      	lsls	r1, r3, #31
 80037c0:	bf44      	itt	mi
 80037c2:	f043 0320 	orrmi.w	r3, r3, #32
 80037c6:	6023      	strmi	r3, [r4, #0]
 80037c8:	b11d      	cbz	r5, 80037d2 <_printf_i+0x19e>
 80037ca:	2310      	movs	r3, #16
 80037cc:	e7ac      	b.n	8003728 <_printf_i+0xf4>
 80037ce:	4827      	ldr	r0, [pc, #156]	@ (800386c <_printf_i+0x238>)
 80037d0:	e7e9      	b.n	80037a6 <_printf_i+0x172>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	f023 0320 	bic.w	r3, r3, #32
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	e7f6      	b.n	80037ca <_printf_i+0x196>
 80037dc:	4616      	mov	r6, r2
 80037de:	e7bd      	b.n	800375c <_printf_i+0x128>
 80037e0:	6833      	ldr	r3, [r6, #0]
 80037e2:	6825      	ldr	r5, [r4, #0]
 80037e4:	6961      	ldr	r1, [r4, #20]
 80037e6:	1d18      	adds	r0, r3, #4
 80037e8:	6030      	str	r0, [r6, #0]
 80037ea:	062e      	lsls	r6, r5, #24
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	d501      	bpl.n	80037f4 <_printf_i+0x1c0>
 80037f0:	6019      	str	r1, [r3, #0]
 80037f2:	e002      	b.n	80037fa <_printf_i+0x1c6>
 80037f4:	0668      	lsls	r0, r5, #25
 80037f6:	d5fb      	bpl.n	80037f0 <_printf_i+0x1bc>
 80037f8:	8019      	strh	r1, [r3, #0]
 80037fa:	2300      	movs	r3, #0
 80037fc:	6123      	str	r3, [r4, #16]
 80037fe:	4616      	mov	r6, r2
 8003800:	e7bc      	b.n	800377c <_printf_i+0x148>
 8003802:	6833      	ldr	r3, [r6, #0]
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	6032      	str	r2, [r6, #0]
 8003808:	681e      	ldr	r6, [r3, #0]
 800380a:	6862      	ldr	r2, [r4, #4]
 800380c:	2100      	movs	r1, #0
 800380e:	4630      	mov	r0, r6
 8003810:	f7fc fce6 	bl	80001e0 <memchr>
 8003814:	b108      	cbz	r0, 800381a <_printf_i+0x1e6>
 8003816:	1b80      	subs	r0, r0, r6
 8003818:	6060      	str	r0, [r4, #4]
 800381a:	6863      	ldr	r3, [r4, #4]
 800381c:	6123      	str	r3, [r4, #16]
 800381e:	2300      	movs	r3, #0
 8003820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003824:	e7aa      	b.n	800377c <_printf_i+0x148>
 8003826:	6923      	ldr	r3, [r4, #16]
 8003828:	4632      	mov	r2, r6
 800382a:	4649      	mov	r1, r9
 800382c:	4640      	mov	r0, r8
 800382e:	47d0      	blx	sl
 8003830:	3001      	adds	r0, #1
 8003832:	d0ad      	beq.n	8003790 <_printf_i+0x15c>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	079b      	lsls	r3, r3, #30
 8003838:	d413      	bmi.n	8003862 <_printf_i+0x22e>
 800383a:	68e0      	ldr	r0, [r4, #12]
 800383c:	9b03      	ldr	r3, [sp, #12]
 800383e:	4298      	cmp	r0, r3
 8003840:	bfb8      	it	lt
 8003842:	4618      	movlt	r0, r3
 8003844:	e7a6      	b.n	8003794 <_printf_i+0x160>
 8003846:	2301      	movs	r3, #1
 8003848:	4632      	mov	r2, r6
 800384a:	4649      	mov	r1, r9
 800384c:	4640      	mov	r0, r8
 800384e:	47d0      	blx	sl
 8003850:	3001      	adds	r0, #1
 8003852:	d09d      	beq.n	8003790 <_printf_i+0x15c>
 8003854:	3501      	adds	r5, #1
 8003856:	68e3      	ldr	r3, [r4, #12]
 8003858:	9903      	ldr	r1, [sp, #12]
 800385a:	1a5b      	subs	r3, r3, r1
 800385c:	42ab      	cmp	r3, r5
 800385e:	dcf2      	bgt.n	8003846 <_printf_i+0x212>
 8003860:	e7eb      	b.n	800383a <_printf_i+0x206>
 8003862:	2500      	movs	r5, #0
 8003864:	f104 0619 	add.w	r6, r4, #25
 8003868:	e7f5      	b.n	8003856 <_printf_i+0x222>
 800386a:	bf00      	nop
 800386c:	08003c95 	.word	0x08003c95
 8003870:	08003ca6 	.word	0x08003ca6

08003874 <__sflush_r>:
 8003874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387c:	0716      	lsls	r6, r2, #28
 800387e:	4605      	mov	r5, r0
 8003880:	460c      	mov	r4, r1
 8003882:	d454      	bmi.n	800392e <__sflush_r+0xba>
 8003884:	684b      	ldr	r3, [r1, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	dc02      	bgt.n	8003890 <__sflush_r+0x1c>
 800388a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	dd48      	ble.n	8003922 <__sflush_r+0xae>
 8003890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003892:	2e00      	cmp	r6, #0
 8003894:	d045      	beq.n	8003922 <__sflush_r+0xae>
 8003896:	2300      	movs	r3, #0
 8003898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800389c:	682f      	ldr	r7, [r5, #0]
 800389e:	6a21      	ldr	r1, [r4, #32]
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	d030      	beq.n	8003906 <__sflush_r+0x92>
 80038a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	0759      	lsls	r1, r3, #29
 80038aa:	d505      	bpl.n	80038b8 <__sflush_r+0x44>
 80038ac:	6863      	ldr	r3, [r4, #4]
 80038ae:	1ad2      	subs	r2, r2, r3
 80038b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038b2:	b10b      	cbz	r3, 80038b8 <__sflush_r+0x44>
 80038b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038b6:	1ad2      	subs	r2, r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038bc:	6a21      	ldr	r1, [r4, #32]
 80038be:	4628      	mov	r0, r5
 80038c0:	47b0      	blx	r6
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	d106      	bne.n	80038d6 <__sflush_r+0x62>
 80038c8:	6829      	ldr	r1, [r5, #0]
 80038ca:	291d      	cmp	r1, #29
 80038cc:	d82b      	bhi.n	8003926 <__sflush_r+0xb2>
 80038ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <__sflush_r+0x104>)
 80038d0:	410a      	asrs	r2, r1
 80038d2:	07d6      	lsls	r6, r2, #31
 80038d4:	d427      	bmi.n	8003926 <__sflush_r+0xb2>
 80038d6:	2200      	movs	r2, #0
 80038d8:	6062      	str	r2, [r4, #4]
 80038da:	04d9      	lsls	r1, r3, #19
 80038dc:	6922      	ldr	r2, [r4, #16]
 80038de:	6022      	str	r2, [r4, #0]
 80038e0:	d504      	bpl.n	80038ec <__sflush_r+0x78>
 80038e2:	1c42      	adds	r2, r0, #1
 80038e4:	d101      	bne.n	80038ea <__sflush_r+0x76>
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	b903      	cbnz	r3, 80038ec <__sflush_r+0x78>
 80038ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80038ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038ee:	602f      	str	r7, [r5, #0]
 80038f0:	b1b9      	cbz	r1, 8003922 <__sflush_r+0xae>
 80038f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038f6:	4299      	cmp	r1, r3
 80038f8:	d002      	beq.n	8003900 <__sflush_r+0x8c>
 80038fa:	4628      	mov	r0, r5
 80038fc:	f7ff fa9a 	bl	8002e34 <_free_r>
 8003900:	2300      	movs	r3, #0
 8003902:	6363      	str	r3, [r4, #52]	@ 0x34
 8003904:	e00d      	b.n	8003922 <__sflush_r+0xae>
 8003906:	2301      	movs	r3, #1
 8003908:	4628      	mov	r0, r5
 800390a:	47b0      	blx	r6
 800390c:	4602      	mov	r2, r0
 800390e:	1c50      	adds	r0, r2, #1
 8003910:	d1c9      	bne.n	80038a6 <__sflush_r+0x32>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0c6      	beq.n	80038a6 <__sflush_r+0x32>
 8003918:	2b1d      	cmp	r3, #29
 800391a:	d001      	beq.n	8003920 <__sflush_r+0xac>
 800391c:	2b16      	cmp	r3, #22
 800391e:	d11e      	bne.n	800395e <__sflush_r+0xea>
 8003920:	602f      	str	r7, [r5, #0]
 8003922:	2000      	movs	r0, #0
 8003924:	e022      	b.n	800396c <__sflush_r+0xf8>
 8003926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800392a:	b21b      	sxth	r3, r3
 800392c:	e01b      	b.n	8003966 <__sflush_r+0xf2>
 800392e:	690f      	ldr	r7, [r1, #16]
 8003930:	2f00      	cmp	r7, #0
 8003932:	d0f6      	beq.n	8003922 <__sflush_r+0xae>
 8003934:	0793      	lsls	r3, r2, #30
 8003936:	680e      	ldr	r6, [r1, #0]
 8003938:	bf08      	it	eq
 800393a:	694b      	ldreq	r3, [r1, #20]
 800393c:	600f      	str	r7, [r1, #0]
 800393e:	bf18      	it	ne
 8003940:	2300      	movne	r3, #0
 8003942:	eba6 0807 	sub.w	r8, r6, r7
 8003946:	608b      	str	r3, [r1, #8]
 8003948:	f1b8 0f00 	cmp.w	r8, #0
 800394c:	dde9      	ble.n	8003922 <__sflush_r+0xae>
 800394e:	6a21      	ldr	r1, [r4, #32]
 8003950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003952:	4643      	mov	r3, r8
 8003954:	463a      	mov	r2, r7
 8003956:	4628      	mov	r0, r5
 8003958:	47b0      	blx	r6
 800395a:	2800      	cmp	r0, #0
 800395c:	dc08      	bgt.n	8003970 <__sflush_r+0xfc>
 800395e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003966:	81a3      	strh	r3, [r4, #12]
 8003968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003970:	4407      	add	r7, r0
 8003972:	eba8 0800 	sub.w	r8, r8, r0
 8003976:	e7e7      	b.n	8003948 <__sflush_r+0xd4>
 8003978:	dfbffffe 	.word	0xdfbffffe

0800397c <_fflush_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	690b      	ldr	r3, [r1, #16]
 8003980:	4605      	mov	r5, r0
 8003982:	460c      	mov	r4, r1
 8003984:	b913      	cbnz	r3, 800398c <_fflush_r+0x10>
 8003986:	2500      	movs	r5, #0
 8003988:	4628      	mov	r0, r5
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	b118      	cbz	r0, 8003996 <_fflush_r+0x1a>
 800398e:	6a03      	ldr	r3, [r0, #32]
 8003990:	b90b      	cbnz	r3, 8003996 <_fflush_r+0x1a>
 8003992:	f7ff f821 	bl	80029d8 <__sinit>
 8003996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f3      	beq.n	8003986 <_fflush_r+0xa>
 800399e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039a0:	07d0      	lsls	r0, r2, #31
 80039a2:	d404      	bmi.n	80039ae <_fflush_r+0x32>
 80039a4:	0599      	lsls	r1, r3, #22
 80039a6:	d402      	bmi.n	80039ae <_fflush_r+0x32>
 80039a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039aa:	f7ff fa40 	bl	8002e2e <__retarget_lock_acquire_recursive>
 80039ae:	4628      	mov	r0, r5
 80039b0:	4621      	mov	r1, r4
 80039b2:	f7ff ff5f 	bl	8003874 <__sflush_r>
 80039b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039b8:	07da      	lsls	r2, r3, #31
 80039ba:	4605      	mov	r5, r0
 80039bc:	d4e4      	bmi.n	8003988 <_fflush_r+0xc>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	059b      	lsls	r3, r3, #22
 80039c2:	d4e1      	bmi.n	8003988 <_fflush_r+0xc>
 80039c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039c6:	f7ff fa33 	bl	8002e30 <__retarget_lock_release_recursive>
 80039ca:	e7dd      	b.n	8003988 <_fflush_r+0xc>

080039cc <__swhatbuf_r>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	460c      	mov	r4, r1
 80039d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d4:	2900      	cmp	r1, #0
 80039d6:	b096      	sub	sp, #88	@ 0x58
 80039d8:	4615      	mov	r5, r2
 80039da:	461e      	mov	r6, r3
 80039dc:	da0d      	bge.n	80039fa <__swhatbuf_r+0x2e>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2340      	movne	r3, #64	@ 0x40
 80039ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80039f0:	2000      	movs	r0, #0
 80039f2:	6031      	str	r1, [r6, #0]
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	b016      	add	sp, #88	@ 0x58
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
 80039fa:	466a      	mov	r2, sp
 80039fc:	f000 f862 	bl	8003ac4 <_fstat_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	dbec      	blt.n	80039de <__swhatbuf_r+0x12>
 8003a04:	9901      	ldr	r1, [sp, #4]
 8003a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a0e:	4259      	negs	r1, r3
 8003a10:	4159      	adcs	r1, r3
 8003a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a16:	e7eb      	b.n	80039f0 <__swhatbuf_r+0x24>

08003a18 <__smakebuf_r>:
 8003a18:	898b      	ldrh	r3, [r1, #12]
 8003a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a1c:	079d      	lsls	r5, r3, #30
 8003a1e:	4606      	mov	r6, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	d507      	bpl.n	8003a34 <__smakebuf_r+0x1c>
 8003a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	6123      	str	r3, [r4, #16]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	6163      	str	r3, [r4, #20]
 8003a30:	b003      	add	sp, #12
 8003a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a34:	ab01      	add	r3, sp, #4
 8003a36:	466a      	mov	r2, sp
 8003a38:	f7ff ffc8 	bl	80039cc <__swhatbuf_r>
 8003a3c:	9f00      	ldr	r7, [sp, #0]
 8003a3e:	4605      	mov	r5, r0
 8003a40:	4639      	mov	r1, r7
 8003a42:	4630      	mov	r0, r6
 8003a44:	f7ff fa62 	bl	8002f0c <_malloc_r>
 8003a48:	b948      	cbnz	r0, 8003a5e <__smakebuf_r+0x46>
 8003a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a4e:	059a      	lsls	r2, r3, #22
 8003a50:	d4ee      	bmi.n	8003a30 <__smakebuf_r+0x18>
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	e7e2      	b.n	8003a24 <__smakebuf_r+0xc>
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	6020      	str	r0, [r4, #0]
 8003a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	9b01      	ldr	r3, [sp, #4]
 8003a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a6e:	b15b      	cbz	r3, 8003a88 <__smakebuf_r+0x70>
 8003a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a74:	4630      	mov	r0, r6
 8003a76:	f000 f837 	bl	8003ae8 <_isatty_r>
 8003a7a:	b128      	cbz	r0, 8003a88 <__smakebuf_r+0x70>
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	81a3      	strh	r3, [r4, #12]
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	431d      	orrs	r5, r3
 8003a8c:	81a5      	strh	r5, [r4, #12]
 8003a8e:	e7cf      	b.n	8003a30 <__smakebuf_r+0x18>

08003a90 <memmove>:
 8003a90:	4288      	cmp	r0, r1
 8003a92:	b510      	push	{r4, lr}
 8003a94:	eb01 0402 	add.w	r4, r1, r2
 8003a98:	d902      	bls.n	8003aa0 <memmove+0x10>
 8003a9a:	4284      	cmp	r4, r0
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	d807      	bhi.n	8003ab0 <memmove+0x20>
 8003aa0:	1e43      	subs	r3, r0, #1
 8003aa2:	42a1      	cmp	r1, r4
 8003aa4:	d008      	beq.n	8003ab8 <memmove+0x28>
 8003aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aae:	e7f8      	b.n	8003aa2 <memmove+0x12>
 8003ab0:	4402      	add	r2, r0
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	d100      	bne.n	8003aba <memmove+0x2a>
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ac2:	e7f7      	b.n	8003ab4 <memmove+0x24>

08003ac4 <_fstat_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4d07      	ldr	r5, [pc, #28]	@ (8003ae4 <_fstat_r+0x20>)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	f7fd f89a 	bl	8000c0a <_fstat>
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d102      	bne.n	8003ae0 <_fstat_r+0x1c>
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	b103      	cbz	r3, 8003ae0 <_fstat_r+0x1c>
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000414 	.word	0x20000414

08003ae8 <_isatty_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4d06      	ldr	r5, [pc, #24]	@ (8003b04 <_isatty_r+0x1c>)
 8003aec:	2300      	movs	r3, #0
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	f7fd f88e 	bl	8000c14 <_isatty>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_isatty_r+0x1a>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_isatty_r+0x1a>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	20000414 	.word	0x20000414

08003b08 <_sbrk_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d06      	ldr	r5, [pc, #24]	@ (8003b24 <_sbrk_r+0x1c>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	f7fd f882 	bl	8000c1c <_sbrk>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_sbrk_r+0x1a>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_sbrk_r+0x1a>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20000414 	.word	0x20000414

08003b28 <memcpy>:
 8003b28:	440a      	add	r2, r1
 8003b2a:	4291      	cmp	r1, r2
 8003b2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003b30:	d100      	bne.n	8003b34 <memcpy+0xc>
 8003b32:	4770      	bx	lr
 8003b34:	b510      	push	{r4, lr}
 8003b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b3e:	4291      	cmp	r1, r2
 8003b40:	d1f9      	bne.n	8003b36 <memcpy+0xe>
 8003b42:	bd10      	pop	{r4, pc}

08003b44 <_realloc_r>:
 8003b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b48:	4680      	mov	r8, r0
 8003b4a:	4615      	mov	r5, r2
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	b921      	cbnz	r1, 8003b5a <_realloc_r+0x16>
 8003b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	4611      	mov	r1, r2
 8003b56:	f7ff b9d9 	b.w	8002f0c <_malloc_r>
 8003b5a:	b92a      	cbnz	r2, 8003b68 <_realloc_r+0x24>
 8003b5c:	f7ff f96a 	bl	8002e34 <_free_r>
 8003b60:	2400      	movs	r4, #0
 8003b62:	4620      	mov	r0, r4
 8003b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b68:	f000 f81a 	bl	8003ba0 <_malloc_usable_size_r>
 8003b6c:	4285      	cmp	r5, r0
 8003b6e:	4606      	mov	r6, r0
 8003b70:	d802      	bhi.n	8003b78 <_realloc_r+0x34>
 8003b72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b76:	d8f4      	bhi.n	8003b62 <_realloc_r+0x1e>
 8003b78:	4629      	mov	r1, r5
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	f7ff f9c6 	bl	8002f0c <_malloc_r>
 8003b80:	4607      	mov	r7, r0
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0ec      	beq.n	8003b60 <_realloc_r+0x1c>
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	bf28      	it	cs
 8003b8e:	4632      	movcs	r2, r6
 8003b90:	f7ff ffca 	bl	8003b28 <memcpy>
 8003b94:	4621      	mov	r1, r4
 8003b96:	4640      	mov	r0, r8
 8003b98:	f7ff f94c 	bl	8002e34 <_free_r>
 8003b9c:	463c      	mov	r4, r7
 8003b9e:	e7e0      	b.n	8003b62 <_realloc_r+0x1e>

08003ba0 <_malloc_usable_size_r>:
 8003ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba4:	1f18      	subs	r0, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfbc      	itt	lt
 8003baa:	580b      	ldrlt	r3, [r1, r0]
 8003bac:	18c0      	addlt	r0, r0, r3
 8003bae:	4770      	bx	lr

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
