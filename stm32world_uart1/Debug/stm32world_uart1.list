
stm32world_uart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b8  080037b8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080037c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000006b4  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abb5  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b93  00000000  00000000  0000fc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000042c2  00000000  00000000  000117e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000798  00000000  00000000  00015aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b1  00000000  00000000  00016240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f1f0  00000000  00000000  000167f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bcdf  00000000  00000000  000359e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9bb9  00000000  00000000  000416c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000fb279  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001c7c  00000000  00000000  000fb2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  000fcf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080036d0 	.word	0x080036d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080036d0 	.word	0x080036d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	2400      	movs	r4, #0
 8000576:	9405      	str	r4, [sp, #20]
 8000578:	9406      	str	r4, [sp, #24]
 800057a:	9407      	str	r4, [sp, #28]
 800057c:	9408      	str	r4, [sp, #32]
 800057e:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	9401      	str	r4, [sp, #4]
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x8c>)
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f042 0204 	orr.w	r2, r2, #4
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30
 800058c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058e:	f002 0204 	and.w	r2, r2, #4
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	9402      	str	r4, [sp, #8]
 8000598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800059e:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005a6:	9202      	str	r2, [sp, #8]
 80005a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9403      	str	r4, [sp, #12]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f042 0201 	orr.w	r2, r2, #1
 80005b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f002 0201 	and.w	r2, r2, #1
 80005ba:	9203      	str	r2, [sp, #12]
 80005bc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	9404      	str	r4, [sp, #16]
 80005c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c2:	f042 0202 	orr.w	r2, r2, #2
 80005c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	9304      	str	r3, [sp, #16]
 80005d0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005d2:	4d0b      	ldr	r5, [pc, #44]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	4628      	mov	r0, r5
 80005dc:	f000 ff16 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005e6:	2311      	movs	r3, #17
 80005e8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ee:	a905      	add	r1, sp, #20
 80005f0:	4628      	mov	r0, r5
 80005f2:	f000 fe15 	bl	8001220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	b00b      	add	sp, #44	@ 0x2c
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020800 	.word	0x40020800

08000604 <MX_DMA_Init>:
{
 8000604:	b500      	push	{lr}
 8000606:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000608:	2100      	movs	r1, #0
 800060a:	9101      	str	r1, [sp, #4]
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_DMA_Init+0x30>)
 800060e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000610:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000614:	631a      	str	r2, [r3, #48]	@ 0x30
 8000616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000620:	460a      	mov	r2, r1
 8000622:	200d      	movs	r0, #13
 8000624:	f000 fb6e 	bl	8000d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000628:	200d      	movs	r0, #13
 800062a:	f000 fb7b 	bl	8000d24 <HAL_NVIC_EnableIRQ>
}
 800062e:	b003      	add	sp, #12
 8000630:	f85d fb04 	ldr.w	pc, [sp], #4
 8000634:	40023800 	.word	0x40023800

08000638 <HAL_GetTick>:
    return uwTick;
 8000638:	4b01      	ldr	r3, [pc, #4]	@ (8000640 <HAL_GetTick+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200005cc 	.word	0x200005cc

08000644 <_write>:
    if (fd == 1 || fd == 2) {
 8000644:	3801      	subs	r0, #1
 8000646:	2801      	cmp	r0, #1
 8000648:	d80a      	bhi.n	8000660 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800064a:	b510      	push	{r4, lr}
 800064c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000652:	b292      	uxth	r2, r2
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <_write+0x28>)
 8000656:	f001 fb82 	bl	8001d5e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800065a:	b920      	cbnz	r0, 8000666 <_write+0x22>
            return len;
 800065c:	4620      	mov	r0, r4
}
 800065e:	bd10      	pop	{r4, pc}
    return -1;
 8000660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000664:	4770      	bx	lr
            return -1;
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800066a:	e7f8      	b.n	800065e <_write+0x1a>
 800066c:	20000538 	.word	0x20000538

08000670 <process_character>:
void process_character(char ch) {
 8000670:	b510      	push	{r4, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	f88d 0007 	strb.w	r0, [sp, #7]
    switch (ch) {
 8000678:	b2c3      	uxtb	r3, r0
 800067a:	b12b      	cbz	r3, 8000688 <process_character+0x18>
        if (strlen < BUFFER_SIZE) {
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <process_character+0x40>)
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	2cff      	cmp	r4, #255	@ 0xff
 8000682:	d90b      	bls.n	800069c <process_character+0x2c>
}
 8000684:	b002      	add	sp, #8
 8000686:	bd10      	pop	{r4, pc}
        printf("Received    : %s\n", receive_buffer);
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <process_character+0x44>)
 800068a:	4621      	mov	r1, r4
 800068c:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <process_character+0x48>)
 800068e:	f001 ff69 	bl	8002564 <iprintf>
        receive_buffer[0] = '\0';
 8000692:	2300      	movs	r3, #0
 8000694:	7023      	strb	r3, [r4, #0]
        strlen = 0;
 8000696:	4a06      	ldr	r2, [pc, #24]	@ (80006b0 <process_character+0x40>)
 8000698:	6013      	str	r3, [r2, #0]
        break;
 800069a:	e7f3      	b.n	8000684 <process_character+0x14>
            strncat((char*) &receive_buffer, &ch, 1); // Danger, Will Robinson!  this could go horribly wrong!
 800069c:	2201      	movs	r2, #1
 800069e:	f10d 0107 	add.w	r1, sp, #7
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <process_character+0x44>)
 80006a4:	f002 f8ce 	bl	8002844 <strncat>
            ++strlen;
 80006a8:	3401      	adds	r4, #1
 80006aa:	4b01      	ldr	r3, [pc, #4]	@ (80006b0 <process_character+0x40>)
 80006ac:	601c      	str	r4, [r3, #0]
}
 80006ae:	e7e9      	b.n	8000684 <process_character+0x14>
 80006b0:	20000088 	.word	0x20000088
 80006b4:	2000028c 	.word	0x2000028c
 80006b8:	080036e8 	.word	0x080036e8

080006bc <HAL_UARTEx_RxEventCallback>:
    if (offset != last_offset) {
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	428b      	cmp	r3, r1
 80006c2:	d013      	beq.n	80006ec <HAL_UARTEx_RxEventCallback+0x30>
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset) {
 80006c4:	b510      	push	{r4, lr}
 80006c6:	460c      	mov	r4, r1
        if (offset < last_offset)
 80006c8:	d90b      	bls.n	80006e2 <HAL_UARTEx_RxEventCallback+0x26>
            last_offset = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	801a      	strh	r2, [r3, #0]
 80006d0:	e007      	b.n	80006e2 <HAL_UARTEx_RxEventCallback+0x26>
            process_character((char) dma_buffer[last_offset]);
 80006d2:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <HAL_UARTEx_RxEventCallback+0x38>)
 80006d4:	5cd0      	ldrb	r0, [r2, r3]
 80006d6:	f7ff ffcb 	bl	8000670 <process_character>
            ++last_offset;
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80006dc:	8813      	ldrh	r3, [r2, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	8013      	strh	r3, [r2, #0]
        while (last_offset < offset) {
 80006e2:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	42a3      	cmp	r3, r4
 80006e8:	d3f3      	bcc.n	80006d2 <HAL_UARTEx_RxEventCallback+0x16>
}
 80006ea:	bd10      	pop	{r4, pc}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80006fa:	e7fe      	b.n	80006fa <Error_Handler+0x2>

080006fc <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80006fc:	b508      	push	{r3, lr}
    printf("UART Error\n");
 80006fe:	4802      	ldr	r0, [pc, #8]	@ (8000708 <HAL_UART_ErrorCallback+0xc>)
 8000700:	f001 ff98 	bl	8002634 <puts>
    Error_Handler();
 8000704:	f7ff fff8 	bl	80006f8 <Error_Handler>
 8000708:	080036fc 	.word	0x080036fc

0800070c <MX_USART1_UART_Init>:
{
 800070c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800070e:	480a      	ldr	r0, [pc, #40]	@ (8000738 <MX_USART1_UART_Init+0x2c>)
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_USART1_UART_Init+0x30>)
 8000712:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000714:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000718:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	2300      	movs	r3, #0
 800071c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	220c      	movs	r2, #12
 8000724:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072a:	f001 fae8 	bl	8001cfe <HAL_UART_Init>
 800072e:	b900      	cbnz	r0, 8000732 <MX_USART1_UART_Init+0x26>
}
 8000730:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000732:	f7ff ffe1 	bl	80006f8 <Error_Handler>
 8000736:	bf00      	nop
 8000738:	20000538 	.word	0x20000538
 800073c:	40011000 	.word	0x40011000

08000740 <MX_USART2_UART_Init>:
{
 8000740:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000742:	480a      	ldr	r0, [pc, #40]	@ (800076c <MX_USART2_UART_Init+0x2c>)
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_USART2_UART_Init+0x30>)
 8000746:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000748:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800074c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	2300      	movs	r3, #0
 8000750:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000752:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000754:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000756:	220c      	movs	r2, #12
 8000758:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	f001 face 	bl	8001cfe <HAL_UART_Init>
 8000762:	b900      	cbnz	r0, 8000766 <MX_USART2_UART_Init+0x26>
}
 8000764:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000766:	f7ff ffc7 	bl	80006f8 <Error_Handler>
 800076a:	bf00      	nop
 800076c:	200004f0 	.word	0x200004f0
 8000770:	40004400 	.word	0x40004400

08000774 <MX_UART4_Init>:
{
 8000774:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8000776:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <MX_UART4_Init+0x2c>)
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_UART4_Init+0x30>)
 800077a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 800077c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000780:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	2300      	movs	r3, #0
 8000784:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000786:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000788:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800078a:	220c      	movs	r2, #12
 800078c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000792:	f001 fab4 	bl	8001cfe <HAL_UART_Init>
 8000796:	b900      	cbnz	r0, 800079a <MX_UART4_Init+0x26>
}
 8000798:	bd08      	pop	{r3, pc}
    Error_Handler();
 800079a:	f7ff ffad 	bl	80006f8 <Error_Handler>
 800079e:	bf00      	nop
 80007a0:	20000580 	.word	0x20000580
 80007a4:	40004c00 	.word	0x40004c00

080007a8 <SystemClock_Config>:
{
 80007a8:	b500      	push	{lr}
 80007aa:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	a808      	add	r0, sp, #32
 80007b2:	f002 f83f 	bl	8002834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b6:	2300      	movs	r3, #0
 80007b8:	9303      	str	r3, [sp, #12]
 80007ba:	9304      	str	r3, [sp, #16]
 80007bc:	9305      	str	r3, [sp, #20]
 80007be:	9306      	str	r3, [sp, #24]
 80007c0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <SystemClock_Config+0xa0>)
 80007c6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007c8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007cc:	6411      	str	r1, [r2, #64]	@ 0x40
 80007ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80007d0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007d4:	9201      	str	r2, [sp, #4]
 80007d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <SystemClock_Config+0xa4>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000800:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000802:	2208      	movs	r2, #8
 8000804:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000806:	22a8      	movs	r2, #168	@ 0xa8
 8000808:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080a:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	a808      	add	r0, sp, #32
 8000812:	f000 fe01 	bl	8001418 <HAL_RCC_OscConfig>
 8000816:	b998      	cbnz	r0, 8000840 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000824:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000828:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000830:	2105      	movs	r1, #5
 8000832:	a803      	add	r0, sp, #12
 8000834:	f001 f854 	bl	80018e0 <HAL_RCC_ClockConfig>
 8000838:	b920      	cbnz	r0, 8000844 <SystemClock_Config+0x9c>
}
 800083a:	b015      	add	sp, #84	@ 0x54
 800083c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000840:	f7ff ff5a 	bl	80006f8 <Error_Handler>
    Error_Handler();
 8000844:	f7ff ff58 	bl	80006f8 <Error_Handler>
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <main>:
{
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000852:	f000 f9dd 	bl	8000c10 <HAL_Init>
  SystemClock_Config();
 8000856:	f7ff ffa7 	bl	80007a8 <SystemClock_Config>
  MX_GPIO_Init();
 800085a:	f7ff fe89 	bl	8000570 <MX_GPIO_Init>
  MX_DMA_Init();
 800085e:	f7ff fed1 	bl	8000604 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000862:	f7ff ff53 	bl	800070c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000866:	f7ff ff6b 	bl	8000740 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800086a:	f7ff ff83 	bl	8000774 <MX_UART4_Init>
    printf("\n\n\n\n--------\nStarting\n");
 800086e:	481c      	ldr	r0, [pc, #112]	@ (80008e0 <main+0x90>)
 8000870:	f001 fee0 	bl	8002634 <puts>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t*) &dma_buffer, BUFFER_SIZE);
 8000874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000878:	491a      	ldr	r1, [pc, #104]	@ (80008e4 <main+0x94>)
 800087a:	481b      	ldr	r0, [pc, #108]	@ (80008e8 <main+0x98>)
 800087c:	f001 fd7c 	bl	8002378 <HAL_UARTEx_ReceiveToIdle_DMA>
    uint32_t now = 0, next_tick = 1000, next_transmit = 1000;
 8000880:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000884:	e026      	b.n	80008d4 <main+0x84>
            printf("Tick %lu (loop = %lu)\n", now / 1000, loop_cnt);
 8000886:	4c19      	ldr	r4, [pc, #100]	@ (80008ec <main+0x9c>)
 8000888:	fba4 3405 	umull	r3, r4, r4, r5
 800088c:	09a4      	lsrs	r4, r4, #6
 800088e:	4f18      	ldr	r7, [pc, #96]	@ (80008f0 <main+0xa0>)
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	4621      	mov	r1, r4
 8000894:	4817      	ldr	r0, [pc, #92]	@ (80008f4 <main+0xa4>)
 8000896:	f001 fe65 	bl	8002564 <iprintf>
            sprintf(transmit_buffer, "Data string %lu", now / 1000);
 800089a:	4e17      	ldr	r6, [pc, #92]	@ (80008f8 <main+0xa8>)
 800089c:	4622      	mov	r2, r4
 800089e:	4917      	ldr	r1, [pc, #92]	@ (80008fc <main+0xac>)
 80008a0:	4630      	mov	r0, r6
 80008a2:	f001 fecf 	bl	8002644 <siprintf>
            printf("Transmitting: %s\n", transmit_buffer);
 80008a6:	4631      	mov	r1, r6
 80008a8:	4815      	ldr	r0, [pc, #84]	@ (8000900 <main+0xb0>)
 80008aa:	f001 fe5b 	bl	8002564 <iprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &transmit_buffer, strlen(transmit_buffer) + 1, HAL_MAX_DELAY);
 80008ae:	4630      	mov	r0, r6
 80008b0:	f7ff fc8e 	bl	80001d0 <strlen>
 80008b4:	1c42      	adds	r2, r0, #1
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ba:	b292      	uxth	r2, r2
 80008bc:	4631      	mov	r1, r6
 80008be:	4811      	ldr	r0, [pc, #68]	@ (8000904 <main+0xb4>)
 80008c0:	f001 fa4d 	bl	8001d5e <HAL_UART_Transmit>
            loop_cnt = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
            next_tick = now + 1000;
 80008c8:	f505 717a 	add.w	r1, r5, #1000	@ 0x3e8
        ++loop_cnt;
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <main+0xa0>)
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	6013      	str	r3, [r2, #0]
        now = uwTick;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <main+0xb8>)
 80008d6:	681d      	ldr	r5, [r3, #0]
        if (now >= next_tick) {
 80008d8:	42a9      	cmp	r1, r5
 80008da:	d8f7      	bhi.n	80008cc <main+0x7c>
 80008dc:	e7d3      	b.n	8000886 <main+0x36>
 80008de:	bf00      	nop
 80008e0:	08003708 	.word	0x08003708
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	20000580 	.word	0x20000580
 80008ec:	10624dd3 	.word	0x10624dd3
 80008f0:	2000048c 	.word	0x2000048c
 80008f4:	08003720 	.word	0x08003720
 80008f8:	2000038c 	.word	0x2000038c
 80008fc:	08003738 	.word	0x08003738
 8000900:	08003748 	.word	0x08003748
 8000904:	200004f0 	.word	0x200004f0
 8000908:	200005cc 	.word	0x200005cc

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2100      	movs	r1, #0
 8000910:	9100      	str	r1, [sp, #0]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_MspInit+0x34>)
 8000914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800091a:	645a      	str	r2, [r3, #68]	@ 0x44
 800091c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800091e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000922:	9200      	str	r2, [sp, #0]
 8000924:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	9101      	str	r1, [sp, #4]
 8000928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800092a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800092e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	b002      	add	sp, #8
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b530      	push	{r4, r5, lr}
 8000946:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	2300      	movs	r3, #0
 800094a:	9307      	str	r3, [sp, #28]
 800094c:	9308      	str	r3, [sp, #32]
 800094e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000950:	930a      	str	r3, [sp, #40]	@ 0x28
 8000952:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(huart->Instance==UART4)
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	4a4c      	ldr	r2, [pc, #304]	@ (8000a88 <HAL_UART_MspInit+0x144>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 800095c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a8c <HAL_UART_MspInit+0x148>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d04a      	beq.n	80009f8 <HAL_UART_MspInit+0xb4>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000962:	4a4b      	ldr	r2, [pc, #300]	@ (8000a90 <HAL_UART_MspInit+0x14c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d06b      	beq.n	8000a40 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000968:	b00d      	add	sp, #52	@ 0x34
 800096a:	bd30      	pop	{r4, r5, pc}
 800096c:	4604      	mov	r4, r0
    __HAL_RCC_UART4_CLK_ENABLE();
 800096e:	2500      	movs	r5, #0
 8000970:	9501      	str	r5, [sp, #4]
 8000972:	4b48      	ldr	r3, [pc, #288]	@ (8000a94 <HAL_UART_MspInit+0x150>)
 8000974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000976:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800097a:	641a      	str	r2, [r3, #64]	@ 0x40
 800097c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800097e:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8000982:	9201      	str	r2, [sp, #4]
 8000984:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	9502      	str	r5, [sp, #8]
 8000988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800098a:	f042 0201 	orr.w	r2, r2, #1
 800098e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800099a:	2303      	movs	r3, #3
 800099c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2202      	movs	r2, #2
 80009a0:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009a4:	2308      	movs	r3, #8
 80009a6:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	a907      	add	r1, sp, #28
 80009aa:	483b      	ldr	r0, [pc, #236]	@ (8000a98 <HAL_UART_MspInit+0x154>)
 80009ac:	f000 fc38 	bl	8001220 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80009b0:	483a      	ldr	r0, [pc, #232]	@ (8000a9c <HAL_UART_MspInit+0x158>)
 80009b2:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa0 <HAL_UART_MspInit+0x15c>)
 80009b4:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80009b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009ba:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009bc:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009be:	60c5      	str	r5, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c4:	6103      	str	r3, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c6:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c8:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80009ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ce:	61c3      	str	r3, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009d0:	6205      	str	r5, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80009d4:	f000 fa3e 	bl	8000e54 <HAL_DMA_Init>
 80009d8:	b958      	cbnz	r0, 80009f2 <HAL_UART_MspInit+0xae>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80009da:	4b30      	ldr	r3, [pc, #192]	@ (8000a9c <HAL_UART_MspInit+0x158>)
 80009dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80009de:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	4611      	mov	r1, r2
 80009e4:	2034      	movs	r0, #52	@ 0x34
 80009e6:	f000 f98d 	bl	8000d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009ea:	2034      	movs	r0, #52	@ 0x34
 80009ec:	f000 f99a 	bl	8000d24 <HAL_NVIC_EnableIRQ>
 80009f0:	e7ba      	b.n	8000968 <HAL_UART_MspInit+0x24>
      Error_Handler();
 80009f2:	f7ff fe81 	bl	80006f8 <Error_Handler>
 80009f6:	e7f0      	b.n	80009da <HAL_UART_MspInit+0x96>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f8:	2100      	movs	r1, #0
 80009fa:	9103      	str	r1, [sp, #12]
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <HAL_UART_MspInit+0x150>)
 80009fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a00:	f042 0210 	orr.w	r2, r2, #16
 8000a04:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a08:	f002 0210 	and.w	r2, r2, #16
 8000a0c:	9203      	str	r2, [sp, #12]
 8000a0e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	9104      	str	r1, [sp, #16]
 8000a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a14:	f042 0201 	orr.w	r2, r2, #1
 8000a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	9304      	str	r3, [sp, #16]
 8000a22:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a28:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a32:	2307      	movs	r3, #7
 8000a34:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	a907      	add	r1, sp, #28
 8000a38:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0x154>)
 8000a3a:	f000 fbf1 	bl	8001220 <HAL_GPIO_Init>
 8000a3e:	e793      	b.n	8000968 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	2100      	movs	r1, #0
 8000a42:	9105      	str	r1, [sp, #20]
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_UART_MspInit+0x150>)
 8000a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a48:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000a4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a50:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000a54:	9205      	str	r2, [sp, #20]
 8000a56:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	9106      	str	r1, [sp, #24]
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a5c:	f042 0201 	orr.w	r2, r2, #1
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	9306      	str	r3, [sp, #24]
 8000a6a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	a907      	add	r1, sp, #28
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <HAL_UART_MspInit+0x154>)
 8000a80:	f000 fbce 	bl	8001220 <HAL_GPIO_Init>
}
 8000a84:	e770      	b.n	8000968 <HAL_UART_MspInit+0x24>
 8000a86:	bf00      	nop
 8000a88:	40004c00 	.word	0x40004c00
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	20000490 	.word	0x20000490
 8000aa0:	40026040 	.word	0x40026040

08000aa4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler>

08000aa6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler>

08000aa8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler>

08000aaa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler>

08000aac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler>

08000aae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f8c5 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bd08      	pop	{r3, pc}

08000abc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000abc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000abe:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <DMA1_Stream2_IRQHandler+0xc>)
 8000ac0:	f000 fac0 	bl	8001044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000ac4:	bd08      	pop	{r3, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000490 	.word	0x20000490

08000acc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000acc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ace:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <UART4_IRQHandler+0xc>)
 8000ad0:	f001 fa62 	bl	8001f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ad4:	bd08      	pop	{r3, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000580 	.word	0x20000580

08000adc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	460c      	mov	r4, r1
 8000ae0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	e006      	b.n	8000af4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4621      	mov	r1, r4
 8000aec:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000af2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	dbf6      	blt.n	8000ae6 <_read+0xa>
  }

  return len;
}
 8000af8:	4630      	mov	r0, r6
 8000afa:	bd70      	pop	{r4, r5, r6, pc}

08000afc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b00:	4770      	bx	lr

08000b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b06:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000b08:	2000      	movs	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000b10:	2000      	movs	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b510      	push	{r4, lr}
 8000b16:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <_sbrk+0x38>)
 8000b1a:	490d      	ldr	r1, [pc, #52]	@ (8000b50 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <_sbrk+0x40>)
 8000b1e:	6800      	ldr	r0, [r0, #0]
 8000b20:	b140      	cbz	r0, 8000b34 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <_sbrk+0x40>)
 8000b24:	6800      	ldr	r0, [r0, #0]
 8000b26:	4403      	add	r3, r0
 8000b28:	1a52      	subs	r2, r2, r1
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d806      	bhi.n	8000b3c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b2e:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <_sbrk+0x40>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b32:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <_sbrk+0x40>)
 8000b36:	4c08      	ldr	r4, [pc, #32]	@ (8000b58 <_sbrk+0x44>)
 8000b38:	6004      	str	r4, [r0, #0]
 8000b3a:	e7f2      	b.n	8000b22 <_sbrk+0xe>
    errno = ENOMEM;
 8000b3c:	f001 fedc 	bl	80028f8 <__errno>
 8000b40:	230c      	movs	r3, #12
 8000b42:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b48:	e7f3      	b.n	8000b32 <_sbrk+0x1e>
 8000b4a:	bf00      	nop
 8000b4c:	20020000 	.word	0x20020000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	200005c8 	.word	0x200005c8
 8000b58:	20000720 	.word	0x20000720

08000b5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4a03      	ldr	r2, [pc, #12]	@ (8000b6c <SystemInit+0x10>)
 8000b5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b74:	f7ff fff2 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f001 feb1 	bl	8002904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fe55 	bl	8000850 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bb4:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8000bb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bbc:	2000071c 	.word	0x2000071c

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_InitTick+0x40>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_InitTick+0x44>)
 8000bd6:	6810      	ldr	r0, [r2, #0]
 8000bd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bdc:	f000 f8a6 	bl	8000d2c <HAL_SYSTICK_Config>
 8000be0:	b968      	cbnz	r0, 8000bfe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	2c0f      	cmp	r4, #15
 8000be4:	d901      	bls.n	8000bea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000be6:	2001      	movs	r0, #1
 8000be8:	e00a      	b.n	8000c00 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	4621      	mov	r1, r4
 8000bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf2:	f000 f887 	bl	8000d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_InitTick+0x48>)
 8000bf8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
}
 8000c00:	bd10      	pop	{r4, pc}
 8000c02:	bf00      	nop
 8000c04:	20000004 	.word	0x20000004
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_Init>:
{
 8000c10:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_Init+0x30>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c2a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f857 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f7ff ffc6 	bl	8000bc4 <HAL_InitTick>
  HAL_MspInit();
 8000c38:	f7ff fe68 	bl	800090c <HAL_MspInit>
}
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	bd08      	pop	{r3, pc}
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c44:	4a03      	ldr	r2, [pc, #12]	@ (8000c54 <HAL_IncTick+0x10>)
 8000c46:	6811      	ldr	r1, [r2, #0]
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_IncTick+0x14>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200005cc 	.word	0x200005cc
 8000c58:	20000004 	.word	0x20000004

08000c5c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	db07      	blt.n	8000c70 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c60:	f000 021f 	and.w	r2, r0, #31
 8000c64:	0940      	lsrs	r0, r0, #5
 8000c66:	2301      	movs	r3, #1
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	4a02      	ldr	r2, [pc, #8]	@ (8000c74 <__NVIC_EnableIRQ+0x18>)
 8000c6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	db08      	blt.n	8000c8e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	0109      	lsls	r1, r1, #4
 8000c7e:	b2c9      	uxtb	r1, r1
 8000c80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000c84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000c88:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000c8c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	f000 000f 	and.w	r0, r0, #15
 8000c92:	0109      	lsls	r1, r1, #4
 8000c94:	b2c9      	uxtb	r1, r1
 8000c96:	4b01      	ldr	r3, [pc, #4]	@ (8000c9c <__NVIC_SetPriority+0x24>)
 8000c98:	5419      	strb	r1, [r3, r0]
  }
}
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed14 	.word	0xe000ed14

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca6:	f1c0 0c07 	rsb	ip, r0, #7
 8000caa:	f1bc 0f04 	cmp.w	ip, #4
 8000cae:	bf28      	it	cs
 8000cb0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb4:	1d03      	adds	r3, r0, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d90f      	bls.n	8000cda <NVIC_EncodePriority+0x3a>
 8000cba:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000cc0:	fa0e f00c 	lsl.w	r0, lr, ip
 8000cc4:	ea21 0100 	bic.w	r1, r1, r0
 8000cc8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cca:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cce:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000cd2:	ea41 0002 	orr.w	r0, r1, r2
 8000cd6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e7ee      	b.n	8000cbc <NVIC_EncodePriority+0x1c>
	...

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ce2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	0200      	lsls	r0, r0, #8
 8000cee:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cfc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_NVIC_SetPriority+0x1c>)
 8000d0a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000d10:	f7ff ffc6 	bl	8000ca0 <NVIC_EncodePriority>
 8000d14:	4601      	mov	r1, r0
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff ffae 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	f7ff ff99 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000d2a:	bd08      	pop	{r3, pc}

08000d2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d32:	d20b      	bcs.n	8000d4c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d38:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <HAL_SYSTICK_Config+0x24>)
 8000d3c:	21f0      	movs	r1, #240	@ 0xf0
 8000d3e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d42:	2000      	movs	r0, #0
 8000d44:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	2207      	movs	r2, #7
 8000d48:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d4c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d54:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d56:	6805      	ldr	r5, [r0, #0]
 8000d58:	682c      	ldr	r4, [r5, #0]
 8000d5a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000d5e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d60:	6804      	ldr	r4, [r0, #0]
 8000d62:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d64:	6883      	ldr	r3, [r0, #8]
 8000d66:	2b40      	cmp	r3, #64	@ 0x40
 8000d68:	d005      	beq.n	8000d76 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000d6a:	6803      	ldr	r3, [r0, #0]
 8000d6c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000d6e:	6803      	ldr	r3, [r0, #0]
 8000d70:	60da      	str	r2, [r3, #12]
  }
}
 8000d72:	bc30      	pop	{r4, r5}
 8000d74:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000d76:	6803      	ldr	r3, [r0, #0]
 8000d78:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000d7a:	6803      	ldr	r3, [r0, #0]
 8000d7c:	60d9      	str	r1, [r3, #12]
 8000d7e:	e7f8      	b.n	8000d72 <DMA_SetConfig+0x1e>

08000d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d80:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d82:	6803      	ldr	r3, [r0, #0]
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	3910      	subs	r1, #16
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <DMA_CalcBaseAndBitshift+0x3c>)
 8000d8a:	fba2 4201 	umull	r4, r2, r2, r1
 8000d8e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d90:	4c0b      	ldr	r4, [pc, #44]	@ (8000dc0 <DMA_CalcBaseAndBitshift+0x40>)
 8000d92:	5ca2      	ldrb	r2, [r4, r2]
 8000d94:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000d96:	295f      	cmp	r1, #95	@ 0x5f
 8000d98:	d909      	bls.n	8000dae <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	3304      	adds	r3, #4
 8000da4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000da6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000db2:	f023 0303 	bic.w	r3, r3, #3
 8000db6:	6583      	str	r3, [r0, #88]	@ 0x58
 8000db8:	e7f5      	b.n	8000da6 <DMA_CalcBaseAndBitshift+0x26>
 8000dba:	bf00      	nop
 8000dbc:	aaaaaaab 	.word	0xaaaaaaab
 8000dc0:	08003774 	.word	0x08003774

08000dc4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dc4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dc6:	6982      	ldr	r2, [r0, #24]
 8000dc8:	b992      	cbnz	r2, 8000df0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d00a      	beq.n	8000de4 <DMA_CheckFifoParam+0x20>
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d002      	beq.n	8000dd8 <DMA_CheckFifoParam+0x14>
 8000dd2:	b10b      	cbz	r3, 8000dd8 <DMA_CheckFifoParam+0x14>
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dd8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000dda:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000dde:	d128      	bne.n	8000e32 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000de0:	2000      	movs	r0, #0
 8000de2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000de4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000de6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000dea:	d024      	beq.n	8000e36 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000dec:	2000      	movs	r0, #0
 8000dee:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000df0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000df4:	d009      	beq.n	8000e0a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d925      	bls.n	8000e46 <DMA_CheckFifoParam+0x82>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d125      	bne.n	8000e4a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dfe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000e00:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000e04:	d123      	bne.n	8000e4e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2000      	movs	r0, #0
 8000e08:	4770      	bx	lr
    switch (tmp)
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d803      	bhi.n	8000e16 <DMA_CheckFifoParam+0x52>
 8000e0e:	e8df f003 	tbb	[pc, r3]
 8000e12:	0414      	.short	0x0414
 8000e14:	0a14      	.short	0x0a14
 8000e16:	2000      	movs	r0, #0
 8000e18:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e1a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000e1c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000e20:	d10d      	bne.n	8000e3e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2000      	movs	r0, #0
 8000e24:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e26:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000e28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000e2c:	d009      	beq.n	8000e42 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000e2e:	2000      	movs	r0, #0
 8000e30:	4770      	bx	lr
        status = HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	4770      	bx	lr
        status = HAL_ERROR;
 8000e36:	2001      	movs	r0, #1
 8000e38:	4770      	bx	lr
      status = HAL_ERROR;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4770      	bx	lr
        status = HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	4770      	bx	lr
        status = HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
 8000e44:	4770      	bx	lr
      status = HAL_ERROR;
 8000e46:	2001      	movs	r0, #1
 8000e48:	4770      	bx	lr
    switch (tmp)
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_DMA_Init>:
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff fbee 	bl	8000638 <HAL_GetTick>
  if(hdma == NULL)
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d05b      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000e60:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	6813      	ldr	r3, [r2, #0]
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f012 0f01 	tst.w	r2, #1
 8000e80:	d00a      	beq.n	8000e98 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e82:	f7ff fbd9 	bl	8000638 <HAL_GetTick>
 8000e86:	1b43      	subs	r3, r0, r5
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d9f5      	bls.n	8000e78 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e90:	2003      	movs	r0, #3
 8000e92:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000e98:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e9a:	4920      	ldr	r1, [pc, #128]	@ (8000f1c <HAL_DMA_Init+0xc8>)
 8000e9c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e9e:	6862      	ldr	r2, [r4, #4]
 8000ea0:	68a0      	ldr	r0, [r4, #8]
 8000ea2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	6920      	ldr	r0, [r4, #16]
 8000eaa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eac:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eae:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb0:	69a0      	ldr	r0, [r4, #24]
 8000eb2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb8:	6a20      	ldr	r0, [r4, #32]
 8000eba:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ebc:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ebe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000ec0:	2904      	cmp	r1, #4
 8000ec2:	d01e      	beq.n	8000f02 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000ec4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000ec6:	6826      	ldr	r6, [r4, #0]
 8000ec8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000eca:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000ece:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000ed0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d107      	bne.n	8000ee6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000ed6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ed8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000eda:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000edc:	b11b      	cbz	r3, 8000ee6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff ff70 	bl	8000dc4 <DMA_CheckFifoParam>
 8000ee4:	b990      	cbnz	r0, 8000f0c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000ee6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff ff49 	bl	8000d80 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eee:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000ef0:	233f      	movs	r3, #63	@ 0x3f
 8000ef2:	4093      	lsls	r3, r2
 8000ef4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000f00:	e7c9      	b.n	8000e96 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000f04:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000f06:	4301      	orrs	r1, r0
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	e7db      	b.n	8000ec4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f0c:	2340      	movs	r3, #64	@ 0x40
 8000f0e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000f10:	2001      	movs	r0, #1
 8000f12:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8000f16:	e7be      	b.n	8000e96 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
 8000f1a:	e7bc      	b.n	8000e96 <HAL_DMA_Init+0x42>
 8000f1c:	f010803f 	.word	0xf010803f

08000f20 <HAL_DMA_Start_IT>:
{
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f24:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000f26:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000f2a:	2801      	cmp	r0, #1
 8000f2c:	d02b      	beq.n	8000f86 <HAL_DMA_Start_IT+0x66>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f34:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8000f38:	b2c0      	uxtb	r0, r0
 8000f3a:	2801      	cmp	r0, #1
 8000f3c:	d004      	beq.n	8000f48 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8000f44:	2002      	movs	r0, #2
}
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f4e:	2000      	movs	r0, #0
 8000f50:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f52:	4620      	mov	r0, r4
 8000f54:	f7ff fefe 	bl	8000d54 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f58:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f5a:	233f      	movs	r3, #63	@ 0x3f
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f60:	6822      	ldr	r2, [r4, #0]
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	f043 0316 	orr.w	r3, r3, #22
 8000f68:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f6c:	b123      	cbz	r3, 8000f78 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f6e:	6822      	ldr	r2, [r4, #0]
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	6813      	ldr	r3, [r2, #0]
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2000      	movs	r0, #0
 8000f84:	e7df      	b.n	8000f46 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8000f86:	2002      	movs	r0, #2
 8000f88:	e7dd      	b.n	8000f46 <HAL_DMA_Start_IT+0x26>

08000f8a <HAL_DMA_Abort>:
{
 8000f8a:	b570      	push	{r4, r5, r6, lr}
 8000f8c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fb52 	bl	8000638 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f94:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d006      	beq.n	8000fac <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8000fa8:	2001      	movs	r0, #1
}
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
 8000fac:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	f023 0316 	bic.w	r3, r3, #22
 8000fb6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	6953      	ldr	r3, [r2, #20]
 8000fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fc0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fc4:	b1e3      	cbz	r3, 8001000 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f023 0308 	bic.w	r3, r3, #8
 8000fce:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000fd0:	6822      	ldr	r2, [r4, #0]
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f013 0f01 	tst.w	r3, #1
 8000fe2:	d011      	beq.n	8001008 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fe4:	f7ff fb28 	bl	8000638 <HAL_GetTick>
 8000fe8:	1b43      	subs	r3, r0, r5
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d9f5      	bls.n	8000fda <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8000ffe:	e7d4      	b.n	8000faa <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001000:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1df      	bne.n	8000fc6 <HAL_DMA_Abort+0x3c>
 8001006:	e7e3      	b.n	8000fd0 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001008:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800100a:	233f      	movs	r3, #63	@ 0x3f
 800100c:	4093      	lsls	r3, r2
 800100e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001010:	2301      	movs	r3, #1
 8001012:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001016:	2000      	movs	r0, #0
 8001018:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 800101c:	e7c5      	b.n	8000faa <HAL_DMA_Abort+0x20>

0800101e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d003      	beq.n	8001030 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
 800102e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001030:	2305      	movs	r3, #5
 8001032:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001036:	6802      	ldr	r2, [r0, #0]
 8001038:	6813      	ldr	r3, [r2, #0]
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001040:	2000      	movs	r0, #0
}
 8001042:	4770      	bx	lr

08001044 <HAL_DMA_IRQHandler>:
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800104e:	4b72      	ldr	r3, [pc, #456]	@ (8001218 <HAL_DMA_IRQHandler+0x1d4>)
 8001050:	681d      	ldr	r5, [r3, #0]
 8001052:	4b72      	ldr	r3, [pc, #456]	@ (800121c <HAL_DMA_IRQHandler+0x1d8>)
 8001054:	fba3 3505 	umull	r3, r5, r3, r5
 8001058:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800105c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800105e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001060:	2308      	movs	r3, #8
 8001062:	4093      	lsls	r3, r2
 8001064:	4233      	tst	r3, r6
 8001066:	d010      	beq.n	800108a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001068:	6803      	ldr	r3, [r0, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f012 0f04 	tst.w	r2, #4
 8001070:	d00b      	beq.n	800108a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	f022 0204 	bic.w	r2, r2, #4
 8001078:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800107a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800107c:	2308      	movs	r3, #8
 800107e:	4093      	lsls	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001082:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800108a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800108c:	2301      	movs	r3, #1
 800108e:	4093      	lsls	r3, r2
 8001090:	4233      	tst	r3, r6
 8001092:	d009      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	6952      	ldr	r2, [r2, #20]
 8001098:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800109c:	d004      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800109e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010aa:	2304      	movs	r3, #4
 80010ac:	4093      	lsls	r3, r2
 80010ae:	4233      	tst	r3, r6
 80010b0:	d009      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	f012 0f02 	tst.w	r2, #2
 80010ba:	d004      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010bc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010c6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010c8:	2310      	movs	r3, #16
 80010ca:	4093      	lsls	r3, r2
 80010cc:	4233      	tst	r3, r6
 80010ce:	d024      	beq.n	800111a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f012 0f08 	tst.w	r2, #8
 80010d8:	d01f      	beq.n	800111a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010da:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80010e4:	d00d      	beq.n	8001102 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80010ec:	d104      	bne.n	80010f8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80010ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010f0:	b19b      	cbz	r3, 800111a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80010f2:	4620      	mov	r0, r4
 80010f4:	4798      	blx	r3
 80010f6:	e010      	b.n	800111a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010f8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80010fa:	b173      	cbz	r3, 800111a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80010fc:	4620      	mov	r0, r4
 80010fe:	4798      	blx	r3
 8001100:	e00b      	b.n	800111a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001108:	d103      	bne.n	8001112 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	f022 0208 	bic.w	r2, r2, #8
 8001110:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001112:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001114:	b10b      	cbz	r3, 800111a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001116:	4620      	mov	r0, r4
 8001118:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800111a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800111c:	2320      	movs	r3, #32
 800111e:	4093      	lsls	r3, r2
 8001120:	4233      	tst	r3, r6
 8001122:	d055      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	f012 0f10 	tst.w	r2, #16
 800112c:	d050      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800112e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001130:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b05      	cmp	r3, #5
 8001138:	d00e      	beq.n	8001158 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001142:	d033      	beq.n	80011ac <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800114a:	d12a      	bne.n	80011a2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800114c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03e      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001152:	4620      	mov	r0, r4
 8001154:	4798      	blx	r3
 8001156:	e03b      	b.n	80011d0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	f023 0316 	bic.w	r3, r3, #22
 8001160:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	6953      	ldr	r3, [r2, #20]
 8001166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800116a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800116c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800116e:	b1a3      	cbz	r3, 800119a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001170:	6822      	ldr	r2, [r4, #0]
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	f023 0308 	bic.w	r3, r3, #8
 8001178:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800117c:	233f      	movs	r3, #63	@ 0x3f
 800117e:	4093      	lsls	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001182:	2301      	movs	r3, #1
 8001184:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001188:	2300      	movs	r3, #0
 800118a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800118e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03f      	beq.n	8001214 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001194:	4620      	mov	r0, r4
 8001196:	4798      	blx	r3
        return;
 8001198:	e03c      	b.n	8001214 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e7      	bne.n	8001170 <HAL_DMA_IRQHandler+0x12c>
 80011a0:	e7eb      	b.n	800117a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80011a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80011a4:	b1a3      	cbz	r3, 80011d0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80011a6:	4620      	mov	r0, r4
 80011a8:	4798      	blx	r3
 80011aa:	e011      	b.n	80011d0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80011b2:	d109      	bne.n	80011c8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f022 0210 	bic.w	r2, r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80011bc:	2301      	movs	r3, #1
 80011be:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80011c2:	2300      	movs	r3, #0
 80011c4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80011c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80011ca:	b10b      	cbz	r3, 80011d0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80011cc:	4620      	mov	r0, r4
 80011ce:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011d2:	b1fb      	cbz	r3, 8001214 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011d6:	f013 0f01 	tst.w	r3, #1
 80011da:	d017      	beq.n	800120c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80011dc:	2305      	movs	r3, #5
 80011de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80011e2:	6822      	ldr	r2, [r4, #0]
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80011ec:	9b01      	ldr	r3, [sp, #4]
 80011ee:	3301      	adds	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	42ab      	cmp	r3, r5
 80011f4:	d804      	bhi.n	8001200 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f013 0f01 	tst.w	r3, #1
 80011fe:	d1f5      	bne.n	80011ec <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001200:	2301      	movs	r3, #1
 8001202:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001206:	2300      	movs	r3, #0
 8001208:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800120c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800120e:	b10b      	cbz	r3, 8001214 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001210:	4620      	mov	r0, r4
 8001212:	4798      	blx	r3
}
 8001214:	b003      	add	sp, #12
 8001216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	1b4e81b5 	.word	0x1b4e81b5

08001220 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001220:	2300      	movs	r3, #0
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f200 80e9 	bhi.w	80013fa <HAL_GPIO_Init+0x1da>
{
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	e065      	b.n	80012fa <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001234:	2403      	movs	r4, #3
 8001236:	fa04 f40e 	lsl.w	r4, r4, lr
 800123a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	68cc      	ldr	r4, [r1, #12]
 8001240:	fa04 f40e 	lsl.w	r4, r4, lr
 8001244:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001246:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124e:	684a      	ldr	r2, [r1, #4]
 8001250:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001254:	409a      	lsls	r2, r3
 8001256:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001258:	6042      	str	r2, [r0, #4]
 800125a:	e05c      	b.n	8001316 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125c:	08dc      	lsrs	r4, r3, #3
 800125e:	3408      	adds	r4, #8
 8001260:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001264:	f003 0507 	and.w	r5, r3, #7
 8001268:	00ad      	lsls	r5, r5, #2
 800126a:	f04f 0e0f 	mov.w	lr, #15
 800126e:	fa0e fe05 	lsl.w	lr, lr, r5
 8001272:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001276:	690a      	ldr	r2, [r1, #16]
 8001278:	40aa      	lsls	r2, r5
 800127a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800127e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001282:	e05c      	b.n	800133e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001284:	2207      	movs	r2, #7
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x6a>
 8001288:	2200      	movs	r2, #0
 800128a:	fa02 f20e 	lsl.w	r2, r2, lr
 800128e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	3402      	adds	r4, #2
 8001292:	4d5a      	ldr	r5, [pc, #360]	@ (80013fc <HAL_GPIO_Init+0x1dc>)
 8001294:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001298:	4a59      	ldr	r2, [pc, #356]	@ (8001400 <HAL_GPIO_Init+0x1e0>)
 800129a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800129c:	ea6f 020c 	mvn.w	r2, ip
 80012a0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a4:	684e      	ldr	r6, [r1, #4]
 80012a6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80012aa:	d001      	beq.n	80012b0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80012ac:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80012b0:	4c53      	ldr	r4, [pc, #332]	@ (8001400 <HAL_GPIO_Init+0x1e0>)
 80012b2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80012b4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ba:	684e      	ldr	r6, [r1, #4]
 80012bc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80012c0:	d001      	beq.n	80012c6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80012c2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80012c6:	4c4e      	ldr	r4, [pc, #312]	@ (8001400 <HAL_GPIO_Init+0x1e0>)
 80012c8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80012ca:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d0:	684e      	ldr	r6, [r1, #4]
 80012d2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80012d6:	d001      	beq.n	80012dc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80012d8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80012dc:	4c48      	ldr	r4, [pc, #288]	@ (8001400 <HAL_GPIO_Init+0x1e0>)
 80012de:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e4:	684d      	ldr	r5, [r1, #4]
 80012e6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80012ea:	d001      	beq.n	80012f0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80012ec:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80012f0:	4c43      	ldr	r4, [pc, #268]	@ (8001400 <HAL_GPIO_Init+0x1e0>)
 80012f2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f4:	3301      	adds	r3, #1
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d87d      	bhi.n	80013f6 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80012fa:	2201      	movs	r2, #1
 80012fc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	680c      	ldr	r4, [r1, #0]
 8001300:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001304:	ea32 0404 	bics.w	r4, r2, r4
 8001308:	d1f4      	bne.n	80012f4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	684c      	ldr	r4, [r1, #4]
 800130c:	f004 0403 	and.w	r4, r4, #3
 8001310:	3c01      	subs	r4, #1
 8001312:	2c01      	cmp	r4, #1
 8001314:	d98b      	bls.n	800122e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001316:	684a      	ldr	r2, [r1, #4]
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	2a03      	cmp	r2, #3
 800131e:	d009      	beq.n	8001334 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001320:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001322:	005d      	lsls	r5, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	40aa      	lsls	r2, r5
 8001328:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	688a      	ldr	r2, [r1, #8]
 800132e:	40aa      	lsls	r2, r5
 8001330:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001332:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001334:	684a      	ldr	r2, [r1, #4]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	2a02      	cmp	r2, #2
 800133c:	d08e      	beq.n	800125c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800133e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001340:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f20e 	lsl.w	r2, r2, lr
 800134a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134e:	684a      	ldr	r2, [r1, #4]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	fa02 f20e 	lsl.w	r2, r2, lr
 8001358:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800135a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	684a      	ldr	r2, [r1, #4]
 800135e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001362:	d0c7      	beq.n	80012f4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	2200      	movs	r2, #0
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <HAL_GPIO_Init+0x1e4>)
 800136a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800136c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001370:	6454      	str	r4, [r2, #68]	@ 0x44
 8001372:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001374:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001378:	9201      	str	r2, [sp, #4]
 800137a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800137c:	089c      	lsrs	r4, r3, #2
 800137e:	1ca5      	adds	r5, r4, #2
 8001380:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <HAL_GPIO_Init+0x1dc>)
 8001382:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001386:	f003 0e03 	and.w	lr, r3, #3
 800138a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f20e 	lsl.w	r2, r2, lr
 8001394:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001398:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <HAL_GPIO_Init+0x1e8>)
 800139a:	4290      	cmp	r0, r2
 800139c:	f43f af74 	beq.w	8001288 <HAL_GPIO_Init+0x68>
 80013a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013a4:	4290      	cmp	r0, r2
 80013a6:	d01a      	beq.n	80013de <HAL_GPIO_Init+0x1be>
 80013a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013ac:	4290      	cmp	r0, r2
 80013ae:	d018      	beq.n	80013e2 <HAL_GPIO_Init+0x1c2>
 80013b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013b4:	4290      	cmp	r0, r2
 80013b6:	d016      	beq.n	80013e6 <HAL_GPIO_Init+0x1c6>
 80013b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013bc:	4290      	cmp	r0, r2
 80013be:	d014      	beq.n	80013ea <HAL_GPIO_Init+0x1ca>
 80013c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013c4:	4290      	cmp	r0, r2
 80013c6:	d012      	beq.n	80013ee <HAL_GPIO_Init+0x1ce>
 80013c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d010      	beq.n	80013f2 <HAL_GPIO_Init+0x1d2>
 80013d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013d4:	4290      	cmp	r0, r2
 80013d6:	f43f af55 	beq.w	8001284 <HAL_GPIO_Init+0x64>
 80013da:	2208      	movs	r2, #8
 80013dc:	e755      	b.n	800128a <HAL_GPIO_Init+0x6a>
 80013de:	2201      	movs	r2, #1
 80013e0:	e753      	b.n	800128a <HAL_GPIO_Init+0x6a>
 80013e2:	2202      	movs	r2, #2
 80013e4:	e751      	b.n	800128a <HAL_GPIO_Init+0x6a>
 80013e6:	2203      	movs	r2, #3
 80013e8:	e74f      	b.n	800128a <HAL_GPIO_Init+0x6a>
 80013ea:	2204      	movs	r2, #4
 80013ec:	e74d      	b.n	800128a <HAL_GPIO_Init+0x6a>
 80013ee:	2205      	movs	r2, #5
 80013f0:	e74b      	b.n	800128a <HAL_GPIO_Init+0x6a>
 80013f2:	2206      	movs	r2, #6
 80013f4:	e749      	b.n	800128a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80013f6:	b002      	add	sp, #8
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	4770      	bx	lr
 80013fc:	40013800 	.word	0x40013800
 8001400:	40013c00 	.word	0x40013c00
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800140c:	b10a      	cbz	r2, 8001412 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	6181      	str	r1, [r0, #24]
 8001410:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001412:	0409      	lsls	r1, r1, #16
 8001414:	6181      	str	r1, [r0, #24]
  }
}
 8001416:	4770      	bx	lr

08001418 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	2800      	cmp	r0, #0
 800141a:	f000 81e0 	beq.w	80017de <HAL_RCC_OscConfig+0x3c6>
{
 800141e:	b570      	push	{r4, r5, r6, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	6803      	ldr	r3, [r0, #0]
 8001426:	f013 0f01 	tst.w	r3, #1
 800142a:	d03b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800142c:	4b9f      	ldr	r3, [pc, #636]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b04      	cmp	r3, #4
 8001436:	d02c      	beq.n	8001492 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001438:	4b9c      	ldr	r3, [pc, #624]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001440:	2b08      	cmp	r3, #8
 8001442:	d021      	beq.n	8001488 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800144a:	d04f      	beq.n	80014ec <HAL_RCC_OscConfig+0xd4>
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001450:	d052      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe0>
 8001452:	4b96      	ldr	r3, [pc, #600]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001462:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d050      	beq.n	800150c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff f8e5 	bl	8000638 <HAL_GetTick>
 800146e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001470:	4b8e      	ldr	r3, [pc, #568]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001478:	d114      	bne.n	80014a4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147a:	f7ff f8dd 	bl	8000638 <HAL_GetTick>
 800147e:	1b40      	subs	r0, r0, r5
 8001480:	2864      	cmp	r0, #100	@ 0x64
 8001482:	d9f5      	bls.n	8001470 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001484:	2003      	movs	r0, #3
 8001486:	e1b1      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001488:	4b88      	ldr	r3, [pc, #544]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001490:	d0d8      	beq.n	8001444 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	4b86      	ldr	r3, [pc, #536]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800149a:	d003      	beq.n	80014a4 <HAL_RCC_OscConfig+0x8c>
 800149c:	6863      	ldr	r3, [r4, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 819f 	beq.w	80017e2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	f013 0f02 	tst.w	r3, #2
 80014aa:	d054      	beq.n	8001556 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ac:	4b7f      	ldr	r3, [pc, #508]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f013 0f0c 	tst.w	r3, #12
 80014b4:	d03e      	beq.n	8001534 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b6:	4b7d      	ldr	r3, [pc, #500]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d033      	beq.n	800152a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014c2:	68e3      	ldr	r3, [r4, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d068      	beq.n	800159a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b79      	ldr	r3, [pc, #484]	@ (80016b0 <HAL_RCC_OscConfig+0x298>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff f8b3 	bl	8000638 <HAL_GetTick>
 80014d2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b75      	ldr	r3, [pc, #468]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f013 0f02 	tst.w	r3, #2
 80014dc:	d154      	bne.n	8001588 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff f8ab 	bl	8000638 <HAL_GetTick>
 80014e2:	1b40      	subs	r0, r0, r5
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d9f5      	bls.n	80014d4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	e17f      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	4a6f      	ldr	r2, [pc, #444]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e7b5      	b.n	8001464 <HAL_RCC_OscConfig+0x4c>
 80014f8:	4b6c      	ldr	r3, [pc, #432]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e7ab      	b.n	8001464 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800150c:	f7ff f894 	bl	8000638 <HAL_GetTick>
 8001510:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800151a:	d0c3      	beq.n	80014a4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff f88c 	bl	8000638 <HAL_GetTick>
 8001520:	1b40      	subs	r0, r0, r5
 8001522:	2864      	cmp	r0, #100	@ 0x64
 8001524:	d9f5      	bls.n	8001512 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001526:	2003      	movs	r0, #3
 8001528:	e160      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b60      	ldr	r3, [pc, #384]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001532:	d1c6      	bne.n	80014c2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001534:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f013 0f02 	tst.w	r3, #2
 800153c:	d003      	beq.n	8001546 <HAL_RCC_OscConfig+0x12e>
 800153e:	68e3      	ldr	r3, [r4, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	f040 8150 	bne.w	80017e6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4a59      	ldr	r2, [pc, #356]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800154e:	6921      	ldr	r1, [r4, #16]
 8001550:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001554:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	f013 0f08 	tst.w	r3, #8
 800155c:	d042      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800155e:	6963      	ldr	r3, [r4, #20]
 8001560:	b36b      	cbz	r3, 80015be <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b53      	ldr	r3, [pc, #332]	@ (80016b0 <HAL_RCC_OscConfig+0x298>)
 8001564:	2201      	movs	r2, #1
 8001566:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff f865 	bl	8000638 <HAL_GetTick>
 800156e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001570:	4b4e      	ldr	r3, [pc, #312]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001574:	f013 0f02 	tst.w	r3, #2
 8001578:	d134      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff f85d 	bl	8000638 <HAL_GetTick>
 800157e:	1b40      	subs	r0, r0, r5
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e131      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4a48      	ldr	r2, [pc, #288]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001590:	6921      	ldr	r1, [r4, #16]
 8001592:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e7dd      	b.n	8001556 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b45      	ldr	r3, [pc, #276]	@ (80016b0 <HAL_RCC_OscConfig+0x298>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a0:	f7ff f84a 	bl	8000638 <HAL_GetTick>
 80015a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f013 0f02 	tst.w	r3, #2
 80015ae:	d0d2      	beq.n	8001556 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff f842 	bl	8000638 <HAL_GetTick>
 80015b4:	1b40      	subs	r0, r0, r5
 80015b6:	2802      	cmp	r0, #2
 80015b8:	d9f5      	bls.n	80015a6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80015ba:	2003      	movs	r0, #3
 80015bc:	e116      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015be:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <HAL_RCC_OscConfig+0x298>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff f837 	bl	8000638 <HAL_GetTick>
 80015ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d0:	f013 0f02 	tst.w	r3, #2
 80015d4:	d006      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff f82f 	bl	8000638 <HAL_GetTick>
 80015da:	1b40      	subs	r0, r0, r5
 80015dc:	2802      	cmp	r0, #2
 80015de:	d9f5      	bls.n	80015cc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e103      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	f013 0f04 	tst.w	r3, #4
 80015ea:	d077      	beq.n	80016dc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ec:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80015f4:	d133      	bne.n	800165e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 80015fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001602:	641a      	str	r2, [r3, #64]	@ 0x40
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800160e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_RCC_OscConfig+0x29c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001618:	d023      	beq.n	8001662 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	68a3      	ldr	r3, [r4, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d034      	beq.n	800168a <HAL_RCC_OscConfig+0x272>
 8001620:	2b05      	cmp	r3, #5
 8001622:	d038      	beq.n	8001696 <HAL_RCC_OscConfig+0x27e>
 8001624:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001626:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	671a      	str	r2, [r3, #112]	@ 0x70
 800162e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001630:	f022 0204 	bic.w	r2, r2, #4
 8001634:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001636:	68a3      	ldr	r3, [r4, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d03d      	beq.n	80016b8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7fe fffc 	bl	8000638 <HAL_GetTick>
 8001640:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001646:	f013 0f02 	tst.w	r3, #2
 800164a:	d146      	bne.n	80016da <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7fe fff4 	bl	8000638 <HAL_GetTick>
 8001650:	1b80      	subs	r0, r0, r6
 8001652:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001656:	4298      	cmp	r0, r3
 8001658:	d9f3      	bls.n	8001642 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800165a:	2003      	movs	r0, #3
 800165c:	e0c6      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2500      	movs	r5, #0
 8001660:	e7d6      	b.n	8001610 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <HAL_RCC_OscConfig+0x29c>)
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800166c:	f7fe ffe4 	bl	8000638 <HAL_GetTick>
 8001670:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_RCC_OscConfig+0x29c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800167a:	d1ce      	bne.n	800161a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167c:	f7fe ffdc 	bl	8000638 <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f5      	bls.n	8001672 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
 8001688:	e0b0      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 800168c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	@ 0x70
 8001694:	e7cf      	b.n	8001636 <HAL_RCC_OscConfig+0x21e>
 8001696:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_RCC_OscConfig+0x294>)
 8001698:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800169a:	f042 0204 	orr.w	r2, r2, #4
 800169e:	671a      	str	r2, [r3, #112]	@ 0x70
 80016a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80016a8:	e7c5      	b.n	8001636 <HAL_RCC_OscConfig+0x21e>
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	42470000 	.word	0x42470000
 80016b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7fe ffbe 	bl	8000638 <HAL_GetTick>
 80016bc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016be:	4b52      	ldr	r3, [pc, #328]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	f013 0f02 	tst.w	r3, #2
 80016c6:	d008      	beq.n	80016da <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7fe ffb6 	bl	8000638 <HAL_GetTick>
 80016cc:	1b80      	subs	r0, r0, r6
 80016ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016d2:	4298      	cmp	r0, r3
 80016d4:	d9f3      	bls.n	80016be <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80016d6:	2003      	movs	r0, #3
 80016d8:	e088      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016da:	b9ed      	cbnz	r5, 8001718 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016dc:	69a3      	ldr	r3, [r4, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8083 	beq.w	80017ea <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e4:	4a48      	ldr	r2, [pc, #288]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 80016e6:	6892      	ldr	r2, [r2, #8]
 80016e8:	f002 020c 	and.w	r2, r2, #12
 80016ec:	2a08      	cmp	r2, #8
 80016ee:	d051      	beq.n	8001794 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d017      	beq.n	8001724 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b45      	ldr	r3, [pc, #276]	@ (800180c <HAL_RCC_OscConfig+0x3f4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7fe ff9d 	bl	8000638 <HAL_GetTick>
 80016fe:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001708:	d042      	beq.n	8001790 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7fe ff95 	bl	8000638 <HAL_GetTick>
 800170e:	1b00      	subs	r0, r0, r4
 8001710:	2802      	cmp	r0, #2
 8001712:	d9f5      	bls.n	8001700 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001714:	2003      	movs	r0, #3
 8001716:	e069      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001718:	4a3b      	ldr	r2, [pc, #236]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 800171a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	@ 0x40
 8001722:	e7db      	b.n	80016dc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	@ (800180c <HAL_RCC_OscConfig+0x3f4>)
 8001726:	2200      	movs	r2, #0
 8001728:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800172a:	f7fe ff85 	bl	8000638 <HAL_GetTick>
 800172e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001730:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001738:	d006      	beq.n	8001748 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7fe ff7d 	bl	8000638 <HAL_GetTick>
 800173e:	1b40      	subs	r0, r0, r5
 8001740:	2802      	cmp	r0, #2
 8001742:	d9f5      	bls.n	8001730 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001744:	2003      	movs	r0, #3
 8001746:	e051      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001748:	69e3      	ldr	r3, [r4, #28]
 800174a:	6a22      	ldr	r2, [r4, #32]
 800174c:	4313      	orrs	r3, r2
 800174e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001750:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001754:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001756:	0852      	lsrs	r2, r2, #1
 8001758:	3a01      	subs	r2, #1
 800175a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800175e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001760:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001764:	4a28      	ldr	r2, [pc, #160]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 8001766:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_RCC_OscConfig+0x3f4>)
 800176a:	2201      	movs	r2, #1
 800176c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800176e:	f7fe ff63 	bl	8000638 <HAL_GetTick>
 8001772:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7fe ff5b 	bl	8000638 <HAL_GetTick>
 8001782:	1b00      	subs	r0, r0, r4
 8001784:	2802      	cmp	r0, #2
 8001786:	d9f5      	bls.n	8001774 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001788:	2003      	movs	r0, #3
 800178a:	e02f      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2000      	movs	r0, #0
 800178e:	e02d      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
 8001790:	2000      	movs	r0, #0
 8001792:	e02b      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001794:	2b01      	cmp	r3, #1
 8001796:	d02b      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_RCC_OscConfig+0x3f0>)
 800179a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80017a0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a2:	4291      	cmp	r1, r2
 80017a4:	d126      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017aa:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	428a      	cmp	r2, r1
 80017ae:	d123      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80017b6:	401a      	ands	r2, r3
 80017b8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80017bc:	d11e      	bne.n	80017fc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017be:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80017c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80017c4:	0852      	lsrs	r2, r2, #1
 80017c6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ce:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80017d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80017d8:	d114      	bne.n	8001804 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	e006      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80017de:	2001      	movs	r0, #1
}
 80017e0:	4770      	bx	lr
        return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e002      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80017ea:	2000      	movs	r0, #0
}
 80017ec:	b002      	add	sp, #8
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80017f0:	2001      	movs	r0, #1
 80017f2:	e7fb      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e7f9      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
 80017f8:	2001      	movs	r0, #1
 80017fa:	e7f7      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
 80017fc:	2001      	movs	r0, #1
 80017fe:	e7f5      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
 8001800:	2001      	movs	r0, #1
 8001802:	e7f3      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
 8001804:	2001      	movs	r0, #1
 8001806:	e7f1      	b.n	80017ec <HAL_RCC_OscConfig+0x3d4>
 8001808:	40023800 	.word	0x40023800
 800180c:	42470000 	.word	0x42470000

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001812:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d001      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181e:	482f      	ldr	r0, [pc, #188]	@ (80018dc <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001820:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001822:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001830:	d02c      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001834:	6858      	ldr	r0, [r3, #4]
 8001836:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800183a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800183e:	ebbc 0c00 	subs.w	ip, ip, r0
 8001842:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001846:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800184a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800184e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001852:	ebb1 010c 	subs.w	r1, r1, ip
 8001856:	eb63 030e 	sbc.w	r3, r3, lr
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001860:	00c9      	lsls	r1, r1, #3
 8001862:	eb11 0c00 	adds.w	ip, r1, r0
 8001866:	f143 0300 	adc.w	r3, r3, #0
 800186a:	0299      	lsls	r1, r3, #10
 800186c:	2300      	movs	r3, #0
 800186e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001872:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001876:	f7fe fd03 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001886:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800188a:	e7c9      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800188e:	6858      	ldr	r0, [r3, #4]
 8001890:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001894:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001898:	ebbc 0c00 	subs.w	ip, ip, r0
 800189c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80018a0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80018a4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80018a8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80018ac:	ebb1 010c 	subs.w	r1, r1, ip
 80018b0:	eb63 030e 	sbc.w	r3, r3, lr
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ba:	00c9      	lsls	r1, r1, #3
 80018bc:	eb11 0c00 	adds.w	ip, r1, r0
 80018c0:	f143 0300 	adc.w	r3, r3, #0
 80018c4:	0299      	lsls	r1, r3, #10
 80018c6:	2300      	movs	r3, #0
 80018c8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80018cc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80018d0:	f7fe fcd6 	bl	8000280 <__aeabi_uldivmod>
 80018d4:	e7d1      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x6a>
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	00f42400 	.word	0x00f42400

080018e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f000 809b 	beq.w	8001a1c <HAL_RCC_ClockConfig+0x13c>
{
 80018e6:	b570      	push	{r4, r5, r6, lr}
 80018e8:	460d      	mov	r5, r1
 80018ea:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001a2c <HAL_RCC_ClockConfig+0x14c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	428b      	cmp	r3, r1
 80018f6:	d208      	bcs.n	800190a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	b2cb      	uxtb	r3, r1
 80018fa:	4a4c      	ldr	r2, [pc, #304]	@ (8001a2c <HAL_RCC_ClockConfig+0x14c>)
 80018fc:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	428b      	cmp	r3, r1
 8001906:	f040 808b 	bne.w	8001a20 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f013 0f02 	tst.w	r3, #2
 8001910:	d017      	beq.n	8001942 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001912:	f013 0f04 	tst.w	r3, #4
 8001916:	d004      	beq.n	8001922 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001918:	4a45      	ldr	r2, [pc, #276]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 800191a:	6893      	ldr	r3, [r2, #8]
 800191c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001920:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	f013 0f08 	tst.w	r3, #8
 8001928:	d004      	beq.n	8001934 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192a:	4a41      	ldr	r2, [pc, #260]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 800192c:	6893      	ldr	r3, [r2, #8]
 800192e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001932:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4a3e      	ldr	r2, [pc, #248]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 8001936:	6893      	ldr	r3, [r2, #8]
 8001938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800193c:	68a1      	ldr	r1, [r4, #8]
 800193e:	430b      	orrs	r3, r1
 8001940:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	f013 0f01 	tst.w	r3, #1
 8001948:	d032      	beq.n	80019b0 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d021      	beq.n	8001994 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001950:	1e9a      	subs	r2, r3, #2
 8001952:	2a01      	cmp	r2, #1
 8001954:	d925      	bls.n	80019a2 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4a36      	ldr	r2, [pc, #216]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	f012 0f02 	tst.w	r2, #2
 800195e:	d061      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001960:	4933      	ldr	r1, [pc, #204]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 8001962:	688a      	ldr	r2, [r1, #8]
 8001964:	f022 0203 	bic.w	r2, r2, #3
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800196c:	f7fe fe64 	bl	8000638 <HAL_GetTick>
 8001970:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	6862      	ldr	r2, [r4, #4]
 800197c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001980:	d016      	beq.n	80019b0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7fe fe59 	bl	8000638 <HAL_GetTick>
 8001986:	1b80      	subs	r0, r0, r6
 8001988:	f241 3388 	movw	r3, #5000	@ 0x1388
 800198c:	4298      	cmp	r0, r3
 800198e:	d9f0      	bls.n	8001972 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001990:	2003      	movs	r0, #3
 8001992:	e042      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001994:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800199c:	d1e0      	bne.n	8001960 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800199e:	2001      	movs	r0, #1
 80019a0:	e03b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80019aa:	d1d9      	bne.n	8001960 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
 80019ae:	e034      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_RCC_ClockConfig+0x14c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	42ab      	cmp	r3, r5
 80019ba:	d907      	bls.n	80019cc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019bc:	b2ea      	uxtb	r2, r5
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_RCC_ClockConfig+0x14c>)
 80019c0:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	42ab      	cmp	r3, r5
 80019ca:	d12d      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	f013 0f04 	tst.w	r3, #4
 80019d2:	d006      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d4:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 80019d6:	6893      	ldr	r3, [r2, #8]
 80019d8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80019dc:	68e1      	ldr	r1, [r4, #12]
 80019de:	430b      	orrs	r3, r1
 80019e0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f013 0f08 	tst.w	r3, #8
 80019e8:	d007      	beq.n	80019fa <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ea:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 80019ec:	6893      	ldr	r3, [r2, #8]
 80019ee:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80019f2:	6921      	ldr	r1, [r4, #16]
 80019f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019f8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fa:	f7ff ff09 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_RCC_ClockConfig+0x150>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a06:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <HAL_RCC_ClockConfig+0x154>)
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	40d8      	lsrs	r0, r3
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_RCC_ClockConfig+0x158>)
 8001a0e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_RCC_ClockConfig+0x15c>)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	f7ff f8d6 	bl	8000bc4 <HAL_InitTick>
  return HAL_OK;
 8001a18:	2000      	movs	r0, #0
}
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
}
 8001a1e:	4770      	bx	lr
      return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
 8001a22:	e7fa      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
 8001a26:	e7f8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e7f6      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13a>
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08003764 	.word	0x08003764
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a40:	4b01      	ldr	r3, [pc, #4]	@ (8001a48 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a4e:	f7ff fff7 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a5a:	4a03      	ldr	r2, [pc, #12]	@ (8001a68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a5e:	40d8      	lsrs	r0, r3
 8001a60:	bd08      	pop	{r3, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	0800375c 	.word	0x0800375c

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6e:	f7ff ffe7 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a7a:	4a03      	ldr	r2, [pc, #12]	@ (8001a88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a7e:	40d8      	lsrs	r0, r3
 8001a80:	bd08      	pop	{r3, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	0800375c 	.word	0x0800375c

08001a8c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001a8c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a8e:	f102 030c 	add.w	r3, r2, #12
 8001a92:	e853 3f00 	ldrex	r3, [r3]
 8001a96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9a:	320c      	adds	r2, #12
 8001a9c:	e842 3100 	strex	r1, r3, [r2]
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	d1f3      	bne.n	8001a8c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8001aaa:	4770      	bx	lr

08001aac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001aac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aae:	f102 030c 	add.w	r3, r2, #12
 8001ab2:	e853 3f00 	ldrex	r3, [r3]
 8001ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aba:	320c      	adds	r2, #12
 8001abc:	e842 3100 	strex	r1, r3, [r2]
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d1f3      	bne.n	8001aac <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac6:	f102 0314 	add.w	r3, r2, #20
 8001aca:	e853 3f00 	ldrex	r3, [r3]
 8001ace:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad2:	3214      	adds	r2, #20
 8001ad4:	e842 3100 	strex	r1, r3, [r2]
 8001ad8:	2900      	cmp	r1, #0
 8001ada:	d1f3      	bne.n	8001ac4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001adc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001aec:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001aee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001af0:	f102 030c 	add.w	r3, r2, #12
 8001af4:	e853 3f00 	ldrex	r3, [r3]
 8001af8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001afc:	320c      	adds	r2, #12
 8001afe:	e842 3100 	strex	r1, r3, [r2]
 8001b02:	2900      	cmp	r1, #0
 8001b04:	d1f3      	bne.n	8001aee <UART_EndRxTransfer+0x42>
 8001b06:	e7ec      	b.n	8001ae2 <UART_EndRxTransfer+0x36>

08001b08 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b08:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b21      	cmp	r3, #33	@ 0x21
 8001b10:	d001      	beq.n	8001b16 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001b12:	2002      	movs	r0, #2
  }
}
 8001b14:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b16:	6883      	ldr	r3, [r0, #8]
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b1c:	d017      	beq.n	8001b4e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b1e:	6a03      	ldr	r3, [r0, #32]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	6202      	str	r2, [r0, #32]
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001b2a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8001b34:	b94b      	cbnz	r3, 8001b4a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b36:	6802      	ldr	r2, [r0, #0]
 8001b38:	68d3      	ldr	r3, [r2, #12]
 8001b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b3e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b40:	6802      	ldr	r2, [r0, #0]
 8001b42:	68d3      	ldr	r3, [r2, #12]
 8001b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b48:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4e:	6903      	ldr	r3, [r0, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e4      	bne.n	8001b1e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001b54:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	6802      	ldr	r2, [r0, #0]
 8001b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001b60:	6a03      	ldr	r3, [r0, #32]
 8001b62:	3302      	adds	r3, #2
 8001b64:	6203      	str	r3, [r0, #32]
 8001b66:	e7e0      	b.n	8001b2a <UART_Transmit_IT+0x22>

08001b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b6c:	6802      	ldr	r2, [r0, #0]
 8001b6e:	6913      	ldr	r3, [r2, #16]
 8001b70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b74:	68c1      	ldr	r1, [r0, #12]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b7a:	6883      	ldr	r3, [r0, #8]
 8001b7c:	6902      	ldr	r2, [r0, #16]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	6943      	ldr	r3, [r0, #20]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	69c3      	ldr	r3, [r0, #28]
 8001b86:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001b88:	6801      	ldr	r1, [r0, #0]
 8001b8a:	68cb      	ldr	r3, [r1, #12]
 8001b8c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001b90:	f023 030c 	bic.w	r3, r3, #12
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b98:	6802      	ldr	r2, [r0, #0]
 8001b9a:	6953      	ldr	r3, [r2, #20]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba0:	6981      	ldr	r1, [r0, #24]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <UART_SetConfig+0x108>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d006      	beq.n	8001bbc <UART_SetConfig+0x54>
 8001bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d002      	beq.n	8001bbc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bb6:	f7ff ff49 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8001bba:	e001      	b.n	8001bc0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bbc:	f7ff ff56 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc0:	69e3      	ldr	r3, [r4, #28]
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc6:	d029      	beq.n	8001c1c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	1803      	adds	r3, r0, r0
 8001bcc:	4149      	adcs	r1, r1
 8001bce:	181b      	adds	r3, r3, r0
 8001bd0:	f141 0100 	adc.w	r1, r1, #0
 8001bd4:	00c9      	lsls	r1, r1, #3
 8001bd6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1818      	adds	r0, r3, r0
 8001bde:	6863      	ldr	r3, [r4, #4]
 8001be0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001be4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001be8:	f141 0100 	adc.w	r1, r1, #0
 8001bec:	f7fe fb48 	bl	8000280 <__aeabi_uldivmod>
 8001bf0:	4a20      	ldr	r2, [pc, #128]	@ (8001c74 <UART_SetConfig+0x10c>)
 8001bf2:	fba2 3100 	umull	r3, r1, r2, r0
 8001bf6:	0949      	lsrs	r1, r1, #5
 8001bf8:	2364      	movs	r3, #100	@ 0x64
 8001bfa:	fb03 0311 	mls	r3, r3, r1, r0
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	3332      	adds	r3, #50	@ 0x32
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	6821      	ldr	r1, [r4, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }
}
 8001c1a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	1802      	adds	r2, r0, r0
 8001c20:	eb43 0103 	adc.w	r1, r3, r3
 8001c24:	1812      	adds	r2, r2, r0
 8001c26:	f141 0100 	adc.w	r1, r1, #0
 8001c2a:	00c9      	lsls	r1, r1, #3
 8001c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c30:	00d2      	lsls	r2, r2, #3
 8001c32:	1810      	adds	r0, r2, r0
 8001c34:	f141 0100 	adc.w	r1, r1, #0
 8001c38:	6862      	ldr	r2, [r4, #4]
 8001c3a:	1892      	adds	r2, r2, r2
 8001c3c:	415b      	adcs	r3, r3
 8001c3e:	f7fe fb1f 	bl	8000280 <__aeabi_uldivmod>
 8001c42:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <UART_SetConfig+0x10c>)
 8001c44:	fba2 3100 	umull	r3, r1, r2, r0
 8001c48:	0949      	lsrs	r1, r1, #5
 8001c4a:	2364      	movs	r3, #100	@ 0x64
 8001c4c:	fb03 0311 	mls	r3, r3, r1, r0
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	3332      	adds	r3, #50	@ 0x32
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	005a      	lsls	r2, r3, #1
 8001c5c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001c60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	6821      	ldr	r1, [r4, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
 8001c6e:	e7d4      	b.n	8001c1a <UART_SetConfig+0xb2>
 8001c70:	40011000 	.word	0x40011000
 8001c74:	51eb851f 	.word	0x51eb851f

08001c78 <UART_WaitOnFlagUntilTimeout>:
{
 8001c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	4605      	mov	r5, r0
 8001c80:	460e      	mov	r6, r1
 8001c82:	4617      	mov	r7, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c8a:	682b      	ldr	r3, [r5, #0]
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	ea36 0404 	bics.w	r4, r6, r4
 8001c92:	bf0c      	ite	eq
 8001c94:	2401      	moveq	r4, #1
 8001c96:	2400      	movne	r4, #0
 8001c98:	42bc      	cmp	r4, r7
 8001c9a:	d128      	bne.n	8001cee <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001ca0:	d0f3      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca2:	f7fe fcc9 	bl	8000638 <HAL_GetTick>
 8001ca6:	eba0 0009 	sub.w	r0, r0, r9
 8001caa:	4540      	cmp	r0, r8
 8001cac:	d823      	bhi.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x7e>
 8001cae:	f1b8 0f00 	cmp.w	r8, #0
 8001cb2:	d022      	beq.n	8001cfa <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	f012 0f04 	tst.w	r2, #4
 8001cbc:	d0e5      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x12>
 8001cbe:	2e80      	cmp	r6, #128	@ 0x80
 8001cc0:	d0e3      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x12>
 8001cc2:	2e40      	cmp	r6, #64	@ 0x40
 8001cc4:	d0e1      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f012 0f08 	tst.w	r2, #8
 8001ccc:	d0dd      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cce:	2400      	movs	r4, #0
 8001cd0:	9401      	str	r4, [sp, #4]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	9201      	str	r2, [sp, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f7ff fee5 	bl	8001aac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001ce6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	e000      	b.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	e7fa      	b.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0x78>
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	e7f8      	b.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0x78>

08001cfe <HAL_UART_Init>:
  if (huart == NULL)
 8001cfe:	b360      	cbz	r0, 8001d5a <HAL_UART_Init+0x5c>
{
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d04:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001d08:	b313      	cbz	r3, 8001d50 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d0a:	2324      	movs	r3, #36	@ 0x24
 8001d0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	68d3      	ldr	r3, [r2, #12]
 8001d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d18:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ff24 	bl	8001b68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	6913      	ldr	r3, [r2, #16]
 8001d24:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001d28:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	6953      	ldr	r3, [r2, #20]
 8001d2e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001d32:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	68d3      	ldr	r3, [r2, #12]
 8001d38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d3c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3e:	2000      	movs	r0, #0
 8001d40:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d42:	2320      	movs	r3, #32
 8001d44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d4c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001d4e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001d50:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001d54:	f7fe fdf6 	bl	8000944 <HAL_UART_MspInit>
 8001d58:	e7d7      	b.n	8001d0a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_UART_Transmit>:
{
 8001d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d66:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d156      	bne.n	8001e1e <HAL_UART_Transmit+0xc0>
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d055      	beq.n	8001e26 <HAL_UART_Transmit+0xc8>
 8001d7a:	b90a      	cbnz	r2, 8001d80 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	e04f      	b.n	8001e20 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d84:	2321      	movs	r3, #33	@ 0x21
 8001d86:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001d8a:	f7fe fc55 	bl	8000638 <HAL_GetTick>
 8001d8e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001d90:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d94:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d98:	68a3      	ldr	r3, [r4, #8]
 8001d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d9e:	d002      	beq.n	8001da6 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001da0:	f04f 0800 	mov.w	r8, #0
 8001da4:	e014      	b.n	8001dd0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da6:	6923      	ldr	r3, [r4, #16]
 8001da8:	b32b      	cbz	r3, 8001df6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001daa:	f04f 0800 	mov.w	r8, #0
 8001dae:	e00f      	b.n	8001dd0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001db0:	2320      	movs	r3, #32
 8001db2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e032      	b.n	8001e20 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dba:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001dc6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dd0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b193      	cbz	r3, 8001dfc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd6:	9600      	str	r6, [sp, #0]
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ff4a 	bl	8001c78 <UART_WaitOnFlagUntilTimeout>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1e3      	bne.n	8001db0 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001de8:	2d00      	cmp	r5, #0
 8001dea:	d0e6      	beq.n	8001dba <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dec:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001df4:	e7e7      	b.n	8001dc6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001df6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001df8:	2500      	movs	r5, #0
 8001dfa:	e7e9      	b.n	8001dd0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dfc:	9600      	str	r6, [sp, #0]
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	2140      	movs	r1, #64	@ 0x40
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff ff37 	bl	8001c78 <UART_WaitOnFlagUntilTimeout>
 8001e0a:	b918      	cbnz	r0, 8001e14 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001e12:	e005      	b.n	8001e20 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001e14:	2320      	movs	r3, #32
 8001e16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	e000      	b.n	8001e20 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001e1e:	2002      	movs	r0, #2
}
 8001e20:	b002      	add	sp, #8
 8001e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e7fa      	b.n	8001e20 <HAL_UART_Transmit+0xc2>

08001e2a <HAL_UART_TxCpltCallback>:
}
 8001e2a:	4770      	bx	lr

08001e2c <UART_EndTransmit_IT>:
{
 8001e2c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e2e:	6801      	ldr	r1, [r0, #0]
 8001e30:	68ca      	ldr	r2, [r1, #12]
 8001e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e36:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8001e3e:	f7ff fff4 	bl	8001e2a <HAL_UART_TxCpltCallback>
}
 8001e42:	2000      	movs	r0, #0
 8001e44:	bd08      	pop	{r3, pc}

08001e46 <HAL_UART_RxCpltCallback>:
}
 8001e46:	4770      	bx	lr

08001e48 <HAL_UART_RxHalfCpltCallback>:
}
 8001e48:	4770      	bx	lr

08001e4a <UART_DMAError>:
{
 8001e4a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e52:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b21      	cmp	r3, #33	@ 0x21
 8001e5a:	d010      	beq.n	8001e7e <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e64:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b22      	cmp	r3, #34	@ 0x22
 8001e6c:	d011      	beq.n	8001e92 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e6e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7fe fc40 	bl	80006fc <HAL_UART_ErrorCallback>
}
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e82:	2a00      	cmp	r2, #0
 8001e84:	d0ea      	beq.n	8001e5c <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fdfe 	bl	8001a8c <UART_EndTxTransfer>
 8001e90:	e7e4      	b.n	8001e5c <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d0eb      	beq.n	8001e6e <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fe06 	bl	8001aac <UART_EndRxTransfer>
 8001ea0:	e7e5      	b.n	8001e6e <UART_DMAError+0x24>

08001ea2 <UART_DMAAbortOnError>:
{
 8001ea2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001eaa:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8001eac:	f7fe fc26 	bl	80006fc <HAL_UART_ErrorCallback>
}
 8001eb0:	bd08      	pop	{r3, pc}

08001eb2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001eb2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b22      	cmp	r3, #34	@ 0x22
 8001eba:	d169      	bne.n	8001f90 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ebc:	6883      	ldr	r3, [r0, #8]
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec2:	d04f      	beq.n	8001f64 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001ec4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eca:	d004      	beq.n	8001ed6 <UART_Receive_IT+0x24>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d156      	bne.n	8001f7e <UART_Receive_IT+0xcc>
 8001ed0:	6903      	ldr	r3, [r0, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d153      	bne.n	8001f7e <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ed6:	6803      	ldr	r3, [r0, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001edc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ede:	3301      	adds	r3, #1
 8001ee0:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8001ee2:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d151      	bne.n	8001f94 <UART_Receive_IT+0xe2>
{
 8001ef0:	b500      	push	{lr}
 8001ef2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ef4:	6802      	ldr	r2, [r0, #0]
 8001ef6:	68d3      	ldr	r3, [r2, #12]
 8001ef8:	f023 0320 	bic.w	r3, r3, #32
 8001efc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001efe:	6802      	ldr	r2, [r0, #0]
 8001f00:	68d3      	ldr	r3, [r2, #12]
 8001f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f06:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f08:	6802      	ldr	r2, [r0, #0]
 8001f0a:	6953      	ldr	r3, [r2, #20]
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f12:	2320      	movs	r3, #32
 8001f14:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f1c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d133      	bne.n	8001f8a <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f22:	2300      	movs	r3, #0
 8001f24:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f26:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f28:	f102 030c 	add.w	r3, r2, #12
 8001f2c:	e853 3f00 	ldrex	r3, [r3]
 8001f30:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f34:	320c      	adds	r2, #12
 8001f36:	e842 3100 	strex	r1, r3, [r2]
 8001f3a:	2900      	cmp	r1, #0
 8001f3c:	d1f3      	bne.n	8001f26 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f012 0f10 	tst.w	r2, #16
 8001f46:	d006      	beq.n	8001f56 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9201      	str	r2, [sp, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	9201      	str	r2, [sp, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f56:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8001f58:	f7fe fbb0 	bl	80006bc <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8001f5c:	2000      	movs	r0, #0
}
 8001f5e:	b003      	add	sp, #12
 8001f60:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f64:	6902      	ldr	r2, [r0, #16]
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d1ac      	bne.n	8001ec4 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001f6a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f6c:	6803      	ldr	r3, [r0, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f74:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001f76:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001f78:	3302      	adds	r3, #2
 8001f7a:	6283      	str	r3, [r0, #40]	@ 0x28
 8001f7c:	e7b1      	b.n	8001ee2 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f7e:	6803      	ldr	r3, [r0, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f86:	7013      	strb	r3, [r2, #0]
 8001f88:	e7a8      	b.n	8001edc <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8001f8a:	f7ff ff5c 	bl	8001e46 <HAL_UART_RxCpltCallback>
 8001f8e:	e7e5      	b.n	8001f5c <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8001f90:	2002      	movs	r0, #2
 8001f92:	4770      	bx	lr
    return HAL_OK;
 8001f94:	2000      	movs	r0, #0
}
 8001f96:	4770      	bx	lr

08001f98 <HAL_UART_IRQHandler>:
{
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f9e:	6802      	ldr	r2, [r0, #0]
 8001fa0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fa2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fa4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001fa6:	f013 0f0f 	tst.w	r3, #15
 8001faa:	d109      	bne.n	8001fc0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fac:	f013 0f20 	tst.w	r3, #32
 8001fb0:	d00c      	beq.n	8001fcc <HAL_UART_IRQHandler+0x34>
 8001fb2:	f010 0f20 	tst.w	r0, #32
 8001fb6:	d009      	beq.n	8001fcc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff ff7a 	bl	8001eb2 <UART_Receive_IT>
      return;
 8001fbe:	e016      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fc0:	f011 0101 	ands.w	r1, r1, #1
 8001fc4:	d115      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fc6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8001fca:	d112      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001fce:	2901      	cmp	r1, #1
 8001fd0:	d079      	beq.n	80020c6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fd6:	d003      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x48>
 8001fd8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001fdc:	f040 8114 	bne.w	8002208 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fe0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001fe4:	d003      	beq.n	8001fee <HAL_UART_IRQHandler+0x56>
 8001fe6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001fea:	f040 8111 	bne.w	8002210 <HAL_UART_IRQHandler+0x278>
}
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ff2:	f013 0f01 	tst.w	r3, #1
 8001ff6:	d006      	beq.n	8002006 <HAL_UART_IRQHandler+0x6e>
 8001ff8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8001ffc:	d003      	beq.n	8002006 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ffe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002006:	f013 0f04 	tst.w	r3, #4
 800200a:	d004      	beq.n	8002016 <HAL_UART_IRQHandler+0x7e>
 800200c:	b119      	cbz	r1, 8002016 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800200e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002010:	f042 0202 	orr.w	r2, r2, #2
 8002014:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002016:	f013 0f02 	tst.w	r3, #2
 800201a:	d004      	beq.n	8002026 <HAL_UART_IRQHandler+0x8e>
 800201c:	b119      	cbz	r1, 8002026 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800201e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002026:	f013 0f08 	tst.w	r3, #8
 800202a:	d007      	beq.n	800203c <HAL_UART_IRQHandler+0xa4>
 800202c:	f010 0f20 	tst.w	r0, #32
 8002030:	d100      	bne.n	8002034 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002032:	b119      	cbz	r1, 800203c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002034:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800203c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800203e:	2a00      	cmp	r2, #0
 8002040:	d0d5      	beq.n	8001fee <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002042:	f013 0f20 	tst.w	r3, #32
 8002046:	d002      	beq.n	800204e <HAL_UART_IRQHandler+0xb6>
 8002048:	f010 0f20 	tst.w	r0, #32
 800204c:	d129      	bne.n	80020a2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002056:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002058:	f012 0f08 	tst.w	r2, #8
 800205c:	d100      	bne.n	8002060 <HAL_UART_IRQHandler+0xc8>
 800205e:	b363      	cbz	r3, 80020ba <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff fd23 	bl	8001aac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800206e:	d020      	beq.n	80020b2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002070:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002072:	f102 0314 	add.w	r3, r2, #20
 8002076:	e853 3f00 	ldrex	r3, [r3]
 800207a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207e:	3214      	adds	r2, #20
 8002080:	e842 3100 	strex	r1, r3, [r2]
 8002084:	2900      	cmp	r1, #0
 8002086:	d1f3      	bne.n	8002070 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8002088:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800208a:	b173      	cbz	r3, 80020aa <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800208c:	4a62      	ldr	r2, [pc, #392]	@ (8002218 <HAL_UART_IRQHandler+0x280>)
 800208e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002090:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002092:	f7fe ffc4 	bl	800101e <HAL_DMA_Abort_IT>
 8002096:	2800      	cmp	r0, #0
 8002098:	d0a9      	beq.n	8001fee <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800209a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800209c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800209e:	4798      	blx	r3
 80020a0:	e7a5      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff ff05 	bl	8001eb2 <UART_Receive_IT>
 80020a8:	e7d1      	b.n	800204e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7fe fb26 	bl	80006fc <HAL_UART_ErrorCallback>
 80020b0:	e79d      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7fe fb22 	bl	80006fc <HAL_UART_ErrorCallback>
 80020b8:	e799      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7fe fb1e 	bl	80006fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80020c4:	e793      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020c6:	f013 0f10 	tst.w	r3, #16
 80020ca:	d082      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020cc:	f010 0f10 	tst.w	r0, #16
 80020d0:	f43f af7f 	beq.w	8001fd2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	6853      	ldr	r3, [r2, #4]
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e2:	6953      	ldr	r3, [r2, #20]
 80020e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020e8:	d052      	beq.n	8002190 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020ea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f43f af7b 	beq.w	8001fee <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020f8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80020fa:	4299      	cmp	r1, r3
 80020fc:	f67f af77 	bls.w	8001fee <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8002100:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002102:	69d3      	ldr	r3, [r2, #28]
 8002104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002108:	d037      	beq.n	800217a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800210a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210c:	f102 030c 	add.w	r3, r2, #12
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002118:	320c      	adds	r2, #12
 800211a:	e842 3100 	strex	r1, r3, [r2]
 800211e:	2900      	cmp	r1, #0
 8002120:	d1f3      	bne.n	800210a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002122:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002124:	f102 0314 	add.w	r3, r2, #20
 8002128:	e853 3f00 	ldrex	r3, [r3]
 800212c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002130:	3214      	adds	r2, #20
 8002132:	e842 3100 	strex	r1, r3, [r2]
 8002136:	2900      	cmp	r1, #0
 8002138:	d1f3      	bne.n	8002122 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800213a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	f102 0314 	add.w	r3, r2, #20
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002148:	3214      	adds	r2, #20
 800214a:	e842 3100 	strex	r1, r3, [r2]
 800214e:	2900      	cmp	r1, #0
 8002150:	d1f3      	bne.n	800213a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8002152:	2320      	movs	r3, #32
 8002154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002158:	2300      	movs	r3, #0
 800215a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800215c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215e:	f102 030c 	add.w	r3, r2, #12
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	320c      	adds	r2, #12
 800216c:	e842 3100 	strex	r1, r3, [r2]
 8002170:	2900      	cmp	r1, #0
 8002172:	d1f3      	bne.n	800215c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002174:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002176:	f7fe ff08 	bl	8000f8a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800217a:	2302      	movs	r3, #2
 800217c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800217e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002180:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002182:	b29b      	uxth	r3, r3
 8002184:	1ac9      	subs	r1, r1, r3
 8002186:	b289      	uxth	r1, r1
 8002188:	4620      	mov	r0, r4
 800218a:	f7fe fa97 	bl	80006bc <HAL_UARTEx_RxEventCallback>
      return;
 800218e:	e72e      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002190:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002192:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002194:	b29b      	uxth	r3, r3
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800219a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f43f af25 	beq.w	8001fee <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80021a4:	2900      	cmp	r1, #0
 80021a6:	f43f af22 	beq.w	8001fee <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ac:	f102 030c 	add.w	r3, r2, #12
 80021b0:	e853 3f00 	ldrex	r3, [r3]
 80021b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b8:	320c      	adds	r2, #12
 80021ba:	e842 3000 	strex	r0, r3, [r2]
 80021be:	2800      	cmp	r0, #0
 80021c0:	d1f3      	bne.n	80021aa <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c4:	f102 0314 	add.w	r3, r2, #20
 80021c8:	e853 3f00 	ldrex	r3, [r3]
 80021cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d0:	3214      	adds	r2, #20
 80021d2:	e842 3000 	strex	r0, r3, [r2]
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d1f3      	bne.n	80021c2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80021da:	2320      	movs	r3, #32
 80021dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e0:	2300      	movs	r3, #0
 80021e2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e6:	f102 030c 	add.w	r3, r2, #12
 80021ea:	e853 3f00 	ldrex	r3, [r3]
 80021ee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f2:	320c      	adds	r2, #12
 80021f4:	e842 3000 	strex	r0, r3, [r2]
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d1f3      	bne.n	80021e4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021fc:	2302      	movs	r3, #2
 80021fe:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002200:	4620      	mov	r0, r4
 8002202:	f7fe fa5b 	bl	80006bc <HAL_UARTEx_RxEventCallback>
      return;
 8002206:	e6f2      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff fc7d 	bl	8001b08 <UART_Transmit_IT>
    return;
 800220e:	e6ee      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fe0b 	bl	8001e2c <UART_EndTransmit_IT>
    return;
 8002216:	e6ea      	b.n	8001fee <HAL_UART_IRQHandler+0x56>
 8002218:	08001ea3 	.word	0x08001ea3

0800221c <UART_DMARxHalfCplt>:
{
 800221c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800221e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002220:	2301      	movs	r3, #1
 8002222:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002224:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800222a:	f7ff fe0d 	bl	8001e48 <HAL_UART_RxHalfCpltCallback>
}
 800222e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002230:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002232:	0849      	lsrs	r1, r1, #1
 8002234:	f7fe fa42 	bl	80006bc <HAL_UARTEx_RxEventCallback>
 8002238:	e7f9      	b.n	800222e <UART_DMARxHalfCplt+0x12>

0800223a <UART_DMAReceiveCplt>:
{
 800223a:	b508      	push	{r3, lr}
 800223c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800223e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002248:	d12b      	bne.n	80022a2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800224e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002250:	f102 030c 	add.w	r3, r2, #12
 8002254:	e853 3f00 	ldrex	r3, [r3]
 8002258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	320c      	adds	r2, #12
 800225e:	e842 3100 	strex	r1, r3, [r2]
 8002262:	2900      	cmp	r1, #0
 8002264:	d1f3      	bne.n	800224e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002268:	f102 0314 	add.w	r3, r2, #20
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002274:	3214      	adds	r2, #20
 8002276:	e842 3100 	strex	r1, r3, [r2]
 800227a:	2900      	cmp	r1, #0
 800227c:	d1f3      	bne.n	8002266 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800227e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002280:	f102 0314 	add.w	r3, r2, #20
 8002284:	e853 3f00 	ldrex	r3, [r3]
 8002288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228c:	3214      	adds	r2, #20
 800228e:	e842 3100 	strex	r1, r3, [r2]
 8002292:	2900      	cmp	r1, #0
 8002294:	d1f3      	bne.n	800227e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8002296:	2320      	movs	r3, #32
 8002298:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800229c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d007      	beq.n	80022b2 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022a2:	2300      	movs	r3, #0
 80022a4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d00f      	beq.n	80022cc <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80022ac:	f7ff fdcb 	bl	8001e46 <HAL_UART_RxCpltCallback>
}
 80022b0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b4:	f102 030c 	add.w	r3, r2, #12
 80022b8:	e853 3f00 	ldrex	r3, [r3]
 80022bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c0:	320c      	adds	r2, #12
 80022c2:	e842 3100 	strex	r1, r3, [r2]
 80022c6:	2900      	cmp	r1, #0
 80022c8:	d1f3      	bne.n	80022b2 <UART_DMAReceiveCplt+0x78>
 80022ca:	e7ea      	b.n	80022a2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022cc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80022ce:	f7fe f9f5 	bl	80006bc <HAL_UARTEx_RxEventCallback>
 80022d2:	e7ed      	b.n	80022b0 <UART_DMAReceiveCplt+0x76>

080022d4 <UART_Start_Receive_DMA>:
{
 80022d4:	b530      	push	{r4, r5, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	4604      	mov	r4, r0
 80022da:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80022dc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 80022de:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	2500      	movs	r5, #0
 80022e2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022e4:	2222      	movs	r2, #34	@ 0x22
 80022e6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80022ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80022ec:	481f      	ldr	r0, [pc, #124]	@ (800236c <UART_Start_Receive_DMA+0x98>)
 80022ee:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80022f0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80022f2:	481f      	ldr	r0, [pc, #124]	@ (8002370 <UART_Start_Receive_DMA+0x9c>)
 80022f4:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80022f6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80022f8:	481e      	ldr	r0, [pc, #120]	@ (8002374 <UART_Start_Receive_DMA+0xa0>)
 80022fa:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 80022fc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80022fe:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002300:	6820      	ldr	r0, [r4, #0]
 8002302:	460a      	mov	r2, r1
 8002304:	1d01      	adds	r1, r0, #4
 8002306:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002308:	f7fe fe0a 	bl	8000f20 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800230c:	9501      	str	r5, [sp, #4]
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	b15b      	cbz	r3, 8002336 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800231e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	f102 030c 	add.w	r3, r2, #12
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232c:	320c      	adds	r2, #12
 800232e:	e842 3100 	strex	r1, r3, [r2]
 8002332:	2900      	cmp	r1, #0
 8002334:	d1f3      	bne.n	800231e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002336:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	f102 0314 	add.w	r3, r2, #20
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002344:	3214      	adds	r2, #20
 8002346:	e842 3100 	strex	r1, r3, [r2]
 800234a:	2900      	cmp	r1, #0
 800234c:	d1f3      	bne.n	8002336 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002350:	f102 0314 	add.w	r3, r2, #20
 8002354:	e853 3f00 	ldrex	r3, [r3]
 8002358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235c:	3214      	adds	r2, #20
 800235e:	e842 3100 	strex	r1, r3, [r2]
 8002362:	2900      	cmp	r1, #0
 8002364:	d1f3      	bne.n	800234e <UART_Start_Receive_DMA+0x7a>
}
 8002366:	2000      	movs	r0, #0
 8002368:	b003      	add	sp, #12
 800236a:	bd30      	pop	{r4, r5, pc}
 800236c:	0800223b 	.word	0x0800223b
 8002370:	0800221d 	.word	0x0800221d
 8002374:	08001e4b 	.word	0x08001e4b

08002378 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002378:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	d129      	bne.n	80023d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
{
 8002382:	b510      	push	{r4, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002388:	b339      	cbz	r1, 80023da <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
 800238a:	b912      	cbnz	r2, 8002392 <HAL_UARTEx_ReceiveToIdle_DMA+0x1a>
      return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
}
 800238e:	b002      	add	sp, #8
 8002390:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002392:	2301      	movs	r3, #1
 8002394:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002396:	2300      	movs	r3, #0
 8002398:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800239a:	f7ff ff9b 	bl	80022d4 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800239e:	2800      	cmp	r0, #0
 80023a0:	d1f5      	bne.n	800238e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d001      	beq.n	80023ac <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
    return status;
 80023aa:	e7f0      	b.n	800238e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023be:	f102 030c 	add.w	r3, r2, #12
 80023c2:	e853 3f00 	ldrex	r3, [r3]
 80023c6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	320c      	adds	r2, #12
 80023cc:	e842 3100 	strex	r1, r3, [r2]
 80023d0:	2900      	cmp	r1, #0
 80023d2:	d1f3      	bne.n	80023bc <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
 80023d4:	e7db      	b.n	800238e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 80023d6:	2002      	movs	r0, #2
}
 80023d8:	4770      	bx	lr
      return HAL_ERROR;
 80023da:	2001      	movs	r0, #1
 80023dc:	e7d7      	b.n	800238e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
	...

080023e0 <std>:
 80023e0:	2300      	movs	r3, #0
 80023e2:	b510      	push	{r4, lr}
 80023e4:	4604      	mov	r4, r0
 80023e6:	e9c0 3300 	strd	r3, r3, [r0]
 80023ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ee:	6083      	str	r3, [r0, #8]
 80023f0:	8181      	strh	r1, [r0, #12]
 80023f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80023f4:	81c2      	strh	r2, [r0, #14]
 80023f6:	6183      	str	r3, [r0, #24]
 80023f8:	4619      	mov	r1, r3
 80023fa:	2208      	movs	r2, #8
 80023fc:	305c      	adds	r0, #92	@ 0x5c
 80023fe:	f000 fa19 	bl	8002834 <memset>
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <std+0x58>)
 8002404:	6263      	str	r3, [r4, #36]	@ 0x24
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <std+0x5c>)
 8002408:	62a3      	str	r3, [r4, #40]	@ 0x28
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <std+0x60>)
 800240c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800240e:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <std+0x64>)
 8002410:	6323      	str	r3, [r4, #48]	@ 0x30
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <std+0x68>)
 8002414:	6224      	str	r4, [r4, #32]
 8002416:	429c      	cmp	r4, r3
 8002418:	d006      	beq.n	8002428 <std+0x48>
 800241a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800241e:	4294      	cmp	r4, r2
 8002420:	d002      	beq.n	8002428 <std+0x48>
 8002422:	33d0      	adds	r3, #208	@ 0xd0
 8002424:	429c      	cmp	r4, r3
 8002426:	d105      	bne.n	8002434 <std+0x54>
 8002428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002430:	f000 ba8c 	b.w	800294c <__retarget_lock_init_recursive>
 8002434:	bd10      	pop	{r4, pc}
 8002436:	bf00      	nop
 8002438:	08002685 	.word	0x08002685
 800243c:	080026a7 	.word	0x080026a7
 8002440:	080026df 	.word	0x080026df
 8002444:	08002703 	.word	0x08002703
 8002448:	200005d0 	.word	0x200005d0

0800244c <stdio_exit_handler>:
 800244c:	4a02      	ldr	r2, [pc, #8]	@ (8002458 <stdio_exit_handler+0xc>)
 800244e:	4903      	ldr	r1, [pc, #12]	@ (800245c <stdio_exit_handler+0x10>)
 8002450:	4803      	ldr	r0, [pc, #12]	@ (8002460 <stdio_exit_handler+0x14>)
 8002452:	f000 b869 	b.w	8002528 <_fwalk_sglue>
 8002456:	bf00      	nop
 8002458:	2000000c 	.word	0x2000000c
 800245c:	0800349d 	.word	0x0800349d
 8002460:	2000001c 	.word	0x2000001c

08002464 <cleanup_stdio>:
 8002464:	6841      	ldr	r1, [r0, #4]
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <cleanup_stdio+0x34>)
 8002468:	4299      	cmp	r1, r3
 800246a:	b510      	push	{r4, lr}
 800246c:	4604      	mov	r4, r0
 800246e:	d001      	beq.n	8002474 <cleanup_stdio+0x10>
 8002470:	f001 f814 	bl	800349c <_fflush_r>
 8002474:	68a1      	ldr	r1, [r4, #8]
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <cleanup_stdio+0x38>)
 8002478:	4299      	cmp	r1, r3
 800247a:	d002      	beq.n	8002482 <cleanup_stdio+0x1e>
 800247c:	4620      	mov	r0, r4
 800247e:	f001 f80d 	bl	800349c <_fflush_r>
 8002482:	68e1      	ldr	r1, [r4, #12]
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <cleanup_stdio+0x3c>)
 8002486:	4299      	cmp	r1, r3
 8002488:	d004      	beq.n	8002494 <cleanup_stdio+0x30>
 800248a:	4620      	mov	r0, r4
 800248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002490:	f001 b804 	b.w	800349c <_fflush_r>
 8002494:	bd10      	pop	{r4, pc}
 8002496:	bf00      	nop
 8002498:	200005d0 	.word	0x200005d0
 800249c:	20000638 	.word	0x20000638
 80024a0:	200006a0 	.word	0x200006a0

080024a4 <global_stdio_init.part.0>:
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <global_stdio_init.part.0+0x30>)
 80024a8:	4c0b      	ldr	r4, [pc, #44]	@ (80024d8 <global_stdio_init.part.0+0x34>)
 80024aa:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <global_stdio_init.part.0+0x38>)
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	4620      	mov	r0, r4
 80024b0:	2200      	movs	r2, #0
 80024b2:	2104      	movs	r1, #4
 80024b4:	f7ff ff94 	bl	80023e0 <std>
 80024b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80024bc:	2201      	movs	r2, #1
 80024be:	2109      	movs	r1, #9
 80024c0:	f7ff ff8e 	bl	80023e0 <std>
 80024c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80024c8:	2202      	movs	r2, #2
 80024ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ce:	2112      	movs	r1, #18
 80024d0:	f7ff bf86 	b.w	80023e0 <std>
 80024d4:	20000708 	.word	0x20000708
 80024d8:	200005d0 	.word	0x200005d0
 80024dc:	0800244d 	.word	0x0800244d

080024e0 <__sfp_lock_acquire>:
 80024e0:	4801      	ldr	r0, [pc, #4]	@ (80024e8 <__sfp_lock_acquire+0x8>)
 80024e2:	f000 ba34 	b.w	800294e <__retarget_lock_acquire_recursive>
 80024e6:	bf00      	nop
 80024e8:	20000711 	.word	0x20000711

080024ec <__sfp_lock_release>:
 80024ec:	4801      	ldr	r0, [pc, #4]	@ (80024f4 <__sfp_lock_release+0x8>)
 80024ee:	f000 ba2f 	b.w	8002950 <__retarget_lock_release_recursive>
 80024f2:	bf00      	nop
 80024f4:	20000711 	.word	0x20000711

080024f8 <__sinit>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4604      	mov	r4, r0
 80024fc:	f7ff fff0 	bl	80024e0 <__sfp_lock_acquire>
 8002500:	6a23      	ldr	r3, [r4, #32]
 8002502:	b11b      	cbz	r3, 800250c <__sinit+0x14>
 8002504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002508:	f7ff bff0 	b.w	80024ec <__sfp_lock_release>
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <__sinit+0x28>)
 800250e:	6223      	str	r3, [r4, #32]
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <__sinit+0x2c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f5      	bne.n	8002504 <__sinit+0xc>
 8002518:	f7ff ffc4 	bl	80024a4 <global_stdio_init.part.0>
 800251c:	e7f2      	b.n	8002504 <__sinit+0xc>
 800251e:	bf00      	nop
 8002520:	08002465 	.word	0x08002465
 8002524:	20000708 	.word	0x20000708

08002528 <_fwalk_sglue>:
 8002528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800252c:	4607      	mov	r7, r0
 800252e:	4688      	mov	r8, r1
 8002530:	4614      	mov	r4, r2
 8002532:	2600      	movs	r6, #0
 8002534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002538:	f1b9 0901 	subs.w	r9, r9, #1
 800253c:	d505      	bpl.n	800254a <_fwalk_sglue+0x22>
 800253e:	6824      	ldr	r4, [r4, #0]
 8002540:	2c00      	cmp	r4, #0
 8002542:	d1f7      	bne.n	8002534 <_fwalk_sglue+0xc>
 8002544:	4630      	mov	r0, r6
 8002546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800254a:	89ab      	ldrh	r3, [r5, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d907      	bls.n	8002560 <_fwalk_sglue+0x38>
 8002550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002554:	3301      	adds	r3, #1
 8002556:	d003      	beq.n	8002560 <_fwalk_sglue+0x38>
 8002558:	4629      	mov	r1, r5
 800255a:	4638      	mov	r0, r7
 800255c:	47c0      	blx	r8
 800255e:	4306      	orrs	r6, r0
 8002560:	3568      	adds	r5, #104	@ 0x68
 8002562:	e7e9      	b.n	8002538 <_fwalk_sglue+0x10>

08002564 <iprintf>:
 8002564:	b40f      	push	{r0, r1, r2, r3}
 8002566:	b507      	push	{r0, r1, r2, lr}
 8002568:	4906      	ldr	r1, [pc, #24]	@ (8002584 <iprintf+0x20>)
 800256a:	ab04      	add	r3, sp, #16
 800256c:	6808      	ldr	r0, [r1, #0]
 800256e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002572:	6881      	ldr	r1, [r0, #8]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f000 fc67 	bl	8002e48 <_vfiprintf_r>
 800257a:	b003      	add	sp, #12
 800257c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002580:	b004      	add	sp, #16
 8002582:	4770      	bx	lr
 8002584:	20000018 	.word	0x20000018

08002588 <_puts_r>:
 8002588:	6a03      	ldr	r3, [r0, #32]
 800258a:	b570      	push	{r4, r5, r6, lr}
 800258c:	6884      	ldr	r4, [r0, #8]
 800258e:	4605      	mov	r5, r0
 8002590:	460e      	mov	r6, r1
 8002592:	b90b      	cbnz	r3, 8002598 <_puts_r+0x10>
 8002594:	f7ff ffb0 	bl	80024f8 <__sinit>
 8002598:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800259a:	07db      	lsls	r3, r3, #31
 800259c:	d405      	bmi.n	80025aa <_puts_r+0x22>
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	0598      	lsls	r0, r3, #22
 80025a2:	d402      	bmi.n	80025aa <_puts_r+0x22>
 80025a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025a6:	f000 f9d2 	bl	800294e <__retarget_lock_acquire_recursive>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	0719      	lsls	r1, r3, #28
 80025ae:	d502      	bpl.n	80025b6 <_puts_r+0x2e>
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d135      	bne.n	8002622 <_puts_r+0x9a>
 80025b6:	4621      	mov	r1, r4
 80025b8:	4628      	mov	r0, r5
 80025ba:	f000 f8e5 	bl	8002788 <__swsetup_r>
 80025be:	b380      	cbz	r0, 8002622 <_puts_r+0x9a>
 80025c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80025c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025c6:	07da      	lsls	r2, r3, #31
 80025c8:	d405      	bmi.n	80025d6 <_puts_r+0x4e>
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	059b      	lsls	r3, r3, #22
 80025ce:	d402      	bmi.n	80025d6 <_puts_r+0x4e>
 80025d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025d2:	f000 f9bd 	bl	8002950 <__retarget_lock_release_recursive>
 80025d6:	4628      	mov	r0, r5
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da04      	bge.n	80025e8 <_puts_r+0x60>
 80025de:	69a2      	ldr	r2, [r4, #24]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dc17      	bgt.n	8002614 <_puts_r+0x8c>
 80025e4:	290a      	cmp	r1, #10
 80025e6:	d015      	beq.n	8002614 <_puts_r+0x8c>
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	6022      	str	r2, [r4, #0]
 80025ee:	7019      	strb	r1, [r3, #0]
 80025f0:	68a3      	ldr	r3, [r4, #8]
 80025f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025f6:	3b01      	subs	r3, #1
 80025f8:	60a3      	str	r3, [r4, #8]
 80025fa:	2900      	cmp	r1, #0
 80025fc:	d1ed      	bne.n	80025da <_puts_r+0x52>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da11      	bge.n	8002626 <_puts_r+0x9e>
 8002602:	4622      	mov	r2, r4
 8002604:	210a      	movs	r1, #10
 8002606:	4628      	mov	r0, r5
 8002608:	f000 f87f 	bl	800270a <__swbuf_r>
 800260c:	3001      	adds	r0, #1
 800260e:	d0d7      	beq.n	80025c0 <_puts_r+0x38>
 8002610:	250a      	movs	r5, #10
 8002612:	e7d7      	b.n	80025c4 <_puts_r+0x3c>
 8002614:	4622      	mov	r2, r4
 8002616:	4628      	mov	r0, r5
 8002618:	f000 f877 	bl	800270a <__swbuf_r>
 800261c:	3001      	adds	r0, #1
 800261e:	d1e7      	bne.n	80025f0 <_puts_r+0x68>
 8002620:	e7ce      	b.n	80025c0 <_puts_r+0x38>
 8002622:	3e01      	subs	r6, #1
 8002624:	e7e4      	b.n	80025f0 <_puts_r+0x68>
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	6022      	str	r2, [r4, #0]
 800262c:	220a      	movs	r2, #10
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e7ee      	b.n	8002610 <_puts_r+0x88>
	...

08002634 <puts>:
 8002634:	4b02      	ldr	r3, [pc, #8]	@ (8002640 <puts+0xc>)
 8002636:	4601      	mov	r1, r0
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	f7ff bfa5 	b.w	8002588 <_puts_r>
 800263e:	bf00      	nop
 8002640:	20000018 	.word	0x20000018

08002644 <siprintf>:
 8002644:	b40e      	push	{r1, r2, r3}
 8002646:	b500      	push	{lr}
 8002648:	b09c      	sub	sp, #112	@ 0x70
 800264a:	ab1d      	add	r3, sp, #116	@ 0x74
 800264c:	9002      	str	r0, [sp, #8]
 800264e:	9006      	str	r0, [sp, #24]
 8002650:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002654:	4809      	ldr	r0, [pc, #36]	@ (800267c <siprintf+0x38>)
 8002656:	9107      	str	r1, [sp, #28]
 8002658:	9104      	str	r1, [sp, #16]
 800265a:	4909      	ldr	r1, [pc, #36]	@ (8002680 <siprintf+0x3c>)
 800265c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002660:	9105      	str	r1, [sp, #20]
 8002662:	6800      	ldr	r0, [r0, #0]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	a902      	add	r1, sp, #8
 8002668:	f000 fac8 	bl	8002bfc <_svfiprintf_r>
 800266c:	9b02      	ldr	r3, [sp, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	b01c      	add	sp, #112	@ 0x70
 8002674:	f85d eb04 	ldr.w	lr, [sp], #4
 8002678:	b003      	add	sp, #12
 800267a:	4770      	bx	lr
 800267c:	20000018 	.word	0x20000018
 8002680:	ffff0208 	.word	0xffff0208

08002684 <__sread>:
 8002684:	b510      	push	{r4, lr}
 8002686:	460c      	mov	r4, r1
 8002688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268c:	f000 f910 	bl	80028b0 <_read_r>
 8002690:	2800      	cmp	r0, #0
 8002692:	bfab      	itete	ge
 8002694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002696:	89a3      	ldrhlt	r3, [r4, #12]
 8002698:	181b      	addge	r3, r3, r0
 800269a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800269e:	bfac      	ite	ge
 80026a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80026a2:	81a3      	strhlt	r3, [r4, #12]
 80026a4:	bd10      	pop	{r4, pc}

080026a6 <__swrite>:
 80026a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026aa:	461f      	mov	r7, r3
 80026ac:	898b      	ldrh	r3, [r1, #12]
 80026ae:	05db      	lsls	r3, r3, #23
 80026b0:	4605      	mov	r5, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	4616      	mov	r6, r2
 80026b6:	d505      	bpl.n	80026c4 <__swrite+0x1e>
 80026b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026bc:	2302      	movs	r3, #2
 80026be:	2200      	movs	r2, #0
 80026c0:	f000 f8e4 	bl	800288c <_lseek_r>
 80026c4:	89a3      	ldrh	r3, [r4, #12]
 80026c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026ce:	81a3      	strh	r3, [r4, #12]
 80026d0:	4632      	mov	r2, r6
 80026d2:	463b      	mov	r3, r7
 80026d4:	4628      	mov	r0, r5
 80026d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026da:	f000 b8fb 	b.w	80028d4 <_write_r>

080026de <__sseek>:
 80026de:	b510      	push	{r4, lr}
 80026e0:	460c      	mov	r4, r1
 80026e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e6:	f000 f8d1 	bl	800288c <_lseek_r>
 80026ea:	1c43      	adds	r3, r0, #1
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	bf15      	itete	ne
 80026f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80026f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80026f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80026fa:	81a3      	strheq	r3, [r4, #12]
 80026fc:	bf18      	it	ne
 80026fe:	81a3      	strhne	r3, [r4, #12]
 8002700:	bd10      	pop	{r4, pc}

08002702 <__sclose>:
 8002702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002706:	f000 b8b1 	b.w	800286c <_close_r>

0800270a <__swbuf_r>:
 800270a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270c:	460e      	mov	r6, r1
 800270e:	4614      	mov	r4, r2
 8002710:	4605      	mov	r5, r0
 8002712:	b118      	cbz	r0, 800271c <__swbuf_r+0x12>
 8002714:	6a03      	ldr	r3, [r0, #32]
 8002716:	b90b      	cbnz	r3, 800271c <__swbuf_r+0x12>
 8002718:	f7ff feee 	bl	80024f8 <__sinit>
 800271c:	69a3      	ldr	r3, [r4, #24]
 800271e:	60a3      	str	r3, [r4, #8]
 8002720:	89a3      	ldrh	r3, [r4, #12]
 8002722:	071a      	lsls	r2, r3, #28
 8002724:	d501      	bpl.n	800272a <__swbuf_r+0x20>
 8002726:	6923      	ldr	r3, [r4, #16]
 8002728:	b943      	cbnz	r3, 800273c <__swbuf_r+0x32>
 800272a:	4621      	mov	r1, r4
 800272c:	4628      	mov	r0, r5
 800272e:	f000 f82b 	bl	8002788 <__swsetup_r>
 8002732:	b118      	cbz	r0, 800273c <__swbuf_r+0x32>
 8002734:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002738:	4638      	mov	r0, r7
 800273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	6922      	ldr	r2, [r4, #16]
 8002740:	1a98      	subs	r0, r3, r2
 8002742:	6963      	ldr	r3, [r4, #20]
 8002744:	b2f6      	uxtb	r6, r6
 8002746:	4283      	cmp	r3, r0
 8002748:	4637      	mov	r7, r6
 800274a:	dc05      	bgt.n	8002758 <__swbuf_r+0x4e>
 800274c:	4621      	mov	r1, r4
 800274e:	4628      	mov	r0, r5
 8002750:	f000 fea4 	bl	800349c <_fflush_r>
 8002754:	2800      	cmp	r0, #0
 8002756:	d1ed      	bne.n	8002734 <__swbuf_r+0x2a>
 8002758:	68a3      	ldr	r3, [r4, #8]
 800275a:	3b01      	subs	r3, #1
 800275c:	60a3      	str	r3, [r4, #8]
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	6022      	str	r2, [r4, #0]
 8002764:	701e      	strb	r6, [r3, #0]
 8002766:	6962      	ldr	r2, [r4, #20]
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	429a      	cmp	r2, r3
 800276c:	d004      	beq.n	8002778 <__swbuf_r+0x6e>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	07db      	lsls	r3, r3, #31
 8002772:	d5e1      	bpl.n	8002738 <__swbuf_r+0x2e>
 8002774:	2e0a      	cmp	r6, #10
 8002776:	d1df      	bne.n	8002738 <__swbuf_r+0x2e>
 8002778:	4621      	mov	r1, r4
 800277a:	4628      	mov	r0, r5
 800277c:	f000 fe8e 	bl	800349c <_fflush_r>
 8002780:	2800      	cmp	r0, #0
 8002782:	d0d9      	beq.n	8002738 <__swbuf_r+0x2e>
 8002784:	e7d6      	b.n	8002734 <__swbuf_r+0x2a>
	...

08002788 <__swsetup_r>:
 8002788:	b538      	push	{r3, r4, r5, lr}
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <__swsetup_r+0xa8>)
 800278c:	4605      	mov	r5, r0
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	460c      	mov	r4, r1
 8002792:	b118      	cbz	r0, 800279c <__swsetup_r+0x14>
 8002794:	6a03      	ldr	r3, [r0, #32]
 8002796:	b90b      	cbnz	r3, 800279c <__swsetup_r+0x14>
 8002798:	f7ff feae 	bl	80024f8 <__sinit>
 800279c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027a0:	0719      	lsls	r1, r3, #28
 80027a2:	d422      	bmi.n	80027ea <__swsetup_r+0x62>
 80027a4:	06da      	lsls	r2, r3, #27
 80027a6:	d407      	bmi.n	80027b8 <__swsetup_r+0x30>
 80027a8:	2209      	movs	r2, #9
 80027aa:	602a      	str	r2, [r5, #0]
 80027ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027b6:	e033      	b.n	8002820 <__swsetup_r+0x98>
 80027b8:	0758      	lsls	r0, r3, #29
 80027ba:	d512      	bpl.n	80027e2 <__swsetup_r+0x5a>
 80027bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027be:	b141      	cbz	r1, 80027d2 <__swsetup_r+0x4a>
 80027c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80027c4:	4299      	cmp	r1, r3
 80027c6:	d002      	beq.n	80027ce <__swsetup_r+0x46>
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f8c3 	bl	8002954 <_free_r>
 80027ce:	2300      	movs	r3, #0
 80027d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80027d8:	81a3      	strh	r3, [r4, #12]
 80027da:	2300      	movs	r3, #0
 80027dc:	6063      	str	r3, [r4, #4]
 80027de:	6923      	ldr	r3, [r4, #16]
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	89a3      	ldrh	r3, [r4, #12]
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	b94b      	cbnz	r3, 8002802 <__swsetup_r+0x7a>
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f8:	d003      	beq.n	8002802 <__swsetup_r+0x7a>
 80027fa:	4621      	mov	r1, r4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 fe9b 	bl	8003538 <__smakebuf_r>
 8002802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002806:	f013 0201 	ands.w	r2, r3, #1
 800280a:	d00a      	beq.n	8002822 <__swsetup_r+0x9a>
 800280c:	2200      	movs	r2, #0
 800280e:	60a2      	str	r2, [r4, #8]
 8002810:	6962      	ldr	r2, [r4, #20]
 8002812:	4252      	negs	r2, r2
 8002814:	61a2      	str	r2, [r4, #24]
 8002816:	6922      	ldr	r2, [r4, #16]
 8002818:	b942      	cbnz	r2, 800282c <__swsetup_r+0xa4>
 800281a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800281e:	d1c5      	bne.n	80027ac <__swsetup_r+0x24>
 8002820:	bd38      	pop	{r3, r4, r5, pc}
 8002822:	0799      	lsls	r1, r3, #30
 8002824:	bf58      	it	pl
 8002826:	6962      	ldrpl	r2, [r4, #20]
 8002828:	60a2      	str	r2, [r4, #8]
 800282a:	e7f4      	b.n	8002816 <__swsetup_r+0x8e>
 800282c:	2000      	movs	r0, #0
 800282e:	e7f7      	b.n	8002820 <__swsetup_r+0x98>
 8002830:	20000018 	.word	0x20000018

08002834 <memset>:
 8002834:	4402      	add	r2, r0
 8002836:	4603      	mov	r3, r0
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	f803 1b01 	strb.w	r1, [r3], #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <strncat>:
 8002844:	b530      	push	{r4, r5, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	7825      	ldrb	r5, [r4, #0]
 800284a:	4623      	mov	r3, r4
 800284c:	3401      	adds	r4, #1
 800284e:	2d00      	cmp	r5, #0
 8002850:	d1fa      	bne.n	8002848 <strncat+0x4>
 8002852:	3a01      	subs	r2, #1
 8002854:	d304      	bcc.n	8002860 <strncat+0x1c>
 8002856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800285a:	f803 4b01 	strb.w	r4, [r3], #1
 800285e:	b904      	cbnz	r4, 8002862 <strncat+0x1e>
 8002860:	bd30      	pop	{r4, r5, pc}
 8002862:	2a00      	cmp	r2, #0
 8002864:	d1f5      	bne.n	8002852 <strncat+0xe>
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e7f3      	b.n	8002852 <strncat+0xe>
	...

0800286c <_close_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4d06      	ldr	r5, [pc, #24]	@ (8002888 <_close_r+0x1c>)
 8002870:	2300      	movs	r3, #0
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	602b      	str	r3, [r5, #0]
 8002878:	f7fe f940 	bl	8000afc <_close>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d102      	bne.n	8002886 <_close_r+0x1a>
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	b103      	cbz	r3, 8002886 <_close_r+0x1a>
 8002884:	6023      	str	r3, [r4, #0]
 8002886:	bd38      	pop	{r3, r4, r5, pc}
 8002888:	2000070c 	.word	0x2000070c

0800288c <_lseek_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	4d07      	ldr	r5, [pc, #28]	@ (80028ac <_lseek_r+0x20>)
 8002890:	4604      	mov	r4, r0
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	2200      	movs	r2, #0
 8002898:	602a      	str	r2, [r5, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	f7fe f938 	bl	8000b10 <_lseek>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d102      	bne.n	80028aa <_lseek_r+0x1e>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	b103      	cbz	r3, 80028aa <_lseek_r+0x1e>
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	bd38      	pop	{r3, r4, r5, pc}
 80028ac:	2000070c 	.word	0x2000070c

080028b0 <_read_r>:
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	4d07      	ldr	r5, [pc, #28]	@ (80028d0 <_read_r+0x20>)
 80028b4:	4604      	mov	r4, r0
 80028b6:	4608      	mov	r0, r1
 80028b8:	4611      	mov	r1, r2
 80028ba:	2200      	movs	r2, #0
 80028bc:	602a      	str	r2, [r5, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f7fe f90c 	bl	8000adc <_read>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d102      	bne.n	80028ce <_read_r+0x1e>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b103      	cbz	r3, 80028ce <_read_r+0x1e>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	2000070c 	.word	0x2000070c

080028d4 <_write_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4d07      	ldr	r5, [pc, #28]	@ (80028f4 <_write_r+0x20>)
 80028d8:	4604      	mov	r4, r0
 80028da:	4608      	mov	r0, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	2200      	movs	r2, #0
 80028e0:	602a      	str	r2, [r5, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f7fd feae 	bl	8000644 <_write>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	d102      	bne.n	80028f2 <_write_r+0x1e>
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	b103      	cbz	r3, 80028f2 <_write_r+0x1e>
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	2000070c 	.word	0x2000070c

080028f8 <__errno>:
 80028f8:	4b01      	ldr	r3, [pc, #4]	@ (8002900 <__errno+0x8>)
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000018 	.word	0x20000018

08002904 <__libc_init_array>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	4d0d      	ldr	r5, [pc, #52]	@ (800293c <__libc_init_array+0x38>)
 8002908:	4c0d      	ldr	r4, [pc, #52]	@ (8002940 <__libc_init_array+0x3c>)
 800290a:	1b64      	subs	r4, r4, r5
 800290c:	10a4      	asrs	r4, r4, #2
 800290e:	2600      	movs	r6, #0
 8002910:	42a6      	cmp	r6, r4
 8002912:	d109      	bne.n	8002928 <__libc_init_array+0x24>
 8002914:	4d0b      	ldr	r5, [pc, #44]	@ (8002944 <__libc_init_array+0x40>)
 8002916:	4c0c      	ldr	r4, [pc, #48]	@ (8002948 <__libc_init_array+0x44>)
 8002918:	f000 feda 	bl	80036d0 <_init>
 800291c:	1b64      	subs	r4, r4, r5
 800291e:	10a4      	asrs	r4, r4, #2
 8002920:	2600      	movs	r6, #0
 8002922:	42a6      	cmp	r6, r4
 8002924:	d105      	bne.n	8002932 <__libc_init_array+0x2e>
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	f855 3b04 	ldr.w	r3, [r5], #4
 800292c:	4798      	blx	r3
 800292e:	3601      	adds	r6, #1
 8002930:	e7ee      	b.n	8002910 <__libc_init_array+0xc>
 8002932:	f855 3b04 	ldr.w	r3, [r5], #4
 8002936:	4798      	blx	r3
 8002938:	3601      	adds	r6, #1
 800293a:	e7f2      	b.n	8002922 <__libc_init_array+0x1e>
 800293c:	080037b8 	.word	0x080037b8
 8002940:	080037b8 	.word	0x080037b8
 8002944:	080037b8 	.word	0x080037b8
 8002948:	080037bc 	.word	0x080037bc

0800294c <__retarget_lock_init_recursive>:
 800294c:	4770      	bx	lr

0800294e <__retarget_lock_acquire_recursive>:
 800294e:	4770      	bx	lr

08002950 <__retarget_lock_release_recursive>:
 8002950:	4770      	bx	lr
	...

08002954 <_free_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4605      	mov	r5, r0
 8002958:	2900      	cmp	r1, #0
 800295a:	d041      	beq.n	80029e0 <_free_r+0x8c>
 800295c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002960:	1f0c      	subs	r4, r1, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	18e4      	addlt	r4, r4, r3
 8002968:	f000 f8e0 	bl	8002b2c <__malloc_lock>
 800296c:	4a1d      	ldr	r2, [pc, #116]	@ (80029e4 <_free_r+0x90>)
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	b933      	cbnz	r3, 8002980 <_free_r+0x2c>
 8002972:	6063      	str	r3, [r4, #4]
 8002974:	6014      	str	r4, [r2, #0]
 8002976:	4628      	mov	r0, r5
 8002978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800297c:	f000 b8dc 	b.w	8002b38 <__malloc_unlock>
 8002980:	42a3      	cmp	r3, r4
 8002982:	d908      	bls.n	8002996 <_free_r+0x42>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	1821      	adds	r1, r4, r0
 8002988:	428b      	cmp	r3, r1
 800298a:	bf01      	itttt	eq
 800298c:	6819      	ldreq	r1, [r3, #0]
 800298e:	685b      	ldreq	r3, [r3, #4]
 8002990:	1809      	addeq	r1, r1, r0
 8002992:	6021      	streq	r1, [r4, #0]
 8002994:	e7ed      	b.n	8002972 <_free_r+0x1e>
 8002996:	461a      	mov	r2, r3
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	b10b      	cbz	r3, 80029a0 <_free_r+0x4c>
 800299c:	42a3      	cmp	r3, r4
 800299e:	d9fa      	bls.n	8002996 <_free_r+0x42>
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	1850      	adds	r0, r2, r1
 80029a4:	42a0      	cmp	r0, r4
 80029a6:	d10b      	bne.n	80029c0 <_free_r+0x6c>
 80029a8:	6820      	ldr	r0, [r4, #0]
 80029aa:	4401      	add	r1, r0
 80029ac:	1850      	adds	r0, r2, r1
 80029ae:	4283      	cmp	r3, r0
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	d1e0      	bne.n	8002976 <_free_r+0x22>
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	6053      	str	r3, [r2, #4]
 80029ba:	4408      	add	r0, r1
 80029bc:	6010      	str	r0, [r2, #0]
 80029be:	e7da      	b.n	8002976 <_free_r+0x22>
 80029c0:	d902      	bls.n	80029c8 <_free_r+0x74>
 80029c2:	230c      	movs	r3, #12
 80029c4:	602b      	str	r3, [r5, #0]
 80029c6:	e7d6      	b.n	8002976 <_free_r+0x22>
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	1821      	adds	r1, r4, r0
 80029cc:	428b      	cmp	r3, r1
 80029ce:	bf04      	itt	eq
 80029d0:	6819      	ldreq	r1, [r3, #0]
 80029d2:	685b      	ldreq	r3, [r3, #4]
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	bf04      	itt	eq
 80029d8:	1809      	addeq	r1, r1, r0
 80029da:	6021      	streq	r1, [r4, #0]
 80029dc:	6054      	str	r4, [r2, #4]
 80029de:	e7ca      	b.n	8002976 <_free_r+0x22>
 80029e0:	bd38      	pop	{r3, r4, r5, pc}
 80029e2:	bf00      	nop
 80029e4:	20000718 	.word	0x20000718

080029e8 <sbrk_aligned>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4e0f      	ldr	r6, [pc, #60]	@ (8002a28 <sbrk_aligned+0x40>)
 80029ec:	460c      	mov	r4, r1
 80029ee:	6831      	ldr	r1, [r6, #0]
 80029f0:	4605      	mov	r5, r0
 80029f2:	b911      	cbnz	r1, 80029fa <sbrk_aligned+0x12>
 80029f4:	f000 fe18 	bl	8003628 <_sbrk_r>
 80029f8:	6030      	str	r0, [r6, #0]
 80029fa:	4621      	mov	r1, r4
 80029fc:	4628      	mov	r0, r5
 80029fe:	f000 fe13 	bl	8003628 <_sbrk_r>
 8002a02:	1c43      	adds	r3, r0, #1
 8002a04:	d103      	bne.n	8002a0e <sbrk_aligned+0x26>
 8002a06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
 8002a0e:	1cc4      	adds	r4, r0, #3
 8002a10:	f024 0403 	bic.w	r4, r4, #3
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d0f8      	beq.n	8002a0a <sbrk_aligned+0x22>
 8002a18:	1a21      	subs	r1, r4, r0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f000 fe04 	bl	8003628 <_sbrk_r>
 8002a20:	3001      	adds	r0, #1
 8002a22:	d1f2      	bne.n	8002a0a <sbrk_aligned+0x22>
 8002a24:	e7ef      	b.n	8002a06 <sbrk_aligned+0x1e>
 8002a26:	bf00      	nop
 8002a28:	20000714 	.word	0x20000714

08002a2c <_malloc_r>:
 8002a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a30:	1ccd      	adds	r5, r1, #3
 8002a32:	f025 0503 	bic.w	r5, r5, #3
 8002a36:	3508      	adds	r5, #8
 8002a38:	2d0c      	cmp	r5, #12
 8002a3a:	bf38      	it	cc
 8002a3c:	250c      	movcc	r5, #12
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	4606      	mov	r6, r0
 8002a42:	db01      	blt.n	8002a48 <_malloc_r+0x1c>
 8002a44:	42a9      	cmp	r1, r5
 8002a46:	d904      	bls.n	8002a52 <_malloc_r+0x26>
 8002a48:	230c      	movs	r3, #12
 8002a4a:	6033      	str	r3, [r6, #0]
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b28 <_malloc_r+0xfc>
 8002a56:	f000 f869 	bl	8002b2c <__malloc_lock>
 8002a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002a5e:	461c      	mov	r4, r3
 8002a60:	bb44      	cbnz	r4, 8002ab4 <_malloc_r+0x88>
 8002a62:	4629      	mov	r1, r5
 8002a64:	4630      	mov	r0, r6
 8002a66:	f7ff ffbf 	bl	80029e8 <sbrk_aligned>
 8002a6a:	1c43      	adds	r3, r0, #1
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	d158      	bne.n	8002b22 <_malloc_r+0xf6>
 8002a70:	f8d8 4000 	ldr.w	r4, [r8]
 8002a74:	4627      	mov	r7, r4
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d143      	bne.n	8002b02 <_malloc_r+0xd6>
 8002a7a:	2c00      	cmp	r4, #0
 8002a7c:	d04b      	beq.n	8002b16 <_malloc_r+0xea>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	4639      	mov	r1, r7
 8002a82:	4630      	mov	r0, r6
 8002a84:	eb04 0903 	add.w	r9, r4, r3
 8002a88:	f000 fdce 	bl	8003628 <_sbrk_r>
 8002a8c:	4581      	cmp	r9, r0
 8002a8e:	d142      	bne.n	8002b16 <_malloc_r+0xea>
 8002a90:	6821      	ldr	r1, [r4, #0]
 8002a92:	1a6d      	subs	r5, r5, r1
 8002a94:	4629      	mov	r1, r5
 8002a96:	4630      	mov	r0, r6
 8002a98:	f7ff ffa6 	bl	80029e8 <sbrk_aligned>
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	d03a      	beq.n	8002b16 <_malloc_r+0xea>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	442b      	add	r3, r5
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	bb62      	cbnz	r2, 8002b08 <_malloc_r+0xdc>
 8002aae:	f8c8 7000 	str.w	r7, [r8]
 8002ab2:	e00f      	b.n	8002ad4 <_malloc_r+0xa8>
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	1b52      	subs	r2, r2, r5
 8002ab8:	d420      	bmi.n	8002afc <_malloc_r+0xd0>
 8002aba:	2a0b      	cmp	r2, #11
 8002abc:	d917      	bls.n	8002aee <_malloc_r+0xc2>
 8002abe:	1961      	adds	r1, r4, r5
 8002ac0:	42a3      	cmp	r3, r4
 8002ac2:	6025      	str	r5, [r4, #0]
 8002ac4:	bf18      	it	ne
 8002ac6:	6059      	strne	r1, [r3, #4]
 8002ac8:	6863      	ldr	r3, [r4, #4]
 8002aca:	bf08      	it	eq
 8002acc:	f8c8 1000 	streq.w	r1, [r8]
 8002ad0:	5162      	str	r2, [r4, r5]
 8002ad2:	604b      	str	r3, [r1, #4]
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f000 f82f 	bl	8002b38 <__malloc_unlock>
 8002ada:	f104 000b 	add.w	r0, r4, #11
 8002ade:	1d23      	adds	r3, r4, #4
 8002ae0:	f020 0007 	bic.w	r0, r0, #7
 8002ae4:	1ac2      	subs	r2, r0, r3
 8002ae6:	bf1c      	itt	ne
 8002ae8:	1a1b      	subne	r3, r3, r0
 8002aea:	50a3      	strne	r3, [r4, r2]
 8002aec:	e7af      	b.n	8002a4e <_malloc_r+0x22>
 8002aee:	6862      	ldr	r2, [r4, #4]
 8002af0:	42a3      	cmp	r3, r4
 8002af2:	bf0c      	ite	eq
 8002af4:	f8c8 2000 	streq.w	r2, [r8]
 8002af8:	605a      	strne	r2, [r3, #4]
 8002afa:	e7eb      	b.n	8002ad4 <_malloc_r+0xa8>
 8002afc:	4623      	mov	r3, r4
 8002afe:	6864      	ldr	r4, [r4, #4]
 8002b00:	e7ae      	b.n	8002a60 <_malloc_r+0x34>
 8002b02:	463c      	mov	r4, r7
 8002b04:	687f      	ldr	r7, [r7, #4]
 8002b06:	e7b6      	b.n	8002a76 <_malloc_r+0x4a>
 8002b08:	461a      	mov	r2, r3
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	d1fb      	bne.n	8002b08 <_malloc_r+0xdc>
 8002b10:	2300      	movs	r3, #0
 8002b12:	6053      	str	r3, [r2, #4]
 8002b14:	e7de      	b.n	8002ad4 <_malloc_r+0xa8>
 8002b16:	230c      	movs	r3, #12
 8002b18:	6033      	str	r3, [r6, #0]
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f000 f80c 	bl	8002b38 <__malloc_unlock>
 8002b20:	e794      	b.n	8002a4c <_malloc_r+0x20>
 8002b22:	6005      	str	r5, [r0, #0]
 8002b24:	e7d6      	b.n	8002ad4 <_malloc_r+0xa8>
 8002b26:	bf00      	nop
 8002b28:	20000718 	.word	0x20000718

08002b2c <__malloc_lock>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	@ (8002b34 <__malloc_lock+0x8>)
 8002b2e:	f7ff bf0e 	b.w	800294e <__retarget_lock_acquire_recursive>
 8002b32:	bf00      	nop
 8002b34:	20000710 	.word	0x20000710

08002b38 <__malloc_unlock>:
 8002b38:	4801      	ldr	r0, [pc, #4]	@ (8002b40 <__malloc_unlock+0x8>)
 8002b3a:	f7ff bf09 	b.w	8002950 <__retarget_lock_release_recursive>
 8002b3e:	bf00      	nop
 8002b40:	20000710 	.word	0x20000710

08002b44 <__ssputs_r>:
 8002b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b48:	688e      	ldr	r6, [r1, #8]
 8002b4a:	461f      	mov	r7, r3
 8002b4c:	42be      	cmp	r6, r7
 8002b4e:	680b      	ldr	r3, [r1, #0]
 8002b50:	4682      	mov	sl, r0
 8002b52:	460c      	mov	r4, r1
 8002b54:	4690      	mov	r8, r2
 8002b56:	d82d      	bhi.n	8002bb4 <__ssputs_r+0x70>
 8002b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002b60:	d026      	beq.n	8002bb0 <__ssputs_r+0x6c>
 8002b62:	6965      	ldr	r5, [r4, #20]
 8002b64:	6909      	ldr	r1, [r1, #16]
 8002b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b6a:	eba3 0901 	sub.w	r9, r3, r1
 8002b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b72:	1c7b      	adds	r3, r7, #1
 8002b74:	444b      	add	r3, r9
 8002b76:	106d      	asrs	r5, r5, #1
 8002b78:	429d      	cmp	r5, r3
 8002b7a:	bf38      	it	cc
 8002b7c:	461d      	movcc	r5, r3
 8002b7e:	0553      	lsls	r3, r2, #21
 8002b80:	d527      	bpl.n	8002bd2 <__ssputs_r+0x8e>
 8002b82:	4629      	mov	r1, r5
 8002b84:	f7ff ff52 	bl	8002a2c <_malloc_r>
 8002b88:	4606      	mov	r6, r0
 8002b8a:	b360      	cbz	r0, 8002be6 <__ssputs_r+0xa2>
 8002b8c:	6921      	ldr	r1, [r4, #16]
 8002b8e:	464a      	mov	r2, r9
 8002b90:	f000 fd5a 	bl	8003648 <memcpy>
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	6126      	str	r6, [r4, #16]
 8002ba2:	6165      	str	r5, [r4, #20]
 8002ba4:	444e      	add	r6, r9
 8002ba6:	eba5 0509 	sub.w	r5, r5, r9
 8002baa:	6026      	str	r6, [r4, #0]
 8002bac:	60a5      	str	r5, [r4, #8]
 8002bae:	463e      	mov	r6, r7
 8002bb0:	42be      	cmp	r6, r7
 8002bb2:	d900      	bls.n	8002bb6 <__ssputs_r+0x72>
 8002bb4:	463e      	mov	r6, r7
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	4632      	mov	r2, r6
 8002bba:	4641      	mov	r1, r8
 8002bbc:	f000 fcf8 	bl	80035b0 <memmove>
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	1b9b      	subs	r3, r3, r6
 8002bc4:	60a3      	str	r3, [r4, #8]
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	4433      	add	r3, r6
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd2:	462a      	mov	r2, r5
 8002bd4:	f000 fd46 	bl	8003664 <_realloc_r>
 8002bd8:	4606      	mov	r6, r0
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d1e0      	bne.n	8002ba0 <__ssputs_r+0x5c>
 8002bde:	6921      	ldr	r1, [r4, #16]
 8002be0:	4650      	mov	r0, sl
 8002be2:	f7ff feb7 	bl	8002954 <_free_r>
 8002be6:	230c      	movs	r3, #12
 8002be8:	f8ca 3000 	str.w	r3, [sl]
 8002bec:	89a3      	ldrh	r3, [r4, #12]
 8002bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bf8:	e7e9      	b.n	8002bce <__ssputs_r+0x8a>
	...

08002bfc <_svfiprintf_r>:
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	4698      	mov	r8, r3
 8002c02:	898b      	ldrh	r3, [r1, #12]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	b09d      	sub	sp, #116	@ 0x74
 8002c08:	4607      	mov	r7, r0
 8002c0a:	460d      	mov	r5, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	d510      	bpl.n	8002c32 <_svfiprintf_r+0x36>
 8002c10:	690b      	ldr	r3, [r1, #16]
 8002c12:	b973      	cbnz	r3, 8002c32 <_svfiprintf_r+0x36>
 8002c14:	2140      	movs	r1, #64	@ 0x40
 8002c16:	f7ff ff09 	bl	8002a2c <_malloc_r>
 8002c1a:	6028      	str	r0, [r5, #0]
 8002c1c:	6128      	str	r0, [r5, #16]
 8002c1e:	b930      	cbnz	r0, 8002c2e <_svfiprintf_r+0x32>
 8002c20:	230c      	movs	r3, #12
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c28:	b01d      	add	sp, #116	@ 0x74
 8002c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c2e:	2340      	movs	r3, #64	@ 0x40
 8002c30:	616b      	str	r3, [r5, #20]
 8002c32:	2300      	movs	r3, #0
 8002c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c36:	2320      	movs	r3, #32
 8002c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c40:	2330      	movs	r3, #48	@ 0x30
 8002c42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002de0 <_svfiprintf_r+0x1e4>
 8002c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c4a:	f04f 0901 	mov.w	r9, #1
 8002c4e:	4623      	mov	r3, r4
 8002c50:	469a      	mov	sl, r3
 8002c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c56:	b10a      	cbz	r2, 8002c5c <_svfiprintf_r+0x60>
 8002c58:	2a25      	cmp	r2, #37	@ 0x25
 8002c5a:	d1f9      	bne.n	8002c50 <_svfiprintf_r+0x54>
 8002c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8002c60:	d00b      	beq.n	8002c7a <_svfiprintf_r+0x7e>
 8002c62:	465b      	mov	r3, fp
 8002c64:	4622      	mov	r2, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	4638      	mov	r0, r7
 8002c6a:	f7ff ff6b 	bl	8002b44 <__ssputs_r>
 8002c6e:	3001      	adds	r0, #1
 8002c70:	f000 80a7 	beq.w	8002dc2 <_svfiprintf_r+0x1c6>
 8002c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c76:	445a      	add	r2, fp
 8002c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 809f 	beq.w	8002dc2 <_svfiprintf_r+0x1c6>
 8002c84:	2300      	movs	r3, #0
 8002c86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c8e:	f10a 0a01 	add.w	sl, sl, #1
 8002c92:	9304      	str	r3, [sp, #16]
 8002c94:	9307      	str	r3, [sp, #28]
 8002c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c9c:	4654      	mov	r4, sl
 8002c9e:	2205      	movs	r2, #5
 8002ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ca4:	484e      	ldr	r0, [pc, #312]	@ (8002de0 <_svfiprintf_r+0x1e4>)
 8002ca6:	f7fd fa9b 	bl	80001e0 <memchr>
 8002caa:	9a04      	ldr	r2, [sp, #16]
 8002cac:	b9d8      	cbnz	r0, 8002ce6 <_svfiprintf_r+0xea>
 8002cae:	06d0      	lsls	r0, r2, #27
 8002cb0:	bf44      	itt	mi
 8002cb2:	2320      	movmi	r3, #32
 8002cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cb8:	0711      	lsls	r1, r2, #28
 8002cba:	bf44      	itt	mi
 8002cbc:	232b      	movmi	r3, #43	@ 0x2b
 8002cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8002cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cc8:	d015      	beq.n	8002cf6 <_svfiprintf_r+0xfa>
 8002cca:	9a07      	ldr	r2, [sp, #28]
 8002ccc:	4654      	mov	r4, sl
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f04f 0c0a 	mov.w	ip, #10
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cda:	3b30      	subs	r3, #48	@ 0x30
 8002cdc:	2b09      	cmp	r3, #9
 8002cde:	d94b      	bls.n	8002d78 <_svfiprintf_r+0x17c>
 8002ce0:	b1b0      	cbz	r0, 8002d10 <_svfiprintf_r+0x114>
 8002ce2:	9207      	str	r2, [sp, #28]
 8002ce4:	e014      	b.n	8002d10 <_svfiprintf_r+0x114>
 8002ce6:	eba0 0308 	sub.w	r3, r0, r8
 8002cea:	fa09 f303 	lsl.w	r3, r9, r3
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	46a2      	mov	sl, r4
 8002cf4:	e7d2      	b.n	8002c9c <_svfiprintf_r+0xa0>
 8002cf6:	9b03      	ldr	r3, [sp, #12]
 8002cf8:	1d19      	adds	r1, r3, #4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	9103      	str	r1, [sp, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bfbb      	ittet	lt
 8002d02:	425b      	neglt	r3, r3
 8002d04:	f042 0202 	orrlt.w	r2, r2, #2
 8002d08:	9307      	strge	r3, [sp, #28]
 8002d0a:	9307      	strlt	r3, [sp, #28]
 8002d0c:	bfb8      	it	lt
 8002d0e:	9204      	strlt	r2, [sp, #16]
 8002d10:	7823      	ldrb	r3, [r4, #0]
 8002d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d14:	d10a      	bne.n	8002d2c <_svfiprintf_r+0x130>
 8002d16:	7863      	ldrb	r3, [r4, #1]
 8002d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d1a:	d132      	bne.n	8002d82 <_svfiprintf_r+0x186>
 8002d1c:	9b03      	ldr	r3, [sp, #12]
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	9203      	str	r2, [sp, #12]
 8002d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d28:	3402      	adds	r4, #2
 8002d2a:	9305      	str	r3, [sp, #20]
 8002d2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002df0 <_svfiprintf_r+0x1f4>
 8002d30:	7821      	ldrb	r1, [r4, #0]
 8002d32:	2203      	movs	r2, #3
 8002d34:	4650      	mov	r0, sl
 8002d36:	f7fd fa53 	bl	80001e0 <memchr>
 8002d3a:	b138      	cbz	r0, 8002d4c <_svfiprintf_r+0x150>
 8002d3c:	9b04      	ldr	r3, [sp, #16]
 8002d3e:	eba0 000a 	sub.w	r0, r0, sl
 8002d42:	2240      	movs	r2, #64	@ 0x40
 8002d44:	4082      	lsls	r2, r0
 8002d46:	4313      	orrs	r3, r2
 8002d48:	3401      	adds	r4, #1
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d50:	4824      	ldr	r0, [pc, #144]	@ (8002de4 <_svfiprintf_r+0x1e8>)
 8002d52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d56:	2206      	movs	r2, #6
 8002d58:	f7fd fa42 	bl	80001e0 <memchr>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d036      	beq.n	8002dce <_svfiprintf_r+0x1d2>
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <_svfiprintf_r+0x1ec>)
 8002d62:	bb1b      	cbnz	r3, 8002dac <_svfiprintf_r+0x1b0>
 8002d64:	9b03      	ldr	r3, [sp, #12]
 8002d66:	3307      	adds	r3, #7
 8002d68:	f023 0307 	bic.w	r3, r3, #7
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	9303      	str	r3, [sp, #12]
 8002d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d72:	4433      	add	r3, r6
 8002d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d76:	e76a      	b.n	8002c4e <_svfiprintf_r+0x52>
 8002d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e7a8      	b.n	8002cd4 <_svfiprintf_r+0xd8>
 8002d82:	2300      	movs	r3, #0
 8002d84:	3401      	adds	r4, #1
 8002d86:	9305      	str	r3, [sp, #20]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f04f 0c0a 	mov.w	ip, #10
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d94:	3a30      	subs	r2, #48	@ 0x30
 8002d96:	2a09      	cmp	r2, #9
 8002d98:	d903      	bls.n	8002da2 <_svfiprintf_r+0x1a6>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0c6      	beq.n	8002d2c <_svfiprintf_r+0x130>
 8002d9e:	9105      	str	r1, [sp, #20]
 8002da0:	e7c4      	b.n	8002d2c <_svfiprintf_r+0x130>
 8002da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002da6:	4604      	mov	r4, r0
 8002da8:	2301      	movs	r3, #1
 8002daa:	e7f0      	b.n	8002d8e <_svfiprintf_r+0x192>
 8002dac:	ab03      	add	r3, sp, #12
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	462a      	mov	r2, r5
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <_svfiprintf_r+0x1f0>)
 8002db4:	a904      	add	r1, sp, #16
 8002db6:	4638      	mov	r0, r7
 8002db8:	f3af 8000 	nop.w
 8002dbc:	1c42      	adds	r2, r0, #1
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	d1d6      	bne.n	8002d70 <_svfiprintf_r+0x174>
 8002dc2:	89ab      	ldrh	r3, [r5, #12]
 8002dc4:	065b      	lsls	r3, r3, #25
 8002dc6:	f53f af2d 	bmi.w	8002c24 <_svfiprintf_r+0x28>
 8002dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002dcc:	e72c      	b.n	8002c28 <_svfiprintf_r+0x2c>
 8002dce:	ab03      	add	r3, sp, #12
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	462a      	mov	r2, r5
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <_svfiprintf_r+0x1f0>)
 8002dd6:	a904      	add	r1, sp, #16
 8002dd8:	4638      	mov	r0, r7
 8002dda:	f000 f9bb 	bl	8003154 <_printf_i>
 8002dde:	e7ed      	b.n	8002dbc <_svfiprintf_r+0x1c0>
 8002de0:	0800377c 	.word	0x0800377c
 8002de4:	08003786 	.word	0x08003786
 8002de8:	00000000 	.word	0x00000000
 8002dec:	08002b45 	.word	0x08002b45
 8002df0:	08003782 	.word	0x08003782

08002df4 <__sfputc_r>:
 8002df4:	6893      	ldr	r3, [r2, #8]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	b410      	push	{r4}
 8002dfc:	6093      	str	r3, [r2, #8]
 8002dfe:	da08      	bge.n	8002e12 <__sfputc_r+0x1e>
 8002e00:	6994      	ldr	r4, [r2, #24]
 8002e02:	42a3      	cmp	r3, r4
 8002e04:	db01      	blt.n	8002e0a <__sfputc_r+0x16>
 8002e06:	290a      	cmp	r1, #10
 8002e08:	d103      	bne.n	8002e12 <__sfputc_r+0x1e>
 8002e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e0e:	f7ff bc7c 	b.w	800270a <__swbuf_r>
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	1c58      	adds	r0, r3, #1
 8002e16:	6010      	str	r0, [r2, #0]
 8002e18:	7019      	strb	r1, [r3, #0]
 8002e1a:	4608      	mov	r0, r1
 8002e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <__sfputs_r>:
 8002e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e24:	4606      	mov	r6, r0
 8002e26:	460f      	mov	r7, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	18d5      	adds	r5, r2, r3
 8002e2c:	42ac      	cmp	r4, r5
 8002e2e:	d101      	bne.n	8002e34 <__sfputs_r+0x12>
 8002e30:	2000      	movs	r0, #0
 8002e32:	e007      	b.n	8002e44 <__sfputs_r+0x22>
 8002e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e38:	463a      	mov	r2, r7
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff ffda 	bl	8002df4 <__sfputc_r>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d1f3      	bne.n	8002e2c <__sfputs_r+0xa>
 8002e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e48 <_vfiprintf_r>:
 8002e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	b09d      	sub	sp, #116	@ 0x74
 8002e50:	4614      	mov	r4, r2
 8002e52:	4698      	mov	r8, r3
 8002e54:	4606      	mov	r6, r0
 8002e56:	b118      	cbz	r0, 8002e60 <_vfiprintf_r+0x18>
 8002e58:	6a03      	ldr	r3, [r0, #32]
 8002e5a:	b90b      	cbnz	r3, 8002e60 <_vfiprintf_r+0x18>
 8002e5c:	f7ff fb4c 	bl	80024f8 <__sinit>
 8002e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e62:	07d9      	lsls	r1, r3, #31
 8002e64:	d405      	bmi.n	8002e72 <_vfiprintf_r+0x2a>
 8002e66:	89ab      	ldrh	r3, [r5, #12]
 8002e68:	059a      	lsls	r2, r3, #22
 8002e6a:	d402      	bmi.n	8002e72 <_vfiprintf_r+0x2a>
 8002e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e6e:	f7ff fd6e 	bl	800294e <__retarget_lock_acquire_recursive>
 8002e72:	89ab      	ldrh	r3, [r5, #12]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	d501      	bpl.n	8002e7c <_vfiprintf_r+0x34>
 8002e78:	692b      	ldr	r3, [r5, #16]
 8002e7a:	b99b      	cbnz	r3, 8002ea4 <_vfiprintf_r+0x5c>
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f7ff fc82 	bl	8002788 <__swsetup_r>
 8002e84:	b170      	cbz	r0, 8002ea4 <_vfiprintf_r+0x5c>
 8002e86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e88:	07dc      	lsls	r4, r3, #31
 8002e8a:	d504      	bpl.n	8002e96 <_vfiprintf_r+0x4e>
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e90:	b01d      	add	sp, #116	@ 0x74
 8002e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e96:	89ab      	ldrh	r3, [r5, #12]
 8002e98:	0598      	lsls	r0, r3, #22
 8002e9a:	d4f7      	bmi.n	8002e8c <_vfiprintf_r+0x44>
 8002e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e9e:	f7ff fd57 	bl	8002950 <__retarget_lock_release_recursive>
 8002ea2:	e7f3      	b.n	8002e8c <_vfiprintf_r+0x44>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002eae:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eb2:	2330      	movs	r3, #48	@ 0x30
 8002eb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003064 <_vfiprintf_r+0x21c>
 8002eb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ebc:	f04f 0901 	mov.w	r9, #1
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	469a      	mov	sl, r3
 8002ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ec8:	b10a      	cbz	r2, 8002ece <_vfiprintf_r+0x86>
 8002eca:	2a25      	cmp	r2, #37	@ 0x25
 8002ecc:	d1f9      	bne.n	8002ec2 <_vfiprintf_r+0x7a>
 8002ece:	ebba 0b04 	subs.w	fp, sl, r4
 8002ed2:	d00b      	beq.n	8002eec <_vfiprintf_r+0xa4>
 8002ed4:	465b      	mov	r3, fp
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7ff ffa1 	bl	8002e22 <__sfputs_r>
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	f000 80a7 	beq.w	8003034 <_vfiprintf_r+0x1ec>
 8002ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ee8:	445a      	add	r2, fp
 8002eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eec:	f89a 3000 	ldrb.w	r3, [sl]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 809f 	beq.w	8003034 <_vfiprintf_r+0x1ec>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f00:	f10a 0a01 	add.w	sl, sl, #1
 8002f04:	9304      	str	r3, [sp, #16]
 8002f06:	9307      	str	r3, [sp, #28]
 8002f08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f0e:	4654      	mov	r4, sl
 8002f10:	2205      	movs	r2, #5
 8002f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f16:	4853      	ldr	r0, [pc, #332]	@ (8003064 <_vfiprintf_r+0x21c>)
 8002f18:	f7fd f962 	bl	80001e0 <memchr>
 8002f1c:	9a04      	ldr	r2, [sp, #16]
 8002f1e:	b9d8      	cbnz	r0, 8002f58 <_vfiprintf_r+0x110>
 8002f20:	06d1      	lsls	r1, r2, #27
 8002f22:	bf44      	itt	mi
 8002f24:	2320      	movmi	r3, #32
 8002f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f2a:	0713      	lsls	r3, r2, #28
 8002f2c:	bf44      	itt	mi
 8002f2e:	232b      	movmi	r3, #43	@ 0x2b
 8002f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f34:	f89a 3000 	ldrb.w	r3, [sl]
 8002f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f3a:	d015      	beq.n	8002f68 <_vfiprintf_r+0x120>
 8002f3c:	9a07      	ldr	r2, [sp, #28]
 8002f3e:	4654      	mov	r4, sl
 8002f40:	2000      	movs	r0, #0
 8002f42:	f04f 0c0a 	mov.w	ip, #10
 8002f46:	4621      	mov	r1, r4
 8002f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f4c:	3b30      	subs	r3, #48	@ 0x30
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	d94b      	bls.n	8002fea <_vfiprintf_r+0x1a2>
 8002f52:	b1b0      	cbz	r0, 8002f82 <_vfiprintf_r+0x13a>
 8002f54:	9207      	str	r2, [sp, #28]
 8002f56:	e014      	b.n	8002f82 <_vfiprintf_r+0x13a>
 8002f58:	eba0 0308 	sub.w	r3, r0, r8
 8002f5c:	fa09 f303 	lsl.w	r3, r9, r3
 8002f60:	4313      	orrs	r3, r2
 8002f62:	9304      	str	r3, [sp, #16]
 8002f64:	46a2      	mov	sl, r4
 8002f66:	e7d2      	b.n	8002f0e <_vfiprintf_r+0xc6>
 8002f68:	9b03      	ldr	r3, [sp, #12]
 8002f6a:	1d19      	adds	r1, r3, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	9103      	str	r1, [sp, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bfbb      	ittet	lt
 8002f74:	425b      	neglt	r3, r3
 8002f76:	f042 0202 	orrlt.w	r2, r2, #2
 8002f7a:	9307      	strge	r3, [sp, #28]
 8002f7c:	9307      	strlt	r3, [sp, #28]
 8002f7e:	bfb8      	it	lt
 8002f80:	9204      	strlt	r2, [sp, #16]
 8002f82:	7823      	ldrb	r3, [r4, #0]
 8002f84:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f86:	d10a      	bne.n	8002f9e <_vfiprintf_r+0x156>
 8002f88:	7863      	ldrb	r3, [r4, #1]
 8002f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f8c:	d132      	bne.n	8002ff4 <_vfiprintf_r+0x1ac>
 8002f8e:	9b03      	ldr	r3, [sp, #12]
 8002f90:	1d1a      	adds	r2, r3, #4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	9203      	str	r2, [sp, #12]
 8002f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f9a:	3402      	adds	r4, #2
 8002f9c:	9305      	str	r3, [sp, #20]
 8002f9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003074 <_vfiprintf_r+0x22c>
 8002fa2:	7821      	ldrb	r1, [r4, #0]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4650      	mov	r0, sl
 8002fa8:	f7fd f91a 	bl	80001e0 <memchr>
 8002fac:	b138      	cbz	r0, 8002fbe <_vfiprintf_r+0x176>
 8002fae:	9b04      	ldr	r3, [sp, #16]
 8002fb0:	eba0 000a 	sub.w	r0, r0, sl
 8002fb4:	2240      	movs	r2, #64	@ 0x40
 8002fb6:	4082      	lsls	r2, r0
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	3401      	adds	r4, #1
 8002fbc:	9304      	str	r3, [sp, #16]
 8002fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc2:	4829      	ldr	r0, [pc, #164]	@ (8003068 <_vfiprintf_r+0x220>)
 8002fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fc8:	2206      	movs	r2, #6
 8002fca:	f7fd f909 	bl	80001e0 <memchr>
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d03f      	beq.n	8003052 <_vfiprintf_r+0x20a>
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <_vfiprintf_r+0x224>)
 8002fd4:	bb1b      	cbnz	r3, 800301e <_vfiprintf_r+0x1d6>
 8002fd6:	9b03      	ldr	r3, [sp, #12]
 8002fd8:	3307      	adds	r3, #7
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	3308      	adds	r3, #8
 8002fe0:	9303      	str	r3, [sp, #12]
 8002fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fe4:	443b      	add	r3, r7
 8002fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fe8:	e76a      	b.n	8002ec0 <_vfiprintf_r+0x78>
 8002fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fee:	460c      	mov	r4, r1
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	e7a8      	b.n	8002f46 <_vfiprintf_r+0xfe>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	3401      	adds	r4, #1
 8002ff8:	9305      	str	r3, [sp, #20]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f04f 0c0a 	mov.w	ip, #10
 8003000:	4620      	mov	r0, r4
 8003002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003006:	3a30      	subs	r2, #48	@ 0x30
 8003008:	2a09      	cmp	r2, #9
 800300a:	d903      	bls.n	8003014 <_vfiprintf_r+0x1cc>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0c6      	beq.n	8002f9e <_vfiprintf_r+0x156>
 8003010:	9105      	str	r1, [sp, #20]
 8003012:	e7c4      	b.n	8002f9e <_vfiprintf_r+0x156>
 8003014:	fb0c 2101 	mla	r1, ip, r1, r2
 8003018:	4604      	mov	r4, r0
 800301a:	2301      	movs	r3, #1
 800301c:	e7f0      	b.n	8003000 <_vfiprintf_r+0x1b8>
 800301e:	ab03      	add	r3, sp, #12
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	462a      	mov	r2, r5
 8003024:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <_vfiprintf_r+0x228>)
 8003026:	a904      	add	r1, sp, #16
 8003028:	4630      	mov	r0, r6
 800302a:	f3af 8000 	nop.w
 800302e:	4607      	mov	r7, r0
 8003030:	1c78      	adds	r0, r7, #1
 8003032:	d1d6      	bne.n	8002fe2 <_vfiprintf_r+0x19a>
 8003034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003036:	07d9      	lsls	r1, r3, #31
 8003038:	d405      	bmi.n	8003046 <_vfiprintf_r+0x1fe>
 800303a:	89ab      	ldrh	r3, [r5, #12]
 800303c:	059a      	lsls	r2, r3, #22
 800303e:	d402      	bmi.n	8003046 <_vfiprintf_r+0x1fe>
 8003040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003042:	f7ff fc85 	bl	8002950 <__retarget_lock_release_recursive>
 8003046:	89ab      	ldrh	r3, [r5, #12]
 8003048:	065b      	lsls	r3, r3, #25
 800304a:	f53f af1f 	bmi.w	8002e8c <_vfiprintf_r+0x44>
 800304e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003050:	e71e      	b.n	8002e90 <_vfiprintf_r+0x48>
 8003052:	ab03      	add	r3, sp, #12
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	462a      	mov	r2, r5
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <_vfiprintf_r+0x228>)
 800305a:	a904      	add	r1, sp, #16
 800305c:	4630      	mov	r0, r6
 800305e:	f000 f879 	bl	8003154 <_printf_i>
 8003062:	e7e4      	b.n	800302e <_vfiprintf_r+0x1e6>
 8003064:	0800377c 	.word	0x0800377c
 8003068:	08003786 	.word	0x08003786
 800306c:	00000000 	.word	0x00000000
 8003070:	08002e23 	.word	0x08002e23
 8003074:	08003782 	.word	0x08003782

08003078 <_printf_common>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	4616      	mov	r6, r2
 800307e:	4698      	mov	r8, r3
 8003080:	688a      	ldr	r2, [r1, #8]
 8003082:	690b      	ldr	r3, [r1, #16]
 8003084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003088:	4293      	cmp	r3, r2
 800308a:	bfb8      	it	lt
 800308c:	4613      	movlt	r3, r2
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003094:	4607      	mov	r7, r0
 8003096:	460c      	mov	r4, r1
 8003098:	b10a      	cbz	r2, 800309e <_printf_common+0x26>
 800309a:	3301      	adds	r3, #1
 800309c:	6033      	str	r3, [r6, #0]
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	0699      	lsls	r1, r3, #26
 80030a2:	bf42      	ittt	mi
 80030a4:	6833      	ldrmi	r3, [r6, #0]
 80030a6:	3302      	addmi	r3, #2
 80030a8:	6033      	strmi	r3, [r6, #0]
 80030aa:	6825      	ldr	r5, [r4, #0]
 80030ac:	f015 0506 	ands.w	r5, r5, #6
 80030b0:	d106      	bne.n	80030c0 <_printf_common+0x48>
 80030b2:	f104 0a19 	add.w	sl, r4, #25
 80030b6:	68e3      	ldr	r3, [r4, #12]
 80030b8:	6832      	ldr	r2, [r6, #0]
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	42ab      	cmp	r3, r5
 80030be:	dc26      	bgt.n	800310e <_printf_common+0x96>
 80030c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	3b00      	subs	r3, #0
 80030c8:	bf18      	it	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	0692      	lsls	r2, r2, #26
 80030ce:	d42b      	bmi.n	8003128 <_printf_common+0xb0>
 80030d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030d4:	4641      	mov	r1, r8
 80030d6:	4638      	mov	r0, r7
 80030d8:	47c8      	blx	r9
 80030da:	3001      	adds	r0, #1
 80030dc:	d01e      	beq.n	800311c <_printf_common+0xa4>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	6922      	ldr	r2, [r4, #16]
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf02      	ittt	eq
 80030ea:	68e5      	ldreq	r5, [r4, #12]
 80030ec:	6833      	ldreq	r3, [r6, #0]
 80030ee:	1aed      	subeq	r5, r5, r3
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	bf0c      	ite	eq
 80030f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f8:	2500      	movne	r5, #0
 80030fa:	4293      	cmp	r3, r2
 80030fc:	bfc4      	itt	gt
 80030fe:	1a9b      	subgt	r3, r3, r2
 8003100:	18ed      	addgt	r5, r5, r3
 8003102:	2600      	movs	r6, #0
 8003104:	341a      	adds	r4, #26
 8003106:	42b5      	cmp	r5, r6
 8003108:	d11a      	bne.n	8003140 <_printf_common+0xc8>
 800310a:	2000      	movs	r0, #0
 800310c:	e008      	b.n	8003120 <_printf_common+0xa8>
 800310e:	2301      	movs	r3, #1
 8003110:	4652      	mov	r2, sl
 8003112:	4641      	mov	r1, r8
 8003114:	4638      	mov	r0, r7
 8003116:	47c8      	blx	r9
 8003118:	3001      	adds	r0, #1
 800311a:	d103      	bne.n	8003124 <_printf_common+0xac>
 800311c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003124:	3501      	adds	r5, #1
 8003126:	e7c6      	b.n	80030b6 <_printf_common+0x3e>
 8003128:	18e1      	adds	r1, r4, r3
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	2030      	movs	r0, #48	@ 0x30
 800312e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003132:	4422      	add	r2, r4
 8003134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800313c:	3302      	adds	r3, #2
 800313e:	e7c7      	b.n	80030d0 <_printf_common+0x58>
 8003140:	2301      	movs	r3, #1
 8003142:	4622      	mov	r2, r4
 8003144:	4641      	mov	r1, r8
 8003146:	4638      	mov	r0, r7
 8003148:	47c8      	blx	r9
 800314a:	3001      	adds	r0, #1
 800314c:	d0e6      	beq.n	800311c <_printf_common+0xa4>
 800314e:	3601      	adds	r6, #1
 8003150:	e7d9      	b.n	8003106 <_printf_common+0x8e>
	...

08003154 <_printf_i>:
 8003154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	7e0f      	ldrb	r7, [r1, #24]
 800315a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800315c:	2f78      	cmp	r7, #120	@ 0x78
 800315e:	4691      	mov	r9, r2
 8003160:	4680      	mov	r8, r0
 8003162:	460c      	mov	r4, r1
 8003164:	469a      	mov	sl, r3
 8003166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800316a:	d807      	bhi.n	800317c <_printf_i+0x28>
 800316c:	2f62      	cmp	r7, #98	@ 0x62
 800316e:	d80a      	bhi.n	8003186 <_printf_i+0x32>
 8003170:	2f00      	cmp	r7, #0
 8003172:	f000 80d2 	beq.w	800331a <_printf_i+0x1c6>
 8003176:	2f58      	cmp	r7, #88	@ 0x58
 8003178:	f000 80b9 	beq.w	80032ee <_printf_i+0x19a>
 800317c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003184:	e03a      	b.n	80031fc <_printf_i+0xa8>
 8003186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800318a:	2b15      	cmp	r3, #21
 800318c:	d8f6      	bhi.n	800317c <_printf_i+0x28>
 800318e:	a101      	add	r1, pc, #4	@ (adr r1, 8003194 <_printf_i+0x40>)
 8003190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003194:	080031ed 	.word	0x080031ed
 8003198:	08003201 	.word	0x08003201
 800319c:	0800317d 	.word	0x0800317d
 80031a0:	0800317d 	.word	0x0800317d
 80031a4:	0800317d 	.word	0x0800317d
 80031a8:	0800317d 	.word	0x0800317d
 80031ac:	08003201 	.word	0x08003201
 80031b0:	0800317d 	.word	0x0800317d
 80031b4:	0800317d 	.word	0x0800317d
 80031b8:	0800317d 	.word	0x0800317d
 80031bc:	0800317d 	.word	0x0800317d
 80031c0:	08003301 	.word	0x08003301
 80031c4:	0800322b 	.word	0x0800322b
 80031c8:	080032bb 	.word	0x080032bb
 80031cc:	0800317d 	.word	0x0800317d
 80031d0:	0800317d 	.word	0x0800317d
 80031d4:	08003323 	.word	0x08003323
 80031d8:	0800317d 	.word	0x0800317d
 80031dc:	0800322b 	.word	0x0800322b
 80031e0:	0800317d 	.word	0x0800317d
 80031e4:	0800317d 	.word	0x0800317d
 80031e8:	080032c3 	.word	0x080032c3
 80031ec:	6833      	ldr	r3, [r6, #0]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6032      	str	r2, [r6, #0]
 80031f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09d      	b.n	800333c <_printf_i+0x1e8>
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	1d19      	adds	r1, r3, #4
 8003206:	6031      	str	r1, [r6, #0]
 8003208:	0606      	lsls	r6, r0, #24
 800320a:	d501      	bpl.n	8003210 <_printf_i+0xbc>
 800320c:	681d      	ldr	r5, [r3, #0]
 800320e:	e003      	b.n	8003218 <_printf_i+0xc4>
 8003210:	0645      	lsls	r5, r0, #25
 8003212:	d5fb      	bpl.n	800320c <_printf_i+0xb8>
 8003214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003218:	2d00      	cmp	r5, #0
 800321a:	da03      	bge.n	8003224 <_printf_i+0xd0>
 800321c:	232d      	movs	r3, #45	@ 0x2d
 800321e:	426d      	negs	r5, r5
 8003220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003224:	4859      	ldr	r0, [pc, #356]	@ (800338c <_printf_i+0x238>)
 8003226:	230a      	movs	r3, #10
 8003228:	e011      	b.n	800324e <_printf_i+0xfa>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	6833      	ldr	r3, [r6, #0]
 800322e:	0608      	lsls	r0, r1, #24
 8003230:	f853 5b04 	ldr.w	r5, [r3], #4
 8003234:	d402      	bmi.n	800323c <_printf_i+0xe8>
 8003236:	0649      	lsls	r1, r1, #25
 8003238:	bf48      	it	mi
 800323a:	b2ad      	uxthmi	r5, r5
 800323c:	2f6f      	cmp	r7, #111	@ 0x6f
 800323e:	4853      	ldr	r0, [pc, #332]	@ (800338c <_printf_i+0x238>)
 8003240:	6033      	str	r3, [r6, #0]
 8003242:	bf14      	ite	ne
 8003244:	230a      	movne	r3, #10
 8003246:	2308      	moveq	r3, #8
 8003248:	2100      	movs	r1, #0
 800324a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800324e:	6866      	ldr	r6, [r4, #4]
 8003250:	60a6      	str	r6, [r4, #8]
 8003252:	2e00      	cmp	r6, #0
 8003254:	bfa2      	ittt	ge
 8003256:	6821      	ldrge	r1, [r4, #0]
 8003258:	f021 0104 	bicge.w	r1, r1, #4
 800325c:	6021      	strge	r1, [r4, #0]
 800325e:	b90d      	cbnz	r5, 8003264 <_printf_i+0x110>
 8003260:	2e00      	cmp	r6, #0
 8003262:	d04b      	beq.n	80032fc <_printf_i+0x1a8>
 8003264:	4616      	mov	r6, r2
 8003266:	fbb5 f1f3 	udiv	r1, r5, r3
 800326a:	fb03 5711 	mls	r7, r3, r1, r5
 800326e:	5dc7      	ldrb	r7, [r0, r7]
 8003270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003274:	462f      	mov	r7, r5
 8003276:	42bb      	cmp	r3, r7
 8003278:	460d      	mov	r5, r1
 800327a:	d9f4      	bls.n	8003266 <_printf_i+0x112>
 800327c:	2b08      	cmp	r3, #8
 800327e:	d10b      	bne.n	8003298 <_printf_i+0x144>
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	07df      	lsls	r7, r3, #31
 8003284:	d508      	bpl.n	8003298 <_printf_i+0x144>
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	6861      	ldr	r1, [r4, #4]
 800328a:	4299      	cmp	r1, r3
 800328c:	bfde      	ittt	le
 800328e:	2330      	movle	r3, #48	@ 0x30
 8003290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003294:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003298:	1b92      	subs	r2, r2, r6
 800329a:	6122      	str	r2, [r4, #16]
 800329c:	f8cd a000 	str.w	sl, [sp]
 80032a0:	464b      	mov	r3, r9
 80032a2:	aa03      	add	r2, sp, #12
 80032a4:	4621      	mov	r1, r4
 80032a6:	4640      	mov	r0, r8
 80032a8:	f7ff fee6 	bl	8003078 <_printf_common>
 80032ac:	3001      	adds	r0, #1
 80032ae:	d14a      	bne.n	8003346 <_printf_i+0x1f2>
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b4:	b004      	add	sp, #16
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	4833      	ldr	r0, [pc, #204]	@ (8003390 <_printf_i+0x23c>)
 80032c4:	2778      	movs	r7, #120	@ 0x78
 80032c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	6831      	ldr	r1, [r6, #0]
 80032ce:	061f      	lsls	r7, r3, #24
 80032d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80032d4:	d402      	bmi.n	80032dc <_printf_i+0x188>
 80032d6:	065f      	lsls	r7, r3, #25
 80032d8:	bf48      	it	mi
 80032da:	b2ad      	uxthmi	r5, r5
 80032dc:	6031      	str	r1, [r6, #0]
 80032de:	07d9      	lsls	r1, r3, #31
 80032e0:	bf44      	itt	mi
 80032e2:	f043 0320 	orrmi.w	r3, r3, #32
 80032e6:	6023      	strmi	r3, [r4, #0]
 80032e8:	b11d      	cbz	r5, 80032f2 <_printf_i+0x19e>
 80032ea:	2310      	movs	r3, #16
 80032ec:	e7ac      	b.n	8003248 <_printf_i+0xf4>
 80032ee:	4827      	ldr	r0, [pc, #156]	@ (800338c <_printf_i+0x238>)
 80032f0:	e7e9      	b.n	80032c6 <_printf_i+0x172>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	f023 0320 	bic.w	r3, r3, #32
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	e7f6      	b.n	80032ea <_printf_i+0x196>
 80032fc:	4616      	mov	r6, r2
 80032fe:	e7bd      	b.n	800327c <_printf_i+0x128>
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	6825      	ldr	r5, [r4, #0]
 8003304:	6961      	ldr	r1, [r4, #20]
 8003306:	1d18      	adds	r0, r3, #4
 8003308:	6030      	str	r0, [r6, #0]
 800330a:	062e      	lsls	r6, r5, #24
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	d501      	bpl.n	8003314 <_printf_i+0x1c0>
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	e002      	b.n	800331a <_printf_i+0x1c6>
 8003314:	0668      	lsls	r0, r5, #25
 8003316:	d5fb      	bpl.n	8003310 <_printf_i+0x1bc>
 8003318:	8019      	strh	r1, [r3, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	4616      	mov	r6, r2
 8003320:	e7bc      	b.n	800329c <_printf_i+0x148>
 8003322:	6833      	ldr	r3, [r6, #0]
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	6032      	str	r2, [r6, #0]
 8003328:	681e      	ldr	r6, [r3, #0]
 800332a:	6862      	ldr	r2, [r4, #4]
 800332c:	2100      	movs	r1, #0
 800332e:	4630      	mov	r0, r6
 8003330:	f7fc ff56 	bl	80001e0 <memchr>
 8003334:	b108      	cbz	r0, 800333a <_printf_i+0x1e6>
 8003336:	1b80      	subs	r0, r0, r6
 8003338:	6060      	str	r0, [r4, #4]
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	6123      	str	r3, [r4, #16]
 800333e:	2300      	movs	r3, #0
 8003340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003344:	e7aa      	b.n	800329c <_printf_i+0x148>
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	4632      	mov	r2, r6
 800334a:	4649      	mov	r1, r9
 800334c:	4640      	mov	r0, r8
 800334e:	47d0      	blx	sl
 8003350:	3001      	adds	r0, #1
 8003352:	d0ad      	beq.n	80032b0 <_printf_i+0x15c>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	079b      	lsls	r3, r3, #30
 8003358:	d413      	bmi.n	8003382 <_printf_i+0x22e>
 800335a:	68e0      	ldr	r0, [r4, #12]
 800335c:	9b03      	ldr	r3, [sp, #12]
 800335e:	4298      	cmp	r0, r3
 8003360:	bfb8      	it	lt
 8003362:	4618      	movlt	r0, r3
 8003364:	e7a6      	b.n	80032b4 <_printf_i+0x160>
 8003366:	2301      	movs	r3, #1
 8003368:	4632      	mov	r2, r6
 800336a:	4649      	mov	r1, r9
 800336c:	4640      	mov	r0, r8
 800336e:	47d0      	blx	sl
 8003370:	3001      	adds	r0, #1
 8003372:	d09d      	beq.n	80032b0 <_printf_i+0x15c>
 8003374:	3501      	adds	r5, #1
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	9903      	ldr	r1, [sp, #12]
 800337a:	1a5b      	subs	r3, r3, r1
 800337c:	42ab      	cmp	r3, r5
 800337e:	dcf2      	bgt.n	8003366 <_printf_i+0x212>
 8003380:	e7eb      	b.n	800335a <_printf_i+0x206>
 8003382:	2500      	movs	r5, #0
 8003384:	f104 0619 	add.w	r6, r4, #25
 8003388:	e7f5      	b.n	8003376 <_printf_i+0x222>
 800338a:	bf00      	nop
 800338c:	0800378d 	.word	0x0800378d
 8003390:	0800379e 	.word	0x0800379e

08003394 <__sflush_r>:
 8003394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339c:	0716      	lsls	r6, r2, #28
 800339e:	4605      	mov	r5, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	d454      	bmi.n	800344e <__sflush_r+0xba>
 80033a4:	684b      	ldr	r3, [r1, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	dc02      	bgt.n	80033b0 <__sflush_r+0x1c>
 80033aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	dd48      	ble.n	8003442 <__sflush_r+0xae>
 80033b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033b2:	2e00      	cmp	r6, #0
 80033b4:	d045      	beq.n	8003442 <__sflush_r+0xae>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80033bc:	682f      	ldr	r7, [r5, #0]
 80033be:	6a21      	ldr	r1, [r4, #32]
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	d030      	beq.n	8003426 <__sflush_r+0x92>
 80033c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	0759      	lsls	r1, r3, #29
 80033ca:	d505      	bpl.n	80033d8 <__sflush_r+0x44>
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	1ad2      	subs	r2, r2, r3
 80033d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033d2:	b10b      	cbz	r3, 80033d8 <__sflush_r+0x44>
 80033d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033dc:	6a21      	ldr	r1, [r4, #32]
 80033de:	4628      	mov	r0, r5
 80033e0:	47b0      	blx	r6
 80033e2:	1c43      	adds	r3, r0, #1
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	d106      	bne.n	80033f6 <__sflush_r+0x62>
 80033e8:	6829      	ldr	r1, [r5, #0]
 80033ea:	291d      	cmp	r1, #29
 80033ec:	d82b      	bhi.n	8003446 <__sflush_r+0xb2>
 80033ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003498 <__sflush_r+0x104>)
 80033f0:	410a      	asrs	r2, r1
 80033f2:	07d6      	lsls	r6, r2, #31
 80033f4:	d427      	bmi.n	8003446 <__sflush_r+0xb2>
 80033f6:	2200      	movs	r2, #0
 80033f8:	6062      	str	r2, [r4, #4]
 80033fa:	04d9      	lsls	r1, r3, #19
 80033fc:	6922      	ldr	r2, [r4, #16]
 80033fe:	6022      	str	r2, [r4, #0]
 8003400:	d504      	bpl.n	800340c <__sflush_r+0x78>
 8003402:	1c42      	adds	r2, r0, #1
 8003404:	d101      	bne.n	800340a <__sflush_r+0x76>
 8003406:	682b      	ldr	r3, [r5, #0]
 8003408:	b903      	cbnz	r3, 800340c <__sflush_r+0x78>
 800340a:	6560      	str	r0, [r4, #84]	@ 0x54
 800340c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800340e:	602f      	str	r7, [r5, #0]
 8003410:	b1b9      	cbz	r1, 8003442 <__sflush_r+0xae>
 8003412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003416:	4299      	cmp	r1, r3
 8003418:	d002      	beq.n	8003420 <__sflush_r+0x8c>
 800341a:	4628      	mov	r0, r5
 800341c:	f7ff fa9a 	bl	8002954 <_free_r>
 8003420:	2300      	movs	r3, #0
 8003422:	6363      	str	r3, [r4, #52]	@ 0x34
 8003424:	e00d      	b.n	8003442 <__sflush_r+0xae>
 8003426:	2301      	movs	r3, #1
 8003428:	4628      	mov	r0, r5
 800342a:	47b0      	blx	r6
 800342c:	4602      	mov	r2, r0
 800342e:	1c50      	adds	r0, r2, #1
 8003430:	d1c9      	bne.n	80033c6 <__sflush_r+0x32>
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0c6      	beq.n	80033c6 <__sflush_r+0x32>
 8003438:	2b1d      	cmp	r3, #29
 800343a:	d001      	beq.n	8003440 <__sflush_r+0xac>
 800343c:	2b16      	cmp	r3, #22
 800343e:	d11e      	bne.n	800347e <__sflush_r+0xea>
 8003440:	602f      	str	r7, [r5, #0]
 8003442:	2000      	movs	r0, #0
 8003444:	e022      	b.n	800348c <__sflush_r+0xf8>
 8003446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800344a:	b21b      	sxth	r3, r3
 800344c:	e01b      	b.n	8003486 <__sflush_r+0xf2>
 800344e:	690f      	ldr	r7, [r1, #16]
 8003450:	2f00      	cmp	r7, #0
 8003452:	d0f6      	beq.n	8003442 <__sflush_r+0xae>
 8003454:	0793      	lsls	r3, r2, #30
 8003456:	680e      	ldr	r6, [r1, #0]
 8003458:	bf08      	it	eq
 800345a:	694b      	ldreq	r3, [r1, #20]
 800345c:	600f      	str	r7, [r1, #0]
 800345e:	bf18      	it	ne
 8003460:	2300      	movne	r3, #0
 8003462:	eba6 0807 	sub.w	r8, r6, r7
 8003466:	608b      	str	r3, [r1, #8]
 8003468:	f1b8 0f00 	cmp.w	r8, #0
 800346c:	dde9      	ble.n	8003442 <__sflush_r+0xae>
 800346e:	6a21      	ldr	r1, [r4, #32]
 8003470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003472:	4643      	mov	r3, r8
 8003474:	463a      	mov	r2, r7
 8003476:	4628      	mov	r0, r5
 8003478:	47b0      	blx	r6
 800347a:	2800      	cmp	r0, #0
 800347c:	dc08      	bgt.n	8003490 <__sflush_r+0xfc>
 800347e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003490:	4407      	add	r7, r0
 8003492:	eba8 0800 	sub.w	r8, r8, r0
 8003496:	e7e7      	b.n	8003468 <__sflush_r+0xd4>
 8003498:	dfbffffe 	.word	0xdfbffffe

0800349c <_fflush_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	4605      	mov	r5, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	b913      	cbnz	r3, 80034ac <_fflush_r+0x10>
 80034a6:	2500      	movs	r5, #0
 80034a8:	4628      	mov	r0, r5
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	b118      	cbz	r0, 80034b6 <_fflush_r+0x1a>
 80034ae:	6a03      	ldr	r3, [r0, #32]
 80034b0:	b90b      	cbnz	r3, 80034b6 <_fflush_r+0x1a>
 80034b2:	f7ff f821 	bl	80024f8 <__sinit>
 80034b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f3      	beq.n	80034a6 <_fflush_r+0xa>
 80034be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80034c0:	07d0      	lsls	r0, r2, #31
 80034c2:	d404      	bmi.n	80034ce <_fflush_r+0x32>
 80034c4:	0599      	lsls	r1, r3, #22
 80034c6:	d402      	bmi.n	80034ce <_fflush_r+0x32>
 80034c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ca:	f7ff fa40 	bl	800294e <__retarget_lock_acquire_recursive>
 80034ce:	4628      	mov	r0, r5
 80034d0:	4621      	mov	r1, r4
 80034d2:	f7ff ff5f 	bl	8003394 <__sflush_r>
 80034d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034d8:	07da      	lsls	r2, r3, #31
 80034da:	4605      	mov	r5, r0
 80034dc:	d4e4      	bmi.n	80034a8 <_fflush_r+0xc>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	d4e1      	bmi.n	80034a8 <_fflush_r+0xc>
 80034e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034e6:	f7ff fa33 	bl	8002950 <__retarget_lock_release_recursive>
 80034ea:	e7dd      	b.n	80034a8 <_fflush_r+0xc>

080034ec <__swhatbuf_r>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	460c      	mov	r4, r1
 80034f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f4:	2900      	cmp	r1, #0
 80034f6:	b096      	sub	sp, #88	@ 0x58
 80034f8:	4615      	mov	r5, r2
 80034fa:	461e      	mov	r6, r3
 80034fc:	da0d      	bge.n	800351a <__swhatbuf_r+0x2e>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	bf14      	ite	ne
 800350a:	2340      	movne	r3, #64	@ 0x40
 800350c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003510:	2000      	movs	r0, #0
 8003512:	6031      	str	r1, [r6, #0]
 8003514:	602b      	str	r3, [r5, #0]
 8003516:	b016      	add	sp, #88	@ 0x58
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	466a      	mov	r2, sp
 800351c:	f000 f862 	bl	80035e4 <_fstat_r>
 8003520:	2800      	cmp	r0, #0
 8003522:	dbec      	blt.n	80034fe <__swhatbuf_r+0x12>
 8003524:	9901      	ldr	r1, [sp, #4]
 8003526:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800352a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800352e:	4259      	negs	r1, r3
 8003530:	4159      	adcs	r1, r3
 8003532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003536:	e7eb      	b.n	8003510 <__swhatbuf_r+0x24>

08003538 <__smakebuf_r>:
 8003538:	898b      	ldrh	r3, [r1, #12]
 800353a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800353c:	079d      	lsls	r5, r3, #30
 800353e:	4606      	mov	r6, r0
 8003540:	460c      	mov	r4, r1
 8003542:	d507      	bpl.n	8003554 <__smakebuf_r+0x1c>
 8003544:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	6123      	str	r3, [r4, #16]
 800354c:	2301      	movs	r3, #1
 800354e:	6163      	str	r3, [r4, #20]
 8003550:	b003      	add	sp, #12
 8003552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003554:	ab01      	add	r3, sp, #4
 8003556:	466a      	mov	r2, sp
 8003558:	f7ff ffc8 	bl	80034ec <__swhatbuf_r>
 800355c:	9f00      	ldr	r7, [sp, #0]
 800355e:	4605      	mov	r5, r0
 8003560:	4639      	mov	r1, r7
 8003562:	4630      	mov	r0, r6
 8003564:	f7ff fa62 	bl	8002a2c <_malloc_r>
 8003568:	b948      	cbnz	r0, 800357e <__smakebuf_r+0x46>
 800356a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800356e:	059a      	lsls	r2, r3, #22
 8003570:	d4ee      	bmi.n	8003550 <__smakebuf_r+0x18>
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	81a3      	strh	r3, [r4, #12]
 800357c:	e7e2      	b.n	8003544 <__smakebuf_r+0xc>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	6020      	str	r0, [r4, #0]
 8003582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800358e:	b15b      	cbz	r3, 80035a8 <__smakebuf_r+0x70>
 8003590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003594:	4630      	mov	r0, r6
 8003596:	f000 f837 	bl	8003608 <_isatty_r>
 800359a:	b128      	cbz	r0, 80035a8 <__smakebuf_r+0x70>
 800359c:	89a3      	ldrh	r3, [r4, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	431d      	orrs	r5, r3
 80035ac:	81a5      	strh	r5, [r4, #12]
 80035ae:	e7cf      	b.n	8003550 <__smakebuf_r+0x18>

080035b0 <memmove>:
 80035b0:	4288      	cmp	r0, r1
 80035b2:	b510      	push	{r4, lr}
 80035b4:	eb01 0402 	add.w	r4, r1, r2
 80035b8:	d902      	bls.n	80035c0 <memmove+0x10>
 80035ba:	4284      	cmp	r4, r0
 80035bc:	4623      	mov	r3, r4
 80035be:	d807      	bhi.n	80035d0 <memmove+0x20>
 80035c0:	1e43      	subs	r3, r0, #1
 80035c2:	42a1      	cmp	r1, r4
 80035c4:	d008      	beq.n	80035d8 <memmove+0x28>
 80035c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035ce:	e7f8      	b.n	80035c2 <memmove+0x12>
 80035d0:	4402      	add	r2, r0
 80035d2:	4601      	mov	r1, r0
 80035d4:	428a      	cmp	r2, r1
 80035d6:	d100      	bne.n	80035da <memmove+0x2a>
 80035d8:	bd10      	pop	{r4, pc}
 80035da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035e2:	e7f7      	b.n	80035d4 <memmove+0x24>

080035e4 <_fstat_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	4d07      	ldr	r5, [pc, #28]	@ (8003604 <_fstat_r+0x20>)
 80035e8:	2300      	movs	r3, #0
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	f7fd fa86 	bl	8000b02 <_fstat>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	d102      	bne.n	8003600 <_fstat_r+0x1c>
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	b103      	cbz	r3, 8003600 <_fstat_r+0x1c>
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	bf00      	nop
 8003604:	2000070c 	.word	0x2000070c

08003608 <_isatty_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4d06      	ldr	r5, [pc, #24]	@ (8003624 <_isatty_r+0x1c>)
 800360c:	2300      	movs	r3, #0
 800360e:	4604      	mov	r4, r0
 8003610:	4608      	mov	r0, r1
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	f7fd fa7a 	bl	8000b0c <_isatty>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_isatty_r+0x1a>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_isatty_r+0x1a>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	2000070c 	.word	0x2000070c

08003628 <_sbrk_r>:
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	4d06      	ldr	r5, [pc, #24]	@ (8003644 <_sbrk_r+0x1c>)
 800362c:	2300      	movs	r3, #0
 800362e:	4604      	mov	r4, r0
 8003630:	4608      	mov	r0, r1
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	f7fd fa6e 	bl	8000b14 <_sbrk>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_sbrk_r+0x1a>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_sbrk_r+0x1a>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	2000070c 	.word	0x2000070c

08003648 <memcpy>:
 8003648:	440a      	add	r2, r1
 800364a:	4291      	cmp	r1, r2
 800364c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003650:	d100      	bne.n	8003654 <memcpy+0xc>
 8003652:	4770      	bx	lr
 8003654:	b510      	push	{r4, lr}
 8003656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800365a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800365e:	4291      	cmp	r1, r2
 8003660:	d1f9      	bne.n	8003656 <memcpy+0xe>
 8003662:	bd10      	pop	{r4, pc}

08003664 <_realloc_r>:
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003668:	4680      	mov	r8, r0
 800366a:	4615      	mov	r5, r2
 800366c:	460c      	mov	r4, r1
 800366e:	b921      	cbnz	r1, 800367a <_realloc_r+0x16>
 8003670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	4611      	mov	r1, r2
 8003676:	f7ff b9d9 	b.w	8002a2c <_malloc_r>
 800367a:	b92a      	cbnz	r2, 8003688 <_realloc_r+0x24>
 800367c:	f7ff f96a 	bl	8002954 <_free_r>
 8003680:	2400      	movs	r4, #0
 8003682:	4620      	mov	r0, r4
 8003684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003688:	f000 f81a 	bl	80036c0 <_malloc_usable_size_r>
 800368c:	4285      	cmp	r5, r0
 800368e:	4606      	mov	r6, r0
 8003690:	d802      	bhi.n	8003698 <_realloc_r+0x34>
 8003692:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003696:	d8f4      	bhi.n	8003682 <_realloc_r+0x1e>
 8003698:	4629      	mov	r1, r5
 800369a:	4640      	mov	r0, r8
 800369c:	f7ff f9c6 	bl	8002a2c <_malloc_r>
 80036a0:	4607      	mov	r7, r0
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d0ec      	beq.n	8003680 <_realloc_r+0x1c>
 80036a6:	42b5      	cmp	r5, r6
 80036a8:	462a      	mov	r2, r5
 80036aa:	4621      	mov	r1, r4
 80036ac:	bf28      	it	cs
 80036ae:	4632      	movcs	r2, r6
 80036b0:	f7ff ffca 	bl	8003648 <memcpy>
 80036b4:	4621      	mov	r1, r4
 80036b6:	4640      	mov	r0, r8
 80036b8:	f7ff f94c 	bl	8002954 <_free_r>
 80036bc:	463c      	mov	r4, r7
 80036be:	e7e0      	b.n	8003682 <_realloc_r+0x1e>

080036c0 <_malloc_usable_size_r>:
 80036c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c4:	1f18      	subs	r0, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bfbc      	itt	lt
 80036ca:	580b      	ldrlt	r3, [r1, r0]
 80036cc:	18c0      	addlt	r0, r0, r3
 80036ce:	4770      	bx	lr

080036d0 <_init>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr

080036dc <_fini>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr
