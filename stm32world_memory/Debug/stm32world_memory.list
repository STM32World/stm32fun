
stm32world_memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001190  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042dc  080042dc  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042dc  080042dc  000052dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e4  080042e4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001068  20000000  080042ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000001b8  20001068  20001068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001220  20001220  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077b4  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001523  00000000  00000000  0000e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  0000fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000545  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f06c  00000000  00000000  000109ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007d28  00000000  00000000  0002fa19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b98a4  00000000  00000000  00037741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0fe5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000230c  00000000  00000000  000f1028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000f3334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001068 	.word	0x20001068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003134 	.word	0x08003134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000106c 	.word	0x2000106c
 80001cc:	08003134 	.word	0x08003134

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d002      	beq.n	80005c4 <_write+0x18>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d111      	bne.n	80005e8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <_write+0x48>)
 80005d0:	f001 fa68 	bl	8001aa4 <HAL_UART_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	75fb      	strb	r3, [r7, #23]
        HAL_MAX_DELAY);
        if (hstatus == HAL_OK)
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <_write+0x36>
            return len;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	e004      	b.n	80005ec <_write+0x40>
        else
            return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e6:	e001      	b.n	80005ec <_write+0x40>
    }
    return -1;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20001084 	.word	0x20001084

080005f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80005fc:	f000 fa78 	bl	8000af0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000600:	f000 f844 	bl	800068c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000604:	f000 f8d6 	bl	80007b4 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000608:	f000 f8aa 	bl	8000760 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */

    printf("Let's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\n");
 800060c:	4818      	ldr	r0, [pc, #96]	@ (8000670 <main+0x78>)
 800060e:	f001 ff2f 	bl	8002470 <puts>
    printf("Let's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\n");
 8000612:	4817      	ldr	r0, [pc, #92]	@ (8000670 <main+0x78>)
 8000614:	f001 ff2c 	bl	8002470 <puts>
    printf("Let's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\n");
 8000618:	4815      	ldr	r0, [pc, #84]	@ (8000670 <main+0x78>)
 800061a:	f001 ff29 	bl	8002470 <puts>
    printf("Let's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\n");
 800061e:	4814      	ldr	r0, [pc, #80]	@ (8000670 <main+0x78>)
 8000620:	f001 ff26 	bl	8002470 <puts>
    printf("Let's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\n");
 8000624:	4812      	ldr	r0, [pc, #72]	@ (8000670 <main+0x78>)
 8000626:	f001 ff23 	bl	8002470 <puts>
    printf("Let's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\nLet's try to print a rather long string - definitely long enough to show up in the build analyzer\n");
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <main+0x78>)
 800062c:	f001 ff20 	bl	8002470 <puts>


    printf("cstr = %s\n", cstr);
 8000630:	4910      	ldr	r1, [pc, #64]	@ (8000674 <main+0x7c>)
 8000632:	4811      	ldr	r0, [pc, #68]	@ (8000678 <main+0x80>)
 8000634:	f001 feb4 	bl	80023a0 <iprintf>
    printf("dstr = %s\n", dstr);
 8000638:	4910      	ldr	r1, [pc, #64]	@ (800067c <main+0x84>)
 800063a:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0x88>)
 800063c:	f001 feb0 	bl	80023a0 <iprintf>
    strcpy(dstr, cstr);
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <main+0x84>)
 8000642:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <main+0x8c>)
 8000644:	601a      	str	r2, [r3, #0]
    printf("dstr = %s\n", dstr);
 8000646:	490d      	ldr	r1, [pc, #52]	@ (800067c <main+0x84>)
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <main+0x88>)
 800064a:	f001 fea9 	bl	80023a0 <iprintf>
    strcat(dstr, "bar");
 800064e:	480b      	ldr	r0, [pc, #44]	@ (800067c <main+0x84>)
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <main+0x84>)
 800065a:	4413      	add	r3, r2
 800065c:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <main+0x90>)
 800065e:	6810      	ldr	r0, [r2, #0]
 8000660:	6018      	str	r0, [r3, #0]
    printf("dstr = %s\n", dstr);
 8000662:	4906      	ldr	r1, [pc, #24]	@ (800067c <main+0x84>)
 8000664:	4806      	ldr	r0, [pc, #24]	@ (8000680 <main+0x88>)
 8000666:	f001 fe9b 	bl	80023a0 <iprintf>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x72>
 800066e:	bf00      	nop
 8000670:	0800314c 	.word	0x0800314c
 8000674:	08003290 	.word	0x08003290
 8000678:	08003274 	.word	0x08003274
 800067c:	20000000 	.word	0x20000000
 8000680:	08003280 	.word	0x08003280
 8000684:	006f6f46 	.word	0x006f6f46
 8000688:	0800328c 	.word	0x0800328c

0800068c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 ffc8 	bl	8002630 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	@ 0xa8
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fce1 	bl	80010d8 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
            {
        Error_Handler();
 800071c:	f000 f880 	bl	8000820 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f000 ff42 	bl	80015c8 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
            {
        Error_Handler();
 800074a:	f000 f869 	bl	8000820 <Error_Handler>
    }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 8000766:	4a11      	ldr	r2, [pc, #68]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000768:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 2000000;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 800076c:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <MX_USART1_UART_Init+0x50>)
 800076e:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 8000784:	220c      	movs	r2, #12
 8000786:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_USART1_UART_Init+0x48>)
 8000796:	f001 f935 	bl	8001a04 <HAL_UART_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART1_UART_Init+0x44>
            {
        Error_Handler();
 80007a0:	f000 f83e 	bl	8000820 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20001084 	.word	0x20001084
 80007ac:	40011000 	.word	0x40011000
 80007b0:	001e8480 	.word	0x001e8480

080007b4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_GPIO_Init+0x68>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a16      	ldr	r2, [pc, #88]	@ (800081c <MX_GPIO_Init+0x68>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_GPIO_Init+0x68>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <MX_GPIO_Init+0x68>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MX_GPIO_Init+0x68>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_GPIO_Init+0x68>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <MX_GPIO_Init+0x68>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_GPIO_Init+0x68>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	@ (8000900 <HAL_UART_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <HAL_UART_MspInit+0x88>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <HAL_UART_MspInit+0x88>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_UART_MspInit+0x88>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <HAL_UART_MspInit+0x88>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <HAL_UART_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e8:	2307      	movs	r3, #7
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <HAL_UART_MspInit+0x8c>)
 80008f4:	f000 fa54 	bl	8000da0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40011000 	.word	0x40011000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <NMI_Handler+0x4>

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <UsageFault_Handler+0x4>

08000934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f917 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}

0800096a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	e00a      	b.n	8000992 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800097c:	f3af 8000 	nop.w
 8000980:	4601      	mov	r1, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	60ba      	str	r2, [r7, #8]
 8000988:	b2ca      	uxtb	r2, r1
 800098a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	dbf0      	blt.n	800097c <_read+0x12>
  }

  return len;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	605a      	str	r2, [r3, #4]
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_isatty>:

int _isatty(int file)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f001 fe46 	bl	80026cc <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20020000 	.word	0x20020000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	200010cc 	.word	0x200010cc
 8000a74:	20001220 	.word	0x20001220

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f001 fe05 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fd93 	bl	80005f8 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20001068 	.word	0x20001068
  ldr r2, =_sidata
 8000ae0:	080042ec 	.word	0x080042ec
  ldr r2, =_sbss
 8000ae4:	20001068 	.word	0x20001068
  ldr r4, =_ebss
 8000ae8:	20001220 	.word	0x20001220

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	@ (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f90d 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	200f      	movs	r0, #15
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fe82 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f917 	bl	8000d86 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b70:	f000 f8ed 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20001000 	.word	0x20001000
 8000b8c:	20001008 	.word	0x20001008
 8000b90:	20001004 	.word	0x20001004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20001008 	.word	0x20001008
 8000bb8:	200010d0 	.word	0x200010d0

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200010d0 	.word	0x200010d0

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	@ (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	@ 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff47 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff5c 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff8e 	bl	8000c8c <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffb0 	bl	8000cf4 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e16b      	b.n	8001094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 815a 	bne.w	800108e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80b4 	beq.w	800108e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b60      	ldr	r3, [pc, #384]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b5d      	ldr	r3, [pc, #372]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a5b      	ldr	r2, [pc, #364]	@ (80010b0 <HAL_GPIO_Init+0x310>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a52      	ldr	r2, [pc, #328]	@ (80010b4 <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d02b      	beq.n	8000fc6 <HAL_GPIO_Init+0x226>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a51      	ldr	r2, [pc, #324]	@ (80010b8 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d025      	beq.n	8000fc2 <HAL_GPIO_Init+0x222>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a50      	ldr	r2, [pc, #320]	@ (80010bc <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x21e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	@ (80010c0 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	@ (80010c8 <HAL_GPIO_Init+0x328>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	@ (80010cc <HAL_GPIO_Init+0x32c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80010d0 <HAL_GPIO_Init+0x330>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x20a>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00e      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000faa:	2308      	movs	r3, #8
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x310>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a32      	ldr	r2, [pc, #200]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a27      	ldr	r2, [pc, #156]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f ae90 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40021c00 	.word	0x40021c00
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e267      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d075      	beq.n	80011e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f6:	4b88      	ldr	r3, [pc, #544]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d00c      	beq.n	800111c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	4b85      	ldr	r3, [pc, #532]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110a:	2b08      	cmp	r3, #8
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	4b82      	ldr	r3, [pc, #520]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4b7e      	ldr	r3, [pc, #504]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d05b      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d157      	bne.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e242      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x74>
 800113e:	4b76      	ldr	r3, [pc, #472]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a75      	ldr	r2, [pc, #468]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b70      	ldr	r3, [pc, #448]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6f      	ldr	r2, [pc, #444]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b6d      	ldr	r3, [pc, #436]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6c      	ldr	r2, [pc, #432]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 8001170:	4b69      	ldr	r3, [pc, #420]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a68      	ldr	r2, [pc, #416]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b66      	ldr	r3, [pc, #408]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a65      	ldr	r2, [pc, #404]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fd14 	bl	8000bbc <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fd10 	bl	8000bbc <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e207      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0xc0>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fd00 	bl	8000bbc <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fcfc 	bl	8000bbc <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1f3      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001202:	2b08      	cmp	r3, #8
 8001204:	d11c      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e1c7      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4937      	ldr	r1, [pc, #220]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e03a      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b34      	ldr	r3, [pc, #208]	@ (800131c <HAL_RCC_OscConfig+0x244>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fcb5 	bl	8000bbc <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fcb1 	bl	8000bbc <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1a8      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4925      	ldr	r1, [pc, #148]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e015      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	4b24      	ldr	r3, [pc, #144]	@ (800131c <HAL_RCC_OscConfig+0x244>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc94 	bl	8000bbc <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff fc90 	bl	8000bbc <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e187      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d036      	beq.n	8001330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d016      	beq.n	80012f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_RCC_OscConfig+0x248>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fc74 	bl	8000bbc <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc70 	bl	8000bbc <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e167      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x200>
 80012f6:	e01b      	b.n	8001330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_RCC_OscConfig+0x248>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc5d 	bl	8000bbc <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	e00e      	b.n	8001324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fc59 	bl	8000bbc <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d907      	bls.n	8001324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e150      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
 8001318:	40023800 	.word	0x40023800
 800131c:	42470000 	.word	0x42470000
 8001320:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b88      	ldr	r3, [pc, #544]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ea      	bne.n	8001306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8097 	beq.w	800146c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b81      	ldr	r3, [pc, #516]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b7d      	ldr	r3, [pc, #500]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a7c      	ldr	r2, [pc, #496]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b7a      	ldr	r3, [pc, #488]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b77      	ldr	r3, [pc, #476]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b74      	ldr	r3, [pc, #464]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a73      	ldr	r2, [pc, #460]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fc19 	bl	8000bbc <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fc15 	bl	8000bbc <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e10c      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b6a      	ldr	r3, [pc, #424]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2ea>
 80013b4:	4b64      	ldr	r3, [pc, #400]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b8:	4a63      	ldr	r2, [pc, #396]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c0:	e01c      	b.n	80013fc <HAL_RCC_OscConfig+0x324>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x30c>
 80013ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013da:	4a5b      	ldr	r2, [pc, #364]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0x324>
 80013e4:	4b58      	ldr	r3, [pc, #352]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e8:	4a57      	ldr	r2, [pc, #348]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f0:	4b55      	ldr	r3, [pc, #340]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f4:	4a54      	ldr	r2, [pc, #336]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d015      	beq.n	8001430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fbda 	bl	8000bbc <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	e00a      	b.n	8001422 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fbd6 	bl	8000bbc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0cb      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	4b49      	ldr	r3, [pc, #292]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0ee      	beq.n	800140c <HAL_RCC_OscConfig+0x334>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fbc4 	bl	8000bbc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fbc0 	bl	8000bbc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0b5      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ee      	bne.n	8001438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001460:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a38      	ldr	r2, [pc, #224]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a1 	beq.w	80015b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b08      	cmp	r3, #8
 8001480:	d05c      	beq.n	800153c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d141      	bne.n	800150e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <HAL_RCC_OscConfig+0x478>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb94 	bl	8000bbc <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fb90 	bl	8000bbc <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e087      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	3b01      	subs	r3, #1
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	491b      	ldr	r1, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <HAL_RCC_OscConfig+0x478>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb69 	bl	8000bbc <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fb65 	bl	8000bbc <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e05c      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x416>
 800150c:	e054      	b.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_RCC_OscConfig+0x478>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb52 	bl	8000bbc <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fb4e 	bl	8000bbc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e045      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
 800153a:	e03d      	b.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e038      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000
 8001550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x4ec>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d028      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d121      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d11a      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001584:	4013      	ands	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800158a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	3b01      	subs	r3, #1
 800159e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fa80 	bl	8000bbc <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff fa7c 	bl	8000bbc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	@ (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f9e0 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	08004290 	.word	0x08004290
 800178c:	20001000 	.word	0x20001000
 8001790:	20001004 	.word	0x20001004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001798:	b094      	sub	sp, #80	@ 0x50
 800179a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ac:	4b79      	ldr	r3, [pc, #484]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d00d      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x40>
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	f200 80e1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x34>
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x3a>
 80017c6:	e0db      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b73      	ldr	r3, [pc, #460]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017cc:	e0db      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ce:	4b72      	ldr	r3, [pc, #456]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 80017d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017d2:	e0d8      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	2200      	movs	r2, #0
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
 8001802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001806:	4622      	mov	r2, r4
 8001808:	462b      	mov	r3, r5
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0159      	lsls	r1, r3, #5
 8001814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001818:	0150      	lsls	r0, r2, #5
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4621      	mov	r1, r4
 8001820:	1a51      	subs	r1, r2, r1
 8001822:	6139      	str	r1, [r7, #16]
 8001824:	4629      	mov	r1, r5
 8001826:	eb63 0301 	sbc.w	r3, r3, r1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001838:	4659      	mov	r1, fp
 800183a:	018b      	lsls	r3, r1, #6
 800183c:	4651      	mov	r1, sl
 800183e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001842:	4651      	mov	r1, sl
 8001844:	018a      	lsls	r2, r1, #6
 8001846:	4651      	mov	r1, sl
 8001848:	ebb2 0801 	subs.w	r8, r2, r1
 800184c:	4659      	mov	r1, fp
 800184e:	eb63 0901 	sbc.w	r9, r3, r1
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800185e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001866:	4690      	mov	r8, r2
 8001868:	4699      	mov	r9, r3
 800186a:	4623      	mov	r3, r4
 800186c:	eb18 0303 	adds.w	r3, r8, r3
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	462b      	mov	r3, r5
 8001874:	eb49 0303 	adc.w	r3, r9, r3
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001886:	4629      	mov	r1, r5
 8001888:	028b      	lsls	r3, r1, #10
 800188a:	4621      	mov	r1, r4
 800188c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001890:	4621      	mov	r1, r4
 8001892:	028a      	lsls	r2, r1, #10
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800189a:	2200      	movs	r2, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800189e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018a4:	f7fe fcec 	bl	8000280 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018b0:	e058      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b38      	ldr	r3, [pc, #224]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	4611      	mov	r1, r2
 80018be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018cc:	4642      	mov	r2, r8
 80018ce:	464b      	mov	r3, r9
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	0159      	lsls	r1, r3, #5
 80018da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018de:	0150      	lsls	r0, r2, #5
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4641      	mov	r1, r8
 80018e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ea:	4649      	mov	r1, r9
 80018ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001904:	ebb2 040a 	subs.w	r4, r2, sl
 8001908:	eb63 050b 	sbc.w	r5, r3, fp
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	00eb      	lsls	r3, r5, #3
 8001916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191a:	00e2      	lsls	r2, r4, #3
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	4643      	mov	r3, r8
 8001922:	18e3      	adds	r3, r4, r3
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	464b      	mov	r3, r9
 8001928:	eb45 0303 	adc.w	r3, r5, r3
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194e:	2200      	movs	r2, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	61fa      	str	r2, [r7, #28]
 8001954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001958:	f7fe fc92 	bl	8000280 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001988:	4618      	mov	r0, r3
 800198a:	3750      	adds	r7, #80	@ 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400

0800199c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20001000 	.word	0x20001000

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b8:	f7ff fff0 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0a9b      	lsrs	r3, r3, #10
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	@ (80019d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	080042a0 	.word	0x080042a0

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff ffdc 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0b5b      	lsrs	r3, r3, #13
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	@ (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	080042a0 	.word	0x080042a0

08001a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e042      	b.n	8001a9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ff26 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	@ 0x24
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f973 	bl	8001d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d175      	bne.n	8001bb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_UART_Transmit+0x2c>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e06e      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2221      	movs	r2, #33	@ 0x21
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ae2:	f7ff f86b 	bl	8000bbc <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001afc:	d108      	bne.n	8001b10 <HAL_UART_Transmit+0x6c>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e003      	b.n	8001b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b18:	e02e      	b.n	8001b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f848 	bl	8001bba <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e03a      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	3302      	adds	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e007      	b.n	8001b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1cb      	bne.n	8001b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	@ 0x40
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f814 	bl	8001bba <UART_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e006      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bca:	e03b      	b.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd2:	d037      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd4:	f7fe fff2 	bl	8000bbc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	6a3a      	ldr	r2, [r7, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <UART_WaitOnFlagUntilTimeout+0x30>
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e03a      	b.n	8001c64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b80      	cmp	r3, #128	@ 0x80
 8001c00:	d020      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b40      	cmp	r3, #64	@ 0x40
 8001c06:	d01d      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d116      	bne.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f81d 	bl	8001c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2208      	movs	r2, #8
 8001c36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e00f      	b.n	8001c64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d0b4      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b095      	sub	sp, #84	@ 0x54
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7e:	e853 3f00 	ldrex	r3, [r3]
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	330c      	adds	r3, #12
 8001c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c94:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c9c:	e841 2300 	strex	r3, r2, [r1]
 8001ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e5      	bne.n	8001c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3314      	adds	r3, #20
 8001cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	e853 3f00 	ldrex	r3, [r3]
 8001cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cd0:	e841 2300 	strex	r3, r2, [r1]
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e5      	bne.n	8001ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d119      	bne.n	8001d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	e853 3f00 	ldrex	r3, [r3]
 8001cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f023 0310 	bic.w	r3, r3, #16
 8001cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330c      	adds	r3, #12
 8001d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d04:	61ba      	str	r2, [r7, #24]
 8001d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d08:	6979      	ldr	r1, [r7, #20]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	e841 2300 	strex	r3, r2, [r1]
 8001d10:	613b      	str	r3, [r7, #16]
   return(result);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e5      	bne.n	8001ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d26:	bf00      	nop
 8001d28:	3754      	adds	r7, #84	@ 0x54
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d38:	b0c0      	sub	sp, #256	@ 0x100
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	ea40 0301 	orr.w	r3, r0, r1
 8001d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d8c:	f021 010c 	bic.w	r1, r1, #12
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dae:	6999      	ldr	r1, [r3, #24]
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	ea40 0301 	orr.w	r3, r0, r1
 8001dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8002000 <UART_SetConfig+0x2cc>)
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <UART_SetConfig+0xa0>
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b8d      	ldr	r3, [pc, #564]	@ (8002004 <UART_SetConfig+0x2d0>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dd4:	f7ff fe02 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8001dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ddc:	e003      	b.n	8001de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dde:	f7ff fde9 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8001de2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001df0:	f040 810c 	bne.w	800200c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e06:	4622      	mov	r2, r4
 8001e08:	462b      	mov	r3, r5
 8001e0a:	1891      	adds	r1, r2, r2
 8001e0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e0e:	415b      	adcs	r3, r3
 8001e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e16:	4621      	mov	r1, r4
 8001e18:	eb12 0801 	adds.w	r8, r2, r1
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	eb43 0901 	adc.w	r9, r3, r1
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	eb18 0303 	adds.w	r3, r8, r3
 8001e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e44:	462b      	mov	r3, r5
 8001e46:	eb49 0303 	adc.w	r3, r9, r3
 8001e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e62:	460b      	mov	r3, r1
 8001e64:	18db      	adds	r3, r3, r3
 8001e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e68:	4613      	mov	r3, r2
 8001e6a:	eb42 0303 	adc.w	r3, r2, r3
 8001e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e78:	f7fe fa02 	bl	8000280 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001e82:	fba3 2302 	umull	r2, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	011c      	lsls	r4, r3, #4
 8001e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	1891      	adds	r1, r2, r2
 8001ea2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ea4:	415b      	adcs	r3, r3
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001eac:	4641      	mov	r1, r8
 8001eae:	eb12 0a01 	adds.w	sl, r2, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ecc:	4692      	mov	sl, r2
 8001ece:	469b      	mov	fp, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001eda:	464b      	mov	r3, r9
 8001edc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	18db      	adds	r3, r3, r3
 8001efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001efe:	4613      	mov	r3, r2
 8001f00:	eb42 0303 	adc.w	r3, r2, r3
 8001f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f0e:	f7fe f9b7 	bl	8000280 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2264      	movs	r2, #100	@ 0x64
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f2e:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001f30:	fba3 2302 	umull	r2, r3, r3, r2
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f3c:	441c      	add	r4, r3
 8001f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	1891      	adds	r1, r2, r2
 8001f56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f58:	415b      	adcs	r3, r3
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f60:	4641      	mov	r1, r8
 8001f62:	1851      	adds	r1, r2, r1
 8001f64:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f66:	4649      	mov	r1, r9
 8001f68:	414b      	adcs	r3, r1
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f78:	4659      	mov	r1, fp
 8001f7a:	00cb      	lsls	r3, r1, #3
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f82:	4651      	mov	r1, sl
 8001f84:	00ca      	lsls	r2, r1, #3
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f94:	464b      	mov	r3, r9
 8001f96:	460a      	mov	r2, r1
 8001f98:	eb42 0303 	adc.w	r3, r2, r3
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	18db      	adds	r3, r3, r3
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fba:	4613      	mov	r3, r2
 8001fbc:	eb42 0303 	adc.w	r3, r2, r3
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fca:	f7fe f959 	bl	8000280 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	2164      	movs	r1, #100	@ 0x64
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	3332      	adds	r3, #50	@ 0x32
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4422      	add	r2, r4
 8001ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ffc:	e106      	b.n	800220c <UART_SetConfig+0x4d8>
 8001ffe:	bf00      	nop
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800200c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002010:	2200      	movs	r2, #0
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002016:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800201a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800201e:	4642      	mov	r2, r8
 8002020:	464b      	mov	r3, r9
 8002022:	1891      	adds	r1, r2, r2
 8002024:	6239      	str	r1, [r7, #32]
 8002026:	415b      	adcs	r3, r3
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
 800202a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800202e:	4641      	mov	r1, r8
 8002030:	1854      	adds	r4, r2, r1
 8002032:	4649      	mov	r1, r9
 8002034:	eb43 0501 	adc.w	r5, r3, r1
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	00eb      	lsls	r3, r5, #3
 8002042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002046:	00e2      	lsls	r2, r4, #3
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4643      	mov	r3, r8
 800204e:	18e3      	adds	r3, r4, r3
 8002050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002054:	464b      	mov	r3, r9
 8002056:	eb45 0303 	adc.w	r3, r5, r3
 800205a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800206a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800207a:	4629      	mov	r1, r5
 800207c:	008b      	lsls	r3, r1, #2
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002084:	4621      	mov	r1, r4
 8002086:	008a      	lsls	r2, r1, #2
 8002088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800208c:	f7fe f8f8 	bl	8000280 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4b60      	ldr	r3, [pc, #384]	@ (8002218 <UART_SetConfig+0x4e4>)
 8002096:	fba3 2302 	umull	r2, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	011c      	lsls	r4, r3, #4
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	1891      	adds	r1, r2, r2
 80020b6:	61b9      	str	r1, [r7, #24]
 80020b8:	415b      	adcs	r3, r3
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	4641      	mov	r1, r8
 80020c2:	1851      	adds	r1, r2, r1
 80020c4:	6139      	str	r1, [r7, #16]
 80020c6:	4649      	mov	r1, r9
 80020c8:	414b      	adcs	r3, r1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020d8:	4659      	mov	r1, fp
 80020da:	00cb      	lsls	r3, r1, #3
 80020dc:	4651      	mov	r1, sl
 80020de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020e2:	4651      	mov	r1, sl
 80020e4:	00ca      	lsls	r2, r1, #3
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	4642      	mov	r2, r8
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020f4:	464b      	mov	r3, r9
 80020f6:	460a      	mov	r2, r1
 80020f8:	eb42 0303 	adc.w	r3, r2, r3
 80020fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002118:	4649      	mov	r1, r9
 800211a:	008b      	lsls	r3, r1, #2
 800211c:	4641      	mov	r1, r8
 800211e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002122:	4641      	mov	r1, r8
 8002124:	008a      	lsls	r2, r1, #2
 8002126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800212a:	f7fe f8a9 	bl	8000280 <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4611      	mov	r1, r2
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <UART_SetConfig+0x4e4>)
 8002136:	fba3 2301 	umull	r2, r3, r3, r1
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	@ 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	3332      	adds	r3, #50	@ 0x32
 8002148:	4a33      	ldr	r2, [pc, #204]	@ (8002218 <UART_SetConfig+0x4e4>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002154:	441c      	add	r4, r3
 8002156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215a:	2200      	movs	r2, #0
 800215c:	673b      	str	r3, [r7, #112]	@ 0x70
 800215e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	415b      	adcs	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002174:	4641      	mov	r1, r8
 8002176:	1851      	adds	r1, r2, r1
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	4649      	mov	r1, r9
 800217c:	414b      	adcs	r3, r1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800218c:	4659      	mov	r1, fp
 800218e:	00cb      	lsls	r3, r1, #3
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002196:	4651      	mov	r1, sl
 8002198:	00ca      	lsls	r2, r1, #3
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	4642      	mov	r2, r8
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021a6:	464b      	mov	r3, r9
 80021a8:	460a      	mov	r2, r1
 80021aa:	eb42 0303 	adc.w	r3, r2, r3
 80021ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021c8:	4649      	mov	r1, r9
 80021ca:	008b      	lsls	r3, r1, #2
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d2:	4641      	mov	r1, r8
 80021d4:	008a      	lsls	r2, r1, #2
 80021d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021da:	f7fe f851 	bl	8000280 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <UART_SetConfig+0x4e4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	@ 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	@ 0x32
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <UART_SetConfig+0x4e4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4422      	add	r2, r4
 800220a:	609a      	str	r2, [r3, #8]
}
 800220c:	bf00      	nop
 800220e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002218:	51eb851f 	.word	0x51eb851f

0800221c <std>:
 800221c:	2300      	movs	r3, #0
 800221e:	b510      	push	{r4, lr}
 8002220:	4604      	mov	r4, r0
 8002222:	e9c0 3300 	strd	r3, r3, [r0]
 8002226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800222a:	6083      	str	r3, [r0, #8]
 800222c:	8181      	strh	r1, [r0, #12]
 800222e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002230:	81c2      	strh	r2, [r0, #14]
 8002232:	6183      	str	r3, [r0, #24]
 8002234:	4619      	mov	r1, r3
 8002236:	2208      	movs	r2, #8
 8002238:	305c      	adds	r0, #92	@ 0x5c
 800223a:	f000 f9f9 	bl	8002630 <memset>
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <std+0x58>)
 8002240:	6263      	str	r3, [r4, #36]	@ 0x24
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <std+0x5c>)
 8002244:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <std+0x60>)
 8002248:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <std+0x64>)
 800224c:	6323      	str	r3, [r4, #48]	@ 0x30
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <std+0x68>)
 8002250:	6224      	str	r4, [r4, #32]
 8002252:	429c      	cmp	r4, r3
 8002254:	d006      	beq.n	8002264 <std+0x48>
 8002256:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800225a:	4294      	cmp	r4, r2
 800225c:	d002      	beq.n	8002264 <std+0x48>
 800225e:	33d0      	adds	r3, #208	@ 0xd0
 8002260:	429c      	cmp	r4, r3
 8002262:	d105      	bne.n	8002270 <std+0x54>
 8002264:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800226c:	f000 ba58 	b.w	8002720 <__retarget_lock_init_recursive>
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop
 8002274:	08002481 	.word	0x08002481
 8002278:	080024a3 	.word	0x080024a3
 800227c:	080024db 	.word	0x080024db
 8002280:	080024ff 	.word	0x080024ff
 8002284:	200010d4 	.word	0x200010d4

08002288 <stdio_exit_handler>:
 8002288:	4a02      	ldr	r2, [pc, #8]	@ (8002294 <stdio_exit_handler+0xc>)
 800228a:	4903      	ldr	r1, [pc, #12]	@ (8002298 <stdio_exit_handler+0x10>)
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <stdio_exit_handler+0x14>)
 800228e:	f000 b869 	b.w	8002364 <_fwalk_sglue>
 8002292:	bf00      	nop
 8002294:	2000100c 	.word	0x2000100c
 8002298:	08002fbd 	.word	0x08002fbd
 800229c:	2000101c 	.word	0x2000101c

080022a0 <cleanup_stdio>:
 80022a0:	6841      	ldr	r1, [r0, #4]
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <cleanup_stdio+0x34>)
 80022a4:	4299      	cmp	r1, r3
 80022a6:	b510      	push	{r4, lr}
 80022a8:	4604      	mov	r4, r0
 80022aa:	d001      	beq.n	80022b0 <cleanup_stdio+0x10>
 80022ac:	f000 fe86 	bl	8002fbc <_fflush_r>
 80022b0:	68a1      	ldr	r1, [r4, #8]
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <cleanup_stdio+0x38>)
 80022b4:	4299      	cmp	r1, r3
 80022b6:	d002      	beq.n	80022be <cleanup_stdio+0x1e>
 80022b8:	4620      	mov	r0, r4
 80022ba:	f000 fe7f 	bl	8002fbc <_fflush_r>
 80022be:	68e1      	ldr	r1, [r4, #12]
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <cleanup_stdio+0x3c>)
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d004      	beq.n	80022d0 <cleanup_stdio+0x30>
 80022c6:	4620      	mov	r0, r4
 80022c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022cc:	f000 be76 	b.w	8002fbc <_fflush_r>
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	bf00      	nop
 80022d4:	200010d4 	.word	0x200010d4
 80022d8:	2000113c 	.word	0x2000113c
 80022dc:	200011a4 	.word	0x200011a4

080022e0 <global_stdio_init.part.0>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <global_stdio_init.part.0+0x30>)
 80022e4:	4c0b      	ldr	r4, [pc, #44]	@ (8002314 <global_stdio_init.part.0+0x34>)
 80022e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <global_stdio_init.part.0+0x38>)
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4620      	mov	r0, r4
 80022ec:	2200      	movs	r2, #0
 80022ee:	2104      	movs	r1, #4
 80022f0:	f7ff ff94 	bl	800221c <std>
 80022f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022f8:	2201      	movs	r2, #1
 80022fa:	2109      	movs	r1, #9
 80022fc:	f7ff ff8e 	bl	800221c <std>
 8002300:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002304:	2202      	movs	r2, #2
 8002306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800230a:	2112      	movs	r1, #18
 800230c:	f7ff bf86 	b.w	800221c <std>
 8002310:	2000120c 	.word	0x2000120c
 8002314:	200010d4 	.word	0x200010d4
 8002318:	08002289 	.word	0x08002289

0800231c <__sfp_lock_acquire>:
 800231c:	4801      	ldr	r0, [pc, #4]	@ (8002324 <__sfp_lock_acquire+0x8>)
 800231e:	f000 ba00 	b.w	8002722 <__retarget_lock_acquire_recursive>
 8002322:	bf00      	nop
 8002324:	20001215 	.word	0x20001215

08002328 <__sfp_lock_release>:
 8002328:	4801      	ldr	r0, [pc, #4]	@ (8002330 <__sfp_lock_release+0x8>)
 800232a:	f000 b9fb 	b.w	8002724 <__retarget_lock_release_recursive>
 800232e:	bf00      	nop
 8002330:	20001215 	.word	0x20001215

08002334 <__sinit>:
 8002334:	b510      	push	{r4, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	f7ff fff0 	bl	800231c <__sfp_lock_acquire>
 800233c:	6a23      	ldr	r3, [r4, #32]
 800233e:	b11b      	cbz	r3, 8002348 <__sinit+0x14>
 8002340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002344:	f7ff bff0 	b.w	8002328 <__sfp_lock_release>
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__sinit+0x28>)
 800234a:	6223      	str	r3, [r4, #32]
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <__sinit+0x2c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f5      	bne.n	8002340 <__sinit+0xc>
 8002354:	f7ff ffc4 	bl	80022e0 <global_stdio_init.part.0>
 8002358:	e7f2      	b.n	8002340 <__sinit+0xc>
 800235a:	bf00      	nop
 800235c:	080022a1 	.word	0x080022a1
 8002360:	2000120c 	.word	0x2000120c

08002364 <_fwalk_sglue>:
 8002364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002368:	4607      	mov	r7, r0
 800236a:	4688      	mov	r8, r1
 800236c:	4614      	mov	r4, r2
 800236e:	2600      	movs	r6, #0
 8002370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002374:	f1b9 0901 	subs.w	r9, r9, #1
 8002378:	d505      	bpl.n	8002386 <_fwalk_sglue+0x22>
 800237a:	6824      	ldr	r4, [r4, #0]
 800237c:	2c00      	cmp	r4, #0
 800237e:	d1f7      	bne.n	8002370 <_fwalk_sglue+0xc>
 8002380:	4630      	mov	r0, r6
 8002382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002386:	89ab      	ldrh	r3, [r5, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d907      	bls.n	800239c <_fwalk_sglue+0x38>
 800238c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002390:	3301      	adds	r3, #1
 8002392:	d003      	beq.n	800239c <_fwalk_sglue+0x38>
 8002394:	4629      	mov	r1, r5
 8002396:	4638      	mov	r0, r7
 8002398:	47c0      	blx	r8
 800239a:	4306      	orrs	r6, r0
 800239c:	3568      	adds	r5, #104	@ 0x68
 800239e:	e7e9      	b.n	8002374 <_fwalk_sglue+0x10>

080023a0 <iprintf>:
 80023a0:	b40f      	push	{r0, r1, r2, r3}
 80023a2:	b507      	push	{r0, r1, r2, lr}
 80023a4:	4906      	ldr	r1, [pc, #24]	@ (80023c0 <iprintf+0x20>)
 80023a6:	ab04      	add	r3, sp, #16
 80023a8:	6808      	ldr	r0, [r1, #0]
 80023aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80023ae:	6881      	ldr	r1, [r0, #8]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	f000 fadb 	bl	800296c <_vfiprintf_r>
 80023b6:	b003      	add	sp, #12
 80023b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80023bc:	b004      	add	sp, #16
 80023be:	4770      	bx	lr
 80023c0:	20001018 	.word	0x20001018

080023c4 <_puts_r>:
 80023c4:	6a03      	ldr	r3, [r0, #32]
 80023c6:	b570      	push	{r4, r5, r6, lr}
 80023c8:	6884      	ldr	r4, [r0, #8]
 80023ca:	4605      	mov	r5, r0
 80023cc:	460e      	mov	r6, r1
 80023ce:	b90b      	cbnz	r3, 80023d4 <_puts_r+0x10>
 80023d0:	f7ff ffb0 	bl	8002334 <__sinit>
 80023d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023d6:	07db      	lsls	r3, r3, #31
 80023d8:	d405      	bmi.n	80023e6 <_puts_r+0x22>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	0598      	lsls	r0, r3, #22
 80023de:	d402      	bmi.n	80023e6 <_puts_r+0x22>
 80023e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023e2:	f000 f99e 	bl	8002722 <__retarget_lock_acquire_recursive>
 80023e6:	89a3      	ldrh	r3, [r4, #12]
 80023e8:	0719      	lsls	r1, r3, #28
 80023ea:	d502      	bpl.n	80023f2 <_puts_r+0x2e>
 80023ec:	6923      	ldr	r3, [r4, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d135      	bne.n	800245e <_puts_r+0x9a>
 80023f2:	4621      	mov	r1, r4
 80023f4:	4628      	mov	r0, r5
 80023f6:	f000 f8c5 	bl	8002584 <__swsetup_r>
 80023fa:	b380      	cbz	r0, 800245e <_puts_r+0x9a>
 80023fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002402:	07da      	lsls	r2, r3, #31
 8002404:	d405      	bmi.n	8002412 <_puts_r+0x4e>
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	059b      	lsls	r3, r3, #22
 800240a:	d402      	bmi.n	8002412 <_puts_r+0x4e>
 800240c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800240e:	f000 f989 	bl	8002724 <__retarget_lock_release_recursive>
 8002412:	4628      	mov	r0, r5
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	2b00      	cmp	r3, #0
 8002418:	da04      	bge.n	8002424 <_puts_r+0x60>
 800241a:	69a2      	ldr	r2, [r4, #24]
 800241c:	429a      	cmp	r2, r3
 800241e:	dc17      	bgt.n	8002450 <_puts_r+0x8c>
 8002420:	290a      	cmp	r1, #10
 8002422:	d015      	beq.n	8002450 <_puts_r+0x8c>
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	6022      	str	r2, [r4, #0]
 800242a:	7019      	strb	r1, [r3, #0]
 800242c:	68a3      	ldr	r3, [r4, #8]
 800242e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002432:	3b01      	subs	r3, #1
 8002434:	60a3      	str	r3, [r4, #8]
 8002436:	2900      	cmp	r1, #0
 8002438:	d1ed      	bne.n	8002416 <_puts_r+0x52>
 800243a:	2b00      	cmp	r3, #0
 800243c:	da11      	bge.n	8002462 <_puts_r+0x9e>
 800243e:	4622      	mov	r2, r4
 8002440:	210a      	movs	r1, #10
 8002442:	4628      	mov	r0, r5
 8002444:	f000 f85f 	bl	8002506 <__swbuf_r>
 8002448:	3001      	adds	r0, #1
 800244a:	d0d7      	beq.n	80023fc <_puts_r+0x38>
 800244c:	250a      	movs	r5, #10
 800244e:	e7d7      	b.n	8002400 <_puts_r+0x3c>
 8002450:	4622      	mov	r2, r4
 8002452:	4628      	mov	r0, r5
 8002454:	f000 f857 	bl	8002506 <__swbuf_r>
 8002458:	3001      	adds	r0, #1
 800245a:	d1e7      	bne.n	800242c <_puts_r+0x68>
 800245c:	e7ce      	b.n	80023fc <_puts_r+0x38>
 800245e:	3e01      	subs	r6, #1
 8002460:	e7e4      	b.n	800242c <_puts_r+0x68>
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	6022      	str	r2, [r4, #0]
 8002468:	220a      	movs	r2, #10
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e7ee      	b.n	800244c <_puts_r+0x88>
	...

08002470 <puts>:
 8002470:	4b02      	ldr	r3, [pc, #8]	@ (800247c <puts+0xc>)
 8002472:	4601      	mov	r1, r0
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	f7ff bfa5 	b.w	80023c4 <_puts_r>
 800247a:	bf00      	nop
 800247c:	20001018 	.word	0x20001018

08002480 <__sread>:
 8002480:	b510      	push	{r4, lr}
 8002482:	460c      	mov	r4, r1
 8002484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002488:	f000 f8fc 	bl	8002684 <_read_r>
 800248c:	2800      	cmp	r0, #0
 800248e:	bfab      	itete	ge
 8002490:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002492:	89a3      	ldrhlt	r3, [r4, #12]
 8002494:	181b      	addge	r3, r3, r0
 8002496:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800249a:	bfac      	ite	ge
 800249c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800249e:	81a3      	strhlt	r3, [r4, #12]
 80024a0:	bd10      	pop	{r4, pc}

080024a2 <__swrite>:
 80024a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a6:	461f      	mov	r7, r3
 80024a8:	898b      	ldrh	r3, [r1, #12]
 80024aa:	05db      	lsls	r3, r3, #23
 80024ac:	4605      	mov	r5, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	4616      	mov	r6, r2
 80024b2:	d505      	bpl.n	80024c0 <__swrite+0x1e>
 80024b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b8:	2302      	movs	r3, #2
 80024ba:	2200      	movs	r2, #0
 80024bc:	f000 f8d0 	bl	8002660 <_lseek_r>
 80024c0:	89a3      	ldrh	r3, [r4, #12]
 80024c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024ca:	81a3      	strh	r3, [r4, #12]
 80024cc:	4632      	mov	r2, r6
 80024ce:	463b      	mov	r3, r7
 80024d0:	4628      	mov	r0, r5
 80024d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024d6:	f000 b8e7 	b.w	80026a8 <_write_r>

080024da <__sseek>:
 80024da:	b510      	push	{r4, lr}
 80024dc:	460c      	mov	r4, r1
 80024de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e2:	f000 f8bd 	bl	8002660 <_lseek_r>
 80024e6:	1c43      	adds	r3, r0, #1
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	bf15      	itete	ne
 80024ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024f6:	81a3      	strheq	r3, [r4, #12]
 80024f8:	bf18      	it	ne
 80024fa:	81a3      	strhne	r3, [r4, #12]
 80024fc:	bd10      	pop	{r4, pc}

080024fe <__sclose>:
 80024fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002502:	f000 b89d 	b.w	8002640 <_close_r>

08002506 <__swbuf_r>:
 8002506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002508:	460e      	mov	r6, r1
 800250a:	4614      	mov	r4, r2
 800250c:	4605      	mov	r5, r0
 800250e:	b118      	cbz	r0, 8002518 <__swbuf_r+0x12>
 8002510:	6a03      	ldr	r3, [r0, #32]
 8002512:	b90b      	cbnz	r3, 8002518 <__swbuf_r+0x12>
 8002514:	f7ff ff0e 	bl	8002334 <__sinit>
 8002518:	69a3      	ldr	r3, [r4, #24]
 800251a:	60a3      	str	r3, [r4, #8]
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	071a      	lsls	r2, r3, #28
 8002520:	d501      	bpl.n	8002526 <__swbuf_r+0x20>
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	b943      	cbnz	r3, 8002538 <__swbuf_r+0x32>
 8002526:	4621      	mov	r1, r4
 8002528:	4628      	mov	r0, r5
 800252a:	f000 f82b 	bl	8002584 <__swsetup_r>
 800252e:	b118      	cbz	r0, 8002538 <__swbuf_r+0x32>
 8002530:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002534:	4638      	mov	r0, r7
 8002536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	6922      	ldr	r2, [r4, #16]
 800253c:	1a98      	subs	r0, r3, r2
 800253e:	6963      	ldr	r3, [r4, #20]
 8002540:	b2f6      	uxtb	r6, r6
 8002542:	4283      	cmp	r3, r0
 8002544:	4637      	mov	r7, r6
 8002546:	dc05      	bgt.n	8002554 <__swbuf_r+0x4e>
 8002548:	4621      	mov	r1, r4
 800254a:	4628      	mov	r0, r5
 800254c:	f000 fd36 	bl	8002fbc <_fflush_r>
 8002550:	2800      	cmp	r0, #0
 8002552:	d1ed      	bne.n	8002530 <__swbuf_r+0x2a>
 8002554:	68a3      	ldr	r3, [r4, #8]
 8002556:	3b01      	subs	r3, #1
 8002558:	60a3      	str	r3, [r4, #8]
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	6022      	str	r2, [r4, #0]
 8002560:	701e      	strb	r6, [r3, #0]
 8002562:	6962      	ldr	r2, [r4, #20]
 8002564:	1c43      	adds	r3, r0, #1
 8002566:	429a      	cmp	r2, r3
 8002568:	d004      	beq.n	8002574 <__swbuf_r+0x6e>
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	07db      	lsls	r3, r3, #31
 800256e:	d5e1      	bpl.n	8002534 <__swbuf_r+0x2e>
 8002570:	2e0a      	cmp	r6, #10
 8002572:	d1df      	bne.n	8002534 <__swbuf_r+0x2e>
 8002574:	4621      	mov	r1, r4
 8002576:	4628      	mov	r0, r5
 8002578:	f000 fd20 	bl	8002fbc <_fflush_r>
 800257c:	2800      	cmp	r0, #0
 800257e:	d0d9      	beq.n	8002534 <__swbuf_r+0x2e>
 8002580:	e7d6      	b.n	8002530 <__swbuf_r+0x2a>
	...

08002584 <__swsetup_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4b29      	ldr	r3, [pc, #164]	@ (800262c <__swsetup_r+0xa8>)
 8002588:	4605      	mov	r5, r0
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	460c      	mov	r4, r1
 800258e:	b118      	cbz	r0, 8002598 <__swsetup_r+0x14>
 8002590:	6a03      	ldr	r3, [r0, #32]
 8002592:	b90b      	cbnz	r3, 8002598 <__swsetup_r+0x14>
 8002594:	f7ff fece 	bl	8002334 <__sinit>
 8002598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259c:	0719      	lsls	r1, r3, #28
 800259e:	d422      	bmi.n	80025e6 <__swsetup_r+0x62>
 80025a0:	06da      	lsls	r2, r3, #27
 80025a2:	d407      	bmi.n	80025b4 <__swsetup_r+0x30>
 80025a4:	2209      	movs	r2, #9
 80025a6:	602a      	str	r2, [r5, #0]
 80025a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025b2:	e033      	b.n	800261c <__swsetup_r+0x98>
 80025b4:	0758      	lsls	r0, r3, #29
 80025b6:	d512      	bpl.n	80025de <__swsetup_r+0x5a>
 80025b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025ba:	b141      	cbz	r1, 80025ce <__swsetup_r+0x4a>
 80025bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80025c0:	4299      	cmp	r1, r3
 80025c2:	d002      	beq.n	80025ca <__swsetup_r+0x46>
 80025c4:	4628      	mov	r0, r5
 80025c6:	f000 f8af 	bl	8002728 <_free_r>
 80025ca:	2300      	movs	r3, #0
 80025cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80025d4:	81a3      	strh	r3, [r4, #12]
 80025d6:	2300      	movs	r3, #0
 80025d8:	6063      	str	r3, [r4, #4]
 80025da:	6923      	ldr	r3, [r4, #16]
 80025dc:	6023      	str	r3, [r4, #0]
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	81a3      	strh	r3, [r4, #12]
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	b94b      	cbnz	r3, 80025fe <__swsetup_r+0x7a>
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f4:	d003      	beq.n	80025fe <__swsetup_r+0x7a>
 80025f6:	4621      	mov	r1, r4
 80025f8:	4628      	mov	r0, r5
 80025fa:	f000 fd2d 	bl	8003058 <__smakebuf_r>
 80025fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002602:	f013 0201 	ands.w	r2, r3, #1
 8002606:	d00a      	beq.n	800261e <__swsetup_r+0x9a>
 8002608:	2200      	movs	r2, #0
 800260a:	60a2      	str	r2, [r4, #8]
 800260c:	6962      	ldr	r2, [r4, #20]
 800260e:	4252      	negs	r2, r2
 8002610:	61a2      	str	r2, [r4, #24]
 8002612:	6922      	ldr	r2, [r4, #16]
 8002614:	b942      	cbnz	r2, 8002628 <__swsetup_r+0xa4>
 8002616:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800261a:	d1c5      	bne.n	80025a8 <__swsetup_r+0x24>
 800261c:	bd38      	pop	{r3, r4, r5, pc}
 800261e:	0799      	lsls	r1, r3, #30
 8002620:	bf58      	it	pl
 8002622:	6962      	ldrpl	r2, [r4, #20]
 8002624:	60a2      	str	r2, [r4, #8]
 8002626:	e7f4      	b.n	8002612 <__swsetup_r+0x8e>
 8002628:	2000      	movs	r0, #0
 800262a:	e7f7      	b.n	800261c <__swsetup_r+0x98>
 800262c:	20001018 	.word	0x20001018

08002630 <memset>:
 8002630:	4402      	add	r2, r0
 8002632:	4603      	mov	r3, r0
 8002634:	4293      	cmp	r3, r2
 8002636:	d100      	bne.n	800263a <memset+0xa>
 8002638:	4770      	bx	lr
 800263a:	f803 1b01 	strb.w	r1, [r3], #1
 800263e:	e7f9      	b.n	8002634 <memset+0x4>

08002640 <_close_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	4d06      	ldr	r5, [pc, #24]	@ (800265c <_close_r+0x1c>)
 8002644:	2300      	movs	r3, #0
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	f7fe f9aa 	bl	80009a4 <_close>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	d102      	bne.n	800265a <_close_r+0x1a>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	b103      	cbz	r3, 800265a <_close_r+0x1a>
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	20001210 	.word	0x20001210

08002660 <_lseek_r>:
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	4d07      	ldr	r5, [pc, #28]	@ (8002680 <_lseek_r+0x20>)
 8002664:	4604      	mov	r4, r0
 8002666:	4608      	mov	r0, r1
 8002668:	4611      	mov	r1, r2
 800266a:	2200      	movs	r2, #0
 800266c:	602a      	str	r2, [r5, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	f7fe f9bf 	bl	80009f2 <_lseek>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_lseek_r+0x1e>
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	b103      	cbz	r3, 800267e <_lseek_r+0x1e>
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	20001210 	.word	0x20001210

08002684 <_read_r>:
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	4d07      	ldr	r5, [pc, #28]	@ (80026a4 <_read_r+0x20>)
 8002688:	4604      	mov	r4, r0
 800268a:	4608      	mov	r0, r1
 800268c:	4611      	mov	r1, r2
 800268e:	2200      	movs	r2, #0
 8002690:	602a      	str	r2, [r5, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f7fe f969 	bl	800096a <_read>
 8002698:	1c43      	adds	r3, r0, #1
 800269a:	d102      	bne.n	80026a2 <_read_r+0x1e>
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	b103      	cbz	r3, 80026a2 <_read_r+0x1e>
 80026a0:	6023      	str	r3, [r4, #0]
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	20001210 	.word	0x20001210

080026a8 <_write_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d07      	ldr	r5, [pc, #28]	@ (80026c8 <_write_r+0x20>)
 80026ac:	4604      	mov	r4, r0
 80026ae:	4608      	mov	r0, r1
 80026b0:	4611      	mov	r1, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	602a      	str	r2, [r5, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7fd ff78 	bl	80005ac <_write>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d102      	bne.n	80026c6 <_write_r+0x1e>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <_write_r+0x1e>
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	20001210 	.word	0x20001210

080026cc <__errno>:
 80026cc:	4b01      	ldr	r3, [pc, #4]	@ (80026d4 <__errno+0x8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20001018 	.word	0x20001018

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4d0d      	ldr	r5, [pc, #52]	@ (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	@ (8002714 <__libc_init_array+0x3c>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2600      	movs	r6, #0
 80026e4:	42a6      	cmp	r6, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4d0b      	ldr	r5, [pc, #44]	@ (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	@ (800271c <__libc_init_array+0x44>)
 80026ec:	f000 fd22 	bl	8003134 <_init>
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2600      	movs	r6, #0
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002700:	4798      	blx	r3
 8002702:	3601      	adds	r6, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f855 3b04 	ldr.w	r3, [r5], #4
 800270a:	4798      	blx	r3
 800270c:	3601      	adds	r6, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	080042e4 	.word	0x080042e4
 8002714:	080042e4 	.word	0x080042e4
 8002718:	080042e4 	.word	0x080042e4
 800271c:	080042e8 	.word	0x080042e8

08002720 <__retarget_lock_init_recursive>:
 8002720:	4770      	bx	lr

08002722 <__retarget_lock_acquire_recursive>:
 8002722:	4770      	bx	lr

08002724 <__retarget_lock_release_recursive>:
 8002724:	4770      	bx	lr
	...

08002728 <_free_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4605      	mov	r5, r0
 800272c:	2900      	cmp	r1, #0
 800272e:	d041      	beq.n	80027b4 <_free_r+0x8c>
 8002730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002734:	1f0c      	subs	r4, r1, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	bfb8      	it	lt
 800273a:	18e4      	addlt	r4, r4, r3
 800273c:	f000 f8e0 	bl	8002900 <__malloc_lock>
 8002740:	4a1d      	ldr	r2, [pc, #116]	@ (80027b8 <_free_r+0x90>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	b933      	cbnz	r3, 8002754 <_free_r+0x2c>
 8002746:	6063      	str	r3, [r4, #4]
 8002748:	6014      	str	r4, [r2, #0]
 800274a:	4628      	mov	r0, r5
 800274c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002750:	f000 b8dc 	b.w	800290c <__malloc_unlock>
 8002754:	42a3      	cmp	r3, r4
 8002756:	d908      	bls.n	800276a <_free_r+0x42>
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	1821      	adds	r1, r4, r0
 800275c:	428b      	cmp	r3, r1
 800275e:	bf01      	itttt	eq
 8002760:	6819      	ldreq	r1, [r3, #0]
 8002762:	685b      	ldreq	r3, [r3, #4]
 8002764:	1809      	addeq	r1, r1, r0
 8002766:	6021      	streq	r1, [r4, #0]
 8002768:	e7ed      	b.n	8002746 <_free_r+0x1e>
 800276a:	461a      	mov	r2, r3
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b10b      	cbz	r3, 8002774 <_free_r+0x4c>
 8002770:	42a3      	cmp	r3, r4
 8002772:	d9fa      	bls.n	800276a <_free_r+0x42>
 8002774:	6811      	ldr	r1, [r2, #0]
 8002776:	1850      	adds	r0, r2, r1
 8002778:	42a0      	cmp	r0, r4
 800277a:	d10b      	bne.n	8002794 <_free_r+0x6c>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	4401      	add	r1, r0
 8002780:	1850      	adds	r0, r2, r1
 8002782:	4283      	cmp	r3, r0
 8002784:	6011      	str	r1, [r2, #0]
 8002786:	d1e0      	bne.n	800274a <_free_r+0x22>
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	6053      	str	r3, [r2, #4]
 800278e:	4408      	add	r0, r1
 8002790:	6010      	str	r0, [r2, #0]
 8002792:	e7da      	b.n	800274a <_free_r+0x22>
 8002794:	d902      	bls.n	800279c <_free_r+0x74>
 8002796:	230c      	movs	r3, #12
 8002798:	602b      	str	r3, [r5, #0]
 800279a:	e7d6      	b.n	800274a <_free_r+0x22>
 800279c:	6820      	ldr	r0, [r4, #0]
 800279e:	1821      	adds	r1, r4, r0
 80027a0:	428b      	cmp	r3, r1
 80027a2:	bf04      	itt	eq
 80027a4:	6819      	ldreq	r1, [r3, #0]
 80027a6:	685b      	ldreq	r3, [r3, #4]
 80027a8:	6063      	str	r3, [r4, #4]
 80027aa:	bf04      	itt	eq
 80027ac:	1809      	addeq	r1, r1, r0
 80027ae:	6021      	streq	r1, [r4, #0]
 80027b0:	6054      	str	r4, [r2, #4]
 80027b2:	e7ca      	b.n	800274a <_free_r+0x22>
 80027b4:	bd38      	pop	{r3, r4, r5, pc}
 80027b6:	bf00      	nop
 80027b8:	2000121c 	.word	0x2000121c

080027bc <sbrk_aligned>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4e0f      	ldr	r6, [pc, #60]	@ (80027fc <sbrk_aligned+0x40>)
 80027c0:	460c      	mov	r4, r1
 80027c2:	6831      	ldr	r1, [r6, #0]
 80027c4:	4605      	mov	r5, r0
 80027c6:	b911      	cbnz	r1, 80027ce <sbrk_aligned+0x12>
 80027c8:	f000 fca4 	bl	8003114 <_sbrk_r>
 80027cc:	6030      	str	r0, [r6, #0]
 80027ce:	4621      	mov	r1, r4
 80027d0:	4628      	mov	r0, r5
 80027d2:	f000 fc9f 	bl	8003114 <_sbrk_r>
 80027d6:	1c43      	adds	r3, r0, #1
 80027d8:	d103      	bne.n	80027e2 <sbrk_aligned+0x26>
 80027da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80027de:	4620      	mov	r0, r4
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	1cc4      	adds	r4, r0, #3
 80027e4:	f024 0403 	bic.w	r4, r4, #3
 80027e8:	42a0      	cmp	r0, r4
 80027ea:	d0f8      	beq.n	80027de <sbrk_aligned+0x22>
 80027ec:	1a21      	subs	r1, r4, r0
 80027ee:	4628      	mov	r0, r5
 80027f0:	f000 fc90 	bl	8003114 <_sbrk_r>
 80027f4:	3001      	adds	r0, #1
 80027f6:	d1f2      	bne.n	80027de <sbrk_aligned+0x22>
 80027f8:	e7ef      	b.n	80027da <sbrk_aligned+0x1e>
 80027fa:	bf00      	nop
 80027fc:	20001218 	.word	0x20001218

08002800 <_malloc_r>:
 8002800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002804:	1ccd      	adds	r5, r1, #3
 8002806:	f025 0503 	bic.w	r5, r5, #3
 800280a:	3508      	adds	r5, #8
 800280c:	2d0c      	cmp	r5, #12
 800280e:	bf38      	it	cc
 8002810:	250c      	movcc	r5, #12
 8002812:	2d00      	cmp	r5, #0
 8002814:	4606      	mov	r6, r0
 8002816:	db01      	blt.n	800281c <_malloc_r+0x1c>
 8002818:	42a9      	cmp	r1, r5
 800281a:	d904      	bls.n	8002826 <_malloc_r+0x26>
 800281c:	230c      	movs	r3, #12
 800281e:	6033      	str	r3, [r6, #0]
 8002820:	2000      	movs	r0, #0
 8002822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028fc <_malloc_r+0xfc>
 800282a:	f000 f869 	bl	8002900 <__malloc_lock>
 800282e:	f8d8 3000 	ldr.w	r3, [r8]
 8002832:	461c      	mov	r4, r3
 8002834:	bb44      	cbnz	r4, 8002888 <_malloc_r+0x88>
 8002836:	4629      	mov	r1, r5
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff ffbf 	bl	80027bc <sbrk_aligned>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	4604      	mov	r4, r0
 8002842:	d158      	bne.n	80028f6 <_malloc_r+0xf6>
 8002844:	f8d8 4000 	ldr.w	r4, [r8]
 8002848:	4627      	mov	r7, r4
 800284a:	2f00      	cmp	r7, #0
 800284c:	d143      	bne.n	80028d6 <_malloc_r+0xd6>
 800284e:	2c00      	cmp	r4, #0
 8002850:	d04b      	beq.n	80028ea <_malloc_r+0xea>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	4639      	mov	r1, r7
 8002856:	4630      	mov	r0, r6
 8002858:	eb04 0903 	add.w	r9, r4, r3
 800285c:	f000 fc5a 	bl	8003114 <_sbrk_r>
 8002860:	4581      	cmp	r9, r0
 8002862:	d142      	bne.n	80028ea <_malloc_r+0xea>
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	1a6d      	subs	r5, r5, r1
 8002868:	4629      	mov	r1, r5
 800286a:	4630      	mov	r0, r6
 800286c:	f7ff ffa6 	bl	80027bc <sbrk_aligned>
 8002870:	3001      	adds	r0, #1
 8002872:	d03a      	beq.n	80028ea <_malloc_r+0xea>
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	442b      	add	r3, r5
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	f8d8 3000 	ldr.w	r3, [r8]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	bb62      	cbnz	r2, 80028dc <_malloc_r+0xdc>
 8002882:	f8c8 7000 	str.w	r7, [r8]
 8002886:	e00f      	b.n	80028a8 <_malloc_r+0xa8>
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	1b52      	subs	r2, r2, r5
 800288c:	d420      	bmi.n	80028d0 <_malloc_r+0xd0>
 800288e:	2a0b      	cmp	r2, #11
 8002890:	d917      	bls.n	80028c2 <_malloc_r+0xc2>
 8002892:	1961      	adds	r1, r4, r5
 8002894:	42a3      	cmp	r3, r4
 8002896:	6025      	str	r5, [r4, #0]
 8002898:	bf18      	it	ne
 800289a:	6059      	strne	r1, [r3, #4]
 800289c:	6863      	ldr	r3, [r4, #4]
 800289e:	bf08      	it	eq
 80028a0:	f8c8 1000 	streq.w	r1, [r8]
 80028a4:	5162      	str	r2, [r4, r5]
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	4630      	mov	r0, r6
 80028aa:	f000 f82f 	bl	800290c <__malloc_unlock>
 80028ae:	f104 000b 	add.w	r0, r4, #11
 80028b2:	1d23      	adds	r3, r4, #4
 80028b4:	f020 0007 	bic.w	r0, r0, #7
 80028b8:	1ac2      	subs	r2, r0, r3
 80028ba:	bf1c      	itt	ne
 80028bc:	1a1b      	subne	r3, r3, r0
 80028be:	50a3      	strne	r3, [r4, r2]
 80028c0:	e7af      	b.n	8002822 <_malloc_r+0x22>
 80028c2:	6862      	ldr	r2, [r4, #4]
 80028c4:	42a3      	cmp	r3, r4
 80028c6:	bf0c      	ite	eq
 80028c8:	f8c8 2000 	streq.w	r2, [r8]
 80028cc:	605a      	strne	r2, [r3, #4]
 80028ce:	e7eb      	b.n	80028a8 <_malloc_r+0xa8>
 80028d0:	4623      	mov	r3, r4
 80028d2:	6864      	ldr	r4, [r4, #4]
 80028d4:	e7ae      	b.n	8002834 <_malloc_r+0x34>
 80028d6:	463c      	mov	r4, r7
 80028d8:	687f      	ldr	r7, [r7, #4]
 80028da:	e7b6      	b.n	800284a <_malloc_r+0x4a>
 80028dc:	461a      	mov	r2, r3
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	d1fb      	bne.n	80028dc <_malloc_r+0xdc>
 80028e4:	2300      	movs	r3, #0
 80028e6:	6053      	str	r3, [r2, #4]
 80028e8:	e7de      	b.n	80028a8 <_malloc_r+0xa8>
 80028ea:	230c      	movs	r3, #12
 80028ec:	6033      	str	r3, [r6, #0]
 80028ee:	4630      	mov	r0, r6
 80028f0:	f000 f80c 	bl	800290c <__malloc_unlock>
 80028f4:	e794      	b.n	8002820 <_malloc_r+0x20>
 80028f6:	6005      	str	r5, [r0, #0]
 80028f8:	e7d6      	b.n	80028a8 <_malloc_r+0xa8>
 80028fa:	bf00      	nop
 80028fc:	2000121c 	.word	0x2000121c

08002900 <__malloc_lock>:
 8002900:	4801      	ldr	r0, [pc, #4]	@ (8002908 <__malloc_lock+0x8>)
 8002902:	f7ff bf0e 	b.w	8002722 <__retarget_lock_acquire_recursive>
 8002906:	bf00      	nop
 8002908:	20001214 	.word	0x20001214

0800290c <__malloc_unlock>:
 800290c:	4801      	ldr	r0, [pc, #4]	@ (8002914 <__malloc_unlock+0x8>)
 800290e:	f7ff bf09 	b.w	8002724 <__retarget_lock_release_recursive>
 8002912:	bf00      	nop
 8002914:	20001214 	.word	0x20001214

08002918 <__sfputc_r>:
 8002918:	6893      	ldr	r3, [r2, #8]
 800291a:	3b01      	subs	r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	b410      	push	{r4}
 8002920:	6093      	str	r3, [r2, #8]
 8002922:	da08      	bge.n	8002936 <__sfputc_r+0x1e>
 8002924:	6994      	ldr	r4, [r2, #24]
 8002926:	42a3      	cmp	r3, r4
 8002928:	db01      	blt.n	800292e <__sfputc_r+0x16>
 800292a:	290a      	cmp	r1, #10
 800292c:	d103      	bne.n	8002936 <__sfputc_r+0x1e>
 800292e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002932:	f7ff bde8 	b.w	8002506 <__swbuf_r>
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	1c58      	adds	r0, r3, #1
 800293a:	6010      	str	r0, [r2, #0]
 800293c:	7019      	strb	r1, [r3, #0]
 800293e:	4608      	mov	r0, r1
 8002940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002944:	4770      	bx	lr

08002946 <__sfputs_r>:
 8002946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002948:	4606      	mov	r6, r0
 800294a:	460f      	mov	r7, r1
 800294c:	4614      	mov	r4, r2
 800294e:	18d5      	adds	r5, r2, r3
 8002950:	42ac      	cmp	r4, r5
 8002952:	d101      	bne.n	8002958 <__sfputs_r+0x12>
 8002954:	2000      	movs	r0, #0
 8002956:	e007      	b.n	8002968 <__sfputs_r+0x22>
 8002958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295c:	463a      	mov	r2, r7
 800295e:	4630      	mov	r0, r6
 8002960:	f7ff ffda 	bl	8002918 <__sfputc_r>
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	d1f3      	bne.n	8002950 <__sfputs_r+0xa>
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800296c <_vfiprintf_r>:
 800296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	460d      	mov	r5, r1
 8002972:	b09d      	sub	sp, #116	@ 0x74
 8002974:	4614      	mov	r4, r2
 8002976:	4698      	mov	r8, r3
 8002978:	4606      	mov	r6, r0
 800297a:	b118      	cbz	r0, 8002984 <_vfiprintf_r+0x18>
 800297c:	6a03      	ldr	r3, [r0, #32]
 800297e:	b90b      	cbnz	r3, 8002984 <_vfiprintf_r+0x18>
 8002980:	f7ff fcd8 	bl	8002334 <__sinit>
 8002984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002986:	07d9      	lsls	r1, r3, #31
 8002988:	d405      	bmi.n	8002996 <_vfiprintf_r+0x2a>
 800298a:	89ab      	ldrh	r3, [r5, #12]
 800298c:	059a      	lsls	r2, r3, #22
 800298e:	d402      	bmi.n	8002996 <_vfiprintf_r+0x2a>
 8002990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002992:	f7ff fec6 	bl	8002722 <__retarget_lock_acquire_recursive>
 8002996:	89ab      	ldrh	r3, [r5, #12]
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	d501      	bpl.n	80029a0 <_vfiprintf_r+0x34>
 800299c:	692b      	ldr	r3, [r5, #16]
 800299e:	b99b      	cbnz	r3, 80029c8 <_vfiprintf_r+0x5c>
 80029a0:	4629      	mov	r1, r5
 80029a2:	4630      	mov	r0, r6
 80029a4:	f7ff fdee 	bl	8002584 <__swsetup_r>
 80029a8:	b170      	cbz	r0, 80029c8 <_vfiprintf_r+0x5c>
 80029aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029ac:	07dc      	lsls	r4, r3, #31
 80029ae:	d504      	bpl.n	80029ba <_vfiprintf_r+0x4e>
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029b4:	b01d      	add	sp, #116	@ 0x74
 80029b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ba:	89ab      	ldrh	r3, [r5, #12]
 80029bc:	0598      	lsls	r0, r3, #22
 80029be:	d4f7      	bmi.n	80029b0 <_vfiprintf_r+0x44>
 80029c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80029c2:	f7ff feaf 	bl	8002724 <__retarget_lock_release_recursive>
 80029c6:	e7f3      	b.n	80029b0 <_vfiprintf_r+0x44>
 80029c8:	2300      	movs	r3, #0
 80029ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80029cc:	2320      	movs	r3, #32
 80029ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80029d6:	2330      	movs	r3, #48	@ 0x30
 80029d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002b88 <_vfiprintf_r+0x21c>
 80029dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029e0:	f04f 0901 	mov.w	r9, #1
 80029e4:	4623      	mov	r3, r4
 80029e6:	469a      	mov	sl, r3
 80029e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ec:	b10a      	cbz	r2, 80029f2 <_vfiprintf_r+0x86>
 80029ee:	2a25      	cmp	r2, #37	@ 0x25
 80029f0:	d1f9      	bne.n	80029e6 <_vfiprintf_r+0x7a>
 80029f2:	ebba 0b04 	subs.w	fp, sl, r4
 80029f6:	d00b      	beq.n	8002a10 <_vfiprintf_r+0xa4>
 80029f8:	465b      	mov	r3, fp
 80029fa:	4622      	mov	r2, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	4630      	mov	r0, r6
 8002a00:	f7ff ffa1 	bl	8002946 <__sfputs_r>
 8002a04:	3001      	adds	r0, #1
 8002a06:	f000 80a7 	beq.w	8002b58 <_vfiprintf_r+0x1ec>
 8002a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a0c:	445a      	add	r2, fp
 8002a0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a10:	f89a 3000 	ldrb.w	r3, [sl]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 809f 	beq.w	8002b58 <_vfiprintf_r+0x1ec>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a24:	f10a 0a01 	add.w	sl, sl, #1
 8002a28:	9304      	str	r3, [sp, #16]
 8002a2a:	9307      	str	r3, [sp, #28]
 8002a2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a30:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a32:	4654      	mov	r4, sl
 8002a34:	2205      	movs	r2, #5
 8002a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a3a:	4853      	ldr	r0, [pc, #332]	@ (8002b88 <_vfiprintf_r+0x21c>)
 8002a3c:	f7fd fbd0 	bl	80001e0 <memchr>
 8002a40:	9a04      	ldr	r2, [sp, #16]
 8002a42:	b9d8      	cbnz	r0, 8002a7c <_vfiprintf_r+0x110>
 8002a44:	06d1      	lsls	r1, r2, #27
 8002a46:	bf44      	itt	mi
 8002a48:	2320      	movmi	r3, #32
 8002a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a4e:	0713      	lsls	r3, r2, #28
 8002a50:	bf44      	itt	mi
 8002a52:	232b      	movmi	r3, #43	@ 0x2b
 8002a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a58:	f89a 3000 	ldrb.w	r3, [sl]
 8002a5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a5e:	d015      	beq.n	8002a8c <_vfiprintf_r+0x120>
 8002a60:	9a07      	ldr	r2, [sp, #28]
 8002a62:	4654      	mov	r4, sl
 8002a64:	2000      	movs	r0, #0
 8002a66:	f04f 0c0a 	mov.w	ip, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a70:	3b30      	subs	r3, #48	@ 0x30
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d94b      	bls.n	8002b0e <_vfiprintf_r+0x1a2>
 8002a76:	b1b0      	cbz	r0, 8002aa6 <_vfiprintf_r+0x13a>
 8002a78:	9207      	str	r2, [sp, #28]
 8002a7a:	e014      	b.n	8002aa6 <_vfiprintf_r+0x13a>
 8002a7c:	eba0 0308 	sub.w	r3, r0, r8
 8002a80:	fa09 f303 	lsl.w	r3, r9, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	9304      	str	r3, [sp, #16]
 8002a88:	46a2      	mov	sl, r4
 8002a8a:	e7d2      	b.n	8002a32 <_vfiprintf_r+0xc6>
 8002a8c:	9b03      	ldr	r3, [sp, #12]
 8002a8e:	1d19      	adds	r1, r3, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	9103      	str	r1, [sp, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bfbb      	ittet	lt
 8002a98:	425b      	neglt	r3, r3
 8002a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8002a9e:	9307      	strge	r3, [sp, #28]
 8002aa0:	9307      	strlt	r3, [sp, #28]
 8002aa2:	bfb8      	it	lt
 8002aa4:	9204      	strlt	r2, [sp, #16]
 8002aa6:	7823      	ldrb	r3, [r4, #0]
 8002aa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002aaa:	d10a      	bne.n	8002ac2 <_vfiprintf_r+0x156>
 8002aac:	7863      	ldrb	r3, [r4, #1]
 8002aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ab0:	d132      	bne.n	8002b18 <_vfiprintf_r+0x1ac>
 8002ab2:	9b03      	ldr	r3, [sp, #12]
 8002ab4:	1d1a      	adds	r2, r3, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	9203      	str	r2, [sp, #12]
 8002aba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002abe:	3402      	adds	r4, #2
 8002ac0:	9305      	str	r3, [sp, #20]
 8002ac2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002b98 <_vfiprintf_r+0x22c>
 8002ac6:	7821      	ldrb	r1, [r4, #0]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4650      	mov	r0, sl
 8002acc:	f7fd fb88 	bl	80001e0 <memchr>
 8002ad0:	b138      	cbz	r0, 8002ae2 <_vfiprintf_r+0x176>
 8002ad2:	9b04      	ldr	r3, [sp, #16]
 8002ad4:	eba0 000a 	sub.w	r0, r0, sl
 8002ad8:	2240      	movs	r2, #64	@ 0x40
 8002ada:	4082      	lsls	r2, r0
 8002adc:	4313      	orrs	r3, r2
 8002ade:	3401      	adds	r4, #1
 8002ae0:	9304      	str	r3, [sp, #16]
 8002ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae6:	4829      	ldr	r0, [pc, #164]	@ (8002b8c <_vfiprintf_r+0x220>)
 8002ae8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002aec:	2206      	movs	r2, #6
 8002aee:	f7fd fb77 	bl	80001e0 <memchr>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d03f      	beq.n	8002b76 <_vfiprintf_r+0x20a>
 8002af6:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <_vfiprintf_r+0x224>)
 8002af8:	bb1b      	cbnz	r3, 8002b42 <_vfiprintf_r+0x1d6>
 8002afa:	9b03      	ldr	r3, [sp, #12]
 8002afc:	3307      	adds	r3, #7
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	3308      	adds	r3, #8
 8002b04:	9303      	str	r3, [sp, #12]
 8002b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b08:	443b      	add	r3, r7
 8002b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b0c:	e76a      	b.n	80029e4 <_vfiprintf_r+0x78>
 8002b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b12:	460c      	mov	r4, r1
 8002b14:	2001      	movs	r0, #1
 8002b16:	e7a8      	b.n	8002a6a <_vfiprintf_r+0xfe>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	3401      	adds	r4, #1
 8002b1c:	9305      	str	r3, [sp, #20]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0c0a 	mov.w	ip, #10
 8002b24:	4620      	mov	r0, r4
 8002b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b2a:	3a30      	subs	r2, #48	@ 0x30
 8002b2c:	2a09      	cmp	r2, #9
 8002b2e:	d903      	bls.n	8002b38 <_vfiprintf_r+0x1cc>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0c6      	beq.n	8002ac2 <_vfiprintf_r+0x156>
 8002b34:	9105      	str	r1, [sp, #20]
 8002b36:	e7c4      	b.n	8002ac2 <_vfiprintf_r+0x156>
 8002b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e7f0      	b.n	8002b24 <_vfiprintf_r+0x1b8>
 8002b42:	ab03      	add	r3, sp, #12
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	462a      	mov	r2, r5
 8002b48:	4b12      	ldr	r3, [pc, #72]	@ (8002b94 <_vfiprintf_r+0x228>)
 8002b4a:	a904      	add	r1, sp, #16
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	f3af 8000 	nop.w
 8002b52:	4607      	mov	r7, r0
 8002b54:	1c78      	adds	r0, r7, #1
 8002b56:	d1d6      	bne.n	8002b06 <_vfiprintf_r+0x19a>
 8002b58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b5a:	07d9      	lsls	r1, r3, #31
 8002b5c:	d405      	bmi.n	8002b6a <_vfiprintf_r+0x1fe>
 8002b5e:	89ab      	ldrh	r3, [r5, #12]
 8002b60:	059a      	lsls	r2, r3, #22
 8002b62:	d402      	bmi.n	8002b6a <_vfiprintf_r+0x1fe>
 8002b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b66:	f7ff fddd 	bl	8002724 <__retarget_lock_release_recursive>
 8002b6a:	89ab      	ldrh	r3, [r5, #12]
 8002b6c:	065b      	lsls	r3, r3, #25
 8002b6e:	f53f af1f 	bmi.w	80029b0 <_vfiprintf_r+0x44>
 8002b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b74:	e71e      	b.n	80029b4 <_vfiprintf_r+0x48>
 8002b76:	ab03      	add	r3, sp, #12
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	462a      	mov	r2, r5
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <_vfiprintf_r+0x228>)
 8002b7e:	a904      	add	r1, sp, #16
 8002b80:	4630      	mov	r0, r6
 8002b82:	f000 f879 	bl	8002c78 <_printf_i>
 8002b86:	e7e4      	b.n	8002b52 <_vfiprintf_r+0x1e6>
 8002b88:	080042a8 	.word	0x080042a8
 8002b8c:	080042b2 	.word	0x080042b2
 8002b90:	00000000 	.word	0x00000000
 8002b94:	08002947 	.word	0x08002947
 8002b98:	080042ae 	.word	0x080042ae

08002b9c <_printf_common>:
 8002b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba0:	4616      	mov	r6, r2
 8002ba2:	4698      	mov	r8, r3
 8002ba4:	688a      	ldr	r2, [r1, #8]
 8002ba6:	690b      	ldr	r3, [r1, #16]
 8002ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bfb8      	it	lt
 8002bb0:	4613      	movlt	r3, r2
 8002bb2:	6033      	str	r3, [r6, #0]
 8002bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bb8:	4607      	mov	r7, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	b10a      	cbz	r2, 8002bc2 <_printf_common+0x26>
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	6033      	str	r3, [r6, #0]
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	0699      	lsls	r1, r3, #26
 8002bc6:	bf42      	ittt	mi
 8002bc8:	6833      	ldrmi	r3, [r6, #0]
 8002bca:	3302      	addmi	r3, #2
 8002bcc:	6033      	strmi	r3, [r6, #0]
 8002bce:	6825      	ldr	r5, [r4, #0]
 8002bd0:	f015 0506 	ands.w	r5, r5, #6
 8002bd4:	d106      	bne.n	8002be4 <_printf_common+0x48>
 8002bd6:	f104 0a19 	add.w	sl, r4, #25
 8002bda:	68e3      	ldr	r3, [r4, #12]
 8002bdc:	6832      	ldr	r2, [r6, #0]
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	42ab      	cmp	r3, r5
 8002be2:	dc26      	bgt.n	8002c32 <_printf_common+0x96>
 8002be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	3b00      	subs	r3, #0
 8002bec:	bf18      	it	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	0692      	lsls	r2, r2, #26
 8002bf2:	d42b      	bmi.n	8002c4c <_printf_common+0xb0>
 8002bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	47c8      	blx	r9
 8002bfe:	3001      	adds	r0, #1
 8002c00:	d01e      	beq.n	8002c40 <_printf_common+0xa4>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	6922      	ldr	r2, [r4, #16]
 8002c06:	f003 0306 	and.w	r3, r3, #6
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf02      	ittt	eq
 8002c0e:	68e5      	ldreq	r5, [r4, #12]
 8002c10:	6833      	ldreq	r3, [r6, #0]
 8002c12:	1aed      	subeq	r5, r5, r3
 8002c14:	68a3      	ldr	r3, [r4, #8]
 8002c16:	bf0c      	ite	eq
 8002c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c1c:	2500      	movne	r5, #0
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	bfc4      	itt	gt
 8002c22:	1a9b      	subgt	r3, r3, r2
 8002c24:	18ed      	addgt	r5, r5, r3
 8002c26:	2600      	movs	r6, #0
 8002c28:	341a      	adds	r4, #26
 8002c2a:	42b5      	cmp	r5, r6
 8002c2c:	d11a      	bne.n	8002c64 <_printf_common+0xc8>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	e008      	b.n	8002c44 <_printf_common+0xa8>
 8002c32:	2301      	movs	r3, #1
 8002c34:	4652      	mov	r2, sl
 8002c36:	4641      	mov	r1, r8
 8002c38:	4638      	mov	r0, r7
 8002c3a:	47c8      	blx	r9
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	d103      	bne.n	8002c48 <_printf_common+0xac>
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c48:	3501      	adds	r5, #1
 8002c4a:	e7c6      	b.n	8002bda <_printf_common+0x3e>
 8002c4c:	18e1      	adds	r1, r4, r3
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	2030      	movs	r0, #48	@ 0x30
 8002c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c56:	4422      	add	r2, r4
 8002c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c60:	3302      	adds	r3, #2
 8002c62:	e7c7      	b.n	8002bf4 <_printf_common+0x58>
 8002c64:	2301      	movs	r3, #1
 8002c66:	4622      	mov	r2, r4
 8002c68:	4641      	mov	r1, r8
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	47c8      	blx	r9
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d0e6      	beq.n	8002c40 <_printf_common+0xa4>
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7d9      	b.n	8002c2a <_printf_common+0x8e>
	...

08002c78 <_printf_i>:
 8002c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	7e0f      	ldrb	r7, [r1, #24]
 8002c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c80:	2f78      	cmp	r7, #120	@ 0x78
 8002c82:	4691      	mov	r9, r2
 8002c84:	4680      	mov	r8, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	469a      	mov	sl, r3
 8002c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c8e:	d807      	bhi.n	8002ca0 <_printf_i+0x28>
 8002c90:	2f62      	cmp	r7, #98	@ 0x62
 8002c92:	d80a      	bhi.n	8002caa <_printf_i+0x32>
 8002c94:	2f00      	cmp	r7, #0
 8002c96:	f000 80d1 	beq.w	8002e3c <_printf_i+0x1c4>
 8002c9a:	2f58      	cmp	r7, #88	@ 0x58
 8002c9c:	f000 80b8 	beq.w	8002e10 <_printf_i+0x198>
 8002ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ca8:	e03a      	b.n	8002d20 <_printf_i+0xa8>
 8002caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cae:	2b15      	cmp	r3, #21
 8002cb0:	d8f6      	bhi.n	8002ca0 <_printf_i+0x28>
 8002cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8002cb8 <_printf_i+0x40>)
 8002cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb8:	08002d11 	.word	0x08002d11
 8002cbc:	08002d25 	.word	0x08002d25
 8002cc0:	08002ca1 	.word	0x08002ca1
 8002cc4:	08002ca1 	.word	0x08002ca1
 8002cc8:	08002ca1 	.word	0x08002ca1
 8002ccc:	08002ca1 	.word	0x08002ca1
 8002cd0:	08002d25 	.word	0x08002d25
 8002cd4:	08002ca1 	.word	0x08002ca1
 8002cd8:	08002ca1 	.word	0x08002ca1
 8002cdc:	08002ca1 	.word	0x08002ca1
 8002ce0:	08002ca1 	.word	0x08002ca1
 8002ce4:	08002e23 	.word	0x08002e23
 8002ce8:	08002d4f 	.word	0x08002d4f
 8002cec:	08002ddd 	.word	0x08002ddd
 8002cf0:	08002ca1 	.word	0x08002ca1
 8002cf4:	08002ca1 	.word	0x08002ca1
 8002cf8:	08002e45 	.word	0x08002e45
 8002cfc:	08002ca1 	.word	0x08002ca1
 8002d00:	08002d4f 	.word	0x08002d4f
 8002d04:	08002ca1 	.word	0x08002ca1
 8002d08:	08002ca1 	.word	0x08002ca1
 8002d0c:	08002de5 	.word	0x08002de5
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	1d1a      	adds	r2, r3, #4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6032      	str	r2, [r6, #0]
 8002d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d20:	2301      	movs	r3, #1
 8002d22:	e09c      	b.n	8002e5e <_printf_i+0x1e6>
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	1d19      	adds	r1, r3, #4
 8002d2a:	6031      	str	r1, [r6, #0]
 8002d2c:	0606      	lsls	r6, r0, #24
 8002d2e:	d501      	bpl.n	8002d34 <_printf_i+0xbc>
 8002d30:	681d      	ldr	r5, [r3, #0]
 8002d32:	e003      	b.n	8002d3c <_printf_i+0xc4>
 8002d34:	0645      	lsls	r5, r0, #25
 8002d36:	d5fb      	bpl.n	8002d30 <_printf_i+0xb8>
 8002d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	da03      	bge.n	8002d48 <_printf_i+0xd0>
 8002d40:	232d      	movs	r3, #45	@ 0x2d
 8002d42:	426d      	negs	r5, r5
 8002d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d48:	4858      	ldr	r0, [pc, #352]	@ (8002eac <_printf_i+0x234>)
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	e011      	b.n	8002d72 <_printf_i+0xfa>
 8002d4e:	6821      	ldr	r1, [r4, #0]
 8002d50:	6833      	ldr	r3, [r6, #0]
 8002d52:	0608      	lsls	r0, r1, #24
 8002d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d58:	d402      	bmi.n	8002d60 <_printf_i+0xe8>
 8002d5a:	0649      	lsls	r1, r1, #25
 8002d5c:	bf48      	it	mi
 8002d5e:	b2ad      	uxthmi	r5, r5
 8002d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d62:	4852      	ldr	r0, [pc, #328]	@ (8002eac <_printf_i+0x234>)
 8002d64:	6033      	str	r3, [r6, #0]
 8002d66:	bf14      	ite	ne
 8002d68:	230a      	movne	r3, #10
 8002d6a:	2308      	moveq	r3, #8
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d72:	6866      	ldr	r6, [r4, #4]
 8002d74:	60a6      	str	r6, [r4, #8]
 8002d76:	2e00      	cmp	r6, #0
 8002d78:	db05      	blt.n	8002d86 <_printf_i+0x10e>
 8002d7a:	6821      	ldr	r1, [r4, #0]
 8002d7c:	432e      	orrs	r6, r5
 8002d7e:	f021 0104 	bic.w	r1, r1, #4
 8002d82:	6021      	str	r1, [r4, #0]
 8002d84:	d04b      	beq.n	8002e1e <_printf_i+0x1a6>
 8002d86:	4616      	mov	r6, r2
 8002d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8002d90:	5dc7      	ldrb	r7, [r0, r7]
 8002d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d96:	462f      	mov	r7, r5
 8002d98:	42bb      	cmp	r3, r7
 8002d9a:	460d      	mov	r5, r1
 8002d9c:	d9f4      	bls.n	8002d88 <_printf_i+0x110>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d10b      	bne.n	8002dba <_printf_i+0x142>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	07df      	lsls	r7, r3, #31
 8002da6:	d508      	bpl.n	8002dba <_printf_i+0x142>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	6861      	ldr	r1, [r4, #4]
 8002dac:	4299      	cmp	r1, r3
 8002dae:	bfde      	ittt	le
 8002db0:	2330      	movle	r3, #48	@ 0x30
 8002db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002db6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002dba:	1b92      	subs	r2, r2, r6
 8002dbc:	6122      	str	r2, [r4, #16]
 8002dbe:	f8cd a000 	str.w	sl, [sp]
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	aa03      	add	r2, sp, #12
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	4640      	mov	r0, r8
 8002dca:	f7ff fee7 	bl	8002b9c <_printf_common>
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d14a      	bne.n	8002e68 <_printf_i+0x1f0>
 8002dd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dd6:	b004      	add	sp, #16
 8002dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f043 0320 	orr.w	r3, r3, #32
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	4832      	ldr	r0, [pc, #200]	@ (8002eb0 <_printf_i+0x238>)
 8002de6:	2778      	movs	r7, #120	@ 0x78
 8002de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	6831      	ldr	r1, [r6, #0]
 8002df0:	061f      	lsls	r7, r3, #24
 8002df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002df6:	d402      	bmi.n	8002dfe <_printf_i+0x186>
 8002df8:	065f      	lsls	r7, r3, #25
 8002dfa:	bf48      	it	mi
 8002dfc:	b2ad      	uxthmi	r5, r5
 8002dfe:	6031      	str	r1, [r6, #0]
 8002e00:	07d9      	lsls	r1, r3, #31
 8002e02:	bf44      	itt	mi
 8002e04:	f043 0320 	orrmi.w	r3, r3, #32
 8002e08:	6023      	strmi	r3, [r4, #0]
 8002e0a:	b11d      	cbz	r5, 8002e14 <_printf_i+0x19c>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	e7ad      	b.n	8002d6c <_printf_i+0xf4>
 8002e10:	4826      	ldr	r0, [pc, #152]	@ (8002eac <_printf_i+0x234>)
 8002e12:	e7e9      	b.n	8002de8 <_printf_i+0x170>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	f023 0320 	bic.w	r3, r3, #32
 8002e1a:	6023      	str	r3, [r4, #0]
 8002e1c:	e7f6      	b.n	8002e0c <_printf_i+0x194>
 8002e1e:	4616      	mov	r6, r2
 8002e20:	e7bd      	b.n	8002d9e <_printf_i+0x126>
 8002e22:	6833      	ldr	r3, [r6, #0]
 8002e24:	6825      	ldr	r5, [r4, #0]
 8002e26:	6961      	ldr	r1, [r4, #20]
 8002e28:	1d18      	adds	r0, r3, #4
 8002e2a:	6030      	str	r0, [r6, #0]
 8002e2c:	062e      	lsls	r6, r5, #24
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	d501      	bpl.n	8002e36 <_printf_i+0x1be>
 8002e32:	6019      	str	r1, [r3, #0]
 8002e34:	e002      	b.n	8002e3c <_printf_i+0x1c4>
 8002e36:	0668      	lsls	r0, r5, #25
 8002e38:	d5fb      	bpl.n	8002e32 <_printf_i+0x1ba>
 8002e3a:	8019      	strh	r1, [r3, #0]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6123      	str	r3, [r4, #16]
 8002e40:	4616      	mov	r6, r2
 8002e42:	e7bc      	b.n	8002dbe <_printf_i+0x146>
 8002e44:	6833      	ldr	r3, [r6, #0]
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	6032      	str	r2, [r6, #0]
 8002e4a:	681e      	ldr	r6, [r3, #0]
 8002e4c:	6862      	ldr	r2, [r4, #4]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4630      	mov	r0, r6
 8002e52:	f7fd f9c5 	bl	80001e0 <memchr>
 8002e56:	b108      	cbz	r0, 8002e5c <_printf_i+0x1e4>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	6060      	str	r0, [r4, #4]
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	6123      	str	r3, [r4, #16]
 8002e60:	2300      	movs	r3, #0
 8002e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e66:	e7aa      	b.n	8002dbe <_printf_i+0x146>
 8002e68:	6923      	ldr	r3, [r4, #16]
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	4640      	mov	r0, r8
 8002e70:	47d0      	blx	sl
 8002e72:	3001      	adds	r0, #1
 8002e74:	d0ad      	beq.n	8002dd2 <_printf_i+0x15a>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	079b      	lsls	r3, r3, #30
 8002e7a:	d413      	bmi.n	8002ea4 <_printf_i+0x22c>
 8002e7c:	68e0      	ldr	r0, [r4, #12]
 8002e7e:	9b03      	ldr	r3, [sp, #12]
 8002e80:	4298      	cmp	r0, r3
 8002e82:	bfb8      	it	lt
 8002e84:	4618      	movlt	r0, r3
 8002e86:	e7a6      	b.n	8002dd6 <_printf_i+0x15e>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	4640      	mov	r0, r8
 8002e90:	47d0      	blx	sl
 8002e92:	3001      	adds	r0, #1
 8002e94:	d09d      	beq.n	8002dd2 <_printf_i+0x15a>
 8002e96:	3501      	adds	r5, #1
 8002e98:	68e3      	ldr	r3, [r4, #12]
 8002e9a:	9903      	ldr	r1, [sp, #12]
 8002e9c:	1a5b      	subs	r3, r3, r1
 8002e9e:	42ab      	cmp	r3, r5
 8002ea0:	dcf2      	bgt.n	8002e88 <_printf_i+0x210>
 8002ea2:	e7eb      	b.n	8002e7c <_printf_i+0x204>
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	f104 0619 	add.w	r6, r4, #25
 8002eaa:	e7f5      	b.n	8002e98 <_printf_i+0x220>
 8002eac:	080042b9 	.word	0x080042b9
 8002eb0:	080042ca 	.word	0x080042ca

08002eb4 <__sflush_r>:
 8002eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ebc:	0716      	lsls	r6, r2, #28
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	460c      	mov	r4, r1
 8002ec2:	d454      	bmi.n	8002f6e <__sflush_r+0xba>
 8002ec4:	684b      	ldr	r3, [r1, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dc02      	bgt.n	8002ed0 <__sflush_r+0x1c>
 8002eca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd48      	ble.n	8002f62 <__sflush_r+0xae>
 8002ed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ed2:	2e00      	cmp	r6, #0
 8002ed4:	d045      	beq.n	8002f62 <__sflush_r+0xae>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002edc:	682f      	ldr	r7, [r5, #0]
 8002ede:	6a21      	ldr	r1, [r4, #32]
 8002ee0:	602b      	str	r3, [r5, #0]
 8002ee2:	d030      	beq.n	8002f46 <__sflush_r+0x92>
 8002ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	0759      	lsls	r1, r3, #29
 8002eea:	d505      	bpl.n	8002ef8 <__sflush_r+0x44>
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ef2:	b10b      	cbz	r3, 8002ef8 <__sflush_r+0x44>
 8002ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002efc:	6a21      	ldr	r1, [r4, #32]
 8002efe:	4628      	mov	r0, r5
 8002f00:	47b0      	blx	r6
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	d106      	bne.n	8002f16 <__sflush_r+0x62>
 8002f08:	6829      	ldr	r1, [r5, #0]
 8002f0a:	291d      	cmp	r1, #29
 8002f0c:	d82b      	bhi.n	8002f66 <__sflush_r+0xb2>
 8002f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb8 <__sflush_r+0x104>)
 8002f10:	40ca      	lsrs	r2, r1
 8002f12:	07d6      	lsls	r6, r2, #31
 8002f14:	d527      	bpl.n	8002f66 <__sflush_r+0xb2>
 8002f16:	2200      	movs	r2, #0
 8002f18:	6062      	str	r2, [r4, #4]
 8002f1a:	04d9      	lsls	r1, r3, #19
 8002f1c:	6922      	ldr	r2, [r4, #16]
 8002f1e:	6022      	str	r2, [r4, #0]
 8002f20:	d504      	bpl.n	8002f2c <__sflush_r+0x78>
 8002f22:	1c42      	adds	r2, r0, #1
 8002f24:	d101      	bne.n	8002f2a <__sflush_r+0x76>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	b903      	cbnz	r3, 8002f2c <__sflush_r+0x78>
 8002f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f2e:	602f      	str	r7, [r5, #0]
 8002f30:	b1b9      	cbz	r1, 8002f62 <__sflush_r+0xae>
 8002f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f36:	4299      	cmp	r1, r3
 8002f38:	d002      	beq.n	8002f40 <__sflush_r+0x8c>
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f7ff fbf4 	bl	8002728 <_free_r>
 8002f40:	2300      	movs	r3, #0
 8002f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f44:	e00d      	b.n	8002f62 <__sflush_r+0xae>
 8002f46:	2301      	movs	r3, #1
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b0      	blx	r6
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	1c50      	adds	r0, r2, #1
 8002f50:	d1c9      	bne.n	8002ee6 <__sflush_r+0x32>
 8002f52:	682b      	ldr	r3, [r5, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0c6      	beq.n	8002ee6 <__sflush_r+0x32>
 8002f58:	2b1d      	cmp	r3, #29
 8002f5a:	d001      	beq.n	8002f60 <__sflush_r+0xac>
 8002f5c:	2b16      	cmp	r3, #22
 8002f5e:	d11e      	bne.n	8002f9e <__sflush_r+0xea>
 8002f60:	602f      	str	r7, [r5, #0]
 8002f62:	2000      	movs	r0, #0
 8002f64:	e022      	b.n	8002fac <__sflush_r+0xf8>
 8002f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	e01b      	b.n	8002fa6 <__sflush_r+0xf2>
 8002f6e:	690f      	ldr	r7, [r1, #16]
 8002f70:	2f00      	cmp	r7, #0
 8002f72:	d0f6      	beq.n	8002f62 <__sflush_r+0xae>
 8002f74:	0793      	lsls	r3, r2, #30
 8002f76:	680e      	ldr	r6, [r1, #0]
 8002f78:	bf08      	it	eq
 8002f7a:	694b      	ldreq	r3, [r1, #20]
 8002f7c:	600f      	str	r7, [r1, #0]
 8002f7e:	bf18      	it	ne
 8002f80:	2300      	movne	r3, #0
 8002f82:	eba6 0807 	sub.w	r8, r6, r7
 8002f86:	608b      	str	r3, [r1, #8]
 8002f88:	f1b8 0f00 	cmp.w	r8, #0
 8002f8c:	dde9      	ble.n	8002f62 <__sflush_r+0xae>
 8002f8e:	6a21      	ldr	r1, [r4, #32]
 8002f90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002f92:	4643      	mov	r3, r8
 8002f94:	463a      	mov	r2, r7
 8002f96:	4628      	mov	r0, r5
 8002f98:	47b0      	blx	r6
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	dc08      	bgt.n	8002fb0 <__sflush_r+0xfc>
 8002f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb0:	4407      	add	r7, r0
 8002fb2:	eba8 0800 	sub.w	r8, r8, r0
 8002fb6:	e7e7      	b.n	8002f88 <__sflush_r+0xd4>
 8002fb8:	20400001 	.word	0x20400001

08002fbc <_fflush_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	690b      	ldr	r3, [r1, #16]
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	b913      	cbnz	r3, 8002fcc <_fflush_r+0x10>
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	4628      	mov	r0, r5
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	b118      	cbz	r0, 8002fd6 <_fflush_r+0x1a>
 8002fce:	6a03      	ldr	r3, [r0, #32]
 8002fd0:	b90b      	cbnz	r3, 8002fd6 <_fflush_r+0x1a>
 8002fd2:	f7ff f9af 	bl	8002334 <__sinit>
 8002fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f3      	beq.n	8002fc6 <_fflush_r+0xa>
 8002fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fe0:	07d0      	lsls	r0, r2, #31
 8002fe2:	d404      	bmi.n	8002fee <_fflush_r+0x32>
 8002fe4:	0599      	lsls	r1, r3, #22
 8002fe6:	d402      	bmi.n	8002fee <_fflush_r+0x32>
 8002fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fea:	f7ff fb9a 	bl	8002722 <__retarget_lock_acquire_recursive>
 8002fee:	4628      	mov	r0, r5
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	f7ff ff5f 	bl	8002eb4 <__sflush_r>
 8002ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ff8:	07da      	lsls	r2, r3, #31
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	d4e4      	bmi.n	8002fc8 <_fflush_r+0xc>
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	059b      	lsls	r3, r3, #22
 8003002:	d4e1      	bmi.n	8002fc8 <_fflush_r+0xc>
 8003004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003006:	f7ff fb8d 	bl	8002724 <__retarget_lock_release_recursive>
 800300a:	e7dd      	b.n	8002fc8 <_fflush_r+0xc>

0800300c <__swhatbuf_r>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	460c      	mov	r4, r1
 8003010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003014:	2900      	cmp	r1, #0
 8003016:	b096      	sub	sp, #88	@ 0x58
 8003018:	4615      	mov	r5, r2
 800301a:	461e      	mov	r6, r3
 800301c:	da0d      	bge.n	800303a <__swhatbuf_r+0x2e>
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	bf14      	ite	ne
 800302a:	2340      	movne	r3, #64	@ 0x40
 800302c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003030:	2000      	movs	r0, #0
 8003032:	6031      	str	r1, [r6, #0]
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	b016      	add	sp, #88	@ 0x58
 8003038:	bd70      	pop	{r4, r5, r6, pc}
 800303a:	466a      	mov	r2, sp
 800303c:	f000 f848 	bl	80030d0 <_fstat_r>
 8003040:	2800      	cmp	r0, #0
 8003042:	dbec      	blt.n	800301e <__swhatbuf_r+0x12>
 8003044:	9901      	ldr	r1, [sp, #4]
 8003046:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800304a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800304e:	4259      	negs	r1, r3
 8003050:	4159      	adcs	r1, r3
 8003052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003056:	e7eb      	b.n	8003030 <__swhatbuf_r+0x24>

08003058 <__smakebuf_r>:
 8003058:	898b      	ldrh	r3, [r1, #12]
 800305a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305c:	079d      	lsls	r5, r3, #30
 800305e:	4606      	mov	r6, r0
 8003060:	460c      	mov	r4, r1
 8003062:	d507      	bpl.n	8003074 <__smakebuf_r+0x1c>
 8003064:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	6123      	str	r3, [r4, #16]
 800306c:	2301      	movs	r3, #1
 800306e:	6163      	str	r3, [r4, #20]
 8003070:	b003      	add	sp, #12
 8003072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003074:	ab01      	add	r3, sp, #4
 8003076:	466a      	mov	r2, sp
 8003078:	f7ff ffc8 	bl	800300c <__swhatbuf_r>
 800307c:	9f00      	ldr	r7, [sp, #0]
 800307e:	4605      	mov	r5, r0
 8003080:	4639      	mov	r1, r7
 8003082:	4630      	mov	r0, r6
 8003084:	f7ff fbbc 	bl	8002800 <_malloc_r>
 8003088:	b948      	cbnz	r0, 800309e <__smakebuf_r+0x46>
 800308a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800308e:	059a      	lsls	r2, r3, #22
 8003090:	d4ee      	bmi.n	8003070 <__smakebuf_r+0x18>
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	e7e2      	b.n	8003064 <__smakebuf_r+0xc>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	6020      	str	r0, [r4, #0]
 80030a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	9b01      	ldr	r3, [sp, #4]
 80030aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80030ae:	b15b      	cbz	r3, 80030c8 <__smakebuf_r+0x70>
 80030b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 f81d 	bl	80030f4 <_isatty_r>
 80030ba:	b128      	cbz	r0, 80030c8 <__smakebuf_r+0x70>
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	431d      	orrs	r5, r3
 80030cc:	81a5      	strh	r5, [r4, #12]
 80030ce:	e7cf      	b.n	8003070 <__smakebuf_r+0x18>

080030d0 <_fstat_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	@ (80030f0 <_fstat_r+0x20>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	4604      	mov	r4, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	f7fd fc6d 	bl	80009bc <_fstat>
 80030e2:	1c43      	adds	r3, r0, #1
 80030e4:	d102      	bne.n	80030ec <_fstat_r+0x1c>
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	b103      	cbz	r3, 80030ec <_fstat_r+0x1c>
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
 80030ee:	bf00      	nop
 80030f0:	20001210 	.word	0x20001210

080030f4 <_isatty_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4d06      	ldr	r5, [pc, #24]	@ (8003110 <_isatty_r+0x1c>)
 80030f8:	2300      	movs	r3, #0
 80030fa:	4604      	mov	r4, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	602b      	str	r3, [r5, #0]
 8003100:	f7fd fc6c 	bl	80009dc <_isatty>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d102      	bne.n	800310e <_isatty_r+0x1a>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	b103      	cbz	r3, 800310e <_isatty_r+0x1a>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	20001210 	.word	0x20001210

08003114 <_sbrk_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4d06      	ldr	r5, [pc, #24]	@ (8003130 <_sbrk_r+0x1c>)
 8003118:	2300      	movs	r3, #0
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd fc74 	bl	8000a0c <_sbrk>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_sbrk_r+0x1a>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_sbrk_r+0x1a>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20001210 	.word	0x20001210

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
