
stm32world_pwm3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004b68  08004b68  00005b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de8  08004de8  00006088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df0  08004df0  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08004df8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006088  2**0
                  CONTENTS
 10 .bss          00000214  20000088  20000088  00006088  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  00006088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d77  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022aa  00000000  00000000  00017e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ab1b  00000000  00000000  0001a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b50  00000000  00000000  00024bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f08  00000000  00000000  00025748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ffa5  00000000  00000000  00026650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012f4d  00000000  00000000  000465f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2966  00000000  00000000  00059542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0011bea8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002ab4  00000000  00000000  0011beec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  0011e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b50 	.word	0x08004b50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004b50 	.word	0x08004b50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <_write>:

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000da8:	3801      	subs	r0, #1
 8000daa:	2801      	cmp	r0, #1
int _write(int fd, char *ptr, int len) {
 8000dac:	b510      	push	{r4, lr}
    if (fd == 1 || fd == 2) {
 8000dae:	d809      	bhi.n	8000dc4 <_write+0x1c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000db0:	4614      	mov	r4, r2
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <_write+0x24>)
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db8:	b292      	uxth	r2, r2
 8000dba:	f001 fe93 	bl	8002ae4 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000dbe:	b908      	cbnz	r0, 8000dc4 <_write+0x1c>
            return len;
        else
            return -1;
    }
    return -1;
}
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	bd10      	pop	{r4, pc}
            return -1;
 8000dc4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000dc8:	e7fa      	b.n	8000dc0 <_write+0x18>
 8000dca:	bf00      	nop
 8000dcc:	200000b8 	.word	0x200000b8

08000dd0 <HAL_TIM_PWM_PulseFinishedCallback>:

inline void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM4) {
 8000dd0:	4b9d      	ldr	r3, [pc, #628]	@ (8001048 <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 8000dd2:	6802      	ldr	r2, [r0, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d000      	beq.n	8000dda <HAL_TIM_PWM_PulseFinishedCallback+0xa>
 8000dd8:	4770      	bx	lr
inline void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

        for ( int i = 0; i < sizeof(angles) / sizeof(angles[0]); ++i) {

            angles[i] += angle_changes[i];
 8000dde:	4c9b      	ldr	r4, [pc, #620]	@ (800104c <HAL_TIM_PWM_PulseFinishedCallback+0x27c>)
 8000de0:	4f9b      	ldr	r7, [pc, #620]	@ (8001050 <HAL_TIM_PWM_PulseFinishedCallback+0x280>)

            if (angles[i] >= 2 * M_PI) angles[i] -= (2 * M_PI);

            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000de2:	4b9c      	ldr	r3, [pc, #624]	@ (8001054 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
            angles[i] += angle_changes[i];
 8000de4:	edd7 7a00 	vldr	s15, [r7]
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000de8:	681d      	ldr	r5, [r3, #0]
inline void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000dea:	ed2d 8b04 	vpush	{d8-d9}
            angles[i] += angle_changes[i];
 8000dee:	ed94 8a00 	vldr	s16, [r4]
 8000df2:	ee38 8a27 	vadd.f32	s16, s16, s15
            if (angles[i] >= 2 * M_PI) angles[i] -= (2 * M_PI);
 8000df6:	ee18 0a10 	vmov	r0, s16
 8000dfa:	f7ff fcc7 	bl	800078c <__aeabi_f2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	ec43 2b19 	vmov	d9, r2, r3
 8000e06:	a38e      	add	r3, pc, #568	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	f7ff fd8a 	bl	8000924 <__aeabi_dcmpge>
 8000e10:	b170      	cbz	r0, 8000e30 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
 8000e12:	a38b      	add	r3, pc, #556	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	ec51 0b19 	vmov	r0, r1, d9
 8000e1c:	f7ff fb56 	bl	80004cc <__aeabi_dsub>
 8000e20:	f7ff fddc 	bl	80009dc <__aeabi_d2f>
 8000e24:	ee08 0a10 	vmov	s16, r0
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000e28:	f7ff fcb0 	bl	800078c <__aeabi_f2d>
 8000e2c:	ec41 0b19 	vmov	d9, r0, r1
 8000e30:	eeb0 0a49 	vmov.f32	s0, s18
 8000e34:	eef0 0a69 	vmov.f32	s1, s19
            angles[i] += angle_changes[i];
 8000e38:	ed84 8a00 	vstr	s16, [r4]
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000e3c:	f002 fe64 	bl	8003b08 <sin>
 8000e40:	4e85      	ldr	r6, [pc, #532]	@ (8001058 <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 8000e42:	4986      	ldr	r1, [pc, #536]	@ (800105c <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8000e44:	f8d6 8000 	ldr.w	r8, [r6]
 8000e48:	ec53 2b10 	vmov	r2, r3, d0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fb3d 	bl	80004cc <__aeabi_dsub>
 8000e52:	4b83      	ldr	r3, [pc, #524]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f7ff fa0b 	bl	8000270 <__aeabi_dmul>
 8000e5a:	f7ff fd9f 	bl	800099c <__aeabi_d2uiz>
 8000e5e:	f1b8 0f00 	cmp.w	r8, #0
 8000e62:	f000 80d5 	beq.w	8001010 <HAL_TIM_PWM_PulseFinishedCallback+0x240>
 8000e66:	f1b8 0f04 	cmp.w	r8, #4
 8000e6a:	f000 80e2 	beq.w	8001032 <HAL_TIM_PWM_PulseFinishedCallback+0x262>
 8000e6e:	f1b8 0f08 	cmp.w	r8, #8
 8000e72:	bf14      	ite	ne
 8000e74:	6428      	strne	r0, [r5, #64]	@ 0x40
 8000e76:	63e8      	streq	r0, [r5, #60]	@ 0x3c
            angles[i] += angle_changes[i];
 8000e78:	edd4 7a01 	vldr	s15, [r4, #4]
 8000e7c:	ed97 8a01 	vldr	s16, [r7, #4]
 8000e80:	ee38 8a27 	vadd.f32	s16, s16, s15
            if (angles[i] >= 2 * M_PI) angles[i] -= (2 * M_PI);
 8000e84:	ee18 0a10 	vmov	r0, s16
 8000e88:	f7ff fc80 	bl	800078c <__aeabi_f2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	ec43 2b19 	vmov	d9, r2, r3
 8000e94:	a36a      	add	r3, pc, #424	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff fd43 	bl	8000924 <__aeabi_dcmpge>
 8000e9e:	b170      	cbz	r0, 8000ebe <HAL_TIM_PWM_PulseFinishedCallback+0xee>
 8000ea0:	a367      	add	r3, pc, #412	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	ec51 0b19 	vmov	r0, r1, d9
 8000eaa:	f7ff fb0f 	bl	80004cc <__aeabi_dsub>
 8000eae:	f7ff fd95 	bl	80009dc <__aeabi_d2f>
 8000eb2:	ee08 0a10 	vmov	s16, r0
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000eb6:	f7ff fc69 	bl	800078c <__aeabi_f2d>
 8000eba:	ec41 0b19 	vmov	d9, r0, r1
 8000ebe:	eeb0 0a49 	vmov.f32	s0, s18
 8000ec2:	eef0 0a69 	vmov.f32	s1, s19
            angles[i] += angle_changes[i];
 8000ec6:	ed84 8a01 	vstr	s16, [r4, #4]
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000eca:	f002 fe1d 	bl	8003b08 <sin>
 8000ece:	4963      	ldr	r1, [pc, #396]	@ (800105c <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8000ed0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8000ed4:	ec53 2b10 	vmov	r2, r3, d0
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff faf7 	bl	80004cc <__aeabi_dsub>
 8000ede:	4b60      	ldr	r3, [pc, #384]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f7ff f9c5 	bl	8000270 <__aeabi_dmul>
 8000ee6:	f7ff fd59 	bl	800099c <__aeabi_d2uiz>
 8000eea:	f1b8 0f00 	cmp.w	r8, #0
 8000eee:	f000 809a 	beq.w	8001026 <HAL_TIM_PWM_PulseFinishedCallback+0x256>
 8000ef2:	f1b8 0f04 	cmp.w	r8, #4
 8000ef6:	f000 8098 	beq.w	800102a <HAL_TIM_PWM_PulseFinishedCallback+0x25a>
 8000efa:	f1b8 0f08 	cmp.w	r8, #8
 8000efe:	bf14      	ite	ne
 8000f00:	6428      	strne	r0, [r5, #64]	@ 0x40
 8000f02:	63e8      	streq	r0, [r5, #60]	@ 0x3c
            angles[i] += angle_changes[i];
 8000f04:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f08:	ed94 8a02 	vldr	s16, [r4, #8]
 8000f0c:	ee38 8a27 	vadd.f32	s16, s16, s15
            if (angles[i] >= 2 * M_PI) angles[i] -= (2 * M_PI);
 8000f10:	ee18 0a10 	vmov	r0, s16
 8000f14:	f7ff fc3a 	bl	800078c <__aeabi_f2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	ec43 2b19 	vmov	d9, r2, r3
 8000f20:	a347      	add	r3, pc, #284	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff fcfd 	bl	8000924 <__aeabi_dcmpge>
 8000f2a:	b170      	cbz	r0, 8000f4a <HAL_TIM_PWM_PulseFinishedCallback+0x17a>
 8000f2c:	a344      	add	r3, pc, #272	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	ec51 0b19 	vmov	r0, r1, d9
 8000f36:	f7ff fac9 	bl	80004cc <__aeabi_dsub>
 8000f3a:	f7ff fd4f 	bl	80009dc <__aeabi_d2f>
 8000f3e:	ee08 0a10 	vmov	s16, r0
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000f42:	f7ff fc23 	bl	800078c <__aeabi_f2d>
 8000f46:	ec41 0b19 	vmov	d9, r0, r1
 8000f4a:	eeb0 0a49 	vmov.f32	s0, s18
 8000f4e:	eef0 0a69 	vmov.f32	s1, s19
            angles[i] += angle_changes[i];
 8000f52:	ed84 8a02 	vstr	s16, [r4, #8]
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000f56:	f002 fdd7 	bl	8003b08 <sin>
 8000f5a:	4940      	ldr	r1, [pc, #256]	@ (800105c <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8000f5c:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8000f60:	ec53 2b10 	vmov	r2, r3, d0
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fab1 	bl	80004cc <__aeabi_dsub>
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f7ff f97f 	bl	8000270 <__aeabi_dmul>
 8000f72:	f7ff fd13 	bl	800099c <__aeabi_d2uiz>
 8000f76:	f1b8 0f00 	cmp.w	r8, #0
 8000f7a:	d04b      	beq.n	8001014 <HAL_TIM_PWM_PulseFinishedCallback+0x244>
 8000f7c:	f1b8 0f04 	cmp.w	r8, #4
 8000f80:	d055      	beq.n	800102e <HAL_TIM_PWM_PulseFinishedCallback+0x25e>
 8000f82:	f1b8 0f08 	cmp.w	r8, #8
 8000f86:	bf14      	ite	ne
 8000f88:	6428      	strne	r0, [r5, #64]	@ 0x40
 8000f8a:	63e8      	streq	r0, [r5, #60]	@ 0x3c
            angles[i] += angle_changes[i];
 8000f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f90:	ed94 8a03 	vldr	s16, [r4, #12]
 8000f94:	ee38 8a27 	vadd.f32	s16, s16, s15
            if (angles[i] >= 2 * M_PI) angles[i] -= (2 * M_PI);
 8000f98:	ee18 0a10 	vmov	r0, s16
 8000f9c:	f7ff fbf6 	bl	800078c <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	ec43 2b19 	vmov	d9, r2, r3
 8000fa8:	a325      	add	r3, pc, #148	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fcb9 	bl	8000924 <__aeabi_dcmpge>
 8000fb2:	b170      	cbz	r0, 8000fd2 <HAL_TIM_PWM_PulseFinishedCallback+0x202>
 8000fb4:	a322      	add	r3, pc, #136	@ (adr r3, 8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	ec51 0b19 	vmov	r0, r1, d9
 8000fbe:	f7ff fa85 	bl	80004cc <__aeabi_dsub>
 8000fc2:	f7ff fd0b 	bl	80009dc <__aeabi_d2f>
 8000fc6:	ee08 0a10 	vmov	s16, r0
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000fca:	f7ff fbdf 	bl	800078c <__aeabi_f2d>
 8000fce:	ec41 0b19 	vmov	d9, r0, r1
 8000fd2:	eeb0 0a49 	vmov.f32	s0, s18
 8000fd6:	eef0 0a69 	vmov.f32	s1, s19
            angles[i] += angle_changes[i];
 8000fda:	ed84 8a03 	vstr	s16, [r4, #12]
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8000fde:	f002 fd93 	bl	8003b08 <sin>
 8000fe2:	491e      	ldr	r1, [pc, #120]	@ (800105c <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8000fe4:	68f6      	ldr	r6, [r6, #12]
 8000fe6:	ec53 2b10 	vmov	r2, r3, d0
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fa6e 	bl	80004cc <__aeabi_dsub>
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f7ff f93c 	bl	8000270 <__aeabi_dmul>
 8000ff8:	f7ff fcd0 	bl	800099c <__aeabi_d2uiz>
 8000ffc:	b966      	cbnz	r6, 8001018 <HAL_TIM_PWM_PulseFinishedCallback+0x248>
 8000ffe:	6368      	str	r0, [r5, #52]	@ 0x34
        }

        ++cb_cnt;
 8001000:	4a18      	ldr	r2, [pc, #96]	@ (8001064 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
    }
}
 8001002:	ecbd 8b04 	vpop	{d8-d9}
        ++cb_cnt;
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            __HAL_TIM_SET_COMPARE(&htim4, led_channels[i], SAMPLE_MID - (SAMPLE_MID * sin(angles[i]) ));
 8001010:	6368      	str	r0, [r5, #52]	@ 0x34
 8001012:	e731      	b.n	8000e78 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>
 8001014:	6368      	str	r0, [r5, #52]	@ 0x34
 8001016:	e7b9      	b.n	8000f8c <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
 8001018:	2e04      	cmp	r6, #4
 800101a:	d00c      	beq.n	8001036 <HAL_TIM_PWM_PulseFinishedCallback+0x266>
 800101c:	2e08      	cmp	r6, #8
 800101e:	bf0c      	ite	eq
 8001020:	63e8      	streq	r0, [r5, #60]	@ 0x3c
 8001022:	6428      	strne	r0, [r5, #64]	@ 0x40
 8001024:	e7ec      	b.n	8001000 <HAL_TIM_PWM_PulseFinishedCallback+0x230>
 8001026:	6368      	str	r0, [r5, #52]	@ 0x34
 8001028:	e76c      	b.n	8000f04 <HAL_TIM_PWM_PulseFinishedCallback+0x134>
 800102a:	63a8      	str	r0, [r5, #56]	@ 0x38
 800102c:	e76a      	b.n	8000f04 <HAL_TIM_PWM_PulseFinishedCallback+0x134>
 800102e:	63a8      	str	r0, [r5, #56]	@ 0x38
 8001030:	e7ac      	b.n	8000f8c <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
 8001032:	63a8      	str	r0, [r5, #56]	@ 0x38
 8001034:	e720      	b.n	8000e78 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>
 8001036:	63a8      	str	r0, [r5, #56]	@ 0x38
 8001038:	e7e2      	b.n	8001000 <HAL_TIM_PWM_PulseFinishedCallback+0x230>
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	54442d18 	.word	0x54442d18
 8001044:	401921fb 	.word	0x401921fb
 8001048:	40000800 	.word	0x40000800
 800104c:	200000a4 	.word	0x200000a4
 8001050:	20000000 	.word	0x20000000
 8001054:	20000100 	.word	0x20000100
 8001058:	20000010 	.word	0x20000010
 800105c:	3ff00000 	.word	0x3ff00000
 8001060:	407f4000 	.word	0x407f4000
 8001064:	200000b4 	.word	0x200000b4

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	2300      	movs	r3, #0
{
 800106c:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001072:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001076:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800107a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4921      	ldr	r1, [pc, #132]	@ (8001104 <SystemClock_Config+0x9c>)
 8001080:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001082:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001086:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800108c:	6408      	str	r0, [r1, #64]	@ 0x40
 800108e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001090:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001094:	9101      	str	r1, [sp, #4]
 8001096:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a4:	2001      	movs	r0, #1
 80010a6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010be:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c0:	2104      	movs	r1, #4
 80010c2:	2002      	movs	r0, #2
 80010c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c8:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010ca:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ce:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f000 fd03 	bl	8001adc <HAL_RCC_OscConfig>
 80010d6:	b108      	cbz	r0, 80010dc <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80010da:	e7fe      	b.n	80010da <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	220f      	movs	r2, #15
 80010de:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e4:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ec:	a803      	add	r0, sp, #12
 80010ee:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f4:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f6:	f000 fef9 	bl	8001eec <HAL_RCC_ClockConfig>
 80010fa:	b108      	cbz	r0, 8001100 <SystemClock_Config+0x98>
 80010fc:	b672      	cpsid	i
    while (1)
 80010fe:	e7fe      	b.n	80010fe <SystemClock_Config+0x96>
}
 8001100:	b015      	add	sp, #84	@ 0x54
 8001102:	bd30      	pop	{r4, r5, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <main>:
{
 800110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	2400      	movs	r4, #0
{
 8001112:	b092      	sub	sp, #72	@ 0x48
  HAL_Init();
 8001114:	f000 fa52 	bl	80015bc <HAL_Init>
  SystemClock_Config();
 8001118:	f7ff ffa6 	bl	8001068 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001120:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b6f      	ldr	r3, [pc, #444]	@ (80012e4 <main+0x1d8>)
 8001126:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800112c:	486e      	ldr	r0, [pc, #440]	@ (80012e8 <main+0x1dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	f042 0204 	orr.w	r2, r2, #4
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
 8001134:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001136:	f001 0104 	and.w	r1, r1, #4
 800113a:	9100      	str	r1, [sp, #0]
 800113c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	9401      	str	r4, [sp, #4]
 8001140:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001142:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001146:	6319      	str	r1, [r3, #48]	@ 0x30
 8001148:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800114a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800114e:	9101      	str	r1, [sp, #4]
 8001150:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	9402      	str	r4, [sp, #8]
 8001154:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001156:	f041 0101 	orr.w	r1, r1, #1
 800115a:	6319      	str	r1, [r3, #48]	@ 0x30
 800115c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800115e:	f001 0101 	and.w	r1, r1, #1
 8001162:	9102      	str	r1, [sp, #8]
 8001164:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	9403      	str	r4, [sp, #12]
 8001168:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800116a:	f041 0102 	orr.w	r1, r1, #2
 800116e:	6319      	str	r1, [r3, #48]	@ 0x30
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001176:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800117a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001180:	f000 fca8 	bl	8001ad4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8001184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800118a:	4857      	ldr	r0, [pc, #348]	@ (80012e8 <main+0x1dc>)
 800118c:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001196:	f000 fab3 	bl	8001700 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800119a:	4854      	ldr	r0, [pc, #336]	@ (80012ec <main+0x1e0>)
  huart1.Init.BaudRate = 921600;
 800119c:	4a54      	ldr	r2, [pc, #336]	@ (80012f0 <main+0x1e4>)
 800119e:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a2:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 921600;
 80011a4:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ac:	e9c0 4504 	strd	r4, r5, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b4:	f001 fc04 	bl	80029c0 <HAL_UART_Init>
 80011b8:	b108      	cbz	r0, 80011be <main+0xb2>
 80011ba:	b672      	cpsid	i
    while (1)
 80011bc:	e7fe      	b.n	80011bc <main+0xb0>
  htim4.Instance = TIM4;
 80011be:	4c4d      	ldr	r4, [pc, #308]	@ (80012f4 <main+0x1e8>)
  htim4.Init.Prescaler = 839;
 80011c0:	4a4d      	ldr	r2, [pc, #308]	@ (80012f8 <main+0x1ec>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	9006      	str	r0, [sp, #24]
  htim4.Init.Prescaler = 839;
 80011c4:	f240 3347 	movw	r3, #839	@ 0x347
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80011cc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 80011d0:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  htim4.Init.Prescaler = 839;
 80011d8:	e9c4 2300 	strd	r2, r3, [r4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	9010      	str	r0, [sp, #64]	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e0:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	9005      	str	r0, [sp, #20]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	60a0      	str	r0, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	61a0      	str	r0, [r4, #24]
  htim4.Init.Period = SAMPLE_RANGE - 1;
 80011ea:	f240 33e7 	movw	r3, #999	@ 0x3e7
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011ee:	4620      	mov	r0, r4
  htim4.Init.Period = SAMPLE_RANGE - 1;
 80011f0:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f2:	f000 ff39 	bl	8002068 <HAL_TIM_Base_Init>
 80011f6:	b108      	cbz	r0, 80011fc <main+0xf0>
 80011f8:	b672      	cpsid	i
    while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0xee>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001200:	a906      	add	r1, sp, #24
 8001202:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f001 fa49 	bl	800269c <HAL_TIM_ConfigClockSource>
 800120a:	b108      	cbz	r0, 8001210 <main+0x104>
 800120c:	b672      	cpsid	i
    while (1)
 800120e:	e7fe      	b.n	800120e <main+0x102>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001210:	4620      	mov	r0, r4
 8001212:	f000 ffc3 	bl	800219c <HAL_TIM_PWM_Init>
 8001216:	b108      	cbz	r0, 800121c <main+0x110>
 8001218:	b672      	cpsid	i
    while (1)
 800121a:	e7fe      	b.n	800121a <main+0x10e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2200      	movs	r2, #0
 800121e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001220:	a904      	add	r1, sp, #16
 8001222:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001228:	f001 fb86 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4602      	mov	r2, r0
 800122e:	b108      	cbz	r0, 8001234 <main+0x128>
 8001230:	b672      	cpsid	i
    while (1)
 8001232:	e7fe      	b.n	8001232 <main+0x126>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2100      	movs	r1, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001238:	2060      	movs	r0, #96	@ 0x60
 800123a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800123e:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001240:	a90a      	add	r1, sp, #40	@ 0x28
 8001242:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001244:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001246:	f001 f923 	bl	8002490 <HAL_TIM_PWM_ConfigChannel>
 800124a:	b108      	cbz	r0, 8001250 <main+0x144>
 800124c:	b672      	cpsid	i
    while (1)
 800124e:	e7fe      	b.n	800124e <main+0x142>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001250:	2204      	movs	r2, #4
 8001252:	a90a      	add	r1, sp, #40	@ 0x28
 8001254:	4620      	mov	r0, r4
 8001256:	f001 f91b 	bl	8002490 <HAL_TIM_PWM_ConfigChannel>
 800125a:	b108      	cbz	r0, 8001260 <main+0x154>
 800125c:	b672      	cpsid	i
    while (1)
 800125e:	e7fe      	b.n	800125e <main+0x152>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001260:	2208      	movs	r2, #8
 8001262:	a90a      	add	r1, sp, #40	@ 0x28
 8001264:	4620      	mov	r0, r4
 8001266:	f001 f913 	bl	8002490 <HAL_TIM_PWM_ConfigChannel>
 800126a:	b108      	cbz	r0, 8001270 <main+0x164>
 800126c:	b672      	cpsid	i
    while (1)
 800126e:	e7fe      	b.n	800126e <main+0x162>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001270:	462a      	mov	r2, r5
 8001272:	a90a      	add	r1, sp, #40	@ 0x28
 8001274:	4620      	mov	r0, r4
 8001276:	f001 f90b 	bl	8002490 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4606      	mov	r6, r0
 800127c:	b108      	cbz	r0, 8001282 <main+0x176>
 800127e:	b672      	cpsid	i
    while (1)
 8001280:	e7fe      	b.n	8001280 <main+0x174>
  HAL_TIM_MspPostInit(&htim4);
 8001282:	4620      	mov	r0, r4
 8001284:	f000 f880 	bl	8001388 <HAL_TIM_MspPostInit>
    printf("\n\n\n\n-------------\nStarting pwm2\n");
 8001288:	481c      	ldr	r0, [pc, #112]	@ (80012fc <main+0x1f0>)
 800128a:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 800130c <main+0x200>
 800128e:	4f1c      	ldr	r7, [pc, #112]	@ (8001300 <main+0x1f4>)
 8001290:	f001 fdd6 	bl	8002e40 <puts>
    printf("Starting timer channels\n");
 8001294:	481b      	ldr	r0, [pc, #108]	@ (8001304 <main+0x1f8>)
 8001296:	f001 fdd3 	bl	8002e40 <puts>
    HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800129a:	4631      	mov	r1, r6
 800129c:	4620      	mov	r0, r4
 800129e:	f001 f87d 	bl	800239c <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80012a2:	2104      	movs	r1, #4
 80012a4:	4620      	mov	r0, r4
 80012a6:	f001 f811 	bl	80022cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012aa:	2108      	movs	r1, #8
 80012ac:	4620      	mov	r0, r4
 80012ae:	f001 f80d 	bl	80022cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012b2:	4629      	mov	r1, r5
 80012b4:	4620      	mov	r0, r4
 80012b6:	f001 f809 	bl	80022cc <HAL_TIM_PWM_Start>
            printf("Tick %lu (loop = %lu cb = %lu)\n", now / 1000, loop_cnt, cb_cnt);
 80012ba:	4d13      	ldr	r5, [pc, #76]	@ (8001308 <main+0x1fc>)
    uint32_t now = 0, loop_cnt = 0, next_tick = 1000, next_change = 0, next_sample = SAMPLE_DELAY;
 80012bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012c0:	4632      	mov	r2, r6
            printf("Tick %lu (loop = %lu cb = %lu)\n", now / 1000, loop_cnt, cb_cnt);
 80012c2:	460e      	mov	r6, r1
        now = uwTick;
 80012c4:	f8d8 4000 	ldr.w	r4, [r8]
            printf("Tick %lu (loop = %lu cb = %lu)\n", now / 1000, loop_cnt, cb_cnt);
 80012c8:	683b      	ldr	r3, [r7, #0]
        if (now >= next_tick) {
 80012ca:	42a1      	cmp	r1, r4
            printf("Tick %lu (loop = %lu cb = %lu)\n", now / 1000, loop_cnt, cb_cnt);
 80012cc:	4628      	mov	r0, r5
        if (now >= next_tick) {
 80012ce:	d806      	bhi.n	80012de <main+0x1d2>
            printf("Tick %lu (loop = %lu cb = %lu)\n", now / 1000, loop_cnt, cb_cnt);
 80012d0:	fbb4 f1f6 	udiv	r1, r4, r6
 80012d4:	f001 fd4c 	bl	8002d70 <iprintf>
            next_tick = now + 1000;
 80012d8:	f504 717a 	add.w	r1, r4, #1000	@ 0x3e8
            loop_cnt = 0;
 80012dc:	2200      	movs	r2, #0
        ++loop_cnt;
 80012de:	3201      	adds	r2, #1
        now = uwTick;
 80012e0:	e7f0      	b.n	80012c4 <main+0x1b8>
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020800 	.word	0x40020800
 80012ec:	200000b8 	.word	0x200000b8
 80012f0:	40011000 	.word	0x40011000
 80012f4:	20000100 	.word	0x20000100
 80012f8:	40000800 	.word	0x40000800
 80012fc:	08004b68 	.word	0x08004b68
 8001300:	200000b4 	.word	0x200000b4
 8001304:	08004b88 	.word	0x08004b88
 8001308:	08004ba0 	.word	0x08004ba0
 800130c:	2000014c 	.word	0x2000014c

08001310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_MspInit+0x34>)
 8001314:	2100      	movs	r1, #0
 8001316:	9100      	str	r1, [sp, #0]
 8001318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800131a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800131e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001322:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	9101      	str	r1, [sp, #4]
 800132c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800132e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	b002      	add	sp, #8
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_TIM_Base_MspInit+0x3c>)
 800134a:	6802      	ldr	r2, [r0, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d000      	beq.n	8001352 <HAL_TIM_Base_MspInit+0xa>
 8001350:	4770      	bx	lr
{
 8001352:	b500      	push	{lr}
 8001354:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	2200      	movs	r2, #0
 8001358:	f503 330c 	add.w	r3, r3, #143360	@ 0x23000
 800135c:	9201      	str	r2, [sp, #4]
 800135e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001360:	f041 0104 	orr.w	r1, r1, #4
 8001364:	6419      	str	r1, [r3, #64]	@ 0x40
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800136e:	4611      	mov	r1, r2
 8001370:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001372:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001374:	f000 f960 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001378:	201e      	movs	r0, #30

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800137a:	b003      	add	sp, #12
 800137c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001380:	f000 b996 	b.w	80016b0 <HAL_NVIC_EnableIRQ>
 8001384:	40000800 	.word	0x40000800

08001388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001388:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 800138a:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <HAL_TIM_MspPostInit+0x58>)
 800138c:	6801      	ldr	r1, [r0, #0]
{
 800138e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 8001392:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001398:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800139c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 800139e:	d002      	beq.n	80013a6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013a0:	b009      	add	sp, #36	@ 0x24
 80013a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	f502 320c 	add.w	r2, r2, #143360	@ 0x23000
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013b8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80013d8 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013c6:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f000 f997 	bl	8001700 <HAL_GPIO_Init>
}
 80013d2:	b009      	add	sp, #36	@ 0x24
 80013d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013d8:	000003c0 	.word	0x000003c0
 80013dc:	00000002 	.word	0x00000002
 80013e0:	40000800 	.word	0x40000800
 80013e4:	40020400 	.word	0x40020400

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80013ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <HAL_UART_MspInit+0x70>)
 80013ec:	6801      	ldr	r1, [r0, #0]
{
 80013ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80013f2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80013f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80013fc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80013fe:	d001      	beq.n	8001404 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001400:	b008      	add	sp, #32
 8001402:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001404:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800140c:	f040 0010 	orr.w	r0, r0, #16
 8001410:	6450      	str	r0, [r2, #68]	@ 0x44
 8001412:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8001414:	f000 0010 	and.w	r0, r0, #16
 8001418:	9000      	str	r0, [sp, #0]
 800141a:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	480e      	ldr	r0, [pc, #56]	@ (800145c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6313      	str	r3, [r2, #48]	@ 0x30
 8001428:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800142a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8001450 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2203      	movs	r2, #3
 8001436:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143a:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f000 f95c 	bl	8001700 <HAL_GPIO_Init>
}
 8001448:	b008      	add	sp, #32
 800144a:	bd10      	pop	{r4, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	00000600 	.word	0x00000600
 8001454:	00000002 	.word	0x00000002
 8001458:	40011000 	.word	0x40011000
 800145c:	40020000 	.word	0x40020000

08001460 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler>
 8001462:	bf00      	nop

08001464 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <HardFault_Handler>
 8001466:	bf00      	nop

08001468 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler>
 800146a:	bf00      	nop

0800146c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <BusFault_Handler>
 800146e:	bf00      	nop

08001470 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler>
 8001472:	bf00      	nop

08001474 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 b8b6 	b.w	80015f0 <HAL_IncTick>

08001484 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001484:	4801      	ldr	r0, [pc, #4]	@ (800148c <TIM4_IRQHandler+0x8>)
 8001486:	f001 b9bb 	b.w	8002800 <HAL_TIM_IRQHandler>
 800148a:	bf00      	nop
 800148c:	20000100 	.word	0x20000100

08001490 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	1e16      	subs	r6, r2, #0
 8001494:	dd07      	ble.n	80014a6 <_read+0x16>
 8001496:	460c      	mov	r4, r1
 8001498:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800149a:	f3af 8000 	nop.w
 800149e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	42a5      	cmp	r5, r4
 80014a4:	d1f9      	bne.n	800149a <_read+0xa>
  }

  return len;
}
 80014a6:	4630      	mov	r0, r6
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	bf00      	nop

080014ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop

080014b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80014b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80014ba:	2000      	movs	r0, #0
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80014c4:	2000      	movs	r0, #0
 80014c6:	4770      	bx	lr

080014c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	490c      	ldr	r1, [pc, #48]	@ (80014fc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80014cc:	680b      	ldr	r3, [r1, #0]
{
 80014ce:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4c0c      	ldr	r4, [pc, #48]	@ (8001504 <_sbrk+0x3c>)
 80014d2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80014d4:	b12b      	cbz	r3, 80014e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4418      	add	r0, r3
 80014d8:	4290      	cmp	r0, r2
 80014da:	d807      	bhi.n	80014ec <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014dc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <_sbrk+0x40>)
 80014e4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4418      	add	r0, r3
 80014e8:	4290      	cmp	r0, r2
 80014ea:	d9f7      	bls.n	80014dc <_sbrk+0x14>
    errno = ENOMEM;
 80014ec:	f001 fdd6 	bl	800309c <__errno>
 80014f0:	230c      	movs	r3, #12
 80014f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd10      	pop	{r4, pc}
 80014fc:	20000148 	.word	0x20000148
 8001500:	20020000 	.word	0x20020000
 8001504:	00000400 	.word	0x00000400
 8001508:	200002a0 	.word	0x200002a0

0800150c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4a03      	ldr	r2, [pc, #12]	@ (800151c <SystemInit+0x10>)
 800150e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001516:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001558 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001524:	f7ff fff2 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	@ (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800154e:	f001 fdab 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fddb 	bl	800110c <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001564:	08004df8 	.word	0x08004df8
  ldr r2, =_sbss
 8001568:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800156c:	2000029c 	.word	0x2000029c

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001576:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_InitTick+0x3c>)
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_InitTick+0x40>)
 800157a:	7812      	ldrb	r2, [r2, #0]
{
 800157c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001584:	fbb3 f3f2 	udiv	r3, r3, r2
 8001588:	fbb0 f0f3 	udiv	r0, r0, r3
 800158c:	f000 f89e 	bl	80016cc <HAL_SYSTICK_Config>
 8001590:	b908      	cbnz	r0, 8001596 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	2d0f      	cmp	r5, #15
 8001594:	d901      	bls.n	800159a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001598:	bd38      	pop	{r3, r4, r5, pc}
 800159a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	4602      	mov	r2, r0
 800159e:	4629      	mov	r1, r5
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a4:	f000 f848 	bl	8001638 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_InitTick+0x44>)
 80015aa:	4620      	mov	r0, r4
 80015ac:	601d      	str	r5, [r3, #0]
}
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
 80015b0:	20000024 	.word	0x20000024
 80015b4:	20000020 	.word	0x20000020
 80015b8:	20000028 	.word	0x20000028

080015bc <HAL_Init>:
{
 80015bc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_Init+0x30>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015d6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f81b 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f7ff ffc8 	bl	8001574 <HAL_InitTick>
  HAL_MspInit();
 80015e4:	f7ff fe94 	bl	8001310 <HAL_MspInit>
}
 80015e8:	2000      	movs	r0, #0
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015f0:	4a03      	ldr	r2, [pc, #12]	@ (8001600 <HAL_IncTick+0x10>)
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <HAL_IncTick+0x14>)
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	440b      	add	r3, r1
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000014c 	.word	0x2000014c
 8001604:	20000024 	.word	0x20000024

08001608 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001608:	4b01      	ldr	r3, [pc, #4]	@ (8001610 <HAL_GetTick+0x8>)
 800160a:	6818      	ldr	r0, [r3, #0]
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2000014c 	.word	0x2000014c

08001614 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4907      	ldr	r1, [pc, #28]	@ (8001634 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001616:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001626:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800162a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800162e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_NVIC_SetPriority+0x70>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001640:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001642:	f1c3 0e07 	rsb	lr, r3, #7
 8001646:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164e:	bf28      	it	cs
 8001650:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001654:	f1bc 0f06 	cmp.w	ip, #6
 8001658:	d91c      	bls.n	8001694 <HAL_NVIC_SetPriority+0x5c>
 800165a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001662:	fa03 f30c 	lsl.w	r3, r3, ip
 8001666:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800166e:	fa03 f30e 	lsl.w	r3, r3, lr
 8001672:	ea21 0303 	bic.w	r3, r1, r3
 8001676:	fa03 f30c 	lsl.w	r3, r3, ip
 800167a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800167e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001682:	db0a      	blt.n	800169a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001688:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800168c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001690:	f85d fb04 	ldr.w	pc, [sp], #4
 8001694:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	4694      	mov	ip, r2
 8001698:	e7e7      	b.n	800166a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_NVIC_SetPriority+0x74>)
 800169c:	f000 000f 	and.w	r0, r0, #15
 80016a0:	4402      	add	r2, r0
 80016a2:	7613      	strb	r3, [r2, #24]
 80016a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	e000ecfc 	.word	0xe000ecfc

080016b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016b0:	2800      	cmp	r0, #0
 80016b2:	db07      	blt.n	80016c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <HAL_NVIC_EnableIRQ+0x18>)
 80016b6:	0941      	lsrs	r1, r0, #5
 80016b8:	2301      	movs	r3, #1
 80016ba:	f000 001f 	and.w	r0, r0, #31
 80016be:	4083      	lsls	r3, r0
 80016c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	3801      	subs	r0, #1
 80016ce:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80016d2:	d301      	bcc.n	80016d8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016d6:	4770      	bx	lr
{
 80016d8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	4c07      	ldr	r4, [pc, #28]	@ (80016fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80016e6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ea:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ec:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ee:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	6119      	str	r1, [r3, #16]
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001704:	4aa4      	ldr	r2, [pc, #656]	@ (8001998 <HAL_GPIO_Init+0x298>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	680b      	ldr	r3, [r1, #0]
 8001708:	4290      	cmp	r0, r2
{
 800170a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f000 80d4 	beq.w	80018bc <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001714:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 80019a8 <HAL_GPIO_Init+0x2a8>
    ioposition = 0x01U << position;
 8001718:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	468a      	mov	sl, r1
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x28>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001720:	3201      	adds	r2, #1
 8001722:	2a10      	cmp	r2, #16
 8001724:	f000 809e 	beq.w	8001864 <HAL_GPIO_Init+0x164>
    ioposition = 0x01U << position;
 8001728:	fa0b f102 	lsl.w	r1, fp, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172c:	ea01 0603 	and.w	r6, r1, r3
    if(iocurrent == ioposition)
 8001730:	4399      	bics	r1, r3
 8001732:	d1f5      	bne.n	8001720 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001734:	f8da 4004 	ldr.w	r4, [sl, #4]
 8001738:	f004 0c03 	and.w	ip, r4, #3
 800173c:	0051      	lsls	r1, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173e:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001740:	f10c 37ff 	add.w	r7, ip, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001748:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174c:	d950      	bls.n	80017f0 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174e:	f1bc 0f03 	cmp.w	ip, #3
 8001752:	f040 81a5 	bne.w	8001aa0 <HAL_GPIO_Init+0x3a0>
      temp = GPIOx->MODER;
 8001756:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001758:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175e:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001760:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001764:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001766:	d0db      	beq.n	8001720 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001768:	4d8c      	ldr	r5, [pc, #560]	@ (800199c <HAL_GPIO_Init+0x29c>)
 800176a:	2100      	movs	r1, #0
 800176c:	9103      	str	r1, [sp, #12]
 800176e:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8001770:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001774:	6469      	str	r1, [r5, #68]	@ 0x44
 8001776:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8001778:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800177c:	9103      	str	r1, [sp, #12]
 800177e:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001780:	f022 0103 	bic.w	r1, r2, #3
 8001784:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8001788:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001790:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001792:	00bf      	lsls	r7, r7, #2
 8001794:	f04f 0c0f 	mov.w	ip, #15
 8001798:	fa0c fc07 	lsl.w	ip, ip, r7
 800179c:	ea25 0e0c 	bic.w	lr, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a0:	4d7f      	ldr	r5, [pc, #508]	@ (80019a0 <HAL_GPIO_Init+0x2a0>)
 80017a2:	42a8      	cmp	r0, r5
 80017a4:	d061      	beq.n	800186a <HAL_GPIO_Init+0x16a>
 80017a6:	4d7f      	ldr	r5, [pc, #508]	@ (80019a4 <HAL_GPIO_Init+0x2a4>)
 80017a8:	42a8      	cmp	r0, r5
 80017aa:	f000 8156 	beq.w	8001a5a <HAL_GPIO_Init+0x35a>
 80017ae:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 80019ac <HAL_GPIO_Init+0x2ac>
 80017b2:	4560      	cmp	r0, ip
 80017b4:	f000 8158 	beq.w	8001a68 <HAL_GPIO_Init+0x368>
 80017b8:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 80019b0 <HAL_GPIO_Init+0x2b0>
 80017bc:	4560      	cmp	r0, ip
 80017be:	f000 8161 	beq.w	8001a84 <HAL_GPIO_Init+0x384>
 80017c2:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 80019b4 <HAL_GPIO_Init+0x2b4>
 80017c6:	4560      	cmp	r0, ip
 80017c8:	f000 8163 	beq.w	8001a92 <HAL_GPIO_Init+0x392>
 80017cc:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 80019b8 <HAL_GPIO_Init+0x2b8>
 80017d0:	4560      	cmp	r0, ip
 80017d2:	f000 8150 	beq.w	8001a76 <HAL_GPIO_Init+0x376>
 80017d6:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 80019bc <HAL_GPIO_Init+0x2bc>
 80017da:	4560      	cmp	r0, ip
 80017dc:	bf0c      	ite	eq
 80017de:	f04f 0c07 	moveq.w	ip, #7
 80017e2:	f04f 0c08 	movne.w	ip, #8
 80017e6:	fa0c f707 	lsl.w	r7, ip, r7
 80017ea:	ea4e 0507 	orr.w	r5, lr, r7
 80017ee:	e042      	b.n	8001876 <HAL_GPIO_Init+0x176>
        temp = GPIOx->OSPEEDR; 
 80017f0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f6:	f8da 700c 	ldr.w	r7, [sl, #12]
 80017fa:	408f      	lsls	r7, r1
 80017fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001800:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001802:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001808:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800180c:	4097      	lsls	r7, r2
 800180e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001812:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001814:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181a:	f8da 7008 	ldr.w	r7, [sl, #8]
 800181e:	408f      	lsls	r7, r1
 8001820:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001824:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8001828:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	d194      	bne.n	8001756 <HAL_GPIO_Init+0x56>
        temp = GPIOx->AFR[position >> 3U];
 800182c:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001830:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001834:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8001838:	f8d9 7020 	ldr.w	r7, [r9, #32]
 800183c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183e:	f8da 7010 	ldr.w	r7, [sl, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001842:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001846:	fa07 f70e 	lsl.w	r7, r7, lr
 800184a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184c:	270f      	movs	r7, #15
 800184e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001852:	9f00      	ldr	r7, [sp, #0]
 8001854:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001858:	9f01      	ldr	r7, [sp, #4]
 800185a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	f8c9 7020 	str.w	r7, [r9, #32]
 8001862:	e778      	b.n	8001756 <HAL_GPIO_Init+0x56>
        }
        EXTI->IMR = temp;
      }
    }
  }
}
 8001864:	b005      	add	sp, #20
 8001866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186a:	f04f 0c01 	mov.w	ip, #1
 800186e:	fa0c f707 	lsl.w	r7, ip, r7
 8001872:	ea4e 0507 	orr.w	r5, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001876:	608d      	str	r5, [r1, #8]
        temp = EXTI->RTSR;
 8001878:	f8d8 1008 	ldr.w	r1, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 800187c:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187e:	02e7      	lsls	r7, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001880:	bf54      	ite	pl
 8001882:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8001884:	4331      	orrmi	r1, r6
        EXTI->RTSR = temp;
 8001886:	f8c8 1008 	str.w	r1, [r8, #8]
        temp = EXTI->FTSR;
 800188a:	f8d8 100c 	ldr.w	r1, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188e:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001890:	bf54      	ite	pl
 8001892:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8001894:	4331      	orrmi	r1, r6
        EXTI->FTSR = temp;
 8001896:	f8c8 100c 	str.w	r1, [r8, #12]
        temp = EXTI->EMR;
 800189a:	f8d8 1004 	ldr.w	r1, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189e:	03a7      	lsls	r7, r4, #14
        temp &= ~((uint32_t)iocurrent);
 80018a0:	bf54      	ite	pl
 80018a2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80018a4:	4331      	orrmi	r1, r6
        EXTI->EMR = temp;
 80018a6:	f8c8 1004 	str.w	r1, [r8, #4]
        temp = EXTI->IMR;
 80018aa:	f8d8 1000 	ldr.w	r1, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ae:	03e4      	lsls	r4, r4, #15
        temp &= ~((uint32_t)iocurrent);
 80018b0:	bf54      	ite	pl
 80018b2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80018b4:	4331      	orrmi	r1, r6
        EXTI->IMR = temp;
 80018b6:	f8c8 1000 	str.w	r1, [r8]
 80018ba:	e731      	b.n	8001720 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018bc:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 800199c <HAL_GPIO_Init+0x29c>
    ioposition = 0x01U << position;
 80018c0:	f04f 0a01 	mov.w	sl, #1
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x1cc>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	3201      	adds	r2, #1
 80018c8:	2a10      	cmp	r2, #16
 80018ca:	d0cb      	beq.n	8001864 <HAL_GPIO_Init+0x164>
    ioposition = 0x01U << position;
 80018cc:	fa0a f402 	lsl.w	r4, sl, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d0:	ea03 0604 	and.w	r6, r3, r4
    if(iocurrent == ioposition)
 80018d4:	439c      	bics	r4, r3
 80018d6:	d1f6      	bne.n	80018c6 <HAL_GPIO_Init+0x1c6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d8:	684d      	ldr	r5, [r1, #4]
 80018da:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	2703      	movs	r7, #3
 80018de:	fa07 fc04 	lsl.w	ip, r7, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	f005 0803 	and.w	r8, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e6:	ea6f 090c 	mvn.w	r9, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80018ee:	f1bc 0f01 	cmp.w	ip, #1
 80018f2:	d965      	bls.n	80019c0 <HAL_GPIO_Init+0x2c0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f4:	f1b8 0f03 	cmp.w	r8, #3
 80018f8:	f040 80dc 	bne.w	8001ab4 <HAL_GPIO_Init+0x3b4>
      temp = GPIOx->MODER;
 80018fc:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	fa08 f404 	lsl.w	r4, r8, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001904:	ea0c 0c09 	and.w	ip, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001908:	ea44 040c 	orr.w	r4, r4, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001910:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001912:	d0d8      	beq.n	80018c6 <HAL_GPIO_Init+0x1c6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	2400      	movs	r4, #0
 8001916:	9403      	str	r4, [sp, #12]
 8001918:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 800191c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001920:	f8cb 4044 	str.w	r4, [fp, #68]	@ 0x44
 8001924:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 8001928:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800192c:	9403      	str	r4, [sp, #12]
 800192e:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001930:	f022 0403 	bic.w	r4, r2, #3
 8001934:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8001938:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800193c:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001940:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	270f      	movs	r7, #15
 8001946:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800194a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800194e:	ea2e 0c0c 	bic.w	ip, lr, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001952:	f8c4 c008 	str.w	ip, [r4, #8]
        temp = EXTI->RTSR;
 8001956:	4c14      	ldr	r4, [pc, #80]	@ (80019a8 <HAL_GPIO_Init+0x2a8>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001958:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR;
 800195a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800195c:	ea6f 0c06 	mvn.w	ip, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001960:	d479      	bmi.n	8001a56 <HAL_GPIO_Init+0x356>
        temp &= ~((uint32_t)iocurrent);
 8001962:	ea04 040c 	and.w	r4, r4, ip
        EXTI->RTSR = temp;
 8001966:	4f10      	ldr	r7, [pc, #64]	@ (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001968:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 800196a:	68fc      	ldr	r4, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196c:	02af      	lsls	r7, r5, #10
 800196e:	d470      	bmi.n	8001a52 <HAL_GPIO_Init+0x352>
        temp &= ~((uint32_t)iocurrent);
 8001970:	ea04 040c 	and.w	r4, r4, ip
        EXTI->FTSR = temp;
 8001974:	4f0c      	ldr	r7, [pc, #48]	@ (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001976:	60fc      	str	r4, [r7, #12]
        temp = EXTI->EMR;
 8001978:	687c      	ldr	r4, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197a:	03af      	lsls	r7, r5, #14
 800197c:	d467      	bmi.n	8001a4e <HAL_GPIO_Init+0x34e>
        temp &= ~((uint32_t)iocurrent);
 800197e:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->EMR = temp;
 8001982:	4f09      	ldr	r7, [pc, #36]	@ (80019a8 <HAL_GPIO_Init+0x2a8>)
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001986:	607c      	str	r4, [r7, #4]
        temp = EXTI->IMR;
 8001988:	683c      	ldr	r4, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198a:	d45e      	bmi.n	8001a4a <HAL_GPIO_Init+0x34a>
        temp &= ~((uint32_t)iocurrent);
 800198c:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->IMR = temp;
 8001990:	4d05      	ldr	r5, [pc, #20]	@ (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001992:	602c      	str	r4, [r5, #0]
 8001994:	e797      	b.n	80018c6 <HAL_GPIO_Init+0x1c6>
 8001996:	bf00      	nop
 8001998:	40020000 	.word	0x40020000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40013c00 	.word	0x40013c00
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40021c00 	.word	0x40021c00
        temp = GPIOx->OSPEEDR; 
 80019c0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c4:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c6:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ca:	fa07 fc04 	lsl.w	ip, r7, r4
 80019ce:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 80019d2:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 80019d6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019da:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019de:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80019e6:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 80019ea:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 80019ee:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f2:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f4:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f8:	fa07 fc04 	lsl.w	ip, r7, r4
 80019fc:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	f1b8 0f02 	cmp.w	r8, #2
        GPIOx->PUPDR = temp;
 8001a04:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	f47f af78 	bne.w	80018fc <HAL_GPIO_Init+0x1fc>
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 8001a10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a14:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8001a18:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1c:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8001a24:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a26:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a28:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a30:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a32:	270f      	movs	r7, #15
 8001a34:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001a38:	9f00      	ldr	r7, [sp, #0]
 8001a3a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a3e:	9f01      	ldr	r7, [sp, #4]
 8001a40:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a44:	f8cc e020 	str.w	lr, [ip, #32]
 8001a48:	e758      	b.n	80018fc <HAL_GPIO_Init+0x1fc>
          temp |= iocurrent;
 8001a4a:	4334      	orrs	r4, r6
 8001a4c:	e7a0      	b.n	8001990 <HAL_GPIO_Init+0x290>
          temp |= iocurrent;
 8001a4e:	4334      	orrs	r4, r6
 8001a50:	e797      	b.n	8001982 <HAL_GPIO_Init+0x282>
          temp |= iocurrent;
 8001a52:	4334      	orrs	r4, r6
 8001a54:	e78e      	b.n	8001974 <HAL_GPIO_Init+0x274>
          temp |= iocurrent;
 8001a56:	4334      	orrs	r4, r6
 8001a58:	e785      	b.n	8001966 <HAL_GPIO_Init+0x266>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	f04f 0c02 	mov.w	ip, #2
 8001a5e:	fa0c f707 	lsl.w	r7, ip, r7
 8001a62:	ea4e 0507 	orr.w	r5, lr, r7
 8001a66:	e706      	b.n	8001876 <HAL_GPIO_Init+0x176>
 8001a68:	f04f 0c03 	mov.w	ip, #3
 8001a6c:	fa0c f707 	lsl.w	r7, ip, r7
 8001a70:	ea4e 0507 	orr.w	r5, lr, r7
 8001a74:	e6ff      	b.n	8001876 <HAL_GPIO_Init+0x176>
 8001a76:	f04f 0c06 	mov.w	ip, #6
 8001a7a:	fa0c f707 	lsl.w	r7, ip, r7
 8001a7e:	ea4e 0507 	orr.w	r5, lr, r7
 8001a82:	e6f8      	b.n	8001876 <HAL_GPIO_Init+0x176>
 8001a84:	f04f 0c04 	mov.w	ip, #4
 8001a88:	fa0c f707 	lsl.w	r7, ip, r7
 8001a8c:	ea4e 0507 	orr.w	r5, lr, r7
 8001a90:	e6f1      	b.n	8001876 <HAL_GPIO_Init+0x176>
 8001a92:	f04f 0c05 	mov.w	ip, #5
 8001a96:	fa0c f707 	lsl.w	r7, ip, r7
 8001a9a:	ea4e 0507 	orr.w	r5, lr, r7
 8001a9e:	e6ea      	b.n	8001876 <HAL_GPIO_Init+0x176>
        temp = GPIOx->PUPDR;
 8001aa0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	f8da 7008 	ldr.w	r7, [sl, #8]
 8001aaa:	408f      	lsls	r7, r1
 8001aac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001ab0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	e650      	b.n	8001756 <HAL_GPIO_Init+0x56>
        temp = GPIOx->PUPDR;
 8001ab4:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8001ad0 <HAL_GPIO_Init+0x3d0>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	688f      	ldr	r7, [r1, #8]
        temp = GPIOx->PUPDR;
 8001aba:	f8dc e00c 	ldr.w	lr, [ip, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abe:	40a7      	lsls	r7, r4
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac0:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->PUPDR = temp;
 8001ac8:	f8cc e00c 	str.w	lr, [ip, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	e716      	b.n	80018fc <HAL_GPIO_Init+0x1fc>
 8001ace:	bf00      	nop
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad4:	b902      	cbnz	r2, 8001ad8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	0409      	lsls	r1, r1, #16
 8001ad8:	6181      	str	r1, [r0, #24]
  }
}
 8001ada:	4770      	bx	lr

08001adc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	2800      	cmp	r0, #0
 8001ade:	f000 81d8 	beq.w	8001e92 <HAL_RCC_OscConfig+0x3b6>
{
 8001ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	6803      	ldr	r3, [r0, #0]
 8001ae8:	07dd      	lsls	r5, r3, #31
{
 8001aea:	b082      	sub	sp, #8
 8001aec:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	d52f      	bpl.n	8001b50 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001af0:	499d      	ldr	r1, [pc, #628]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001af2:	688a      	ldr	r2, [r1, #8]
 8001af4:	f002 020c 	and.w	r2, r2, #12
 8001af8:	2a04      	cmp	r2, #4
 8001afa:	f000 80ec 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afe:	688a      	ldr	r2, [r1, #8]
 8001b00:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b04:	2a08      	cmp	r2, #8
 8001b06:	f000 80e2 	beq.w	8001cce <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0a:	6863      	ldr	r3, [r4, #4]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b10:	f000 80eb 	beq.w	8001cea <HAL_RCC_OscConfig+0x20e>
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b18:	f000 8173 	beq.w	8001e02 <HAL_RCC_OscConfig+0x326>
 8001b1c:	4d92      	ldr	r5, [pc, #584]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001b1e:	682a      	ldr	r2, [r5, #0]
 8001b20:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b24:	602a      	str	r2, [r5, #0]
 8001b26:	682a      	ldr	r2, [r5, #0]
 8001b28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b2c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80e0 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fd68 	bl	8001608 <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fd64 	bl	8001608 <HAL_GetTick>
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	2864      	cmp	r0, #100	@ 0x64
 8001b44:	f200 8100 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	039f      	lsls	r7, r3, #14
 8001b4c:	d4f6      	bmi.n	8001b3c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	079d      	lsls	r5, r3, #30
 8001b52:	d528      	bpl.n	8001ba6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b54:	4a84      	ldr	r2, [pc, #528]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001b56:	6891      	ldr	r1, [r2, #8]
 8001b58:	f011 0f0c 	tst.w	r1, #12
 8001b5c:	f000 809b 	beq.w	8001c96 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b60:	6891      	ldr	r1, [r2, #8]
 8001b62:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b66:	2908      	cmp	r1, #8
 8001b68:	f000 8091 	beq.w	8001c8e <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b6c:	68e3      	ldr	r3, [r4, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 810c 	beq.w	8001d8c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b7d      	ldr	r3, [pc, #500]	@ (8001d6c <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4e7c      	ldr	r6, [pc, #496]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fd44 	bl	8001608 <HAL_GetTick>
 8001b80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fd40 	bl	8001608 <HAL_GetTick>
 8001b88:	1b40      	subs	r0, r0, r5
 8001b8a:	2802      	cmp	r0, #2
 8001b8c:	f200 80dc 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	6833      	ldr	r3, [r6, #0]
 8001b92:	079f      	lsls	r7, r3, #30
 8001b94:	d5f6      	bpl.n	8001b84 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	6833      	ldr	r3, [r6, #0]
 8001b98:	6922      	ldr	r2, [r4, #16]
 8001b9a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001b9e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ba2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	071a      	lsls	r2, r3, #28
 8001ba8:	d45c      	bmi.n	8001c64 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001baa:	075d      	lsls	r5, r3, #29
 8001bac:	d53a      	bpl.n	8001c24 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001bb0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001bb2:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	f040 8088 	bne.w	8001cca <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bce:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4e67      	ldr	r6, [pc, #412]	@ (8001d70 <HAL_RCC_OscConfig+0x294>)
 8001bd2:	6833      	ldr	r3, [r6, #0]
 8001bd4:	05d8      	lsls	r0, r3, #23
 8001bd6:	f140 80a7 	bpl.w	8001d28 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bda:	68a3      	ldr	r3, [r4, #8]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	f000 80b7 	beq.w	8001d50 <HAL_RCC_OscConfig+0x274>
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	f000 811d 	beq.w	8001e22 <HAL_RCC_OscConfig+0x346>
 8001be8:	4e5f      	ldr	r6, [pc, #380]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001bea:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	6732      	str	r2, [r6, #112]	@ 0x70
 8001bf2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 80ad 	bne.w	8001d5a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff fd02 	bl	8001608 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001c08:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0a:	e005      	b.n	8001c18 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fcfc 	bl	8001608 <HAL_GetTick>
 8001c10:	1bc0      	subs	r0, r0, r7
 8001c12:	4540      	cmp	r0, r8
 8001c14:	f200 8098 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001c1a:	079b      	lsls	r3, r3, #30
 8001c1c:	d4f6      	bmi.n	8001c0c <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1e:	2d00      	cmp	r5, #0
 8001c20:	f040 80f9 	bne.w	8001e16 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c24:	69a3      	ldr	r3, [r4, #24]
 8001c26:	b1cb      	cbz	r3, 8001c5c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c28:	4d4f      	ldr	r5, [pc, #316]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001c2a:	68aa      	ldr	r2, [r5, #8]
 8001c2c:	f002 020c 	and.w	r2, r2, #12
 8001c30:	2a08      	cmp	r2, #8
 8001c32:	f000 80bc 	beq.w	8001dae <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c36:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b4c      	ldr	r3, [pc, #304]	@ (8001d6c <HAL_RCC_OscConfig+0x290>)
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	f000 80f9 	beq.w	8001e36 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fce0 	bl	8001608 <HAL_GetTick>
 8001c48:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	e004      	b.n	8001c56 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff fcdc 	bl	8001608 <HAL_GetTick>
 8001c50:	1b00      	subs	r0, r0, r4
 8001c52:	2802      	cmp	r0, #2
 8001c54:	d878      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	d4f7      	bmi.n	8001c4c <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
}
 8001c5e:	b002      	add	sp, #8
 8001c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c64:	6963      	ldr	r3, [r4, #20]
 8001c66:	b1fb      	cbz	r3, 8001ca8 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8001c68:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	4e3f      	ldr	r6, [pc, #252]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001c72:	f7ff fcc9 	bl	8001608 <HAL_GetTick>
 8001c76:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c78:	e004      	b.n	8001c84 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fcc5 	bl	8001608 <HAL_GetTick>
 8001c7e:	1b40      	subs	r0, r0, r5
 8001c80:	2802      	cmp	r0, #2
 8001c82:	d861      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c84:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001c86:	079b      	lsls	r3, r3, #30
 8001c88:	d5f7      	bpl.n	8001c7a <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	e78d      	b.n	8001baa <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	6852      	ldr	r2, [r2, #4]
 8001c90:	0251      	lsls	r1, r2, #9
 8001c92:	f53f af6b 	bmi.w	8001b6c <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4a34      	ldr	r2, [pc, #208]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	0792      	lsls	r2, r2, #30
 8001c9c:	d538      	bpl.n	8001d10 <HAL_RCC_OscConfig+0x234>
 8001c9e:	68e2      	ldr	r2, [r4, #12]
 8001ca0:	2a01      	cmp	r2, #1
 8001ca2:	d035      	beq.n	8001d10 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	e7da      	b.n	8001c5e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8001ca8:	4a30      	ldr	r2, [pc, #192]	@ (8001d6c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	4e2f      	ldr	r6, [pc, #188]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8001cac:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fcaa 	bl	8001608 <HAL_GetTick>
 8001cb4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb6:	e004      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fca6 	bl	8001608 <HAL_GetTick>
 8001cbc:	1b40      	subs	r0, r0, r5
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d842      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001cc4:	079f      	lsls	r7, r3, #30
 8001cc6:	d4f7      	bmi.n	8001cb8 <HAL_RCC_OscConfig+0x1dc>
 8001cc8:	e7df      	b.n	8001c8a <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2500      	movs	r5, #0
 8001ccc:	e780      	b.n	8001bd0 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	684a      	ldr	r2, [r1, #4]
 8001cd0:	0251      	lsls	r1, r2, #9
 8001cd2:	f57f af1a 	bpl.w	8001b0a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd6:	4a24      	ldr	r2, [pc, #144]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	0392      	lsls	r2, r2, #14
 8001cdc:	f57f af38 	bpl.w	8001b50 <HAL_RCC_OscConfig+0x74>
 8001ce0:	6862      	ldr	r2, [r4, #4]
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	f47f af34 	bne.w	8001b50 <HAL_RCC_OscConfig+0x74>
 8001ce8:	e7dc      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fc88 	bl	8001608 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	4e1b      	ldr	r6, [pc, #108]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001cfa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	e004      	b.n	8001d08 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fc83 	bl	8001608 <HAL_GetTick>
 8001d02:	1b40      	subs	r0, r0, r5
 8001d04:	2864      	cmp	r0, #100	@ 0x64
 8001d06:	d81f      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d08:	6833      	ldr	r3, [r6, #0]
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	d5f7      	bpl.n	8001cfe <HAL_RCC_OscConfig+0x222>
 8001d0e:	e71e      	b.n	8001b4e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4915      	ldr	r1, [pc, #84]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001d12:	6920      	ldr	r0, [r4, #16]
 8001d14:	680a      	ldr	r2, [r1, #0]
 8001d16:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001d1a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001d1e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d20:	071a      	lsls	r2, r3, #28
 8001d22:	f57f af42 	bpl.w	8001baa <HAL_RCC_OscConfig+0xce>
 8001d26:	e79d      	b.n	8001c64 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d28:	6833      	ldr	r3, [r6, #0]
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d30:	f7ff fc6a 	bl	8001608 <HAL_GetTick>
 8001d34:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	6833      	ldr	r3, [r6, #0]
 8001d38:	05d9      	lsls	r1, r3, #23
 8001d3a:	f53f af4e 	bmi.w	8001bda <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fc63 	bl	8001608 <HAL_GetTick>
 8001d42:	1bc0      	subs	r0, r0, r7
 8001d44:	2802      	cmp	r0, #2
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001d48:	2003      	movs	r0, #3
}
 8001d4a:	b002      	add	sp, #8
 8001d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
 8001d52:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fc55 	bl	8001608 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	4f02      	ldr	r7, [pc, #8]	@ (8001d68 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001d60:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x2a2>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470000 	.word	0x42470000
 8001d70:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7ff fc48 	bl	8001608 <HAL_GetTick>
 8001d78:	1b80      	subs	r0, r0, r6
 8001d7a:	4540      	cmp	r0, r8
 8001d7c:	d8e4      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d80:	079a      	lsls	r2, r3, #30
 8001d82:	d5f7      	bpl.n	8001d74 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8001d84:	2d00      	cmp	r5, #0
 8001d86:	f43f af4d 	beq.w	8001c24 <HAL_RCC_OscConfig+0x148>
 8001d8a:	e044      	b.n	8001e16 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	4a42      	ldr	r2, [pc, #264]	@ (8001e98 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4e43      	ldr	r6, [pc, #268]	@ (8001e9c <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8001d90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d92:	f7ff fc39 	bl	8001608 <HAL_GetTick>
 8001d96:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d98:	e004      	b.n	8001da4 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fc35 	bl	8001608 <HAL_GetTick>
 8001d9e:	1b40      	subs	r0, r0, r5
 8001da0:	2802      	cmp	r0, #2
 8001da2:	d8d1      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da4:	6833      	ldr	r3, [r6, #0]
 8001da6:	0799      	lsls	r1, r3, #30
 8001da8:	d4f7      	bmi.n	8001d9a <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	e6fb      	b.n	8001ba6 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f43f af78 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8001db4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbc:	4291      	cmp	r1, r2
 8001dbe:	f47f af71 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc4:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc8:	4291      	cmp	r1, r2
 8001dca:	f47f af6b 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001dd0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001dd4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001dda:	f47f af63 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dde:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001de0:	0852      	lsrs	r2, r2, #1
 8001de2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001de6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001dec:	f47f af5a 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001df0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001df2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001dfa:	bf14      	ite	ne
 8001dfc:	2001      	movne	r0, #1
 8001dfe:	2000      	moveq	r0, #0
 8001e00:	e72d      	b.n	8001c5e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <HAL_RCC_OscConfig+0x3c0>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e12:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e14:	e76e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <HAL_RCC_OscConfig+0x3c0>)
 8001e18:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e20:	e700      	b.n	8001c24 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_RCC_OscConfig+0x3c0>)
 8001e24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e26:	f042 0204 	orr.w	r2, r2, #4
 8001e2a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e34:	e791      	b.n	8001d5a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001e36:	f7ff fbe7 	bl	8001608 <HAL_GetTick>
 8001e3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3c:	e005      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff fbe3 	bl	8001608 <HAL_GetTick>
 8001e42:	1b80      	subs	r0, r0, r6
 8001e44:	2802      	cmp	r0, #2
 8001e46:	f63f af7f 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	0199      	lsls	r1, r3, #6
 8001e4e:	d4f6      	bmi.n	8001e3e <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e50:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001e54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e56:	430b      	orrs	r3, r1
 8001e58:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e5c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8001e60:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001e62:	490d      	ldr	r1, [pc, #52]	@ (8001e98 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e64:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e72:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001e74:	f7ff fbc8 	bl	8001608 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	4d08      	ldr	r5, [pc, #32]	@ (8001e9c <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8001e7a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7c:	e005      	b.n	8001e8a <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff fbc3 	bl	8001608 <HAL_GetTick>
 8001e82:	1b00      	subs	r0, r0, r4
 8001e84:	2802      	cmp	r0, #2
 8001e86:	f63f af5f 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	019a      	lsls	r2, r3, #6
 8001e8e:	d5f6      	bpl.n	8001e7e <HAL_RCC_OscConfig+0x3a2>
 8001e90:	e6e4      	b.n	8001c5c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	42470000 	.word	0x42470000
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea0:	4910      	ldr	r1, [pc, #64]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8001ea2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea4:	688b      	ldr	r3, [r1, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eae:	480e      	ldr	r0, [pc, #56]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001eb0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb6:	6849      	ldr	r1, [r1, #4]
 8001eb8:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x48>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eba:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ec2:	bf18      	it	ne
 8001ec4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eca:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ece:	f7fe fdd5 	bl	8000a7c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x44>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001eda:	3301      	adds	r3, #1
 8001edc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001ede:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001ee2:	bd08      	pop	{r3, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	00f42400 	.word	0x00f42400

08001eec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	f000 8087 	beq.w	8002000 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef2:	4a48      	ldr	r2, [pc, #288]	@ (8002014 <HAL_RCC_ClockConfig+0x128>)
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	428b      	cmp	r3, r1
{
 8001efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f00:	460d      	mov	r5, r1
 8001f02:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	d209      	bcs.n	8001f1a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	b2cb      	uxtb	r3, r1
 8001f08:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
}
 8001f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	0798      	lsls	r0, r3, #30
 8001f1e:	d514      	bpl.n	8001f4a <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	0759      	lsls	r1, r3, #29
 8001f22:	d504      	bpl.n	8001f2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	493c      	ldr	r1, [pc, #240]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f26:	688a      	ldr	r2, [r1, #8]
 8001f28:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8001f2c:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	071a      	lsls	r2, r3, #28
 8001f30:	d504      	bpl.n	8001f3c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f32:	4939      	ldr	r1, [pc, #228]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f34:	688a      	ldr	r2, [r1, #8]
 8001f36:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001f3a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4936      	ldr	r1, [pc, #216]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f3e:	68a0      	ldr	r0, [r4, #8]
 8001f40:	688a      	ldr	r2, [r1, #8]
 8001f42:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001f46:	4302      	orrs	r2, r0
 8001f48:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	07df      	lsls	r7, r3, #31
 8001f4c:	d521      	bpl.n	8001f92 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	2a01      	cmp	r2, #1
 8001f52:	d057      	beq.n	8002004 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f54:	1e93      	subs	r3, r2, #2
 8001f56:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5c:	d94d      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	0799      	lsls	r1, r3, #30
 8001f60:	d5d8      	bpl.n	8001f14 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4e2d      	ldr	r6, [pc, #180]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001f64:	68b3      	ldr	r3, [r6, #8]
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f6e:	f7ff fb4b 	bl	8001608 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001f76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f78:	e004      	b.n	8001f84 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7ff fb45 	bl	8001608 <HAL_GetTick>
 8001f7e:	1bc0      	subs	r0, r0, r7
 8001f80:	4540      	cmp	r0, r8
 8001f82:	d844      	bhi.n	800200e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f84:	68b3      	ldr	r3, [r6, #8]
 8001f86:	6862      	ldr	r2, [r4, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f90:	d1f3      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_RCC_ClockConfig+0x128>)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	42ab      	cmp	r3, r5
 8001f9c:	d906      	bls.n	8001fac <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	b2eb      	uxtb	r3, r5
 8001fa0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	42ab      	cmp	r3, r5
 8001faa:	d1b3      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	075a      	lsls	r2, r3, #29
 8001fb0:	d506      	bpl.n	8001fc0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb2:	4919      	ldr	r1, [pc, #100]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	688a      	ldr	r2, [r1, #8]
 8001fb8:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001fbc:	4302      	orrs	r2, r0
 8001fbe:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	071b      	lsls	r3, r3, #28
 8001fc2:	d507      	bpl.n	8001fd4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001fc6:	6921      	ldr	r1, [r4, #16]
 8001fc8:	6893      	ldr	r3, [r2, #8]
 8001fca:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001fce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd4:	f7ff ff64 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8001fda:	4c10      	ldr	r4, [pc, #64]	@ (800201c <HAL_RCC_ClockConfig+0x130>)
 8001fdc:	6892      	ldr	r2, [r2, #8]
 8001fde:	4910      	ldr	r1, [pc, #64]	@ (8002020 <HAL_RCC_ClockConfig+0x134>)
 8001fe0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8001fe8:	480e      	ldr	r0, [pc, #56]	@ (8002024 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8001fec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fee:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001ff0:	f7ff fac0 	bl	8001574 <HAL_InitTick>
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
}
 8001ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	0198      	lsls	r0, r3, #6
 8001ffc:	d4b1      	bmi.n	8001f62 <HAL_RCC_ClockConfig+0x76>
 8001ffe:	e789      	b.n	8001f14 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
}
 8002002:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <HAL_RCC_ClockConfig+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	039e      	lsls	r6, r3, #14
 800200a:	d4aa      	bmi.n	8001f62 <HAL_RCC_ClockConfig+0x76>
 800200c:	e782      	b.n	8001f14 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
 8002010:	e781      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2a>
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00
 8002018:	40023800 	.word	0x40023800
 800201c:	08004bc8 	.word	0x08004bc8
 8002020:	20000020 	.word	0x20000020
 8002024:	20000028 	.word	0x20000028

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800202a:	4905      	ldr	r1, [pc, #20]	@ (8002040 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002030:	6808      	ldr	r0, [r1, #0]
 8002032:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002036:	5cd3      	ldrb	r3, [r2, r3]
}
 8002038:	40d8      	lsrs	r0, r3
 800203a:	4770      	bx	lr
 800203c:	40023800 	.word	0x40023800
 8002040:	20000020 	.word	0x20000020
 8002044:	08004bc0 	.word	0x08004bc0

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800204a:	4905      	ldr	r1, [pc, #20]	@ (8002060 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002050:	6808      	ldr	r0, [r1, #0]
 8002052:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002056:	5cd3      	ldrb	r3, [r2, r3]
}
 8002058:	40d8      	lsrs	r0, r3
 800205a:	4770      	bx	lr
 800205c:	40023800 	.word	0x40023800
 8002060:	20000020 	.word	0x20000020
 8002064:	08004bc0 	.word	0x08004bc0

08002068 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	2800      	cmp	r0, #0
 800206a:	f000 808f 	beq.w	800218c <HAL_TIM_Base_Init+0x124>
{
 800206e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002070:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002074:	4604      	mov	r4, r0
 8002076:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8081 	beq.w	8002182 <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002080:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002082:	4943      	ldr	r1, [pc, #268]	@ (8002190 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800208a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800208c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800208e:	d064      	beq.n	800215a <HAL_TIM_Base_Init+0xf2>
 8002090:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002094:	d030      	beq.n	80020f8 <HAL_TIM_Base_Init+0x90>
 8002096:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 800209a:	428a      	cmp	r2, r1
 800209c:	d02c      	beq.n	80020f8 <HAL_TIM_Base_Init+0x90>
 800209e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80020a2:	428a      	cmp	r2, r1
 80020a4:	d028      	beq.n	80020f8 <HAL_TIM_Base_Init+0x90>
 80020a6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80020aa:	428a      	cmp	r2, r1
 80020ac:	d024      	beq.n	80020f8 <HAL_TIM_Base_Init+0x90>
 80020ae:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80020b2:	428a      	cmp	r2, r1
 80020b4:	d051      	beq.n	800215a <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	4937      	ldr	r1, [pc, #220]	@ (8002194 <HAL_TIM_Base_Init+0x12c>)
 80020b8:	428a      	cmp	r2, r1
 80020ba:	d021      	beq.n	8002100 <HAL_TIM_Base_Init+0x98>
 80020bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80020c0:	428a      	cmp	r2, r1
 80020c2:	d01d      	beq.n	8002100 <HAL_TIM_Base_Init+0x98>
 80020c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80020c8:	428a      	cmp	r2, r1
 80020ca:	d019      	beq.n	8002100 <HAL_TIM_Base_Init+0x98>
 80020cc:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80020d0:	428a      	cmp	r2, r1
 80020d2:	d015      	beq.n	8002100 <HAL_TIM_Base_Init+0x98>
 80020d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80020d8:	428a      	cmp	r2, r1
 80020da:	d011      	beq.n	8002100 <HAL_TIM_Base_Init+0x98>
 80020dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80020e0:	428a      	cmp	r2, r1
 80020e2:	d00d      	beq.n	8002100 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e4:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e6:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020ee:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80020f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020f4:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f6:	e010      	b.n	800211a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80020f8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80020fe:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002100:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002102:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002108:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800210a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800210e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002110:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002112:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002114:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002116:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002118:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211a:	2301      	movs	r3, #1
 800211c:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800211e:	6913      	ldr	r3, [r2, #16]
 8002120:	07db      	lsls	r3, r3, #31
 8002122:	d503      	bpl.n	800212c <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002124:	6913      	ldr	r3, [r2, #16]
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212c:	2301      	movs	r3, #1
 800212e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002132:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002136:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800213a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800213e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002142:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800214a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800214e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002152:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002156:	2000      	movs	r0, #0
}
 8002158:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800215a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002162:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002168:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800216a:	69a1      	ldr	r1, [r4, #24]
 800216c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002170:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002172:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002174:	68e3      	ldr	r3, [r4, #12]
 8002176:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002178:	6863      	ldr	r3, [r4, #4]
 800217a:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800217c:	6963      	ldr	r3, [r4, #20]
 800217e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002180:	e7cb      	b.n	800211a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8002182:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002186:	f7ff f8df 	bl	8001348 <HAL_TIM_Base_MspInit>
 800218a:	e779      	b.n	8002080 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
}
 800218e:	4770      	bx	lr
 8002190:	40010000 	.word	0x40010000
 8002194:	40014000 	.word	0x40014000

08002198 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800219c:	2800      	cmp	r0, #0
 800219e:	f000 808f 	beq.w	80022c0 <HAL_TIM_PWM_Init+0x124>
{
 80021a2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80021a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80021a8:	4604      	mov	r4, r0
 80021aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8081 	beq.w	80022b6 <HAL_TIM_PWM_Init+0x11a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b6:	4943      	ldr	r1, [pc, #268]	@ (80022c4 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	2302      	movs	r3, #2
 80021ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021be:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80021c0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c2:	d064      	beq.n	800228e <HAL_TIM_PWM_Init+0xf2>
 80021c4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80021c8:	d030      	beq.n	800222c <HAL_TIM_PWM_Init+0x90>
 80021ca:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80021ce:	428a      	cmp	r2, r1
 80021d0:	d02c      	beq.n	800222c <HAL_TIM_PWM_Init+0x90>
 80021d2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80021d6:	428a      	cmp	r2, r1
 80021d8:	d028      	beq.n	800222c <HAL_TIM_PWM_Init+0x90>
 80021da:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80021de:	428a      	cmp	r2, r1
 80021e0:	d024      	beq.n	800222c <HAL_TIM_PWM_Init+0x90>
 80021e2:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80021e6:	428a      	cmp	r2, r1
 80021e8:	d051      	beq.n	800228e <HAL_TIM_PWM_Init+0xf2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	4937      	ldr	r1, [pc, #220]	@ (80022c8 <HAL_TIM_PWM_Init+0x12c>)
 80021ec:	428a      	cmp	r2, r1
 80021ee:	d021      	beq.n	8002234 <HAL_TIM_PWM_Init+0x98>
 80021f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80021f4:	428a      	cmp	r2, r1
 80021f6:	d01d      	beq.n	8002234 <HAL_TIM_PWM_Init+0x98>
 80021f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80021fc:	428a      	cmp	r2, r1
 80021fe:	d019      	beq.n	8002234 <HAL_TIM_PWM_Init+0x98>
 8002200:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8002204:	428a      	cmp	r2, r1
 8002206:	d015      	beq.n	8002234 <HAL_TIM_PWM_Init+0x98>
 8002208:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800220c:	428a      	cmp	r2, r1
 800220e:	d011      	beq.n	8002234 <HAL_TIM_PWM_Init+0x98>
 8002210:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002214:	428a      	cmp	r2, r1
 8002216:	d00d      	beq.n	8002234 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 800221a:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002222:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002224:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002226:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002228:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222a:	e010      	b.n	800224e <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 800222c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800222e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002232:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002234:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002236:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002242:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002246:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002248:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800224a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800224c:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800224e:	2301      	movs	r3, #1
 8002250:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002252:	6913      	ldr	r3, [r2, #16]
 8002254:	07db      	lsls	r3, r3, #31
 8002256:	d503      	bpl.n	8002260 <HAL_TIM_PWM_Init+0xc4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002258:	6913      	ldr	r3, [r2, #16]
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002260:	2301      	movs	r3, #1
 8002262:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002266:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800226a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800226e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002272:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002276:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800227a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800227e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002282:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002286:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800228a:	2000      	movs	r0, #0
}
 800228c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800228e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002290:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002296:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800229e:	69a1      	ldr	r1, [r4, #24]
 80022a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022a4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80022a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a8:	68e3      	ldr	r3, [r4, #12]
 80022aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022ac:	6863      	ldr	r3, [r4, #4]
 80022ae:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	6963      	ldr	r3, [r4, #20]
 80022b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b4:	e7cb      	b.n	800224e <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80022b6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80022ba:	f7ff ff6d 	bl	8002198 <HAL_TIM_PWM_MspInit>
 80022be:	e779      	b.n	80021b4 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
}
 80022c2:	4770      	bx	lr
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40014000 	.word	0x40014000

080022cc <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80022cc:	bb69      	cbnz	r1, 800232a <HAL_TIM_PWM_Start+0x5e>
 80022ce:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d135      	bne.n	8002342 <HAL_TIM_PWM_Start+0x76>
 80022d6:	2302      	movs	r3, #2
 80022d8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 80022dc:	6803      	ldr	r3, [r0, #0]
 80022de:	f001 011f 	and.w	r1, r1, #31
 80022e2:	6a18      	ldr	r0, [r3, #32]
 80022e4:	2201      	movs	r2, #1
 80022e6:	408a      	lsls	r2, r1
 80022e8:	ea20 0002 	bic.w	r0, r0, r2
 80022ec:	6218      	str	r0, [r3, #32]
 80022ee:	6a18      	ldr	r0, [r3, #32]
 80022f0:	4925      	ldr	r1, [pc, #148]	@ (8002388 <HAL_TIM_PWM_Start+0xbc>)
 80022f2:	4302      	orrs	r2, r0
 80022f4:	428b      	cmp	r3, r1
 80022f6:	621a      	str	r2, [r3, #32]
 80022f8:	d025      	beq.n	8002346 <HAL_TIM_PWM_Start+0x7a>
 80022fa:	4a24      	ldr	r2, [pc, #144]	@ (800238c <HAL_TIM_PWM_Start+0xc0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_TIM_PWM_Start+0x7a>
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002304:	d006      	beq.n	8002314 <HAL_TIM_PWM_Start+0x48>
 8002306:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <HAL_TIM_PWM_Start+0xc4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <HAL_TIM_PWM_Start+0x48>
 800230c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002310:	4293      	cmp	r3, r2
 8002312:	d12d      	bne.n	8002370 <HAL_TIM_PWM_Start+0xa4>
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	f002 0207 	and.w	r2, r2, #7
 800231a:	2a06      	cmp	r2, #6
 800231c:	d003      	beq.n	8002326 <HAL_TIM_PWM_Start+0x5a>
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	2000      	movs	r0, #0
 8002328:	4770      	bx	lr
 800232a:	2904      	cmp	r1, #4
 800232c:	d010      	beq.n	8002350 <HAL_TIM_PWM_Start+0x84>
 800232e:	2908      	cmp	r1, #8
 8002330:	d016      	beq.n	8002360 <HAL_TIM_PWM_Start+0x94>
 8002332:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002336:	2b01      	cmp	r3, #1
 8002338:	d103      	bne.n	8002342 <HAL_TIM_PWM_Start+0x76>
 800233a:	2302      	movs	r3, #2
 800233c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8002340:	e7cc      	b.n	80022dc <HAL_TIM_PWM_Start+0x10>
 8002342:	2001      	movs	r0, #1
 8002344:	4770      	bx	lr
 8002346:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002348:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
 800234e:	e7e1      	b.n	8002314 <HAL_TIM_PWM_Start+0x48>
 8002350:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8002354:	2b01      	cmp	r3, #1
 8002356:	d1f4      	bne.n	8002342 <HAL_TIM_PWM_Start+0x76>
 8002358:	2302      	movs	r3, #2
 800235a:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800235e:	e7bd      	b.n	80022dc <HAL_TIM_PWM_Start+0x10>
 8002360:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002364:	2b01      	cmp	r3, #1
 8002366:	d1ec      	bne.n	8002342 <HAL_TIM_PWM_Start+0x76>
 8002368:	2302      	movs	r3, #2
 800236a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800236e:	e7b5      	b.n	80022dc <HAL_TIM_PWM_Start+0x10>
 8002370:	4a08      	ldr	r2, [pc, #32]	@ (8002394 <HAL_TIM_PWM_Start+0xc8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d0ce      	beq.n	8002314 <HAL_TIM_PWM_Start+0x48>
 8002376:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <HAL_TIM_PWM_Start+0xcc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d0cb      	beq.n	8002314 <HAL_TIM_PWM_Start+0x48>
 800237c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002380:	4293      	cmp	r3, r2
 8002382:	d1cc      	bne.n	800231e <HAL_TIM_PWM_Start+0x52>
 8002384:	e7c6      	b.n	8002314 <HAL_TIM_PWM_Start+0x48>
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	40010400 	.word	0x40010400
 8002390:	40000400 	.word	0x40000400
 8002394:	40000c00 	.word	0x40000c00
 8002398:	40014000 	.word	0x40014000

0800239c <HAL_TIM_PWM_Start_IT>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 800239c:	bb79      	cbnz	r1, 80023fe <HAL_TIM_PWM_Start_IT+0x62>
 800239e:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d138      	bne.n	8002418 <HAL_TIM_PWM_Start_IT+0x7c>
 80023a6:	6803      	ldr	r3, [r0, #0]
 80023a8:	2202      	movs	r2, #2
 80023aa:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	f042 0202 	orr.w	r2, r2, #2
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	6a18      	ldr	r0, [r3, #32]
 80023b8:	2201      	movs	r2, #1
 80023ba:	408a      	lsls	r2, r1
 80023bc:	ea20 0002 	bic.w	r0, r0, r2
 80023c0:	6218      	str	r0, [r3, #32]
 80023c2:	6a18      	ldr	r0, [r3, #32]
 80023c4:	492d      	ldr	r1, [pc, #180]	@ (800247c <HAL_TIM_PWM_Start_IT+0xe0>)
 80023c6:	4302      	orrs	r2, r0
 80023c8:	428b      	cmp	r3, r1
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	d026      	beq.n	800241c <HAL_TIM_PWM_Start_IT+0x80>
 80023ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <HAL_TIM_PWM_Start_IT+0xe4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d023      	beq.n	800241c <HAL_TIM_PWM_Start_IT+0x80>
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d8:	d006      	beq.n	80023e8 <HAL_TIM_PWM_Start_IT+0x4c>
 80023da:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_TIM_PWM_Start_IT+0xe8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <HAL_TIM_PWM_Start_IT+0x4c>
 80023e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d13e      	bne.n	8002466 <HAL_TIM_PWM_Start_IT+0xca>
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	f002 0207 	and.w	r2, r2, #7
 80023ee:	2a06      	cmp	r2, #6
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_PWM_Start_IT+0x5e>
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	2000      	movs	r0, #0
 80023fc:	4770      	bx	lr
 80023fe:	2904      	cmp	r1, #4
 8002400:	d011      	beq.n	8002426 <HAL_TIM_PWM_Start_IT+0x8a>
 8002402:	2908      	cmp	r1, #8
 8002404:	d01c      	beq.n	8002440 <HAL_TIM_PWM_Start_IT+0xa4>
 8002406:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800240a:	2b01      	cmp	r3, #1
 800240c:	d104      	bne.n	8002418 <HAL_TIM_PWM_Start_IT+0x7c>
 800240e:	2302      	movs	r3, #2
 8002410:	290c      	cmp	r1, #12
 8002412:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8002416:	d020      	beq.n	800245a <HAL_TIM_PWM_Start_IT+0xbe>
 8002418:	2001      	movs	r0, #1
 800241a:	4770      	bx	lr
 800241c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800241e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002422:	645a      	str	r2, [r3, #68]	@ 0x44
 8002424:	e7e0      	b.n	80023e8 <HAL_TIM_PWM_Start_IT+0x4c>
 8002426:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800242a:	2b01      	cmp	r3, #1
 800242c:	d1f4      	bne.n	8002418 <HAL_TIM_PWM_Start_IT+0x7c>
 800242e:	6803      	ldr	r3, [r0, #0]
 8002430:	2202      	movs	r2, #2
 8002432:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	f042 0204 	orr.w	r2, r2, #4
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	e7ba      	b.n	80023b6 <HAL_TIM_PWM_Start_IT+0x1a>
 8002440:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002444:	2b01      	cmp	r3, #1
 8002446:	d1e7      	bne.n	8002418 <HAL_TIM_PWM_Start_IT+0x7c>
 8002448:	6803      	ldr	r3, [r0, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	e7ad      	b.n	80023b6 <HAL_TIM_PWM_Start_IT+0x1a>
 800245a:	6803      	ldr	r3, [r0, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	f042 0210 	orr.w	r2, r2, #16
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	e7a7      	b.n	80023b6 <HAL_TIM_PWM_Start_IT+0x1a>
 8002466:	4a08      	ldr	r2, [pc, #32]	@ (8002488 <HAL_TIM_PWM_Start_IT+0xec>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d0bd      	beq.n	80023e8 <HAL_TIM_PWM_Start_IT+0x4c>
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <HAL_TIM_PWM_Start_IT+0xf0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d0ba      	beq.n	80023e8 <HAL_TIM_PWM_Start_IT+0x4c>
 8002472:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002476:	4293      	cmp	r3, r2
 8002478:	d1bb      	bne.n	80023f2 <HAL_TIM_PWM_Start_IT+0x56>
 800247a:	e7b5      	b.n	80023e8 <HAL_TIM_PWM_Start_IT+0x4c>
 800247c:	40010000 	.word	0x40010000
 8002480:	40010400 	.word	0x40010400
 8002484:	40000400 	.word	0x40000400
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40014000 	.word	0x40014000

08002490 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002490:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	f000 80c7 	beq.w	8002628 <HAL_TIM_PWM_ConfigChannel+0x198>
 800249a:	2301      	movs	r3, #1
{
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 80024a0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80024a4:	2a0c      	cmp	r2, #12
 80024a6:	d808      	bhi.n	80024ba <HAL_TIM_PWM_ConfigChannel+0x2a>
 80024a8:	e8df f002 	tbb	[pc, r2]
 80024ac:	0707073e 	.word	0x0707073e
 80024b0:	07070768 	.word	0x07070768
 80024b4:	07070794 	.word	0x07070794
 80024b8:	0c          	.byte	0x0c
 80024b9:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80024ba:	2300      	movs	r3, #0
 80024bc:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 80024c0:	2001      	movs	r0, #1
}
 80024c2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024c4:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c6:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80024c8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ca:	6a18      	ldr	r0, [r3, #32]
 80024cc:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80024d0:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80024d2:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80024d4:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024d6:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024da:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024de:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80024e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024e4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e8:	4d6b      	ldr	r5, [pc, #428]	@ (8002698 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80024ea:	42ab      	cmp	r3, r5
 80024ec:	f000 80ae 	beq.w	800264c <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80024f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80024f4:	42ab      	cmp	r3, r5
 80024f6:	f000 80a9 	beq.w	800264c <HAL_TIM_PWM_ConfigChannel+0x1bc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fa:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024fc:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024fe:	6848      	ldr	r0, [r1, #4]
 8002500:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002502:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002504:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002506:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800250c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800251c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800251e:	2300      	movs	r3, #0
 8002520:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2000      	movs	r0, #0
}
 8002526:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002528:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800252a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800252c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800252e:	6a18      	ldr	r0, [r3, #32]
 8002530:	f020 0001 	bic.w	r0, r0, #1
 8002534:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002536:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002538:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800253a:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800253e:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8002540:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002542:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8002546:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002548:	4d53      	ldr	r5, [pc, #332]	@ (8002698 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800254a:	42ab      	cmp	r3, r5
 800254c:	f000 8084 	beq.w	8002658 <HAL_TIM_PWM_ConfigChannel+0x1c8>
 8002550:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002554:	42ab      	cmp	r3, r5
 8002556:	d07f      	beq.n	8002658 <HAL_TIM_PWM_ConfigChannel+0x1c8>
  TIMx->CR2 = tmpcr2;
 8002558:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800255a:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800255c:	6848      	ldr	r0, [r1, #4]
 800255e:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8002560:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002562:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002564:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002566:	f042 0208 	orr.w	r2, r2, #8
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	430a      	orrs	r2, r1
 8002578:	619a      	str	r2, [r3, #24]
      break;
 800257a:	e7d0      	b.n	800251e <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800257c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800257e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8002580:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002582:	6a18      	ldr	r0, [r3, #32]
 8002584:	f020 0010 	bic.w	r0, r0, #16
 8002588:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800258a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800258c:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800258e:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002592:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002596:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002598:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800259c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025a0:	4d3d      	ldr	r5, [pc, #244]	@ (8002698 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80025a2:	42ab      	cmp	r3, r5
 80025a4:	d067      	beq.n	8002676 <HAL_TIM_PWM_ConfigChannel+0x1e6>
 80025a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80025aa:	42ab      	cmp	r3, r5
 80025ac:	d063      	beq.n	8002676 <HAL_TIM_PWM_ConfigChannel+0x1e6>
  TIMx->CR2 = tmpcr2;
 80025ae:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025b0:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025b2:	6848      	ldr	r0, [r1, #4]
 80025b4:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80025b6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025b8:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025d0:	619a      	str	r2, [r3, #24]
      break;
 80025d2:	e7a4      	b.n	800251e <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025d4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80025d6:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80025d8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025da:	6a18      	ldr	r0, [r3, #32]
 80025dc:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80025e0:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80025e2:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80025e4:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025e6:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80025ea:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80025ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025f6:	4d28      	ldr	r5, [pc, #160]	@ (8002698 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80025f8:	42ab      	cmp	r3, r5
 80025fa:	d017      	beq.n	800262c <HAL_TIM_PWM_ConfigChannel+0x19c>
 80025fc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002600:	42ab      	cmp	r3, r5
 8002602:	d013      	beq.n	800262c <HAL_TIM_PWM_ConfigChannel+0x19c>
  TIMx->CR2 = tmpcr2;
 8002604:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002606:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002608:	6848      	ldr	r0, [r1, #4]
 800260a:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800260c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800260e:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002610:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002612:	f042 0208 	orr.w	r2, r2, #8
 8002616:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
      break;
 8002626:	e77a      	b.n	800251e <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 8002628:	2002      	movs	r0, #2
}
 800262a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800262c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800262e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002632:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002636:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800263a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800263e:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002646:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 800264a:	e7db      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x174>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800264c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800264e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002652:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002656:	e750      	b.n	80024fa <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= OC_Config->OCNPolarity;
 8002658:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800265a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800265e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002660:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002664:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002668:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800266c:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002670:	ea4e 0404 	orr.w	r4, lr, r4
 8002674:	e770      	b.n	8002558 <HAL_TIM_PWM_ConfigChannel+0xc8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002676:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800267c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002680:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002684:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002688:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800268c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002690:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8002694:	e78b      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x11e>
 8002696:	bf00      	nop
 8002698:	40010000 	.word	0x40010000

0800269c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800269c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d06e      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xe6>
 80026a4:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 80026a6:	6802      	ldr	r2, [r0, #0]
{
 80026a8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80026aa:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80026ae:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80026b2:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80026b6:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 80026bc:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80026c0:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80026c2:	680c      	ldr	r4, [r1, #0]
 80026c4:	2c60      	cmp	r4, #96	@ 0x60
 80026c6:	d076      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x11a>
 80026c8:	d811      	bhi.n	80026ee <HAL_TIM_ConfigClockSource+0x52>
 80026ca:	2c40      	cmp	r4, #64	@ 0x40
 80026cc:	d05b      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xea>
 80026ce:	d82e      	bhi.n	800272e <HAL_TIM_ConfigClockSource+0x92>
 80026d0:	2c20      	cmp	r4, #32
 80026d2:	d004      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x42>
 80026d4:	f200 8088 	bhi.w	80027e8 <HAL_TIM_ConfigClockSource+0x14c>
 80026d8:	f034 0110 	bics.w	r1, r4, #16
 80026dc:	d11f      	bne.n	800271e <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026de:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026e0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e4:	4321      	orrs	r1, r4
 80026e6:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ea:	6091      	str	r1, [r2, #8]
}
 80026ec:	e016      	b.n	800271c <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 80026ee:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80026f2:	d013      	beq.n	800271c <HAL_TIM_ConfigClockSource+0x80>
 80026f4:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80026f8:	d033      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0xc6>
 80026fa:	2c70      	cmp	r4, #112	@ 0x70
 80026fc:	d10f      	bne.n	800271e <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026fe:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002702:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002704:	4328      	orrs	r0, r5
 8002706:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002708:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002710:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002712:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002714:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002716:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800271a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800271e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002720:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002722:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800272a:	bc30      	pop	{r4, r5}
 800272c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800272e:	2c50      	cmp	r4, #80	@ 0x50
 8002730:	d1f5      	bne.n	800271e <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8002732:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002734:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002736:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002738:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800273c:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273e:	6a11      	ldr	r1, [r2, #32]
 8002740:	f021 0101 	bic.w	r1, r1, #1
 8002744:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002746:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002748:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800274c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002750:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002752:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002754:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002756:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275a:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800275e:	6091      	str	r1, [r2, #8]
}
 8002760:	e7dc      	b.n	800271c <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002762:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002766:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002768:	4328      	orrs	r0, r5
 800276a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800276c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002770:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002774:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8002776:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002778:	6891      	ldr	r1, [r2, #8]
 800277a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800277e:	6091      	str	r1, [r2, #8]
      break;
 8002780:	e7cc      	b.n	800271c <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8002782:	2002      	movs	r0, #2
}
 8002784:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8002786:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002788:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800278a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800278c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002790:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002792:	6a11      	ldr	r1, [r2, #32]
 8002794:	f021 0101 	bic.w	r1, r1, #1
 8002798:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800279c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a0:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80027a4:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80027a6:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80027a8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80027aa:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ae:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80027b2:	6091      	str	r1, [r2, #8]
}
 80027b4:	e7b2      	b.n	800271c <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 80027b6:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80027b8:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80027ba:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027bc:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c4:	6a10      	ldr	r0, [r2, #32]
 80027c6:	f020 0010 	bic.w	r0, r0, #16
 80027ca:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027cc:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ce:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d2:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80027d6:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80027d8:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80027da:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80027dc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e0:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80027e4:	6091      	str	r1, [r2, #8]
}
 80027e6:	e799      	b.n	800271c <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 80027e8:	2c30      	cmp	r4, #48	@ 0x30
 80027ea:	f43f af78 	beq.w	80026de <HAL_TIM_ConfigClockSource+0x42>
 80027ee:	e796      	b.n	800271e <HAL_TIM_ConfigClockSource+0x82>

080027f0 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002800:	6803      	ldr	r3, [r0, #0]
{
 8002802:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002804:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002806:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002808:	07a9      	lsls	r1, r5, #30
{
 800280a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800280c:	d501      	bpl.n	8002812 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800280e:	07b2      	lsls	r2, r6, #30
 8002810:	d451      	bmi.n	80028b6 <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002812:	0769      	lsls	r1, r5, #29
 8002814:	d501      	bpl.n	800281a <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002816:	0772      	lsls	r2, r6, #29
 8002818:	d43a      	bmi.n	8002890 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800281a:	072b      	lsls	r3, r5, #28
 800281c:	d501      	bpl.n	8002822 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800281e:	0730      	lsls	r0, r6, #28
 8002820:	d424      	bmi.n	800286c <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002822:	06ea      	lsls	r2, r5, #27
 8002824:	d501      	bpl.n	800282a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002826:	06f3      	lsls	r3, r6, #27
 8002828:	d410      	bmi.n	800284c <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800282a:	07e8      	lsls	r0, r5, #31
 800282c:	d501      	bpl.n	8002832 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800282e:	07f1      	lsls	r1, r6, #31
 8002830:	d457      	bmi.n	80028e2 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002832:	062a      	lsls	r2, r5, #24
 8002834:	d501      	bpl.n	800283a <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002836:	0633      	lsls	r3, r6, #24
 8002838:	d45b      	bmi.n	80028f2 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800283a:	0668      	lsls	r0, r5, #25
 800283c:	d501      	bpl.n	8002842 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800283e:	0671      	lsls	r1, r6, #25
 8002840:	d45f      	bmi.n	8002902 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002842:	06aa      	lsls	r2, r5, #26
 8002844:	d501      	bpl.n	800284a <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002846:	06b3      	lsls	r3, r6, #26
 8002848:	d442      	bmi.n	80028d0 <HAL_TIM_IRQHandler+0xd0>
}
 800284a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	f06f 0210 	mvn.w	r2, #16
 8002852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002854:	2208      	movs	r2, #8
 8002856:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002860:	d063      	beq.n	800292a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	f7ff ffc9 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	2300      	movs	r3, #0
 8002868:	7723      	strb	r3, [r4, #28]
 800286a:	e7de      	b.n	800282a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	f06f 0208 	mvn.w	r2, #8
 8002872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002874:	2204      	movs	r2, #4
 8002876:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800287c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287e:	d151      	bne.n	8002924 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002880:	f7ff ffb8 	bl	80027f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	4620      	mov	r0, r4
 8002886:	f7fe faa3 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	2300      	movs	r3, #0
 800288c:	7723      	strb	r3, [r4, #28]
 800288e:	e7c8      	b.n	8002822 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f06f 0204 	mvn.w	r2, #4
 8002896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002898:	2202      	movs	r2, #2
 800289a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a4:	d13b      	bne.n	800291e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	f7ff ffa5 	bl	80027f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7fe fa90 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b0:	2300      	movs	r3, #0
 80028b2:	7723      	strb	r3, [r4, #28]
 80028b4:	e7b1      	b.n	800281a <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028b6:	f06f 0202 	mvn.w	r2, #2
 80028ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028bc:	2201      	movs	r2, #1
 80028be:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	079b      	lsls	r3, r3, #30
 80028c4:	d025      	beq.n	8002912 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	f7ff ff97 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	2300      	movs	r3, #0
 80028cc:	7723      	strb	r3, [r4, #28]
 80028ce:	e7a0      	b.n	8002812 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80028d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028d8:	611a      	str	r2, [r3, #16]
}
 80028da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80028de:	f000 b86b 	b.w	80029b8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	f06f 0201 	mvn.w	r2, #1
 80028e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff ff80 	bl	80027f0 <HAL_TIM_PeriodElapsedCallback>
 80028f0:	e79f      	b.n	8002832 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80028fa:	4620      	mov	r0, r4
 80028fc:	f000 f85e 	bl	80029bc <HAL_TIMEx_BreakCallback>
 8002900:	e79b      	b.n	800283a <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002908:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff ff76 	bl	80027fc <HAL_TIM_TriggerCallback>
 8002910:	e797      	b.n	8002842 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	f7ff ff6f 	bl	80027f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002916:	4620      	mov	r0, r4
 8002918:	f7fe fa5a 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
 800291c:	e7d5      	b.n	80028ca <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	f7ff ff6b 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 8002922:	e7c5      	b.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002924:	f7ff ff68 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 8002928:	e7af      	b.n	800288a <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	f7ff ff63 	bl	80027f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292e:	4620      	mov	r0, r4
 8002930:	f7fe fa4e 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002934:	e797      	b.n	8002866 <HAL_TIM_IRQHandler+0x66>
 8002936:	bf00      	nop

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002938:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800293c:	2a01      	cmp	r2, #1
 800293e:	d037      	beq.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002940:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002942:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	2002      	movs	r0, #2
{
 8002946:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800294c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800294e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002950:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002952:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002956:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002958:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295a:	4816      	ldr	r0, [pc, #88]	@ (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800295c:	4282      	cmp	r2, r0
 800295e:	d01a      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002960:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002964:	d017      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002966:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800296a:	4282      	cmp	r2, r0
 800296c:	d013      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800296e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002972:	4282      	cmp	r2, r0
 8002974:	d00f      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002976:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800297a:	4282      	cmp	r2, r0
 800297c:	d00b      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800297e:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002982:	4282      	cmp	r2, r0
 8002984:	d007      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002986:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 800298a:	4282      	cmp	r2, r0
 800298c:	d003      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800298e:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002992:	4282      	cmp	r2, r0
 8002994:	d104      	bne.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002996:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002998:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800299e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80029a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80029a8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80029ac:	bc30      	pop	{r4, r5}
 80029ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80029b0:	2002      	movs	r0, #2
}
 80029b2:	4770      	bx	lr
 80029b4:	40010000 	.word	0x40010000

080029b8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c0:	2800      	cmp	r0, #0
 80029c2:	f000 8087 	beq.w	8002ad4 <HAL_UART_Init+0x114>
{
 80029c6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80029cc:	4604      	mov	r4, r0
 80029ce:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d079      	beq.n	8002aca <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d6:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029e6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e8:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ea:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80029f0:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f4:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f6:	4302      	orrs	r2, r0
 80029f8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80029fa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029fc:	4302      	orrs	r2, r0
 80029fe:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002a00:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8002a04:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a08:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a12:	4931      	ldr	r1, [pc, #196]	@ (8002ad8 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a18:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a1a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a1c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a1e:	d036      	beq.n	8002a8e <HAL_UART_Init+0xce>
 8002a20:	4a2e      	ldr	r2, [pc, #184]	@ (8002adc <HAL_UART_Init+0x11c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d033      	beq.n	8002a8e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a26:	f7ff faff 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a2c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a32:	e9d4 5300 	ldrd	r5, r3, [r4]
 8002a36:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3a:	d02b      	beq.n	8002a94 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a3c:	009a      	lsls	r2, r3, #2
 8002a3e:	0f9b      	lsrs	r3, r3, #30
 8002a40:	f7fe f81c 	bl	8000a7c <__aeabi_uldivmod>
 8002a44:	4a26      	ldr	r2, [pc, #152]	@ (8002ae0 <HAL_UART_Init+0x120>)
 8002a46:	fba2 1300 	umull	r1, r3, r2, r0
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2164      	movs	r1, #100	@ 0x64
 8002a4e:	fb01 0013 	mls	r0, r1, r3, r0
 8002a52:	0100      	lsls	r0, r0, #4
 8002a54:	3032      	adds	r0, #50	@ 0x32
 8002a56:	fba2 2000 	umull	r2, r0, r2, r0
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8002a60:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a62:	692a      	ldr	r2, [r5, #16]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a68:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	696a      	ldr	r2, [r5, #20]
 8002a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a70:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8002a72:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a76:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a7c:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a80:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a84:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8002a88:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a8a:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a8e:	f7ff fadb 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8002a92:	e7ca      	b.n	8002a2a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a94:	18da      	adds	r2, r3, r3
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	415b      	adcs	r3, r3
 8002a9c:	f7fd ffee 	bl	8000a7c <__aeabi_uldivmod>
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <HAL_UART_Init+0x120>)
 8002aa2:	fba2 3100 	umull	r3, r1, r2, r0
 8002aa6:	0949      	lsrs	r1, r1, #5
 8002aa8:	2364      	movs	r3, #100	@ 0x64
 8002aaa:	fb03 0311 	mls	r3, r3, r1, r0
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	3332      	adds	r3, #50	@ 0x32
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ac0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ac4:	4413      	add	r3, r2
 8002ac6:	60ab      	str	r3, [r5, #8]
 8002ac8:	e7cb      	b.n	8002a62 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8002aca:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002ace:	f7fe fc8b 	bl	80013e8 <HAL_UART_MspInit>
 8002ad2:	e780      	b.n	80029d6 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8002ad4:	2001      	movs	r0, #1
}
 8002ad6:	4770      	bx	lr
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	40011400 	.word	0x40011400
 8002ae0:	51eb851f 	.word	0x51eb851f

08002ae4 <HAL_UART_Transmit>:
{
 8002ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002aea:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8002aee:	2820      	cmp	r0, #32
 8002af0:	d155      	bne.n	8002b9e <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8002af2:	460d      	mov	r5, r1
 8002af4:	b109      	cbz	r1, 8002afa <HAL_UART_Transmit+0x16>
 8002af6:	4616      	mov	r6, r2
 8002af8:	b912      	cbnz	r2, 8002b00 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
}
 8002afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b00:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b06:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002b10:	f7fe fd7a 	bl	8001608 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b14:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8002b16:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8002b1c:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8002b1e:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b20:	d040      	beq.n	8002ba4 <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8002b22:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b24:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d047      	beq.n	8002bbc <HAL_UART_Transmit+0xd8>
 8002b2c:	1c7b      	adds	r3, r7, #1
 8002b2e:	d124      	bne.n	8002b7a <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	061f      	lsls	r7, r3, #24
 8002b34:	d5fc      	bpl.n	8002b30 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d02c      	beq.n	8002b94 <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002b40:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b48:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ef      	bne.n	8002b30 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b50:	6813      	ldr	r3, [r2, #0]
 8002b52:	0659      	lsls	r1, r3, #25
 8002b54:	d5fc      	bpl.n	8002b50 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8002b56:	2320      	movs	r3, #32
 8002b58:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002b5c:	2000      	movs	r0, #0
}
 8002b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8002b62:	2d00      	cmp	r5, #0
 8002b64:	d03d      	beq.n	8002be2 <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b6a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002b6c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b74:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b313      	cbz	r3, 8002bc0 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7a:	6813      	ldr	r3, [r2, #0]
 8002b7c:	061e      	lsls	r6, r3, #24
 8002b7e:	d4f0      	bmi.n	8002b62 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b80:	f7fe fd42 	bl	8001608 <HAL_GetTick>
 8002b84:	eba0 0309 	sub.w	r3, r0, r9
 8002b88:	429f      	cmp	r7, r3
 8002b8a:	d311      	bcc.n	8002bb0 <HAL_UART_Transmit+0xcc>
 8002b8c:	b187      	cbz	r7, 8002bb0 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b8e:	6822      	ldr	r2, [r4, #0]
 8002b90:	68d3      	ldr	r3, [r2, #12]
 8002b92:	e7f2      	b.n	8002b7a <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b94:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9c:	e7cf      	b.n	8002b3e <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8002b9e:	2002      	movs	r0, #2
}
 8002ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1bb      	bne.n	8002b22 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8002baa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002bac:	461d      	mov	r5, r3
 8002bae:	e7b8      	b.n	8002b22 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002bb6:	2003      	movs	r0, #3
}
 8002bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bbc:	1c78      	adds	r0, r7, #1
 8002bbe:	d0c7      	beq.n	8002b50 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	065b      	lsls	r3, r3, #25
 8002bc4:	d4c7      	bmi.n	8002b56 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fe fd1f 	bl	8001608 <HAL_GetTick>
 8002bca:	eba0 0309 	sub.w	r3, r0, r9
 8002bce:	429f      	cmp	r7, r3
 8002bd0:	d3ee      	bcc.n	8002bb0 <HAL_UART_Transmit+0xcc>
 8002bd2:	2f00      	cmp	r7, #0
 8002bd4:	d0ec      	beq.n	8002bb0 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	065b      	lsls	r3, r3, #25
 8002bde:	d5f2      	bpl.n	8002bc6 <HAL_UART_Transmit+0xe2>
 8002be0:	e7b9      	b.n	8002b56 <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be2:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bea:	e7be      	b.n	8002b6a <HAL_UART_Transmit+0x86>

08002bec <std>:
 8002bec:	2300      	movs	r3, #0
 8002bee:	b510      	push	{r4, lr}
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8002bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bfa:	6083      	str	r3, [r0, #8]
 8002bfc:	8181      	strh	r1, [r0, #12]
 8002bfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c00:	81c2      	strh	r2, [r0, #14]
 8002c02:	6183      	str	r3, [r0, #24]
 8002c04:	4619      	mov	r1, r3
 8002c06:	2208      	movs	r2, #8
 8002c08:	305c      	adds	r0, #92	@ 0x5c
 8002c0a:	f000 f9f9 	bl	8003000 <memset>
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <std+0x58>)
 8002c10:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <std+0x5c>)
 8002c14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <std+0x60>)
 8002c18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <std+0x64>)
 8002c1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <std+0x68>)
 8002c20:	6224      	str	r4, [r4, #32]
 8002c22:	429c      	cmp	r4, r3
 8002c24:	d006      	beq.n	8002c34 <std+0x48>
 8002c26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c2a:	4294      	cmp	r4, r2
 8002c2c:	d002      	beq.n	8002c34 <std+0x48>
 8002c2e:	33d0      	adds	r3, #208	@ 0xd0
 8002c30:	429c      	cmp	r4, r3
 8002c32:	d105      	bne.n	8002c40 <std+0x54>
 8002c34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c3c:	f000 ba58 	b.w	80030f0 <__retarget_lock_init_recursive>
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	bf00      	nop
 8002c44:	08002e51 	.word	0x08002e51
 8002c48:	08002e73 	.word	0x08002e73
 8002c4c:	08002eab 	.word	0x08002eab
 8002c50:	08002ecf 	.word	0x08002ecf
 8002c54:	20000150 	.word	0x20000150

08002c58 <stdio_exit_handler>:
 8002c58:	4a02      	ldr	r2, [pc, #8]	@ (8002c64 <stdio_exit_handler+0xc>)
 8002c5a:	4903      	ldr	r1, [pc, #12]	@ (8002c68 <stdio_exit_handler+0x10>)
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <stdio_exit_handler+0x14>)
 8002c5e:	f000 b869 	b.w	8002d34 <_fwalk_sglue>
 8002c62:	bf00      	nop
 8002c64:	2000002c 	.word	0x2000002c
 8002c68:	0800398d 	.word	0x0800398d
 8002c6c:	2000003c 	.word	0x2000003c

08002c70 <cleanup_stdio>:
 8002c70:	6841      	ldr	r1, [r0, #4]
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <cleanup_stdio+0x34>)
 8002c74:	4299      	cmp	r1, r3
 8002c76:	b510      	push	{r4, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	d001      	beq.n	8002c80 <cleanup_stdio+0x10>
 8002c7c:	f000 fe86 	bl	800398c <_fflush_r>
 8002c80:	68a1      	ldr	r1, [r4, #8]
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <cleanup_stdio+0x38>)
 8002c84:	4299      	cmp	r1, r3
 8002c86:	d002      	beq.n	8002c8e <cleanup_stdio+0x1e>
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f000 fe7f 	bl	800398c <_fflush_r>
 8002c8e:	68e1      	ldr	r1, [r4, #12]
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <cleanup_stdio+0x3c>)
 8002c92:	4299      	cmp	r1, r3
 8002c94:	d004      	beq.n	8002ca0 <cleanup_stdio+0x30>
 8002c96:	4620      	mov	r0, r4
 8002c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c9c:	f000 be76 	b.w	800398c <_fflush_r>
 8002ca0:	bd10      	pop	{r4, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000150 	.word	0x20000150
 8002ca8:	200001b8 	.word	0x200001b8
 8002cac:	20000220 	.word	0x20000220

08002cb0 <global_stdio_init.part.0>:
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <global_stdio_init.part.0+0x30>)
 8002cb4:	4c0b      	ldr	r4, [pc, #44]	@ (8002ce4 <global_stdio_init.part.0+0x34>)
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce8 <global_stdio_init.part.0+0x38>)
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	4620      	mov	r0, r4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	f7ff ff94 	bl	8002bec <std>
 8002cc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2109      	movs	r1, #9
 8002ccc:	f7ff ff8e 	bl	8002bec <std>
 8002cd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cda:	2112      	movs	r1, #18
 8002cdc:	f7ff bf86 	b.w	8002bec <std>
 8002ce0:	20000288 	.word	0x20000288
 8002ce4:	20000150 	.word	0x20000150
 8002ce8:	08002c59 	.word	0x08002c59

08002cec <__sfp_lock_acquire>:
 8002cec:	4801      	ldr	r0, [pc, #4]	@ (8002cf4 <__sfp_lock_acquire+0x8>)
 8002cee:	f000 ba00 	b.w	80030f2 <__retarget_lock_acquire_recursive>
 8002cf2:	bf00      	nop
 8002cf4:	20000291 	.word	0x20000291

08002cf8 <__sfp_lock_release>:
 8002cf8:	4801      	ldr	r0, [pc, #4]	@ (8002d00 <__sfp_lock_release+0x8>)
 8002cfa:	f000 b9fb 	b.w	80030f4 <__retarget_lock_release_recursive>
 8002cfe:	bf00      	nop
 8002d00:	20000291 	.word	0x20000291

08002d04 <__sinit>:
 8002d04:	b510      	push	{r4, lr}
 8002d06:	4604      	mov	r4, r0
 8002d08:	f7ff fff0 	bl	8002cec <__sfp_lock_acquire>
 8002d0c:	6a23      	ldr	r3, [r4, #32]
 8002d0e:	b11b      	cbz	r3, 8002d18 <__sinit+0x14>
 8002d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d14:	f7ff bff0 	b.w	8002cf8 <__sfp_lock_release>
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__sinit+0x28>)
 8002d1a:	6223      	str	r3, [r4, #32]
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <__sinit+0x2c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f5      	bne.n	8002d10 <__sinit+0xc>
 8002d24:	f7ff ffc4 	bl	8002cb0 <global_stdio_init.part.0>
 8002d28:	e7f2      	b.n	8002d10 <__sinit+0xc>
 8002d2a:	bf00      	nop
 8002d2c:	08002c71 	.word	0x08002c71
 8002d30:	20000288 	.word	0x20000288

08002d34 <_fwalk_sglue>:
 8002d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d38:	4607      	mov	r7, r0
 8002d3a:	4688      	mov	r8, r1
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	2600      	movs	r6, #0
 8002d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d44:	f1b9 0901 	subs.w	r9, r9, #1
 8002d48:	d505      	bpl.n	8002d56 <_fwalk_sglue+0x22>
 8002d4a:	6824      	ldr	r4, [r4, #0]
 8002d4c:	2c00      	cmp	r4, #0
 8002d4e:	d1f7      	bne.n	8002d40 <_fwalk_sglue+0xc>
 8002d50:	4630      	mov	r0, r6
 8002d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d56:	89ab      	ldrh	r3, [r5, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d907      	bls.n	8002d6c <_fwalk_sglue+0x38>
 8002d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d60:	3301      	adds	r3, #1
 8002d62:	d003      	beq.n	8002d6c <_fwalk_sglue+0x38>
 8002d64:	4629      	mov	r1, r5
 8002d66:	4638      	mov	r0, r7
 8002d68:	47c0      	blx	r8
 8002d6a:	4306      	orrs	r6, r0
 8002d6c:	3568      	adds	r5, #104	@ 0x68
 8002d6e:	e7e9      	b.n	8002d44 <_fwalk_sglue+0x10>

08002d70 <iprintf>:
 8002d70:	b40f      	push	{r0, r1, r2, r3}
 8002d72:	b507      	push	{r0, r1, r2, lr}
 8002d74:	4906      	ldr	r1, [pc, #24]	@ (8002d90 <iprintf+0x20>)
 8002d76:	ab04      	add	r3, sp, #16
 8002d78:	6808      	ldr	r0, [r1, #0]
 8002d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d7e:	6881      	ldr	r1, [r0, #8]
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	f000 fadb 	bl	800333c <_vfiprintf_r>
 8002d86:	b003      	add	sp, #12
 8002d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d8c:	b004      	add	sp, #16
 8002d8e:	4770      	bx	lr
 8002d90:	20000038 	.word	0x20000038

08002d94 <_puts_r>:
 8002d94:	6a03      	ldr	r3, [r0, #32]
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	6884      	ldr	r4, [r0, #8]
 8002d9a:	4605      	mov	r5, r0
 8002d9c:	460e      	mov	r6, r1
 8002d9e:	b90b      	cbnz	r3, 8002da4 <_puts_r+0x10>
 8002da0:	f7ff ffb0 	bl	8002d04 <__sinit>
 8002da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002da6:	07db      	lsls	r3, r3, #31
 8002da8:	d405      	bmi.n	8002db6 <_puts_r+0x22>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	0598      	lsls	r0, r3, #22
 8002dae:	d402      	bmi.n	8002db6 <_puts_r+0x22>
 8002db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002db2:	f000 f99e 	bl	80030f2 <__retarget_lock_acquire_recursive>
 8002db6:	89a3      	ldrh	r3, [r4, #12]
 8002db8:	0719      	lsls	r1, r3, #28
 8002dba:	d502      	bpl.n	8002dc2 <_puts_r+0x2e>
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d135      	bne.n	8002e2e <_puts_r+0x9a>
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f000 f8c5 	bl	8002f54 <__swsetup_r>
 8002dca:	b380      	cbz	r0, 8002e2e <_puts_r+0x9a>
 8002dcc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002dd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dd2:	07da      	lsls	r2, r3, #31
 8002dd4:	d405      	bmi.n	8002de2 <_puts_r+0x4e>
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	059b      	lsls	r3, r3, #22
 8002dda:	d402      	bmi.n	8002de2 <_puts_r+0x4e>
 8002ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dde:	f000 f989 	bl	80030f4 <__retarget_lock_release_recursive>
 8002de2:	4628      	mov	r0, r5
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da04      	bge.n	8002df4 <_puts_r+0x60>
 8002dea:	69a2      	ldr	r2, [r4, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dc17      	bgt.n	8002e20 <_puts_r+0x8c>
 8002df0:	290a      	cmp	r1, #10
 8002df2:	d015      	beq.n	8002e20 <_puts_r+0x8c>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	6022      	str	r2, [r4, #0]
 8002dfa:	7019      	strb	r1, [r3, #0]
 8002dfc:	68a3      	ldr	r3, [r4, #8]
 8002dfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	2900      	cmp	r1, #0
 8002e08:	d1ed      	bne.n	8002de6 <_puts_r+0x52>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da11      	bge.n	8002e32 <_puts_r+0x9e>
 8002e0e:	4622      	mov	r2, r4
 8002e10:	210a      	movs	r1, #10
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 f85f 	bl	8002ed6 <__swbuf_r>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d0d7      	beq.n	8002dcc <_puts_r+0x38>
 8002e1c:	250a      	movs	r5, #10
 8002e1e:	e7d7      	b.n	8002dd0 <_puts_r+0x3c>
 8002e20:	4622      	mov	r2, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f857 	bl	8002ed6 <__swbuf_r>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d1e7      	bne.n	8002dfc <_puts_r+0x68>
 8002e2c:	e7ce      	b.n	8002dcc <_puts_r+0x38>
 8002e2e:	3e01      	subs	r6, #1
 8002e30:	e7e4      	b.n	8002dfc <_puts_r+0x68>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	6022      	str	r2, [r4, #0]
 8002e38:	220a      	movs	r2, #10
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e7ee      	b.n	8002e1c <_puts_r+0x88>
	...

08002e40 <puts>:
 8002e40:	4b02      	ldr	r3, [pc, #8]	@ (8002e4c <puts+0xc>)
 8002e42:	4601      	mov	r1, r0
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	f7ff bfa5 	b.w	8002d94 <_puts_r>
 8002e4a:	bf00      	nop
 8002e4c:	20000038 	.word	0x20000038

08002e50 <__sread>:
 8002e50:	b510      	push	{r4, lr}
 8002e52:	460c      	mov	r4, r1
 8002e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e58:	f000 f8fc 	bl	8003054 <_read_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	bfab      	itete	ge
 8002e60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e62:	89a3      	ldrhlt	r3, [r4, #12]
 8002e64:	181b      	addge	r3, r3, r0
 8002e66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e6a:	bfac      	ite	ge
 8002e6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e6e:	81a3      	strhlt	r3, [r4, #12]
 8002e70:	bd10      	pop	{r4, pc}

08002e72 <__swrite>:
 8002e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e76:	461f      	mov	r7, r3
 8002e78:	898b      	ldrh	r3, [r1, #12]
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4616      	mov	r6, r2
 8002e82:	d505      	bpl.n	8002e90 <__swrite+0x1e>
 8002e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e88:	2302      	movs	r3, #2
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f000 f8d0 	bl	8003030 <_lseek_r>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	4632      	mov	r2, r6
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea6:	f000 b8e7 	b.w	8003078 <_write_r>

08002eaa <__sseek>:
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	460c      	mov	r4, r1
 8002eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb2:	f000 f8bd 	bl	8003030 <_lseek_r>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	bf15      	itete	ne
 8002ebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ec6:	81a3      	strheq	r3, [r4, #12]
 8002ec8:	bf18      	it	ne
 8002eca:	81a3      	strhne	r3, [r4, #12]
 8002ecc:	bd10      	pop	{r4, pc}

08002ece <__sclose>:
 8002ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed2:	f000 b89d 	b.w	8003010 <_close_r>

08002ed6 <__swbuf_r>:
 8002ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed8:	460e      	mov	r6, r1
 8002eda:	4614      	mov	r4, r2
 8002edc:	4605      	mov	r5, r0
 8002ede:	b118      	cbz	r0, 8002ee8 <__swbuf_r+0x12>
 8002ee0:	6a03      	ldr	r3, [r0, #32]
 8002ee2:	b90b      	cbnz	r3, 8002ee8 <__swbuf_r+0x12>
 8002ee4:	f7ff ff0e 	bl	8002d04 <__sinit>
 8002ee8:	69a3      	ldr	r3, [r4, #24]
 8002eea:	60a3      	str	r3, [r4, #8]
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	071a      	lsls	r2, r3, #28
 8002ef0:	d501      	bpl.n	8002ef6 <__swbuf_r+0x20>
 8002ef2:	6923      	ldr	r3, [r4, #16]
 8002ef4:	b943      	cbnz	r3, 8002f08 <__swbuf_r+0x32>
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 f82b 	bl	8002f54 <__swsetup_r>
 8002efe:	b118      	cbz	r0, 8002f08 <__swbuf_r+0x32>
 8002f00:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002f04:	4638      	mov	r0, r7
 8002f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	6922      	ldr	r2, [r4, #16]
 8002f0c:	1a98      	subs	r0, r3, r2
 8002f0e:	6963      	ldr	r3, [r4, #20]
 8002f10:	b2f6      	uxtb	r6, r6
 8002f12:	4283      	cmp	r3, r0
 8002f14:	4637      	mov	r7, r6
 8002f16:	dc05      	bgt.n	8002f24 <__swbuf_r+0x4e>
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 fd36 	bl	800398c <_fflush_r>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d1ed      	bne.n	8002f00 <__swbuf_r+0x2a>
 8002f24:	68a3      	ldr	r3, [r4, #8]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	60a3      	str	r3, [r4, #8]
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	6022      	str	r2, [r4, #0]
 8002f30:	701e      	strb	r6, [r3, #0]
 8002f32:	6962      	ldr	r2, [r4, #20]
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d004      	beq.n	8002f44 <__swbuf_r+0x6e>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	07db      	lsls	r3, r3, #31
 8002f3e:	d5e1      	bpl.n	8002f04 <__swbuf_r+0x2e>
 8002f40:	2e0a      	cmp	r6, #10
 8002f42:	d1df      	bne.n	8002f04 <__swbuf_r+0x2e>
 8002f44:	4621      	mov	r1, r4
 8002f46:	4628      	mov	r0, r5
 8002f48:	f000 fd20 	bl	800398c <_fflush_r>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d0d9      	beq.n	8002f04 <__swbuf_r+0x2e>
 8002f50:	e7d6      	b.n	8002f00 <__swbuf_r+0x2a>
	...

08002f54 <__swsetup_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <__swsetup_r+0xa8>)
 8002f58:	4605      	mov	r5, r0
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	b118      	cbz	r0, 8002f68 <__swsetup_r+0x14>
 8002f60:	6a03      	ldr	r3, [r0, #32]
 8002f62:	b90b      	cbnz	r3, 8002f68 <__swsetup_r+0x14>
 8002f64:	f7ff fece 	bl	8002d04 <__sinit>
 8002f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f6c:	0719      	lsls	r1, r3, #28
 8002f6e:	d422      	bmi.n	8002fb6 <__swsetup_r+0x62>
 8002f70:	06da      	lsls	r2, r3, #27
 8002f72:	d407      	bmi.n	8002f84 <__swsetup_r+0x30>
 8002f74:	2209      	movs	r2, #9
 8002f76:	602a      	str	r2, [r5, #0]
 8002f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f7c:	81a3      	strh	r3, [r4, #12]
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f82:	e033      	b.n	8002fec <__swsetup_r+0x98>
 8002f84:	0758      	lsls	r0, r3, #29
 8002f86:	d512      	bpl.n	8002fae <__swsetup_r+0x5a>
 8002f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f8a:	b141      	cbz	r1, 8002f9e <__swsetup_r+0x4a>
 8002f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f90:	4299      	cmp	r1, r3
 8002f92:	d002      	beq.n	8002f9a <__swsetup_r+0x46>
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 f8af 	bl	80030f8 <_free_r>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6063      	str	r3, [r4, #4]
 8002faa:	6923      	ldr	r3, [r4, #16]
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	b94b      	cbnz	r3, 8002fce <__swsetup_r+0x7a>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc4:	d003      	beq.n	8002fce <__swsetup_r+0x7a>
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f000 fd2d 	bl	8003a28 <__smakebuf_r>
 8002fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fd2:	f013 0201 	ands.w	r2, r3, #1
 8002fd6:	d00a      	beq.n	8002fee <__swsetup_r+0x9a>
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60a2      	str	r2, [r4, #8]
 8002fdc:	6962      	ldr	r2, [r4, #20]
 8002fde:	4252      	negs	r2, r2
 8002fe0:	61a2      	str	r2, [r4, #24]
 8002fe2:	6922      	ldr	r2, [r4, #16]
 8002fe4:	b942      	cbnz	r2, 8002ff8 <__swsetup_r+0xa4>
 8002fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fea:	d1c5      	bne.n	8002f78 <__swsetup_r+0x24>
 8002fec:	bd38      	pop	{r3, r4, r5, pc}
 8002fee:	0799      	lsls	r1, r3, #30
 8002ff0:	bf58      	it	pl
 8002ff2:	6962      	ldrpl	r2, [r4, #20]
 8002ff4:	60a2      	str	r2, [r4, #8]
 8002ff6:	e7f4      	b.n	8002fe2 <__swsetup_r+0x8e>
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	e7f7      	b.n	8002fec <__swsetup_r+0x98>
 8002ffc:	20000038 	.word	0x20000038

08003000 <memset>:
 8003000:	4402      	add	r2, r0
 8003002:	4603      	mov	r3, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <_close_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4d06      	ldr	r5, [pc, #24]	@ (800302c <_close_r+0x1c>)
 8003014:	2300      	movs	r3, #0
 8003016:	4604      	mov	r4, r0
 8003018:	4608      	mov	r0, r1
 800301a:	602b      	str	r3, [r5, #0]
 800301c:	f7fe fa46 	bl	80014ac <_close>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_close_r+0x1a>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_close_r+0x1a>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	2000028c 	.word	0x2000028c

08003030 <_lseek_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	4d07      	ldr	r5, [pc, #28]	@ (8003050 <_lseek_r+0x20>)
 8003034:	4604      	mov	r4, r0
 8003036:	4608      	mov	r0, r1
 8003038:	4611      	mov	r1, r2
 800303a:	2200      	movs	r2, #0
 800303c:	602a      	str	r2, [r5, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	f7fe fa40 	bl	80014c4 <_lseek>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d102      	bne.n	800304e <_lseek_r+0x1e>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	b103      	cbz	r3, 800304e <_lseek_r+0x1e>
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	2000028c 	.word	0x2000028c

08003054 <_read_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4d07      	ldr	r5, [pc, #28]	@ (8003074 <_read_r+0x20>)
 8003058:	4604      	mov	r4, r0
 800305a:	4608      	mov	r0, r1
 800305c:	4611      	mov	r1, r2
 800305e:	2200      	movs	r2, #0
 8003060:	602a      	str	r2, [r5, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f7fe fa14 	bl	8001490 <_read>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d102      	bne.n	8003072 <_read_r+0x1e>
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	b103      	cbz	r3, 8003072 <_read_r+0x1e>
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	2000028c 	.word	0x2000028c

08003078 <_write_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4d07      	ldr	r5, [pc, #28]	@ (8003098 <_write_r+0x20>)
 800307c:	4604      	mov	r4, r0
 800307e:	4608      	mov	r0, r1
 8003080:	4611      	mov	r1, r2
 8003082:	2200      	movs	r2, #0
 8003084:	602a      	str	r2, [r5, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f7fd fe8e 	bl	8000da8 <_write>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d102      	bne.n	8003096 <_write_r+0x1e>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	b103      	cbz	r3, 8003096 <_write_r+0x1e>
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	2000028c 	.word	0x2000028c

0800309c <__errno>:
 800309c:	4b01      	ldr	r3, [pc, #4]	@ (80030a4 <__errno+0x8>)
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000038 	.word	0x20000038

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	@ (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	@ (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x44>)
 80030bc:	f001 fd48 	bl	8004b50 <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08004df0 	.word	0x08004df0
 80030e4:	08004df0 	.word	0x08004df0
 80030e8:	08004df0 	.word	0x08004df0
 80030ec:	08004df4 	.word	0x08004df4

080030f0 <__retarget_lock_init_recursive>:
 80030f0:	4770      	bx	lr

080030f2 <__retarget_lock_acquire_recursive>:
 80030f2:	4770      	bx	lr

080030f4 <__retarget_lock_release_recursive>:
 80030f4:	4770      	bx	lr
	...

080030f8 <_free_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d041      	beq.n	8003184 <_free_r+0x8c>
 8003100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003104:	1f0c      	subs	r4, r1, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfb8      	it	lt
 800310a:	18e4      	addlt	r4, r4, r3
 800310c:	f000 f8e0 	bl	80032d0 <__malloc_lock>
 8003110:	4a1d      	ldr	r2, [pc, #116]	@ (8003188 <_free_r+0x90>)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	b933      	cbnz	r3, 8003124 <_free_r+0x2c>
 8003116:	6063      	str	r3, [r4, #4]
 8003118:	6014      	str	r4, [r2, #0]
 800311a:	4628      	mov	r0, r5
 800311c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003120:	f000 b8dc 	b.w	80032dc <__malloc_unlock>
 8003124:	42a3      	cmp	r3, r4
 8003126:	d908      	bls.n	800313a <_free_r+0x42>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	1821      	adds	r1, r4, r0
 800312c:	428b      	cmp	r3, r1
 800312e:	bf01      	itttt	eq
 8003130:	6819      	ldreq	r1, [r3, #0]
 8003132:	685b      	ldreq	r3, [r3, #4]
 8003134:	1809      	addeq	r1, r1, r0
 8003136:	6021      	streq	r1, [r4, #0]
 8003138:	e7ed      	b.n	8003116 <_free_r+0x1e>
 800313a:	461a      	mov	r2, r3
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b10b      	cbz	r3, 8003144 <_free_r+0x4c>
 8003140:	42a3      	cmp	r3, r4
 8003142:	d9fa      	bls.n	800313a <_free_r+0x42>
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	1850      	adds	r0, r2, r1
 8003148:	42a0      	cmp	r0, r4
 800314a:	d10b      	bne.n	8003164 <_free_r+0x6c>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	4401      	add	r1, r0
 8003150:	1850      	adds	r0, r2, r1
 8003152:	4283      	cmp	r3, r0
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	d1e0      	bne.n	800311a <_free_r+0x22>
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	6053      	str	r3, [r2, #4]
 800315e:	4408      	add	r0, r1
 8003160:	6010      	str	r0, [r2, #0]
 8003162:	e7da      	b.n	800311a <_free_r+0x22>
 8003164:	d902      	bls.n	800316c <_free_r+0x74>
 8003166:	230c      	movs	r3, #12
 8003168:	602b      	str	r3, [r5, #0]
 800316a:	e7d6      	b.n	800311a <_free_r+0x22>
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	1821      	adds	r1, r4, r0
 8003170:	428b      	cmp	r3, r1
 8003172:	bf04      	itt	eq
 8003174:	6819      	ldreq	r1, [r3, #0]
 8003176:	685b      	ldreq	r3, [r3, #4]
 8003178:	6063      	str	r3, [r4, #4]
 800317a:	bf04      	itt	eq
 800317c:	1809      	addeq	r1, r1, r0
 800317e:	6021      	streq	r1, [r4, #0]
 8003180:	6054      	str	r4, [r2, #4]
 8003182:	e7ca      	b.n	800311a <_free_r+0x22>
 8003184:	bd38      	pop	{r3, r4, r5, pc}
 8003186:	bf00      	nop
 8003188:	20000298 	.word	0x20000298

0800318c <sbrk_aligned>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4e0f      	ldr	r6, [pc, #60]	@ (80031cc <sbrk_aligned+0x40>)
 8003190:	460c      	mov	r4, r1
 8003192:	6831      	ldr	r1, [r6, #0]
 8003194:	4605      	mov	r5, r0
 8003196:	b911      	cbnz	r1, 800319e <sbrk_aligned+0x12>
 8003198:	f000 fca4 	bl	8003ae4 <_sbrk_r>
 800319c:	6030      	str	r0, [r6, #0]
 800319e:	4621      	mov	r1, r4
 80031a0:	4628      	mov	r0, r5
 80031a2:	f000 fc9f 	bl	8003ae4 <_sbrk_r>
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	d103      	bne.n	80031b2 <sbrk_aligned+0x26>
 80031aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80031ae:	4620      	mov	r0, r4
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	1cc4      	adds	r4, r0, #3
 80031b4:	f024 0403 	bic.w	r4, r4, #3
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d0f8      	beq.n	80031ae <sbrk_aligned+0x22>
 80031bc:	1a21      	subs	r1, r4, r0
 80031be:	4628      	mov	r0, r5
 80031c0:	f000 fc90 	bl	8003ae4 <_sbrk_r>
 80031c4:	3001      	adds	r0, #1
 80031c6:	d1f2      	bne.n	80031ae <sbrk_aligned+0x22>
 80031c8:	e7ef      	b.n	80031aa <sbrk_aligned+0x1e>
 80031ca:	bf00      	nop
 80031cc:	20000294 	.word	0x20000294

080031d0 <_malloc_r>:
 80031d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d4:	1ccd      	adds	r5, r1, #3
 80031d6:	f025 0503 	bic.w	r5, r5, #3
 80031da:	3508      	adds	r5, #8
 80031dc:	2d0c      	cmp	r5, #12
 80031de:	bf38      	it	cc
 80031e0:	250c      	movcc	r5, #12
 80031e2:	2d00      	cmp	r5, #0
 80031e4:	4606      	mov	r6, r0
 80031e6:	db01      	blt.n	80031ec <_malloc_r+0x1c>
 80031e8:	42a9      	cmp	r1, r5
 80031ea:	d904      	bls.n	80031f6 <_malloc_r+0x26>
 80031ec:	230c      	movs	r3, #12
 80031ee:	6033      	str	r3, [r6, #0]
 80031f0:	2000      	movs	r0, #0
 80031f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032cc <_malloc_r+0xfc>
 80031fa:	f000 f869 	bl	80032d0 <__malloc_lock>
 80031fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003202:	461c      	mov	r4, r3
 8003204:	bb44      	cbnz	r4, 8003258 <_malloc_r+0x88>
 8003206:	4629      	mov	r1, r5
 8003208:	4630      	mov	r0, r6
 800320a:	f7ff ffbf 	bl	800318c <sbrk_aligned>
 800320e:	1c43      	adds	r3, r0, #1
 8003210:	4604      	mov	r4, r0
 8003212:	d158      	bne.n	80032c6 <_malloc_r+0xf6>
 8003214:	f8d8 4000 	ldr.w	r4, [r8]
 8003218:	4627      	mov	r7, r4
 800321a:	2f00      	cmp	r7, #0
 800321c:	d143      	bne.n	80032a6 <_malloc_r+0xd6>
 800321e:	2c00      	cmp	r4, #0
 8003220:	d04b      	beq.n	80032ba <_malloc_r+0xea>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	4639      	mov	r1, r7
 8003226:	4630      	mov	r0, r6
 8003228:	eb04 0903 	add.w	r9, r4, r3
 800322c:	f000 fc5a 	bl	8003ae4 <_sbrk_r>
 8003230:	4581      	cmp	r9, r0
 8003232:	d142      	bne.n	80032ba <_malloc_r+0xea>
 8003234:	6821      	ldr	r1, [r4, #0]
 8003236:	1a6d      	subs	r5, r5, r1
 8003238:	4629      	mov	r1, r5
 800323a:	4630      	mov	r0, r6
 800323c:	f7ff ffa6 	bl	800318c <sbrk_aligned>
 8003240:	3001      	adds	r0, #1
 8003242:	d03a      	beq.n	80032ba <_malloc_r+0xea>
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	442b      	add	r3, r5
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	f8d8 3000 	ldr.w	r3, [r8]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	bb62      	cbnz	r2, 80032ac <_malloc_r+0xdc>
 8003252:	f8c8 7000 	str.w	r7, [r8]
 8003256:	e00f      	b.n	8003278 <_malloc_r+0xa8>
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	1b52      	subs	r2, r2, r5
 800325c:	d420      	bmi.n	80032a0 <_malloc_r+0xd0>
 800325e:	2a0b      	cmp	r2, #11
 8003260:	d917      	bls.n	8003292 <_malloc_r+0xc2>
 8003262:	1961      	adds	r1, r4, r5
 8003264:	42a3      	cmp	r3, r4
 8003266:	6025      	str	r5, [r4, #0]
 8003268:	bf18      	it	ne
 800326a:	6059      	strne	r1, [r3, #4]
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	bf08      	it	eq
 8003270:	f8c8 1000 	streq.w	r1, [r8]
 8003274:	5162      	str	r2, [r4, r5]
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	4630      	mov	r0, r6
 800327a:	f000 f82f 	bl	80032dc <__malloc_unlock>
 800327e:	f104 000b 	add.w	r0, r4, #11
 8003282:	1d23      	adds	r3, r4, #4
 8003284:	f020 0007 	bic.w	r0, r0, #7
 8003288:	1ac2      	subs	r2, r0, r3
 800328a:	bf1c      	itt	ne
 800328c:	1a1b      	subne	r3, r3, r0
 800328e:	50a3      	strne	r3, [r4, r2]
 8003290:	e7af      	b.n	80031f2 <_malloc_r+0x22>
 8003292:	6862      	ldr	r2, [r4, #4]
 8003294:	42a3      	cmp	r3, r4
 8003296:	bf0c      	ite	eq
 8003298:	f8c8 2000 	streq.w	r2, [r8]
 800329c:	605a      	strne	r2, [r3, #4]
 800329e:	e7eb      	b.n	8003278 <_malloc_r+0xa8>
 80032a0:	4623      	mov	r3, r4
 80032a2:	6864      	ldr	r4, [r4, #4]
 80032a4:	e7ae      	b.n	8003204 <_malloc_r+0x34>
 80032a6:	463c      	mov	r4, r7
 80032a8:	687f      	ldr	r7, [r7, #4]
 80032aa:	e7b6      	b.n	800321a <_malloc_r+0x4a>
 80032ac:	461a      	mov	r2, r3
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	42a3      	cmp	r3, r4
 80032b2:	d1fb      	bne.n	80032ac <_malloc_r+0xdc>
 80032b4:	2300      	movs	r3, #0
 80032b6:	6053      	str	r3, [r2, #4]
 80032b8:	e7de      	b.n	8003278 <_malloc_r+0xa8>
 80032ba:	230c      	movs	r3, #12
 80032bc:	6033      	str	r3, [r6, #0]
 80032be:	4630      	mov	r0, r6
 80032c0:	f000 f80c 	bl	80032dc <__malloc_unlock>
 80032c4:	e794      	b.n	80031f0 <_malloc_r+0x20>
 80032c6:	6005      	str	r5, [r0, #0]
 80032c8:	e7d6      	b.n	8003278 <_malloc_r+0xa8>
 80032ca:	bf00      	nop
 80032cc:	20000298 	.word	0x20000298

080032d0 <__malloc_lock>:
 80032d0:	4801      	ldr	r0, [pc, #4]	@ (80032d8 <__malloc_lock+0x8>)
 80032d2:	f7ff bf0e 	b.w	80030f2 <__retarget_lock_acquire_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000290 	.word	0x20000290

080032dc <__malloc_unlock>:
 80032dc:	4801      	ldr	r0, [pc, #4]	@ (80032e4 <__malloc_unlock+0x8>)
 80032de:	f7ff bf09 	b.w	80030f4 <__retarget_lock_release_recursive>
 80032e2:	bf00      	nop
 80032e4:	20000290 	.word	0x20000290

080032e8 <__sfputc_r>:
 80032e8:	6893      	ldr	r3, [r2, #8]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	b410      	push	{r4}
 80032f0:	6093      	str	r3, [r2, #8]
 80032f2:	da08      	bge.n	8003306 <__sfputc_r+0x1e>
 80032f4:	6994      	ldr	r4, [r2, #24]
 80032f6:	42a3      	cmp	r3, r4
 80032f8:	db01      	blt.n	80032fe <__sfputc_r+0x16>
 80032fa:	290a      	cmp	r1, #10
 80032fc:	d103      	bne.n	8003306 <__sfputc_r+0x1e>
 80032fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003302:	f7ff bde8 	b.w	8002ed6 <__swbuf_r>
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	1c58      	adds	r0, r3, #1
 800330a:	6010      	str	r0, [r2, #0]
 800330c:	7019      	strb	r1, [r3, #0]
 800330e:	4608      	mov	r0, r1
 8003310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003314:	4770      	bx	lr

08003316 <__sfputs_r>:
 8003316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003318:	4606      	mov	r6, r0
 800331a:	460f      	mov	r7, r1
 800331c:	4614      	mov	r4, r2
 800331e:	18d5      	adds	r5, r2, r3
 8003320:	42ac      	cmp	r4, r5
 8003322:	d101      	bne.n	8003328 <__sfputs_r+0x12>
 8003324:	2000      	movs	r0, #0
 8003326:	e007      	b.n	8003338 <__sfputs_r+0x22>
 8003328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332c:	463a      	mov	r2, r7
 800332e:	4630      	mov	r0, r6
 8003330:	f7ff ffda 	bl	80032e8 <__sfputc_r>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d1f3      	bne.n	8003320 <__sfputs_r+0xa>
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800333c <_vfiprintf_r>:
 800333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	460d      	mov	r5, r1
 8003342:	b09d      	sub	sp, #116	@ 0x74
 8003344:	4614      	mov	r4, r2
 8003346:	4698      	mov	r8, r3
 8003348:	4606      	mov	r6, r0
 800334a:	b118      	cbz	r0, 8003354 <_vfiprintf_r+0x18>
 800334c:	6a03      	ldr	r3, [r0, #32]
 800334e:	b90b      	cbnz	r3, 8003354 <_vfiprintf_r+0x18>
 8003350:	f7ff fcd8 	bl	8002d04 <__sinit>
 8003354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003356:	07d9      	lsls	r1, r3, #31
 8003358:	d405      	bmi.n	8003366 <_vfiprintf_r+0x2a>
 800335a:	89ab      	ldrh	r3, [r5, #12]
 800335c:	059a      	lsls	r2, r3, #22
 800335e:	d402      	bmi.n	8003366 <_vfiprintf_r+0x2a>
 8003360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003362:	f7ff fec6 	bl	80030f2 <__retarget_lock_acquire_recursive>
 8003366:	89ab      	ldrh	r3, [r5, #12]
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	d501      	bpl.n	8003370 <_vfiprintf_r+0x34>
 800336c:	692b      	ldr	r3, [r5, #16]
 800336e:	b99b      	cbnz	r3, 8003398 <_vfiprintf_r+0x5c>
 8003370:	4629      	mov	r1, r5
 8003372:	4630      	mov	r0, r6
 8003374:	f7ff fdee 	bl	8002f54 <__swsetup_r>
 8003378:	b170      	cbz	r0, 8003398 <_vfiprintf_r+0x5c>
 800337a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800337c:	07dc      	lsls	r4, r3, #31
 800337e:	d504      	bpl.n	800338a <_vfiprintf_r+0x4e>
 8003380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003384:	b01d      	add	sp, #116	@ 0x74
 8003386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800338a:	89ab      	ldrh	r3, [r5, #12]
 800338c:	0598      	lsls	r0, r3, #22
 800338e:	d4f7      	bmi.n	8003380 <_vfiprintf_r+0x44>
 8003390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003392:	f7ff feaf 	bl	80030f4 <__retarget_lock_release_recursive>
 8003396:	e7f3      	b.n	8003380 <_vfiprintf_r+0x44>
 8003398:	2300      	movs	r3, #0
 800339a:	9309      	str	r3, [sp, #36]	@ 0x24
 800339c:	2320      	movs	r3, #32
 800339e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a6:	2330      	movs	r3, #48	@ 0x30
 80033a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003558 <_vfiprintf_r+0x21c>
 80033ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033b0:	f04f 0901 	mov.w	r9, #1
 80033b4:	4623      	mov	r3, r4
 80033b6:	469a      	mov	sl, r3
 80033b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033bc:	b10a      	cbz	r2, 80033c2 <_vfiprintf_r+0x86>
 80033be:	2a25      	cmp	r2, #37	@ 0x25
 80033c0:	d1f9      	bne.n	80033b6 <_vfiprintf_r+0x7a>
 80033c2:	ebba 0b04 	subs.w	fp, sl, r4
 80033c6:	d00b      	beq.n	80033e0 <_vfiprintf_r+0xa4>
 80033c8:	465b      	mov	r3, fp
 80033ca:	4622      	mov	r2, r4
 80033cc:	4629      	mov	r1, r5
 80033ce:	4630      	mov	r0, r6
 80033d0:	f7ff ffa1 	bl	8003316 <__sfputs_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	f000 80a7 	beq.w	8003528 <_vfiprintf_r+0x1ec>
 80033da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033dc:	445a      	add	r2, fp
 80033de:	9209      	str	r2, [sp, #36]	@ 0x24
 80033e0:	f89a 3000 	ldrb.w	r3, [sl]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 809f 	beq.w	8003528 <_vfiprintf_r+0x1ec>
 80033ea:	2300      	movs	r3, #0
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f4:	f10a 0a01 	add.w	sl, sl, #1
 80033f8:	9304      	str	r3, [sp, #16]
 80033fa:	9307      	str	r3, [sp, #28]
 80033fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003400:	931a      	str	r3, [sp, #104]	@ 0x68
 8003402:	4654      	mov	r4, sl
 8003404:	2205      	movs	r2, #5
 8003406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340a:	4853      	ldr	r0, [pc, #332]	@ (8003558 <_vfiprintf_r+0x21c>)
 800340c:	f7fc fee0 	bl	80001d0 <memchr>
 8003410:	9a04      	ldr	r2, [sp, #16]
 8003412:	b9d8      	cbnz	r0, 800344c <_vfiprintf_r+0x110>
 8003414:	06d1      	lsls	r1, r2, #27
 8003416:	bf44      	itt	mi
 8003418:	2320      	movmi	r3, #32
 800341a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800341e:	0713      	lsls	r3, r2, #28
 8003420:	bf44      	itt	mi
 8003422:	232b      	movmi	r3, #43	@ 0x2b
 8003424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003428:	f89a 3000 	ldrb.w	r3, [sl]
 800342c:	2b2a      	cmp	r3, #42	@ 0x2a
 800342e:	d015      	beq.n	800345c <_vfiprintf_r+0x120>
 8003430:	9a07      	ldr	r2, [sp, #28]
 8003432:	4654      	mov	r4, sl
 8003434:	2000      	movs	r0, #0
 8003436:	f04f 0c0a 	mov.w	ip, #10
 800343a:	4621      	mov	r1, r4
 800343c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003440:	3b30      	subs	r3, #48	@ 0x30
 8003442:	2b09      	cmp	r3, #9
 8003444:	d94b      	bls.n	80034de <_vfiprintf_r+0x1a2>
 8003446:	b1b0      	cbz	r0, 8003476 <_vfiprintf_r+0x13a>
 8003448:	9207      	str	r2, [sp, #28]
 800344a:	e014      	b.n	8003476 <_vfiprintf_r+0x13a>
 800344c:	eba0 0308 	sub.w	r3, r0, r8
 8003450:	fa09 f303 	lsl.w	r3, r9, r3
 8003454:	4313      	orrs	r3, r2
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	46a2      	mov	sl, r4
 800345a:	e7d2      	b.n	8003402 <_vfiprintf_r+0xc6>
 800345c:	9b03      	ldr	r3, [sp, #12]
 800345e:	1d19      	adds	r1, r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	9103      	str	r1, [sp, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	bfbb      	ittet	lt
 8003468:	425b      	neglt	r3, r3
 800346a:	f042 0202 	orrlt.w	r2, r2, #2
 800346e:	9307      	strge	r3, [sp, #28]
 8003470:	9307      	strlt	r3, [sp, #28]
 8003472:	bfb8      	it	lt
 8003474:	9204      	strlt	r2, [sp, #16]
 8003476:	7823      	ldrb	r3, [r4, #0]
 8003478:	2b2e      	cmp	r3, #46	@ 0x2e
 800347a:	d10a      	bne.n	8003492 <_vfiprintf_r+0x156>
 800347c:	7863      	ldrb	r3, [r4, #1]
 800347e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003480:	d132      	bne.n	80034e8 <_vfiprintf_r+0x1ac>
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	1d1a      	adds	r2, r3, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	9203      	str	r2, [sp, #12]
 800348a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800348e:	3402      	adds	r4, #2
 8003490:	9305      	str	r3, [sp, #20]
 8003492:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003568 <_vfiprintf_r+0x22c>
 8003496:	7821      	ldrb	r1, [r4, #0]
 8003498:	2203      	movs	r2, #3
 800349a:	4650      	mov	r0, sl
 800349c:	f7fc fe98 	bl	80001d0 <memchr>
 80034a0:	b138      	cbz	r0, 80034b2 <_vfiprintf_r+0x176>
 80034a2:	9b04      	ldr	r3, [sp, #16]
 80034a4:	eba0 000a 	sub.w	r0, r0, sl
 80034a8:	2240      	movs	r2, #64	@ 0x40
 80034aa:	4082      	lsls	r2, r0
 80034ac:	4313      	orrs	r3, r2
 80034ae:	3401      	adds	r4, #1
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b6:	4829      	ldr	r0, [pc, #164]	@ (800355c <_vfiprintf_r+0x220>)
 80034b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034bc:	2206      	movs	r2, #6
 80034be:	f7fc fe87 	bl	80001d0 <memchr>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d03f      	beq.n	8003546 <_vfiprintf_r+0x20a>
 80034c6:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <_vfiprintf_r+0x224>)
 80034c8:	bb1b      	cbnz	r3, 8003512 <_vfiprintf_r+0x1d6>
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	3307      	adds	r3, #7
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	3308      	adds	r3, #8
 80034d4:	9303      	str	r3, [sp, #12]
 80034d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034d8:	443b      	add	r3, r7
 80034da:	9309      	str	r3, [sp, #36]	@ 0x24
 80034dc:	e76a      	b.n	80033b4 <_vfiprintf_r+0x78>
 80034de:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e2:	460c      	mov	r4, r1
 80034e4:	2001      	movs	r0, #1
 80034e6:	e7a8      	b.n	800343a <_vfiprintf_r+0xfe>
 80034e8:	2300      	movs	r3, #0
 80034ea:	3401      	adds	r4, #1
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 0c0a 	mov.w	ip, #10
 80034f4:	4620      	mov	r0, r4
 80034f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fa:	3a30      	subs	r2, #48	@ 0x30
 80034fc:	2a09      	cmp	r2, #9
 80034fe:	d903      	bls.n	8003508 <_vfiprintf_r+0x1cc>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0c6      	beq.n	8003492 <_vfiprintf_r+0x156>
 8003504:	9105      	str	r1, [sp, #20]
 8003506:	e7c4      	b.n	8003492 <_vfiprintf_r+0x156>
 8003508:	fb0c 2101 	mla	r1, ip, r1, r2
 800350c:	4604      	mov	r4, r0
 800350e:	2301      	movs	r3, #1
 8003510:	e7f0      	b.n	80034f4 <_vfiprintf_r+0x1b8>
 8003512:	ab03      	add	r3, sp, #12
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	462a      	mov	r2, r5
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <_vfiprintf_r+0x228>)
 800351a:	a904      	add	r1, sp, #16
 800351c:	4630      	mov	r0, r6
 800351e:	f3af 8000 	nop.w
 8003522:	4607      	mov	r7, r0
 8003524:	1c78      	adds	r0, r7, #1
 8003526:	d1d6      	bne.n	80034d6 <_vfiprintf_r+0x19a>
 8003528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800352a:	07d9      	lsls	r1, r3, #31
 800352c:	d405      	bmi.n	800353a <_vfiprintf_r+0x1fe>
 800352e:	89ab      	ldrh	r3, [r5, #12]
 8003530:	059a      	lsls	r2, r3, #22
 8003532:	d402      	bmi.n	800353a <_vfiprintf_r+0x1fe>
 8003534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003536:	f7ff fddd 	bl	80030f4 <__retarget_lock_release_recursive>
 800353a:	89ab      	ldrh	r3, [r5, #12]
 800353c:	065b      	lsls	r3, r3, #25
 800353e:	f53f af1f 	bmi.w	8003380 <_vfiprintf_r+0x44>
 8003542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003544:	e71e      	b.n	8003384 <_vfiprintf_r+0x48>
 8003546:	ab03      	add	r3, sp, #12
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	462a      	mov	r2, r5
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <_vfiprintf_r+0x228>)
 800354e:	a904      	add	r1, sp, #16
 8003550:	4630      	mov	r0, r6
 8003552:	f000 f879 	bl	8003648 <_printf_i>
 8003556:	e7e4      	b.n	8003522 <_vfiprintf_r+0x1e6>
 8003558:	08004bd8 	.word	0x08004bd8
 800355c:	08004be2 	.word	0x08004be2
 8003560:	00000000 	.word	0x00000000
 8003564:	08003317 	.word	0x08003317
 8003568:	08004bde 	.word	0x08004bde

0800356c <_printf_common>:
 800356c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	4616      	mov	r6, r2
 8003572:	4698      	mov	r8, r3
 8003574:	688a      	ldr	r2, [r1, #8]
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800357c:	4293      	cmp	r3, r2
 800357e:	bfb8      	it	lt
 8003580:	4613      	movlt	r3, r2
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003588:	4607      	mov	r7, r0
 800358a:	460c      	mov	r4, r1
 800358c:	b10a      	cbz	r2, 8003592 <_printf_common+0x26>
 800358e:	3301      	adds	r3, #1
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	0699      	lsls	r1, r3, #26
 8003596:	bf42      	ittt	mi
 8003598:	6833      	ldrmi	r3, [r6, #0]
 800359a:	3302      	addmi	r3, #2
 800359c:	6033      	strmi	r3, [r6, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	f015 0506 	ands.w	r5, r5, #6
 80035a4:	d106      	bne.n	80035b4 <_printf_common+0x48>
 80035a6:	f104 0a19 	add.w	sl, r4, #25
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	6832      	ldr	r2, [r6, #0]
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	42ab      	cmp	r3, r5
 80035b2:	dc26      	bgt.n	8003602 <_printf_common+0x96>
 80035b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	3b00      	subs	r3, #0
 80035bc:	bf18      	it	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	0692      	lsls	r2, r2, #26
 80035c2:	d42b      	bmi.n	800361c <_printf_common+0xb0>
 80035c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035c8:	4641      	mov	r1, r8
 80035ca:	4638      	mov	r0, r7
 80035cc:	47c8      	blx	r9
 80035ce:	3001      	adds	r0, #1
 80035d0:	d01e      	beq.n	8003610 <_printf_common+0xa4>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	6922      	ldr	r2, [r4, #16]
 80035d6:	f003 0306 	and.w	r3, r3, #6
 80035da:	2b04      	cmp	r3, #4
 80035dc:	bf02      	ittt	eq
 80035de:	68e5      	ldreq	r5, [r4, #12]
 80035e0:	6833      	ldreq	r3, [r6, #0]
 80035e2:	1aed      	subeq	r5, r5, r3
 80035e4:	68a3      	ldr	r3, [r4, #8]
 80035e6:	bf0c      	ite	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	2500      	movne	r5, #0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	bfc4      	itt	gt
 80035f2:	1a9b      	subgt	r3, r3, r2
 80035f4:	18ed      	addgt	r5, r5, r3
 80035f6:	2600      	movs	r6, #0
 80035f8:	341a      	adds	r4, #26
 80035fa:	42b5      	cmp	r5, r6
 80035fc:	d11a      	bne.n	8003634 <_printf_common+0xc8>
 80035fe:	2000      	movs	r0, #0
 8003600:	e008      	b.n	8003614 <_printf_common+0xa8>
 8003602:	2301      	movs	r3, #1
 8003604:	4652      	mov	r2, sl
 8003606:	4641      	mov	r1, r8
 8003608:	4638      	mov	r0, r7
 800360a:	47c8      	blx	r9
 800360c:	3001      	adds	r0, #1
 800360e:	d103      	bne.n	8003618 <_printf_common+0xac>
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	3501      	adds	r5, #1
 800361a:	e7c6      	b.n	80035aa <_printf_common+0x3e>
 800361c:	18e1      	adds	r1, r4, r3
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	2030      	movs	r0, #48	@ 0x30
 8003622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003626:	4422      	add	r2, r4
 8003628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800362c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003630:	3302      	adds	r3, #2
 8003632:	e7c7      	b.n	80035c4 <_printf_common+0x58>
 8003634:	2301      	movs	r3, #1
 8003636:	4622      	mov	r2, r4
 8003638:	4641      	mov	r1, r8
 800363a:	4638      	mov	r0, r7
 800363c:	47c8      	blx	r9
 800363e:	3001      	adds	r0, #1
 8003640:	d0e6      	beq.n	8003610 <_printf_common+0xa4>
 8003642:	3601      	adds	r6, #1
 8003644:	e7d9      	b.n	80035fa <_printf_common+0x8e>
	...

08003648 <_printf_i>:
 8003648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	7e0f      	ldrb	r7, [r1, #24]
 800364e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003650:	2f78      	cmp	r7, #120	@ 0x78
 8003652:	4691      	mov	r9, r2
 8003654:	4680      	mov	r8, r0
 8003656:	460c      	mov	r4, r1
 8003658:	469a      	mov	sl, r3
 800365a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800365e:	d807      	bhi.n	8003670 <_printf_i+0x28>
 8003660:	2f62      	cmp	r7, #98	@ 0x62
 8003662:	d80a      	bhi.n	800367a <_printf_i+0x32>
 8003664:	2f00      	cmp	r7, #0
 8003666:	f000 80d1 	beq.w	800380c <_printf_i+0x1c4>
 800366a:	2f58      	cmp	r7, #88	@ 0x58
 800366c:	f000 80b8 	beq.w	80037e0 <_printf_i+0x198>
 8003670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003678:	e03a      	b.n	80036f0 <_printf_i+0xa8>
 800367a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800367e:	2b15      	cmp	r3, #21
 8003680:	d8f6      	bhi.n	8003670 <_printf_i+0x28>
 8003682:	a101      	add	r1, pc, #4	@ (adr r1, 8003688 <_printf_i+0x40>)
 8003684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036f5 	.word	0x080036f5
 8003690:	08003671 	.word	0x08003671
 8003694:	08003671 	.word	0x08003671
 8003698:	08003671 	.word	0x08003671
 800369c:	08003671 	.word	0x08003671
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	08003671 	.word	0x08003671
 80036a8:	08003671 	.word	0x08003671
 80036ac:	08003671 	.word	0x08003671
 80036b0:	08003671 	.word	0x08003671
 80036b4:	080037f3 	.word	0x080037f3
 80036b8:	0800371f 	.word	0x0800371f
 80036bc:	080037ad 	.word	0x080037ad
 80036c0:	08003671 	.word	0x08003671
 80036c4:	08003671 	.word	0x08003671
 80036c8:	08003815 	.word	0x08003815
 80036cc:	08003671 	.word	0x08003671
 80036d0:	0800371f 	.word	0x0800371f
 80036d4:	08003671 	.word	0x08003671
 80036d8:	08003671 	.word	0x08003671
 80036dc:	080037b5 	.word	0x080037b5
 80036e0:	6833      	ldr	r3, [r6, #0]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6032      	str	r2, [r6, #0]
 80036e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036f0:	2301      	movs	r3, #1
 80036f2:	e09c      	b.n	800382e <_printf_i+0x1e6>
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	1d19      	adds	r1, r3, #4
 80036fa:	6031      	str	r1, [r6, #0]
 80036fc:	0606      	lsls	r6, r0, #24
 80036fe:	d501      	bpl.n	8003704 <_printf_i+0xbc>
 8003700:	681d      	ldr	r5, [r3, #0]
 8003702:	e003      	b.n	800370c <_printf_i+0xc4>
 8003704:	0645      	lsls	r5, r0, #25
 8003706:	d5fb      	bpl.n	8003700 <_printf_i+0xb8>
 8003708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800370c:	2d00      	cmp	r5, #0
 800370e:	da03      	bge.n	8003718 <_printf_i+0xd0>
 8003710:	232d      	movs	r3, #45	@ 0x2d
 8003712:	426d      	negs	r5, r5
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003718:	4858      	ldr	r0, [pc, #352]	@ (800387c <_printf_i+0x234>)
 800371a:	230a      	movs	r3, #10
 800371c:	e011      	b.n	8003742 <_printf_i+0xfa>
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	0608      	lsls	r0, r1, #24
 8003724:	f853 5b04 	ldr.w	r5, [r3], #4
 8003728:	d402      	bmi.n	8003730 <_printf_i+0xe8>
 800372a:	0649      	lsls	r1, r1, #25
 800372c:	bf48      	it	mi
 800372e:	b2ad      	uxthmi	r5, r5
 8003730:	2f6f      	cmp	r7, #111	@ 0x6f
 8003732:	4852      	ldr	r0, [pc, #328]	@ (800387c <_printf_i+0x234>)
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	bf14      	ite	ne
 8003738:	230a      	movne	r3, #10
 800373a:	2308      	moveq	r3, #8
 800373c:	2100      	movs	r1, #0
 800373e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003742:	6866      	ldr	r6, [r4, #4]
 8003744:	60a6      	str	r6, [r4, #8]
 8003746:	2e00      	cmp	r6, #0
 8003748:	db05      	blt.n	8003756 <_printf_i+0x10e>
 800374a:	6821      	ldr	r1, [r4, #0]
 800374c:	432e      	orrs	r6, r5
 800374e:	f021 0104 	bic.w	r1, r1, #4
 8003752:	6021      	str	r1, [r4, #0]
 8003754:	d04b      	beq.n	80037ee <_printf_i+0x1a6>
 8003756:	4616      	mov	r6, r2
 8003758:	fbb5 f1f3 	udiv	r1, r5, r3
 800375c:	fb03 5711 	mls	r7, r3, r1, r5
 8003760:	5dc7      	ldrb	r7, [r0, r7]
 8003762:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003766:	462f      	mov	r7, r5
 8003768:	42bb      	cmp	r3, r7
 800376a:	460d      	mov	r5, r1
 800376c:	d9f4      	bls.n	8003758 <_printf_i+0x110>
 800376e:	2b08      	cmp	r3, #8
 8003770:	d10b      	bne.n	800378a <_printf_i+0x142>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	07df      	lsls	r7, r3, #31
 8003776:	d508      	bpl.n	800378a <_printf_i+0x142>
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	6861      	ldr	r1, [r4, #4]
 800377c:	4299      	cmp	r1, r3
 800377e:	bfde      	ittt	le
 8003780:	2330      	movle	r3, #48	@ 0x30
 8003782:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003786:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800378a:	1b92      	subs	r2, r2, r6
 800378c:	6122      	str	r2, [r4, #16]
 800378e:	f8cd a000 	str.w	sl, [sp]
 8003792:	464b      	mov	r3, r9
 8003794:	aa03      	add	r2, sp, #12
 8003796:	4621      	mov	r1, r4
 8003798:	4640      	mov	r0, r8
 800379a:	f7ff fee7 	bl	800356c <_printf_common>
 800379e:	3001      	adds	r0, #1
 80037a0:	d14a      	bne.n	8003838 <_printf_i+0x1f0>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037a6:	b004      	add	sp, #16
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	f043 0320 	orr.w	r3, r3, #32
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	4832      	ldr	r0, [pc, #200]	@ (8003880 <_printf_i+0x238>)
 80037b6:	2778      	movs	r7, #120	@ 0x78
 80037b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	6831      	ldr	r1, [r6, #0]
 80037c0:	061f      	lsls	r7, r3, #24
 80037c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80037c6:	d402      	bmi.n	80037ce <_printf_i+0x186>
 80037c8:	065f      	lsls	r7, r3, #25
 80037ca:	bf48      	it	mi
 80037cc:	b2ad      	uxthmi	r5, r5
 80037ce:	6031      	str	r1, [r6, #0]
 80037d0:	07d9      	lsls	r1, r3, #31
 80037d2:	bf44      	itt	mi
 80037d4:	f043 0320 	orrmi.w	r3, r3, #32
 80037d8:	6023      	strmi	r3, [r4, #0]
 80037da:	b11d      	cbz	r5, 80037e4 <_printf_i+0x19c>
 80037dc:	2310      	movs	r3, #16
 80037de:	e7ad      	b.n	800373c <_printf_i+0xf4>
 80037e0:	4826      	ldr	r0, [pc, #152]	@ (800387c <_printf_i+0x234>)
 80037e2:	e7e9      	b.n	80037b8 <_printf_i+0x170>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f023 0320 	bic.w	r3, r3, #32
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	e7f6      	b.n	80037dc <_printf_i+0x194>
 80037ee:	4616      	mov	r6, r2
 80037f0:	e7bd      	b.n	800376e <_printf_i+0x126>
 80037f2:	6833      	ldr	r3, [r6, #0]
 80037f4:	6825      	ldr	r5, [r4, #0]
 80037f6:	6961      	ldr	r1, [r4, #20]
 80037f8:	1d18      	adds	r0, r3, #4
 80037fa:	6030      	str	r0, [r6, #0]
 80037fc:	062e      	lsls	r6, r5, #24
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	d501      	bpl.n	8003806 <_printf_i+0x1be>
 8003802:	6019      	str	r1, [r3, #0]
 8003804:	e002      	b.n	800380c <_printf_i+0x1c4>
 8003806:	0668      	lsls	r0, r5, #25
 8003808:	d5fb      	bpl.n	8003802 <_printf_i+0x1ba>
 800380a:	8019      	strh	r1, [r3, #0]
 800380c:	2300      	movs	r3, #0
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	4616      	mov	r6, r2
 8003812:	e7bc      	b.n	800378e <_printf_i+0x146>
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	6032      	str	r2, [r6, #0]
 800381a:	681e      	ldr	r6, [r3, #0]
 800381c:	6862      	ldr	r2, [r4, #4]
 800381e:	2100      	movs	r1, #0
 8003820:	4630      	mov	r0, r6
 8003822:	f7fc fcd5 	bl	80001d0 <memchr>
 8003826:	b108      	cbz	r0, 800382c <_printf_i+0x1e4>
 8003828:	1b80      	subs	r0, r0, r6
 800382a:	6060      	str	r0, [r4, #4]
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	6123      	str	r3, [r4, #16]
 8003830:	2300      	movs	r3, #0
 8003832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003836:	e7aa      	b.n	800378e <_printf_i+0x146>
 8003838:	6923      	ldr	r3, [r4, #16]
 800383a:	4632      	mov	r2, r6
 800383c:	4649      	mov	r1, r9
 800383e:	4640      	mov	r0, r8
 8003840:	47d0      	blx	sl
 8003842:	3001      	adds	r0, #1
 8003844:	d0ad      	beq.n	80037a2 <_printf_i+0x15a>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	079b      	lsls	r3, r3, #30
 800384a:	d413      	bmi.n	8003874 <_printf_i+0x22c>
 800384c:	68e0      	ldr	r0, [r4, #12]
 800384e:	9b03      	ldr	r3, [sp, #12]
 8003850:	4298      	cmp	r0, r3
 8003852:	bfb8      	it	lt
 8003854:	4618      	movlt	r0, r3
 8003856:	e7a6      	b.n	80037a6 <_printf_i+0x15e>
 8003858:	2301      	movs	r3, #1
 800385a:	4632      	mov	r2, r6
 800385c:	4649      	mov	r1, r9
 800385e:	4640      	mov	r0, r8
 8003860:	47d0      	blx	sl
 8003862:	3001      	adds	r0, #1
 8003864:	d09d      	beq.n	80037a2 <_printf_i+0x15a>
 8003866:	3501      	adds	r5, #1
 8003868:	68e3      	ldr	r3, [r4, #12]
 800386a:	9903      	ldr	r1, [sp, #12]
 800386c:	1a5b      	subs	r3, r3, r1
 800386e:	42ab      	cmp	r3, r5
 8003870:	dcf2      	bgt.n	8003858 <_printf_i+0x210>
 8003872:	e7eb      	b.n	800384c <_printf_i+0x204>
 8003874:	2500      	movs	r5, #0
 8003876:	f104 0619 	add.w	r6, r4, #25
 800387a:	e7f5      	b.n	8003868 <_printf_i+0x220>
 800387c:	08004be9 	.word	0x08004be9
 8003880:	08004bfa 	.word	0x08004bfa

08003884 <__sflush_r>:
 8003884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388c:	0716      	lsls	r6, r2, #28
 800388e:	4605      	mov	r5, r0
 8003890:	460c      	mov	r4, r1
 8003892:	d454      	bmi.n	800393e <__sflush_r+0xba>
 8003894:	684b      	ldr	r3, [r1, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	dc02      	bgt.n	80038a0 <__sflush_r+0x1c>
 800389a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	dd48      	ble.n	8003932 <__sflush_r+0xae>
 80038a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d045      	beq.n	8003932 <__sflush_r+0xae>
 80038a6:	2300      	movs	r3, #0
 80038a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038ac:	682f      	ldr	r7, [r5, #0]
 80038ae:	6a21      	ldr	r1, [r4, #32]
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	d030      	beq.n	8003916 <__sflush_r+0x92>
 80038b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	0759      	lsls	r1, r3, #29
 80038ba:	d505      	bpl.n	80038c8 <__sflush_r+0x44>
 80038bc:	6863      	ldr	r3, [r4, #4]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038c2:	b10b      	cbz	r3, 80038c8 <__sflush_r+0x44>
 80038c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	2300      	movs	r3, #0
 80038ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038cc:	6a21      	ldr	r1, [r4, #32]
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b0      	blx	r6
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	d106      	bne.n	80038e6 <__sflush_r+0x62>
 80038d8:	6829      	ldr	r1, [r5, #0]
 80038da:	291d      	cmp	r1, #29
 80038dc:	d82b      	bhi.n	8003936 <__sflush_r+0xb2>
 80038de:	4a2a      	ldr	r2, [pc, #168]	@ (8003988 <__sflush_r+0x104>)
 80038e0:	40ca      	lsrs	r2, r1
 80038e2:	07d6      	lsls	r6, r2, #31
 80038e4:	d527      	bpl.n	8003936 <__sflush_r+0xb2>
 80038e6:	2200      	movs	r2, #0
 80038e8:	6062      	str	r2, [r4, #4]
 80038ea:	04d9      	lsls	r1, r3, #19
 80038ec:	6922      	ldr	r2, [r4, #16]
 80038ee:	6022      	str	r2, [r4, #0]
 80038f0:	d504      	bpl.n	80038fc <__sflush_r+0x78>
 80038f2:	1c42      	adds	r2, r0, #1
 80038f4:	d101      	bne.n	80038fa <__sflush_r+0x76>
 80038f6:	682b      	ldr	r3, [r5, #0]
 80038f8:	b903      	cbnz	r3, 80038fc <__sflush_r+0x78>
 80038fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80038fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038fe:	602f      	str	r7, [r5, #0]
 8003900:	b1b9      	cbz	r1, 8003932 <__sflush_r+0xae>
 8003902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003906:	4299      	cmp	r1, r3
 8003908:	d002      	beq.n	8003910 <__sflush_r+0x8c>
 800390a:	4628      	mov	r0, r5
 800390c:	f7ff fbf4 	bl	80030f8 <_free_r>
 8003910:	2300      	movs	r3, #0
 8003912:	6363      	str	r3, [r4, #52]	@ 0x34
 8003914:	e00d      	b.n	8003932 <__sflush_r+0xae>
 8003916:	2301      	movs	r3, #1
 8003918:	4628      	mov	r0, r5
 800391a:	47b0      	blx	r6
 800391c:	4602      	mov	r2, r0
 800391e:	1c50      	adds	r0, r2, #1
 8003920:	d1c9      	bne.n	80038b6 <__sflush_r+0x32>
 8003922:	682b      	ldr	r3, [r5, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0c6      	beq.n	80038b6 <__sflush_r+0x32>
 8003928:	2b1d      	cmp	r3, #29
 800392a:	d001      	beq.n	8003930 <__sflush_r+0xac>
 800392c:	2b16      	cmp	r3, #22
 800392e:	d11e      	bne.n	800396e <__sflush_r+0xea>
 8003930:	602f      	str	r7, [r5, #0]
 8003932:	2000      	movs	r0, #0
 8003934:	e022      	b.n	800397c <__sflush_r+0xf8>
 8003936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800393a:	b21b      	sxth	r3, r3
 800393c:	e01b      	b.n	8003976 <__sflush_r+0xf2>
 800393e:	690f      	ldr	r7, [r1, #16]
 8003940:	2f00      	cmp	r7, #0
 8003942:	d0f6      	beq.n	8003932 <__sflush_r+0xae>
 8003944:	0793      	lsls	r3, r2, #30
 8003946:	680e      	ldr	r6, [r1, #0]
 8003948:	bf08      	it	eq
 800394a:	694b      	ldreq	r3, [r1, #20]
 800394c:	600f      	str	r7, [r1, #0]
 800394e:	bf18      	it	ne
 8003950:	2300      	movne	r3, #0
 8003952:	eba6 0807 	sub.w	r8, r6, r7
 8003956:	608b      	str	r3, [r1, #8]
 8003958:	f1b8 0f00 	cmp.w	r8, #0
 800395c:	dde9      	ble.n	8003932 <__sflush_r+0xae>
 800395e:	6a21      	ldr	r1, [r4, #32]
 8003960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003962:	4643      	mov	r3, r8
 8003964:	463a      	mov	r2, r7
 8003966:	4628      	mov	r0, r5
 8003968:	47b0      	blx	r6
 800396a:	2800      	cmp	r0, #0
 800396c:	dc08      	bgt.n	8003980 <__sflush_r+0xfc>
 800396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003980:	4407      	add	r7, r0
 8003982:	eba8 0800 	sub.w	r8, r8, r0
 8003986:	e7e7      	b.n	8003958 <__sflush_r+0xd4>
 8003988:	20400001 	.word	0x20400001

0800398c <_fflush_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	690b      	ldr	r3, [r1, #16]
 8003990:	4605      	mov	r5, r0
 8003992:	460c      	mov	r4, r1
 8003994:	b913      	cbnz	r3, 800399c <_fflush_r+0x10>
 8003996:	2500      	movs	r5, #0
 8003998:	4628      	mov	r0, r5
 800399a:	bd38      	pop	{r3, r4, r5, pc}
 800399c:	b118      	cbz	r0, 80039a6 <_fflush_r+0x1a>
 800399e:	6a03      	ldr	r3, [r0, #32]
 80039a0:	b90b      	cbnz	r3, 80039a6 <_fflush_r+0x1a>
 80039a2:	f7ff f9af 	bl	8002d04 <__sinit>
 80039a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f3      	beq.n	8003996 <_fflush_r+0xa>
 80039ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039b0:	07d0      	lsls	r0, r2, #31
 80039b2:	d404      	bmi.n	80039be <_fflush_r+0x32>
 80039b4:	0599      	lsls	r1, r3, #22
 80039b6:	d402      	bmi.n	80039be <_fflush_r+0x32>
 80039b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ba:	f7ff fb9a 	bl	80030f2 <__retarget_lock_acquire_recursive>
 80039be:	4628      	mov	r0, r5
 80039c0:	4621      	mov	r1, r4
 80039c2:	f7ff ff5f 	bl	8003884 <__sflush_r>
 80039c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039c8:	07da      	lsls	r2, r3, #31
 80039ca:	4605      	mov	r5, r0
 80039cc:	d4e4      	bmi.n	8003998 <_fflush_r+0xc>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	059b      	lsls	r3, r3, #22
 80039d2:	d4e1      	bmi.n	8003998 <_fflush_r+0xc>
 80039d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039d6:	f7ff fb8d 	bl	80030f4 <__retarget_lock_release_recursive>
 80039da:	e7dd      	b.n	8003998 <_fflush_r+0xc>

080039dc <__swhatbuf_r>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	2900      	cmp	r1, #0
 80039e6:	b096      	sub	sp, #88	@ 0x58
 80039e8:	4615      	mov	r5, r2
 80039ea:	461e      	mov	r6, r3
 80039ec:	da0d      	bge.n	8003a0a <__swhatbuf_r+0x2e>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	bf14      	ite	ne
 80039fa:	2340      	movne	r3, #64	@ 0x40
 80039fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a00:	2000      	movs	r0, #0
 8003a02:	6031      	str	r1, [r6, #0]
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	b016      	add	sp, #88	@ 0x58
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	466a      	mov	r2, sp
 8003a0c:	f000 f848 	bl	8003aa0 <_fstat_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	dbec      	blt.n	80039ee <__swhatbuf_r+0x12>
 8003a14:	9901      	ldr	r1, [sp, #4]
 8003a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a1e:	4259      	negs	r1, r3
 8003a20:	4159      	adcs	r1, r3
 8003a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a26:	e7eb      	b.n	8003a00 <__swhatbuf_r+0x24>

08003a28 <__smakebuf_r>:
 8003a28:	898b      	ldrh	r3, [r1, #12]
 8003a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a2c:	079d      	lsls	r5, r3, #30
 8003a2e:	4606      	mov	r6, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	d507      	bpl.n	8003a44 <__smakebuf_r+0x1c>
 8003a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	6123      	str	r3, [r4, #16]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	6163      	str	r3, [r4, #20]
 8003a40:	b003      	add	sp, #12
 8003a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a44:	ab01      	add	r3, sp, #4
 8003a46:	466a      	mov	r2, sp
 8003a48:	f7ff ffc8 	bl	80039dc <__swhatbuf_r>
 8003a4c:	9f00      	ldr	r7, [sp, #0]
 8003a4e:	4605      	mov	r5, r0
 8003a50:	4639      	mov	r1, r7
 8003a52:	4630      	mov	r0, r6
 8003a54:	f7ff fbbc 	bl	80031d0 <_malloc_r>
 8003a58:	b948      	cbnz	r0, 8003a6e <__smakebuf_r+0x46>
 8003a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5e:	059a      	lsls	r2, r3, #22
 8003a60:	d4ee      	bmi.n	8003a40 <__smakebuf_r+0x18>
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	e7e2      	b.n	8003a34 <__smakebuf_r+0xc>
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	6020      	str	r0, [r4, #0]
 8003a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a76:	81a3      	strh	r3, [r4, #12]
 8003a78:	9b01      	ldr	r3, [sp, #4]
 8003a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a7e:	b15b      	cbz	r3, 8003a98 <__smakebuf_r+0x70>
 8003a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 f81d 	bl	8003ac4 <_isatty_r>
 8003a8a:	b128      	cbz	r0, 8003a98 <__smakebuf_r+0x70>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	431d      	orrs	r5, r3
 8003a9c:	81a5      	strh	r5, [r4, #12]
 8003a9e:	e7cf      	b.n	8003a40 <__smakebuf_r+0x18>

08003aa0 <_fstat_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d07      	ldr	r5, [pc, #28]	@ (8003ac0 <_fstat_r+0x20>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	f7fd fd01 	bl	80014b4 <_fstat>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	d102      	bne.n	8003abc <_fstat_r+0x1c>
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	b103      	cbz	r3, 8003abc <_fstat_r+0x1c>
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000028c 	.word	0x2000028c

08003ac4 <_isatty_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4d06      	ldr	r5, [pc, #24]	@ (8003ae0 <_isatty_r+0x1c>)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7fd fcf6 	bl	80014c0 <_isatty>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_isatty_r+0x1a>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_isatty_r+0x1a>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	2000028c 	.word	0x2000028c

08003ae4 <_sbrk_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d06      	ldr	r5, [pc, #24]	@ (8003b00 <_sbrk_r+0x1c>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	f7fd fcea 	bl	80014c8 <_sbrk>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_sbrk_r+0x1a>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_sbrk_r+0x1a>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	2000028c 	.word	0x2000028c
 8003b04:	00000000 	.word	0x00000000

08003b08 <sin>:
 8003b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b0a:	ec53 2b10 	vmov	r2, r3, d0
 8003b0e:	4826      	ldr	r0, [pc, #152]	@ (8003ba8 <sin+0xa0>)
 8003b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b14:	4281      	cmp	r1, r0
 8003b16:	d807      	bhi.n	8003b28 <sin+0x20>
 8003b18:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003ba0 <sin+0x98>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	b005      	add	sp, #20
 8003b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b24:	f000 b90c 	b.w	8003d40 <__kernel_sin>
 8003b28:	4820      	ldr	r0, [pc, #128]	@ (8003bac <sin+0xa4>)
 8003b2a:	4281      	cmp	r1, r0
 8003b2c:	d908      	bls.n	8003b40 <sin+0x38>
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	f7fc fccb 	bl	80004cc <__aeabi_dsub>
 8003b36:	ec41 0b10 	vmov	d0, r0, r1
 8003b3a:	b005      	add	sp, #20
 8003b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b40:	4668      	mov	r0, sp
 8003b42:	f000 f9b9 	bl	8003eb8 <__ieee754_rem_pio2>
 8003b46:	f000 0003 	and.w	r0, r0, #3
 8003b4a:	2801      	cmp	r0, #1
 8003b4c:	d00c      	beq.n	8003b68 <sin+0x60>
 8003b4e:	2802      	cmp	r0, #2
 8003b50:	d011      	beq.n	8003b76 <sin+0x6e>
 8003b52:	b9e8      	cbnz	r0, 8003b90 <sin+0x88>
 8003b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b58:	ed9d 0b00 	vldr	d0, [sp]
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f000 f8ef 	bl	8003d40 <__kernel_sin>
 8003b62:	ec51 0b10 	vmov	r0, r1, d0
 8003b66:	e7e6      	b.n	8003b36 <sin+0x2e>
 8003b68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b6c:	ed9d 0b00 	vldr	d0, [sp]
 8003b70:	f000 f81e 	bl	8003bb0 <__kernel_cos>
 8003b74:	e7f5      	b.n	8003b62 <sin+0x5a>
 8003b76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b7a:	ed9d 0b00 	vldr	d0, [sp]
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f000 f8de 	bl	8003d40 <__kernel_sin>
 8003b84:	ec53 2b10 	vmov	r2, r3, d0
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003b8e:	e7d2      	b.n	8003b36 <sin+0x2e>
 8003b90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b94:	ed9d 0b00 	vldr	d0, [sp]
 8003b98:	f000 f80a 	bl	8003bb0 <__kernel_cos>
 8003b9c:	e7f2      	b.n	8003b84 <sin+0x7c>
 8003b9e:	bf00      	nop
	...
 8003ba8:	3fe921fb 	.word	0x3fe921fb
 8003bac:	7fefffff 	.word	0x7fefffff

08003bb0 <__kernel_cos>:
 8003bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	ec57 6b10 	vmov	r6, r7, d0
 8003bb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003bbc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003bc0:	ed8d 1b00 	vstr	d1, [sp]
 8003bc4:	d206      	bcs.n	8003bd4 <__kernel_cos+0x24>
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	4639      	mov	r1, r7
 8003bca:	f7fc febf 	bl	800094c <__aeabi_d2iz>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	f000 8088 	beq.w	8003ce4 <__kernel_cos+0x134>
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	4630      	mov	r0, r6
 8003bda:	4639      	mov	r1, r7
 8003bdc:	f7fc fb48 	bl	8000270 <__aeabi_dmul>
 8003be0:	4b51      	ldr	r3, [pc, #324]	@ (8003d28 <__kernel_cos+0x178>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	f7fc fb42 	bl	8000270 <__aeabi_dmul>
 8003bec:	a340      	add	r3, pc, #256	@ (adr r3, 8003cf0 <__kernel_cos+0x140>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	4682      	mov	sl, r0
 8003bf4:	468b      	mov	fp, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fb39 	bl	8000270 <__aeabi_dmul>
 8003bfe:	a33e      	add	r3, pc, #248	@ (adr r3, 8003cf8 <__kernel_cos+0x148>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f7fc fc64 	bl	80004d0 <__adddf3>
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	f7fc fb30 	bl	8000270 <__aeabi_dmul>
 8003c10:	a33b      	add	r3, pc, #236	@ (adr r3, 8003d00 <__kernel_cos+0x150>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fc59 	bl	80004cc <__aeabi_dsub>
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f7fc fb27 	bl	8000270 <__aeabi_dmul>
 8003c22:	a339      	add	r3, pc, #228	@ (adr r3, 8003d08 <__kernel_cos+0x158>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fc52 	bl	80004d0 <__adddf3>
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	462b      	mov	r3, r5
 8003c30:	f7fc fb1e 	bl	8000270 <__aeabi_dmul>
 8003c34:	a336      	add	r3, pc, #216	@ (adr r3, 8003d10 <__kernel_cos+0x160>)
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f7fc fc47 	bl	80004cc <__aeabi_dsub>
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f7fc fb15 	bl	8000270 <__aeabi_dmul>
 8003c46:	a334      	add	r3, pc, #208	@ (adr r3, 8003d18 <__kernel_cos+0x168>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fc40 	bl	80004d0 <__adddf3>
 8003c50:	4622      	mov	r2, r4
 8003c52:	462b      	mov	r3, r5
 8003c54:	f7fc fb0c 	bl	8000270 <__aeabi_dmul>
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	f7fc fb08 	bl	8000270 <__aeabi_dmul>
 8003c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c64:	4604      	mov	r4, r0
 8003c66:	460d      	mov	r5, r1
 8003c68:	4630      	mov	r0, r6
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	f7fc fb00 	bl	8000270 <__aeabi_dmul>
 8003c70:	460b      	mov	r3, r1
 8003c72:	4602      	mov	r2, r0
 8003c74:	4629      	mov	r1, r5
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7fc fc28 	bl	80004cc <__aeabi_dsub>
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d2c <__kernel_cos+0x17c>)
 8003c7e:	4598      	cmp	r8, r3
 8003c80:	4606      	mov	r6, r0
 8003c82:	460f      	mov	r7, r1
 8003c84:	d810      	bhi.n	8003ca8 <__kernel_cos+0xf8>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4650      	mov	r0, sl
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	f7fc fc1d 	bl	80004cc <__aeabi_dsub>
 8003c92:	460b      	mov	r3, r1
 8003c94:	4926      	ldr	r1, [pc, #152]	@ (8003d30 <__kernel_cos+0x180>)
 8003c96:	4602      	mov	r2, r0
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7fc fc17 	bl	80004cc <__aeabi_dsub>
 8003c9e:	ec41 0b10 	vmov	d0, r0, r1
 8003ca2:	b003      	add	sp, #12
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca8:	4b22      	ldr	r3, [pc, #136]	@ (8003d34 <__kernel_cos+0x184>)
 8003caa:	4921      	ldr	r1, [pc, #132]	@ (8003d30 <__kernel_cos+0x180>)
 8003cac:	4598      	cmp	r8, r3
 8003cae:	bf8c      	ite	hi
 8003cb0:	4d21      	ldrhi	r5, [pc, #132]	@ (8003d38 <__kernel_cos+0x188>)
 8003cb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003cb6:	2400      	movs	r4, #0
 8003cb8:	4622      	mov	r2, r4
 8003cba:	462b      	mov	r3, r5
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f7fc fc05 	bl	80004cc <__aeabi_dsub>
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	4680      	mov	r8, r0
 8003cc6:	4689      	mov	r9, r1
 8003cc8:	462b      	mov	r3, r5
 8003cca:	4650      	mov	r0, sl
 8003ccc:	4659      	mov	r1, fp
 8003cce:	f7fc fbfd 	bl	80004cc <__aeabi_dsub>
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	f7fc fbf9 	bl	80004cc <__aeabi_dsub>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4640      	mov	r0, r8
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	e7da      	b.n	8003c9a <__kernel_cos+0xea>
 8003ce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003d20 <__kernel_cos+0x170>
 8003ce8:	e7db      	b.n	8003ca2 <__kernel_cos+0xf2>
 8003cea:	bf00      	nop
 8003cec:	f3af 8000 	nop.w
 8003cf0:	be8838d4 	.word	0xbe8838d4
 8003cf4:	bda8fae9 	.word	0xbda8fae9
 8003cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8003cfc:	3e21ee9e 	.word	0x3e21ee9e
 8003d00:	809c52ad 	.word	0x809c52ad
 8003d04:	3e927e4f 	.word	0x3e927e4f
 8003d08:	19cb1590 	.word	0x19cb1590
 8003d0c:	3efa01a0 	.word	0x3efa01a0
 8003d10:	16c15177 	.word	0x16c15177
 8003d14:	3f56c16c 	.word	0x3f56c16c
 8003d18:	5555554c 	.word	0x5555554c
 8003d1c:	3fa55555 	.word	0x3fa55555
 8003d20:	00000000 	.word	0x00000000
 8003d24:	3ff00000 	.word	0x3ff00000
 8003d28:	3fe00000 	.word	0x3fe00000
 8003d2c:	3fd33332 	.word	0x3fd33332
 8003d30:	3ff00000 	.word	0x3ff00000
 8003d34:	3fe90000 	.word	0x3fe90000
 8003d38:	3fd20000 	.word	0x3fd20000
 8003d3c:	00000000 	.word	0x00000000

08003d40 <__kernel_sin>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	ec55 4b10 	vmov	r4, r5, d0
 8003d48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003d52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003d56:	4680      	mov	r8, r0
 8003d58:	d205      	bcs.n	8003d66 <__kernel_sin+0x26>
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	f7fc fdf5 	bl	800094c <__aeabi_d2iz>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d052      	beq.n	8003e0c <__kernel_sin+0xcc>
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7fc fa7f 	bl	8000270 <__aeabi_dmul>
 8003d72:	4682      	mov	sl, r0
 8003d74:	468b      	mov	fp, r1
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7fc fa77 	bl	8000270 <__aeabi_dmul>
 8003d82:	a342      	add	r3, pc, #264	@ (adr r3, 8003e8c <__kernel_sin+0x14c>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	e9cd 0100 	strd	r0, r1, [sp]
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	4659      	mov	r1, fp
 8003d90:	f7fc fa6e 	bl	8000270 <__aeabi_dmul>
 8003d94:	a33f      	add	r3, pc, #252	@ (adr r3, 8003e94 <__kernel_sin+0x154>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc fb97 	bl	80004cc <__aeabi_dsub>
 8003d9e:	4652      	mov	r2, sl
 8003da0:	465b      	mov	r3, fp
 8003da2:	f7fc fa65 	bl	8000270 <__aeabi_dmul>
 8003da6:	a33d      	add	r3, pc, #244	@ (adr r3, 8003e9c <__kernel_sin+0x15c>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fb90 	bl	80004d0 <__adddf3>
 8003db0:	4652      	mov	r2, sl
 8003db2:	465b      	mov	r3, fp
 8003db4:	f7fc fa5c 	bl	8000270 <__aeabi_dmul>
 8003db8:	a33a      	add	r3, pc, #232	@ (adr r3, 8003ea4 <__kernel_sin+0x164>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fb85 	bl	80004cc <__aeabi_dsub>
 8003dc2:	4652      	mov	r2, sl
 8003dc4:	465b      	mov	r3, fp
 8003dc6:	f7fc fa53 	bl	8000270 <__aeabi_dmul>
 8003dca:	a338      	add	r3, pc, #224	@ (adr r3, 8003eac <__kernel_sin+0x16c>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fb7e 	bl	80004d0 <__adddf3>
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	460f      	mov	r7, r1
 8003dd8:	f1b8 0f00 	cmp.w	r8, #0
 8003ddc:	d11b      	bne.n	8003e16 <__kernel_sin+0xd6>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4650      	mov	r0, sl
 8003de4:	4659      	mov	r1, fp
 8003de6:	f7fc fa43 	bl	8000270 <__aeabi_dmul>
 8003dea:	a325      	add	r3, pc, #148	@ (adr r3, 8003e80 <__kernel_sin+0x140>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fb6c 	bl	80004cc <__aeabi_dsub>
 8003df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003df8:	f7fc fa3a 	bl	8000270 <__aeabi_dmul>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fb64 	bl	80004d0 <__adddf3>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	ec45 4b10 	vmov	d0, r4, r5
 8003e10:	b005      	add	sp, #20
 8003e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <__kernel_sin+0x148>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f7fc fa27 	bl	8000270 <__aeabi_dmul>
 8003e22:	4632      	mov	r2, r6
 8003e24:	4680      	mov	r8, r0
 8003e26:	4689      	mov	r9, r1
 8003e28:	463b      	mov	r3, r7
 8003e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e2e:	f7fc fa1f 	bl	8000270 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4640      	mov	r0, r8
 8003e38:	4649      	mov	r1, r9
 8003e3a:	f7fc fb47 	bl	80004cc <__aeabi_dsub>
 8003e3e:	4652      	mov	r2, sl
 8003e40:	465b      	mov	r3, fp
 8003e42:	f7fc fa15 	bl	8000270 <__aeabi_dmul>
 8003e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e4a:	f7fc fb3f 	bl	80004cc <__aeabi_dsub>
 8003e4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003e80 <__kernel_sin+0x140>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	4606      	mov	r6, r0
 8003e56:	460f      	mov	r7, r1
 8003e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e5c:	f7fc fa08 	bl	8000270 <__aeabi_dmul>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4630      	mov	r0, r6
 8003e66:	4639      	mov	r1, r7
 8003e68:	f7fc fb32 	bl	80004d0 <__adddf3>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4620      	mov	r0, r4
 8003e72:	4629      	mov	r1, r5
 8003e74:	f7fc fb2a 	bl	80004cc <__aeabi_dsub>
 8003e78:	e7c6      	b.n	8003e08 <__kernel_sin+0xc8>
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w
 8003e80:	55555549 	.word	0x55555549
 8003e84:	3fc55555 	.word	0x3fc55555
 8003e88:	3fe00000 	.word	0x3fe00000
 8003e8c:	5acfd57c 	.word	0x5acfd57c
 8003e90:	3de5d93a 	.word	0x3de5d93a
 8003e94:	8a2b9ceb 	.word	0x8a2b9ceb
 8003e98:	3e5ae5e6 	.word	0x3e5ae5e6
 8003e9c:	57b1fe7d 	.word	0x57b1fe7d
 8003ea0:	3ec71de3 	.word	0x3ec71de3
 8003ea4:	19c161d5 	.word	0x19c161d5
 8003ea8:	3f2a01a0 	.word	0x3f2a01a0
 8003eac:	1110f8a6 	.word	0x1110f8a6
 8003eb0:	3f811111 	.word	0x3f811111
 8003eb4:	00000000 	.word	0x00000000

08003eb8 <__ieee754_rem_pio2>:
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	ec57 6b10 	vmov	r6, r7, d0
 8003ec0:	4bc5      	ldr	r3, [pc, #788]	@ (80041d8 <__ieee754_rem_pio2+0x320>)
 8003ec2:	b08d      	sub	sp, #52	@ 0x34
 8003ec4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003ec8:	4598      	cmp	r8, r3
 8003eca:	4604      	mov	r4, r0
 8003ecc:	9704      	str	r7, [sp, #16]
 8003ece:	d807      	bhi.n	8003ee0 <__ieee754_rem_pio2+0x28>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	ed80 0b00 	vstr	d0, [r0]
 8003ed8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003edc:	2500      	movs	r5, #0
 8003ede:	e028      	b.n	8003f32 <__ieee754_rem_pio2+0x7a>
 8003ee0:	4bbe      	ldr	r3, [pc, #760]	@ (80041dc <__ieee754_rem_pio2+0x324>)
 8003ee2:	4598      	cmp	r8, r3
 8003ee4:	d878      	bhi.n	8003fd8 <__ieee754_rem_pio2+0x120>
 8003ee6:	9b04      	ldr	r3, [sp, #16]
 8003ee8:	4dbd      	ldr	r5, [pc, #756]	@ (80041e0 <__ieee754_rem_pio2+0x328>)
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	4630      	mov	r0, r6
 8003eee:	a3ac      	add	r3, pc, #688	@ (adr r3, 80041a0 <__ieee754_rem_pio2+0x2e8>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	dd38      	ble.n	8003f6a <__ieee754_rem_pio2+0xb2>
 8003ef8:	f7fc fae8 	bl	80004cc <__aeabi_dsub>
 8003efc:	45a8      	cmp	r8, r5
 8003efe:	4606      	mov	r6, r0
 8003f00:	460f      	mov	r7, r1
 8003f02:	d01a      	beq.n	8003f3a <__ieee754_rem_pio2+0x82>
 8003f04:	a3a8      	add	r3, pc, #672	@ (adr r3, 80041a8 <__ieee754_rem_pio2+0x2f0>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc fadf 	bl	80004cc <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4680      	mov	r8, r0
 8003f14:	4689      	mov	r9, r1
 8003f16:	4630      	mov	r0, r6
 8003f18:	4639      	mov	r1, r7
 8003f1a:	f7fc fad7 	bl	80004cc <__aeabi_dsub>
 8003f1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80041a8 <__ieee754_rem_pio2+0x2f0>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc fad2 	bl	80004cc <__aeabi_dsub>
 8003f28:	e9c4 8900 	strd	r8, r9, [r4]
 8003f2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f30:	2501      	movs	r5, #1
 8003f32:	4628      	mov	r0, r5
 8003f34:	b00d      	add	sp, #52	@ 0x34
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3a:	a39d      	add	r3, pc, #628	@ (adr r3, 80041b0 <__ieee754_rem_pio2+0x2f8>)
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f7fc fac4 	bl	80004cc <__aeabi_dsub>
 8003f44:	a39c      	add	r3, pc, #624	@ (adr r3, 80041b8 <__ieee754_rem_pio2+0x300>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	460f      	mov	r7, r1
 8003f4e:	f7fc fabd 	bl	80004cc <__aeabi_dsub>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4680      	mov	r8, r0
 8003f58:	4689      	mov	r9, r1
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	f7fc fab5 	bl	80004cc <__aeabi_dsub>
 8003f62:	a395      	add	r3, pc, #596	@ (adr r3, 80041b8 <__ieee754_rem_pio2+0x300>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	e7dc      	b.n	8003f24 <__ieee754_rem_pio2+0x6c>
 8003f6a:	f7fc fab1 	bl	80004d0 <__adddf3>
 8003f6e:	45a8      	cmp	r8, r5
 8003f70:	4606      	mov	r6, r0
 8003f72:	460f      	mov	r7, r1
 8003f74:	d018      	beq.n	8003fa8 <__ieee754_rem_pio2+0xf0>
 8003f76:	a38c      	add	r3, pc, #560	@ (adr r3, 80041a8 <__ieee754_rem_pio2+0x2f0>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc faa8 	bl	80004d0 <__adddf3>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4680      	mov	r8, r0
 8003f86:	4689      	mov	r9, r1
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc fa9e 	bl	80004cc <__aeabi_dsub>
 8003f90:	a385      	add	r3, pc, #532	@ (adr r3, 80041a8 <__ieee754_rem_pio2+0x2f0>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fa9b 	bl	80004d0 <__adddf3>
 8003f9a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003f9e:	e9c4 8900 	strd	r8, r9, [r4]
 8003fa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fa6:	e7c4      	b.n	8003f32 <__ieee754_rem_pio2+0x7a>
 8003fa8:	a381      	add	r3, pc, #516	@ (adr r3, 80041b0 <__ieee754_rem_pio2+0x2f8>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc fa8f 	bl	80004d0 <__adddf3>
 8003fb2:	a381      	add	r3, pc, #516	@ (adr r3, 80041b8 <__ieee754_rem_pio2+0x300>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	f7fc fa88 	bl	80004d0 <__adddf3>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	4689      	mov	r9, r1
 8003fc8:	4630      	mov	r0, r6
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc fa7e 	bl	80004cc <__aeabi_dsub>
 8003fd0:	a379      	add	r3, pc, #484	@ (adr r3, 80041b8 <__ieee754_rem_pio2+0x300>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	e7de      	b.n	8003f96 <__ieee754_rem_pio2+0xde>
 8003fd8:	4b82      	ldr	r3, [pc, #520]	@ (80041e4 <__ieee754_rem_pio2+0x32c>)
 8003fda:	4598      	cmp	r8, r3
 8003fdc:	f200 80d1 	bhi.w	8004182 <__ieee754_rem_pio2+0x2ca>
 8003fe0:	f000 f966 	bl	80042b0 <fabs>
 8003fe4:	ec57 6b10 	vmov	r6, r7, d0
 8003fe8:	a375      	add	r3, pc, #468	@ (adr r3, 80041c0 <__ieee754_rem_pio2+0x308>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	4630      	mov	r0, r6
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	f7fc f93d 	bl	8000270 <__aeabi_dmul>
 8003ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80041e8 <__ieee754_rem_pio2+0x330>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f7fc fa69 	bl	80004d0 <__adddf3>
 8003ffe:	f7fc fca5 	bl	800094c <__aeabi_d2iz>
 8004002:	4605      	mov	r5, r0
 8004004:	f7fc fbb0 	bl	8000768 <__aeabi_i2d>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004010:	a363      	add	r3, pc, #396	@ (adr r3, 80041a0 <__ieee754_rem_pio2+0x2e8>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	f7fc f92b 	bl	8000270 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4630      	mov	r0, r6
 8004020:	4639      	mov	r1, r7
 8004022:	f7fc fa53 	bl	80004cc <__aeabi_dsub>
 8004026:	a360      	add	r3, pc, #384	@ (adr r3, 80041a8 <__ieee754_rem_pio2+0x2f0>)
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	4682      	mov	sl, r0
 800402e:	468b      	mov	fp, r1
 8004030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004034:	f7fc f91c 	bl	8000270 <__aeabi_dmul>
 8004038:	2d1f      	cmp	r5, #31
 800403a:	4606      	mov	r6, r0
 800403c:	460f      	mov	r7, r1
 800403e:	dc0c      	bgt.n	800405a <__ieee754_rem_pio2+0x1a2>
 8004040:	4b6a      	ldr	r3, [pc, #424]	@ (80041ec <__ieee754_rem_pio2+0x334>)
 8004042:	1e6a      	subs	r2, r5, #1
 8004044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004048:	4543      	cmp	r3, r8
 800404a:	d006      	beq.n	800405a <__ieee754_rem_pio2+0x1a2>
 800404c:	4632      	mov	r2, r6
 800404e:	463b      	mov	r3, r7
 8004050:	4650      	mov	r0, sl
 8004052:	4659      	mov	r1, fp
 8004054:	f7fc fa3a 	bl	80004cc <__aeabi_dsub>
 8004058:	e00e      	b.n	8004078 <__ieee754_rem_pio2+0x1c0>
 800405a:	463b      	mov	r3, r7
 800405c:	4632      	mov	r2, r6
 800405e:	4650      	mov	r0, sl
 8004060:	4659      	mov	r1, fp
 8004062:	f7fc fa33 	bl	80004cc <__aeabi_dsub>
 8004066:	ea4f 5328 	mov.w	r3, r8, asr #20
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004070:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004074:	2b10      	cmp	r3, #16
 8004076:	dc02      	bgt.n	800407e <__ieee754_rem_pio2+0x1c6>
 8004078:	e9c4 0100 	strd	r0, r1, [r4]
 800407c:	e039      	b.n	80040f2 <__ieee754_rem_pio2+0x23a>
 800407e:	a34c      	add	r3, pc, #304	@ (adr r3, 80041b0 <__ieee754_rem_pio2+0x2f8>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004088:	f7fc f8f2 	bl	8000270 <__aeabi_dmul>
 800408c:	4606      	mov	r6, r0
 800408e:	460f      	mov	r7, r1
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4650      	mov	r0, sl
 8004096:	4659      	mov	r1, fp
 8004098:	f7fc fa18 	bl	80004cc <__aeabi_dsub>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4680      	mov	r8, r0
 80040a2:	4689      	mov	r9, r1
 80040a4:	4650      	mov	r0, sl
 80040a6:	4659      	mov	r1, fp
 80040a8:	f7fc fa10 	bl	80004cc <__aeabi_dsub>
 80040ac:	4632      	mov	r2, r6
 80040ae:	463b      	mov	r3, r7
 80040b0:	f7fc fa0c 	bl	80004cc <__aeabi_dsub>
 80040b4:	a340      	add	r3, pc, #256	@ (adr r3, 80041b8 <__ieee754_rem_pio2+0x300>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	4606      	mov	r6, r0
 80040bc:	460f      	mov	r7, r1
 80040be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040c2:	f7fc f8d5 	bl	8000270 <__aeabi_dmul>
 80040c6:	4632      	mov	r2, r6
 80040c8:	463b      	mov	r3, r7
 80040ca:	f7fc f9ff 	bl	80004cc <__aeabi_dsub>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4606      	mov	r6, r0
 80040d4:	460f      	mov	r7, r1
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc f9f7 	bl	80004cc <__aeabi_dsub>
 80040de:	9a05      	ldr	r2, [sp, #20]
 80040e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b31      	cmp	r3, #49	@ 0x31
 80040e8:	dc20      	bgt.n	800412c <__ieee754_rem_pio2+0x274>
 80040ea:	e9c4 0100 	strd	r0, r1, [r4]
 80040ee:	46c2      	mov	sl, r8
 80040f0:	46cb      	mov	fp, r9
 80040f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80040f6:	4650      	mov	r0, sl
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	4659      	mov	r1, fp
 80040fe:	f7fc f9e5 	bl	80004cc <__aeabi_dsub>
 8004102:	463b      	mov	r3, r7
 8004104:	4632      	mov	r2, r6
 8004106:	f7fc f9e1 	bl	80004cc <__aeabi_dsub>
 800410a:	9b04      	ldr	r3, [sp, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004112:	f6bf af0e 	bge.w	8003f32 <__ieee754_rem_pio2+0x7a>
 8004116:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004120:	f8c4 8000 	str.w	r8, [r4]
 8004124:	60a0      	str	r0, [r4, #8]
 8004126:	60e3      	str	r3, [r4, #12]
 8004128:	426d      	negs	r5, r5
 800412a:	e702      	b.n	8003f32 <__ieee754_rem_pio2+0x7a>
 800412c:	a326      	add	r3, pc, #152	@ (adr r3, 80041c8 <__ieee754_rem_pio2+0x310>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004136:	f7fc f89b 	bl	8000270 <__aeabi_dmul>
 800413a:	4606      	mov	r6, r0
 800413c:	460f      	mov	r7, r1
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	f7fc f9c1 	bl	80004cc <__aeabi_dsub>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4682      	mov	sl, r0
 8004150:	468b      	mov	fp, r1
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	f7fc f9b9 	bl	80004cc <__aeabi_dsub>
 800415a:	4632      	mov	r2, r6
 800415c:	463b      	mov	r3, r7
 800415e:	f7fc f9b5 	bl	80004cc <__aeabi_dsub>
 8004162:	a31b      	add	r3, pc, #108	@ (adr r3, 80041d0 <__ieee754_rem_pio2+0x318>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	4606      	mov	r6, r0
 800416a:	460f      	mov	r7, r1
 800416c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004170:	f7fc f87e 	bl	8000270 <__aeabi_dmul>
 8004174:	4632      	mov	r2, r6
 8004176:	463b      	mov	r3, r7
 8004178:	f7fc f9a8 	bl	80004cc <__aeabi_dsub>
 800417c:	4606      	mov	r6, r0
 800417e:	460f      	mov	r7, r1
 8004180:	e764      	b.n	800404c <__ieee754_rem_pio2+0x194>
 8004182:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <__ieee754_rem_pio2+0x338>)
 8004184:	4598      	cmp	r8, r3
 8004186:	d935      	bls.n	80041f4 <__ieee754_rem_pio2+0x33c>
 8004188:	4632      	mov	r2, r6
 800418a:	463b      	mov	r3, r7
 800418c:	4630      	mov	r0, r6
 800418e:	4639      	mov	r1, r7
 8004190:	f7fc f99c 	bl	80004cc <__aeabi_dsub>
 8004194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004198:	e9c4 0100 	strd	r0, r1, [r4]
 800419c:	e69e      	b.n	8003edc <__ieee754_rem_pio2+0x24>
 800419e:	bf00      	nop
 80041a0:	54400000 	.word	0x54400000
 80041a4:	3ff921fb 	.word	0x3ff921fb
 80041a8:	1a626331 	.word	0x1a626331
 80041ac:	3dd0b461 	.word	0x3dd0b461
 80041b0:	1a600000 	.word	0x1a600000
 80041b4:	3dd0b461 	.word	0x3dd0b461
 80041b8:	2e037073 	.word	0x2e037073
 80041bc:	3ba3198a 	.word	0x3ba3198a
 80041c0:	6dc9c883 	.word	0x6dc9c883
 80041c4:	3fe45f30 	.word	0x3fe45f30
 80041c8:	2e000000 	.word	0x2e000000
 80041cc:	3ba3198a 	.word	0x3ba3198a
 80041d0:	252049c1 	.word	0x252049c1
 80041d4:	397b839a 	.word	0x397b839a
 80041d8:	3fe921fb 	.word	0x3fe921fb
 80041dc:	4002d97b 	.word	0x4002d97b
 80041e0:	3ff921fb 	.word	0x3ff921fb
 80041e4:	413921fb 	.word	0x413921fb
 80041e8:	3fe00000 	.word	0x3fe00000
 80041ec:	08004c0c 	.word	0x08004c0c
 80041f0:	7fefffff 	.word	0x7fefffff
 80041f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80041f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80041fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004200:	4630      	mov	r0, r6
 8004202:	460f      	mov	r7, r1
 8004204:	f7fc fba2 	bl	800094c <__aeabi_d2iz>
 8004208:	f7fc faae 	bl	8000768 <__aeabi_i2d>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4630      	mov	r0, r6
 8004212:	4639      	mov	r1, r7
 8004214:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004218:	f7fc f958 	bl	80004cc <__aeabi_dsub>
 800421c:	4b22      	ldr	r3, [pc, #136]	@ (80042a8 <__ieee754_rem_pio2+0x3f0>)
 800421e:	2200      	movs	r2, #0
 8004220:	f7fc f826 	bl	8000270 <__aeabi_dmul>
 8004224:	460f      	mov	r7, r1
 8004226:	4606      	mov	r6, r0
 8004228:	f7fc fb90 	bl	800094c <__aeabi_d2iz>
 800422c:	f7fc fa9c 	bl	8000768 <__aeabi_i2d>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4630      	mov	r0, r6
 8004236:	4639      	mov	r1, r7
 8004238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800423c:	f7fc f946 	bl	80004cc <__aeabi_dsub>
 8004240:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <__ieee754_rem_pio2+0x3f0>)
 8004242:	2200      	movs	r2, #0
 8004244:	f7fc f814 	bl	8000270 <__aeabi_dmul>
 8004248:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800424c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004250:	f04f 0803 	mov.w	r8, #3
 8004254:	2600      	movs	r6, #0
 8004256:	2700      	movs	r7, #0
 8004258:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800425c:	4632      	mov	r2, r6
 800425e:	463b      	mov	r3, r7
 8004260:	46c2      	mov	sl, r8
 8004262:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004266:	f7fc fb3f 	bl	80008e8 <__aeabi_dcmpeq>
 800426a:	2800      	cmp	r0, #0
 800426c:	d1f4      	bne.n	8004258 <__ieee754_rem_pio2+0x3a0>
 800426e:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <__ieee754_rem_pio2+0x3f4>)
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	2302      	movs	r3, #2
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	462a      	mov	r2, r5
 8004278:	4653      	mov	r3, sl
 800427a:	4621      	mov	r1, r4
 800427c:	a806      	add	r0, sp, #24
 800427e:	f000 f81f 	bl	80042c0 <__kernel_rem_pio2>
 8004282:	9b04      	ldr	r3, [sp, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	4605      	mov	r5, r0
 8004288:	f6bf ae53 	bge.w	8003f32 <__ieee754_rem_pio2+0x7a>
 800428c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004290:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004294:	e9c4 2300 	strd	r2, r3, [r4]
 8004298:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800429c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80042a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80042a4:	e740      	b.n	8004128 <__ieee754_rem_pio2+0x270>
 80042a6:	bf00      	nop
 80042a8:	41700000 	.word	0x41700000
 80042ac:	08004c8c 	.word	0x08004c8c

080042b0 <fabs>:
 80042b0:	ec51 0b10 	vmov	r0, r1, d0
 80042b4:	4602      	mov	r2, r0
 80042b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80042ba:	ec43 2b10 	vmov	d0, r2, r3
 80042be:	4770      	bx	lr

080042c0 <__kernel_rem_pio2>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	ed2d 8b02 	vpush	{d8}
 80042c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80042cc:	f112 0f14 	cmn.w	r2, #20
 80042d0:	9306      	str	r3, [sp, #24]
 80042d2:	9104      	str	r1, [sp, #16]
 80042d4:	4bc2      	ldr	r3, [pc, #776]	@ (80045e0 <__kernel_rem_pio2+0x320>)
 80042d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80042d8:	9008      	str	r0, [sp, #32]
 80042da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	9b06      	ldr	r3, [sp, #24]
 80042e2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80042e6:	bfa8      	it	ge
 80042e8:	1ed4      	subge	r4, r2, #3
 80042ea:	9305      	str	r3, [sp, #20]
 80042ec:	bfb2      	itee	lt
 80042ee:	2400      	movlt	r4, #0
 80042f0:	2318      	movge	r3, #24
 80042f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80042f6:	f06f 0317 	mvn.w	r3, #23
 80042fa:	fb04 3303 	mla	r3, r4, r3, r3
 80042fe:	eb03 0b02 	add.w	fp, r3, r2
 8004302:	9b00      	ldr	r3, [sp, #0]
 8004304:	9a05      	ldr	r2, [sp, #20]
 8004306:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80045d0 <__kernel_rem_pio2+0x310>
 800430a:	eb03 0802 	add.w	r8, r3, r2
 800430e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004310:	1aa7      	subs	r7, r4, r2
 8004312:	ae20      	add	r6, sp, #128	@ 0x80
 8004314:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004318:	2500      	movs	r5, #0
 800431a:	4545      	cmp	r5, r8
 800431c:	dd12      	ble.n	8004344 <__kernel_rem_pio2+0x84>
 800431e:	9b06      	ldr	r3, [sp, #24]
 8004320:	aa20      	add	r2, sp, #128	@ 0x80
 8004322:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004326:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800432a:	2700      	movs	r7, #0
 800432c:	9b00      	ldr	r3, [sp, #0]
 800432e:	429f      	cmp	r7, r3
 8004330:	dc2e      	bgt.n	8004390 <__kernel_rem_pio2+0xd0>
 8004332:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80045d0 <__kernel_rem_pio2+0x310>
 8004336:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800433a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800433e:	46a8      	mov	r8, r5
 8004340:	2600      	movs	r6, #0
 8004342:	e01b      	b.n	800437c <__kernel_rem_pio2+0xbc>
 8004344:	42ef      	cmn	r7, r5
 8004346:	d407      	bmi.n	8004358 <__kernel_rem_pio2+0x98>
 8004348:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800434c:	f7fc fa0c 	bl	8000768 <__aeabi_i2d>
 8004350:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004354:	3501      	adds	r5, #1
 8004356:	e7e0      	b.n	800431a <__kernel_rem_pio2+0x5a>
 8004358:	ec51 0b18 	vmov	r0, r1, d8
 800435c:	e7f8      	b.n	8004350 <__kernel_rem_pio2+0x90>
 800435e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8004362:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004366:	f7fb ff83 	bl	8000270 <__aeabi_dmul>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004372:	f7fc f8ad 	bl	80004d0 <__adddf3>
 8004376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800437a:	3601      	adds	r6, #1
 800437c:	9b05      	ldr	r3, [sp, #20]
 800437e:	429e      	cmp	r6, r3
 8004380:	dded      	ble.n	800435e <__kernel_rem_pio2+0x9e>
 8004382:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004386:	3701      	adds	r7, #1
 8004388:	ecaa 7b02 	vstmia	sl!, {d7}
 800438c:	3508      	adds	r5, #8
 800438e:	e7cd      	b.n	800432c <__kernel_rem_pio2+0x6c>
 8004390:	9b00      	ldr	r3, [sp, #0]
 8004392:	f8dd 8000 	ldr.w	r8, [sp]
 8004396:	aa0c      	add	r2, sp, #48	@ 0x30
 8004398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800439c:	930a      	str	r3, [sp, #40]	@ 0x28
 800439e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80043a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80043a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80043aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043ac:	ab98      	add	r3, sp, #608	@ 0x260
 80043ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80043b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80043b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043ba:	ac0c      	add	r4, sp, #48	@ 0x30
 80043bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80043be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80043c2:	46a1      	mov	r9, r4
 80043c4:	46c2      	mov	sl, r8
 80043c6:	f1ba 0f00 	cmp.w	sl, #0
 80043ca:	dc77      	bgt.n	80044bc <__kernel_rem_pio2+0x1fc>
 80043cc:	4658      	mov	r0, fp
 80043ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 80043d2:	f000 fac5 	bl	8004960 <scalbn>
 80043d6:	ec57 6b10 	vmov	r6, r7, d0
 80043da:	2200      	movs	r2, #0
 80043dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fb ff44 	bl	8000270 <__aeabi_dmul>
 80043e8:	ec41 0b10 	vmov	d0, r0, r1
 80043ec:	f000 fb34 	bl	8004a58 <floor>
 80043f0:	4b7c      	ldr	r3, [pc, #496]	@ (80045e4 <__kernel_rem_pio2+0x324>)
 80043f2:	ec51 0b10 	vmov	r0, r1, d0
 80043f6:	2200      	movs	r2, #0
 80043f8:	f7fb ff3a 	bl	8000270 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4630      	mov	r0, r6
 8004402:	4639      	mov	r1, r7
 8004404:	f7fc f862 	bl	80004cc <__aeabi_dsub>
 8004408:	460f      	mov	r7, r1
 800440a:	4606      	mov	r6, r0
 800440c:	f7fc fa9e 	bl	800094c <__aeabi_d2iz>
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	f7fc f9a9 	bl	8000768 <__aeabi_i2d>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4630      	mov	r0, r6
 800441c:	4639      	mov	r1, r7
 800441e:	f7fc f855 	bl	80004cc <__aeabi_dsub>
 8004422:	f1bb 0f00 	cmp.w	fp, #0
 8004426:	4606      	mov	r6, r0
 8004428:	460f      	mov	r7, r1
 800442a:	dd6c      	ble.n	8004506 <__kernel_rem_pio2+0x246>
 800442c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8004430:	ab0c      	add	r3, sp, #48	@ 0x30
 8004432:	9d02      	ldr	r5, [sp, #8]
 8004434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004438:	f1cb 0018 	rsb	r0, fp, #24
 800443c:	fa43 f200 	asr.w	r2, r3, r0
 8004440:	4415      	add	r5, r2
 8004442:	4082      	lsls	r2, r0
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	aa0c      	add	r2, sp, #48	@ 0x30
 8004448:	9502      	str	r5, [sp, #8]
 800444a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800444e:	f1cb 0217 	rsb	r2, fp, #23
 8004452:	fa43 f902 	asr.w	r9, r3, r2
 8004456:	f1b9 0f00 	cmp.w	r9, #0
 800445a:	dd64      	ble.n	8004526 <__kernel_rem_pio2+0x266>
 800445c:	9b02      	ldr	r3, [sp, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	3301      	adds	r3, #1
 8004462:	9302      	str	r3, [sp, #8]
 8004464:	4615      	mov	r5, r2
 8004466:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800446a:	4590      	cmp	r8, r2
 800446c:	f300 80a1 	bgt.w	80045b2 <__kernel_rem_pio2+0x2f2>
 8004470:	f1bb 0f00 	cmp.w	fp, #0
 8004474:	dd07      	ble.n	8004486 <__kernel_rem_pio2+0x1c6>
 8004476:	f1bb 0f01 	cmp.w	fp, #1
 800447a:	f000 80c1 	beq.w	8004600 <__kernel_rem_pio2+0x340>
 800447e:	f1bb 0f02 	cmp.w	fp, #2
 8004482:	f000 80c8 	beq.w	8004616 <__kernel_rem_pio2+0x356>
 8004486:	f1b9 0f02 	cmp.w	r9, #2
 800448a:	d14c      	bne.n	8004526 <__kernel_rem_pio2+0x266>
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	4955      	ldr	r1, [pc, #340]	@ (80045e8 <__kernel_rem_pio2+0x328>)
 8004492:	2000      	movs	r0, #0
 8004494:	f7fc f81a 	bl	80004cc <__aeabi_dsub>
 8004498:	4606      	mov	r6, r0
 800449a:	460f      	mov	r7, r1
 800449c:	2d00      	cmp	r5, #0
 800449e:	d042      	beq.n	8004526 <__kernel_rem_pio2+0x266>
 80044a0:	4658      	mov	r0, fp
 80044a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80045d8 <__kernel_rem_pio2+0x318>
 80044a6:	f000 fa5b 	bl	8004960 <scalbn>
 80044aa:	4630      	mov	r0, r6
 80044ac:	4639      	mov	r1, r7
 80044ae:	ec53 2b10 	vmov	r2, r3, d0
 80044b2:	f7fc f80b 	bl	80004cc <__aeabi_dsub>
 80044b6:	4606      	mov	r6, r0
 80044b8:	460f      	mov	r7, r1
 80044ba:	e034      	b.n	8004526 <__kernel_rem_pio2+0x266>
 80044bc:	4b4b      	ldr	r3, [pc, #300]	@ (80045ec <__kernel_rem_pio2+0x32c>)
 80044be:	2200      	movs	r2, #0
 80044c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c4:	f7fb fed4 	bl	8000270 <__aeabi_dmul>
 80044c8:	f7fc fa40 	bl	800094c <__aeabi_d2iz>
 80044cc:	f7fc f94c 	bl	8000768 <__aeabi_i2d>
 80044d0:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <__kernel_rem_pio2+0x330>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	4606      	mov	r6, r0
 80044d6:	460f      	mov	r7, r1
 80044d8:	f7fb feca 	bl	8000270 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e4:	f7fb fff2 	bl	80004cc <__aeabi_dsub>
 80044e8:	f7fc fa30 	bl	800094c <__aeabi_d2iz>
 80044ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80044f0:	f849 0b04 	str.w	r0, [r9], #4
 80044f4:	4639      	mov	r1, r7
 80044f6:	4630      	mov	r0, r6
 80044f8:	f7fb ffea 	bl	80004d0 <__adddf3>
 80044fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004504:	e75f      	b.n	80043c6 <__kernel_rem_pio2+0x106>
 8004506:	d107      	bne.n	8004518 <__kernel_rem_pio2+0x258>
 8004508:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800450c:	aa0c      	add	r2, sp, #48	@ 0x30
 800450e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004512:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004516:	e79e      	b.n	8004456 <__kernel_rem_pio2+0x196>
 8004518:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <__kernel_rem_pio2+0x334>)
 800451a:	2200      	movs	r2, #0
 800451c:	f7fc fa02 	bl	8000924 <__aeabi_dcmpge>
 8004520:	2800      	cmp	r0, #0
 8004522:	d143      	bne.n	80045ac <__kernel_rem_pio2+0x2ec>
 8004524:	4681      	mov	r9, r0
 8004526:	2200      	movs	r2, #0
 8004528:	2300      	movs	r3, #0
 800452a:	4630      	mov	r0, r6
 800452c:	4639      	mov	r1, r7
 800452e:	f7fc f9db 	bl	80008e8 <__aeabi_dcmpeq>
 8004532:	2800      	cmp	r0, #0
 8004534:	f000 80c1 	beq.w	80046ba <__kernel_rem_pio2+0x3fa>
 8004538:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800453c:	2200      	movs	r2, #0
 800453e:	9900      	ldr	r1, [sp, #0]
 8004540:	428b      	cmp	r3, r1
 8004542:	da70      	bge.n	8004626 <__kernel_rem_pio2+0x366>
 8004544:	2a00      	cmp	r2, #0
 8004546:	f000 808b 	beq.w	8004660 <__kernel_rem_pio2+0x3a0>
 800454a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800454e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004550:	f1ab 0b18 	sub.w	fp, fp, #24
 8004554:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f6      	beq.n	800454a <__kernel_rem_pio2+0x28a>
 800455c:	4658      	mov	r0, fp
 800455e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80045d8 <__kernel_rem_pio2+0x318>
 8004562:	f000 f9fd 	bl	8004960 <scalbn>
 8004566:	f108 0301 	add.w	r3, r8, #1
 800456a:	00da      	lsls	r2, r3, #3
 800456c:	9205      	str	r2, [sp, #20]
 800456e:	ec55 4b10 	vmov	r4, r5, d0
 8004572:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004574:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80045ec <__kernel_rem_pio2+0x32c>
 8004578:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800457c:	4646      	mov	r6, r8
 800457e:	f04f 0a00 	mov.w	sl, #0
 8004582:	2e00      	cmp	r6, #0
 8004584:	f280 80d1 	bge.w	800472a <__kernel_rem_pio2+0x46a>
 8004588:	4644      	mov	r4, r8
 800458a:	2c00      	cmp	r4, #0
 800458c:	f2c0 80ff 	blt.w	800478e <__kernel_rem_pio2+0x4ce>
 8004590:	4b19      	ldr	r3, [pc, #100]	@ (80045f8 <__kernel_rem_pio2+0x338>)
 8004592:	461f      	mov	r7, r3
 8004594:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004596:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800459a:	9306      	str	r3, [sp, #24]
 800459c:	f04f 0a00 	mov.w	sl, #0
 80045a0:	f04f 0b00 	mov.w	fp, #0
 80045a4:	2600      	movs	r6, #0
 80045a6:	eba8 0504 	sub.w	r5, r8, r4
 80045aa:	e0e4      	b.n	8004776 <__kernel_rem_pio2+0x4b6>
 80045ac:	f04f 0902 	mov.w	r9, #2
 80045b0:	e754      	b.n	800445c <__kernel_rem_pio2+0x19c>
 80045b2:	f854 3b04 	ldr.w	r3, [r4], #4
 80045b6:	bb0d      	cbnz	r5, 80045fc <__kernel_rem_pio2+0x33c>
 80045b8:	b123      	cbz	r3, 80045c4 <__kernel_rem_pio2+0x304>
 80045ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80045be:	f844 3c04 	str.w	r3, [r4, #-4]
 80045c2:	2301      	movs	r3, #1
 80045c4:	3201      	adds	r2, #1
 80045c6:	461d      	mov	r5, r3
 80045c8:	e74f      	b.n	800446a <__kernel_rem_pio2+0x1aa>
 80045ca:	bf00      	nop
 80045cc:	f3af 8000 	nop.w
	...
 80045dc:	3ff00000 	.word	0x3ff00000
 80045e0:	08004dd8 	.word	0x08004dd8
 80045e4:	40200000 	.word	0x40200000
 80045e8:	3ff00000 	.word	0x3ff00000
 80045ec:	3e700000 	.word	0x3e700000
 80045f0:	41700000 	.word	0x41700000
 80045f4:	3fe00000 	.word	0x3fe00000
 80045f8:	08004d98 	.word	0x08004d98
 80045fc:	1acb      	subs	r3, r1, r3
 80045fe:	e7de      	b.n	80045be <__kernel_rem_pio2+0x2fe>
 8004600:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8004604:	ab0c      	add	r3, sp, #48	@ 0x30
 8004606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800460e:	a90c      	add	r1, sp, #48	@ 0x30
 8004610:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004614:	e737      	b.n	8004486 <__kernel_rem_pio2+0x1c6>
 8004616:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800461a:	ab0c      	add	r3, sp, #48	@ 0x30
 800461c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004620:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004624:	e7f3      	b.n	800460e <__kernel_rem_pio2+0x34e>
 8004626:	a90c      	add	r1, sp, #48	@ 0x30
 8004628:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800462c:	3b01      	subs	r3, #1
 800462e:	430a      	orrs	r2, r1
 8004630:	e785      	b.n	800453e <__kernel_rem_pio2+0x27e>
 8004632:	3401      	adds	r4, #1
 8004634:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004638:	2a00      	cmp	r2, #0
 800463a:	d0fa      	beq.n	8004632 <__kernel_rem_pio2+0x372>
 800463c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800463e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004642:	eb0d 0503 	add.w	r5, sp, r3
 8004646:	9b06      	ldr	r3, [sp, #24]
 8004648:	aa20      	add	r2, sp, #128	@ 0x80
 800464a:	4443      	add	r3, r8
 800464c:	f108 0701 	add.w	r7, r8, #1
 8004650:	3d98      	subs	r5, #152	@ 0x98
 8004652:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004656:	4444      	add	r4, r8
 8004658:	42bc      	cmp	r4, r7
 800465a:	da04      	bge.n	8004666 <__kernel_rem_pio2+0x3a6>
 800465c:	46a0      	mov	r8, r4
 800465e:	e6a2      	b.n	80043a6 <__kernel_rem_pio2+0xe6>
 8004660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004662:	2401      	movs	r4, #1
 8004664:	e7e6      	b.n	8004634 <__kernel_rem_pio2+0x374>
 8004666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004668:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800466c:	f7fc f87c 	bl	8000768 <__aeabi_i2d>
 8004670:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8004930 <__kernel_rem_pio2+0x670>
 8004674:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800467c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004680:	46b2      	mov	sl, r6
 8004682:	f04f 0800 	mov.w	r8, #0
 8004686:	9b05      	ldr	r3, [sp, #20]
 8004688:	4598      	cmp	r8, r3
 800468a:	dd05      	ble.n	8004698 <__kernel_rem_pio2+0x3d8>
 800468c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004690:	3701      	adds	r7, #1
 8004692:	eca5 7b02 	vstmia	r5!, {d7}
 8004696:	e7df      	b.n	8004658 <__kernel_rem_pio2+0x398>
 8004698:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800469c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80046a0:	f7fb fde6 	bl	8000270 <__aeabi_dmul>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ac:	f7fb ff10 	bl	80004d0 <__adddf3>
 80046b0:	f108 0801 	add.w	r8, r8, #1
 80046b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046b8:	e7e5      	b.n	8004686 <__kernel_rem_pio2+0x3c6>
 80046ba:	f1cb 0000 	rsb	r0, fp, #0
 80046be:	ec47 6b10 	vmov	d0, r6, r7
 80046c2:	f000 f94d 	bl	8004960 <scalbn>
 80046c6:	ec55 4b10 	vmov	r4, r5, d0
 80046ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004938 <__kernel_rem_pio2+0x678>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	4620      	mov	r0, r4
 80046d0:	4629      	mov	r1, r5
 80046d2:	f7fc f927 	bl	8000924 <__aeabi_dcmpge>
 80046d6:	b300      	cbz	r0, 800471a <__kernel_rem_pio2+0x45a>
 80046d8:	4b98      	ldr	r3, [pc, #608]	@ (800493c <__kernel_rem_pio2+0x67c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	4620      	mov	r0, r4
 80046de:	4629      	mov	r1, r5
 80046e0:	f7fb fdc6 	bl	8000270 <__aeabi_dmul>
 80046e4:	f7fc f932 	bl	800094c <__aeabi_d2iz>
 80046e8:	4606      	mov	r6, r0
 80046ea:	f7fc f83d 	bl	8000768 <__aeabi_i2d>
 80046ee:	4b92      	ldr	r3, [pc, #584]	@ (8004938 <__kernel_rem_pio2+0x678>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	f7fb fdbd 	bl	8000270 <__aeabi_dmul>
 80046f6:	460b      	mov	r3, r1
 80046f8:	4602      	mov	r2, r0
 80046fa:	4629      	mov	r1, r5
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7fb fee5 	bl	80004cc <__aeabi_dsub>
 8004702:	f7fc f923 	bl	800094c <__aeabi_d2iz>
 8004706:	ab0c      	add	r3, sp, #48	@ 0x30
 8004708:	f10b 0b18 	add.w	fp, fp, #24
 800470c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004710:	f108 0801 	add.w	r8, r8, #1
 8004714:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004718:	e720      	b.n	800455c <__kernel_rem_pio2+0x29c>
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fc f915 	bl	800094c <__aeabi_d2iz>
 8004722:	ab0c      	add	r3, sp, #48	@ 0x30
 8004724:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004728:	e718      	b.n	800455c <__kernel_rem_pio2+0x29c>
 800472a:	ab0c      	add	r3, sp, #48	@ 0x30
 800472c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004730:	f7fc f81a 	bl	8000768 <__aeabi_i2d>
 8004734:	4622      	mov	r2, r4
 8004736:	462b      	mov	r3, r5
 8004738:	f7fb fd9a 	bl	8000270 <__aeabi_dmul>
 800473c:	4652      	mov	r2, sl
 800473e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004742:	465b      	mov	r3, fp
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	f7fb fd92 	bl	8000270 <__aeabi_dmul>
 800474c:	3e01      	subs	r6, #1
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	e716      	b.n	8004582 <__kernel_rem_pio2+0x2c2>
 8004754:	9906      	ldr	r1, [sp, #24]
 8004756:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800475a:	9106      	str	r1, [sp, #24]
 800475c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004760:	f7fb fd86 	bl	8000270 <__aeabi_dmul>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4650      	mov	r0, sl
 800476a:	4659      	mov	r1, fp
 800476c:	f7fb feb0 	bl	80004d0 <__adddf3>
 8004770:	3601      	adds	r6, #1
 8004772:	4682      	mov	sl, r0
 8004774:	468b      	mov	fp, r1
 8004776:	9b00      	ldr	r3, [sp, #0]
 8004778:	429e      	cmp	r6, r3
 800477a:	dc01      	bgt.n	8004780 <__kernel_rem_pio2+0x4c0>
 800477c:	42ae      	cmp	r6, r5
 800477e:	dde9      	ble.n	8004754 <__kernel_rem_pio2+0x494>
 8004780:	ab48      	add	r3, sp, #288	@ 0x120
 8004782:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004786:	e9c5 ab00 	strd	sl, fp, [r5]
 800478a:	3c01      	subs	r4, #1
 800478c:	e6fd      	b.n	800458a <__kernel_rem_pio2+0x2ca>
 800478e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004790:	2b02      	cmp	r3, #2
 8004792:	dc0b      	bgt.n	80047ac <__kernel_rem_pio2+0x4ec>
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc35      	bgt.n	8004804 <__kernel_rem_pio2+0x544>
 8004798:	d059      	beq.n	800484e <__kernel_rem_pio2+0x58e>
 800479a:	9b02      	ldr	r3, [sp, #8]
 800479c:	f003 0007 	and.w	r0, r3, #7
 80047a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80047a4:	ecbd 8b02 	vpop	{d8}
 80047a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d1f3      	bne.n	800479a <__kernel_rem_pio2+0x4da>
 80047b2:	9b05      	ldr	r3, [sp, #20]
 80047b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80047b8:	eb0d 0403 	add.w	r4, sp, r3
 80047bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80047c0:	4625      	mov	r5, r4
 80047c2:	46c2      	mov	sl, r8
 80047c4:	f1ba 0f00 	cmp.w	sl, #0
 80047c8:	dc69      	bgt.n	800489e <__kernel_rem_pio2+0x5de>
 80047ca:	4645      	mov	r5, r8
 80047cc:	2d01      	cmp	r5, #1
 80047ce:	f300 8087 	bgt.w	80048e0 <__kernel_rem_pio2+0x620>
 80047d2:	9c05      	ldr	r4, [sp, #20]
 80047d4:	ab48      	add	r3, sp, #288	@ 0x120
 80047d6:	441c      	add	r4, r3
 80047d8:	2000      	movs	r0, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	f1b8 0f01 	cmp.w	r8, #1
 80047e0:	f300 809c 	bgt.w	800491c <__kernel_rem_pio2+0x65c>
 80047e4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80047e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80047ec:	f1b9 0f00 	cmp.w	r9, #0
 80047f0:	f040 80a6 	bne.w	8004940 <__kernel_rem_pio2+0x680>
 80047f4:	9b04      	ldr	r3, [sp, #16]
 80047f6:	e9c3 5600 	strd	r5, r6, [r3]
 80047fa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80047fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004802:	e7ca      	b.n	800479a <__kernel_rem_pio2+0x4da>
 8004804:	9d05      	ldr	r5, [sp, #20]
 8004806:	ab48      	add	r3, sp, #288	@ 0x120
 8004808:	441d      	add	r5, r3
 800480a:	4644      	mov	r4, r8
 800480c:	2000      	movs	r0, #0
 800480e:	2100      	movs	r1, #0
 8004810:	2c00      	cmp	r4, #0
 8004812:	da35      	bge.n	8004880 <__kernel_rem_pio2+0x5c0>
 8004814:	f1b9 0f00 	cmp.w	r9, #0
 8004818:	d038      	beq.n	800488c <__kernel_rem_pio2+0x5cc>
 800481a:	4602      	mov	r2, r0
 800481c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004820:	9c04      	ldr	r4, [sp, #16]
 8004822:	e9c4 2300 	strd	r2, r3, [r4]
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800482e:	f7fb fe4d 	bl	80004cc <__aeabi_dsub>
 8004832:	ad4a      	add	r5, sp, #296	@ 0x128
 8004834:	2401      	movs	r4, #1
 8004836:	45a0      	cmp	r8, r4
 8004838:	da2b      	bge.n	8004892 <__kernel_rem_pio2+0x5d2>
 800483a:	f1b9 0f00 	cmp.w	r9, #0
 800483e:	d002      	beq.n	8004846 <__kernel_rem_pio2+0x586>
 8004840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004844:	4619      	mov	r1, r3
 8004846:	9b04      	ldr	r3, [sp, #16]
 8004848:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800484c:	e7a5      	b.n	800479a <__kernel_rem_pio2+0x4da>
 800484e:	9c05      	ldr	r4, [sp, #20]
 8004850:	ab48      	add	r3, sp, #288	@ 0x120
 8004852:	441c      	add	r4, r3
 8004854:	2000      	movs	r0, #0
 8004856:	2100      	movs	r1, #0
 8004858:	f1b8 0f00 	cmp.w	r8, #0
 800485c:	da09      	bge.n	8004872 <__kernel_rem_pio2+0x5b2>
 800485e:	f1b9 0f00 	cmp.w	r9, #0
 8004862:	d002      	beq.n	800486a <__kernel_rem_pio2+0x5aa>
 8004864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004868:	4619      	mov	r1, r3
 800486a:	9b04      	ldr	r3, [sp, #16]
 800486c:	e9c3 0100 	strd	r0, r1, [r3]
 8004870:	e793      	b.n	800479a <__kernel_rem_pio2+0x4da>
 8004872:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004876:	f7fb fe2b 	bl	80004d0 <__adddf3>
 800487a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800487e:	e7eb      	b.n	8004858 <__kernel_rem_pio2+0x598>
 8004880:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004884:	f7fb fe24 	bl	80004d0 <__adddf3>
 8004888:	3c01      	subs	r4, #1
 800488a:	e7c1      	b.n	8004810 <__kernel_rem_pio2+0x550>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	e7c6      	b.n	8004820 <__kernel_rem_pio2+0x560>
 8004892:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004896:	f7fb fe1b 	bl	80004d0 <__adddf3>
 800489a:	3401      	adds	r4, #1
 800489c:	e7cb      	b.n	8004836 <__kernel_rem_pio2+0x576>
 800489e:	ed35 7b02 	vldmdb	r5!, {d7}
 80048a2:	ed8d 7b00 	vstr	d7, [sp]
 80048a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80048aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ae:	ec53 2b17 	vmov	r2, r3, d7
 80048b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80048b6:	f7fb fe0b 	bl	80004d0 <__adddf3>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4606      	mov	r6, r0
 80048c0:	460f      	mov	r7, r1
 80048c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048c6:	f7fb fe01 	bl	80004cc <__aeabi_dsub>
 80048ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048ce:	f7fb fdff 	bl	80004d0 <__adddf3>
 80048d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80048d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80048da:	e9c5 6700 	strd	r6, r7, [r5]
 80048de:	e771      	b.n	80047c4 <__kernel_rem_pio2+0x504>
 80048e0:	ed34 7b02 	vldmdb	r4!, {d7}
 80048e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80048e8:	ec51 0b17 	vmov	r0, r1, d7
 80048ec:	4652      	mov	r2, sl
 80048ee:	465b      	mov	r3, fp
 80048f0:	ed8d 7b00 	vstr	d7, [sp]
 80048f4:	f7fb fdec 	bl	80004d0 <__adddf3>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4606      	mov	r6, r0
 80048fe:	460f      	mov	r7, r1
 8004900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004904:	f7fb fde2 	bl	80004cc <__aeabi_dsub>
 8004908:	4652      	mov	r2, sl
 800490a:	465b      	mov	r3, fp
 800490c:	f7fb fde0 	bl	80004d0 <__adddf3>
 8004910:	3d01      	subs	r5, #1
 8004912:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004916:	e9c4 6700 	strd	r6, r7, [r4]
 800491a:	e757      	b.n	80047cc <__kernel_rem_pio2+0x50c>
 800491c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004920:	f7fb fdd6 	bl	80004d0 <__adddf3>
 8004924:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004928:	e758      	b.n	80047dc <__kernel_rem_pio2+0x51c>
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w
	...
 8004938:	41700000 	.word	0x41700000
 800493c:	3e700000 	.word	0x3e700000
 8004940:	9b04      	ldr	r3, [sp, #16]
 8004942:	9a04      	ldr	r2, [sp, #16]
 8004944:	601d      	str	r5, [r3, #0]
 8004946:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800494a:	605c      	str	r4, [r3, #4]
 800494c:	609f      	str	r7, [r3, #8]
 800494e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004952:	60d3      	str	r3, [r2, #12]
 8004954:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004958:	6110      	str	r0, [r2, #16]
 800495a:	6153      	str	r3, [r2, #20]
 800495c:	e71d      	b.n	800479a <__kernel_rem_pio2+0x4da>
 800495e:	bf00      	nop

08004960 <scalbn>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	ec55 4b10 	vmov	r4, r5, d0
 8004966:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800496a:	4606      	mov	r6, r0
 800496c:	462b      	mov	r3, r5
 800496e:	b991      	cbnz	r1, 8004996 <scalbn+0x36>
 8004970:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004974:	4323      	orrs	r3, r4
 8004976:	d03b      	beq.n	80049f0 <scalbn+0x90>
 8004978:	4b33      	ldr	r3, [pc, #204]	@ (8004a48 <scalbn+0xe8>)
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	2200      	movs	r2, #0
 8004980:	f7fb fc76 	bl	8000270 <__aeabi_dmul>
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <scalbn+0xec>)
 8004986:	429e      	cmp	r6, r3
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
 800498c:	da0f      	bge.n	80049ae <scalbn+0x4e>
 800498e:	a326      	add	r3, pc, #152	@ (adr r3, 8004a28 <scalbn+0xc8>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	e01e      	b.n	80049d4 <scalbn+0x74>
 8004996:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800499a:	4291      	cmp	r1, r2
 800499c:	d10b      	bne.n	80049b6 <scalbn+0x56>
 800499e:	4622      	mov	r2, r4
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fb fd94 	bl	80004d0 <__adddf3>
 80049a8:	4604      	mov	r4, r0
 80049aa:	460d      	mov	r5, r1
 80049ac:	e020      	b.n	80049f0 <scalbn+0x90>
 80049ae:	460b      	mov	r3, r1
 80049b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80049b4:	3936      	subs	r1, #54	@ 0x36
 80049b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80049ba:	4296      	cmp	r6, r2
 80049bc:	dd0d      	ble.n	80049da <scalbn+0x7a>
 80049be:	2d00      	cmp	r5, #0
 80049c0:	a11b      	add	r1, pc, #108	@ (adr r1, 8004a30 <scalbn+0xd0>)
 80049c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049c6:	da02      	bge.n	80049ce <scalbn+0x6e>
 80049c8:	a11b      	add	r1, pc, #108	@ (adr r1, 8004a38 <scalbn+0xd8>)
 80049ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049ce:	a318      	add	r3, pc, #96	@ (adr r3, 8004a30 <scalbn+0xd0>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc4c 	bl	8000270 <__aeabi_dmul>
 80049d8:	e7e6      	b.n	80049a8 <scalbn+0x48>
 80049da:	1872      	adds	r2, r6, r1
 80049dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80049e0:	428a      	cmp	r2, r1
 80049e2:	dcec      	bgt.n	80049be <scalbn+0x5e>
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	dd06      	ble.n	80049f6 <scalbn+0x96>
 80049e8:	f36f 531e 	bfc	r3, #20, #11
 80049ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049f0:	ec45 4b10 	vmov	d0, r4, r5
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80049fa:	da08      	bge.n	8004a0e <scalbn+0xae>
 80049fc:	2d00      	cmp	r5, #0
 80049fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8004a28 <scalbn+0xc8>)
 8004a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a04:	dac3      	bge.n	800498e <scalbn+0x2e>
 8004a06:	a10e      	add	r1, pc, #56	@ (adr r1, 8004a40 <scalbn+0xe0>)
 8004a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a0c:	e7bf      	b.n	800498e <scalbn+0x2e>
 8004a0e:	3236      	adds	r2, #54	@ 0x36
 8004a10:	f36f 531e 	bfc	r3, #20, #11
 8004a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <scalbn+0xf0>)
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	2200      	movs	r2, #0
 8004a20:	e7d8      	b.n	80049d4 <scalbn+0x74>
 8004a22:	bf00      	nop
 8004a24:	f3af 8000 	nop.w
 8004a28:	c2f8f359 	.word	0xc2f8f359
 8004a2c:	01a56e1f 	.word	0x01a56e1f
 8004a30:	8800759c 	.word	0x8800759c
 8004a34:	7e37e43c 	.word	0x7e37e43c
 8004a38:	8800759c 	.word	0x8800759c
 8004a3c:	fe37e43c 	.word	0xfe37e43c
 8004a40:	c2f8f359 	.word	0xc2f8f359
 8004a44:	81a56e1f 	.word	0x81a56e1f
 8004a48:	43500000 	.word	0x43500000
 8004a4c:	ffff3cb0 	.word	0xffff3cb0
 8004a50:	3c900000 	.word	0x3c900000
 8004a54:	00000000 	.word	0x00000000

08004a58 <floor>:
 8004a58:	ec51 0b10 	vmov	r0, r1, d0
 8004a5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004a68:	2e13      	cmp	r6, #19
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	4680      	mov	r8, r0
 8004a70:	dc34      	bgt.n	8004adc <floor+0x84>
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	da17      	bge.n	8004aa6 <floor+0x4e>
 8004a76:	a332      	add	r3, pc, #200	@ (adr r3, 8004b40 <floor+0xe8>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fd28 	bl	80004d0 <__adddf3>
 8004a80:	2200      	movs	r2, #0
 8004a82:	2300      	movs	r3, #0
 8004a84:	f7fb ff58 	bl	8000938 <__aeabi_dcmpgt>
 8004a88:	b150      	cbz	r0, 8004aa0 <floor+0x48>
 8004a8a:	2c00      	cmp	r4, #0
 8004a8c:	da55      	bge.n	8004b3a <floor+0xe2>
 8004a8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004a92:	432c      	orrs	r4, r5
 8004a94:	2500      	movs	r5, #0
 8004a96:	42ac      	cmp	r4, r5
 8004a98:	4c2b      	ldr	r4, [pc, #172]	@ (8004b48 <floor+0xf0>)
 8004a9a:	bf08      	it	eq
 8004a9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	e023      	b.n	8004aee <floor+0x96>
 8004aa6:	4f29      	ldr	r7, [pc, #164]	@ (8004b4c <floor+0xf4>)
 8004aa8:	4137      	asrs	r7, r6
 8004aaa:	ea01 0307 	and.w	r3, r1, r7
 8004aae:	4303      	orrs	r3, r0
 8004ab0:	d01d      	beq.n	8004aee <floor+0x96>
 8004ab2:	a323      	add	r3, pc, #140	@ (adr r3, 8004b40 <floor+0xe8>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fd0a 	bl	80004d0 <__adddf3>
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f7fb ff3a 	bl	8000938 <__aeabi_dcmpgt>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d0eb      	beq.n	8004aa0 <floor+0x48>
 8004ac8:	2c00      	cmp	r4, #0
 8004aca:	bfbe      	ittt	lt
 8004acc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004ad0:	4133      	asrlt	r3, r6
 8004ad2:	18e4      	addlt	r4, r4, r3
 8004ad4:	ea24 0407 	bic.w	r4, r4, r7
 8004ad8:	2500      	movs	r5, #0
 8004ada:	e7e1      	b.n	8004aa0 <floor+0x48>
 8004adc:	2e33      	cmp	r6, #51	@ 0x33
 8004ade:	dd0a      	ble.n	8004af6 <floor+0x9e>
 8004ae0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004ae4:	d103      	bne.n	8004aee <floor+0x96>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	f7fb fcf1 	bl	80004d0 <__adddf3>
 8004aee:	ec41 0b10 	vmov	d0, r0, r1
 8004af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004afa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004afe:	40df      	lsrs	r7, r3
 8004b00:	4207      	tst	r7, r0
 8004b02:	d0f4      	beq.n	8004aee <floor+0x96>
 8004b04:	a30e      	add	r3, pc, #56	@ (adr r3, 8004b40 <floor+0xe8>)
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	f7fb fce1 	bl	80004d0 <__adddf3>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2300      	movs	r3, #0
 8004b12:	f7fb ff11 	bl	8000938 <__aeabi_dcmpgt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0c2      	beq.n	8004aa0 <floor+0x48>
 8004b1a:	2c00      	cmp	r4, #0
 8004b1c:	da0a      	bge.n	8004b34 <floor+0xdc>
 8004b1e:	2e14      	cmp	r6, #20
 8004b20:	d101      	bne.n	8004b26 <floor+0xce>
 8004b22:	3401      	adds	r4, #1
 8004b24:	e006      	b.n	8004b34 <floor+0xdc>
 8004b26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	40b3      	lsls	r3, r6
 8004b2e:	441d      	add	r5, r3
 8004b30:	4545      	cmp	r5, r8
 8004b32:	d3f6      	bcc.n	8004b22 <floor+0xca>
 8004b34:	ea25 0507 	bic.w	r5, r5, r7
 8004b38:	e7b2      	b.n	8004aa0 <floor+0x48>
 8004b3a:	2500      	movs	r5, #0
 8004b3c:	462c      	mov	r4, r5
 8004b3e:	e7af      	b.n	8004aa0 <floor+0x48>
 8004b40:	8800759c 	.word	0x8800759c
 8004b44:	7e37e43c 	.word	0x7e37e43c
 8004b48:	bff00000 	.word	0xbff00000
 8004b4c:	000fffff 	.word	0x000fffff

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
