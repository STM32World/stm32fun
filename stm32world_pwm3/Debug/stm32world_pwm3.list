
stm32world_pwm3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ed4  08002ed4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed4  08002ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed8  08002ed8  00003ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002edc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3b8  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2f  00000000  00000000  00013450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000080f9  00000000  00000000  0001507f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c08  00000000  00000000  0001d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000938  00000000  00000000  0001dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd47  00000000  00000000  0001e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011b16  00000000  00000000  0003e3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1e23  00000000  00000000  0004ff15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00111d38  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000027a0  00000000  00000000  00111d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  0011451c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e18 	.word	0x08002e18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002e18 	.word	0x08002e18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2400      	movs	r4, #0
 8000566:	9405      	str	r4, [sp, #20]
 8000568:	9406      	str	r4, [sp, #24]
 800056a:	9407      	str	r4, [sp, #28]
 800056c:	9408      	str	r4, [sp, #32]
 800056e:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	9401      	str	r4, [sp, #4]
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_GPIO_Init+0x8c>)
 8000574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000576:	f042 0204 	orr.w	r2, r2, #4
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	f002 0204 	and.w	r2, r2, #4
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	9402      	str	r4, [sp, #8]
 8000588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800058a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800058e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000592:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000596:	9202      	str	r2, [sp, #8]
 8000598:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	9403      	str	r4, [sp, #12]
 800059c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059e:	f042 0201 	orr.w	r2, r2, #1
 80005a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a6:	f002 0201 	and.w	r2, r2, #1
 80005aa:	9203      	str	r2, [sp, #12]
 80005ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	9404      	str	r4, [sp, #16]
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f042 0202 	orr.w	r2, r2, #2
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	9304      	str	r3, [sp, #16]
 80005c0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005c2:	4d0b      	ldr	r5, [pc, #44]	@ (80005f0 <MX_GPIO_Init+0x90>)
 80005c4:	4622      	mov	r2, r4
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	4628      	mov	r0, r5
 80005cc:	f000 fc30 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005de:	a905      	add	r1, sp, #20
 80005e0:	4628      	mov	r0, r5
 80005e2:	f000 fb2f 	bl	8000c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e6:	b00b      	add	sp, #44	@ 0x2c
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800

080005f4 <_write>:
    if (fd == 1 || fd == 2) {
 80005f4:	3801      	subs	r0, #1
 80005f6:	2801      	cmp	r0, #1
 80005f8:	d80a      	bhi.n	8000610 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80005fa:	b510      	push	{r4, lr}
 80005fc:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000602:	b292      	uxth	r2, r2
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <_write+0x28>)
 8000606:	f001 fc12 	bl	8001e2e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800060a:	b920      	cbnz	r0, 8000616 <_write+0x22>
            return len;
 800060c:	4620      	mov	r0, r4
}
 800060e:	bd10      	pop	{r4, pc}
    return -1;
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000614:	4770      	bx	lr
            return -1;
 8000616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800061a:	e7f8      	b.n	800060e <_write+0x1a>
 800061c:	20000084 	.word	0x20000084

08000620 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000622:	e7fe      	b.n	8000622 <Error_Handler+0x2>

08000624 <MX_USART1_UART_Init>:
{
 8000624:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000626:	480a      	ldr	r0, [pc, #40]	@ (8000650 <MX_USART1_UART_Init+0x2c>)
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_USART1_UART_Init+0x30>)
 800062a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800062c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000630:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	2300      	movs	r3, #0
 8000634:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000636:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000638:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063a:	220c      	movs	r2, #12
 800063c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000642:	f001 fbc4 	bl	8001dce <HAL_UART_Init>
 8000646:	b900      	cbnz	r0, 800064a <MX_USART1_UART_Init+0x26>
}
 8000648:	bd08      	pop	{r3, pc}
    Error_Handler();
 800064a:	f7ff ffe9 	bl	8000620 <Error_Handler>
 800064e:	bf00      	nop
 8000650:	20000084 	.word	0x20000084
 8000654:	40011000 	.word	0x40011000

08000658 <MX_TIM4_Init>:
{
 8000658:	b500      	push	{lr}
 800065a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065c:	2300      	movs	r3, #0
 800065e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000662:	930c      	str	r3, [sp, #48]	@ 0x30
 8000664:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000666:	9308      	str	r3, [sp, #32]
 8000668:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9302      	str	r3, [sp, #8]
 800066e:	9303      	str	r3, [sp, #12]
 8000670:	9304      	str	r3, [sp, #16]
 8000672:	9305      	str	r3, [sp, #20]
 8000674:	9306      	str	r3, [sp, #24]
 8000676:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000678:	482d      	ldr	r0, [pc, #180]	@ (8000730 <MX_TIM4_Init+0xd8>)
 800067a:	4a2e      	ldr	r2, [pc, #184]	@ (8000734 <MX_TIM4_Init+0xdc>)
 800067c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 839;
 800067e:	f240 3247 	movw	r2, #839	@ 0x347
 8000682:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 999;
 8000686:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800068a:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000690:	f001 f842 	bl	8001718 <HAL_TIM_Base_Init>
 8000694:	2800      	cmp	r0, #0
 8000696:	d13a      	bne.n	800070e <MX_TIM4_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800069e:	a90a      	add	r1, sp, #40	@ 0x28
 80006a0:	4823      	ldr	r0, [pc, #140]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006a2:	f001 f944 	bl	800192e <HAL_TIM_ConfigClockSource>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d133      	bne.n	8000712 <MX_TIM4_Init+0xba>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006aa:	4821      	ldr	r0, [pc, #132]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006ac:	f001 f860 	bl	8001770 <HAL_TIM_PWM_Init>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d130      	bne.n	8000716 <MX_TIM4_Init+0xbe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006ba:	a908      	add	r1, sp, #32
 80006bc:	481c      	ldr	r0, [pc, #112]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006be:	f001 fa47 	bl	8001b50 <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	bb50      	cbnz	r0, 800071a <MX_TIM4_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c4:	2360      	movs	r3, #96	@ 0x60
 80006c6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80006c8:	2200      	movs	r2, #0
 80006ca:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d0:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d2:	a901      	add	r1, sp, #4
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006d6:	f001 f8af 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 80006da:	bb00      	cbnz	r0, 800071e <MX_TIM4_Init+0xc6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006dc:	2204      	movs	r2, #4
 80006de:	eb0d 0102 	add.w	r1, sp, r2
 80006e2:	4813      	ldr	r0, [pc, #76]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006e4:	f001 f8a8 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 80006e8:	b9d8      	cbnz	r0, 8000722 <MX_TIM4_Init+0xca>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ea:	2208      	movs	r2, #8
 80006ec:	a901      	add	r1, sp, #4
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006f0:	f001 f8a2 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	b9b8      	cbnz	r0, 8000726 <MX_TIM4_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006f6:	220c      	movs	r2, #12
 80006f8:	a901      	add	r1, sp, #4
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_TIM4_Init+0xd8>)
 80006fc:	f001 f89c 	bl	8001838 <HAL_TIM_PWM_ConfigChannel>
 8000700:	b998      	cbnz	r0, 800072a <MX_TIM4_Init+0xd2>
  HAL_TIM_MspPostInit(&htim4);
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <MX_TIM4_Init+0xd8>)
 8000704:	f000 f8fc 	bl	8000900 <HAL_TIM_MspPostInit>
}
 8000708:	b00f      	add	sp, #60	@ 0x3c
 800070a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800070e:	f7ff ff87 	bl	8000620 <Error_Handler>
    Error_Handler();
 8000712:	f7ff ff85 	bl	8000620 <Error_Handler>
    Error_Handler();
 8000716:	f7ff ff83 	bl	8000620 <Error_Handler>
    Error_Handler();
 800071a:	f7ff ff81 	bl	8000620 <Error_Handler>
    Error_Handler();
 800071e:	f7ff ff7f 	bl	8000620 <Error_Handler>
    Error_Handler();
 8000722:	f7ff ff7d 	bl	8000620 <Error_Handler>
    Error_Handler();
 8000726:	f7ff ff7b 	bl	8000620 <Error_Handler>
    Error_Handler();
 800072a:	f7ff ff79 	bl	8000620 <Error_Handler>
 800072e:	bf00      	nop
 8000730:	200000cc 	.word	0x200000cc
 8000734:	40000800 	.word	0x40000800

08000738 <SystemClock_Config>:
{
 8000738:	b500      	push	{lr}
 800073a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073c:	2230      	movs	r2, #48	@ 0x30
 800073e:	2100      	movs	r1, #0
 8000740:	a808      	add	r0, sp, #32
 8000742:	f001 fde5 	bl	8002310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	2300      	movs	r3, #0
 8000748:	9303      	str	r3, [sp, #12]
 800074a:	9304      	str	r3, [sp, #16]
 800074c:	9305      	str	r3, [sp, #20]
 800074e:	9306      	str	r3, [sp, #24]
 8000750:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <SystemClock_Config+0xa0>)
 8000756:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000758:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800075c:	6411      	str	r1, [r2, #64]	@ 0x40
 800075e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000760:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000764:	9201      	str	r2, [sp, #4]
 8000766:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <SystemClock_Config+0xa4>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000786:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000790:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000792:	2208      	movs	r2, #8
 8000794:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000796:	22a8      	movs	r2, #168	@ 0xa8
 8000798:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	a808      	add	r0, sp, #32
 80007a2:	f000 fb4b 	bl	8000e3c <HAL_RCC_OscConfig>
 80007a6:	b998      	cbnz	r0, 80007d0 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	2105      	movs	r1, #5
 80007c2:	a803      	add	r0, sp, #12
 80007c4:	f000 fd9e 	bl	8001304 <HAL_RCC_ClockConfig>
 80007c8:	b920      	cbnz	r0, 80007d4 <SystemClock_Config+0x9c>
}
 80007ca:	b015      	add	sp, #84	@ 0x54
 80007cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007d0:	f7ff ff26 	bl	8000620 <Error_Handler>
    Error_Handler();
 80007d4:	f7ff ff24 	bl	8000620 <Error_Handler>
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <main>:
int main(void) {
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80007e2:	f000 f999 	bl	8000b18 <HAL_Init>
  SystemClock_Config();
 80007e6:	f7ff ffa7 	bl	8000738 <SystemClock_Config>
  MX_GPIO_Init();
 80007ea:	f7ff feb9 	bl	8000560 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007ee:	f7ff ff19 	bl	8000624 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80007f2:	f7ff ff31 	bl	8000658 <MX_TIM4_Init>
    printf("\n\n\n\n-------------\nStarting pwm3\n");
 80007f6:	4822      	ldr	r0, [pc, #136]	@ (8000880 <main+0xa0>)
 80007f8:	f001 fcaa 	bl	8002150 <puts>
    printf("Starting timer channels\n");
 80007fc:	4821      	ldr	r0, [pc, #132]	@ (8000884 <main+0xa4>)
 80007fe:	f001 fca7 	bl	8002150 <puts>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000802:	4c21      	ldr	r4, [pc, #132]	@ (8000888 <main+0xa8>)
 8000804:	2100      	movs	r1, #0
 8000806:	4620      	mov	r0, r4
 8000808:	f001 f920 	bl	8001a4c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800080c:	2104      	movs	r1, #4
 800080e:	4620      	mov	r0, r4
 8000810:	f001 f91c 	bl	8001a4c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000814:	2108      	movs	r1, #8
 8000816:	4620      	mov	r0, r4
 8000818:	f001 f918 	bl	8001a4c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800081c:	210c      	movs	r1, #12
 800081e:	4620      	mov	r0, r4
 8000820:	f001 f914 	bl	8001a4c <HAL_TIM_PWM_Start>
    uint32_t now = 0, loop_cnt = 0, next_tick = 1000, next_change = 0;
 8000824:	2600      	movs	r6, #0
 8000826:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082a:	4632      	mov	r2, r6
    int8_t pwm_change = 1;
 800082c:	2701      	movs	r7, #1
    uint16_t pwm_value = 0;
 800082e:	4634      	mov	r4, r6
 8000830:	e00d      	b.n	800084e <main+0x6e>
            printf("Tick %lu (loop = %lu)\n", now / 1000, loop_cnt);
 8000832:	4916      	ldr	r1, [pc, #88]	@ (800088c <main+0xac>)
 8000834:	fba1 3105 	umull	r3, r1, r1, r5
 8000838:	0989      	lsrs	r1, r1, #6
 800083a:	4815      	ldr	r0, [pc, #84]	@ (8000890 <main+0xb0>)
 800083c:	f001 fc20 	bl	8002080 <iprintf>
            next_tick = now + 1000;
 8000840:	f505 707a 	add.w	r0, r5, #1000	@ 0x3e8
            loop_cnt = 0;
 8000844:	2200      	movs	r2, #0
 8000846:	e006      	b.n	8000856 <main+0x76>
                pwm_change = 1;
 8000848:	2701      	movs	r7, #1
            next_change = now + 2;
 800084a:	1cae      	adds	r6, r5, #2
        ++loop_cnt;
 800084c:	3201      	adds	r2, #1
        now = uwTick;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <main+0xb4>)
 8000850:	681d      	ldr	r5, [r3, #0]
        if (now >= next_tick) {
 8000852:	42a8      	cmp	r0, r5
 8000854:	d9ed      	bls.n	8000832 <main+0x52>
        if (now >= next_change) {
 8000856:	42ae      	cmp	r6, r5
 8000858:	d8f8      	bhi.n	800084c <main+0x6c>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <main+0xa8>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	635c      	str	r4, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000 - pwm_value);
 8000860:	f5c4 717a 	rsb	r1, r4, #1000	@ 0x3e8
 8000864:	6399      	str	r1, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_value);
 8000866:	63dc      	str	r4, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 1000 - pwm_value);
 8000868:	6419      	str	r1, [r3, #64]	@ 0x40
            pwm_value += pwm_change;
 800086a:	443c      	add	r4, r7
 800086c:	b2a4      	uxth	r4, r4
            if (pwm_value == 0)
 800086e:	2c00      	cmp	r4, #0
 8000870:	d0ea      	beq.n	8000848 <main+0x68>
            if (pwm_value == 1000)
 8000872:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8000876:	d1e8      	bne.n	800084a <main+0x6a>
                pwm_change = -1;
 8000878:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800087c:	e7e5      	b.n	800084a <main+0x6a>
 800087e:	bf00      	nop
 8000880:	08002e30 	.word	0x08002e30
 8000884:	08002e50 	.word	0x08002e50
 8000888:	200000cc 	.word	0x200000cc
 800088c:	10624dd3 	.word	0x10624dd3
 8000890:	08002e68 	.word	0x08002e68
 8000894:	20000118 	.word	0x20000118

08000898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2100      	movs	r1, #0
 800089c:	9100      	str	r1, [sp, #0]
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_MspInit+0x34>)
 80008a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80008a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008aa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008ae:	9200      	str	r2, [sp, #0]
 80008b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	9101      	str	r1, [sp, #4]
 80008b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	b002      	add	sp, #8
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80008d0:	6802      	ldr	r2, [r0, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_TIM_Base_MspInit+0x28>)
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d000      	beq.n	80008da <HAL_TIM_Base_MspInit+0xa>
 80008d8:	4770      	bx	lr
{
 80008da:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_TIM_Base_MspInit+0x2c>)
 80008e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008e4:	f042 0204 	orr.w	r2, r2, #4
 80008e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80008f4:	b002      	add	sp, #8
 80008f6:	4770      	bx	lr
 80008f8:	40000800 	.word	0x40000800
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000900:	b500      	push	{lr}
 8000902:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	2300      	movs	r3, #0
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	9302      	str	r3, [sp, #8]
 800090a:	9303      	str	r3, [sp, #12]
 800090c:	9304      	str	r3, [sp, #16]
 800090e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8000910:	6802      	ldr	r2, [r0, #0]
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_TIM_MspPostInit+0x4c>)
 8000914:	429a      	cmp	r2, r3
 8000916:	d002      	beq.n	800091e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000918:	b007      	add	sp, #28
 800091a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_TIM_MspPostInit+0x50>)
 8000924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000926:	f042 0202 	orr.w	r2, r2, #2
 800092a:	631a      	str	r2, [r3, #48]	@ 0x30
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000936:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800093a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000940:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	a901      	add	r1, sp, #4
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <HAL_TIM_MspPostInit+0x54>)
 8000946:	f000 f97d 	bl	8000c44 <HAL_GPIO_Init>
}
 800094a:	e7e5      	b.n	8000918 <HAL_TIM_MspPostInit+0x18>
 800094c:	40000800 	.word	0x40000800
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b500      	push	{lr}
 800095a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2300      	movs	r3, #0
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	9304      	str	r3, [sp, #16]
 8000962:	9305      	str	r3, [sp, #20]
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000968:	6802      	ldr	r2, [r0, #0]
 800096a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800096e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000972:	429a      	cmp	r2, r3
 8000974:	d002      	beq.n	800097c <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000976:	b009      	add	sp, #36	@ 0x24
 8000978:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800097c:	2100      	movs	r1, #0
 800097e:	9101      	str	r1, [sp, #4]
 8000980:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000986:	f042 0210 	orr.w	r2, r2, #16
 800098a:	645a      	str	r2, [r3, #68]	@ 0x44
 800098c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800098e:	f002 0210 	and.w	r2, r2, #16
 8000992:	9201      	str	r2, [sp, #4]
 8000994:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	9102      	str	r1, [sp, #8]
 8000998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800099a:	f042 0201 	orr.w	r2, r2, #1
 800099e:	631a      	str	r2, [r3, #48]	@ 0x30
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b8:	2307      	movs	r3, #7
 80009ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	a903      	add	r1, sp, #12
 80009be:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <HAL_UART_MspInit+0x70>)
 80009c0:	f000 f940 	bl	8000c44 <HAL_GPIO_Init>
}
 80009c4:	e7d7      	b.n	8000976 <HAL_UART_MspInit+0x1e>
 80009c6:	bf00      	nop
 80009c8:	40020000 	.word	0x40020000

080009cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler>

080009ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler>

080009d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler>

080009d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler>

080009d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler>

080009d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f8b5 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bd08      	pop	{r3, pc}

080009e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	460c      	mov	r4, r1
 80009e8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2500      	movs	r5, #0
 80009ec:	e006      	b.n	80009fc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4621      	mov	r1, r4
 80009f4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80009fa:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	42b5      	cmp	r5, r6
 80009fe:	dbf6      	blt.n	80009ee <_read+0xa>
  }

  return len;
}
 8000a00:	4630      	mov	r0, r6
 8000a02:	bd70      	pop	{r4, r5, r6, pc}

08000a04 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a10:	2000      	movs	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a14:	2001      	movs	r0, #1
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a18:	2000      	movs	r0, #0
 8000a1a:	4770      	bx	lr

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a0c      	ldr	r2, [pc, #48]	@ (8000a54 <_sbrk+0x38>)
 8000a22:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <_sbrk+0x40>)
 8000a26:	6800      	ldr	r0, [r0, #0]
 8000a28:	b140      	cbz	r0, 8000a3c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <_sbrk+0x40>)
 8000a2c:	6800      	ldr	r0, [r0, #0]
 8000a2e:	4403      	add	r3, r0
 8000a30:	1a52      	subs	r2, r2, r1
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d806      	bhi.n	8000a44 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a36:	4a09      	ldr	r2, [pc, #36]	@ (8000a5c <_sbrk+0x40>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a3a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <_sbrk+0x40>)
 8000a3e:	4c08      	ldr	r4, [pc, #32]	@ (8000a60 <_sbrk+0x44>)
 8000a40:	6004      	str	r4, [r0, #0]
 8000a42:	e7f2      	b.n	8000a2a <_sbrk+0xe>
    errno = ENOMEM;
 8000a44:	f001 fcb2 	bl	80023ac <__errno>
 8000a48:	230c      	movs	r3, #12
 8000a4a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a50:	e7f3      	b.n	8000a3a <_sbrk+0x1e>
 8000a52:	bf00      	nop
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	20000268 	.word	0x20000268

08000a64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <SystemInit+0x10>)
 8000a66:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a7c:	f7ff fff2 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f001 fc87 	bl	80023b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fe99 	bl	80007e0 <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000abc:	08002edc 	.word	0x08002edc
  ldr r2, =_sbss
 8000ac0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac4:	20000268 	.word	0x20000268

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b510      	push	{r4, lr}
 8000ace:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_InitTick+0x40>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000adc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <HAL_InitTick+0x44>)
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ae4:	f000 f89a 	bl	8000c1c <HAL_SYSTICK_Config>
 8000ae8:	b968      	cbnz	r0, 8000b06 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	2c0f      	cmp	r4, #15
 8000aec:	d901      	bls.n	8000af2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000aee:	2001      	movs	r0, #1
 8000af0:	e00a      	b.n	8000b08 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	2200      	movs	r2, #0
 8000af4:	4621      	mov	r1, r4
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afa:	f000 f87f 	bl	8000bfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afe:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <HAL_InitTick+0x48>)
 8000b00:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2000      	movs	r0, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b06:	2001      	movs	r0, #1
}
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008

08000b18 <HAL_Init>:
{
 8000b18:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x30>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b32:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f84f 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff ffc6 	bl	8000acc <HAL_InitTick>
  HAL_MspInit();
 8000b40:	f7ff feaa 	bl	8000898 <HAL_MspInit>
}
 8000b44:	2000      	movs	r0, #0
 8000b46:	bd08      	pop	{r3, pc}
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b4c:	4a03      	ldr	r2, [pc, #12]	@ (8000b5c <HAL_IncTick+0x10>)
 8000b4e:	6811      	ldr	r1, [r2, #0]
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_IncTick+0x14>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	440b      	add	r3, r1
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000118 	.word	0x20000118
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b64:	4b01      	ldr	r3, [pc, #4]	@ (8000b6c <HAL_GetTick+0x8>)
 8000b66:	6818      	ldr	r0, [r3, #0]
}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000118 	.word	0x20000118

08000b70 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000b70:	2800      	cmp	r0, #0
 8000b72:	db08      	blt.n	8000b86 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	0109      	lsls	r1, r1, #4
 8000b76:	b2c9      	uxtb	r1, r1
 8000b78:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000b7c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000b80:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000b84:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	f000 000f 	and.w	r0, r0, #15
 8000b8a:	0109      	lsls	r1, r1, #4
 8000b8c:	b2c9      	uxtb	r1, r1
 8000b8e:	4b01      	ldr	r3, [pc, #4]	@ (8000b94 <__NVIC_SetPriority+0x24>)
 8000b90:	5419      	strb	r1, [r3, r0]
  }
}
 8000b92:	4770      	bx	lr
 8000b94:	e000ed14 	.word	0xe000ed14

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9e:	f1c0 0c07 	rsb	ip, r0, #7
 8000ba2:	f1bc 0f04 	cmp.w	ip, #4
 8000ba6:	bf28      	it	cs
 8000ba8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bac:	1d03      	adds	r3, r0, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d90f      	bls.n	8000bd2 <NVIC_EncodePriority+0x3a>
 8000bb2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000bb8:	fa0e f00c 	lsl.w	r0, lr, ip
 8000bbc:	ea21 0100 	bic.w	r1, r1, r0
 8000bc0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000bc6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000bca:	ea41 0002 	orr.w	r0, r1, r2
 8000bce:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e7ee      	b.n	8000bb4 <NVIC_EncodePriority+0x1c>
	...

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bda:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bdc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000be0:	041b      	lsls	r3, r3, #16
 8000be2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	0200      	lsls	r0, r0, #8
 8000be6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000bf4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_NVIC_SetPriority+0x1c>)
 8000c02:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c04:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000c08:	f7ff ffc6 	bl	8000b98 <NVIC_EncodePriority>
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff ffae 	bl	8000b70 <__NVIC_SetPriority>
}
 8000c14:	bd10      	pop	{r4, pc}
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	3801      	subs	r0, #1
 8000c1e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c22:	d20b      	bcs.n	8000c3c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000c28:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <HAL_SYSTICK_Config+0x24>)
 8000c2c:	21f0      	movs	r1, #240	@ 0xf0
 8000c2e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c32:	2000      	movs	r0, #0
 8000c34:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	2207      	movs	r2, #7
 8000c38:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c3c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	f200 80e9 	bhi.w	8000e1e <HAL_GPIO_Init+0x1da>
{
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	e065      	b.n	8000d1e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c52:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c58:	2403      	movs	r4, #3
 8000c5a:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c5e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c62:	68cc      	ldr	r4, [r1, #12]
 8000c64:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c68:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000c6a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c72:	684a      	ldr	r2, [r1, #4]
 8000c74:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000c7c:	6042      	str	r2, [r0, #4]
 8000c7e:	e05c      	b.n	8000d3a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c80:	08dc      	lsrs	r4, r3, #3
 8000c82:	3408      	adds	r4, #8
 8000c84:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c88:	f003 0507 	and.w	r5, r3, #7
 8000c8c:	00ad      	lsls	r5, r5, #2
 8000c8e:	f04f 0e0f 	mov.w	lr, #15
 8000c92:	fa0e fe05 	lsl.w	lr, lr, r5
 8000c96:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c9a:	690a      	ldr	r2, [r1, #16]
 8000c9c:	40aa      	lsls	r2, r5
 8000c9e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000ca2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ca6:	e05c      	b.n	8000d62 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca8:	2207      	movs	r2, #7
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000cac:	2200      	movs	r2, #0
 8000cae:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cb2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb4:	3402      	adds	r4, #2
 8000cb6:	4d5a      	ldr	r5, [pc, #360]	@ (8000e20 <HAL_GPIO_Init+0x1dc>)
 8000cb8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cbc:	4a59      	ldr	r2, [pc, #356]	@ (8000e24 <HAL_GPIO_Init+0x1e0>)
 8000cbe:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	ea6f 020c 	mvn.w	r2, ip
 8000cc4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cc8:	684e      	ldr	r6, [r1, #4]
 8000cca:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000cce:	d001      	beq.n	8000cd4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000cd0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000cd4:	4c53      	ldr	r4, [pc, #332]	@ (8000e24 <HAL_GPIO_Init+0x1e0>)
 8000cd6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000cd8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cda:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cde:	684e      	ldr	r6, [r1, #4]
 8000ce0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000ce4:	d001      	beq.n	8000cea <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000ce6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000cea:	4c4e      	ldr	r4, [pc, #312]	@ (8000e24 <HAL_GPIO_Init+0x1e0>)
 8000cec:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000cee:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cf0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cf4:	684e      	ldr	r6, [r1, #4]
 8000cf6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000cfa:	d001      	beq.n	8000d00 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000cfc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d00:	4c48      	ldr	r4, [pc, #288]	@ (8000e24 <HAL_GPIO_Init+0x1e0>)
 8000d02:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d04:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d06:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d08:	684d      	ldr	r5, [r1, #4]
 8000d0a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d0e:	d001      	beq.n	8000d14 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d10:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d14:	4c43      	ldr	r4, [pc, #268]	@ (8000e24 <HAL_GPIO_Init+0x1e0>)
 8000d16:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d18:	3301      	adds	r3, #1
 8000d1a:	2b0f      	cmp	r3, #15
 8000d1c:	d87d      	bhi.n	8000e1a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	680c      	ldr	r4, [r1, #0]
 8000d24:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d28:	ea32 0404 	bics.w	r4, r2, r4
 8000d2c:	d1f4      	bne.n	8000d18 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	684c      	ldr	r4, [r1, #4]
 8000d30:	f004 0403 	and.w	r4, r4, #3
 8000d34:	3c01      	subs	r4, #1
 8000d36:	2c01      	cmp	r4, #1
 8000d38:	d98b      	bls.n	8000c52 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3a:	684a      	ldr	r2, [r1, #4]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	2a03      	cmp	r2, #3
 8000d42:	d009      	beq.n	8000d58 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000d44:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d46:	005d      	lsls	r5, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	40aa      	lsls	r2, r5
 8000d4c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	688a      	ldr	r2, [r1, #8]
 8000d52:	40aa      	lsls	r2, r5
 8000d54:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d56:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	684a      	ldr	r2, [r1, #4]
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	2a02      	cmp	r2, #2
 8000d60:	d08e      	beq.n	8000c80 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000d62:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d64:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d6e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	684a      	ldr	r2, [r1, #4]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d7c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d7e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d80:	684a      	ldr	r2, [r1, #4]
 8000d82:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000d86:	d0c7      	beq.n	8000d18 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	2200      	movs	r2, #0
 8000d8a:	9201      	str	r2, [sp, #4]
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_GPIO_Init+0x1e4>)
 8000d8e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000d90:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000d94:	6454      	str	r4, [r2, #68]	@ 0x44
 8000d96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000d98:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000d9c:	9201      	str	r2, [sp, #4]
 8000d9e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000da0:	089c      	lsrs	r4, r3, #2
 8000da2:	1ca5      	adds	r5, r4, #2
 8000da4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e20 <HAL_GPIO_Init+0x1dc>)
 8000da6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000daa:	f003 0e03 	and.w	lr, r3, #3
 8000dae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000db8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <HAL_GPIO_Init+0x1e8>)
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f43f af74 	beq.w	8000cac <HAL_GPIO_Init+0x68>
 8000dc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dc8:	4290      	cmp	r0, r2
 8000dca:	d01a      	beq.n	8000e02 <HAL_GPIO_Init+0x1be>
 8000dcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	d018      	beq.n	8000e06 <HAL_GPIO_Init+0x1c2>
 8000dd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	d016      	beq.n	8000e0a <HAL_GPIO_Init+0x1c6>
 8000ddc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d014      	beq.n	8000e0e <HAL_GPIO_Init+0x1ca>
 8000de4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000de8:	4290      	cmp	r0, r2
 8000dea:	d012      	beq.n	8000e12 <HAL_GPIO_Init+0x1ce>
 8000dec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000df0:	4290      	cmp	r0, r2
 8000df2:	d010      	beq.n	8000e16 <HAL_GPIO_Init+0x1d2>
 8000df4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	f43f af55 	beq.w	8000ca8 <HAL_GPIO_Init+0x64>
 8000dfe:	2208      	movs	r2, #8
 8000e00:	e755      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000e02:	2201      	movs	r2, #1
 8000e04:	e753      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000e06:	2202      	movs	r2, #2
 8000e08:	e751      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	e74f      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000e0e:	2204      	movs	r2, #4
 8000e10:	e74d      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000e12:	2205      	movs	r2, #5
 8000e14:	e74b      	b.n	8000cae <HAL_GPIO_Init+0x6a>
 8000e16:	2206      	movs	r2, #6
 8000e18:	e749      	b.n	8000cae <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
 8000e1e:	4770      	bx	lr
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40013c00 	.word	0x40013c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e30:	b10a      	cbz	r2, 8000e36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	6181      	str	r1, [r0, #24]
 8000e34:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e36:	0409      	lsls	r1, r1, #16
 8000e38:	6181      	str	r1, [r0, #24]
  }
}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	f000 81e0 	beq.w	8001202 <HAL_RCC_OscConfig+0x3c6>
{
 8000e42:	b570      	push	{r4, r5, r6, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e48:	6803      	ldr	r3, [r0, #0]
 8000e4a:	f013 0f01 	tst.w	r3, #1
 8000e4e:	d03b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e50:	4b9f      	ldr	r3, [pc, #636]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d02c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d021      	beq.n	8000eac <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e68:	6863      	ldr	r3, [r4, #4]
 8000e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e6e:	d04f      	beq.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e74:	d052      	beq.n	8000f1c <HAL_RCC_OscConfig+0xe0>
 8000e76:	4b96      	ldr	r3, [pc, #600]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000e86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d050      	beq.n	8000f30 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fe69 	bl	8000b64 <HAL_GetTick>
 8000e92:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e94:	4b8e      	ldr	r3, [pc, #568]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e9c:	d114      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fe61 	bl	8000b64 <HAL_GetTick>
 8000ea2:	1b40      	subs	r0, r0, r5
 8000ea4:	2864      	cmp	r0, #100	@ 0x64
 8000ea6:	d9f5      	bls.n	8000e94 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	e1b1      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eac:	4b88      	ldr	r3, [pc, #544]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000eb4:	d0d8      	beq.n	8000e68 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b86      	ldr	r3, [pc, #536]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ebe:	d003      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x8c>
 8000ec0:	6863      	ldr	r3, [r4, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 819f 	beq.w	8001206 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	f013 0f02 	tst.w	r3, #2
 8000ece:	d054      	beq.n	8000f7a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f013 0f0c 	tst.w	r3, #12
 8000ed8:	d03e      	beq.n	8000f58 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eda:	4b7d      	ldr	r3, [pc, #500]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d033      	beq.n	8000f4e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ee6:	68e3      	ldr	r3, [r4, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d068      	beq.n	8000fbe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b79      	ldr	r3, [pc, #484]	@ (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fe37 	bl	8000b64 <HAL_GetTick>
 8000ef6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	4b75      	ldr	r3, [pc, #468]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f013 0f02 	tst.w	r3, #2
 8000f00:	d154      	bne.n	8000fac <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff fe2f 	bl	8000b64 <HAL_GetTick>
 8000f06:	1b40      	subs	r0, r0, r5
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f5      	bls.n	8000ef8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e17f      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	4a6f      	ldr	r2, [pc, #444]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e7b5      	b.n	8000e88 <HAL_RCC_OscConfig+0x4c>
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e7ab      	b.n	8000e88 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000f30:	f7ff fe18 	bl	8000b64 <HAL_GetTick>
 8000f34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	4b66      	ldr	r3, [pc, #408]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f3e:	d0c3      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fe10 	bl	8000b64 <HAL_GetTick>
 8000f44:	1b40      	subs	r0, r0, r5
 8000f46:	2864      	cmp	r0, #100	@ 0x64
 8000f48:	d9f5      	bls.n	8000f36 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e160      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f4e:	4b60      	ldr	r3, [pc, #384]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000f56:	d1c6      	bne.n	8000ee6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f58:	4b5d      	ldr	r3, [pc, #372]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f013 0f02 	tst.w	r3, #2
 8000f60:	d003      	beq.n	8000f6a <HAL_RCC_OscConfig+0x12e>
 8000f62:	68e3      	ldr	r3, [r4, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 8150 	bne.w	800120a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6a:	4a59      	ldr	r2, [pc, #356]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f6c:	6813      	ldr	r3, [r2, #0]
 8000f6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000f72:	6921      	ldr	r1, [r4, #16]
 8000f74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f78:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	f013 0f08 	tst.w	r3, #8
 8000f80:	d042      	beq.n	8001008 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f82:	6963      	ldr	r3, [r4, #20]
 8000f84:	b36b      	cbz	r3, 8000fe2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f86:	4b53      	ldr	r3, [pc, #332]	@ (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fde9 	bl	8000b64 <HAL_GetTick>
 8000f92:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f94:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f98:	f013 0f02 	tst.w	r3, #2
 8000f9c:	d134      	bne.n	8001008 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fde1 	bl	8000b64 <HAL_GetTick>
 8000fa2:	1b40      	subs	r0, r0, r5
 8000fa4:	2802      	cmp	r0, #2
 8000fa6:	d9f5      	bls.n	8000f94 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000fa8:	2003      	movs	r0, #3
 8000faa:	e131      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4a48      	ldr	r2, [pc, #288]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000fb4:	6921      	ldr	r1, [r4, #16]
 8000fb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e7dd      	b.n	8000f7a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000fbe:	4b45      	ldr	r3, [pc, #276]	@ (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fdce 	bl	8000b64 <HAL_GetTick>
 8000fc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	4b41      	ldr	r3, [pc, #260]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f013 0f02 	tst.w	r3, #2
 8000fd2:	d0d2      	beq.n	8000f7a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fdc6 	bl	8000b64 <HAL_GetTick>
 8000fd8:	1b40      	subs	r0, r0, r5
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d9f5      	bls.n	8000fca <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e116      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fdbb 	bl	8000b64 <HAL_GetTick>
 8000fee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff0:	4b37      	ldr	r3, [pc, #220]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8000ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ff4:	f013 0f02 	tst.w	r3, #2
 8000ff8:	d006      	beq.n	8001008 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fdb3 	bl	8000b64 <HAL_GetTick>
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	2802      	cmp	r0, #2
 8001002:	d9f5      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001004:	2003      	movs	r0, #3
 8001006:	e103      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f013 0f04 	tst.w	r3, #4
 800100e:	d077      	beq.n	8001100 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001010:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001018:	d133      	bne.n	8001082 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	4b2c      	ldr	r3, [pc, #176]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8001020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001022:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001026:	641a      	str	r2, [r3, #64]	@ 0x40
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001032:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <HAL_RCC_OscConfig+0x29c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800103c:	d023      	beq.n	8001086 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d034      	beq.n	80010ae <HAL_RCC_OscConfig+0x272>
 8001044:	2b05      	cmp	r3, #5
 8001046:	d038      	beq.n	80010ba <HAL_RCC_OscConfig+0x27e>
 8001048:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 800104a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	671a      	str	r2, [r3, #112]	@ 0x70
 8001052:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001054:	f022 0204 	bic.w	r2, r2, #4
 8001058:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800105a:	68a3      	ldr	r3, [r4, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d03d      	beq.n	80010dc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001060:	f7ff fd80 	bl	8000b64 <HAL_GetTick>
 8001064:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 8001068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800106a:	f013 0f02 	tst.w	r3, #2
 800106e:	d146      	bne.n	80010fe <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	f7ff fd78 	bl	8000b64 <HAL_GetTick>
 8001074:	1b80      	subs	r0, r0, r6
 8001076:	f241 3388 	movw	r3, #5000	@ 0x1388
 800107a:	4298      	cmp	r0, r3
 800107c:	d9f3      	bls.n	8001066 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800107e:	2003      	movs	r0, #3
 8001080:	e0c6      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001082:	2500      	movs	r5, #0
 8001084:	e7d6      	b.n	8001034 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <HAL_RCC_OscConfig+0x29c>)
 8001088:	6813      	ldr	r3, [r2, #0]
 800108a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001090:	f7ff fd68 	bl	8000b64 <HAL_GetTick>
 8001094:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <HAL_RCC_OscConfig+0x29c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800109e:	d1ce      	bne.n	800103e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a0:	f7ff fd60 	bl	8000b64 <HAL_GetTick>
 80010a4:	1b80      	subs	r0, r0, r6
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9f5      	bls.n	8001096 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80010aa:	2003      	movs	r0, #3
 80010ac:	e0b0      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 80010b0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80010b8:	e7cf      	b.n	800105a <HAL_RCC_OscConfig+0x21e>
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <HAL_RCC_OscConfig+0x294>)
 80010bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80010be:	f042 0204 	orr.w	r2, r2, #4
 80010c2:	671a      	str	r2, [r3, #112]	@ 0x70
 80010c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80010cc:	e7c5      	b.n	800105a <HAL_RCC_OscConfig+0x21e>
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	42470000 	.word	0x42470000
 80010d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fd42 	bl	8000b64 <HAL_GetTick>
 80010e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e2:	4b52      	ldr	r3, [pc, #328]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 80010e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010e6:	f013 0f02 	tst.w	r3, #2
 80010ea:	d008      	beq.n	80010fe <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f7ff fd3a 	bl	8000b64 <HAL_GetTick>
 80010f0:	1b80      	subs	r0, r0, r6
 80010f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d9f3      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80010fa:	2003      	movs	r0, #3
 80010fc:	e088      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010fe:	b9ed      	cbnz	r5, 800113c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001100:	69a3      	ldr	r3, [r4, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8083 	beq.w	800120e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001108:	4a48      	ldr	r2, [pc, #288]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 800110a:	6892      	ldr	r2, [r2, #8]
 800110c:	f002 020c 	and.w	r2, r2, #12
 8001110:	2a08      	cmp	r2, #8
 8001112:	d051      	beq.n	80011b8 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001114:	2b02      	cmp	r3, #2
 8001116:	d017      	beq.n	8001148 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001118:	4b45      	ldr	r3, [pc, #276]	@ (8001230 <HAL_RCC_OscConfig+0x3f4>)
 800111a:	2200      	movs	r2, #0
 800111c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fd21 	bl	8000b64 <HAL_GetTick>
 8001122:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800112c:	d042      	beq.n	80011b4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fd19 	bl	8000b64 <HAL_GetTick>
 8001132:	1b00      	subs	r0, r0, r4
 8001134:	2802      	cmp	r0, #2
 8001136:	d9f5      	bls.n	8001124 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001138:	2003      	movs	r0, #3
 800113a:	e069      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113c:	4a3b      	ldr	r2, [pc, #236]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 800113e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	e7db      	b.n	8001100 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001148:	4b39      	ldr	r3, [pc, #228]	@ (8001230 <HAL_RCC_OscConfig+0x3f4>)
 800114a:	2200      	movs	r2, #0
 800114c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800114e:	f7ff fd09 	bl	8000b64 <HAL_GetTick>
 8001152:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001154:	4b35      	ldr	r3, [pc, #212]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800115c:	d006      	beq.n	800116c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fd01 	bl	8000b64 <HAL_GetTick>
 8001162:	1b40      	subs	r0, r0, r5
 8001164:	2802      	cmp	r0, #2
 8001166:	d9f5      	bls.n	8001154 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	e051      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800116c:	69e3      	ldr	r3, [r4, #28]
 800116e:	6a22      	ldr	r2, [r4, #32]
 8001170:	4313      	orrs	r3, r2
 8001172:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001174:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001178:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800117a:	0852      	lsrs	r2, r2, #1
 800117c:	3a01      	subs	r2, #1
 800117e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001182:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001184:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001188:	4a28      	ldr	r2, [pc, #160]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 800118a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800118c:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <HAL_RCC_OscConfig+0x3f4>)
 800118e:	2201      	movs	r2, #1
 8001190:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001192:	f7ff fce7 	bl	8000b64 <HAL_GetTick>
 8001196:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80011a0:	d106      	bne.n	80011b0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fcdf 	bl	8000b64 <HAL_GetTick>
 80011a6:	1b00      	subs	r0, r0, r4
 80011a8:	2802      	cmp	r0, #2
 80011aa:	d9f5      	bls.n	8001198 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80011ac:	2003      	movs	r0, #3
 80011ae:	e02f      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80011b0:	2000      	movs	r0, #0
 80011b2:	e02d      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
 80011b4:	2000      	movs	r0, #0
 80011b6:	e02b      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d02b      	beq.n	8001214 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_RCC_OscConfig+0x3f0>)
 80011be:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80011c4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011c6:	4291      	cmp	r1, r2
 80011c8:	d126      	bne.n	8001218 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80011ce:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d123      	bne.n	800121c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011d6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80011da:	401a      	ands	r2, r3
 80011dc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80011e0:	d11e      	bne.n	8001220 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011e2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80011e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80011e8:	0852      	lsrs	r2, r2, #1
 80011ea:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011ec:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80011f0:	d118      	bne.n	8001224 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011f2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80011f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80011fc:	d114      	bne.n	8001228 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80011fe:	2000      	movs	r0, #0
 8001200:	e006      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
}
 8001204:	4770      	bx	lr
        return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	e002      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800120e:	2000      	movs	r0, #0
}
 8001210:	b002      	add	sp, #8
 8001212:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	e7fb      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	e7f9      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
 800121c:	2001      	movs	r0, #1
 800121e:	e7f7      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
 8001220:	2001      	movs	r0, #1
 8001222:	e7f5      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
 8001224:	2001      	movs	r0, #1
 8001226:	e7f3      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
 8001228:	2001      	movs	r0, #1
 800122a:	e7f1      	b.n	8001210 <HAL_RCC_OscConfig+0x3d4>
 800122c:	40023800 	.word	0x40023800
 8001230:	42470000 	.word	0x42470000

08001234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001236:	4b31      	ldr	r3, [pc, #196]	@ (80012fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b08      	cmp	r3, #8
 8001240:	d001      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001242:	482f      	ldr	r0, [pc, #188]	@ (8001300 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001244:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001254:	d02c      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001256:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001258:	6858      	ldr	r0, [r3, #4]
 800125a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800125e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001262:	ebbc 0c00 	subs.w	ip, ip, r0
 8001266:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800126a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800126e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001272:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001276:	ebb1 010c 	subs.w	r1, r1, ip
 800127a:	eb63 030e 	sbc.w	r3, r3, lr
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001284:	00c9      	lsls	r1, r1, #3
 8001286:	eb11 0c00 	adds.w	ip, r1, r0
 800128a:	f143 0300 	adc.w	r3, r3, #0
 800128e:	0299      	lsls	r1, r3, #10
 8001290:	2300      	movs	r3, #0
 8001292:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001296:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800129a:	f7fe ffe9 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012a6:	3301      	adds	r3, #1
 80012a8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80012aa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80012ae:	e7c9      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80012b2:	6858      	ldr	r0, [r3, #4]
 80012b4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80012b8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80012bc:	ebbc 0c00 	subs.w	ip, ip, r0
 80012c0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80012c4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80012c8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80012cc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80012d0:	ebb1 010c 	subs.w	r1, r1, ip
 80012d4:	eb63 030e 	sbc.w	r3, r3, lr
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012de:	00c9      	lsls	r1, r1, #3
 80012e0:	eb11 0c00 	adds.w	ip, r1, r0
 80012e4:	f143 0300 	adc.w	r3, r3, #0
 80012e8:	0299      	lsls	r1, r3, #10
 80012ea:	2300      	movs	r3, #0
 80012ec:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80012f0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80012f4:	f7fe ffbc 	bl	8000270 <__aeabi_uldivmod>
 80012f8:	e7d1      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x6a>
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	00f42400 	.word	0x00f42400

08001304 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001304:	2800      	cmp	r0, #0
 8001306:	f000 809b 	beq.w	8001440 <HAL_RCC_ClockConfig+0x13c>
{
 800130a:	b570      	push	{r4, r5, r6, lr}
 800130c:	460d      	mov	r5, r1
 800130e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001310:	4b4f      	ldr	r3, [pc, #316]	@ (8001450 <HAL_RCC_ClockConfig+0x14c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	428b      	cmp	r3, r1
 800131a:	d208      	bcs.n	800132e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131c:	b2cb      	uxtb	r3, r1
 800131e:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_RCC_ClockConfig+0x14c>)
 8001320:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	428b      	cmp	r3, r1
 800132a:	f040 808b 	bne.w	8001444 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	f013 0f02 	tst.w	r3, #2
 8001334:	d017      	beq.n	8001366 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001336:	f013 0f04 	tst.w	r3, #4
 800133a:	d004      	beq.n	8001346 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800133c:	4a45      	ldr	r2, [pc, #276]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 800133e:	6893      	ldr	r3, [r2, #8]
 8001340:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001344:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	f013 0f08 	tst.w	r3, #8
 800134c:	d004      	beq.n	8001358 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800134e:	4a41      	ldr	r2, [pc, #260]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 8001350:	6893      	ldr	r3, [r2, #8]
 8001352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001356:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	4a3e      	ldr	r2, [pc, #248]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 800135a:	6893      	ldr	r3, [r2, #8]
 800135c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001360:	68a1      	ldr	r1, [r4, #8]
 8001362:	430b      	orrs	r3, r1
 8001364:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	f013 0f01 	tst.w	r3, #1
 800136c:	d032      	beq.n	80013d4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d021      	beq.n	80013b8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001374:	1e9a      	subs	r2, r3, #2
 8001376:	2a01      	cmp	r2, #1
 8001378:	d925      	bls.n	80013c6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137a:	4a36      	ldr	r2, [pc, #216]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f012 0f02 	tst.w	r2, #2
 8001382:	d061      	beq.n	8001448 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001384:	4933      	ldr	r1, [pc, #204]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 8001386:	688a      	ldr	r2, [r1, #8]
 8001388:	f022 0203 	bic.w	r2, r2, #3
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001390:	f7ff fbe8 	bl	8000b64 <HAL_GetTick>
 8001394:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	6862      	ldr	r2, [r4, #4]
 80013a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013a4:	d016      	beq.n	80013d4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a6:	f7ff fbdd 	bl	8000b64 <HAL_GetTick>
 80013aa:	1b80      	subs	r0, r0, r6
 80013ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013b0:	4298      	cmp	r0, r3
 80013b2:	d9f0      	bls.n	8001396 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80013b4:	2003      	movs	r0, #3
 80013b6:	e042      	b.n	800143e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80013c0:	d1e0      	bne.n	8001384 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80013c2:	2001      	movs	r0, #1
 80013c4:	e03b      	b.n	800143e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c6:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80013ce:	d1d9      	bne.n	8001384 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
 80013d2:	e034      	b.n	800143e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_RCC_ClockConfig+0x14c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	42ab      	cmp	r3, r5
 80013de:	d907      	bls.n	80013f0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e0:	b2ea      	uxtb	r2, r5
 80013e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_RCC_ClockConfig+0x14c>)
 80013e4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	42ab      	cmp	r3, r5
 80013ee:	d12d      	bne.n	800144c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	f013 0f04 	tst.w	r3, #4
 80013f6:	d006      	beq.n	8001406 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f8:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 80013fa:	6893      	ldr	r3, [r2, #8]
 80013fc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001400:	68e1      	ldr	r1, [r4, #12]
 8001402:	430b      	orrs	r3, r1
 8001404:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	f013 0f08 	tst.w	r3, #8
 800140c:	d007      	beq.n	800141e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 8001410:	6893      	ldr	r3, [r2, #8]
 8001412:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001416:	6921      	ldr	r1, [r4, #16]
 8001418:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800141c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800141e:	f7ff ff09 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_RCC_ClockConfig+0x150>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_RCC_ClockConfig+0x154>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	40d8      	lsrs	r0, r3
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_RCC_ClockConfig+0x158>)
 8001432:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_RCC_ClockConfig+0x15c>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	f7ff fb48 	bl	8000acc <HAL_InitTick>
  return HAL_OK;
 800143c:	2000      	movs	r0, #0
}
 800143e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
}
 8001442:	4770      	bx	lr
      return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
 8001446:	e7fa      	b.n	800143e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001448:	2001      	movs	r0, #1
 800144a:	e7f8      	b.n	800143e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800144c:	2001      	movs	r0, #1
 800144e:	e7f6      	b.n	800143e <HAL_RCC_ClockConfig+0x13a>
 8001450:	40023c00 	.word	0x40023c00
 8001454:	40023800 	.word	0x40023800
 8001458:	08002e88 	.word	0x08002e88
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008

08001464 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001464:	4b01      	ldr	r3, [pc, #4]	@ (800146c <HAL_RCC_GetHCLKFreq+0x8>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000

08001470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001470:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001472:	f7ff fff7 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800147e:	4a03      	ldr	r2, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
}
 8001482:	40d8      	lsrs	r0, r3
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	08002e80 	.word	0x08002e80

08001490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001490:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001492:	f7ff ffe7 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800149e:	4a03      	ldr	r2, [pc, #12]	@ (80014ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80014a2:	40d8      	lsrs	r0, r3
 80014a4:	bd08      	pop	{r3, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	08002e80 	.word	0x08002e80

080014b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80014b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014b2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014b4:	6a02      	ldr	r2, [r0, #32]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014bc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014be:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014c0:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014c4:	680c      	ldr	r4, [r1, #0]
 80014c6:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80014ca:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014ce:	688b      	ldr	r3, [r1, #8]
 80014d0:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80014d4:	4d11      	ldr	r5, [pc, #68]	@ (800151c <TIM_OC1_SetConfig+0x6c>)
 80014d6:	42a8      	cmp	r0, r5
 80014d8:	d003      	beq.n	80014e2 <TIM_OC1_SetConfig+0x32>
 80014da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014de:	42a8      	cmp	r0, r5
 80014e0:	d105      	bne.n	80014ee <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80014e2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014e6:	68cd      	ldr	r5, [r1, #12]
 80014e8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80014ea:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014ee:	4d0b      	ldr	r5, [pc, #44]	@ (800151c <TIM_OC1_SetConfig+0x6c>)
 80014f0:	42a8      	cmp	r0, r5
 80014f2:	d003      	beq.n	80014fc <TIM_OC1_SetConfig+0x4c>
 80014f4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014f8:	42a8      	cmp	r0, r5
 80014fa:	d107      	bne.n	800150c <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80014fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001500:	694d      	ldr	r5, [r1, #20]
 8001502:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001506:	698a      	ldr	r2, [r1, #24]
 8001508:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800150c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800150e:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001510:	684a      	ldr	r2, [r1, #4]
 8001512:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001514:	6203      	str	r3, [r0, #32]
}
 8001516:	bc30      	pop	{r4, r5}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40010000 	.word	0x40010000

08001520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001520:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001522:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001524:	6a02      	ldr	r2, [r0, #32]
 8001526:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800152a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800152c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800152e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001530:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001534:	680c      	ldr	r4, [r1, #0]
 8001536:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800153a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800153e:	688c      	ldr	r4, [r1, #8]
 8001540:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001544:	4c11      	ldr	r4, [pc, #68]	@ (800158c <TIM_OC3_SetConfig+0x6c>)
 8001546:	42a0      	cmp	r0, r4
 8001548:	d003      	beq.n	8001552 <TIM_OC3_SetConfig+0x32>
 800154a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800154e:	42a0      	cmp	r0, r4
 8001550:	d106      	bne.n	8001560 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001552:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001556:	68cc      	ldr	r4, [r1, #12]
 8001558:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800155c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001560:	4c0a      	ldr	r4, [pc, #40]	@ (800158c <TIM_OC3_SetConfig+0x6c>)
 8001562:	42a0      	cmp	r0, r4
 8001564:	d003      	beq.n	800156e <TIM_OC3_SetConfig+0x4e>
 8001566:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800156a:	42a0      	cmp	r0, r4
 800156c:	d107      	bne.n	800157e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800156e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001572:	694c      	ldr	r4, [r1, #20]
 8001574:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001578:	698c      	ldr	r4, [r1, #24]
 800157a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800157e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001580:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001582:	684a      	ldr	r2, [r1, #4]
 8001584:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001586:	6203      	str	r3, [r0, #32]
}
 8001588:	bc30      	pop	{r4, r5}
 800158a:	4770      	bx	lr
 800158c:	40010000 	.word	0x40010000

08001590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001590:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001592:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001594:	6a02      	ldr	r2, [r0, #32]
 8001596:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800159a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800159c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800159e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80015a0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015a4:	680d      	ldr	r5, [r1, #0]
 80015a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80015aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015ae:	688d      	ldr	r5, [r1, #8]
 80015b0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015b4:	4d09      	ldr	r5, [pc, #36]	@ (80015dc <TIM_OC4_SetConfig+0x4c>)
 80015b6:	42a8      	cmp	r0, r5
 80015b8:	d003      	beq.n	80015c2 <TIM_OC4_SetConfig+0x32>
 80015ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80015be:	42a8      	cmp	r0, r5
 80015c0:	d104      	bne.n	80015cc <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015c2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015c6:	694d      	ldr	r5, [r1, #20]
 80015c8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015ce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015d0:	684a      	ldr	r2, [r1, #4]
 80015d2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015d4:	6203      	str	r3, [r0, #32]
}
 80015d6:	bc30      	pop	{r4, r5}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40010000 	.word	0x40010000

080015e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80015e0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80015e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015e4:	6a04      	ldr	r4, [r0, #32]
 80015e6:	f024 0401 	bic.w	r4, r4, #1
 80015ea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015ec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015ee:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015f2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015f6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80015fa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80015fc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80015fe:	6203      	str	r3, [r0, #32]
}
 8001600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001604:	4770      	bx	lr

08001606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001606:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001608:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800160a:	6a04      	ldr	r4, [r0, #32]
 800160c:	f024 0410 	bic.w	r4, r4, #16
 8001610:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001612:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001614:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001618:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800161c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001620:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001624:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001626:	6203      	str	r3, [r0, #32]
}
 8001628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800162c:	4770      	bx	lr

0800162e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800162e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001634:	430b      	orrs	r3, r1
 8001636:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800163a:	6083      	str	r3, [r0, #8]
}
 800163c:	4770      	bx	lr

0800163e <HAL_TIM_PWM_MspInit>:
}
 800163e:	4770      	bx	lr

08001640 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001640:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001642:	4a34      	ldr	r2, [pc, #208]	@ (8001714 <TIM_Base_SetConfig+0xd4>)
 8001644:	4290      	cmp	r0, r2
 8001646:	d012      	beq.n	800166e <TIM_Base_SetConfig+0x2e>
 8001648:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800164c:	d00f      	beq.n	800166e <TIM_Base_SetConfig+0x2e>
 800164e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001652:	4290      	cmp	r0, r2
 8001654:	d00b      	beq.n	800166e <TIM_Base_SetConfig+0x2e>
 8001656:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800165a:	4290      	cmp	r0, r2
 800165c:	d007      	beq.n	800166e <TIM_Base_SetConfig+0x2e>
 800165e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001662:	4290      	cmp	r0, r2
 8001664:	d003      	beq.n	800166e <TIM_Base_SetConfig+0x2e>
 8001666:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800166a:	4290      	cmp	r0, r2
 800166c:	d103      	bne.n	8001676 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800166e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001672:	684a      	ldr	r2, [r1, #4]
 8001674:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001676:	4a27      	ldr	r2, [pc, #156]	@ (8001714 <TIM_Base_SetConfig+0xd4>)
 8001678:	4290      	cmp	r0, r2
 800167a:	d02a      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 800167c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001680:	d027      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 8001682:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001686:	4290      	cmp	r0, r2
 8001688:	d023      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 800168a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800168e:	4290      	cmp	r0, r2
 8001690:	d01f      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 8001692:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001696:	4290      	cmp	r0, r2
 8001698:	d01b      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 800169a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800169e:	4290      	cmp	r0, r2
 80016a0:	d017      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 80016a2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80016a6:	4290      	cmp	r0, r2
 80016a8:	d013      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016ae:	4290      	cmp	r0, r2
 80016b0:	d00f      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 80016b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016b6:	4290      	cmp	r0, r2
 80016b8:	d00b      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 80016ba:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80016be:	4290      	cmp	r0, r2
 80016c0:	d007      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 80016c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016c6:	4290      	cmp	r0, r2
 80016c8:	d003      	beq.n	80016d2 <TIM_Base_SetConfig+0x92>
 80016ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016ce:	4290      	cmp	r0, r2
 80016d0:	d103      	bne.n	80016da <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016d6:	68ca      	ldr	r2, [r1, #12]
 80016d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016de:	694a      	ldr	r2, [r1, #20]
 80016e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016e4:	688b      	ldr	r3, [r1, #8]
 80016e6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016e8:	680b      	ldr	r3, [r1, #0]
 80016ea:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <TIM_Base_SetConfig+0xd4>)
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d003      	beq.n	80016fa <TIM_Base_SetConfig+0xba>
 80016f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016f6:	4298      	cmp	r0, r3
 80016f8:	d101      	bne.n	80016fe <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80016fa:	690b      	ldr	r3, [r1, #16]
 80016fc:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80016fe:	2301      	movs	r3, #1
 8001700:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001702:	6903      	ldr	r3, [r0, #16]
 8001704:	f013 0f01 	tst.w	r3, #1
 8001708:	d003      	beq.n	8001712 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800170a:	6903      	ldr	r3, [r0, #16]
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6103      	str	r3, [r0, #16]
}
 8001712:	4770      	bx	lr
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001718:	b340      	cbz	r0, 800176c <HAL_TIM_Base_Init+0x54>
{
 800171a:	b510      	push	{r4, lr}
 800171c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800171e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001722:	b1f3      	cbz	r3, 8001762 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001724:	2302      	movs	r3, #2
 8001726:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172a:	4621      	mov	r1, r4
 800172c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001730:	f7ff ff86 	bl	8001640 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001734:	2301      	movs	r3, #1
 8001736:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800173e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001742:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001746:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800174e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001752:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001756:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800175a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800175e:	2000      	movs	r0, #0
}
 8001760:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001762:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001766:	f7ff f8b3 	bl	80008d0 <HAL_TIM_Base_MspInit>
 800176a:	e7db      	b.n	8001724 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800176c:	2001      	movs	r0, #1
}
 800176e:	4770      	bx	lr

08001770 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001770:	b340      	cbz	r0, 80017c4 <HAL_TIM_PWM_Init+0x54>
{
 8001772:	b510      	push	{r4, lr}
 8001774:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001776:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800177a:	b1f3      	cbz	r3, 80017ba <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800177c:	2302      	movs	r3, #2
 800177e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001782:	4621      	mov	r1, r4
 8001784:	f851 0b04 	ldr.w	r0, [r1], #4
 8001788:	f7ff ff5a 	bl	8001640 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178c:	2301      	movs	r3, #1
 800178e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001796:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800179a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800179e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80017ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80017b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80017ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80017be:	f7ff ff3e 	bl	800163e <HAL_TIM_PWM_MspInit>
 80017c2:	e7db      	b.n	800177c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
}
 80017c6:	4770      	bx	lr

080017c8 <TIM_OC2_SetConfig>:
{
 80017c8:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80017ca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017cc:	6a02      	ldr	r2, [r0, #32]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80017d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80017d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017d8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017dc:	680d      	ldr	r5, [r1, #0]
 80017de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80017e2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80017e6:	688d      	ldr	r5, [r1, #8]
 80017e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80017ec:	4d11      	ldr	r5, [pc, #68]	@ (8001834 <TIM_OC2_SetConfig+0x6c>)
 80017ee:	42a8      	cmp	r0, r5
 80017f0:	d003      	beq.n	80017fa <TIM_OC2_SetConfig+0x32>
 80017f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80017f6:	42a8      	cmp	r0, r5
 80017f8:	d106      	bne.n	8001808 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80017fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80017fe:	68cd      	ldr	r5, [r1, #12]
 8001800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001808:	4d0a      	ldr	r5, [pc, #40]	@ (8001834 <TIM_OC2_SetConfig+0x6c>)
 800180a:	42a8      	cmp	r0, r5
 800180c:	d003      	beq.n	8001816 <TIM_OC2_SetConfig+0x4e>
 800180e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001812:	42a8      	cmp	r0, r5
 8001814:	d107      	bne.n	8001826 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001816:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800181a:	694d      	ldr	r5, [r1, #20]
 800181c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001820:	698d      	ldr	r5, [r1, #24]
 8001822:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001826:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001828:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800182a:	684a      	ldr	r2, [r1, #4]
 800182c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800182e:	6203      	str	r3, [r0, #32]
}
 8001830:	bc30      	pop	{r4, r5}
 8001832:	4770      	bx	lr
 8001834:	40010000 	.word	0x40010000

08001838 <HAL_TIM_PWM_ConfigChannel>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800183a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800183e:	2b01      	cmp	r3, #1
 8001840:	d066      	beq.n	8001910 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	2301      	movs	r3, #1
 8001848:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800184c:	2a0c      	cmp	r2, #12
 800184e:	d85a      	bhi.n	8001906 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001850:	e8df f002 	tbb	[pc, r2]
 8001854:	59595907 	.word	0x59595907
 8001858:	5959591b 	.word	0x5959591b
 800185c:	59595930 	.word	0x59595930
 8001860:	44          	.byte	0x44
 8001861:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001862:	6800      	ldr	r0, [r0, #0]
 8001864:	f7ff fe24 	bl	80014b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6993      	ldr	r3, [r2, #24]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	6993      	ldr	r3, [r2, #24]
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	6993      	ldr	r3, [r2, #24]
 8001880:	6929      	ldr	r1, [r5, #16]
 8001882:	430b      	orrs	r3, r1
 8001884:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2000      	movs	r0, #0
      break;
 8001888:	e03e      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800188a:	6800      	ldr	r0, [r0, #0]
 800188c:	f7ff ff9c 	bl	80017c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001890:	6822      	ldr	r2, [r4, #0]
 8001892:	6993      	ldr	r3, [r2, #24]
 8001894:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001898:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	6993      	ldr	r3, [r2, #24]
 800189e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018a2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	6993      	ldr	r3, [r2, #24]
 80018a8:	6929      	ldr	r1, [r5, #16]
 80018aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018ae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2000      	movs	r0, #0
      break;
 80018b2:	e029      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018b4:	6800      	ldr	r0, [r0, #0]
 80018b6:	f7ff fe33 	bl	8001520 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	69d3      	ldr	r3, [r2, #28]
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	69d3      	ldr	r3, [r2, #28]
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018ce:	6822      	ldr	r2, [r4, #0]
 80018d0:	69d3      	ldr	r3, [r2, #28]
 80018d2:	6929      	ldr	r1, [r5, #16]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2000      	movs	r0, #0
      break;
 80018da:	e015      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018dc:	6800      	ldr	r0, [r0, #0]
 80018de:	f7ff fe57 	bl	8001590 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	69d3      	ldr	r3, [r2, #28]
 80018e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	69d3      	ldr	r3, [r2, #28]
 80018f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	69d3      	ldr	r3, [r2, #28]
 80018fa:	6929      	ldr	r1, [r5, #16]
 80018fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001900:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2000      	movs	r0, #0
      break;
 8001904:	e000      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8001906:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001908:	2300      	movs	r3, #0
 800190a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800190e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001910:	2002      	movs	r0, #2
 8001912:	e7fc      	b.n	800190e <HAL_TIM_PWM_ConfigChannel+0xd6>

08001914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001914:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001916:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001918:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800191c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001920:	430a      	orrs	r2, r1
 8001922:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001926:	6082      	str	r2, [r0, #8]
}
 8001928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800192e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d078      	beq.n	8001a28 <HAL_TIM_ConfigClockSource+0xfa>
{
 8001936:	b510      	push	{r4, lr}
 8001938:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800193a:	2301      	movs	r3, #1
 800193c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001940:	2302      	movs	r3, #2
 8001942:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001946:	6802      	ldr	r2, [r0, #0]
 8001948:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800194a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800194e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001952:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001954:	680b      	ldr	r3, [r1, #0]
 8001956:	2b60      	cmp	r3, #96	@ 0x60
 8001958:	d04c      	beq.n	80019f4 <HAL_TIM_ConfigClockSource+0xc6>
 800195a:	d829      	bhi.n	80019b0 <HAL_TIM_ConfigClockSource+0x82>
 800195c:	2b40      	cmp	r3, #64	@ 0x40
 800195e:	d054      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0xdc>
 8001960:	d90c      	bls.n	800197c <HAL_TIM_ConfigClockSource+0x4e>
 8001962:	2b50      	cmp	r3, #80	@ 0x50
 8001964:	d122      	bne.n	80019ac <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001966:	68ca      	ldr	r2, [r1, #12]
 8001968:	6849      	ldr	r1, [r1, #4]
 800196a:	6800      	ldr	r0, [r0, #0]
 800196c:	f7ff fe38 	bl	80015e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001970:	2150      	movs	r1, #80	@ 0x50
 8001972:	6820      	ldr	r0, [r4, #0]
 8001974:	f7ff fe5b 	bl	800162e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2000      	movs	r0, #0
      break;
 800197a:	e005      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800197c:	2b20      	cmp	r3, #32
 800197e:	d00d      	beq.n	800199c <HAL_TIM_ConfigClockSource+0x6e>
 8001980:	d909      	bls.n	8001996 <HAL_TIM_ConfigClockSource+0x68>
 8001982:	2b30      	cmp	r3, #48	@ 0x30
 8001984:	d00a      	beq.n	800199c <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8001986:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001988:	2301      	movs	r3, #1
 800198a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800198e:	2300      	movs	r3, #0
 8001990:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001994:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001996:	b10b      	cbz	r3, 800199c <HAL_TIM_ConfigClockSource+0x6e>
 8001998:	2b10      	cmp	r3, #16
 800199a:	d105      	bne.n	80019a8 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800199c:	4619      	mov	r1, r3
 800199e:	6820      	ldr	r0, [r4, #0]
 80019a0:	f7ff fe45 	bl	800162e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2000      	movs	r0, #0
      break;
 80019a6:	e7ef      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80019a8:	2001      	movs	r0, #1
 80019aa:	e7ed      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
 80019ac:	2001      	movs	r0, #1
 80019ae:	e7eb      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80019b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019b4:	d034      	beq.n	8001a20 <HAL_TIM_ConfigClockSource+0xf2>
 80019b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ba:	d10c      	bne.n	80019d6 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80019bc:	68cb      	ldr	r3, [r1, #12]
 80019be:	684a      	ldr	r2, [r1, #4]
 80019c0:	6889      	ldr	r1, [r1, #8]
 80019c2:	6800      	ldr	r0, [r0, #0]
 80019c4:	f7ff ffa6 	bl	8001914 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	6893      	ldr	r3, [r2, #8]
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019d2:	2000      	movs	r0, #0
      break;
 80019d4:	e7d8      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80019d6:	2b70      	cmp	r3, #112	@ 0x70
 80019d8:	d124      	bne.n	8001a24 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80019da:	68cb      	ldr	r3, [r1, #12]
 80019dc:	684a      	ldr	r2, [r1, #4]
 80019de:	6889      	ldr	r1, [r1, #8]
 80019e0:	6800      	ldr	r0, [r0, #0]
 80019e2:	f7ff ff97 	bl	8001914 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80019ee:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	2000      	movs	r0, #0
      break;
 80019f2:	e7c9      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019f4:	68ca      	ldr	r2, [r1, #12]
 80019f6:	6849      	ldr	r1, [r1, #4]
 80019f8:	6800      	ldr	r0, [r0, #0]
 80019fa:	f7ff fe04 	bl	8001606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019fe:	2160      	movs	r1, #96	@ 0x60
 8001a00:	6820      	ldr	r0, [r4, #0]
 8001a02:	f7ff fe14 	bl	800162e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2000      	movs	r0, #0
      break;
 8001a08:	e7be      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a0a:	68ca      	ldr	r2, [r1, #12]
 8001a0c:	6849      	ldr	r1, [r1, #4]
 8001a0e:	6800      	ldr	r0, [r0, #0]
 8001a10:	f7ff fde6 	bl	80015e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a14:	2140      	movs	r1, #64	@ 0x40
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	f7ff fe09 	bl	800162e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001a1c:	2000      	movs	r0, #0
      break;
 8001a1e:	e7b3      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001a20:	2000      	movs	r0, #0
 8001a22:	e7b1      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
 8001a26:	e7af      	b.n	8001988 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001a28:	2002      	movs	r0, #2
}
 8001a2a:	4770      	bx	lr

08001a2c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001a2c:	f001 011f 	and.w	r1, r1, #31
 8001a30:	f04f 0c01 	mov.w	ip, #1
 8001a34:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a38:	6a03      	ldr	r3, [r0, #32]
 8001a3a:	ea23 030c 	bic.w	r3, r3, ip
 8001a3e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001a40:	6a03      	ldr	r3, [r0, #32]
 8001a42:	408a      	lsls	r2, r1
 8001a44:	4313      	orrs	r3, r2
 8001a46:	6203      	str	r3, [r0, #32]
}
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_TIM_PWM_Start>:
{
 8001a4c:	b510      	push	{r4, lr}
 8001a4e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a50:	4608      	mov	r0, r1
 8001a52:	2900      	cmp	r1, #0
 8001a54:	d142      	bne.n	8001adc <HAL_TIM_PWM_Start+0x90>
 8001a56:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	bf18      	it	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d16e      	bne.n	8001b44 <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d151      	bne.n	8001b0e <HAL_TIM_PWM_Start+0xc2>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a70:	2201      	movs	r2, #1
 8001a72:	4601      	mov	r1, r0
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	f7ff ffd9 	bl	8001a2c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	4a33      	ldr	r2, [pc, #204]	@ (8001b4c <HAL_TIM_PWM_Start+0x100>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x3e>
 8001a82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d103      	bne.n	8001a92 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8001a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <HAL_TIM_PWM_Start+0x100>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d049      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a9e:	d046      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001aa0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d042      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001aa8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d03e      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001ab0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d03a      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001ab8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d036      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001ac0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d032      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
 8001ac8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d02e      	beq.n	8001b2e <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	e032      	b.n	8001b42 <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001adc:	2904      	cmp	r1, #4
 8001ade:	d008      	beq.n	8001af2 <HAL_TIM_PWM_Start+0xa6>
 8001ae0:	2908      	cmp	r1, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_TIM_PWM_Start+0xb4>
 8001ae4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	bf18      	it	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	e7b7      	b.n	8001a62 <HAL_TIM_PWM_Start+0x16>
 8001af2:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	bf18      	it	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	e7b0      	b.n	8001a62 <HAL_TIM_PWM_Start+0x16>
 8001b00:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	bf18      	it	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	e7a9      	b.n	8001a62 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b0e:	2804      	cmp	r0, #4
 8001b10:	d005      	beq.n	8001b1e <HAL_TIM_PWM_Start+0xd2>
 8001b12:	2808      	cmp	r0, #8
 8001b14:	d007      	beq.n	8001b26 <HAL_TIM_PWM_Start+0xda>
 8001b16:	2302      	movs	r3, #2
 8001b18:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8001b1c:	e7a8      	b.n	8001a70 <HAL_TIM_PWM_Start+0x24>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001b24:	e7a4      	b.n	8001a70 <HAL_TIM_PWM_Start+0x24>
 8001b26:	2302      	movs	r3, #2
 8001b28:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001b2c:	e7a0      	b.n	8001a70 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b34:	2a06      	cmp	r2, #6
 8001b36:	d007      	beq.n	8001b48 <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001b40:	2000      	movs	r0, #0
}
 8001b42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b44:	2001      	movs	r0, #1
 8001b46:	e7fc      	b.n	8001b42 <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e7fa      	b.n	8001b42 <HAL_TIM_PWM_Start+0xf6>
 8001b4c:	40010000 	.word	0x40010000

08001b50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b50:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001b54:	2a01      	cmp	r2, #1
 8001b56:	d03d      	beq.n	8001bd4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8001b58:	b410      	push	{r4}
 8001b5a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b62:	2202      	movs	r2, #2
 8001b64:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b68:	6802      	ldr	r2, [r0, #0]
 8001b6a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b6c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b6e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b72:	6808      	ldr	r0, [r1, #0]
 8001b74:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b78:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8001b7e:	4282      	cmp	r2, r0
 8001b80:	d01a      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b82:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001b86:	d017      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b88:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001b8c:	4282      	cmp	r2, r0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b90:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001b94:	4282      	cmp	r2, r0
 8001b96:	d00f      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001b98:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001b9c:	4282      	cmp	r2, r0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001ba0:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001ba4:	4282      	cmp	r2, r0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001ba8:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8001bac:	4282      	cmp	r2, r0
 8001bae:	d003      	beq.n	8001bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001bb0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001bb4:	4282      	cmp	r2, r0
 8001bb6:	d104      	bne.n	8001bc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bb8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bbc:	6849      	ldr	r1, [r1, #4]
 8001bbe:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bc0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bd2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001bd4:	2002      	movs	r0, #2
}
 8001bd6:	4770      	bx	lr
 8001bd8:	40010000 	.word	0x40010000

08001bdc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bdc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bde:	f102 030c 	add.w	r3, r2, #12
 8001be2:	e853 3f00 	ldrex	r3, [r3]
 8001be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bea:	320c      	adds	r2, #12
 8001bec:	e842 3100 	strex	r1, r3, [r2]
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d1f3      	bne.n	8001bdc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf6:	f102 0314 	add.w	r3, r2, #20
 8001bfa:	e853 3f00 	ldrex	r3, [r3]
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c02:	3214      	adds	r2, #20
 8001c04:	e842 3100 	strex	r1, r3, [r2]
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	d1f3      	bne.n	8001bf4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d005      	beq.n	8001c1e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c12:	2320      	movs	r3, #32
 8001c14:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001c1c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c1e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c20:	f102 030c 	add.w	r3, r2, #12
 8001c24:	e853 3f00 	ldrex	r3, [r3]
 8001c28:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2c:	320c      	adds	r2, #12
 8001c2e:	e842 3100 	strex	r1, r3, [r2]
 8001c32:	2900      	cmp	r1, #0
 8001c34:	d1f3      	bne.n	8001c1e <UART_EndRxTransfer+0x42>
 8001c36:	e7ec      	b.n	8001c12 <UART_EndRxTransfer+0x36>

08001c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c3c:	6802      	ldr	r2, [r0, #0]
 8001c3e:	6913      	ldr	r3, [r2, #16]
 8001c40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c44:	68c1      	ldr	r1, [r0, #12]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c4a:	6883      	ldr	r3, [r0, #8]
 8001c4c:	6902      	ldr	r2, [r0, #16]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	6943      	ldr	r3, [r0, #20]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	69c3      	ldr	r3, [r0, #28]
 8001c56:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001c58:	6801      	ldr	r1, [r0, #0]
 8001c5a:	68cb      	ldr	r3, [r1, #12]
 8001c5c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001c60:	f023 030c 	bic.w	r3, r3, #12
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c68:	6802      	ldr	r2, [r0, #0]
 8001c6a:	6953      	ldr	r3, [r2, #20]
 8001c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c70:	6981      	ldr	r1, [r0, #24]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c76:	6803      	ldr	r3, [r0, #0]
 8001c78:	4a31      	ldr	r2, [pc, #196]	@ (8001d40 <UART_SetConfig+0x108>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d006      	beq.n	8001c8c <UART_SetConfig+0x54>
 8001c7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d002      	beq.n	8001c8c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c86:	f7ff fbf3 	bl	8001470 <HAL_RCC_GetPCLK1Freq>
 8001c8a:	e001      	b.n	8001c90 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c8c:	f7ff fc00 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c90:	69e3      	ldr	r3, [r4, #28]
 8001c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c96:	d029      	beq.n	8001cec <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	1803      	adds	r3, r0, r0
 8001c9c:	4149      	adcs	r1, r1
 8001c9e:	181b      	adds	r3, r3, r0
 8001ca0:	f141 0100 	adc.w	r1, r1, #0
 8001ca4:	00c9      	lsls	r1, r1, #3
 8001ca6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1818      	adds	r0, r3, r0
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001cb4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001cb8:	f141 0100 	adc.w	r1, r1, #0
 8001cbc:	f7fe fad8 	bl	8000270 <__aeabi_uldivmod>
 8001cc0:	4a20      	ldr	r2, [pc, #128]	@ (8001d44 <UART_SetConfig+0x10c>)
 8001cc2:	fba2 3100 	umull	r3, r1, r2, r0
 8001cc6:	0949      	lsrs	r1, r1, #5
 8001cc8:	2364      	movs	r3, #100	@ 0x64
 8001cca:	fb03 0311 	mls	r3, r3, r1, r0
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	3332      	adds	r3, #50	@ 0x32
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cdc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }
}
 8001cea:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cec:	2300      	movs	r3, #0
 8001cee:	1802      	adds	r2, r0, r0
 8001cf0:	eb43 0103 	adc.w	r1, r3, r3
 8001cf4:	1812      	adds	r2, r2, r0
 8001cf6:	f141 0100 	adc.w	r1, r1, #0
 8001cfa:	00c9      	lsls	r1, r1, #3
 8001cfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d00:	00d2      	lsls	r2, r2, #3
 8001d02:	1810      	adds	r0, r2, r0
 8001d04:	f141 0100 	adc.w	r1, r1, #0
 8001d08:	6862      	ldr	r2, [r4, #4]
 8001d0a:	1892      	adds	r2, r2, r2
 8001d0c:	415b      	adcs	r3, r3
 8001d0e:	f7fe faaf 	bl	8000270 <__aeabi_uldivmod>
 8001d12:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <UART_SetConfig+0x10c>)
 8001d14:	fba2 3100 	umull	r3, r1, r2, r0
 8001d18:	0949      	lsrs	r1, r1, #5
 8001d1a:	2364      	movs	r3, #100	@ 0x64
 8001d1c:	fb03 0311 	mls	r3, r3, r1, r0
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	3332      	adds	r3, #50	@ 0x32
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	005a      	lsls	r2, r3, #1
 8001d2c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001d30:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	6821      	ldr	r1, [r4, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
 8001d3e:	e7d4      	b.n	8001cea <UART_SetConfig+0xb2>
 8001d40:	40011000 	.word	0x40011000
 8001d44:	51eb851f 	.word	0x51eb851f

08001d48 <UART_WaitOnFlagUntilTimeout>:
{
 8001d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	4605      	mov	r5, r0
 8001d50:	460e      	mov	r6, r1
 8001d52:	4617      	mov	r7, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5a:	682b      	ldr	r3, [r5, #0]
 8001d5c:	681c      	ldr	r4, [r3, #0]
 8001d5e:	ea36 0404 	bics.w	r4, r6, r4
 8001d62:	bf0c      	ite	eq
 8001d64:	2401      	moveq	r4, #1
 8001d66:	2400      	movne	r4, #0
 8001d68:	42bc      	cmp	r4, r7
 8001d6a:	d128      	bne.n	8001dbe <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001d6c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001d70:	d0f3      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d72:	f7fe fef7 	bl	8000b64 <HAL_GetTick>
 8001d76:	eba0 0009 	sub.w	r0, r0, r9
 8001d7a:	4540      	cmp	r0, r8
 8001d7c:	d823      	bhi.n	8001dc6 <UART_WaitOnFlagUntilTimeout+0x7e>
 8001d7e:	f1b8 0f00 	cmp.w	r8, #0
 8001d82:	d022      	beq.n	8001dca <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	f012 0f04 	tst.w	r2, #4
 8001d8c:	d0e5      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x12>
 8001d8e:	2e80      	cmp	r6, #128	@ 0x80
 8001d90:	d0e3      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x12>
 8001d92:	2e40      	cmp	r6, #64	@ 0x40
 8001d94:	d0e1      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	f012 0f08 	tst.w	r2, #8
 8001d9c:	d0dd      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d9e:	2400      	movs	r4, #0
 8001da0:	9401      	str	r4, [sp, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001dac:	4628      	mov	r0, r5
 8001dae:	f7ff ff15 	bl	8001bdc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001db2:	2308      	movs	r3, #8
 8001db4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001db6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001dba:	2001      	movs	r0, #1
 8001dbc:	e000      	b.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	b003      	add	sp, #12
 8001dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	e7fa      	b.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x78>
 8001dca:	2003      	movs	r0, #3
 8001dcc:	e7f8      	b.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x78>

08001dce <HAL_UART_Init>:
  if (huart == NULL)
 8001dce:	b360      	cbz	r0, 8001e2a <HAL_UART_Init+0x5c>
{
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001dd8:	b313      	cbz	r3, 8001e20 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dda:	2324      	movs	r3, #36	@ 0x24
 8001ddc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	68d3      	ldr	r3, [r2, #12]
 8001de4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001de8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff ff24 	bl	8001c38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	6913      	ldr	r3, [r2, #16]
 8001df4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001df8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	6953      	ldr	r3, [r2, #20]
 8001dfe:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001e02:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e04:	6822      	ldr	r2, [r4, #0]
 8001e06:	68d3      	ldr	r3, [r2, #12]
 8001e08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e0c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e12:	2320      	movs	r3, #32
 8001e14:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e1c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001e1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e20:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001e24:	f7fe fd98 	bl	8000958 <HAL_UART_MspInit>
 8001e28:	e7d7      	b.n	8001dda <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_UART_Transmit>:
{
 8001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001e36:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d156      	bne.n	8001eee <HAL_UART_Transmit+0xc0>
 8001e40:	4604      	mov	r4, r0
 8001e42:	460d      	mov	r5, r1
 8001e44:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001e46:	2900      	cmp	r1, #0
 8001e48:	d055      	beq.n	8001ef6 <HAL_UART_Transmit+0xc8>
 8001e4a:	b90a      	cbnz	r2, 8001e50 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e04f      	b.n	8001ef0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e54:	2321      	movs	r3, #33	@ 0x21
 8001e56:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001e5a:	f7fe fe83 	bl	8000b64 <HAL_GetTick>
 8001e5e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001e60:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e64:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e68:	68a3      	ldr	r3, [r4, #8]
 8001e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e6e:	d002      	beq.n	8001e76 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001e70:	f04f 0800 	mov.w	r8, #0
 8001e74:	e014      	b.n	8001ea0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e76:	6923      	ldr	r3, [r4, #16]
 8001e78:	b32b      	cbz	r3, 8001ec6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001e7a:	f04f 0800 	mov.w	r8, #0
 8001e7e:	e00f      	b.n	8001ea0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001e80:	2320      	movs	r3, #32
 8001e82:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001e86:	2003      	movs	r0, #3
 8001e88:	e032      	b.n	8001ef0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e8a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e94:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001e96:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001e98:	b292      	uxth	r2, r2
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ea0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b193      	cbz	r3, 8001ecc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea6:	9600      	str	r6, [sp, #0]
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ff4a 	bl	8001d48 <UART_WaitOnFlagUntilTimeout>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d1e3      	bne.n	8001e80 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001eb8:	2d00      	cmp	r5, #0
 8001eba:	d0e6      	beq.n	8001e8a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ebc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ec4:	e7e7      	b.n	8001e96 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001ec6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001ec8:	2500      	movs	r5, #0
 8001eca:	e7e9      	b.n	8001ea0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ecc:	9600      	str	r6, [sp, #0]
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2140      	movs	r1, #64	@ 0x40
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff ff37 	bl	8001d48 <UART_WaitOnFlagUntilTimeout>
 8001eda:	b918      	cbnz	r0, 8001ee4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001edc:	2320      	movs	r3, #32
 8001ede:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001ee2:	e005      	b.n	8001ef0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001eea:	2003      	movs	r0, #3
 8001eec:	e000      	b.n	8001ef0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001eee:	2002      	movs	r0, #2
}
 8001ef0:	b002      	add	sp, #8
 8001ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e7fa      	b.n	8001ef0 <HAL_UART_Transmit+0xc2>
	...

08001efc <std>:
 8001efc:	2300      	movs	r3, #0
 8001efe:	b510      	push	{r4, lr}
 8001f00:	4604      	mov	r4, r0
 8001f02:	e9c0 3300 	strd	r3, r3, [r0]
 8001f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f0a:	6083      	str	r3, [r0, #8]
 8001f0c:	8181      	strh	r1, [r0, #12]
 8001f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f10:	81c2      	strh	r2, [r0, #14]
 8001f12:	6183      	str	r3, [r0, #24]
 8001f14:	4619      	mov	r1, r3
 8001f16:	2208      	movs	r2, #8
 8001f18:	305c      	adds	r0, #92	@ 0x5c
 8001f1a:	f000 f9f9 	bl	8002310 <memset>
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <std+0x58>)
 8001f20:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <std+0x5c>)
 8001f24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <std+0x60>)
 8001f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <std+0x64>)
 8001f2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <std+0x68>)
 8001f30:	6224      	str	r4, [r4, #32]
 8001f32:	429c      	cmp	r4, r3
 8001f34:	d006      	beq.n	8001f44 <std+0x48>
 8001f36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f3a:	4294      	cmp	r4, r2
 8001f3c:	d002      	beq.n	8001f44 <std+0x48>
 8001f3e:	33d0      	adds	r3, #208	@ 0xd0
 8001f40:	429c      	cmp	r4, r3
 8001f42:	d105      	bne.n	8001f50 <std+0x54>
 8001f44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f4c:	f000 ba58 	b.w	8002400 <__retarget_lock_init_recursive>
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	bf00      	nop
 8001f54:	08002161 	.word	0x08002161
 8001f58:	08002183 	.word	0x08002183
 8001f5c:	080021bb 	.word	0x080021bb
 8001f60:	080021df 	.word	0x080021df
 8001f64:	2000011c 	.word	0x2000011c

08001f68 <stdio_exit_handler>:
 8001f68:	4a02      	ldr	r2, [pc, #8]	@ (8001f74 <stdio_exit_handler+0xc>)
 8001f6a:	4903      	ldr	r1, [pc, #12]	@ (8001f78 <stdio_exit_handler+0x10>)
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <stdio_exit_handler+0x14>)
 8001f6e:	f000 b869 	b.w	8002044 <_fwalk_sglue>
 8001f72:	bf00      	nop
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	08002ca1 	.word	0x08002ca1
 8001f7c:	2000001c 	.word	0x2000001c

08001f80 <cleanup_stdio>:
 8001f80:	6841      	ldr	r1, [r0, #4]
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <cleanup_stdio+0x34>)
 8001f84:	4299      	cmp	r1, r3
 8001f86:	b510      	push	{r4, lr}
 8001f88:	4604      	mov	r4, r0
 8001f8a:	d001      	beq.n	8001f90 <cleanup_stdio+0x10>
 8001f8c:	f000 fe88 	bl	8002ca0 <_fflush_r>
 8001f90:	68a1      	ldr	r1, [r4, #8]
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <cleanup_stdio+0x38>)
 8001f94:	4299      	cmp	r1, r3
 8001f96:	d002      	beq.n	8001f9e <cleanup_stdio+0x1e>
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f000 fe81 	bl	8002ca0 <_fflush_r>
 8001f9e:	68e1      	ldr	r1, [r4, #12]
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <cleanup_stdio+0x3c>)
 8001fa2:	4299      	cmp	r1, r3
 8001fa4:	d004      	beq.n	8001fb0 <cleanup_stdio+0x30>
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fac:	f000 be78 	b.w	8002ca0 <_fflush_r>
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000011c 	.word	0x2000011c
 8001fb8:	20000184 	.word	0x20000184
 8001fbc:	200001ec 	.word	0x200001ec

08001fc0 <global_stdio_init.part.0>:
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <global_stdio_init.part.0+0x30>)
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8001ff4 <global_stdio_init.part.0+0x34>)
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff8 <global_stdio_init.part.0+0x38>)
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	4620      	mov	r0, r4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2104      	movs	r1, #4
 8001fd0:	f7ff ff94 	bl	8001efc <std>
 8001fd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2109      	movs	r1, #9
 8001fdc:	f7ff ff8e 	bl	8001efc <std>
 8001fe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fea:	2112      	movs	r1, #18
 8001fec:	f7ff bf86 	b.w	8001efc <std>
 8001ff0:	20000254 	.word	0x20000254
 8001ff4:	2000011c 	.word	0x2000011c
 8001ff8:	08001f69 	.word	0x08001f69

08001ffc <__sfp_lock_acquire>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	@ (8002004 <__sfp_lock_acquire+0x8>)
 8001ffe:	f000 ba00 	b.w	8002402 <__retarget_lock_acquire_recursive>
 8002002:	bf00      	nop
 8002004:	2000025d 	.word	0x2000025d

08002008 <__sfp_lock_release>:
 8002008:	4801      	ldr	r0, [pc, #4]	@ (8002010 <__sfp_lock_release+0x8>)
 800200a:	f000 b9fb 	b.w	8002404 <__retarget_lock_release_recursive>
 800200e:	bf00      	nop
 8002010:	2000025d 	.word	0x2000025d

08002014 <__sinit>:
 8002014:	b510      	push	{r4, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	f7ff fff0 	bl	8001ffc <__sfp_lock_acquire>
 800201c:	6a23      	ldr	r3, [r4, #32]
 800201e:	b11b      	cbz	r3, 8002028 <__sinit+0x14>
 8002020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002024:	f7ff bff0 	b.w	8002008 <__sfp_lock_release>
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <__sinit+0x28>)
 800202a:	6223      	str	r3, [r4, #32]
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <__sinit+0x2c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f5      	bne.n	8002020 <__sinit+0xc>
 8002034:	f7ff ffc4 	bl	8001fc0 <global_stdio_init.part.0>
 8002038:	e7f2      	b.n	8002020 <__sinit+0xc>
 800203a:	bf00      	nop
 800203c:	08001f81 	.word	0x08001f81
 8002040:	20000254 	.word	0x20000254

08002044 <_fwalk_sglue>:
 8002044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002048:	4607      	mov	r7, r0
 800204a:	4688      	mov	r8, r1
 800204c:	4614      	mov	r4, r2
 800204e:	2600      	movs	r6, #0
 8002050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002054:	f1b9 0901 	subs.w	r9, r9, #1
 8002058:	d505      	bpl.n	8002066 <_fwalk_sglue+0x22>
 800205a:	6824      	ldr	r4, [r4, #0]
 800205c:	2c00      	cmp	r4, #0
 800205e:	d1f7      	bne.n	8002050 <_fwalk_sglue+0xc>
 8002060:	4630      	mov	r0, r6
 8002062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002066:	89ab      	ldrh	r3, [r5, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d907      	bls.n	800207c <_fwalk_sglue+0x38>
 800206c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002070:	3301      	adds	r3, #1
 8002072:	d003      	beq.n	800207c <_fwalk_sglue+0x38>
 8002074:	4629      	mov	r1, r5
 8002076:	4638      	mov	r0, r7
 8002078:	47c0      	blx	r8
 800207a:	4306      	orrs	r6, r0
 800207c:	3568      	adds	r5, #104	@ 0x68
 800207e:	e7e9      	b.n	8002054 <_fwalk_sglue+0x10>

08002080 <iprintf>:
 8002080:	b40f      	push	{r0, r1, r2, r3}
 8002082:	b507      	push	{r0, r1, r2, lr}
 8002084:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <iprintf+0x20>)
 8002086:	ab04      	add	r3, sp, #16
 8002088:	6808      	ldr	r0, [r1, #0]
 800208a:	f853 2b04 	ldr.w	r2, [r3], #4
 800208e:	6881      	ldr	r1, [r0, #8]
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	f000 fadb 	bl	800264c <_vfiprintf_r>
 8002096:	b003      	add	sp, #12
 8002098:	f85d eb04 	ldr.w	lr, [sp], #4
 800209c:	b004      	add	sp, #16
 800209e:	4770      	bx	lr
 80020a0:	20000018 	.word	0x20000018

080020a4 <_puts_r>:
 80020a4:	6a03      	ldr	r3, [r0, #32]
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	6884      	ldr	r4, [r0, #8]
 80020aa:	4605      	mov	r5, r0
 80020ac:	460e      	mov	r6, r1
 80020ae:	b90b      	cbnz	r3, 80020b4 <_puts_r+0x10>
 80020b0:	f7ff ffb0 	bl	8002014 <__sinit>
 80020b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020b6:	07db      	lsls	r3, r3, #31
 80020b8:	d405      	bmi.n	80020c6 <_puts_r+0x22>
 80020ba:	89a3      	ldrh	r3, [r4, #12]
 80020bc:	0598      	lsls	r0, r3, #22
 80020be:	d402      	bmi.n	80020c6 <_puts_r+0x22>
 80020c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020c2:	f000 f99e 	bl	8002402 <__retarget_lock_acquire_recursive>
 80020c6:	89a3      	ldrh	r3, [r4, #12]
 80020c8:	0719      	lsls	r1, r3, #28
 80020ca:	d502      	bpl.n	80020d2 <_puts_r+0x2e>
 80020cc:	6923      	ldr	r3, [r4, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d135      	bne.n	800213e <_puts_r+0x9a>
 80020d2:	4621      	mov	r1, r4
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 f8c5 	bl	8002264 <__swsetup_r>
 80020da:	b380      	cbz	r0, 800213e <_puts_r+0x9a>
 80020dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80020e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020e2:	07da      	lsls	r2, r3, #31
 80020e4:	d405      	bmi.n	80020f2 <_puts_r+0x4e>
 80020e6:	89a3      	ldrh	r3, [r4, #12]
 80020e8:	059b      	lsls	r3, r3, #22
 80020ea:	d402      	bmi.n	80020f2 <_puts_r+0x4e>
 80020ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020ee:	f000 f989 	bl	8002404 <__retarget_lock_release_recursive>
 80020f2:	4628      	mov	r0, r5
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da04      	bge.n	8002104 <_puts_r+0x60>
 80020fa:	69a2      	ldr	r2, [r4, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dc17      	bgt.n	8002130 <_puts_r+0x8c>
 8002100:	290a      	cmp	r1, #10
 8002102:	d015      	beq.n	8002130 <_puts_r+0x8c>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	6022      	str	r2, [r4, #0]
 800210a:	7019      	strb	r1, [r3, #0]
 800210c:	68a3      	ldr	r3, [r4, #8]
 800210e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002112:	3b01      	subs	r3, #1
 8002114:	60a3      	str	r3, [r4, #8]
 8002116:	2900      	cmp	r1, #0
 8002118:	d1ed      	bne.n	80020f6 <_puts_r+0x52>
 800211a:	2b00      	cmp	r3, #0
 800211c:	da11      	bge.n	8002142 <_puts_r+0x9e>
 800211e:	4622      	mov	r2, r4
 8002120:	210a      	movs	r1, #10
 8002122:	4628      	mov	r0, r5
 8002124:	f000 f85f 	bl	80021e6 <__swbuf_r>
 8002128:	3001      	adds	r0, #1
 800212a:	d0d7      	beq.n	80020dc <_puts_r+0x38>
 800212c:	250a      	movs	r5, #10
 800212e:	e7d7      	b.n	80020e0 <_puts_r+0x3c>
 8002130:	4622      	mov	r2, r4
 8002132:	4628      	mov	r0, r5
 8002134:	f000 f857 	bl	80021e6 <__swbuf_r>
 8002138:	3001      	adds	r0, #1
 800213a:	d1e7      	bne.n	800210c <_puts_r+0x68>
 800213c:	e7ce      	b.n	80020dc <_puts_r+0x38>
 800213e:	3e01      	subs	r6, #1
 8002140:	e7e4      	b.n	800210c <_puts_r+0x68>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	6022      	str	r2, [r4, #0]
 8002148:	220a      	movs	r2, #10
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e7ee      	b.n	800212c <_puts_r+0x88>
	...

08002150 <puts>:
 8002150:	4b02      	ldr	r3, [pc, #8]	@ (800215c <puts+0xc>)
 8002152:	4601      	mov	r1, r0
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	f7ff bfa5 	b.w	80020a4 <_puts_r>
 800215a:	bf00      	nop
 800215c:	20000018 	.word	0x20000018

08002160 <__sread>:
 8002160:	b510      	push	{r4, lr}
 8002162:	460c      	mov	r4, r1
 8002164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002168:	f000 f8fc 	bl	8002364 <_read_r>
 800216c:	2800      	cmp	r0, #0
 800216e:	bfab      	itete	ge
 8002170:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002172:	89a3      	ldrhlt	r3, [r4, #12]
 8002174:	181b      	addge	r3, r3, r0
 8002176:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800217a:	bfac      	ite	ge
 800217c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800217e:	81a3      	strhlt	r3, [r4, #12]
 8002180:	bd10      	pop	{r4, pc}

08002182 <__swrite>:
 8002182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002186:	461f      	mov	r7, r3
 8002188:	898b      	ldrh	r3, [r1, #12]
 800218a:	05db      	lsls	r3, r3, #23
 800218c:	4605      	mov	r5, r0
 800218e:	460c      	mov	r4, r1
 8002190:	4616      	mov	r6, r2
 8002192:	d505      	bpl.n	80021a0 <__swrite+0x1e>
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	2302      	movs	r3, #2
 800219a:	2200      	movs	r2, #0
 800219c:	f000 f8d0 	bl	8002340 <_lseek_r>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021aa:	81a3      	strh	r3, [r4, #12]
 80021ac:	4632      	mov	r2, r6
 80021ae:	463b      	mov	r3, r7
 80021b0:	4628      	mov	r0, r5
 80021b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	f000 b8e7 	b.w	8002388 <_write_r>

080021ba <__sseek>:
 80021ba:	b510      	push	{r4, lr}
 80021bc:	460c      	mov	r4, r1
 80021be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c2:	f000 f8bd 	bl	8002340 <_lseek_r>
 80021c6:	1c43      	adds	r3, r0, #1
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	bf15      	itete	ne
 80021cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80021ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80021d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80021d6:	81a3      	strheq	r3, [r4, #12]
 80021d8:	bf18      	it	ne
 80021da:	81a3      	strhne	r3, [r4, #12]
 80021dc:	bd10      	pop	{r4, pc}

080021de <__sclose>:
 80021de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e2:	f000 b89d 	b.w	8002320 <_close_r>

080021e6 <__swbuf_r>:
 80021e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e8:	460e      	mov	r6, r1
 80021ea:	4614      	mov	r4, r2
 80021ec:	4605      	mov	r5, r0
 80021ee:	b118      	cbz	r0, 80021f8 <__swbuf_r+0x12>
 80021f0:	6a03      	ldr	r3, [r0, #32]
 80021f2:	b90b      	cbnz	r3, 80021f8 <__swbuf_r+0x12>
 80021f4:	f7ff ff0e 	bl	8002014 <__sinit>
 80021f8:	69a3      	ldr	r3, [r4, #24]
 80021fa:	60a3      	str	r3, [r4, #8]
 80021fc:	89a3      	ldrh	r3, [r4, #12]
 80021fe:	071a      	lsls	r2, r3, #28
 8002200:	d501      	bpl.n	8002206 <__swbuf_r+0x20>
 8002202:	6923      	ldr	r3, [r4, #16]
 8002204:	b943      	cbnz	r3, 8002218 <__swbuf_r+0x32>
 8002206:	4621      	mov	r1, r4
 8002208:	4628      	mov	r0, r5
 800220a:	f000 f82b 	bl	8002264 <__swsetup_r>
 800220e:	b118      	cbz	r0, 8002218 <__swbuf_r+0x32>
 8002210:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002214:	4638      	mov	r0, r7
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	6922      	ldr	r2, [r4, #16]
 800221c:	1a98      	subs	r0, r3, r2
 800221e:	6963      	ldr	r3, [r4, #20]
 8002220:	b2f6      	uxtb	r6, r6
 8002222:	4283      	cmp	r3, r0
 8002224:	4637      	mov	r7, r6
 8002226:	dc05      	bgt.n	8002234 <__swbuf_r+0x4e>
 8002228:	4621      	mov	r1, r4
 800222a:	4628      	mov	r0, r5
 800222c:	f000 fd38 	bl	8002ca0 <_fflush_r>
 8002230:	2800      	cmp	r0, #0
 8002232:	d1ed      	bne.n	8002210 <__swbuf_r+0x2a>
 8002234:	68a3      	ldr	r3, [r4, #8]
 8002236:	3b01      	subs	r3, #1
 8002238:	60a3      	str	r3, [r4, #8]
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	6022      	str	r2, [r4, #0]
 8002240:	701e      	strb	r6, [r3, #0]
 8002242:	6962      	ldr	r2, [r4, #20]
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	429a      	cmp	r2, r3
 8002248:	d004      	beq.n	8002254 <__swbuf_r+0x6e>
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	07db      	lsls	r3, r3, #31
 800224e:	d5e1      	bpl.n	8002214 <__swbuf_r+0x2e>
 8002250:	2e0a      	cmp	r6, #10
 8002252:	d1df      	bne.n	8002214 <__swbuf_r+0x2e>
 8002254:	4621      	mov	r1, r4
 8002256:	4628      	mov	r0, r5
 8002258:	f000 fd22 	bl	8002ca0 <_fflush_r>
 800225c:	2800      	cmp	r0, #0
 800225e:	d0d9      	beq.n	8002214 <__swbuf_r+0x2e>
 8002260:	e7d6      	b.n	8002210 <__swbuf_r+0x2a>
	...

08002264 <__swsetup_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <__swsetup_r+0xa8>)
 8002268:	4605      	mov	r5, r0
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	460c      	mov	r4, r1
 800226e:	b118      	cbz	r0, 8002278 <__swsetup_r+0x14>
 8002270:	6a03      	ldr	r3, [r0, #32]
 8002272:	b90b      	cbnz	r3, 8002278 <__swsetup_r+0x14>
 8002274:	f7ff fece 	bl	8002014 <__sinit>
 8002278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800227c:	0719      	lsls	r1, r3, #28
 800227e:	d422      	bmi.n	80022c6 <__swsetup_r+0x62>
 8002280:	06da      	lsls	r2, r3, #27
 8002282:	d407      	bmi.n	8002294 <__swsetup_r+0x30>
 8002284:	2209      	movs	r2, #9
 8002286:	602a      	str	r2, [r5, #0]
 8002288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800228c:	81a3      	strh	r3, [r4, #12]
 800228e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002292:	e033      	b.n	80022fc <__swsetup_r+0x98>
 8002294:	0758      	lsls	r0, r3, #29
 8002296:	d512      	bpl.n	80022be <__swsetup_r+0x5a>
 8002298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800229a:	b141      	cbz	r1, 80022ae <__swsetup_r+0x4a>
 800229c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022a0:	4299      	cmp	r1, r3
 80022a2:	d002      	beq.n	80022aa <__swsetup_r+0x46>
 80022a4:	4628      	mov	r0, r5
 80022a6:	f000 f8af 	bl	8002408 <_free_r>
 80022aa:	2300      	movs	r3, #0
 80022ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80022b4:	81a3      	strh	r3, [r4, #12]
 80022b6:	2300      	movs	r3, #0
 80022b8:	6063      	str	r3, [r4, #4]
 80022ba:	6923      	ldr	r3, [r4, #16]
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	81a3      	strh	r3, [r4, #12]
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	b94b      	cbnz	r3, 80022de <__swsetup_r+0x7a>
 80022ca:	89a3      	ldrh	r3, [r4, #12]
 80022cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d4:	d003      	beq.n	80022de <__swsetup_r+0x7a>
 80022d6:	4621      	mov	r1, r4
 80022d8:	4628      	mov	r0, r5
 80022da:	f000 fd2f 	bl	8002d3c <__smakebuf_r>
 80022de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022e2:	f013 0201 	ands.w	r2, r3, #1
 80022e6:	d00a      	beq.n	80022fe <__swsetup_r+0x9a>
 80022e8:	2200      	movs	r2, #0
 80022ea:	60a2      	str	r2, [r4, #8]
 80022ec:	6962      	ldr	r2, [r4, #20]
 80022ee:	4252      	negs	r2, r2
 80022f0:	61a2      	str	r2, [r4, #24]
 80022f2:	6922      	ldr	r2, [r4, #16]
 80022f4:	b942      	cbnz	r2, 8002308 <__swsetup_r+0xa4>
 80022f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80022fa:	d1c5      	bne.n	8002288 <__swsetup_r+0x24>
 80022fc:	bd38      	pop	{r3, r4, r5, pc}
 80022fe:	0799      	lsls	r1, r3, #30
 8002300:	bf58      	it	pl
 8002302:	6962      	ldrpl	r2, [r4, #20]
 8002304:	60a2      	str	r2, [r4, #8]
 8002306:	e7f4      	b.n	80022f2 <__swsetup_r+0x8e>
 8002308:	2000      	movs	r0, #0
 800230a:	e7f7      	b.n	80022fc <__swsetup_r+0x98>
 800230c:	20000018 	.word	0x20000018

08002310 <memset>:
 8002310:	4402      	add	r2, r0
 8002312:	4603      	mov	r3, r0
 8002314:	4293      	cmp	r3, r2
 8002316:	d100      	bne.n	800231a <memset+0xa>
 8002318:	4770      	bx	lr
 800231a:	f803 1b01 	strb.w	r1, [r3], #1
 800231e:	e7f9      	b.n	8002314 <memset+0x4>

08002320 <_close_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4d06      	ldr	r5, [pc, #24]	@ (800233c <_close_r+0x1c>)
 8002324:	2300      	movs	r3, #0
 8002326:	4604      	mov	r4, r0
 8002328:	4608      	mov	r0, r1
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	f7fe fb6a 	bl	8000a04 <_close>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d102      	bne.n	800233a <_close_r+0x1a>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	b103      	cbz	r3, 800233a <_close_r+0x1a>
 8002338:	6023      	str	r3, [r4, #0]
 800233a:	bd38      	pop	{r3, r4, r5, pc}
 800233c:	20000258 	.word	0x20000258

08002340 <_lseek_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4d07      	ldr	r5, [pc, #28]	@ (8002360 <_lseek_r+0x20>)
 8002344:	4604      	mov	r4, r0
 8002346:	4608      	mov	r0, r1
 8002348:	4611      	mov	r1, r2
 800234a:	2200      	movs	r2, #0
 800234c:	602a      	str	r2, [r5, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f7fe fb62 	bl	8000a18 <_lseek>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d102      	bne.n	800235e <_lseek_r+0x1e>
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	b103      	cbz	r3, 800235e <_lseek_r+0x1e>
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	20000258 	.word	0x20000258

08002364 <_read_r>:
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	4d07      	ldr	r5, [pc, #28]	@ (8002384 <_read_r+0x20>)
 8002368:	4604      	mov	r4, r0
 800236a:	4608      	mov	r0, r1
 800236c:	4611      	mov	r1, r2
 800236e:	2200      	movs	r2, #0
 8002370:	602a      	str	r2, [r5, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	f7fe fb36 	bl	80009e4 <_read>
 8002378:	1c43      	adds	r3, r0, #1
 800237a:	d102      	bne.n	8002382 <_read_r+0x1e>
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	b103      	cbz	r3, 8002382 <_read_r+0x1e>
 8002380:	6023      	str	r3, [r4, #0]
 8002382:	bd38      	pop	{r3, r4, r5, pc}
 8002384:	20000258 	.word	0x20000258

08002388 <_write_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	4d07      	ldr	r5, [pc, #28]	@ (80023a8 <_write_r+0x20>)
 800238c:	4604      	mov	r4, r0
 800238e:	4608      	mov	r0, r1
 8002390:	4611      	mov	r1, r2
 8002392:	2200      	movs	r2, #0
 8002394:	602a      	str	r2, [r5, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	f7fe f92c 	bl	80005f4 <_write>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d102      	bne.n	80023a6 <_write_r+0x1e>
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	b103      	cbz	r3, 80023a6 <_write_r+0x1e>
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	20000258 	.word	0x20000258

080023ac <__errno>:
 80023ac:	4b01      	ldr	r3, [pc, #4]	@ (80023b4 <__errno+0x8>)
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000018 	.word	0x20000018

080023b8 <__libc_init_array>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	4d0d      	ldr	r5, [pc, #52]	@ (80023f0 <__libc_init_array+0x38>)
 80023bc:	4c0d      	ldr	r4, [pc, #52]	@ (80023f4 <__libc_init_array+0x3c>)
 80023be:	1b64      	subs	r4, r4, r5
 80023c0:	10a4      	asrs	r4, r4, #2
 80023c2:	2600      	movs	r6, #0
 80023c4:	42a6      	cmp	r6, r4
 80023c6:	d109      	bne.n	80023dc <__libc_init_array+0x24>
 80023c8:	4d0b      	ldr	r5, [pc, #44]	@ (80023f8 <__libc_init_array+0x40>)
 80023ca:	4c0c      	ldr	r4, [pc, #48]	@ (80023fc <__libc_init_array+0x44>)
 80023cc:	f000 fd24 	bl	8002e18 <_init>
 80023d0:	1b64      	subs	r4, r4, r5
 80023d2:	10a4      	asrs	r4, r4, #2
 80023d4:	2600      	movs	r6, #0
 80023d6:	42a6      	cmp	r6, r4
 80023d8:	d105      	bne.n	80023e6 <__libc_init_array+0x2e>
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e0:	4798      	blx	r3
 80023e2:	3601      	adds	r6, #1
 80023e4:	e7ee      	b.n	80023c4 <__libc_init_array+0xc>
 80023e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ea:	4798      	blx	r3
 80023ec:	3601      	adds	r6, #1
 80023ee:	e7f2      	b.n	80023d6 <__libc_init_array+0x1e>
 80023f0:	08002ed4 	.word	0x08002ed4
 80023f4:	08002ed4 	.word	0x08002ed4
 80023f8:	08002ed4 	.word	0x08002ed4
 80023fc:	08002ed8 	.word	0x08002ed8

08002400 <__retarget_lock_init_recursive>:
 8002400:	4770      	bx	lr

08002402 <__retarget_lock_acquire_recursive>:
 8002402:	4770      	bx	lr

08002404 <__retarget_lock_release_recursive>:
 8002404:	4770      	bx	lr
	...

08002408 <_free_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4605      	mov	r5, r0
 800240c:	2900      	cmp	r1, #0
 800240e:	d041      	beq.n	8002494 <_free_r+0x8c>
 8002410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002414:	1f0c      	subs	r4, r1, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	bfb8      	it	lt
 800241a:	18e4      	addlt	r4, r4, r3
 800241c:	f000 f8e0 	bl	80025e0 <__malloc_lock>
 8002420:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <_free_r+0x90>)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	b933      	cbnz	r3, 8002434 <_free_r+0x2c>
 8002426:	6063      	str	r3, [r4, #4]
 8002428:	6014      	str	r4, [r2, #0]
 800242a:	4628      	mov	r0, r5
 800242c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002430:	f000 b8dc 	b.w	80025ec <__malloc_unlock>
 8002434:	42a3      	cmp	r3, r4
 8002436:	d908      	bls.n	800244a <_free_r+0x42>
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	1821      	adds	r1, r4, r0
 800243c:	428b      	cmp	r3, r1
 800243e:	bf01      	itttt	eq
 8002440:	6819      	ldreq	r1, [r3, #0]
 8002442:	685b      	ldreq	r3, [r3, #4]
 8002444:	1809      	addeq	r1, r1, r0
 8002446:	6021      	streq	r1, [r4, #0]
 8002448:	e7ed      	b.n	8002426 <_free_r+0x1e>
 800244a:	461a      	mov	r2, r3
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b10b      	cbz	r3, 8002454 <_free_r+0x4c>
 8002450:	42a3      	cmp	r3, r4
 8002452:	d9fa      	bls.n	800244a <_free_r+0x42>
 8002454:	6811      	ldr	r1, [r2, #0]
 8002456:	1850      	adds	r0, r2, r1
 8002458:	42a0      	cmp	r0, r4
 800245a:	d10b      	bne.n	8002474 <_free_r+0x6c>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	4401      	add	r1, r0
 8002460:	1850      	adds	r0, r2, r1
 8002462:	4283      	cmp	r3, r0
 8002464:	6011      	str	r1, [r2, #0]
 8002466:	d1e0      	bne.n	800242a <_free_r+0x22>
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	6053      	str	r3, [r2, #4]
 800246e:	4408      	add	r0, r1
 8002470:	6010      	str	r0, [r2, #0]
 8002472:	e7da      	b.n	800242a <_free_r+0x22>
 8002474:	d902      	bls.n	800247c <_free_r+0x74>
 8002476:	230c      	movs	r3, #12
 8002478:	602b      	str	r3, [r5, #0]
 800247a:	e7d6      	b.n	800242a <_free_r+0x22>
 800247c:	6820      	ldr	r0, [r4, #0]
 800247e:	1821      	adds	r1, r4, r0
 8002480:	428b      	cmp	r3, r1
 8002482:	bf04      	itt	eq
 8002484:	6819      	ldreq	r1, [r3, #0]
 8002486:	685b      	ldreq	r3, [r3, #4]
 8002488:	6063      	str	r3, [r4, #4]
 800248a:	bf04      	itt	eq
 800248c:	1809      	addeq	r1, r1, r0
 800248e:	6021      	streq	r1, [r4, #0]
 8002490:	6054      	str	r4, [r2, #4]
 8002492:	e7ca      	b.n	800242a <_free_r+0x22>
 8002494:	bd38      	pop	{r3, r4, r5, pc}
 8002496:	bf00      	nop
 8002498:	20000264 	.word	0x20000264

0800249c <sbrk_aligned>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	4e0f      	ldr	r6, [pc, #60]	@ (80024dc <sbrk_aligned+0x40>)
 80024a0:	460c      	mov	r4, r1
 80024a2:	6831      	ldr	r1, [r6, #0]
 80024a4:	4605      	mov	r5, r0
 80024a6:	b911      	cbnz	r1, 80024ae <sbrk_aligned+0x12>
 80024a8:	f000 fca6 	bl	8002df8 <_sbrk_r>
 80024ac:	6030      	str	r0, [r6, #0]
 80024ae:	4621      	mov	r1, r4
 80024b0:	4628      	mov	r0, r5
 80024b2:	f000 fca1 	bl	8002df8 <_sbrk_r>
 80024b6:	1c43      	adds	r3, r0, #1
 80024b8:	d103      	bne.n	80024c2 <sbrk_aligned+0x26>
 80024ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80024be:	4620      	mov	r0, r4
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	1cc4      	adds	r4, r0, #3
 80024c4:	f024 0403 	bic.w	r4, r4, #3
 80024c8:	42a0      	cmp	r0, r4
 80024ca:	d0f8      	beq.n	80024be <sbrk_aligned+0x22>
 80024cc:	1a21      	subs	r1, r4, r0
 80024ce:	4628      	mov	r0, r5
 80024d0:	f000 fc92 	bl	8002df8 <_sbrk_r>
 80024d4:	3001      	adds	r0, #1
 80024d6:	d1f2      	bne.n	80024be <sbrk_aligned+0x22>
 80024d8:	e7ef      	b.n	80024ba <sbrk_aligned+0x1e>
 80024da:	bf00      	nop
 80024dc:	20000260 	.word	0x20000260

080024e0 <_malloc_r>:
 80024e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e4:	1ccd      	adds	r5, r1, #3
 80024e6:	f025 0503 	bic.w	r5, r5, #3
 80024ea:	3508      	adds	r5, #8
 80024ec:	2d0c      	cmp	r5, #12
 80024ee:	bf38      	it	cc
 80024f0:	250c      	movcc	r5, #12
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	4606      	mov	r6, r0
 80024f6:	db01      	blt.n	80024fc <_malloc_r+0x1c>
 80024f8:	42a9      	cmp	r1, r5
 80024fa:	d904      	bls.n	8002506 <_malloc_r+0x26>
 80024fc:	230c      	movs	r3, #12
 80024fe:	6033      	str	r3, [r6, #0]
 8002500:	2000      	movs	r0, #0
 8002502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80025dc <_malloc_r+0xfc>
 800250a:	f000 f869 	bl	80025e0 <__malloc_lock>
 800250e:	f8d8 3000 	ldr.w	r3, [r8]
 8002512:	461c      	mov	r4, r3
 8002514:	bb44      	cbnz	r4, 8002568 <_malloc_r+0x88>
 8002516:	4629      	mov	r1, r5
 8002518:	4630      	mov	r0, r6
 800251a:	f7ff ffbf 	bl	800249c <sbrk_aligned>
 800251e:	1c43      	adds	r3, r0, #1
 8002520:	4604      	mov	r4, r0
 8002522:	d158      	bne.n	80025d6 <_malloc_r+0xf6>
 8002524:	f8d8 4000 	ldr.w	r4, [r8]
 8002528:	4627      	mov	r7, r4
 800252a:	2f00      	cmp	r7, #0
 800252c:	d143      	bne.n	80025b6 <_malloc_r+0xd6>
 800252e:	2c00      	cmp	r4, #0
 8002530:	d04b      	beq.n	80025ca <_malloc_r+0xea>
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	4639      	mov	r1, r7
 8002536:	4630      	mov	r0, r6
 8002538:	eb04 0903 	add.w	r9, r4, r3
 800253c:	f000 fc5c 	bl	8002df8 <_sbrk_r>
 8002540:	4581      	cmp	r9, r0
 8002542:	d142      	bne.n	80025ca <_malloc_r+0xea>
 8002544:	6821      	ldr	r1, [r4, #0]
 8002546:	1a6d      	subs	r5, r5, r1
 8002548:	4629      	mov	r1, r5
 800254a:	4630      	mov	r0, r6
 800254c:	f7ff ffa6 	bl	800249c <sbrk_aligned>
 8002550:	3001      	adds	r0, #1
 8002552:	d03a      	beq.n	80025ca <_malloc_r+0xea>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	442b      	add	r3, r5
 8002558:	6023      	str	r3, [r4, #0]
 800255a:	f8d8 3000 	ldr.w	r3, [r8]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	bb62      	cbnz	r2, 80025bc <_malloc_r+0xdc>
 8002562:	f8c8 7000 	str.w	r7, [r8]
 8002566:	e00f      	b.n	8002588 <_malloc_r+0xa8>
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	1b52      	subs	r2, r2, r5
 800256c:	d420      	bmi.n	80025b0 <_malloc_r+0xd0>
 800256e:	2a0b      	cmp	r2, #11
 8002570:	d917      	bls.n	80025a2 <_malloc_r+0xc2>
 8002572:	1961      	adds	r1, r4, r5
 8002574:	42a3      	cmp	r3, r4
 8002576:	6025      	str	r5, [r4, #0]
 8002578:	bf18      	it	ne
 800257a:	6059      	strne	r1, [r3, #4]
 800257c:	6863      	ldr	r3, [r4, #4]
 800257e:	bf08      	it	eq
 8002580:	f8c8 1000 	streq.w	r1, [r8]
 8002584:	5162      	str	r2, [r4, r5]
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	4630      	mov	r0, r6
 800258a:	f000 f82f 	bl	80025ec <__malloc_unlock>
 800258e:	f104 000b 	add.w	r0, r4, #11
 8002592:	1d23      	adds	r3, r4, #4
 8002594:	f020 0007 	bic.w	r0, r0, #7
 8002598:	1ac2      	subs	r2, r0, r3
 800259a:	bf1c      	itt	ne
 800259c:	1a1b      	subne	r3, r3, r0
 800259e:	50a3      	strne	r3, [r4, r2]
 80025a0:	e7af      	b.n	8002502 <_malloc_r+0x22>
 80025a2:	6862      	ldr	r2, [r4, #4]
 80025a4:	42a3      	cmp	r3, r4
 80025a6:	bf0c      	ite	eq
 80025a8:	f8c8 2000 	streq.w	r2, [r8]
 80025ac:	605a      	strne	r2, [r3, #4]
 80025ae:	e7eb      	b.n	8002588 <_malloc_r+0xa8>
 80025b0:	4623      	mov	r3, r4
 80025b2:	6864      	ldr	r4, [r4, #4]
 80025b4:	e7ae      	b.n	8002514 <_malloc_r+0x34>
 80025b6:	463c      	mov	r4, r7
 80025b8:	687f      	ldr	r7, [r7, #4]
 80025ba:	e7b6      	b.n	800252a <_malloc_r+0x4a>
 80025bc:	461a      	mov	r2, r3
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	42a3      	cmp	r3, r4
 80025c2:	d1fb      	bne.n	80025bc <_malloc_r+0xdc>
 80025c4:	2300      	movs	r3, #0
 80025c6:	6053      	str	r3, [r2, #4]
 80025c8:	e7de      	b.n	8002588 <_malloc_r+0xa8>
 80025ca:	230c      	movs	r3, #12
 80025cc:	6033      	str	r3, [r6, #0]
 80025ce:	4630      	mov	r0, r6
 80025d0:	f000 f80c 	bl	80025ec <__malloc_unlock>
 80025d4:	e794      	b.n	8002500 <_malloc_r+0x20>
 80025d6:	6005      	str	r5, [r0, #0]
 80025d8:	e7d6      	b.n	8002588 <_malloc_r+0xa8>
 80025da:	bf00      	nop
 80025dc:	20000264 	.word	0x20000264

080025e0 <__malloc_lock>:
 80025e0:	4801      	ldr	r0, [pc, #4]	@ (80025e8 <__malloc_lock+0x8>)
 80025e2:	f7ff bf0e 	b.w	8002402 <__retarget_lock_acquire_recursive>
 80025e6:	bf00      	nop
 80025e8:	2000025c 	.word	0x2000025c

080025ec <__malloc_unlock>:
 80025ec:	4801      	ldr	r0, [pc, #4]	@ (80025f4 <__malloc_unlock+0x8>)
 80025ee:	f7ff bf09 	b.w	8002404 <__retarget_lock_release_recursive>
 80025f2:	bf00      	nop
 80025f4:	2000025c 	.word	0x2000025c

080025f8 <__sfputc_r>:
 80025f8:	6893      	ldr	r3, [r2, #8]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	b410      	push	{r4}
 8002600:	6093      	str	r3, [r2, #8]
 8002602:	da08      	bge.n	8002616 <__sfputc_r+0x1e>
 8002604:	6994      	ldr	r4, [r2, #24]
 8002606:	42a3      	cmp	r3, r4
 8002608:	db01      	blt.n	800260e <__sfputc_r+0x16>
 800260a:	290a      	cmp	r1, #10
 800260c:	d103      	bne.n	8002616 <__sfputc_r+0x1e>
 800260e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002612:	f7ff bde8 	b.w	80021e6 <__swbuf_r>
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	1c58      	adds	r0, r3, #1
 800261a:	6010      	str	r0, [r2, #0]
 800261c:	7019      	strb	r1, [r3, #0]
 800261e:	4608      	mov	r0, r1
 8002620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002624:	4770      	bx	lr

08002626 <__sfputs_r>:
 8002626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002628:	4606      	mov	r6, r0
 800262a:	460f      	mov	r7, r1
 800262c:	4614      	mov	r4, r2
 800262e:	18d5      	adds	r5, r2, r3
 8002630:	42ac      	cmp	r4, r5
 8002632:	d101      	bne.n	8002638 <__sfputs_r+0x12>
 8002634:	2000      	movs	r0, #0
 8002636:	e007      	b.n	8002648 <__sfputs_r+0x22>
 8002638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800263c:	463a      	mov	r2, r7
 800263e:	4630      	mov	r0, r6
 8002640:	f7ff ffda 	bl	80025f8 <__sfputc_r>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d1f3      	bne.n	8002630 <__sfputs_r+0xa>
 8002648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800264c <_vfiprintf_r>:
 800264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002650:	460d      	mov	r5, r1
 8002652:	b09d      	sub	sp, #116	@ 0x74
 8002654:	4614      	mov	r4, r2
 8002656:	4698      	mov	r8, r3
 8002658:	4606      	mov	r6, r0
 800265a:	b118      	cbz	r0, 8002664 <_vfiprintf_r+0x18>
 800265c:	6a03      	ldr	r3, [r0, #32]
 800265e:	b90b      	cbnz	r3, 8002664 <_vfiprintf_r+0x18>
 8002660:	f7ff fcd8 	bl	8002014 <__sinit>
 8002664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002666:	07d9      	lsls	r1, r3, #31
 8002668:	d405      	bmi.n	8002676 <_vfiprintf_r+0x2a>
 800266a:	89ab      	ldrh	r3, [r5, #12]
 800266c:	059a      	lsls	r2, r3, #22
 800266e:	d402      	bmi.n	8002676 <_vfiprintf_r+0x2a>
 8002670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002672:	f7ff fec6 	bl	8002402 <__retarget_lock_acquire_recursive>
 8002676:	89ab      	ldrh	r3, [r5, #12]
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	d501      	bpl.n	8002680 <_vfiprintf_r+0x34>
 800267c:	692b      	ldr	r3, [r5, #16]
 800267e:	b99b      	cbnz	r3, 80026a8 <_vfiprintf_r+0x5c>
 8002680:	4629      	mov	r1, r5
 8002682:	4630      	mov	r0, r6
 8002684:	f7ff fdee 	bl	8002264 <__swsetup_r>
 8002688:	b170      	cbz	r0, 80026a8 <_vfiprintf_r+0x5c>
 800268a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800268c:	07dc      	lsls	r4, r3, #31
 800268e:	d504      	bpl.n	800269a <_vfiprintf_r+0x4e>
 8002690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002694:	b01d      	add	sp, #116	@ 0x74
 8002696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800269a:	89ab      	ldrh	r3, [r5, #12]
 800269c:	0598      	lsls	r0, r3, #22
 800269e:	d4f7      	bmi.n	8002690 <_vfiprintf_r+0x44>
 80026a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026a2:	f7ff feaf 	bl	8002404 <__retarget_lock_release_recursive>
 80026a6:	e7f3      	b.n	8002690 <_vfiprintf_r+0x44>
 80026a8:	2300      	movs	r3, #0
 80026aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80026ac:	2320      	movs	r3, #32
 80026ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80026b6:	2330      	movs	r3, #48	@ 0x30
 80026b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002868 <_vfiprintf_r+0x21c>
 80026bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026c0:	f04f 0901 	mov.w	r9, #1
 80026c4:	4623      	mov	r3, r4
 80026c6:	469a      	mov	sl, r3
 80026c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026cc:	b10a      	cbz	r2, 80026d2 <_vfiprintf_r+0x86>
 80026ce:	2a25      	cmp	r2, #37	@ 0x25
 80026d0:	d1f9      	bne.n	80026c6 <_vfiprintf_r+0x7a>
 80026d2:	ebba 0b04 	subs.w	fp, sl, r4
 80026d6:	d00b      	beq.n	80026f0 <_vfiprintf_r+0xa4>
 80026d8:	465b      	mov	r3, fp
 80026da:	4622      	mov	r2, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	4630      	mov	r0, r6
 80026e0:	f7ff ffa1 	bl	8002626 <__sfputs_r>
 80026e4:	3001      	adds	r0, #1
 80026e6:	f000 80a7 	beq.w	8002838 <_vfiprintf_r+0x1ec>
 80026ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026ec:	445a      	add	r2, fp
 80026ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80026f0:	f89a 3000 	ldrb.w	r3, [sl]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 809f 	beq.w	8002838 <_vfiprintf_r+0x1ec>
 80026fa:	2300      	movs	r3, #0
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002704:	f10a 0a01 	add.w	sl, sl, #1
 8002708:	9304      	str	r3, [sp, #16]
 800270a:	9307      	str	r3, [sp, #28]
 800270c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002710:	931a      	str	r3, [sp, #104]	@ 0x68
 8002712:	4654      	mov	r4, sl
 8002714:	2205      	movs	r2, #5
 8002716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800271a:	4853      	ldr	r0, [pc, #332]	@ (8002868 <_vfiprintf_r+0x21c>)
 800271c:	f7fd fd58 	bl	80001d0 <memchr>
 8002720:	9a04      	ldr	r2, [sp, #16]
 8002722:	b9d8      	cbnz	r0, 800275c <_vfiprintf_r+0x110>
 8002724:	06d1      	lsls	r1, r2, #27
 8002726:	bf44      	itt	mi
 8002728:	2320      	movmi	r3, #32
 800272a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800272e:	0713      	lsls	r3, r2, #28
 8002730:	bf44      	itt	mi
 8002732:	232b      	movmi	r3, #43	@ 0x2b
 8002734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002738:	f89a 3000 	ldrb.w	r3, [sl]
 800273c:	2b2a      	cmp	r3, #42	@ 0x2a
 800273e:	d015      	beq.n	800276c <_vfiprintf_r+0x120>
 8002740:	9a07      	ldr	r2, [sp, #28]
 8002742:	4654      	mov	r4, sl
 8002744:	2000      	movs	r0, #0
 8002746:	f04f 0c0a 	mov.w	ip, #10
 800274a:	4621      	mov	r1, r4
 800274c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002750:	3b30      	subs	r3, #48	@ 0x30
 8002752:	2b09      	cmp	r3, #9
 8002754:	d94b      	bls.n	80027ee <_vfiprintf_r+0x1a2>
 8002756:	b1b0      	cbz	r0, 8002786 <_vfiprintf_r+0x13a>
 8002758:	9207      	str	r2, [sp, #28]
 800275a:	e014      	b.n	8002786 <_vfiprintf_r+0x13a>
 800275c:	eba0 0308 	sub.w	r3, r0, r8
 8002760:	fa09 f303 	lsl.w	r3, r9, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	9304      	str	r3, [sp, #16]
 8002768:	46a2      	mov	sl, r4
 800276a:	e7d2      	b.n	8002712 <_vfiprintf_r+0xc6>
 800276c:	9b03      	ldr	r3, [sp, #12]
 800276e:	1d19      	adds	r1, r3, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	9103      	str	r1, [sp, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	bfbb      	ittet	lt
 8002778:	425b      	neglt	r3, r3
 800277a:	f042 0202 	orrlt.w	r2, r2, #2
 800277e:	9307      	strge	r3, [sp, #28]
 8002780:	9307      	strlt	r3, [sp, #28]
 8002782:	bfb8      	it	lt
 8002784:	9204      	strlt	r2, [sp, #16]
 8002786:	7823      	ldrb	r3, [r4, #0]
 8002788:	2b2e      	cmp	r3, #46	@ 0x2e
 800278a:	d10a      	bne.n	80027a2 <_vfiprintf_r+0x156>
 800278c:	7863      	ldrb	r3, [r4, #1]
 800278e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002790:	d132      	bne.n	80027f8 <_vfiprintf_r+0x1ac>
 8002792:	9b03      	ldr	r3, [sp, #12]
 8002794:	1d1a      	adds	r2, r3, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	9203      	str	r2, [sp, #12]
 800279a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800279e:	3402      	adds	r4, #2
 80027a0:	9305      	str	r3, [sp, #20]
 80027a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002878 <_vfiprintf_r+0x22c>
 80027a6:	7821      	ldrb	r1, [r4, #0]
 80027a8:	2203      	movs	r2, #3
 80027aa:	4650      	mov	r0, sl
 80027ac:	f7fd fd10 	bl	80001d0 <memchr>
 80027b0:	b138      	cbz	r0, 80027c2 <_vfiprintf_r+0x176>
 80027b2:	9b04      	ldr	r3, [sp, #16]
 80027b4:	eba0 000a 	sub.w	r0, r0, sl
 80027b8:	2240      	movs	r2, #64	@ 0x40
 80027ba:	4082      	lsls	r2, r0
 80027bc:	4313      	orrs	r3, r2
 80027be:	3401      	adds	r4, #1
 80027c0:	9304      	str	r3, [sp, #16]
 80027c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c6:	4829      	ldr	r0, [pc, #164]	@ (800286c <_vfiprintf_r+0x220>)
 80027c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027cc:	2206      	movs	r2, #6
 80027ce:	f7fd fcff 	bl	80001d0 <memchr>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d03f      	beq.n	8002856 <_vfiprintf_r+0x20a>
 80027d6:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <_vfiprintf_r+0x224>)
 80027d8:	bb1b      	cbnz	r3, 8002822 <_vfiprintf_r+0x1d6>
 80027da:	9b03      	ldr	r3, [sp, #12]
 80027dc:	3307      	adds	r3, #7
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	3308      	adds	r3, #8
 80027e4:	9303      	str	r3, [sp, #12]
 80027e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027e8:	443b      	add	r3, r7
 80027ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80027ec:	e76a      	b.n	80026c4 <_vfiprintf_r+0x78>
 80027ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80027f2:	460c      	mov	r4, r1
 80027f4:	2001      	movs	r0, #1
 80027f6:	e7a8      	b.n	800274a <_vfiprintf_r+0xfe>
 80027f8:	2300      	movs	r3, #0
 80027fa:	3401      	adds	r4, #1
 80027fc:	9305      	str	r3, [sp, #20]
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0c0a 	mov.w	ip, #10
 8002804:	4620      	mov	r0, r4
 8002806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800280a:	3a30      	subs	r2, #48	@ 0x30
 800280c:	2a09      	cmp	r2, #9
 800280e:	d903      	bls.n	8002818 <_vfiprintf_r+0x1cc>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0c6      	beq.n	80027a2 <_vfiprintf_r+0x156>
 8002814:	9105      	str	r1, [sp, #20]
 8002816:	e7c4      	b.n	80027a2 <_vfiprintf_r+0x156>
 8002818:	fb0c 2101 	mla	r1, ip, r1, r2
 800281c:	4604      	mov	r4, r0
 800281e:	2301      	movs	r3, #1
 8002820:	e7f0      	b.n	8002804 <_vfiprintf_r+0x1b8>
 8002822:	ab03      	add	r3, sp, #12
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	462a      	mov	r2, r5
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <_vfiprintf_r+0x228>)
 800282a:	a904      	add	r1, sp, #16
 800282c:	4630      	mov	r0, r6
 800282e:	f3af 8000 	nop.w
 8002832:	4607      	mov	r7, r0
 8002834:	1c78      	adds	r0, r7, #1
 8002836:	d1d6      	bne.n	80027e6 <_vfiprintf_r+0x19a>
 8002838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800283a:	07d9      	lsls	r1, r3, #31
 800283c:	d405      	bmi.n	800284a <_vfiprintf_r+0x1fe>
 800283e:	89ab      	ldrh	r3, [r5, #12]
 8002840:	059a      	lsls	r2, r3, #22
 8002842:	d402      	bmi.n	800284a <_vfiprintf_r+0x1fe>
 8002844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002846:	f7ff fddd 	bl	8002404 <__retarget_lock_release_recursive>
 800284a:	89ab      	ldrh	r3, [r5, #12]
 800284c:	065b      	lsls	r3, r3, #25
 800284e:	f53f af1f 	bmi.w	8002690 <_vfiprintf_r+0x44>
 8002852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002854:	e71e      	b.n	8002694 <_vfiprintf_r+0x48>
 8002856:	ab03      	add	r3, sp, #12
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	462a      	mov	r2, r5
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <_vfiprintf_r+0x228>)
 800285e:	a904      	add	r1, sp, #16
 8002860:	4630      	mov	r0, r6
 8002862:	f000 f879 	bl	8002958 <_printf_i>
 8002866:	e7e4      	b.n	8002832 <_vfiprintf_r+0x1e6>
 8002868:	08002e98 	.word	0x08002e98
 800286c:	08002ea2 	.word	0x08002ea2
 8002870:	00000000 	.word	0x00000000
 8002874:	08002627 	.word	0x08002627
 8002878:	08002e9e 	.word	0x08002e9e

0800287c <_printf_common>:
 800287c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002880:	4616      	mov	r6, r2
 8002882:	4698      	mov	r8, r3
 8002884:	688a      	ldr	r2, [r1, #8]
 8002886:	690b      	ldr	r3, [r1, #16]
 8002888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800288c:	4293      	cmp	r3, r2
 800288e:	bfb8      	it	lt
 8002890:	4613      	movlt	r3, r2
 8002892:	6033      	str	r3, [r6, #0]
 8002894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002898:	4607      	mov	r7, r0
 800289a:	460c      	mov	r4, r1
 800289c:	b10a      	cbz	r2, 80028a2 <_printf_common+0x26>
 800289e:	3301      	adds	r3, #1
 80028a0:	6033      	str	r3, [r6, #0]
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	0699      	lsls	r1, r3, #26
 80028a6:	bf42      	ittt	mi
 80028a8:	6833      	ldrmi	r3, [r6, #0]
 80028aa:	3302      	addmi	r3, #2
 80028ac:	6033      	strmi	r3, [r6, #0]
 80028ae:	6825      	ldr	r5, [r4, #0]
 80028b0:	f015 0506 	ands.w	r5, r5, #6
 80028b4:	d106      	bne.n	80028c4 <_printf_common+0x48>
 80028b6:	f104 0a19 	add.w	sl, r4, #25
 80028ba:	68e3      	ldr	r3, [r4, #12]
 80028bc:	6832      	ldr	r2, [r6, #0]
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	42ab      	cmp	r3, r5
 80028c2:	dc26      	bgt.n	8002912 <_printf_common+0x96>
 80028c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	3b00      	subs	r3, #0
 80028cc:	bf18      	it	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	0692      	lsls	r2, r2, #26
 80028d2:	d42b      	bmi.n	800292c <_printf_common+0xb0>
 80028d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80028d8:	4641      	mov	r1, r8
 80028da:	4638      	mov	r0, r7
 80028dc:	47c8      	blx	r9
 80028de:	3001      	adds	r0, #1
 80028e0:	d01e      	beq.n	8002920 <_printf_common+0xa4>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	6922      	ldr	r2, [r4, #16]
 80028e6:	f003 0306 	and.w	r3, r3, #6
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf02      	ittt	eq
 80028ee:	68e5      	ldreq	r5, [r4, #12]
 80028f0:	6833      	ldreq	r3, [r6, #0]
 80028f2:	1aed      	subeq	r5, r5, r3
 80028f4:	68a3      	ldr	r3, [r4, #8]
 80028f6:	bf0c      	ite	eq
 80028f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028fc:	2500      	movne	r5, #0
 80028fe:	4293      	cmp	r3, r2
 8002900:	bfc4      	itt	gt
 8002902:	1a9b      	subgt	r3, r3, r2
 8002904:	18ed      	addgt	r5, r5, r3
 8002906:	2600      	movs	r6, #0
 8002908:	341a      	adds	r4, #26
 800290a:	42b5      	cmp	r5, r6
 800290c:	d11a      	bne.n	8002944 <_printf_common+0xc8>
 800290e:	2000      	movs	r0, #0
 8002910:	e008      	b.n	8002924 <_printf_common+0xa8>
 8002912:	2301      	movs	r3, #1
 8002914:	4652      	mov	r2, sl
 8002916:	4641      	mov	r1, r8
 8002918:	4638      	mov	r0, r7
 800291a:	47c8      	blx	r9
 800291c:	3001      	adds	r0, #1
 800291e:	d103      	bne.n	8002928 <_printf_common+0xac>
 8002920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002928:	3501      	adds	r5, #1
 800292a:	e7c6      	b.n	80028ba <_printf_common+0x3e>
 800292c:	18e1      	adds	r1, r4, r3
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	2030      	movs	r0, #48	@ 0x30
 8002932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002936:	4422      	add	r2, r4
 8002938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800293c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002940:	3302      	adds	r3, #2
 8002942:	e7c7      	b.n	80028d4 <_printf_common+0x58>
 8002944:	2301      	movs	r3, #1
 8002946:	4622      	mov	r2, r4
 8002948:	4641      	mov	r1, r8
 800294a:	4638      	mov	r0, r7
 800294c:	47c8      	blx	r9
 800294e:	3001      	adds	r0, #1
 8002950:	d0e6      	beq.n	8002920 <_printf_common+0xa4>
 8002952:	3601      	adds	r6, #1
 8002954:	e7d9      	b.n	800290a <_printf_common+0x8e>
	...

08002958 <_printf_i>:
 8002958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	7e0f      	ldrb	r7, [r1, #24]
 800295e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002960:	2f78      	cmp	r7, #120	@ 0x78
 8002962:	4691      	mov	r9, r2
 8002964:	4680      	mov	r8, r0
 8002966:	460c      	mov	r4, r1
 8002968:	469a      	mov	sl, r3
 800296a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800296e:	d807      	bhi.n	8002980 <_printf_i+0x28>
 8002970:	2f62      	cmp	r7, #98	@ 0x62
 8002972:	d80a      	bhi.n	800298a <_printf_i+0x32>
 8002974:	2f00      	cmp	r7, #0
 8002976:	f000 80d2 	beq.w	8002b1e <_printf_i+0x1c6>
 800297a:	2f58      	cmp	r7, #88	@ 0x58
 800297c:	f000 80b9 	beq.w	8002af2 <_printf_i+0x19a>
 8002980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002988:	e03a      	b.n	8002a00 <_printf_i+0xa8>
 800298a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800298e:	2b15      	cmp	r3, #21
 8002990:	d8f6      	bhi.n	8002980 <_printf_i+0x28>
 8002992:	a101      	add	r1, pc, #4	@ (adr r1, 8002998 <_printf_i+0x40>)
 8002994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002998:	080029f1 	.word	0x080029f1
 800299c:	08002a05 	.word	0x08002a05
 80029a0:	08002981 	.word	0x08002981
 80029a4:	08002981 	.word	0x08002981
 80029a8:	08002981 	.word	0x08002981
 80029ac:	08002981 	.word	0x08002981
 80029b0:	08002a05 	.word	0x08002a05
 80029b4:	08002981 	.word	0x08002981
 80029b8:	08002981 	.word	0x08002981
 80029bc:	08002981 	.word	0x08002981
 80029c0:	08002981 	.word	0x08002981
 80029c4:	08002b05 	.word	0x08002b05
 80029c8:	08002a2f 	.word	0x08002a2f
 80029cc:	08002abf 	.word	0x08002abf
 80029d0:	08002981 	.word	0x08002981
 80029d4:	08002981 	.word	0x08002981
 80029d8:	08002b27 	.word	0x08002b27
 80029dc:	08002981 	.word	0x08002981
 80029e0:	08002a2f 	.word	0x08002a2f
 80029e4:	08002981 	.word	0x08002981
 80029e8:	08002981 	.word	0x08002981
 80029ec:	08002ac7 	.word	0x08002ac7
 80029f0:	6833      	ldr	r3, [r6, #0]
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6032      	str	r2, [r6, #0]
 80029f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a00:	2301      	movs	r3, #1
 8002a02:	e09d      	b.n	8002b40 <_printf_i+0x1e8>
 8002a04:	6833      	ldr	r3, [r6, #0]
 8002a06:	6820      	ldr	r0, [r4, #0]
 8002a08:	1d19      	adds	r1, r3, #4
 8002a0a:	6031      	str	r1, [r6, #0]
 8002a0c:	0606      	lsls	r6, r0, #24
 8002a0e:	d501      	bpl.n	8002a14 <_printf_i+0xbc>
 8002a10:	681d      	ldr	r5, [r3, #0]
 8002a12:	e003      	b.n	8002a1c <_printf_i+0xc4>
 8002a14:	0645      	lsls	r5, r0, #25
 8002a16:	d5fb      	bpl.n	8002a10 <_printf_i+0xb8>
 8002a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a1c:	2d00      	cmp	r5, #0
 8002a1e:	da03      	bge.n	8002a28 <_printf_i+0xd0>
 8002a20:	232d      	movs	r3, #45	@ 0x2d
 8002a22:	426d      	negs	r5, r5
 8002a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a28:	4859      	ldr	r0, [pc, #356]	@ (8002b90 <_printf_i+0x238>)
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	e011      	b.n	8002a52 <_printf_i+0xfa>
 8002a2e:	6821      	ldr	r1, [r4, #0]
 8002a30:	6833      	ldr	r3, [r6, #0]
 8002a32:	0608      	lsls	r0, r1, #24
 8002a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a38:	d402      	bmi.n	8002a40 <_printf_i+0xe8>
 8002a3a:	0649      	lsls	r1, r1, #25
 8002a3c:	bf48      	it	mi
 8002a3e:	b2ad      	uxthmi	r5, r5
 8002a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a42:	4853      	ldr	r0, [pc, #332]	@ (8002b90 <_printf_i+0x238>)
 8002a44:	6033      	str	r3, [r6, #0]
 8002a46:	bf14      	ite	ne
 8002a48:	230a      	movne	r3, #10
 8002a4a:	2308      	moveq	r3, #8
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a52:	6866      	ldr	r6, [r4, #4]
 8002a54:	60a6      	str	r6, [r4, #8]
 8002a56:	2e00      	cmp	r6, #0
 8002a58:	bfa2      	ittt	ge
 8002a5a:	6821      	ldrge	r1, [r4, #0]
 8002a5c:	f021 0104 	bicge.w	r1, r1, #4
 8002a60:	6021      	strge	r1, [r4, #0]
 8002a62:	b90d      	cbnz	r5, 8002a68 <_printf_i+0x110>
 8002a64:	2e00      	cmp	r6, #0
 8002a66:	d04b      	beq.n	8002b00 <_printf_i+0x1a8>
 8002a68:	4616      	mov	r6, r2
 8002a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8002a72:	5dc7      	ldrb	r7, [r0, r7]
 8002a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a78:	462f      	mov	r7, r5
 8002a7a:	42bb      	cmp	r3, r7
 8002a7c:	460d      	mov	r5, r1
 8002a7e:	d9f4      	bls.n	8002a6a <_printf_i+0x112>
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d10b      	bne.n	8002a9c <_printf_i+0x144>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	07df      	lsls	r7, r3, #31
 8002a88:	d508      	bpl.n	8002a9c <_printf_i+0x144>
 8002a8a:	6923      	ldr	r3, [r4, #16]
 8002a8c:	6861      	ldr	r1, [r4, #4]
 8002a8e:	4299      	cmp	r1, r3
 8002a90:	bfde      	ittt	le
 8002a92:	2330      	movle	r3, #48	@ 0x30
 8002a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a98:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002a9c:	1b92      	subs	r2, r2, r6
 8002a9e:	6122      	str	r2, [r4, #16]
 8002aa0:	f8cd a000 	str.w	sl, [sp]
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	aa03      	add	r2, sp, #12
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	4640      	mov	r0, r8
 8002aac:	f7ff fee6 	bl	800287c <_printf_common>
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d14a      	bne.n	8002b4a <_printf_i+0x1f2>
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ab8:	b004      	add	sp, #16
 8002aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	f043 0320 	orr.w	r3, r3, #32
 8002ac4:	6023      	str	r3, [r4, #0]
 8002ac6:	4833      	ldr	r0, [pc, #204]	@ (8002b94 <_printf_i+0x23c>)
 8002ac8:	2778      	movs	r7, #120	@ 0x78
 8002aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	6831      	ldr	r1, [r6, #0]
 8002ad2:	061f      	lsls	r7, r3, #24
 8002ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ad8:	d402      	bmi.n	8002ae0 <_printf_i+0x188>
 8002ada:	065f      	lsls	r7, r3, #25
 8002adc:	bf48      	it	mi
 8002ade:	b2ad      	uxthmi	r5, r5
 8002ae0:	6031      	str	r1, [r6, #0]
 8002ae2:	07d9      	lsls	r1, r3, #31
 8002ae4:	bf44      	itt	mi
 8002ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8002aea:	6023      	strmi	r3, [r4, #0]
 8002aec:	b11d      	cbz	r5, 8002af6 <_printf_i+0x19e>
 8002aee:	2310      	movs	r3, #16
 8002af0:	e7ac      	b.n	8002a4c <_printf_i+0xf4>
 8002af2:	4827      	ldr	r0, [pc, #156]	@ (8002b90 <_printf_i+0x238>)
 8002af4:	e7e9      	b.n	8002aca <_printf_i+0x172>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	f023 0320 	bic.w	r3, r3, #32
 8002afc:	6023      	str	r3, [r4, #0]
 8002afe:	e7f6      	b.n	8002aee <_printf_i+0x196>
 8002b00:	4616      	mov	r6, r2
 8002b02:	e7bd      	b.n	8002a80 <_printf_i+0x128>
 8002b04:	6833      	ldr	r3, [r6, #0]
 8002b06:	6825      	ldr	r5, [r4, #0]
 8002b08:	6961      	ldr	r1, [r4, #20]
 8002b0a:	1d18      	adds	r0, r3, #4
 8002b0c:	6030      	str	r0, [r6, #0]
 8002b0e:	062e      	lsls	r6, r5, #24
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	d501      	bpl.n	8002b18 <_printf_i+0x1c0>
 8002b14:	6019      	str	r1, [r3, #0]
 8002b16:	e002      	b.n	8002b1e <_printf_i+0x1c6>
 8002b18:	0668      	lsls	r0, r5, #25
 8002b1a:	d5fb      	bpl.n	8002b14 <_printf_i+0x1bc>
 8002b1c:	8019      	strh	r1, [r3, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6123      	str	r3, [r4, #16]
 8002b22:	4616      	mov	r6, r2
 8002b24:	e7bc      	b.n	8002aa0 <_printf_i+0x148>
 8002b26:	6833      	ldr	r3, [r6, #0]
 8002b28:	1d1a      	adds	r2, r3, #4
 8002b2a:	6032      	str	r2, [r6, #0]
 8002b2c:	681e      	ldr	r6, [r3, #0]
 8002b2e:	6862      	ldr	r2, [r4, #4]
 8002b30:	2100      	movs	r1, #0
 8002b32:	4630      	mov	r0, r6
 8002b34:	f7fd fb4c 	bl	80001d0 <memchr>
 8002b38:	b108      	cbz	r0, 8002b3e <_printf_i+0x1e6>
 8002b3a:	1b80      	subs	r0, r0, r6
 8002b3c:	6060      	str	r0, [r4, #4]
 8002b3e:	6863      	ldr	r3, [r4, #4]
 8002b40:	6123      	str	r3, [r4, #16]
 8002b42:	2300      	movs	r3, #0
 8002b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b48:	e7aa      	b.n	8002aa0 <_printf_i+0x148>
 8002b4a:	6923      	ldr	r3, [r4, #16]
 8002b4c:	4632      	mov	r2, r6
 8002b4e:	4649      	mov	r1, r9
 8002b50:	4640      	mov	r0, r8
 8002b52:	47d0      	blx	sl
 8002b54:	3001      	adds	r0, #1
 8002b56:	d0ad      	beq.n	8002ab4 <_printf_i+0x15c>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	079b      	lsls	r3, r3, #30
 8002b5c:	d413      	bmi.n	8002b86 <_printf_i+0x22e>
 8002b5e:	68e0      	ldr	r0, [r4, #12]
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	4298      	cmp	r0, r3
 8002b64:	bfb8      	it	lt
 8002b66:	4618      	movlt	r0, r3
 8002b68:	e7a6      	b.n	8002ab8 <_printf_i+0x160>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	4632      	mov	r2, r6
 8002b6e:	4649      	mov	r1, r9
 8002b70:	4640      	mov	r0, r8
 8002b72:	47d0      	blx	sl
 8002b74:	3001      	adds	r0, #1
 8002b76:	d09d      	beq.n	8002ab4 <_printf_i+0x15c>
 8002b78:	3501      	adds	r5, #1
 8002b7a:	68e3      	ldr	r3, [r4, #12]
 8002b7c:	9903      	ldr	r1, [sp, #12]
 8002b7e:	1a5b      	subs	r3, r3, r1
 8002b80:	42ab      	cmp	r3, r5
 8002b82:	dcf2      	bgt.n	8002b6a <_printf_i+0x212>
 8002b84:	e7eb      	b.n	8002b5e <_printf_i+0x206>
 8002b86:	2500      	movs	r5, #0
 8002b88:	f104 0619 	add.w	r6, r4, #25
 8002b8c:	e7f5      	b.n	8002b7a <_printf_i+0x222>
 8002b8e:	bf00      	nop
 8002b90:	08002ea9 	.word	0x08002ea9
 8002b94:	08002eba 	.word	0x08002eba

08002b98 <__sflush_r>:
 8002b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba0:	0716      	lsls	r6, r2, #28
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	d454      	bmi.n	8002c52 <__sflush_r+0xba>
 8002ba8:	684b      	ldr	r3, [r1, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	dc02      	bgt.n	8002bb4 <__sflush_r+0x1c>
 8002bae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dd48      	ble.n	8002c46 <__sflush_r+0xae>
 8002bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bb6:	2e00      	cmp	r6, #0
 8002bb8:	d045      	beq.n	8002c46 <__sflush_r+0xae>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002bc0:	682f      	ldr	r7, [r5, #0]
 8002bc2:	6a21      	ldr	r1, [r4, #32]
 8002bc4:	602b      	str	r3, [r5, #0]
 8002bc6:	d030      	beq.n	8002c2a <__sflush_r+0x92>
 8002bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	0759      	lsls	r1, r3, #29
 8002bce:	d505      	bpl.n	8002bdc <__sflush_r+0x44>
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bd6:	b10b      	cbz	r3, 8002bdc <__sflush_r+0x44>
 8002bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bda:	1ad2      	subs	r2, r2, r3
 8002bdc:	2300      	movs	r3, #0
 8002bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002be0:	6a21      	ldr	r1, [r4, #32]
 8002be2:	4628      	mov	r0, r5
 8002be4:	47b0      	blx	r6
 8002be6:	1c43      	adds	r3, r0, #1
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	d106      	bne.n	8002bfa <__sflush_r+0x62>
 8002bec:	6829      	ldr	r1, [r5, #0]
 8002bee:	291d      	cmp	r1, #29
 8002bf0:	d82b      	bhi.n	8002c4a <__sflush_r+0xb2>
 8002bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c9c <__sflush_r+0x104>)
 8002bf4:	410a      	asrs	r2, r1
 8002bf6:	07d6      	lsls	r6, r2, #31
 8002bf8:	d427      	bmi.n	8002c4a <__sflush_r+0xb2>
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6062      	str	r2, [r4, #4]
 8002bfe:	04d9      	lsls	r1, r3, #19
 8002c00:	6922      	ldr	r2, [r4, #16]
 8002c02:	6022      	str	r2, [r4, #0]
 8002c04:	d504      	bpl.n	8002c10 <__sflush_r+0x78>
 8002c06:	1c42      	adds	r2, r0, #1
 8002c08:	d101      	bne.n	8002c0e <__sflush_r+0x76>
 8002c0a:	682b      	ldr	r3, [r5, #0]
 8002c0c:	b903      	cbnz	r3, 8002c10 <__sflush_r+0x78>
 8002c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c12:	602f      	str	r7, [r5, #0]
 8002c14:	b1b9      	cbz	r1, 8002c46 <__sflush_r+0xae>
 8002c16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c1a:	4299      	cmp	r1, r3
 8002c1c:	d002      	beq.n	8002c24 <__sflush_r+0x8c>
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f7ff fbf2 	bl	8002408 <_free_r>
 8002c24:	2300      	movs	r3, #0
 8002c26:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c28:	e00d      	b.n	8002c46 <__sflush_r+0xae>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	47b0      	blx	r6
 8002c30:	4602      	mov	r2, r0
 8002c32:	1c50      	adds	r0, r2, #1
 8002c34:	d1c9      	bne.n	8002bca <__sflush_r+0x32>
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0c6      	beq.n	8002bca <__sflush_r+0x32>
 8002c3c:	2b1d      	cmp	r3, #29
 8002c3e:	d001      	beq.n	8002c44 <__sflush_r+0xac>
 8002c40:	2b16      	cmp	r3, #22
 8002c42:	d11e      	bne.n	8002c82 <__sflush_r+0xea>
 8002c44:	602f      	str	r7, [r5, #0]
 8002c46:	2000      	movs	r0, #0
 8002c48:	e022      	b.n	8002c90 <__sflush_r+0xf8>
 8002c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	e01b      	b.n	8002c8a <__sflush_r+0xf2>
 8002c52:	690f      	ldr	r7, [r1, #16]
 8002c54:	2f00      	cmp	r7, #0
 8002c56:	d0f6      	beq.n	8002c46 <__sflush_r+0xae>
 8002c58:	0793      	lsls	r3, r2, #30
 8002c5a:	680e      	ldr	r6, [r1, #0]
 8002c5c:	bf08      	it	eq
 8002c5e:	694b      	ldreq	r3, [r1, #20]
 8002c60:	600f      	str	r7, [r1, #0]
 8002c62:	bf18      	it	ne
 8002c64:	2300      	movne	r3, #0
 8002c66:	eba6 0807 	sub.w	r8, r6, r7
 8002c6a:	608b      	str	r3, [r1, #8]
 8002c6c:	f1b8 0f00 	cmp.w	r8, #0
 8002c70:	dde9      	ble.n	8002c46 <__sflush_r+0xae>
 8002c72:	6a21      	ldr	r1, [r4, #32]
 8002c74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002c76:	4643      	mov	r3, r8
 8002c78:	463a      	mov	r2, r7
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	47b0      	blx	r6
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	dc08      	bgt.n	8002c94 <__sflush_r+0xfc>
 8002c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c8a:	81a3      	strh	r3, [r4, #12]
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c94:	4407      	add	r7, r0
 8002c96:	eba8 0800 	sub.w	r8, r8, r0
 8002c9a:	e7e7      	b.n	8002c6c <__sflush_r+0xd4>
 8002c9c:	dfbffffe 	.word	0xdfbffffe

08002ca0 <_fflush_r>:
 8002ca0:	b538      	push	{r3, r4, r5, lr}
 8002ca2:	690b      	ldr	r3, [r1, #16]
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	460c      	mov	r4, r1
 8002ca8:	b913      	cbnz	r3, 8002cb0 <_fflush_r+0x10>
 8002caa:	2500      	movs	r5, #0
 8002cac:	4628      	mov	r0, r5
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	b118      	cbz	r0, 8002cba <_fflush_r+0x1a>
 8002cb2:	6a03      	ldr	r3, [r0, #32]
 8002cb4:	b90b      	cbnz	r3, 8002cba <_fflush_r+0x1a>
 8002cb6:	f7ff f9ad 	bl	8002014 <__sinit>
 8002cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f3      	beq.n	8002caa <_fflush_r+0xa>
 8002cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cc4:	07d0      	lsls	r0, r2, #31
 8002cc6:	d404      	bmi.n	8002cd2 <_fflush_r+0x32>
 8002cc8:	0599      	lsls	r1, r3, #22
 8002cca:	d402      	bmi.n	8002cd2 <_fflush_r+0x32>
 8002ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cce:	f7ff fb98 	bl	8002402 <__retarget_lock_acquire_recursive>
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f7ff ff5f 	bl	8002b98 <__sflush_r>
 8002cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cdc:	07da      	lsls	r2, r3, #31
 8002cde:	4605      	mov	r5, r0
 8002ce0:	d4e4      	bmi.n	8002cac <_fflush_r+0xc>
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	059b      	lsls	r3, r3, #22
 8002ce6:	d4e1      	bmi.n	8002cac <_fflush_r+0xc>
 8002ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cea:	f7ff fb8b 	bl	8002404 <__retarget_lock_release_recursive>
 8002cee:	e7dd      	b.n	8002cac <_fflush_r+0xc>

08002cf0 <__swhatbuf_r>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	b096      	sub	sp, #88	@ 0x58
 8002cfc:	4615      	mov	r5, r2
 8002cfe:	461e      	mov	r6, r3
 8002d00:	da0d      	bge.n	8002d1e <__swhatbuf_r+0x2e>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2340      	movne	r3, #64	@ 0x40
 8002d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002d14:	2000      	movs	r0, #0
 8002d16:	6031      	str	r1, [r6, #0]
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	b016      	add	sp, #88	@ 0x58
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	466a      	mov	r2, sp
 8002d20:	f000 f848 	bl	8002db4 <_fstat_r>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	dbec      	blt.n	8002d02 <__swhatbuf_r+0x12>
 8002d28:	9901      	ldr	r1, [sp, #4]
 8002d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d32:	4259      	negs	r1, r3
 8002d34:	4159      	adcs	r1, r3
 8002d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d3a:	e7eb      	b.n	8002d14 <__swhatbuf_r+0x24>

08002d3c <__smakebuf_r>:
 8002d3c:	898b      	ldrh	r3, [r1, #12]
 8002d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d40:	079d      	lsls	r5, r3, #30
 8002d42:	4606      	mov	r6, r0
 8002d44:	460c      	mov	r4, r1
 8002d46:	d507      	bpl.n	8002d58 <__smakebuf_r+0x1c>
 8002d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	6123      	str	r3, [r4, #16]
 8002d50:	2301      	movs	r3, #1
 8002d52:	6163      	str	r3, [r4, #20]
 8002d54:	b003      	add	sp, #12
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d58:	ab01      	add	r3, sp, #4
 8002d5a:	466a      	mov	r2, sp
 8002d5c:	f7ff ffc8 	bl	8002cf0 <__swhatbuf_r>
 8002d60:	9f00      	ldr	r7, [sp, #0]
 8002d62:	4605      	mov	r5, r0
 8002d64:	4639      	mov	r1, r7
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff fbba 	bl	80024e0 <_malloc_r>
 8002d6c:	b948      	cbnz	r0, 8002d82 <__smakebuf_r+0x46>
 8002d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d72:	059a      	lsls	r2, r3, #22
 8002d74:	d4ee      	bmi.n	8002d54 <__smakebuf_r+0x18>
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	81a3      	strh	r3, [r4, #12]
 8002d80:	e7e2      	b.n	8002d48 <__smakebuf_r+0xc>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	6020      	str	r0, [r4, #0]
 8002d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002d92:	b15b      	cbz	r3, 8002dac <__smakebuf_r+0x70>
 8002d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f000 f81d 	bl	8002dd8 <_isatty_r>
 8002d9e:	b128      	cbz	r0, 8002dac <__smakebuf_r+0x70>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	81a3      	strh	r3, [r4, #12]
 8002dac:	89a3      	ldrh	r3, [r4, #12]
 8002dae:	431d      	orrs	r5, r3
 8002db0:	81a5      	strh	r5, [r4, #12]
 8002db2:	e7cf      	b.n	8002d54 <__smakebuf_r+0x18>

08002db4 <_fstat_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4d07      	ldr	r5, [pc, #28]	@ (8002dd4 <_fstat_r+0x20>)
 8002db8:	2300      	movs	r3, #0
 8002dba:	4604      	mov	r4, r0
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	602b      	str	r3, [r5, #0]
 8002dc2:	f7fd fe22 	bl	8000a0a <_fstat>
 8002dc6:	1c43      	adds	r3, r0, #1
 8002dc8:	d102      	bne.n	8002dd0 <_fstat_r+0x1c>
 8002dca:	682b      	ldr	r3, [r5, #0]
 8002dcc:	b103      	cbz	r3, 8002dd0 <_fstat_r+0x1c>
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	bd38      	pop	{r3, r4, r5, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000258 	.word	0x20000258

08002dd8 <_isatty_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4d06      	ldr	r5, [pc, #24]	@ (8002df4 <_isatty_r+0x1c>)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4604      	mov	r4, r0
 8002de0:	4608      	mov	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fd fe16 	bl	8000a14 <_isatty>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d102      	bne.n	8002df2 <_isatty_r+0x1a>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	b103      	cbz	r3, 8002df2 <_isatty_r+0x1a>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	20000258 	.word	0x20000258

08002df8 <_sbrk_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4d06      	ldr	r5, [pc, #24]	@ (8002e14 <_sbrk_r+0x1c>)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	602b      	str	r3, [r5, #0]
 8002e04:	f7fd fe0a 	bl	8000a1c <_sbrk>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	d102      	bne.n	8002e12 <_sbrk_r+0x1a>
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	b103      	cbz	r3, 8002e12 <_sbrk_r+0x1a>
 8002e10:	6023      	str	r3, [r4, #0]
 8002e12:	bd38      	pop	{r3, r4, r5, pc}
 8002e14:	20000258 	.word	0x20000258

08002e18 <_init>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr

08002e24 <_fini>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr
