
stm32world_sd_fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800a190  0800a190  0000b190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd0  0800abd0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800abd0  0800abd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd8  0800abd8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abdc  0800abdc  0000bbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800abe0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          0000081c  200001d8  200001d8  0000c1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200009f4  200009f4  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001983f  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000306e  00000000  00000000  00025a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000cc56  00000000  00000000  00028ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f70  00000000  00000000  00035710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bfb  00000000  00000000  00036680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021f69  00000000  00000000  0003727b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c0d1  00000000  00000000  000591e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c11ef  00000000  00000000  000752b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001364a4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003e88  00000000  00000000  001364e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0013a370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a174 	.word	0x0800a174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a174 	.word	0x0800a174

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	9405      	str	r4, [sp, #20]
 8000ea0:	9406      	str	r4, [sp, #24]
 8000ea2:	9407      	str	r4, [sp, #28]
 8000ea4:	9408      	str	r4, [sp, #32]
 8000ea6:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea8:	9400      	str	r4, [sp, #0]
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_GPIO_Init+0xb0>)
 8000eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	9401      	str	r4, [sp, #4]
 8000ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec2:	f042 0204 	orr.w	r2, r2, #4
 8000ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eca:	f002 0204 	and.w	r2, r2, #4
 8000ece:	9201      	str	r2, [sp, #4]
 8000ed0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	9402      	str	r4, [sp, #8]
 8000ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8000edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ede:	f002 0201 	and.w	r2, r2, #1
 8000ee2:	9202      	str	r2, [sp, #8]
 8000ee4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	9403      	str	r4, [sp, #12]
 8000ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eea:	f042 0208 	orr.w	r2, r2, #8
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ef2:	f002 0208 	and.w	r2, r2, #8
 8000ef6:	9203      	str	r2, [sp, #12]
 8000ef8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	9404      	str	r4, [sp, #16]
 8000efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efe:	f042 0202 	orr.w	r2, r2, #2
 8000f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f0e:	4d0f      	ldr	r5, [pc, #60]	@ (8000f4c <MX_GPIO_Init+0xb4>)
 8000f10:	4622      	mov	r2, r4
 8000f12:	2110      	movs	r1, #16
 8000f14:	4628      	mov	r0, r5
 8000f16:	f001 f8a8 	bl	800206a <HAL_GPIO_WritePin>

    /*Configure GPIO pin : SDIO_DET_Pin */
    GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8000f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f22:	2302      	movs	r3, #2
 8000f24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000f2a:	f000 ffa1 	bl	8001e70 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f32:	2311      	movs	r3, #17
 8000f34:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	a905      	add	r1, sp, #20
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f000 ff97 	bl	8001e70 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	b00b      	add	sp, #44	@ 0x2c
 8000f44:	bd30      	pop	{r4, r5, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020000 	.word	0x40020000

08000f54 <MX_DMA_Init>:
{
 8000f54:	b500      	push	{lr}
 8000f56:	b083      	sub	sp, #12
    __HAL_RCC_DMA2_CLK_ENABLE();
 8000f58:	2100      	movs	r1, #0
 8000f5a:	9101      	str	r1, [sp, #4]
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_DMA_Init+0x30>)
 8000f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f60:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f70:	460a      	mov	r2, r1
 8000f72:	203b      	movs	r0, #59	@ 0x3b
 8000f74:	f000 fcec 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f78:	203b      	movs	r0, #59	@ 0x3b
 8000f7a:	f000 fcf9 	bl	8001970 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	b003      	add	sp, #12
 8000f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f84:	40023800 	.word	0x40023800

08000f88 <_write>:
    if (fd == 1 || fd == 2) {
 8000f88:	3801      	subs	r0, #1
 8000f8a:	2801      	cmp	r0, #1
 8000f8c:	d80a      	bhi.n	8000fa4 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000f8e:	b510      	push	{r4, lr}
 8000f90:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f96:	b292      	uxth	r2, r2
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <_write+0x28>)
 8000f9a:	f002 fbb0 	bl	80036fe <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000f9e:	b920      	cbnz	r0, 8000faa <_write+0x22>
            return len;
 8000fa0:	4620      	mov	r0, r4
}
 8000fa2:	bd10      	pop	{r4, pc}
    return -1;
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000fa8:	4770      	bx	lr
            return -1;
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fae:	e7f8      	b.n	8000fa2 <_write+0x1a>
 8000fb0:	200001f8 	.word	0x200001f8

08000fb4 <ls>:
void ls() {
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b0e5      	sub	sp, #404	@ 0x194
    res = f_opendir(&dir, path);
 8000fb8:	4932      	ldr	r1, [pc, #200]	@ (8001084 <ls+0xd0>)
 8000fba:	a84e      	add	r0, sp, #312	@ 0x138
 8000fbc:	f006 f842 	bl	8007044 <f_opendir>
    if (res != FR_OK)
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	bb08      	cbnz	r0, 8001008 <ls+0x54>
    if (res == FR_OK) {
 8000fc4:	2c00      	cmp	r4, #0
 8000fc6:	d03a      	beq.n	800103e <ls+0x8a>
    res = f_getfree("", &free_clusters, &fs_ptr);
 8000fc8:	aa4c      	add	r2, sp, #304	@ 0x130
 8000fca:	a94d      	add	r1, sp, #308	@ 0x134
 8000fcc:	482d      	ldr	r0, [pc, #180]	@ (8001084 <ls+0xd0>)
 8000fce:	f006 f8db 	bl	8007188 <f_getfree>
    if (res == FR_OK) {
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d151      	bne.n	800107a <ls+0xc6>
        uint32_t totalBlocks = (fs_ptr->n_fatent - 2) * fs_ptr->csize;
 8000fd6:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 8000fd8:	69d9      	ldr	r1, [r3, #28]
 8000fda:	3902      	subs	r1, #2
 8000fdc:	895c      	ldrh	r4, [r3, #10]
 8000fde:	fb04 f101 	mul.w	r1, r4, r1
        uint32_t freeBlocks = free_clusters * fs_ptr->csize;
 8000fe2:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 8000fe4:	fb03 f404 	mul.w	r4, r3, r4
        printf("Total blocks: %lu (%lu Mb)\n", totalBlocks, totalBlocks / 2000);
 8000fe8:	4d27      	ldr	r5, [pc, #156]	@ (8001088 <ls+0xd4>)
 8000fea:	fba5 3201 	umull	r3, r2, r5, r1
 8000fee:	09d2      	lsrs	r2, r2, #7
 8000ff0:	4826      	ldr	r0, [pc, #152]	@ (800108c <ls+0xd8>)
 8000ff2:	f006 ff1f 	bl	8007e34 <iprintf>
        printf("Free blocks: %lu (%lu Mb)\n", freeBlocks, freeBlocks / 2000);
 8000ff6:	fba5 3204 	umull	r3, r2, r5, r4
 8000ffa:	09d2      	lsrs	r2, r2, #7
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4824      	ldr	r0, [pc, #144]	@ (8001090 <ls+0xdc>)
 8001000:	f006 ff18 	bl	8007e34 <iprintf>
}
 8001004:	b065      	add	sp, #404	@ 0x194
 8001006:	bd30      	pop	{r4, r5, pc}
        printf("res = %d f_opendir\n", res);
 8001008:	4601      	mov	r1, r0
 800100a:	4822      	ldr	r0, [pc, #136]	@ (8001094 <ls+0xe0>)
 800100c:	f006 ff12 	bl	8007e34 <iprintf>
 8001010:	e7d8      	b.n	8000fc4 <ls+0x10>
                printf("res = %d f_readdir\n", res);
 8001012:	4821      	ldr	r0, [pc, #132]	@ (8001098 <ls+0xe4>)
 8001014:	f006 ff0e 	bl	8007e34 <iprintf>
            if ((res != FR_OK) || (fno.fname[0] == 0))
 8001018:	e7d6      	b.n	8000fc8 <ls+0x14>
            printf("%c%c%c%c %10d %s/%s\n",
 800101a:	212d      	movs	r1, #45	@ 0x2d
 800101c:	e020      	b.n	8001060 <ls+0xac>
 800101e:	222d      	movs	r2, #45	@ 0x2d
 8001020:	e022      	b.n	8001068 <ls+0xb4>
 8001022:	232d      	movs	r3, #45	@ 0x2d
 8001024:	e024      	b.n	8001070 <ls+0xbc>
 8001026:	252d      	movs	r5, #45	@ 0x2d
                    (int) fno.fsize, path, fno.fname);
 8001028:	9804      	ldr	r0, [sp, #16]
            printf("%c%c%c%c %10d %s/%s\n",
 800102a:	f10d 042a 	add.w	r4, sp, #42	@ 0x2a
 800102e:	9403      	str	r4, [sp, #12]
 8001030:	4c14      	ldr	r4, [pc, #80]	@ (8001084 <ls+0xd0>)
 8001032:	9402      	str	r4, [sp, #8]
 8001034:	9001      	str	r0, [sp, #4]
 8001036:	9500      	str	r5, [sp, #0]
 8001038:	4818      	ldr	r0, [pc, #96]	@ (800109c <ls+0xe8>)
 800103a:	f006 fefb 	bl	8007e34 <iprintf>
            res = f_readdir(&dir, &fno);
 800103e:	a904      	add	r1, sp, #16
 8001040:	a84e      	add	r0, sp, #312	@ 0x138
 8001042:	f006 f871 	bl	8007128 <f_readdir>
            if (res != FR_OK)
 8001046:	4601      	mov	r1, r0
 8001048:	2800      	cmp	r0, #0
 800104a:	d1e2      	bne.n	8001012 <ls+0x5e>
            if ((res != FR_OK) || (fno.fname[0] == 0))
 800104c:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0b9      	beq.n	8000fc8 <ls+0x14>
                    ((fno.fattrib & AM_DIR) ? 'D' : '-'),
 8001054:	f89d 001c 	ldrb.w	r0, [sp, #28]
            printf("%c%c%c%c %10d %s/%s\n",
 8001058:	f010 0f10 	tst.w	r0, #16
 800105c:	d0dd      	beq.n	800101a <ls+0x66>
 800105e:	2144      	movs	r1, #68	@ 0x44
 8001060:	f010 0f01 	tst.w	r0, #1
 8001064:	d0db      	beq.n	800101e <ls+0x6a>
 8001066:	2252      	movs	r2, #82	@ 0x52
 8001068:	f010 0f04 	tst.w	r0, #4
 800106c:	d0d9      	beq.n	8001022 <ls+0x6e>
 800106e:	2353      	movs	r3, #83	@ 0x53
 8001070:	f010 0f02 	tst.w	r0, #2
 8001074:	d0d7      	beq.n	8001026 <ls+0x72>
 8001076:	2548      	movs	r5, #72	@ 0x48
 8001078:	e7d6      	b.n	8001028 <ls+0x74>
        printf("Unable to get free space\n");
 800107a:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <ls+0xec>)
 800107c:	f006 ff42 	bl	8007f04 <puts>
}
 8001080:	e7c0      	b.n	8001004 <ls+0x50>
 8001082:	bf00      	nop
 8001084:	0800a2ec 	.word	0x0800a2ec
 8001088:	10624dd3 	.word	0x10624dd3
 800108c:	0800a1d0 	.word	0x0800a1d0
 8001090:	0800a1ec 	.word	0x0800a1ec
 8001094:	0800a190 	.word	0x0800a190
 8001098:	0800a1a4 	.word	0x0800a1a4
 800109c:	0800a1b8 	.word	0x0800a1b8
 80010a0:	0800a208 	.word	0x0800a208

080010a4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80010a6:	e7fe      	b.n	80010a6 <Error_Handler+0x2>

080010a8 <MX_SDIO_SD_Init>:
{
 80010a8:	b508      	push	{r3, lr}
    hsd.Instance = SDIO;
 80010aa:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <MX_SDIO_SD_Init+0x3c>)
 80010ac:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_SDIO_SD_Init+0x40>)
 80010ae:	6003      	str	r3, [r0, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010b0:	2300      	movs	r3, #0
 80010b2:	6043      	str	r3, [r0, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_ENABLE;
 80010b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b8:	6082      	str	r2, [r0, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010ba:	60c3      	str	r3, [r0, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80010bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c0:	6102      	str	r2, [r0, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010c2:	6143      	str	r3, [r0, #20]
    hsd.Init.ClockDiv = 0;
 80010c4:	6183      	str	r3, [r0, #24]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010c6:	6103      	str	r3, [r0, #16]
    if (HAL_SD_Init(&hsd) != HAL_OK) {
 80010c8:	f001 ffb8 	bl	800303c <HAL_SD_Init>
 80010cc:	b930      	cbnz	r0, 80010dc <MX_SDIO_SD_Init+0x34>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 80010ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d2:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_SDIO_SD_Init+0x3c>)
 80010d4:	f001 ffe0 	bl	8003098 <HAL_SD_ConfigWideBusOperation>
 80010d8:	b910      	cbnz	r0, 80010e0 <MX_SDIO_SD_Init+0x38>
}
 80010da:	bd08      	pop	{r3, pc}
        Error_Handler();
 80010dc:	f7ff ffe2 	bl	80010a4 <Error_Handler>
        Error_Handler();
 80010e0:	f7ff ffe0 	bl	80010a4 <Error_Handler>
 80010e4:	200002a0 	.word	0x200002a0
 80010e8:	40012c00 	.word	0x40012c00

080010ec <MX_USART1_UART_Init>:
{
 80010ec:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 80010ee:	480a      	ldr	r0, [pc, #40]	@ (8001118 <MX_USART1_UART_Init+0x2c>)
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_USART1_UART_Init+0x30>)
 80010f2:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 2000000;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_USART1_UART_Init+0x34>)
 80010f6:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f8:	2300      	movs	r3, #0
 80010fa:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	220c      	movs	r2, #12
 8001102:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001104:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800110a:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800110c:	f002 fac7 	bl	800369e <HAL_UART_Init>
 8001110:	b900      	cbnz	r0, 8001114 <MX_USART1_UART_Init+0x28>
}
 8001112:	bd08      	pop	{r3, pc}
        Error_Handler();
 8001114:	f7ff ffc6 	bl	80010a4 <Error_Handler>
 8001118:	200001f8 	.word	0x200001f8
 800111c:	40011000 	.word	0x40011000
 8001120:	001e8480 	.word	0x001e8480

08001124 <SystemClock_Config>:
{
 8001124:	b500      	push	{lr}
 8001126:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001128:	2230      	movs	r2, #48	@ 0x30
 800112a:	2100      	movs	r1, #0
 800112c:	a808      	add	r0, sp, #32
 800112e:	f006 ffe9 	bl	8008104 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001132:	2300      	movs	r3, #0
 8001134:	9303      	str	r3, [sp, #12]
 8001136:	9304      	str	r3, [sp, #16]
 8001138:	9305      	str	r3, [sp, #20]
 800113a:	9306      	str	r3, [sp, #24]
 800113c:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <SystemClock_Config+0xa0>)
 8001142:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001144:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001148:	6411      	str	r1, [r2, #64]	@ 0x40
 800114a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800114c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001150:	9201      	str	r2, [sp, #4]
 8001152:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <SystemClock_Config+0xa4>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116a:	2301      	movs	r3, #1
 800116c:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001172:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001178:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800117c:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800117e:	2208      	movs	r2, #8
 8001180:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8001182:	22a8      	movs	r2, #168	@ 0xa8
 8001184:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001186:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001188:	2307      	movs	r3, #7
 800118a:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	a808      	add	r0, sp, #32
 800118e:	f000 ff7b 	bl	8002088 <HAL_RCC_OscConfig>
 8001192:	b998      	cbnz	r0, 80011bc <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2302      	movs	r3, #2
 800119a:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011a4:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011aa:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ac:	2105      	movs	r1, #5
 80011ae:	a803      	add	r0, sp, #12
 80011b0:	f001 f9ce 	bl	8002550 <HAL_RCC_ClockConfig>
 80011b4:	b920      	cbnz	r0, 80011c0 <SystemClock_Config+0x9c>
}
 80011b6:	b015      	add	sp, #84	@ 0x54
 80011b8:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80011bc:	f7ff ff72 	bl	80010a4 <Error_Handler>
        Error_Handler();
 80011c0:	f7ff ff70 	bl	80010a4 <Error_Handler>
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <main>:
{
 80011cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d0:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
    HAL_Init();
 80011d4:	f000 fb28 	bl	8001828 <HAL_Init>
    SystemClock_Config();
 80011d8:	f7ff ffa4 	bl	8001124 <SystemClock_Config>
    MX_GPIO_Init();
 80011dc:	f7ff fe5c 	bl	8000e98 <MX_GPIO_Init>
    MX_DMA_Init();
 80011e0:	f7ff feb8 	bl	8000f54 <MX_DMA_Init>
    MX_SDIO_SD_Init();
 80011e4:	f7ff ff60 	bl	80010a8 <MX_SDIO_SD_Init>
    MX_USART1_UART_Init();
 80011e8:	f7ff ff80 	bl	80010ec <MX_USART1_UART_Init>
    MX_FATFS_Init();
 80011ec:	f003 f83c 	bl	8004268 <MX_FATFS_Init>
    printf("\n\n\n\n--------\nStarting\n");
 80011f0:	4895      	ldr	r0, [pc, #596]	@ (8001448 <main+0x27c>)
 80011f2:	f006 fe87 	bl	8007f04 <puts>
    printf("SD Card Information:\n");
 80011f6:	4895      	ldr	r0, [pc, #596]	@ (800144c <main+0x280>)
 80011f8:	f006 fe84 	bl	8007f04 <puts>
    printf("Block size: %lu\n", hsd.SdCard.BlockSize);
 80011fc:	4c94      	ldr	r4, [pc, #592]	@ (8001450 <main+0x284>)
 80011fe:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001200:	4894      	ldr	r0, [pc, #592]	@ (8001454 <main+0x288>)
 8001202:	f006 fe17 	bl	8007e34 <iprintf>
    printf("Block nmbr: %lu\n", hsd.SdCard.BlockNbr);
 8001206:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001208:	4893      	ldr	r0, [pc, #588]	@ (8001458 <main+0x28c>)
 800120a:	f006 fe13 	bl	8007e34 <iprintf>
    printf("Card size: %lu\n", (hsd.SdCard.BlockSize * hsd.SdCard.BlockNbr) / 1024);
 800120e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001210:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001212:	fb03 f101 	mul.w	r1, r3, r1
 8001216:	0a89      	lsrs	r1, r1, #10
 8001218:	4890      	ldr	r0, [pc, #576]	@ (800145c <main+0x290>)
 800121a:	f006 fe0b 	bl	8007e34 <iprintf>
    printf("Card version: %lu\n", hsd.SdCard.CardVersion);
 800121e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001220:	488f      	ldr	r0, [pc, #572]	@ (8001460 <main+0x294>)
 8001222:	f006 fe07 	bl	8007e34 <iprintf>
    if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8001226:	2200      	movs	r2, #0
 8001228:	498e      	ldr	r1, [pc, #568]	@ (8001464 <main+0x298>)
 800122a:	488f      	ldr	r0, [pc, #572]	@ (8001468 <main+0x29c>)
 800122c:	f005 fa26 	bl	800667c <f_mount>
 8001230:	b120      	cbz	r0, 800123c <main+0x70>
        printf("Unable to mount disk\n");
 8001232:	488e      	ldr	r0, [pc, #568]	@ (800146c <main+0x2a0>)
 8001234:	f006 fe66 	bl	8007f04 <puts>
        Error_Handler();
 8001238:	f7ff ff34 	bl	80010a4 <Error_Handler>
    if (f_open(&SDFile, total_uptime_filename, FA_OPEN_EXISTING | FA_READ) == FR_OK) {
 800123c:	2201      	movs	r2, #1
 800123e:	498c      	ldr	r1, [pc, #560]	@ (8001470 <main+0x2a4>)
 8001240:	488c      	ldr	r0, [pc, #560]	@ (8001474 <main+0x2a8>)
 8001242:	f005 fa49 	bl	80066d8 <f_open>
 8001246:	b9e0      	cbnz	r0, 8001282 <main+0xb6>
        if (f_read(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &rbytes) == FR_OK) {
 8001248:	f50d 6391 	add.w	r3, sp, #1160	@ 0x488
 800124c:	2204      	movs	r2, #4
 800124e:	498a      	ldr	r1, [pc, #552]	@ (8001478 <main+0x2ac>)
 8001250:	4888      	ldr	r0, [pc, #544]	@ (8001474 <main+0x2a8>)
 8001252:	f005 fc11 	bl	8006a78 <f_read>
 8001256:	b978      	cbnz	r0, 8001278 <main+0xac>
            printf("Total uptime = %lu\n", total_uptime);
 8001258:	4b87      	ldr	r3, [pc, #540]	@ (8001478 <main+0x2ac>)
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	4887      	ldr	r0, [pc, #540]	@ (800147c <main+0x2b0>)
 800125e:	f006 fde9 	bl	8007e34 <iprintf>
            f_close(&SDFile);
 8001262:	4884      	ldr	r0, [pc, #528]	@ (8001474 <main+0x2a8>)
 8001264:	f005 fed9 	bl	800701a <f_close>
    if (f_open(&SDFile, tick_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8001268:	220a      	movs	r2, #10
 800126a:	4985      	ldr	r1, [pc, #532]	@ (8001480 <main+0x2b4>)
 800126c:	4881      	ldr	r0, [pc, #516]	@ (8001474 <main+0x2a8>)
 800126e:	f005 fa33 	bl	80066d8 <f_open>
 8001272:	b330      	cbz	r0, 80012c2 <main+0xf6>
{
 8001274:	2300      	movs	r3, #0
 8001276:	e02c      	b.n	80012d2 <main+0x106>
            printf("Unable to read\n");
 8001278:	4882      	ldr	r0, [pc, #520]	@ (8001484 <main+0x2b8>)
 800127a:	f006 fe43 	bl	8007f04 <puts>
            Error_Handler();
 800127e:	f7ff ff11 	bl	80010a4 <Error_Handler>
        if (f_open(&SDFile, total_uptime_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8001282:	220a      	movs	r2, #10
 8001284:	497a      	ldr	r1, [pc, #488]	@ (8001470 <main+0x2a4>)
 8001286:	487b      	ldr	r0, [pc, #492]	@ (8001474 <main+0x2a8>)
 8001288:	f005 fa26 	bl	80066d8 <f_open>
 800128c:	b9a0      	cbnz	r0, 80012b8 <main+0xec>
            if (f_write(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &wbytes) == FR_OK) {
 800128e:	f20d 438c 	addw	r3, sp, #1164	@ 0x48c
 8001292:	2204      	movs	r2, #4
 8001294:	4978      	ldr	r1, [pc, #480]	@ (8001478 <main+0x2ac>)
 8001296:	4877      	ldr	r0, [pc, #476]	@ (8001474 <main+0x2a8>)
 8001298:	f005 fce1 	bl	8006c5e <f_write>
 800129c:	b938      	cbnz	r0, 80012ae <main+0xe2>
                printf("File %s created\n", total_uptime_filename);
 800129e:	4974      	ldr	r1, [pc, #464]	@ (8001470 <main+0x2a4>)
 80012a0:	4879      	ldr	r0, [pc, #484]	@ (8001488 <main+0x2bc>)
 80012a2:	f006 fdc7 	bl	8007e34 <iprintf>
                f_close(&SDFile);
 80012a6:	4873      	ldr	r0, [pc, #460]	@ (8001474 <main+0x2a8>)
 80012a8:	f005 feb7 	bl	800701a <f_close>
 80012ac:	e7dc      	b.n	8001268 <main+0x9c>
                printf("Unable to write\n");
 80012ae:	4877      	ldr	r0, [pc, #476]	@ (800148c <main+0x2c0>)
 80012b0:	f006 fe28 	bl	8007f04 <puts>
                Error_Handler();
 80012b4:	f7ff fef6 	bl	80010a4 <Error_Handler>
            printf("Unable to create\n");
 80012b8:	4875      	ldr	r0, [pc, #468]	@ (8001490 <main+0x2c4>)
 80012ba:	f006 fe23 	bl	8007f04 <puts>
            Error_Handler();
 80012be:	f7ff fef1 	bl	80010a4 <Error_Handler>
        f_close(&SDFile);
 80012c2:	486c      	ldr	r0, [pc, #432]	@ (8001474 <main+0x2a8>)
 80012c4:	f005 fea9 	bl	800701a <f_close>
 80012c8:	e7d4      	b.n	8001274 <main+0xa8>
        buf[i] = (uint8_t) i;
 80012ca:	aa22      	add	r2, sp, #136	@ 0x88
 80012cc:	54d3      	strb	r3, [r2, r3]
    for (uint16_t i = 0; i < 1024; ++i) {
 80012ce:	3301      	adds	r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d6:	d3f8      	bcc.n	80012ca <main+0xfe>
    uint32_t start = uwTick;
 80012d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001494 <main+0x2c8>)
 80012da:	681d      	ldr	r5, [r3, #0]
    if (f_open(&SDFile, big_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80012dc:	220a      	movs	r2, #10
 80012de:	496e      	ldr	r1, [pc, #440]	@ (8001498 <main+0x2cc>)
 80012e0:	4864      	ldr	r0, [pc, #400]	@ (8001474 <main+0x2a8>)
 80012e2:	f005 f9f9 	bl	80066d8 <f_open>
 80012e6:	bb28      	cbnz	r0, 8001334 <main+0x168>
        for (uint16_t i = 0; i < 1 * 1024; ++i) {
 80012e8:	2400      	movs	r4, #0
 80012ea:	e001      	b.n	80012f0 <main+0x124>
 80012ec:	3401      	adds	r4, #1
 80012ee:	b2a4      	uxth	r4, r4
 80012f0:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 80012f4:	d20d      	bcs.n	8001312 <main+0x146>
            if (f_write(&SDFile, &buf, sizeof(buf), (void*) &wbytes) != FR_OK) {
 80012f6:	f20d 438c 	addw	r3, sp, #1164	@ 0x48c
 80012fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fe:	a922      	add	r1, sp, #136	@ 0x88
 8001300:	485c      	ldr	r0, [pc, #368]	@ (8001474 <main+0x2a8>)
 8001302:	f005 fcac 	bl	8006c5e <f_write>
 8001306:	2800      	cmp	r0, #0
 8001308:	d0f0      	beq.n	80012ec <main+0x120>
                printf("Unable to write\n");
 800130a:	4860      	ldr	r0, [pc, #384]	@ (800148c <main+0x2c0>)
 800130c:	f006 fdfa 	bl	8007f04 <puts>
 8001310:	e7ec      	b.n	80012ec <main+0x120>
        f_close(&SDFile);
 8001312:	4858      	ldr	r0, [pc, #352]	@ (8001474 <main+0x2a8>)
 8001314:	f005 fe81 	bl	800701a <f_close>
    printf("Write took %lu ms\n", uwTick - start);
 8001318:	4b5e      	ldr	r3, [pc, #376]	@ (8001494 <main+0x2c8>)
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	1b49      	subs	r1, r1, r5
 800131e:	485f      	ldr	r0, [pc, #380]	@ (800149c <main+0x2d0>)
 8001320:	f006 fd88 	bl	8007e34 <iprintf>
    uint32_t now, next_blink = 500, next_tick = 1000, loop_count = 0, next_ls = 10000;
 8001324:	f242 7610 	movw	r6, #10000	@ 0x2710
 8001328:	2500      	movs	r5, #0
 800132a:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
 800132e:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 8001332:	e073      	b.n	800141c <main+0x250>
        printf("Unable to open %s\n", big_filename);
 8001334:	4958      	ldr	r1, [pc, #352]	@ (8001498 <main+0x2cc>)
 8001336:	485a      	ldr	r0, [pc, #360]	@ (80014a0 <main+0x2d4>)
 8001338:	f006 fd7c 	bl	8007e34 <iprintf>
 800133c:	e7ec      	b.n	8001318 <main+0x14c>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800133e:	2110      	movs	r1, #16
 8001340:	4858      	ldr	r0, [pc, #352]	@ (80014a4 <main+0x2d8>)
 8001342:	f000 fe98 	bl	8002076 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 8001346:	f504 77fa 	add.w	r7, r4, #500	@ 0x1f4
 800134a:	e06b      	b.n	8001424 <main+0x258>
            ++total_uptime;
 800134c:	4a4a      	ldr	r2, [pc, #296]	@ (8001478 <main+0x2ac>)
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	6013      	str	r3, [r2, #0]
            sprintf(s, "Tick %lu (loop = %lu total = %lu)\n", now / 1000, loop_count, total_uptime);
 8001354:	4a54      	ldr	r2, [pc, #336]	@ (80014a8 <main+0x2dc>)
 8001356:	fba2 1204 	umull	r1, r2, r2, r4
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	462b      	mov	r3, r5
 800135e:	0992      	lsrs	r2, r2, #6
 8001360:	4952      	ldr	r1, [pc, #328]	@ (80014ac <main+0x2e0>)
 8001362:	a802      	add	r0, sp, #8
 8001364:	f006 fdd6 	bl	8007f14 <siprintf>
            printf("%s", s);
 8001368:	a902      	add	r1, sp, #8
 800136a:	4851      	ldr	r0, [pc, #324]	@ (80014b0 <main+0x2e4>)
 800136c:	f006 fd62 	bl	8007e34 <iprintf>
            if (f_open(&SDFile, tick_filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK) {
 8001370:	2232      	movs	r2, #50	@ 0x32
 8001372:	4943      	ldr	r1, [pc, #268]	@ (8001480 <main+0x2b4>)
 8001374:	483f      	ldr	r0, [pc, #252]	@ (8001474 <main+0x2a8>)
 8001376:	f005 f9af 	bl	80066d8 <f_open>
 800137a:	bb30      	cbnz	r0, 80013ca <main+0x1fe>
                if (f_write(&SDFile, &s, strlen(s), (void*) &wbytes) != FR_OK) {
 800137c:	a802      	add	r0, sp, #8
 800137e:	f7fe ff77 	bl	8000270 <strlen>
 8001382:	4602      	mov	r2, r0
 8001384:	f20d 438c 	addw	r3, sp, #1164	@ 0x48c
 8001388:	a902      	add	r1, sp, #8
 800138a:	483a      	ldr	r0, [pc, #232]	@ (8001474 <main+0x2a8>)
 800138c:	f005 fc67 	bl	8006c5e <f_write>
 8001390:	b9b8      	cbnz	r0, 80013c2 <main+0x1f6>
                f_close(&SDFile);
 8001392:	4838      	ldr	r0, [pc, #224]	@ (8001474 <main+0x2a8>)
 8001394:	f005 fe41 	bl	800701a <f_close>
            if (f_open(&SDFile, total_uptime_filename, FA_OPEN_EXISTING | FA_WRITE) == FR_OK) {
 8001398:	2202      	movs	r2, #2
 800139a:	4935      	ldr	r1, [pc, #212]	@ (8001470 <main+0x2a4>)
 800139c:	4835      	ldr	r0, [pc, #212]	@ (8001474 <main+0x2a8>)
 800139e:	f005 f99b 	bl	80066d8 <f_open>
 80013a2:	b9d0      	cbnz	r0, 80013da <main+0x20e>
                if (f_write(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &wbytes) != FR_OK) {
 80013a4:	f20d 438c 	addw	r3, sp, #1164	@ 0x48c
 80013a8:	2204      	movs	r2, #4
 80013aa:	4933      	ldr	r1, [pc, #204]	@ (8001478 <main+0x2ac>)
 80013ac:	4831      	ldr	r0, [pc, #196]	@ (8001474 <main+0x2a8>)
 80013ae:	f005 fc56 	bl	8006c5e <f_write>
 80013b2:	b970      	cbnz	r0, 80013d2 <main+0x206>
                f_close(&SDFile);
 80013b4:	482f      	ldr	r0, [pc, #188]	@ (8001474 <main+0x2a8>)
 80013b6:	f005 fe30 	bl	800701a <f_close>
            next_tick = now + 1000;
 80013ba:	f504 787a 	add.w	r8, r4, #1000	@ 0x3e8
            loop_count = 0;
 80013be:	2500      	movs	r5, #0
 80013c0:	e032      	b.n	8001428 <main+0x25c>
                    printf("Unable to write\n");
 80013c2:	4832      	ldr	r0, [pc, #200]	@ (800148c <main+0x2c0>)
 80013c4:	f006 fd9e 	bl	8007f04 <puts>
 80013c8:	e7e3      	b.n	8001392 <main+0x1c6>
                printf("Unable to open tick file\n");
 80013ca:	483a      	ldr	r0, [pc, #232]	@ (80014b4 <main+0x2e8>)
 80013cc:	f006 fd9a 	bl	8007f04 <puts>
 80013d0:	e7e2      	b.n	8001398 <main+0x1cc>
                    printf("Unable to write\n");
 80013d2:	482e      	ldr	r0, [pc, #184]	@ (800148c <main+0x2c0>)
 80013d4:	f006 fd96 	bl	8007f04 <puts>
 80013d8:	e7ec      	b.n	80013b4 <main+0x1e8>
                printf("Unable to open file\n");
 80013da:	4837      	ldr	r0, [pc, #220]	@ (80014b8 <main+0x2ec>)
 80013dc:	f006 fd92 	bl	8007f04 <puts>
 80013e0:	e7eb      	b.n	80013ba <main+0x1ee>
                while (f_read(&SDFile, &buf, sizeof(buf), (void*) &rbytes) == FR_OK && rbytes == sizeof(buf)) {
 80013e2:	f50d 6391 	add.w	r3, sp, #1160	@ 0x488
 80013e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ea:	a922      	add	r1, sp, #136	@ 0x88
 80013ec:	4821      	ldr	r0, [pc, #132]	@ (8001474 <main+0x2a8>)
 80013ee:	f005 fb43 	bl	8006a78 <f_read>
 80013f2:	b920      	cbnz	r0, 80013fe <main+0x232>
 80013f4:	f8dd 3488 	ldr.w	r3, [sp, #1160]	@ 0x488
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fc:	d0f1      	beq.n	80013e2 <main+0x216>
                f_close(&SDFile);
 80013fe:	481d      	ldr	r0, [pc, #116]	@ (8001474 <main+0x2a8>)
 8001400:	f005 fe0b 	bl	800701a <f_close>
            printf("Read took %lu ms\n", uwTick - start);
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <main+0x2c8>)
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	1b89      	subs	r1, r1, r6
 800140a:	482c      	ldr	r0, [pc, #176]	@ (80014bc <main+0x2f0>)
 800140c:	f006 fd12 	bl	8007e34 <iprintf>
            ls();
 8001410:	f7ff fdd0 	bl	8000fb4 <ls>
            next_ls = now + 10000;
 8001414:	f504 561c 	add.w	r6, r4, #9984	@ 0x2700
 8001418:	3610      	adds	r6, #16
        ++loop_count;
 800141a:	3501      	adds	r5, #1
        now = uwTick;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <main+0x2c8>)
 800141e:	681c      	ldr	r4, [r3, #0]
        if (now >= next_blink) {
 8001420:	42a7      	cmp	r7, r4
 8001422:	d98c      	bls.n	800133e <main+0x172>
        if (now >= next_tick) {
 8001424:	45a0      	cmp	r8, r4
 8001426:	d991      	bls.n	800134c <main+0x180>
        if (now >= next_ls) {
 8001428:	42a6      	cmp	r6, r4
 800142a:	d8f6      	bhi.n	800141a <main+0x24e>
            uint32_t start = uwTick;
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <main+0x2c8>)
 800142e:	681e      	ldr	r6, [r3, #0]
            if (f_open(&SDFile, big_filename, FA_OPEN_EXISTING | FA_READ) == FR_OK) {
 8001430:	2201      	movs	r2, #1
 8001432:	4919      	ldr	r1, [pc, #100]	@ (8001498 <main+0x2cc>)
 8001434:	480f      	ldr	r0, [pc, #60]	@ (8001474 <main+0x2a8>)
 8001436:	f005 f94f 	bl	80066d8 <f_open>
 800143a:	2800      	cmp	r0, #0
 800143c:	d0d1      	beq.n	80013e2 <main+0x216>
                printf("Unable to open %s\n", big_filename);
 800143e:	4916      	ldr	r1, [pc, #88]	@ (8001498 <main+0x2cc>)
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <main+0x2d4>)
 8001442:	f006 fcf7 	bl	8007e34 <iprintf>
 8001446:	e7dd      	b.n	8001404 <main+0x238>
 8001448:	0800a224 	.word	0x0800a224
 800144c:	0800a23c 	.word	0x0800a23c
 8001450:	200002a0 	.word	0x200002a0
 8001454:	0800a254 	.word	0x0800a254
 8001458:	0800a268 	.word	0x0800a268
 800145c:	0800a27c 	.word	0x0800a27c
 8001460:	0800a28c 	.word	0x0800a28c
 8001464:	200007c0 	.word	0x200007c0
 8001468:	20000588 	.word	0x20000588
 800146c:	0800a2a0 	.word	0x0800a2a0
 8001470:	0800a3bc 	.word	0x0800a3bc
 8001474:	20000330 	.word	0x20000330
 8001478:	200001f4 	.word	0x200001f4
 800147c:	0800a2b8 	.word	0x0800a2b8
 8001480:	0800a3b0 	.word	0x0800a3b0
 8001484:	0800a2cc 	.word	0x0800a2cc
 8001488:	0800a2dc 	.word	0x0800a2dc
 800148c:	0800a2f0 	.word	0x0800a2f0
 8001490:	0800a300 	.word	0x0800a300
 8001494:	20000328 	.word	0x20000328
 8001498:	0800a3a8 	.word	0x0800a3a8
 800149c:	0800a328 	.word	0x0800a328
 80014a0:	0800a314 	.word	0x0800a314
 80014a4:	40020400 	.word	0x40020400
 80014a8:	10624dd3 	.word	0x10624dd3
 80014ac:	0800a33c 	.word	0x0800a33c
 80014b0:	0800a360 	.word	0x0800a360
 80014b4:	0800a364 	.word	0x0800a364
 80014b8:	0800a380 	.word	0x0800a380
 80014bc:	0800a394 	.word	0x0800a394

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2100      	movs	r1, #0
 80014c4:	9100      	str	r1, [sp, #0]
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_MspInit+0x34>)
 80014c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80014d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014d2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	9101      	str	r1, [sp, #4]
 80014dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	b002      	add	sp, #8
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014fc:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	2300      	movs	r3, #0
 8001500:	9303      	str	r3, [sp, #12]
 8001502:	9304      	str	r3, [sp, #16]
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	9306      	str	r3, [sp, #24]
 8001508:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 800150a:	6802      	ldr	r2, [r0, #0]
 800150c:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <HAL_SD_MspInit+0x100>)
 800150e:	429a      	cmp	r2, r3
 8001510:	d002      	beq.n	8001518 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001512:	b009      	add	sp, #36	@ 0x24
 8001514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001518:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 800151a:	2500      	movs	r5, #0
 800151c:	9500      	str	r5, [sp, #0]
 800151e:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8001522:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001528:	645a      	str	r2, [r3, #68]	@ 0x44
 800152a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800152c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001530:	9200      	str	r2, [sp, #0]
 8001532:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	9501      	str	r5, [sp, #4]
 8001536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001538:	f042 0204 	orr.w	r2, r2, #4
 800153c:	631a      	str	r2, [r3, #48]	@ 0x30
 800153e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001540:	f002 0204 	and.w	r2, r2, #4
 8001544:	9201      	str	r2, [sp, #4]
 8001546:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001548:	9502      	str	r5, [sp, #8]
 800154a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800154c:	f042 0208 	orr.w	r2, r2, #8
 8001550:	631a      	str	r2, [r3, #48]	@ 0x30
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800155c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001560:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	f04f 0902 	mov.w	r9, #2
 8001566:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2603      	movs	r6, #3
 800156c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800156e:	f04f 080c 	mov.w	r8, #12
 8001572:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	eb0d 0108 	add.w	r1, sp, r8
 800157a:	4820      	ldr	r0, [pc, #128]	@ (80015fc <HAL_SD_MspInit+0x104>)
 800157c:	f000 fc78 	bl	8001e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001580:	2704      	movs	r7, #4
 8001582:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800158c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001590:	eb0d 0108 	add.w	r1, sp, r8
 8001594:	481a      	ldr	r0, [pc, #104]	@ (8001600 <HAL_SD_MspInit+0x108>)
 8001596:	f000 fc6b 	bl	8001e70 <HAL_GPIO_Init>
    hdma_sdio.Instance = DMA2_Stream3;
 800159a:	481a      	ldr	r0, [pc, #104]	@ (8001604 <HAL_SD_MspInit+0x10c>)
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_SD_MspInit+0x110>)
 800159e:	6003      	str	r3, [r0, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 80015a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80015a4:	6043      	str	r3, [r0, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	6085      	str	r5, [r0, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	60c5      	str	r5, [r0, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ae:	6103      	str	r3, [r0, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b4:	6143      	str	r3, [r0, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ba:	6183      	str	r3, [r0, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 80015bc:	2320      	movs	r3, #32
 80015be:	61c3      	str	r3, [r0, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	6205      	str	r5, [r0, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015c2:	6247      	str	r7, [r0, #36]	@ 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015c4:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 80015c6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80015ca:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 80015cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015d0:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 80015d2:	f000 fa65 	bl	8001aa0 <HAL_DMA_Init>
 80015d6:	b960      	cbnz	r0, 80015f2 <HAL_SD_MspInit+0xfa>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_SD_MspInit+0x10c>)
 80015da:	6423      	str	r3, [r4, #64]	@ 0x40
 80015dc:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 80015de:	63e3      	str	r3, [r4, #60]	@ 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	4611      	mov	r1, r2
 80015e4:	2031      	movs	r0, #49	@ 0x31
 80015e6:	f000 f9b3 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80015ea:	2031      	movs	r0, #49	@ 0x31
 80015ec:	f000 f9c0 	bl	8001970 <HAL_NVIC_EnableIRQ>
}
 80015f0:	e78f      	b.n	8001512 <HAL_SD_MspInit+0x1a>
      Error_Handler();
 80015f2:	f7ff fd57 	bl	80010a4 <Error_Handler>
 80015f6:	e7ef      	b.n	80015d8 <HAL_SD_MspInit+0xe0>
 80015f8:	40012c00 	.word	0x40012c00
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	20000240 	.word	0x20000240
 8001608:	40026458 	.word	0x40026458

0800160c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b510      	push	{r4, lr}
 800160e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	2300      	movs	r3, #0
 8001612:	9303      	str	r3, [sp, #12]
 8001614:	9304      	str	r3, [sp, #16]
 8001616:	9305      	str	r3, [sp, #20]
 8001618:	9306      	str	r3, [sp, #24]
 800161a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800161c:	6802      	ldr	r2, [r0, #0]
 800161e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001622:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800162a:	b008      	add	sp, #32
 800162c:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800162e:	2400      	movs	r4, #0
 8001630:	9401      	str	r4, [sp, #4]
 8001632:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001636:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001638:	f042 0210 	orr.w	r2, r2, #16
 800163c:	645a      	str	r2, [r3, #68]	@ 0x44
 800163e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001640:	f002 0210 	and.w	r2, r2, #16
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	9402      	str	r4, [sp, #8]
 800164a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001660:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166a:	2307      	movs	r3, #7
 800166c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	a903      	add	r1, sp, #12
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_UART_MspInit+0x7c>)
 8001672:	f000 fbfd 	bl	8001e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001676:	4622      	mov	r2, r4
 8001678:	4621      	mov	r1, r4
 800167a:	2025      	movs	r0, #37	@ 0x25
 800167c:	f000 f968 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001680:	2025      	movs	r0, #37	@ 0x25
 8001682:	f000 f975 	bl	8001970 <HAL_NVIC_EnableIRQ>
}
 8001686:	e7d0      	b.n	800162a <HAL_UART_MspInit+0x1e>
 8001688:	40020000 	.word	0x40020000

0800168c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler>

0800168e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler>

08001690 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler>

08001692 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler>

08001694 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler>

08001696 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f000 f8dd 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bd08      	pop	{r3, pc}

080016a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016a6:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <USART1_IRQHandler+0xc>)
 80016a8:	f002 f91c 	bl	80038e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	200001f8 	.word	0x200001f8

080016b4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80016b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80016b6:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <SDIO_IRQHandler+0xc>)
 80016b8:	f001 fdd8 	bl	800326c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80016bc:	bd08      	pop	{r3, pc}
 80016be:	bf00      	nop
 80016c0:	200002a0 	.word	0x200002a0

080016c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 80016c6:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DMA2_Stream3_IRQHandler+0xc>)
 80016c8:	f000 fae2 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016cc:	bd08      	pop	{r3, pc}
 80016ce:	bf00      	nop
 80016d0:	20000240 	.word	0x20000240

080016d4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80016d4:	2001      	movs	r0, #1
 80016d6:	4770      	bx	lr

080016d8 <_kill>:

int _kill(int pid, int sig)
{
 80016d8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016da:	f006 fd65 	bl	80081a8 <__errno>
 80016de:	2316      	movs	r3, #22
 80016e0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016e6:	bd08      	pop	{r3, pc}

080016e8 <_exit>:

void _exit (int status)
{
 80016e8:	b508      	push	{r3, lr}
  _kill(status, -1);
 80016ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016ee:	f7ff fff3 	bl	80016d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016f2:	e7fe      	b.n	80016f2 <_exit+0xa>

080016f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	460c      	mov	r4, r1
 80016f8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2500      	movs	r5, #0
 80016fc:	e006      	b.n	800170c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80016fe:	f3af 8000 	nop.w
 8001702:	4621      	mov	r1, r4
 8001704:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800170a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	42b5      	cmp	r5, r6
 800170e:	dbf6      	blt.n	80016fe <_read+0xa>
  }

  return len;
}
 8001710:	4630      	mov	r0, r6
 8001712:	bd70      	pop	{r4, r5, r6, pc}

08001714 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001718:	4770      	bx	lr

0800171a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800171a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001720:	2000      	movs	r0, #0
 8001722:	4770      	bx	lr

08001724 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001724:	2001      	movs	r0, #1
 8001726:	4770      	bx	lr

08001728 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001728:	2000      	movs	r0, #0
 800172a:	4770      	bx	lr

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b510      	push	{r4, lr}
 800172e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <_sbrk+0x38>)
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	480d      	ldr	r0, [pc, #52]	@ (800176c <_sbrk+0x40>)
 8001736:	6800      	ldr	r0, [r0, #0]
 8001738:	b140      	cbz	r0, 800174c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	480c      	ldr	r0, [pc, #48]	@ (800176c <_sbrk+0x40>)
 800173c:	6800      	ldr	r0, [r0, #0]
 800173e:	4403      	add	r3, r0
 8001740:	1a52      	subs	r2, r2, r1
 8001742:	4293      	cmp	r3, r2
 8001744:	d806      	bhi.n	8001754 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001746:	4a09      	ldr	r2, [pc, #36]	@ (800176c <_sbrk+0x40>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800174a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800174c:	4807      	ldr	r0, [pc, #28]	@ (800176c <_sbrk+0x40>)
 800174e:	4c08      	ldr	r4, [pc, #32]	@ (8001770 <_sbrk+0x44>)
 8001750:	6004      	str	r4, [r0, #0]
 8001752:	e7f2      	b.n	800173a <_sbrk+0xe>
    errno = ENOMEM;
 8001754:	f006 fd28 	bl	80081a8 <__errno>
 8001758:	230c      	movs	r3, #12
 800175a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001760:	e7f3      	b.n	800174a <_sbrk+0x1e>
 8001762:	bf00      	nop
 8001764:	20020000 	.word	0x20020000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000324 	.word	0x20000324
 8001770:	200009f8 	.word	0x200009f8

08001774 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4a03      	ldr	r2, [pc, #12]	@ (8001784 <SystemInit+0x10>)
 8001776:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800177a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800178c:	f7ff fff2 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001792:	490d      	ldr	r1, [pc, #52]	@ (80017c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a8:	4c0a      	ldr	r4, [pc, #40]	@ (80017d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f006 fcfd 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7ff fd07 	bl	80011cc <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017cc:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 80017d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017d4:	200009f4 	.word	0x200009f4

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>
	...

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b510      	push	{r4, lr}
 80017de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_InitTick+0x40>)
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <HAL_InitTick+0x44>)
 80017ee:	6810      	ldr	r0, [r2, #0]
 80017f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017f4:	f000 f8c0 	bl	8001978 <HAL_SYSTICK_Config>
 80017f8:	b968      	cbnz	r0, 8001816 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	2c0f      	cmp	r4, #15
 80017fc:	d901      	bls.n	8001802 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e00a      	b.n	8001818 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001802:	2200      	movs	r2, #0
 8001804:	4621      	mov	r1, r4
 8001806:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800180a:	f000 f8a1 	bl	8001950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_InitTick+0x48>)
 8001810:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
}
 8001818:	bd10      	pop	{r4, pc}
 800181a:	bf00      	nop
 800181c:	20000004 	.word	0x20000004
 8001820:	20000000 	.word	0x20000000
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_Init>:
{
 8001828:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_Init+0x30>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001832:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800183a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001842:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f871 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f7ff ffc6 	bl	80017dc <HAL_InitTick>
  HAL_MspInit();
 8001850:	f7ff fe36 	bl	80014c0 <HAL_MspInit>
}
 8001854:	2000      	movs	r0, #0
 8001856:	bd08      	pop	{r3, pc}
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800185c:	4a03      	ldr	r2, [pc, #12]	@ (800186c <HAL_IncTick+0x10>)
 800185e:	6811      	ldr	r1, [r2, #0]
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <HAL_IncTick+0x14>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	440b      	add	r3, r1
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000328 	.word	0x20000328
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001874:	4b01      	ldr	r3, [pc, #4]	@ (800187c <HAL_GetTick+0x8>)
 8001876:	6818      	ldr	r0, [r3, #0]
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000328 	.word	0x20000328

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff fff6 	bl	8001874 <HAL_GetTick>
 8001888:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800188e:	d002      	beq.n	8001896 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <HAL_Delay+0x24>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001896:	f7ff ffed 	bl	8001874 <HAL_GetTick>
 800189a:	1b40      	subs	r0, r0, r5
 800189c:	42a0      	cmp	r0, r4
 800189e:	d3fa      	bcc.n	8001896 <HAL_Delay+0x16>
  {
  }
}
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	bf00      	nop
 80018a4:	20000004 	.word	0x20000004

080018a8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80018a8:	2800      	cmp	r0, #0
 80018aa:	db07      	blt.n	80018bc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ac:	f000 021f 	and.w	r2, r0, #31
 80018b0:	0940      	lsrs	r0, r0, #5
 80018b2:	2301      	movs	r3, #1
 80018b4:	4093      	lsls	r3, r2
 80018b6:	4a02      	ldr	r2, [pc, #8]	@ (80018c0 <__NVIC_EnableIRQ+0x18>)
 80018b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	db08      	blt.n	80018da <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	0109      	lsls	r1, r1, #4
 80018ca:	b2c9      	uxtb	r1, r1
 80018cc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80018d0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80018d4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80018d8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	f000 000f 	and.w	r0, r0, #15
 80018de:	0109      	lsls	r1, r1, #4
 80018e0:	b2c9      	uxtb	r1, r1
 80018e2:	4b01      	ldr	r3, [pc, #4]	@ (80018e8 <__NVIC_SetPriority+0x24>)
 80018e4:	5419      	strb	r1, [r3, r0]
  }
}
 80018e6:	4770      	bx	lr
 80018e8:	e000ed14 	.word	0xe000ed14

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ee:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f2:	f1c0 0c07 	rsb	ip, r0, #7
 80018f6:	f1bc 0f04 	cmp.w	ip, #4
 80018fa:	bf28      	it	cs
 80018fc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001900:	1d03      	adds	r3, r0, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d90f      	bls.n	8001926 <NVIC_EncodePriority+0x3a>
 8001906:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800190c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001910:	ea21 0100 	bic.w	r1, r1, r0
 8001914:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001916:	fa0e fe03 	lsl.w	lr, lr, r3
 800191a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800191e:	ea41 0002 	orr.w	r0, r1, r2
 8001922:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	2300      	movs	r3, #0
 8001928:	e7ee      	b.n	8001908 <NVIC_EncodePriority+0x1c>
	...

0800192c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800192e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001930:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	0200      	lsls	r0, r0, #8
 800193a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001948:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001950:	b510      	push	{r4, lr}
 8001952:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_NVIC_SetPriority+0x1c>)
 8001956:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001958:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800195c:	f7ff ffc6 	bl	80018ec <NVIC_EncodePriority>
 8001960:	4601      	mov	r1, r0
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff ffae 	bl	80018c4 <__NVIC_SetPriority>
}
 8001968:	bd10      	pop	{r4, pc}
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001972:	f7ff ff99 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001976:	bd08      	pop	{r3, pc}

08001978 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	3801      	subs	r0, #1
 800197a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800197e:	d20b      	bcs.n	8001998 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001980:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001984:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <HAL_SYSTICK_Config+0x24>)
 8001988:	21f0      	movs	r1, #240	@ 0xf0
 800198a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198e:	2000      	movs	r0, #0
 8001990:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	2207      	movs	r2, #7
 8001994:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001996:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001998:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019a2:	6805      	ldr	r5, [r0, #0]
 80019a4:	682c      	ldr	r4, [r5, #0]
 80019a6:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80019aa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ac:	6804      	ldr	r4, [r0, #0]
 80019ae:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b0:	6883      	ldr	r3, [r0, #8]
 80019b2:	2b40      	cmp	r3, #64	@ 0x40
 80019b4:	d005      	beq.n	80019c2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80019ba:	6803      	ldr	r3, [r0, #0]
 80019bc:	60da      	str	r2, [r3, #12]
  }
}
 80019be:	bc30      	pop	{r4, r5}
 80019c0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80019c2:	6803      	ldr	r3, [r0, #0]
 80019c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80019c6:	6803      	ldr	r3, [r0, #0]
 80019c8:	60d9      	str	r1, [r3, #12]
 80019ca:	e7f8      	b.n	80019be <DMA_SetConfig+0x1e>

080019cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019cc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019ce:	6803      	ldr	r3, [r0, #0]
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	3910      	subs	r1, #16
 80019d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <DMA_CalcBaseAndBitshift+0x3c>)
 80019d6:	fba2 4201 	umull	r4, r2, r2, r1
 80019da:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019dc:	4c0b      	ldr	r4, [pc, #44]	@ (8001a0c <DMA_CalcBaseAndBitshift+0x40>)
 80019de:	5ca2      	ldrb	r2, [r4, r2]
 80019e0:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019e2:	295f      	cmp	r1, #95	@ 0x5f
 80019e4:	d909      	bls.n	80019fa <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	3304      	adds	r3, #4
 80019f0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80019f2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80019f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019f8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	6583      	str	r3, [r0, #88]	@ 0x58
 8001a04:	e7f5      	b.n	80019f2 <DMA_CalcBaseAndBitshift+0x26>
 8001a06:	bf00      	nop
 8001a08:	aaaaaaab 	.word	0xaaaaaaab
 8001a0c:	0800a3e0 	.word	0x0800a3e0

08001a10 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a10:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a12:	6982      	ldr	r2, [r0, #24]
 8001a14:	b992      	cbnz	r2, 8001a3c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d00a      	beq.n	8001a30 <DMA_CheckFifoParam+0x20>
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d002      	beq.n	8001a24 <DMA_CheckFifoParam+0x14>
 8001a1e:	b10b      	cbz	r3, 8001a24 <DMA_CheckFifoParam+0x14>
 8001a20:	2000      	movs	r0, #0
 8001a22:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a24:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a26:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a2a:	d128      	bne.n	8001a7e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a30:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a36:	d024      	beq.n	8001a82 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a3c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001a40:	d009      	beq.n	8001a56 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d925      	bls.n	8001a92 <DMA_CheckFifoParam+0x82>
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d125      	bne.n	8001a96 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a4c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a50:	d123      	bne.n	8001a9a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2000      	movs	r0, #0
 8001a54:	4770      	bx	lr
    switch (tmp)
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d803      	bhi.n	8001a62 <DMA_CheckFifoParam+0x52>
 8001a5a:	e8df f003 	tbb	[pc, r3]
 8001a5e:	0414      	.short	0x0414
 8001a60:	0a14      	.short	0x0a14
 8001a62:	2000      	movs	r0, #0
 8001a64:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a68:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a6c:	d10d      	bne.n	8001a8a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2000      	movs	r0, #0
 8001a70:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a72:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a78:	d009      	beq.n	8001a8e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	4770      	bx	lr
        status = HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
 8001a84:	4770      	bx	lr
      status = HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
 8001a88:	4770      	bx	lr
        status = HAL_ERROR;
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	4770      	bx	lr
      status = HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
 8001a94:	4770      	bx	lr
    switch (tmp)
 8001a96:	2000      	movs	r0, #0
 8001a98:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_DMA_Init>:
{
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff fee6 	bl	8001874 <HAL_GetTick>
  if(hdma == NULL)
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_DMA_Init+0xc4>
 8001aac:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	6813      	ldr	r3, [r2, #0]
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f012 0f01 	tst.w	r2, #1
 8001acc:	d00a      	beq.n	8001ae4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ace:	f7ff fed1 	bl	8001874 <HAL_GetTick>
 8001ad2:	1b43      	subs	r3, r0, r5
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d9f5      	bls.n	8001ac4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001ae4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae6:	4920      	ldr	r1, [pc, #128]	@ (8001b68 <HAL_DMA_Init+0xc8>)
 8001ae8:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aea:	6862      	ldr	r2, [r4, #4]
 8001aec:	68a0      	ldr	r0, [r4, #8]
 8001aee:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	6920      	ldr	r0, [r4, #16]
 8001af6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afc:	69a0      	ldr	r0, [r4, #24]
 8001afe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b04:	6a20      	ldr	r0, [r4, #32]
 8001b06:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b08:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001b0c:	2904      	cmp	r1, #4
 8001b0e:	d01e      	beq.n	8001b4e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001b10:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001b12:	6826      	ldr	r6, [r4, #0]
 8001b14:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b16:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001b1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b1c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d107      	bne.n	8001b32 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001b22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b24:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001b28:	b11b      	cbz	r3, 8001b32 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff ff70 	bl	8001a10 <DMA_CheckFifoParam>
 8001b30:	b990      	cbnz	r0, 8001b58 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001b32:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff ff49 	bl	80019cc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b3c:	233f      	movs	r3, #63	@ 0x3f
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	2000      	movs	r0, #0
 8001b44:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001b4c:	e7c9      	b.n	8001ae2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001b50:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001b52:	4301      	orrs	r1, r0
 8001b54:	430a      	orrs	r2, r1
 8001b56:	e7db      	b.n	8001b10 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b58:	2340      	movs	r3, #64	@ 0x40
 8001b5a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001b62:	e7be      	b.n	8001ae2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001b64:	2001      	movs	r0, #1
 8001b66:	e7bc      	b.n	8001ae2 <HAL_DMA_Init+0x42>
 8001b68:	f010803f 	.word	0xf010803f

08001b6c <HAL_DMA_Start_IT>:
{
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b70:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001b72:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001b76:	2801      	cmp	r0, #1
 8001b78:	d02b      	beq.n	8001bd2 <HAL_DMA_Start_IT+0x66>
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b80:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001b84:	b2c0      	uxtb	r0, r0
 8001b86:	2801      	cmp	r0, #1
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001b90:	2002      	movs	r0, #2
}
 8001b92:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	2002      	movs	r0, #2
 8001b96:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff fefe 	bl	80019a0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ba6:	233f      	movs	r3, #63	@ 0x3f
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bac:	6822      	ldr	r2, [r4, #0]
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	f043 0316 	orr.w	r3, r3, #22
 8001bb4:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bb8:	b123      	cbz	r3, 8001bc4 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e7df      	b.n	8001b92 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	e7dd      	b.n	8001b92 <HAL_DMA_Start_IT+0x26>

08001bd6 <HAL_DMA_Abort>:
{
 8001bd6:	b570      	push	{r4, r5, r6, lr}
 8001bd8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bda:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fe4a 	bl	8001874 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d006      	beq.n	8001bf8 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001bf4:	2001      	movs	r0, #1
}
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
 8001bf8:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	f023 0316 	bic.w	r3, r3, #22
 8001c02:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	6953      	ldr	r3, [r2, #20]
 8001c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c0c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c10:	b1e3      	cbz	r3, 8001c4c <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	f023 0308 	bic.w	r3, r3, #8
 8001c1a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c1c:	6822      	ldr	r2, [r4, #0]
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f013 0f01 	tst.w	r3, #1
 8001c2e:	d011      	beq.n	8001c54 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c30:	f7ff fe20 	bl	8001874 <HAL_GetTick>
 8001c34:	1b43      	subs	r3, r0, r5
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d9f5      	bls.n	8001c26 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001c44:	2300      	movs	r3, #0
 8001c46:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001c4a:	e7d4      	b.n	8001bf6 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1df      	bne.n	8001c12 <HAL_DMA_Abort+0x3c>
 8001c52:	e7e3      	b.n	8001c1c <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c54:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c56:	233f      	movs	r3, #63	@ 0x3f
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001c68:	e7c5      	b.n	8001bf6 <HAL_DMA_Abort+0x20>

08001c6a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d003      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
 8001c7a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c82:	6802      	ldr	r2, [r0, #0]
 8001c84:	6813      	ldr	r3, [r2, #0]
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_DMA_IRQHandler>:
{
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b083      	sub	sp, #12
 8001c94:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c9a:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_DMA_IRQHandler+0x1d4>)
 8001c9c:	681d      	ldr	r5, [r3, #0]
 8001c9e:	4b72      	ldr	r3, [pc, #456]	@ (8001e68 <HAL_DMA_IRQHandler+0x1d8>)
 8001ca0:	fba3 3505 	umull	r3, r5, r3, r5
 8001ca4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001ca8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001caa:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001cac:	2308      	movs	r3, #8
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	4233      	tst	r3, r6
 8001cb2:	d010      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cb4:	6803      	ldr	r3, [r0, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f012 0f04 	tst.w	r2, #4
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f022 0204 	bic.w	r2, r2, #4
 8001cc4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001cc8:	2308      	movs	r3, #8
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001cd8:	2301      	movs	r3, #1
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	4233      	tst	r3, r6
 8001cde:	d009      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	6952      	ldr	r2, [r2, #20]
 8001ce4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cea:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	4233      	tst	r3, r6
 8001cfc:	d009      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	f012 0f02 	tst.w	r2, #2
 8001d06:	d004      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d08:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d14:	2310      	movs	r3, #16
 8001d16:	4093      	lsls	r3, r2
 8001d18:	4233      	tst	r3, r6
 8001d1a:	d024      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f012 0f08 	tst.w	r2, #8
 8001d24:	d01f      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d26:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001d30:	d00d      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001d38:	d104      	bne.n	8001d44 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d3c:	b19b      	cbz	r3, 8001d66 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001d3e:	4620      	mov	r0, r4
 8001d40:	4798      	blx	r3
 8001d42:	e010      	b.n	8001d66 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d44:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001d46:	b173      	cbz	r3, 8001d66 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4798      	blx	r3
 8001d4c:	e00b      	b.n	8001d66 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001d54:	d103      	bne.n	8001d5e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f022 0208 	bic.w	r2, r2, #8
 8001d5c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001d5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d60:	b10b      	cbz	r3, 8001d66 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001d62:	4620      	mov	r0, r4
 8001d64:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d66:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d68:	2320      	movs	r3, #32
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	4233      	tst	r3, r6
 8001d6e:	d055      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f012 0f10 	tst.w	r2, #16
 8001d78:	d050      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d00e      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001d8e:	d033      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001d96:	d12a      	bne.n	8001dee <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001d98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03e      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4798      	blx	r3
 8001da2:	e03b      	b.n	8001e1c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	f023 0316 	bic.w	r3, r3, #22
 8001dac:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	6953      	ldr	r3, [r2, #20]
 8001db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001db6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dba:	b1a3      	cbz	r3, 8001de6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbc:	6822      	ldr	r2, [r4, #0]
 8001dbe:	6813      	ldr	r3, [r2, #0]
 8001dc0:	f023 0308 	bic.w	r3, r3, #8
 8001dc4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001dc8:	233f      	movs	r3, #63	@ 0x3f
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001dda:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d03f      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001de0:	4620      	mov	r0, r4
 8001de2:	4798      	blx	r3
        return;
 8001de4:	e03c      	b.n	8001e60 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e7      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x12c>
 8001dec:	e7eb      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001dee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001df0:	b1a3      	cbz	r3, 8001e1c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001df2:	4620      	mov	r0, r4
 8001df4:	4798      	blx	r3
 8001df6:	e011      	b.n	8001e1c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001dfe:	d109      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001e14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001e16:	b10b      	cbz	r3, 8001e1c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e1e:	b1fb      	cbz	r3, 8001e60 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e22:	f013 0f01 	tst.w	r3, #1
 8001e26:	d017      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	6813      	ldr	r3, [r2, #0]
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001e38:	9b01      	ldr	r3, [sp, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	42ab      	cmp	r3, r5
 8001e40:	d804      	bhi.n	8001e4c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f013 0f01 	tst.w	r3, #1
 8001e4a:	d1f5      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001e52:	2300      	movs	r3, #0
 8001e54:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001e58:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001e5a:	b10b      	cbz	r3, 8001e60 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4798      	blx	r3
}
 8001e60:	b003      	add	sp, #12
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e64:	20000000 	.word	0x20000000
 8001e68:	1b4e81b5 	.word	0x1b4e81b5

08001e6c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001e6c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f200 80e9 	bhi.w	800204a <HAL_GPIO_Init+0x1da>
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	e065      	b.n	8001f4a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e84:	2403      	movs	r4, #3
 8001e86:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e8a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8e:	68cc      	ldr	r4, [r1, #12]
 8001e90:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e94:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001e96:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9e:	684a      	ldr	r2, [r1, #4]
 8001ea0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001ea8:	6042      	str	r2, [r0, #4]
 8001eaa:	e05c      	b.n	8001f66 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eac:	08dc      	lsrs	r4, r3, #3
 8001eae:	3408      	adds	r4, #8
 8001eb0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb4:	f003 0507 	and.w	r5, r3, #7
 8001eb8:	00ad      	lsls	r5, r5, #2
 8001eba:	f04f 0e0f 	mov.w	lr, #15
 8001ebe:	fa0e fe05 	lsl.w	lr, lr, r5
 8001ec2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec6:	690a      	ldr	r2, [r1, #16]
 8001ec8:	40aa      	lsls	r2, r5
 8001eca:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001ece:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001ed2:	e05c      	b.n	8001f8e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 8001ed8:	2200      	movs	r2, #0
 8001eda:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ede:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	3402      	adds	r4, #2
 8001ee2:	4d5a      	ldr	r5, [pc, #360]	@ (800204c <HAL_GPIO_Init+0x1dc>)
 8001ee4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee8:	4a59      	ldr	r2, [pc, #356]	@ (8002050 <HAL_GPIO_Init+0x1e0>)
 8001eea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	ea6f 020c 	mvn.w	r2, ip
 8001ef0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef4:	684e      	ldr	r6, [r1, #4]
 8001ef6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001efa:	d001      	beq.n	8001f00 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001efc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001f00:	4c53      	ldr	r4, [pc, #332]	@ (8002050 <HAL_GPIO_Init+0x1e0>)
 8001f02:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001f04:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0a:	684e      	ldr	r6, [r1, #4]
 8001f0c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001f10:	d001      	beq.n	8001f16 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001f12:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001f16:	4c4e      	ldr	r4, [pc, #312]	@ (8002050 <HAL_GPIO_Init+0x1e0>)
 8001f18:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001f1a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f20:	684e      	ldr	r6, [r1, #4]
 8001f22:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001f26:	d001      	beq.n	8001f2c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001f28:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001f2c:	4c48      	ldr	r4, [pc, #288]	@ (8002050 <HAL_GPIO_Init+0x1e0>)
 8001f2e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f34:	684d      	ldr	r5, [r1, #4]
 8001f36:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001f3a:	d001      	beq.n	8001f40 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001f3c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001f40:	4c43      	ldr	r4, [pc, #268]	@ (8002050 <HAL_GPIO_Init+0x1e0>)
 8001f42:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f44:	3301      	adds	r3, #1
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	d87d      	bhi.n	8002046 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	680c      	ldr	r4, [r1, #0]
 8001f50:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001f54:	ea32 0404 	bics.w	r4, r2, r4
 8001f58:	d1f4      	bne.n	8001f44 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	684c      	ldr	r4, [r1, #4]
 8001f5c:	f004 0403 	and.w	r4, r4, #3
 8001f60:	3c01      	subs	r4, #1
 8001f62:	2c01      	cmp	r4, #1
 8001f64:	d98b      	bls.n	8001e7e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f66:	684a      	ldr	r2, [r1, #4]
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	2a03      	cmp	r2, #3
 8001f6e:	d009      	beq.n	8001f84 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001f70:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	005d      	lsls	r5, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	40aa      	lsls	r2, r5
 8001f78:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	688a      	ldr	r2, [r1, #8]
 8001f7e:	40aa      	lsls	r2, r5
 8001f80:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001f82:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f84:	684a      	ldr	r2, [r1, #4]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	2a02      	cmp	r2, #2
 8001f8c:	d08e      	beq.n	8001eac <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001f8e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f90:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f9a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9e:	684a      	ldr	r2, [r1, #4]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fa8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001faa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fac:	684a      	ldr	r2, [r1, #4]
 8001fae:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001fb2:	d0c7      	beq.n	8001f44 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	4a26      	ldr	r2, [pc, #152]	@ (8002054 <HAL_GPIO_Init+0x1e4>)
 8001fba:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001fbc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001fc0:	6454      	str	r4, [r2, #68]	@ 0x44
 8001fc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fc4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001fcc:	089c      	lsrs	r4, r3, #2
 8001fce:	1ca5      	adds	r5, r4, #2
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_GPIO_Init+0x1dc>)
 8001fd2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd6:	f003 0e03 	and.w	lr, r3, #3
 8001fda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fe4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_GPIO_Init+0x1e8>)
 8001fea:	4290      	cmp	r0, r2
 8001fec:	f43f af74 	beq.w	8001ed8 <HAL_GPIO_Init+0x68>
 8001ff0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ff4:	4290      	cmp	r0, r2
 8001ff6:	d01a      	beq.n	800202e <HAL_GPIO_Init+0x1be>
 8001ff8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ffc:	4290      	cmp	r0, r2
 8001ffe:	d018      	beq.n	8002032 <HAL_GPIO_Init+0x1c2>
 8002000:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002004:	4290      	cmp	r0, r2
 8002006:	d016      	beq.n	8002036 <HAL_GPIO_Init+0x1c6>
 8002008:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800200c:	4290      	cmp	r0, r2
 800200e:	d014      	beq.n	800203a <HAL_GPIO_Init+0x1ca>
 8002010:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002014:	4290      	cmp	r0, r2
 8002016:	d012      	beq.n	800203e <HAL_GPIO_Init+0x1ce>
 8002018:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800201c:	4290      	cmp	r0, r2
 800201e:	d010      	beq.n	8002042 <HAL_GPIO_Init+0x1d2>
 8002020:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002024:	4290      	cmp	r0, r2
 8002026:	f43f af55 	beq.w	8001ed4 <HAL_GPIO_Init+0x64>
 800202a:	2208      	movs	r2, #8
 800202c:	e755      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 800202e:	2201      	movs	r2, #1
 8002030:	e753      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 8002032:	2202      	movs	r2, #2
 8002034:	e751      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 8002036:	2203      	movs	r2, #3
 8002038:	e74f      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 800203a:	2204      	movs	r2, #4
 800203c:	e74d      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 800203e:	2205      	movs	r2, #5
 8002040:	e74b      	b.n	8001eda <HAL_GPIO_Init+0x6a>
 8002042:	2206      	movs	r2, #6
 8002044:	e749      	b.n	8001eda <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002046:	b002      	add	sp, #8
 8002048:	bd70      	pop	{r4, r5, r6, pc}
 800204a:	4770      	bx	lr
 800204c:	40013800 	.word	0x40013800
 8002050:	40013c00 	.word	0x40013c00
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800205c:	6903      	ldr	r3, [r0, #16]
 800205e:	4219      	tst	r1, r3
 8002060:	d001      	beq.n	8002066 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002062:	2001      	movs	r0, #1
 8002064:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002066:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800206a:	b10a      	cbz	r2, 8002070 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206c:	6181      	str	r1, [r0, #24]
 800206e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002070:	0409      	lsls	r1, r1, #16
 8002072:	6181      	str	r1, [r0, #24]
  }
}
 8002074:	4770      	bx	lr

08002076 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002076:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002078:	ea01 0203 	and.w	r2, r1, r3
 800207c:	ea21 0103 	bic.w	r1, r1, r3
 8002080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002084:	6181      	str	r1, [r0, #24]
}
 8002086:	4770      	bx	lr

08002088 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	2800      	cmp	r0, #0
 800208a:	f000 81e0 	beq.w	800244e <HAL_RCC_OscConfig+0x3c6>
{
 800208e:	b570      	push	{r4, r5, r6, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002094:	6803      	ldr	r3, [r0, #0]
 8002096:	f013 0f01 	tst.w	r3, #1
 800209a:	d03b      	beq.n	8002114 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800209c:	4b9f      	ldr	r3, [pc, #636]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d02c      	beq.n	8002102 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a8:	4b9c      	ldr	r3, [pc, #624]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d021      	beq.n	80020f8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	6863      	ldr	r3, [r4, #4]
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ba:	d04f      	beq.n	800215c <HAL_RCC_OscConfig+0xd4>
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c0:	d052      	beq.n	8002168 <HAL_RCC_OscConfig+0xe0>
 80020c2:	4b96      	ldr	r3, [pc, #600]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d050      	beq.n	800217c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff fbcb 	bl	8001874 <HAL_GetTick>
 80020de:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e0:	4b8e      	ldr	r3, [pc, #568]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020e8:	d114      	bne.n	8002114 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ea:	f7ff fbc3 	bl	8001874 <HAL_GetTick>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	2864      	cmp	r0, #100	@ 0x64
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e1b1      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f8:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002100:	d0d8      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002102:	4b86      	ldr	r3, [pc, #536]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800210a:	d003      	beq.n	8002114 <HAL_RCC_OscConfig+0x8c>
 800210c:	6863      	ldr	r3, [r4, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 819f 	beq.w	8002452 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	f013 0f02 	tst.w	r3, #2
 800211a:	d054      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800211c:	4b7f      	ldr	r3, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f013 0f0c 	tst.w	r3, #12
 8002124:	d03e      	beq.n	80021a4 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002126:	4b7d      	ldr	r3, [pc, #500]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800212e:	2b08      	cmp	r3, #8
 8002130:	d033      	beq.n	800219a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002132:	68e3      	ldr	r3, [r4, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d068      	beq.n	800220a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002138:	4b79      	ldr	r3, [pc, #484]	@ (8002320 <HAL_RCC_OscConfig+0x298>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7ff fb99 	bl	8001874 <HAL_GetTick>
 8002142:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b75      	ldr	r3, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f013 0f02 	tst.w	r3, #2
 800214c:	d154      	bne.n	80021f8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff fb91 	bl	8001874 <HAL_GetTick>
 8002152:	1b40      	subs	r0, r0, r5
 8002154:	2802      	cmp	r0, #2
 8002156:	d9f5      	bls.n	8002144 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002158:	2003      	movs	r0, #3
 800215a:	e17f      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	4a6f      	ldr	r2, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e7b5      	b.n	80020d4 <HAL_RCC_OscConfig+0x4c>
 8002168:	4b6c      	ldr	r3, [pc, #432]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e7ab      	b.n	80020d4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800217c:	f7ff fb7a 	bl	8001874 <HAL_GetTick>
 8002180:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b66      	ldr	r3, [pc, #408]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800218a:	d0c3      	beq.n	8002114 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fb72 	bl	8001874 <HAL_GetTick>
 8002190:	1b40      	subs	r0, r0, r5
 8002192:	2864      	cmp	r0, #100	@ 0x64
 8002194:	d9f5      	bls.n	8002182 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002196:	2003      	movs	r0, #3
 8002198:	e160      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b60      	ldr	r3, [pc, #384]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80021a2:	d1c6      	bne.n	8002132 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a4:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f013 0f02 	tst.w	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_OscConfig+0x12e>
 80021ae:	68e3      	ldr	r3, [r4, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f040 8150 	bne.w	8002456 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4a59      	ldr	r2, [pc, #356]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021be:	6921      	ldr	r1, [r4, #16]
 80021c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021c4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	f013 0f08 	tst.w	r3, #8
 80021cc:	d042      	beq.n	8002254 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ce:	6963      	ldr	r3, [r4, #20]
 80021d0:	b36b      	cbz	r3, 800222e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d2:	4b53      	ldr	r3, [pc, #332]	@ (8002320 <HAL_RCC_OscConfig+0x298>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fb4b 	bl	8001874 <HAL_GetTick>
 80021de:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	4b4e      	ldr	r3, [pc, #312]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80021e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e4:	f013 0f02 	tst.w	r3, #2
 80021e8:	d134      	bne.n	8002254 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fb43 	bl	8001874 <HAL_GetTick>
 80021ee:	1b40      	subs	r0, r0, r5
 80021f0:	2802      	cmp	r0, #2
 80021f2:	d9f5      	bls.n	80021e0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80021f4:	2003      	movs	r0, #3
 80021f6:	e131      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4a48      	ldr	r2, [pc, #288]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002200:	6921      	ldr	r1, [r4, #16]
 8002202:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e7dd      	b.n	80021c6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800220a:	4b45      	ldr	r3, [pc, #276]	@ (8002320 <HAL_RCC_OscConfig+0x298>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002210:	f7ff fb30 	bl	8001874 <HAL_GetTick>
 8002214:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f013 0f02 	tst.w	r3, #2
 800221e:	d0d2      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fb28 	bl	8001874 <HAL_GetTick>
 8002224:	1b40      	subs	r0, r0, r5
 8002226:	2802      	cmp	r0, #2
 8002228:	d9f5      	bls.n	8002216 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800222a:	2003      	movs	r0, #3
 800222c:	e116      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222e:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <HAL_RCC_OscConfig+0x298>)
 8002230:	2200      	movs	r2, #0
 8002232:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff fb1d 	bl	8001874 <HAL_GetTick>
 800223a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800223e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002240:	f013 0f02 	tst.w	r3, #2
 8002244:	d006      	beq.n	8002254 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002246:	f7ff fb15 	bl	8001874 <HAL_GetTick>
 800224a:	1b40      	subs	r0, r0, r5
 800224c:	2802      	cmp	r0, #2
 800224e:	d9f5      	bls.n	800223c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002250:	2003      	movs	r0, #3
 8002252:	e103      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	f013 0f04 	tst.w	r3, #4
 800225a:	d077      	beq.n	800234c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225c:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002264:	d133      	bne.n	80022ce <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 800226c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800226e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800227e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <HAL_RCC_OscConfig+0x29c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002288:	d023      	beq.n	80022d2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228a:	68a3      	ldr	r3, [r4, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d034      	beq.n	80022fa <HAL_RCC_OscConfig+0x272>
 8002290:	2b05      	cmp	r3, #5
 8002292:	d038      	beq.n	8002306 <HAL_RCC_OscConfig+0x27e>
 8002294:	4b21      	ldr	r3, [pc, #132]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002296:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	671a      	str	r2, [r3, #112]	@ 0x70
 800229e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022a0:	f022 0204 	bic.w	r2, r2, #4
 80022a4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a6:	68a3      	ldr	r3, [r4, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03d      	beq.n	8002328 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff fae2 	bl	8001874 <HAL_GetTick>
 80022b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b6:	f013 0f02 	tst.w	r3, #2
 80022ba:	d146      	bne.n	800234a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7ff fada 	bl	8001874 <HAL_GetTick>
 80022c0:	1b80      	subs	r0, r0, r6
 80022c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d9f3      	bls.n	80022b2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e0c6      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2500      	movs	r5, #0
 80022d0:	e7d6      	b.n	8002280 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <HAL_RCC_OscConfig+0x29c>)
 80022d4:	6813      	ldr	r3, [r2, #0]
 80022d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022dc:	f7ff faca 	bl	8001874 <HAL_GetTick>
 80022e0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_RCC_OscConfig+0x29c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80022ea:	d1ce      	bne.n	800228a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7ff fac2 	bl	8001874 <HAL_GetTick>
 80022f0:	1b80      	subs	r0, r0, r6
 80022f2:	2802      	cmp	r0, #2
 80022f4:	d9f5      	bls.n	80022e2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80022f6:	2003      	movs	r0, #3
 80022f8:	e0b0      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 80022fc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	@ 0x70
 8002304:	e7cf      	b.n	80022a6 <HAL_RCC_OscConfig+0x21e>
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_OscConfig+0x294>)
 8002308:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800230a:	f042 0204 	orr.w	r2, r2, #4
 800230e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002310:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	671a      	str	r2, [r3, #112]	@ 0x70
 8002318:	e7c5      	b.n	80022a6 <HAL_RCC_OscConfig+0x21e>
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	42470000 	.word	0x42470000
 8002324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7ff faa4 	bl	8001874 <HAL_GetTick>
 800232c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b52      	ldr	r3, [pc, #328]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	f013 0f02 	tst.w	r3, #2
 8002336:	d008      	beq.n	800234a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7ff fa9c 	bl	8001874 <HAL_GetTick>
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002342:	4298      	cmp	r0, r3
 8002344:	d9f3      	bls.n	800232e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e088      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800234a:	b9ed      	cbnz	r5, 8002388 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	69a3      	ldr	r3, [r4, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8083 	beq.w	800245a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002354:	4a48      	ldr	r2, [pc, #288]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 8002356:	6892      	ldr	r2, [r2, #8]
 8002358:	f002 020c 	and.w	r2, r2, #12
 800235c:	2a08      	cmp	r2, #8
 800235e:	d051      	beq.n	8002404 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	2b02      	cmp	r3, #2
 8002362:	d017      	beq.n	8002394 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b45      	ldr	r3, [pc, #276]	@ (800247c <HAL_RCC_OscConfig+0x3f4>)
 8002366:	2200      	movs	r2, #0
 8002368:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff fa83 	bl	8001874 <HAL_GetTick>
 800236e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002370:	4b41      	ldr	r3, [pc, #260]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002378:	d042      	beq.n	8002400 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff fa7b 	bl	8001874 <HAL_GetTick>
 800237e:	1b00      	subs	r0, r0, r4
 8002380:	2802      	cmp	r0, #2
 8002382:	d9f5      	bls.n	8002370 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002384:	2003      	movs	r0, #3
 8002386:	e069      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4a3b      	ldr	r2, [pc, #236]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 800238a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	e7db      	b.n	800234c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x3f4>)
 8002396:	2200      	movs	r2, #0
 8002398:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800239a:	f7ff fa6b 	bl	8001874 <HAL_GetTick>
 800239e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a0:	4b35      	ldr	r3, [pc, #212]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023a8:	d006      	beq.n	80023b8 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff fa63 	bl	8001874 <HAL_GetTick>
 80023ae:	1b40      	subs	r0, r0, r5
 80023b0:	2802      	cmp	r0, #2
 80023b2:	d9f5      	bls.n	80023a0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80023b4:	2003      	movs	r0, #3
 80023b6:	e051      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b8:	69e3      	ldr	r3, [r4, #28]
 80023ba:	6a22      	ldr	r2, [r4, #32]
 80023bc:	4313      	orrs	r3, r2
 80023be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80023c0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80023c6:	0852      	lsrs	r2, r2, #1
 80023c8:	3a01      	subs	r2, #1
 80023ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80023d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023d4:	4a28      	ldr	r2, [pc, #160]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 80023d6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80023d8:	4b28      	ldr	r3, [pc, #160]	@ (800247c <HAL_RCC_OscConfig+0x3f4>)
 80023da:	2201      	movs	r2, #1
 80023dc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80023de:	f7ff fa49 	bl	8001874 <HAL_GetTick>
 80023e2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff fa41 	bl	8001874 <HAL_GetTick>
 80023f2:	1b00      	subs	r0, r0, r4
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d9f5      	bls.n	80023e4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80023f8:	2003      	movs	r0, #3
 80023fa:	e02f      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80023fc:	2000      	movs	r0, #0
 80023fe:	e02d      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
 8002400:	2000      	movs	r0, #0
 8002402:	e02b      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002404:	2b01      	cmp	r3, #1
 8002406:	d02b      	beq.n	8002460 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x3f0>)
 800240a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002410:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002412:	4291      	cmp	r1, r2
 8002414:	d126      	bne.n	8002464 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002416:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800241a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	428a      	cmp	r2, r1
 800241e:	d123      	bne.n	8002468 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002420:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002422:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002426:	401a      	ands	r2, r3
 8002428:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800242c:	d11e      	bne.n	800246c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002432:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002434:	0852      	lsrs	r2, r2, #1
 8002436:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002438:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800243c:	d118      	bne.n	8002470 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800243e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002442:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002448:	d114      	bne.n	8002474 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800244a:	2000      	movs	r0, #0
 800244c:	e006      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800244e:	2001      	movs	r0, #1
}
 8002450:	4770      	bx	lr
        return HAL_ERROR;
 8002452:	2001      	movs	r0, #1
 8002454:	e002      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002456:	2001      	movs	r0, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800245a:	2000      	movs	r0, #0
}
 800245c:	b002      	add	sp, #8
 800245e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
 8002462:	e7fb      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
 8002466:	e7f9      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
 8002468:	2001      	movs	r0, #1
 800246a:	e7f7      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
 800246c:	2001      	movs	r0, #1
 800246e:	e7f5      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
 8002470:	2001      	movs	r0, #1
 8002472:	e7f3      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
 8002474:	2001      	movs	r0, #1
 8002476:	e7f1      	b.n	800245c <HAL_RCC_OscConfig+0x3d4>
 8002478:	40023800 	.word	0x40023800
 800247c:	42470000 	.word	0x42470000

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002482:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d001      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248e:	482f      	ldr	r0, [pc, #188]	@ (800254c <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002490:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002492:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024a0:	d02c      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024a4:	6858      	ldr	r0, [r3, #4]
 80024a6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80024aa:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80024ae:	ebbc 0c00 	subs.w	ip, ip, r0
 80024b2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024b6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024ba:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80024be:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80024c2:	ebb1 010c 	subs.w	r1, r1, ip
 80024c6:	eb63 030e 	sbc.w	r3, r3, lr
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d0:	00c9      	lsls	r1, r1, #3
 80024d2:	eb11 0c00 	adds.w	ip, r1, r0
 80024d6:	f143 0300 	adc.w	r3, r3, #0
 80024da:	0299      	lsls	r1, r3, #10
 80024dc:	2300      	movs	r3, #0
 80024de:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80024e2:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80024e6:	f7fe fb5f 	bl	8000ba8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024ea:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024f2:	3301      	adds	r3, #1
 80024f4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80024f6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024fa:	e7c9      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024fe:	6858      	ldr	r0, [r3, #4]
 8002500:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002504:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002508:	ebbc 0c00 	subs.w	ip, ip, r0
 800250c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002510:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002514:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002518:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800251c:	ebb1 010c 	subs.w	r1, r1, ip
 8002520:	eb63 030e 	sbc.w	r3, r3, lr
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252a:	00c9      	lsls	r1, r1, #3
 800252c:	eb11 0c00 	adds.w	ip, r1, r0
 8002530:	f143 0300 	adc.w	r3, r3, #0
 8002534:	0299      	lsls	r1, r3, #10
 8002536:	2300      	movs	r3, #0
 8002538:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800253c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002540:	f7fe fb32 	bl	8000ba8 <__aeabi_uldivmod>
 8002544:	e7d1      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x6a>
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	00f42400 	.word	0x00f42400

08002550 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002550:	2800      	cmp	r0, #0
 8002552:	f000 809b 	beq.w	800268c <HAL_RCC_ClockConfig+0x13c>
{
 8002556:	b570      	push	{r4, r5, r6, lr}
 8002558:	460d      	mov	r5, r1
 800255a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b4f      	ldr	r3, [pc, #316]	@ (800269c <HAL_RCC_ClockConfig+0x14c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	428b      	cmp	r3, r1
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002568:	b2cb      	uxtb	r3, r1
 800256a:	4a4c      	ldr	r2, [pc, #304]	@ (800269c <HAL_RCC_ClockConfig+0x14c>)
 800256c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	6813      	ldr	r3, [r2, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	428b      	cmp	r3, r1
 8002576:	f040 808b 	bne.w	8002690 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	f013 0f02 	tst.w	r3, #2
 8002580:	d017      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002582:	f013 0f04 	tst.w	r3, #4
 8002586:	d004      	beq.n	8002592 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4a45      	ldr	r2, [pc, #276]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 800258a:	6893      	ldr	r3, [r2, #8]
 800258c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002590:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f013 0f08 	tst.w	r3, #8
 8002598:	d004      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259a:	4a41      	ldr	r2, [pc, #260]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 800259c:	6893      	ldr	r3, [r2, #8]
 800259e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4a3e      	ldr	r2, [pc, #248]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 80025a6:	6893      	ldr	r3, [r2, #8]
 80025a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ac:	68a1      	ldr	r1, [r4, #8]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	f013 0f01 	tst.w	r3, #1
 80025b8:	d032      	beq.n	8002620 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	6863      	ldr	r3, [r4, #4]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d021      	beq.n	8002604 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c0:	1e9a      	subs	r2, r3, #2
 80025c2:	2a01      	cmp	r2, #1
 80025c4:	d925      	bls.n	8002612 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4a36      	ldr	r2, [pc, #216]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	f012 0f02 	tst.w	r2, #2
 80025ce:	d061      	beq.n	8002694 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d0:	4933      	ldr	r1, [pc, #204]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 80025d2:	688a      	ldr	r2, [r1, #8]
 80025d4:	f022 0203 	bic.w	r2, r2, #3
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025dc:	f7ff f94a 	bl	8001874 <HAL_GetTick>
 80025e0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	6862      	ldr	r2, [r4, #4]
 80025ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f2:	f7ff f93f 	bl	8001874 <HAL_GetTick>
 80025f6:	1b80      	subs	r0, r0, r6
 80025f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025fc:	4298      	cmp	r0, r3
 80025fe:	d9f0      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
 8002602:	e042      	b.n	800268a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002604:	4a26      	ldr	r2, [pc, #152]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800260c:	d1e0      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800260e:	2001      	movs	r0, #1
 8002610:	e03b      	b.n	800268a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4a23      	ldr	r2, [pc, #140]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800261a:	d1d9      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
 800261e:	e034      	b.n	800268a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <HAL_RCC_ClockConfig+0x14c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	42ab      	cmp	r3, r5
 800262a:	d907      	bls.n	800263c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262c:	b2ea      	uxtb	r2, r5
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_ClockConfig+0x14c>)
 8002630:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	42ab      	cmp	r3, r5
 800263a:	d12d      	bne.n	8002698 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f013 0f04 	tst.w	r3, #4
 8002642:	d006      	beq.n	8002652 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 8002646:	6893      	ldr	r3, [r2, #8]
 8002648:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800264c:	68e1      	ldr	r1, [r4, #12]
 800264e:	430b      	orrs	r3, r1
 8002650:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	f013 0f08 	tst.w	r3, #8
 8002658:	d007      	beq.n	800266a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4a11      	ldr	r2, [pc, #68]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 800265c:	6893      	ldr	r3, [r2, #8]
 800265e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002662:	6921      	ldr	r1, [r4, #16]
 8002664:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002668:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f7ff ff09 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800266e:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <HAL_RCC_ClockConfig+0x150>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002676:	4a0b      	ldr	r2, [pc, #44]	@ (80026a4 <HAL_RCC_ClockConfig+0x154>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	40d8      	lsrs	r0, r3
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_RCC_ClockConfig+0x158>)
 800267e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002680:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_RCC_ClockConfig+0x15c>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f7ff f8aa 	bl	80017dc <HAL_InitTick>
  return HAL_OK;
 8002688:	2000      	movs	r0, #0
}
 800268a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800268c:	2001      	movs	r0, #1
}
 800268e:	4770      	bx	lr
      return HAL_ERROR;
 8002690:	2001      	movs	r0, #1
 8002692:	e7fa      	b.n	800268a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
 8002696:	e7f8      	b.n	800268a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002698:	2001      	movs	r0, #1
 800269a:	e7f6      	b.n	800268a <HAL_RCC_ClockConfig+0x13a>
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	0800a3d0 	.word	0x0800a3d0
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026b0:	4b01      	ldr	r3, [pc, #4]	@ (80026b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026be:	f7ff fff7 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026c2:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026ca:	4a03      	ldr	r2, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80026ce:	40d8      	lsrs	r0, r3
 80026d0:	bd08      	pop	{r3, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	0800a3c8 	.word	0x0800a3c8

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026de:	f7ff ffe7 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026e2:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026ea:	4a03      	ldr	r2, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80026ee:	40d8      	lsrs	r0, r3
 80026f0:	bd08      	pop	{r3, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	0800a3c8 	.word	0x0800a3c8

080026fc <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80026fc:	6b83      	ldr	r3, [r0, #56]	@ 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002706:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002708:	4770      	bx	lr
	...

0800270c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002716:	6800      	ldr	r0, [r0, #0]
 8002718:	f001 fa95 	bl	8003c46 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800271c:	4605      	mov	r5, r0
 800271e:	b110      	cbz	r0, 8002726 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8002720:	4628      	mov	r0, r5
 8002722:	b002      	add	sp, #8
 8002724:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002726:	6820      	ldr	r0, [r4, #0]
 8002728:	f001 fd86 	bl	8004238 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800272c:	b938      	cbnz	r0, 800273e <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800272e:	2301      	movs	r3, #1
 8002730:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002732:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00b      	beq.n	8002750 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002738:	462e      	mov	r6, r5
 800273a:	4628      	mov	r0, r5
 800273c:	e014      	b.n	8002768 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800273e:	2300      	movs	r3, #0
 8002740:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002742:	6820      	ldr	r0, [r4, #0]
 8002744:	f001 fa7f 	bl	8003c46 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002748:	2800      	cmp	r0, #0
 800274a:	d0f2      	beq.n	8002732 <SD_PowerON+0x26>
      return errorstate;
 800274c:	4605      	mov	r5, r0
 800274e:	e7e7      	b.n	8002720 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002750:	2100      	movs	r1, #0
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	f001 fbde 	bl	8003f14 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002758:	2800      	cmp	r0, #0
 800275a:	d0ed      	beq.n	8002738 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800275c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002760:	e7de      	b.n	8002720 <SD_PowerON+0x14>
    count++;
 8002762:	9b01      	ldr	r3, [sp, #4]
 8002764:	3301      	adds	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002768:	9a01      	ldr	r2, [sp, #4]
 800276a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800276e:	429a      	cmp	r2, r3
 8002770:	d813      	bhi.n	800279a <SD_PowerON+0x8e>
 8002772:	b996      	cbnz	r6, 800279a <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002774:	2100      	movs	r1, #0
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	f001 fbcc 	bl	8003f14 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800277c:	b9e0      	cbnz	r0, 80027b8 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800277e:	4912      	ldr	r1, [pc, #72]	@ (80027c8 <SD_PowerON+0xbc>)
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	f001 fca5 	bl	80040d0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002786:	4606      	mov	r6, r0
 8002788:	b9c0      	cbnz	r0, 80027bc <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800278a:	2100      	movs	r1, #0
 800278c:	6820      	ldr	r0, [r4, #0]
 800278e:	f001 fa45 	bl	8003c1c <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002792:	0fc3      	lsrs	r3, r0, #31
 8002794:	d0e5      	beq.n	8002762 <SD_PowerON+0x56>
 8002796:	461e      	mov	r6, r3
 8002798:	e7e3      	b.n	8002762 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800279a:	9a01      	ldr	r2, [sp, #4]
 800279c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d80e      	bhi.n	80027c2 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80027a4:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 80027a8:	d002      	beq.n	80027b0 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80027aa:	2301      	movs	r3, #1
 80027ac:	6463      	str	r3, [r4, #68]	@ 0x44
 80027ae:	e7b7      	b.n	8002720 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 80027b0:	2200      	movs	r2, #0
 80027b2:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 80027b4:	461d      	mov	r5, r3
 80027b6:	e7b3      	b.n	8002720 <SD_PowerON+0x14>
      return errorstate;
 80027b8:	4605      	mov	r5, r0
 80027ba:	e7b1      	b.n	8002720 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80027bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80027c0:	e7ae      	b.n	8002720 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80027c2:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80027c6:	e7ab      	b.n	8002720 <SD_PowerON+0x14>
 80027c8:	c1100000 	.word	0xc1100000

080027cc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80027ce:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  dataremaining = hsd->RxXferSize;
 80027d0:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 80027d2:	b9a6      	cbnz	r6, 80027fe <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f001 f9fb 	bl	8003bd2 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80027dc:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80027de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80027e2:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80027e4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80027e8:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80027ea:	0e00      	lsrs	r0, r0, #24
 80027ec:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80027ee:	3404      	adds	r4, #4
      dataremaining--;
 80027f0:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 80027f2:	3501      	adds	r5, #1
 80027f4:	2d07      	cmp	r5, #7
 80027f6:	d9ee      	bls.n	80027d6 <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 80027f8:	62bc      	str	r4, [r7, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80027fa:	62fe      	str	r6, [r7, #44]	@ 0x2c
}
 80027fc:	e7ea      	b.n	80027d4 <SD_Read_IT+0x8>
 80027fe:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002800:	2500      	movs	r5, #0
 8002802:	e7f7      	b.n	80027f4 <SD_Read_IT+0x28>

08002804 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002808:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 800280a:	6a46      	ldr	r6, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 800280c:	b9de      	cbnz	r6, 8002846 <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 800280e:	b003      	add	sp, #12
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 8002812:	7823      	ldrb	r3, [r4, #0]
 8002814:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8002816:	7862      	ldrb	r2, [r4, #1]
 8002818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800281c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800281e:	78a2      	ldrb	r2, [r4, #2]
 8002820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002824:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002826:	78e2      	ldrb	r2, [r4, #3]
 8002828:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800282c:	9301      	str	r3, [sp, #4]
      tmp++;
 800282e:	3404      	adds	r4, #4
      dataremaining--;
 8002830:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002832:	a901      	add	r1, sp, #4
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f001 f9cf 	bl	8003bd8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800283a:	3501      	adds	r5, #1
 800283c:	2d07      	cmp	r5, #7
 800283e:	d9e8      	bls.n	8002812 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8002840:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8002842:	627e      	str	r6, [r7, #36]	@ 0x24
}
 8002844:	e7e3      	b.n	800280e <SD_Write_IT+0xa>
 8002846:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002848:	2500      	movs	r5, #0
 800284a:	e7f7      	b.n	800283c <SD_Write_IT+0x38>

0800284c <SD_FindSCR>:
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	4604      	mov	r4, r0
 8002852:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff f80e 	bl	8001874 <HAL_GetTick>
 8002858:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002860:	2108      	movs	r1, #8
 8002862:	6820      	ldr	r0, [r4, #0]
 8002864:	f001 faac 	bl	8003dc0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002868:	4605      	mov	r5, r0
 800286a:	b110      	cbz	r0, 8002872 <SD_FindSCR+0x26>
}
 800286c:	4628      	mov	r0, r5
 800286e:	b009      	add	sp, #36	@ 0x24
 8002870:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002872:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002874:	0409      	lsls	r1, r1, #16
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	f001 fb4c 	bl	8003f14 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800287c:	4605      	mov	r5, r0
 800287e:	2800      	cmp	r0, #0
 8002880:	d1f4      	bne.n	800286c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002886:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8002888:	2308      	movs	r3, #8
 800288a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800288c:	2330      	movs	r3, #48	@ 0x30
 800288e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002890:	2302      	movs	r3, #2
 8002892:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002894:	2300      	movs	r3, #0
 8002896:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002898:	2301      	movs	r3, #1
 800289a:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800289c:	a902      	add	r1, sp, #8
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	f001 f9bf 	bl	8003c22 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80028a4:	6820      	ldr	r0, [r4, #0]
 80028a6:	f001 fb65 	bl	8003f74 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80028aa:	4605      	mov	r5, r0
 80028ac:	b158      	cbz	r0, 80028c6 <SD_FindSCR+0x7a>
 80028ae:	e7dd      	b.n	800286c <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80028b0:	f001 f98f 	bl	8003bd2 <SDIO_ReadFIFO>
 80028b4:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 80028b8:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80028ba:	f7fe ffdb 	bl	8001874 <HAL_GetTick>
 80028be:	1b83      	subs	r3, r0, r6
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028c4:	d043      	beq.n	800294e <SD_FindSCR+0x102>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028ca:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 80028ce:	d107      	bne.n	80028e0 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80028d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028d2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80028d6:	d1eb      	bne.n	80028b0 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80028d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028da:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80028de:	d1ec      	bne.n	80028ba <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80028e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028e2:	f013 0f08 	tst.w	r3, #8
 80028e6:	d129      	bne.n	800293c <SD_FindSCR+0xf0>
 80028e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028ea:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80028ee:	d125      	bne.n	800293c <SD_FindSCR+0xf0>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80028f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028f2:	f013 0f02 	tst.w	r3, #2
 80028f6:	d124      	bne.n	8002942 <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80028f8:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80028fa:	f015 0520 	ands.w	r5, r5, #32
 80028fe:	d123      	bne.n	8002948 <SD_FindSCR+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002900:	f240 533a 	movw	r3, #1338	@ 0x53a
 8002904:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002906:	9a01      	ldr	r2, [sp, #4]
 8002908:	0213      	lsls	r3, r2, #8
 800290a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800290e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002912:	0a11      	lsrs	r1, r2, #8
 8002914:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002918:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800291a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800291e:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002920:	9a00      	ldr	r2, [sp, #0]
 8002922:	0213      	lsls	r3, r2, #8
 8002924:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002928:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800292c:	0a11      	lsrs	r1, r2, #8
 800292e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002932:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002934:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002938:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800293a:	e797      	b.n	800286c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800293c:	2508      	movs	r5, #8
 800293e:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002940:	e794      	b.n	800286c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002942:	2502      	movs	r5, #2
 8002944:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002946:	e791      	b.n	800286c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002948:	2520      	movs	r5, #32
 800294a:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800294c:	e78e      	b.n	800286c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800294e:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8002952:	e78b      	b.n	800286c <SD_FindSCR+0x20>

08002954 <SD_WideBus_Enable>:
{
 8002954:	b510      	push	{r4, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800295a:	2100      	movs	r1, #0
 800295c:	9100      	str	r1, [sp, #0]
 800295e:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002960:	6800      	ldr	r0, [r0, #0]
 8002962:	f001 f95b 	bl	8003c1c <SDIO_GetResponse>
 8002966:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800296a:	d113      	bne.n	8002994 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800296c:	4669      	mov	r1, sp
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff ff6c 	bl	800284c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002974:	b980      	cbnz	r0, 8002998 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800297c:	d00e      	beq.n	800299c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800297e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002980:	0409      	lsls	r1, r1, #16
 8002982:	6820      	ldr	r0, [r4, #0]
 8002984:	f001 fac6 	bl	8003f14 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002988:	b930      	cbnz	r0, 8002998 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800298a:	2102      	movs	r1, #2
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	f001 fad9 	bl	8003f44 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002992:	e001      	b.n	8002998 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002994:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 8002998:	b002      	add	sp, #8
 800299a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800299c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80029a0:	e7fa      	b.n	8002998 <SD_WideBus_Enable+0x44>

080029a2 <SD_WideBus_Disable>:
{
 80029a2:	b510      	push	{r4, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80029a8:	2100      	movs	r1, #0
 80029aa:	9100      	str	r1, [sp, #0]
 80029ac:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80029ae:	6800      	ldr	r0, [r0, #0]
 80029b0:	f001 f934 	bl	8003c1c <SDIO_GetResponse>
 80029b4:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80029b8:	d113      	bne.n	80029e2 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80029ba:	4669      	mov	r1, sp
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff ff45 	bl	800284c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029c2:	b980      	cbnz	r0, 80029e6 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80029ca:	d00e      	beq.n	80029ea <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80029cc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80029ce:	0409      	lsls	r1, r1, #16
 80029d0:	6820      	ldr	r0, [r4, #0]
 80029d2:	f001 fa9f 	bl	8003f14 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80029d6:	b930      	cbnz	r0, 80029e6 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80029d8:	2100      	movs	r1, #0
 80029da:	6820      	ldr	r0, [r4, #0]
 80029dc:	f001 fab2 	bl	8003f44 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 80029e0:	e001      	b.n	80029e6 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80029e2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80029e6:	b002      	add	sp, #8
 80029e8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80029ea:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80029ee:	e7fa      	b.n	80029e6 <SD_WideBus_Disable+0x44>

080029f0 <SD_SendStatus>:
{
 80029f0:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80029f2:	b181      	cbz	r1, 8002a16 <SD_SendStatus+0x26>
 80029f4:	4604      	mov	r4, r0
 80029f6:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80029f8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80029fa:	0409      	lsls	r1, r1, #16
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f001 fad1 	bl	8003fa4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a02:	4605      	mov	r5, r0
 8002a04:	b108      	cbz	r0, 8002a0a <SD_SendStatus+0x1a>
}
 8002a06:	4628      	mov	r0, r5
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	f001 f905 	bl	8003c1c <SDIO_GetResponse>
 8002a12:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8002a14:	e7f7      	b.n	8002a06 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8002a16:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 8002a1a:	e7f4      	b.n	8002a06 <SD_SendStatus+0x16>

08002a1c <HAL_SD_ReadBlocks_DMA>:
{
 8002a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a20:	b087      	sub	sp, #28
 8002a22:	4604      	mov	r4, r0
  if(NULL == pData)
 8002a24:	b191      	cbz	r1, 8002a4c <HAL_SD_ReadBlocks_DMA+0x30>
 8002a26:	4616      	mov	r6, r2
 8002a28:	461f      	mov	r7, r3
 8002a2a:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8002a2c:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8002a30:	b2ed      	uxtb	r5, r5
 8002a32:	2d01      	cmp	r5, #1
 8002a34:	d17f      	bne.n	8002b36 <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a3a:	19f0      	adds	r0, r6, r7
 8002a3c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a3e:	4298      	cmp	r0, r3
 8002a40:	d90a      	bls.n	8002a58 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8002a4a:	e075      	b.n	8002b38 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a4c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002a4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a52:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8002a54:	2501      	movs	r5, #1
 8002a56:	e06f      	b.n	8002b38 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002a68:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002a72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a74:	4833      	ldr	r0, [pc, #204]	@ (8002b44 <HAL_SD_ReadBlocks_DMA+0x128>)
 8002a76:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002a78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a7a:	4833      	ldr	r0, [pc, #204]	@ (8002b48 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8002a7c:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8002a7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a80:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a84:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002a86:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002a88:	6801      	ldr	r1, [r0, #0]
 8002a8a:	680b      	ldr	r3, [r1, #0]
 8002a8c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a90:	6880      	ldr	r0, [r0, #8]
 8002a92:	4303      	orrs	r3, r0
 8002a94:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002a96:	6821      	ldr	r1, [r4, #0]
 8002a98:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8002a9c:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8002aa0:	3180      	adds	r1, #128	@ 0x80
 8002aa2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002aa4:	f7ff f862 	bl	8001b6c <HAL_DMA_Start_IT>
 8002aa8:	4680      	mov	r8, r0
 8002aaa:	bb68      	cbnz	r0, 8002b08 <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 8002aac:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_SD_ReadBlocks_DMA+0x130>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ab4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d000      	beq.n	8002abc <HAL_SD_ReadBlocks_DMA+0xa0>
        add *= 512U;
 8002aba:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ac0:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ac2:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ac6:	2390      	movs	r3, #144	@ 0x90
 8002ac8:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002aca:	2302      	movs	r3, #2
 8002acc:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ad6:	4669      	mov	r1, sp
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	f001 f8a2 	bl	8003c22 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8002ade:	2f01      	cmp	r7, #1
 8002ae0:	d922      	bls.n	8002b28 <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002ae2:	2382      	movs	r3, #130	@ 0x82
 8002ae4:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	6820      	ldr	r0, [r4, #0]
 8002aea:	f001 f999 	bl	8003e20 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002aee:	b338      	cbz	r0, 8002b40 <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_SD_ReadBlocks_DMA+0x134>)
 8002af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002af6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002af8:	4303      	orrs	r3, r0
 8002afa:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8002b06:	e017      	b.n	8002b38 <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002b08:	6822      	ldr	r2, [r4, #0]
 8002b0a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002b0c:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 8002b10:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <HAL_SD_ReadBlocks_DMA+0x134>)
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002b18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b1e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8002b26:	e007      	b.n	8002b38 <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002b28:	2381      	movs	r3, #129	@ 0x81
 8002b2a:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b2c:	4631      	mov	r1, r6
 8002b2e:	6820      	ldr	r0, [r4, #0]
 8002b30:	f001 f95e 	bl	8003df0 <SDMMC_CmdReadSingleBlock>
 8002b34:	e7db      	b.n	8002aee <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 8002b36:	2502      	movs	r5, #2
}
 8002b38:	4628      	mov	r0, r5
 8002b3a:	b007      	add	sp, #28
 8002b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8002b40:	4645      	mov	r5, r8
 8002b42:	e7f9      	b.n	8002b38 <HAL_SD_ReadBlocks_DMA+0x11c>
 8002b44:	08002c93 	.word	0x08002c93
 8002b48:	0800317d 	.word	0x0800317d
 8002b4c:	42258000 	.word	0x42258000
 8002b50:	004005ff 	.word	0x004005ff

08002b54 <HAL_SD_WriteBlocks_DMA>:
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	b087      	sub	sp, #28
 8002b58:	4604      	mov	r4, r0
  if(NULL == pData)
 8002b5a:	2900      	cmp	r1, #0
 8002b5c:	d03b      	beq.n	8002bd6 <HAL_SD_WriteBlocks_DMA+0x82>
 8002b5e:	461e      	mov	r6, r3
 8002b60:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8002b62:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8002b66:	b2ed      	uxtb	r5, r5
 8002b68:	2d01      	cmp	r5, #1
 8002b6a:	f040 8084 	bne.w	8002c76 <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b72:	1993      	adds	r3, r2, r6
 8002b74:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8002b76:	428b      	cmp	r3, r1
 8002b78:	d833      	bhi.n	8002be2 <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8002b80:	6803      	ldr	r3, [r0, #0]
 8002b82:	2100      	movs	r1, #0
 8002b84:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002b8a:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002b94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b96:	483a      	ldr	r0, [pc, #232]	@ (8002c80 <HAL_SD_WriteBlocks_DMA+0x12c>)
 8002b98:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002b9a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b9c:	4839      	ldr	r0, [pc, #228]	@ (8002c84 <HAL_SD_WriteBlocks_DMA+0x130>)
 8002b9e:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8002ba0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002ba2:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ba4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d000      	beq.n	8002bac <HAL_SD_WriteBlocks_DMA+0x58>
      add *= 512U;
 8002baa:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8002bac:	2e01      	cmp	r6, #1
 8002bae:	d91d      	bls.n	8002bec <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002bb0:	23a0      	movs	r3, #160	@ 0xa0
 8002bb2:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	f001 f962 	bl	8003e80 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bbc:	b1e8      	cbz	r0, 8002bfa <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	4a31      	ldr	r2, [pc, #196]	@ (8002c88 <HAL_SD_WriteBlocks_DMA+0x134>)
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002bc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002bc6:	4303      	orrs	r3, r0
 8002bc8:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8002bd4:	e050      	b.n	8002c78 <HAL_SD_WriteBlocks_DMA+0x124>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002bd6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002bd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bdc:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8002bde:	2501      	movs	r5, #1
 8002be0:	e04a      	b.n	8002c78 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002be2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002be4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002be8:	6383      	str	r3, [r0, #56]	@ 0x38
      return HAL_ERROR;
 8002bea:	e045      	b.n	8002c78 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002bec:	2390      	movs	r3, #144	@ 0x90
 8002bee:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f001 f92c 	bl	8003e50 <SDMMC_CmdWriteSingleBlock>
 8002bf8:	e7e0      	b.n	8002bbc <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_SD_WriteBlocks_DMA+0x138>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c04:	2240      	movs	r2, #64	@ 0x40
 8002c06:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002c08:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002c0a:	680a      	ldr	r2, [r1, #0]
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002c12:	6889      	ldr	r1, [r1, #8]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002c18:	6822      	ldr	r2, [r4, #0]
 8002c1a:	0276      	lsls	r6, r6, #9
 8002c1c:	08b3      	lsrs	r3, r6, #2
 8002c1e:	3280      	adds	r2, #128	@ 0x80
 8002c20:	4639      	mov	r1, r7
 8002c22:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002c24:	f7fe ffa2 	bl	8001b6c <HAL_DMA_Start_IT>
 8002c28:	4607      	mov	r7, r0
 8002c2a:	b198      	cbz	r0, 8002c54 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002c30:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8002c34:	f023 0302 	bic.w	r3, r3, #2
 8002c38:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <HAL_SD_WriteBlocks_DMA+0x134>)
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002c40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c46:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8002c52:	e011      	b.n	8002c78 <HAL_SD_WriteBlocks_DMA+0x124>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c58:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002c5a:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002c5c:	2390      	movs	r3, #144	@ 0x90
 8002c5e:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002c60:	2300      	movs	r3, #0
 8002c62:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002c64:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002c6a:	4669      	mov	r1, sp
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	f000 ffd8 	bl	8003c22 <SDIO_ConfigData>
      return HAL_OK;
 8002c72:	463d      	mov	r5, r7
 8002c74:	e000      	b.n	8002c78 <HAL_SD_WriteBlocks_DMA+0x124>
    return HAL_BUSY;
 8002c76:	2502      	movs	r5, #2
}
 8002c78:	4628      	mov	r0, r5
 8002c7a:	b007      	add	sp, #28
 8002c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	080026fd 	.word	0x080026fd
 8002c84:	0800317d 	.word	0x0800317d
 8002c88:	004005ff 	.word	0x004005ff
 8002c8c:	42258000 	.word	0x42258000

08002c90 <HAL_SD_ErrorCallback>:
}
 8002c90:	4770      	bx	lr

08002c92 <SD_DMAReceiveCplt>:
{
 8002c92:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c94:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002c96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c98:	2b82      	cmp	r3, #130	@ 0x82
 8002c9a:	d011      	beq.n	8002cc0 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002c9c:	6822      	ldr	r2, [r4, #0]
 8002c9e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002ca0:	f023 0308 	bic.w	r3, r3, #8
 8002ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f001 fb18 	bl	80042ee <HAL_SD_RxCpltCallback>
}
 8002cbe:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	f001 f8f5 	bl	8003eb0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d0e7      	beq.n	8002c9c <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8002ccc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_SD_ErrorCallback>
 8002cd8:	e7e0      	b.n	8002c9c <SD_DMAReceiveCplt+0xa>
	...

08002cdc <HAL_SD_GetCardCSD>:
{
 8002cdc:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002cde:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8002ce0:	0f92      	lsrs	r2, r2, #30
 8002ce2:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002ce4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8002ce6:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8002cea:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002cec:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8002cf0:	f002 0203 	and.w	r2, r2, #3
 8002cf4:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002cf6:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 8002cfa:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002cfc:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8002d00:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d02:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 8002d06:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002d08:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002d0a:	0d12      	lsrs	r2, r2, #20
 8002d0c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002d0e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8002d12:	f002 020f 	and.w	r2, r2, #15
 8002d16:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d18:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002d1a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8002d1e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002d20:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002d22:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002d26:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d28:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002d2a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002d2e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d30:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002d32:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002d36:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d38:	2200      	movs	r2, #0
 8002d3a:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002d3c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	f040 8086 	bne.w	8002e50 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002d44:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8002d46:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002d4a:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8002d4e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002d50:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8002d54:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002d56:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d58:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8002d5c:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002d5e:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8002d62:	f002 0207 	and.w	r2, r2, #7
 8002d66:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002d68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d6a:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8002d6e:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002d70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d72:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8002d76:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002d78:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d7a:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8002d7e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002d80:	690a      	ldr	r2, [r1, #16]
 8002d82:	3201      	adds	r2, #1
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002d86:	7e08      	ldrb	r0, [r1, #24]
 8002d88:	f000 0007 	and.w	r0, r0, #7
 8002d8c:	3002      	adds	r0, #2
 8002d8e:	4082      	lsls	r2, r0
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002d92:	f891 c008 	ldrb.w	ip, [r1, #8]
 8002d96:	f00c 0c0f 	and.w	ip, ip, #15
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	fa00 f00c 	lsl.w	r0, r0, ip
 8002da0:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002da2:	0a40      	lsrs	r0, r0, #9
 8002da4:	fb00 f202 	mul.w	r2, r0, r2
 8002da8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dae:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002db0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002db2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002db6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002db8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002dba:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8002dbe:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002dc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002dc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dc6:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002dc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dca:	0fd2      	lsrs	r2, r2, #31
 8002dcc:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002dce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dd0:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8002dd4:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002dd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dd8:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8002ddc:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002de0:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8002de4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002de6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002de8:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002dec:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8002df0:	2000      	movs	r0, #0
 8002df2:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002df6:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8002dfa:	f002 0201 	and.w	r2, r2, #1
 8002dfe:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002e02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e04:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8002e08:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002e0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e0e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002e12:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002e16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e18:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002e1c:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002e20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e22:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002e26:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e2c:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8002e30:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002e34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e36:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8002e3a:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e40:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002e44:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8002e4e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e50:	2a01      	cmp	r2, #1
 8002e52:	d111      	bne.n	8002e78 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e54:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002e56:	0412      	lsls	r2, r2, #16
 8002e58:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8002e5c:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8002e60:	4302      	orrs	r2, r0
 8002e62:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e64:	690a      	ldr	r2, [r1, #16]
 8002e66:	3201      	adds	r2, #1
 8002e68:	0292      	lsls	r2, r2, #10
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e72:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002e74:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e76:	e79b      	b.n	8002db0 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e78:	6802      	ldr	r2, [r0, #0]
 8002e7a:	4905      	ldr	r1, [pc, #20]	@ (8002e90 <HAL_SD_GetCardCSD+0x1b4>)
 8002e7c:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e7e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002e80:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002e84:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e86:	2001      	movs	r0, #1
 8002e88:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	004005ff 	.word	0x004005ff

08002e94 <SD_InitCard>:
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	b090      	sub	sp, #64	@ 0x40
 8002e98:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f000 fea2 	bl	8003bea <SDIO_GetPowerState>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d06c      	beq.n	8002f84 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eaa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d145      	bne.n	8002f3c <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eb0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d15d      	bne.n	8002f72 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eb6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d01d      	beq.n	8002ef8 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002ebc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002ec0:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ec2:	0409      	lsls	r1, r1, #16
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	f001 f8c8 	bl	800405a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002eca:	4605      	mov	r5, r0
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d15b      	bne.n	8002f88 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f000 fea2 	bl	8003c1c <SDIO_GetResponse>
 8002ed8:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002eda:	2104      	movs	r1, #4
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	f000 fe9d 	bl	8003c1c <SDIO_GetResponse>
 8002ee2:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ee4:	2108      	movs	r1, #8
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	f000 fe98 	bl	8003c1c <SDIO_GetResponse>
 8002eec:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002eee:	210c      	movs	r1, #12
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	f000 fe93 	bl	8003c1c <SDIO_GetResponse>
 8002ef6:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002ef8:	2104      	movs	r1, #4
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	f000 fe8e 	bl	8003c1c <SDIO_GetResponse>
 8002f00:	0d00      	lsrs	r0, r0, #20
 8002f02:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002f04:	a905      	add	r1, sp, #20
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff fee8 	bl	8002cdc <HAL_SD_GetCardCSD>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d13e      	bne.n	8002f8e <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002f10:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002f12:	0412      	lsls	r2, r2, #16
 8002f14:	2300      	movs	r3, #0
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	f000 ffe4 	bl	8003ee4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	bb98      	cbnz	r0, 8002f88 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002f20:	4623      	mov	r3, r4
 8002f22:	f853 6b10 	ldr.w	r6, [r3], #16
 8002f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002f2e:	3404      	adds	r4, #4
 8002f30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002f34:	4630      	mov	r0, r6
 8002f36:	f000 fe33 	bl	8003ba0 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8002f3a:	e025      	b.n	8002f88 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002f3c:	6820      	ldr	r0, [r4, #0]
 8002f3e:	f001 f877 	bl	8004030 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f42:	4605      	mov	r5, r0
 8002f44:	bb00      	cbnz	r0, 8002f88 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f46:	2100      	movs	r1, #0
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	f000 fe67 	bl	8003c1c <SDIO_GetResponse>
 8002f4e:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002f50:	2104      	movs	r1, #4
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	f000 fe62 	bl	8003c1c <SDIO_GetResponse>
 8002f58:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	6820      	ldr	r0, [r4, #0]
 8002f5e:	f000 fe5d 	bl	8003c1c <SDIO_GetResponse>
 8002f62:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002f64:	210c      	movs	r1, #12
 8002f66:	6820      	ldr	r0, [r4, #0]
 8002f68:	f000 fe58 	bl	8003c1c <SDIO_GetResponse>
 8002f6c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8002f70:	e79e      	b.n	8002eb0 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002f72:	f10d 0112 	add.w	r1, sp, #18
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	f001 f914 	bl	80041a4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d099      	beq.n	8002eb6 <SD_InitCard+0x22>
 8002f82:	e001      	b.n	8002f88 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f84:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 8002f88:	4628      	mov	r0, r5
 8002f8a:	b010      	add	sp, #64	@ 0x40
 8002f8c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f8e:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002f92:	e7f9      	b.n	8002f88 <SD_InitCard+0xf4>

08002f94 <HAL_SD_InitCard>:
{
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002f9e:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002fa0:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002fa2:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002fa4:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002fa6:	2376      	movs	r3, #118	@ 0x76
 8002fa8:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8002faa:	ab0a      	add	r3, sp, #40	@ 0x28
 8002fac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002fb0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002fb4:	ab04      	add	r3, sp, #16
 8002fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	f000 fdf1 	bl	8003ba0 <SDIO_Init>
  if(status != HAL_OK)
 8002fbe:	b118      	cbz	r0, 8002fc8 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8002fc0:	2501      	movs	r5, #1
}
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	b00a      	add	sp, #40	@ 0x28
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8002fca:	4e1a      	ldr	r6, [pc, #104]	@ (8003034 <HAL_SD_InitCard+0xa0>)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	f000 fe05 	bl	8003be2 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	f7fe fc4e 	bl	8001880 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff fb91 	bl	800270c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fea:	b130      	cbz	r0, 8002ffa <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8002fec:	2501      	movs	r5, #1
 8002fee:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002ff2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ff4:	4303      	orrs	r3, r0
 8002ff6:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8002ff8:	e7e3      	b.n	8002fc2 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f7ff ff4a 	bl	8002e94 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003000:	b130      	cbz	r0, 8003010 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8003002:	2501      	movs	r5, #1
 8003004:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003008:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800300a:	4303      	orrs	r3, r0
 800300c:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800300e:	e7d8      	b.n	8002fc2 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003010:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	f000 fed3 	bl	8003dc0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800301a:	2800      	cmp	r0, #0
 800301c:	d0d1      	beq.n	8002fc2 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	4905      	ldr	r1, [pc, #20]	@ (8003038 <HAL_SD_InitCard+0xa4>)
 8003022:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003024:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003026:	4303      	orrs	r3, r0
 8003028:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800302a:	2501      	movs	r5, #1
 800302c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003030:	e7c7      	b.n	8002fc2 <HAL_SD_InitCard+0x2e>
 8003032:	bf00      	nop
 8003034:	42258000 	.word	0x42258000
 8003038:	004005ff 	.word	0x004005ff

0800303c <HAL_SD_Init>:
  if(hsd == NULL)
 800303c:	b1a8      	cbz	r0, 800306a <HAL_SD_Init+0x2e>
{
 800303e:	b510      	push	{r4, lr}
 8003040:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003042:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8003046:	b163      	cbz	r3, 8003062 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8003048:	2303      	movs	r3, #3
 800304a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ffa0 	bl	8002f94 <HAL_SD_InitCard>
 8003054:	b958      	cbnz	r0, 800306e <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003056:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003058:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800305a:	2301      	movs	r3, #1
 800305c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003060:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003062:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003064:	f7fe fa48 	bl	80014f8 <HAL_SD_MspInit>
 8003068:	e7ee      	b.n	8003048 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
}
 800306c:	4770      	bx	lr
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
 8003070:	e7f6      	b.n	8003060 <HAL_SD_Init+0x24>

08003072 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003072:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003074:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003076:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003078:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800307a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800307c:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800307e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003080:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003082:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003084:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003086:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003088:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800308a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800308c:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800308e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003090:	61cb      	str	r3, [r1, #28]
}
 8003092:	2000      	movs	r0, #0
 8003094:	4770      	bx	lr
	...

08003098 <HAL_SD_ConfigWideBusOperation>:
{
 8003098:	b530      	push	{r4, r5, lr}
 800309a:	b08b      	sub	sp, #44	@ 0x2c
 800309c:	4604      	mov	r4, r0
 800309e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80030a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d01c      	beq.n	80030e6 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80030ac:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80030b0:	d008      	beq.n	80030c4 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80030b2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80030b6:	d00a      	beq.n	80030ce <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80030b8:	b179      	cbz	r1, 80030da <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030ba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80030bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030c0:	6383      	str	r3, [r0, #56]	@ 0x38
 80030c2:	e014      	b.n	80030ee <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030c4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	6383      	str	r3, [r0, #56]	@ 0x38
 80030cc:	e00f      	b.n	80030ee <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80030ce:	f7ff fc41 	bl	8002954 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80030d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030d4:	4303      	orrs	r3, r0
 80030d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80030d8:	e009      	b.n	80030ee <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80030da:	f7ff fc62 	bl	80029a2 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80030de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030e0:	4303      	orrs	r3, r0
 80030e2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80030e4:	e003      	b.n	80030ee <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80030ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030f0:	b1c3      	cbz	r3, 8003124 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <HAL_SD_ConfigWideBusOperation+0xbc>)
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030f8:	2501      	movs	r5, #1
 80030fa:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80030fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	f000 fe5c 	bl	8003dc0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003108:	b130      	cbz	r0, 8003118 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	4911      	ldr	r1, [pc, #68]	@ (8003154 <HAL_SD_ConfigWideBusOperation+0xbc>)
 800310e:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003110:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003112:	4303      	orrs	r3, r0
 8003114:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8003116:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003118:	2301      	movs	r3, #1
 800311a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800311e:	4628      	mov	r0, r5
 8003120:	b00b      	add	sp, #44	@ 0x2c
 8003122:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003124:	6863      	ldr	r3, [r4, #4]
 8003126:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003128:	68a3      	ldr	r3, [r4, #8]
 800312a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800312c:	68e3      	ldr	r3, [r4, #12]
 800312e:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003130:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003132:	6963      	ldr	r3, [r4, #20]
 8003134:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003136:	69a3      	ldr	r3, [r4, #24]
 8003138:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800313a:	ab0a      	add	r3, sp, #40	@ 0x28
 800313c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003140:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003144:	ab04      	add	r3, sp, #16
 8003146:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	f000 fd29 	bl	8003ba0 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2500      	movs	r5, #0
 8003150:	e7d5      	b.n	80030fe <HAL_SD_ConfigWideBusOperation+0x66>
 8003152:	bf00      	nop
 8003154:	004005ff 	.word	0x004005ff

08003158 <HAL_SD_GetCardState>:
{
 8003158:	b510      	push	{r4, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8003162:	a901      	add	r1, sp, #4
 8003164:	f7ff fc44 	bl	80029f0 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003168:	b110      	cbz	r0, 8003170 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800316a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800316c:	4303      	orrs	r3, r0
 800316e:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8003170:	9801      	ldr	r0, [sp, #4]
 8003172:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003176:	b002      	add	sp, #8
 8003178:	bd10      	pop	{r4, pc}
	...

0800317c <SD_DMAError>:
{
 800317c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800317e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003180:	f7fe fe74 	bl	8001e6c <HAL_DMA_GetError>
 8003184:	2802      	cmp	r0, #2
 8003186:	d00a      	beq.n	800319e <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800318c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800318e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003190:	2b01      	cmp	r3, #1
 8003192:	d005      	beq.n	80031a0 <SD_DMAError+0x24>
 8003194:	2a01      	cmp	r2, #1
 8003196:	d003      	beq.n	80031a0 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8003198:	4620      	mov	r0, r4
 800319a:	f7ff fd79 	bl	8002c90 <HAL_SD_ErrorCallback>
}
 800319e:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	4a0f      	ldr	r2, [pc, #60]	@ (80031e0 <SD_DMAError+0x64>)
 80031a4:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80031a6:	6822      	ldr	r2, [r4, #0]
 80031a8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80031aa:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 80031ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80031b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031b6:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff ffcd 	bl	8003158 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80031be:	3805      	subs	r0, #5
 80031c0:	2801      	cmp	r0, #1
 80031c2:	d905      	bls.n	80031d0 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80031ce:	e7e3      	b.n	8003198 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	f000 fe6d 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 80031d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031d8:	4303      	orrs	r3, r0
 80031da:	63a3      	str	r3, [r4, #56]	@ 0x38
 80031dc:	e7f2      	b.n	80031c4 <SD_DMAError+0x48>
 80031de:	bf00      	nop
 80031e0:	004005ff 	.word	0x004005ff

080031e4 <SD_DMATxAbort>:
{
 80031e4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031e6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff ffb1 	bl	8003158 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003200:	3805      	subs	r0, #5
 8003202:	2801      	cmp	r0, #1
 8003204:	d905      	bls.n	8003212 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003206:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003208:	b953      	cbnz	r3, 8003220 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800320a:	4620      	mov	r0, r4
 800320c:	f001 f867 	bl	80042de <HAL_SD_AbortCallback>
}
 8003210:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	f000 fe4c 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 8003218:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800321a:	4303      	orrs	r3, r0
 800321c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800321e:	e7f2      	b.n	8003206 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff fd35 	bl	8002c90 <HAL_SD_ErrorCallback>
}
 8003226:	e7f3      	b.n	8003210 <SD_DMATxAbort+0x2c>

08003228 <SD_DMARxAbort>:
{
 8003228:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800322a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003232:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ff8f 	bl	8003158 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 800323a:	2301      	movs	r3, #1
 800323c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003240:	2300      	movs	r3, #0
 8003242:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003244:	3805      	subs	r0, #5
 8003246:	2801      	cmp	r0, #1
 8003248:	d905      	bls.n	8003256 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800324a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800324c:	b953      	cbnz	r3, 8003264 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800324e:	4620      	mov	r0, r4
 8003250:	f001 f845 	bl	80042de <HAL_SD_AbortCallback>
}
 8003254:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	f000 fe2a 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 800325c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800325e:	4303      	orrs	r3, r0
 8003260:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003262:	e7f2      	b.n	800324a <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff fd13 	bl	8002c90 <HAL_SD_ErrorCallback>
}
 800326a:	e7f3      	b.n	8003254 <SD_DMARxAbort+0x2c>

0800326c <HAL_SD_IRQHandler>:
{
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8003270:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003272:	6803      	ldr	r3, [r0, #0]
 8003274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003276:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800327a:	d002      	beq.n	8003282 <HAL_SD_IRQHandler+0x16>
 800327c:	f015 0f08 	tst.w	r5, #8
 8003280:	d128      	bne.n	80032d4 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003284:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003288:	d05a      	beq.n	8003340 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800328a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003290:	6822      	ldr	r2, [r4, #0]
 8003292:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003294:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003298:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800329c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80032a8:	f015 0f08 	tst.w	r5, #8
 80032ac:	d026      	beq.n	80032fc <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80032ae:	f015 0f22 	tst.w	r5, #34	@ 0x22
 80032b2:	d112      	bne.n	80032da <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032bc:	2301      	movs	r3, #1
 80032be:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80032c6:	f015 0f03 	tst.w	r5, #3
 80032ca:	d013      	beq.n	80032f4 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 80032cc:	4620      	mov	r0, r4
 80032ce:	f001 f80e 	bl	80042ee <HAL_SD_RxCpltCallback>
 80032d2:	e001      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 80032d4:	f7ff fa7a 	bl	80027cc <SD_Read_IT>
}
 80032d8:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f000 fde8 	bl	8003eb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80032e0:	4603      	mov	r3, r0
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d0e6      	beq.n	80032b4 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 80032e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80032e8:	4313      	orrs	r3, r2
 80032ea:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fccf 	bl	8002c90 <HAL_SD_ErrorCallback>
 80032f2:	e7df      	b.n	80032b4 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 80032f4:	4620      	mov	r0, r4
 80032f6:	f000 fff6 	bl	80042e6 <HAL_SD_TxCpltCallback>
 80032fa:	e7ed      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80032fc:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003300:	d0ea      	beq.n	80032d8 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003302:	f015 0f20 	tst.w	r5, #32
 8003306:	d10e      	bne.n	8003326 <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003308:	f015 0f03 	tst.w	r5, #3
 800330c:	d1e4      	bne.n	80032d8 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003312:	f023 0308 	bic.w	r3, r3, #8
 8003316:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003318:	2301      	movs	r3, #1
 800331a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800331e:	4620      	mov	r0, r4
 8003320:	f000 ffe1 	bl	80042e6 <HAL_SD_TxCpltCallback>
 8003324:	e7d8      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	f000 fdc2 	bl	8003eb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800332c:	4603      	mov	r3, r0
 800332e:	2800      	cmp	r0, #0
 8003330:	d0ea      	beq.n	8003308 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8003332:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003334:	4313      	orrs	r3, r2
 8003336:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff fca9 	bl	8002c90 <HAL_SD_ErrorCallback>
 800333e:	e7e3      	b.n	8003308 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003342:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003346:	d002      	beq.n	800334e <HAL_SD_IRQHandler+0xe2>
 8003348:	f015 0f08 	tst.w	r5, #8
 800334c:	d155      	bne.n	80033fa <HAL_SD_IRQHandler+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800334e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003350:	f240 223a 	movw	r2, #570	@ 0x23a
 8003354:	4211      	tst	r1, r2
 8003356:	d0bf      	beq.n	80032d8 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335a:	f012 0f02 	tst.w	r2, #2
 800335e:	d003      	beq.n	8003368 <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003360:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003362:	f042 0202 	orr.w	r2, r2, #2
 8003366:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800336a:	f012 0f08 	tst.w	r2, #8
 800336e:	d003      	beq.n	8003378 <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003370:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003372:	f042 0208 	orr.w	r2, r2, #8
 8003376:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337a:	f012 0f20 	tst.w	r2, #32
 800337e:	d003      	beq.n	8003388 <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003380:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338a:	f012 0f10 	tst.w	r2, #16
 800338e:	d003      	beq.n	8003398 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003390:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003392:	f042 0210 	orr.w	r2, r2, #16
 8003396:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800339a:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800339e:	d003      	beq.n	80033a8 <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80033a2:	f042 0208 	orr.w	r2, r2, #8
 80033a6:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80033a8:	f240 723a 	movw	r2, #1850	@ 0x73a
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80033b2:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80033b6:	f023 0302 	bic.w	r3, r3, #2
 80033ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	f000 fd77 	bl	8003eb0 <SDMMC_CmdStopTransfer>
 80033c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033c4:	4303      	orrs	r3, r0
 80033c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80033c8:	f015 0f08 	tst.w	r5, #8
 80033cc:	d119      	bne.n	8003402 <HAL_SD_IRQHandler+0x196>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80033ce:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80033d2:	d081      	beq.n	80032d8 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80033d4:	f015 0f30 	tst.w	r5, #48	@ 0x30
 80033d8:	d11c      	bne.n	8003414 <HAL_SD_IRQHandler+0x1a8>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80033da:	f015 0f03 	tst.w	r5, #3
 80033de:	d026      	beq.n	800342e <HAL_SD_IRQHandler+0x1c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80033e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033e2:	4a18      	ldr	r2, [pc, #96]	@ (8003444 <HAL_SD_IRQHandler+0x1d8>)
 80033e4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80033e6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80033e8:	f7fe fc3f 	bl	8001c6a <HAL_DMA_Abort_IT>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	f43f af73 	beq.w	80032d8 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 80033f2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80033f4:	f7ff ff18 	bl	8003228 <SD_DMARxAbort>
 80033f8:	e76e      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff fa02 	bl	8002804 <SD_Write_IT>
 8003400:	e76a      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8003402:	2301      	movs	r3, #1
 8003404:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003408:	2300      	movs	r3, #0
 800340a:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800340c:	4620      	mov	r0, r4
 800340e:	f7ff fc3f 	bl	8002c90 <HAL_SD_ErrorCallback>
 8003412:	e761      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003414:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003416:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <HAL_SD_IRQHandler+0x1dc>)
 8003418:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800341a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800341c:	f7fe fc25 	bl	8001c6a <HAL_DMA_Abort_IT>
 8003420:	2800      	cmp	r0, #0
 8003422:	f43f af59 	beq.w	80032d8 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8003426:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003428:	f7ff fedc 	bl	80031e4 <SD_DMATxAbort>
 800342c:	e754      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003432:	2201      	movs	r2, #1
 8003434:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003438:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800343a:	4620      	mov	r0, r4
 800343c:	f000 ff4f 	bl	80042de <HAL_SD_AbortCallback>
}
 8003440:	e74a      	b.n	80032d8 <HAL_SD_IRQHandler+0x6c>
 8003442:	bf00      	nop
 8003444:	08003229 	.word	0x08003229
 8003448:	080031e5 	.word	0x080031e5

0800344c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	f102 030c 	add.w	r3, r2, #12
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	320c      	adds	r2, #12
 800345c:	e842 3100 	strex	r1, r3, [r2]
 8003460:	2900      	cmp	r1, #0
 8003462:	d1f3      	bne.n	800344c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	f102 0314 	add.w	r3, r2, #20
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	3214      	adds	r2, #20
 8003474:	e842 3100 	strex	r1, r3, [r2]
 8003478:	2900      	cmp	r1, #0
 800347a:	d1f3      	bne.n	8003464 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800347c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003482:	2320      	movs	r3, #32
 8003484:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	2300      	movs	r3, #0
 800348a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800348c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	f102 030c 	add.w	r3, r2, #12
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	320c      	adds	r2, #12
 800349e:	e842 3100 	strex	r1, r3, [r2]
 80034a2:	2900      	cmp	r1, #0
 80034a4:	d1f3      	bne.n	800348e <UART_EndRxTransfer+0x42>
 80034a6:	e7ec      	b.n	8003482 <UART_EndRxTransfer+0x36>

080034a8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b21      	cmp	r3, #33	@ 0x21
 80034b0:	d001      	beq.n	80034b6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2002      	movs	r0, #2
  }
}
 80034b4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b6:	6883      	ldr	r3, [r0, #8]
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034bc:	d017      	beq.n	80034ee <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034be:	6a03      	ldr	r3, [r0, #32]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	6202      	str	r2, [r0, #32]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80034ca:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80034d4:	b94b      	cbnz	r3, 80034ea <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d6:	6802      	ldr	r2, [r0, #0]
 80034d8:	68d3      	ldr	r3, [r2, #12]
 80034da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034de:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e0:	6802      	ldr	r2, [r0, #0]
 80034e2:	68d3      	ldr	r3, [r2, #12]
 80034e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034e8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80034ea:	2000      	movs	r0, #0
 80034ec:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ee:	6903      	ldr	r3, [r0, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e4      	bne.n	80034be <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034f4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	6802      	ldr	r2, [r0, #0]
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8003500:	6a03      	ldr	r3, [r0, #32]
 8003502:	3302      	adds	r3, #2
 8003504:	6203      	str	r3, [r0, #32]
 8003506:	e7e0      	b.n	80034ca <UART_Transmit_IT+0x22>

08003508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800350c:	6802      	ldr	r2, [r0, #0]
 800350e:	6913      	ldr	r3, [r2, #16]
 8003510:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003514:	68c1      	ldr	r1, [r0, #12]
 8003516:	430b      	orrs	r3, r1
 8003518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	6883      	ldr	r3, [r0, #8]
 800351c:	6902      	ldr	r2, [r0, #16]
 800351e:	431a      	orrs	r2, r3
 8003520:	6943      	ldr	r3, [r0, #20]
 8003522:	431a      	orrs	r2, r3
 8003524:	69c3      	ldr	r3, [r0, #28]
 8003526:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003528:	6801      	ldr	r1, [r0, #0]
 800352a:	68cb      	ldr	r3, [r1, #12]
 800352c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003530:	f023 030c 	bic.w	r3, r3, #12
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003538:	6802      	ldr	r2, [r0, #0]
 800353a:	6953      	ldr	r3, [r2, #20]
 800353c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003540:	6981      	ldr	r1, [r0, #24]
 8003542:	430b      	orrs	r3, r1
 8003544:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	4a31      	ldr	r2, [pc, #196]	@ (8003610 <UART_SetConfig+0x108>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d006      	beq.n	800355c <UART_SetConfig+0x54>
 800354e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003552:	4293      	cmp	r3, r2
 8003554:	d002      	beq.n	800355c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003556:	f7ff f8b1 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 800355a:	e001      	b.n	8003560 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7ff f8be 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003560:	69e3      	ldr	r3, [r4, #28]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003566:	d029      	beq.n	80035bc <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003568:	2100      	movs	r1, #0
 800356a:	1803      	adds	r3, r0, r0
 800356c:	4149      	adcs	r1, r1
 800356e:	181b      	adds	r3, r3, r0
 8003570:	f141 0100 	adc.w	r1, r1, #0
 8003574:	00c9      	lsls	r1, r1, #3
 8003576:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1818      	adds	r0, r3, r0
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003584:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003588:	f141 0100 	adc.w	r1, r1, #0
 800358c:	f7fd fb0c 	bl	8000ba8 <__aeabi_uldivmod>
 8003590:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <UART_SetConfig+0x10c>)
 8003592:	fba2 3100 	umull	r3, r1, r2, r0
 8003596:	0949      	lsrs	r1, r1, #5
 8003598:	2364      	movs	r3, #100	@ 0x64
 800359a:	fb03 0311 	mls	r3, r3, r1, r0
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	3332      	adds	r3, #50	@ 0x32
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035ac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	6821      	ldr	r1, [r4, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }
}
 80035ba:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035bc:	2300      	movs	r3, #0
 80035be:	1802      	adds	r2, r0, r0
 80035c0:	eb43 0103 	adc.w	r1, r3, r3
 80035c4:	1812      	adds	r2, r2, r0
 80035c6:	f141 0100 	adc.w	r1, r1, #0
 80035ca:	00c9      	lsls	r1, r1, #3
 80035cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d0:	00d2      	lsls	r2, r2, #3
 80035d2:	1810      	adds	r0, r2, r0
 80035d4:	f141 0100 	adc.w	r1, r1, #0
 80035d8:	6862      	ldr	r2, [r4, #4]
 80035da:	1892      	adds	r2, r2, r2
 80035dc:	415b      	adcs	r3, r3
 80035de:	f7fd fae3 	bl	8000ba8 <__aeabi_uldivmod>
 80035e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <UART_SetConfig+0x10c>)
 80035e4:	fba2 3100 	umull	r3, r1, r2, r0
 80035e8:	0949      	lsrs	r1, r1, #5
 80035ea:	2364      	movs	r3, #100	@ 0x64
 80035ec:	fb03 0311 	mls	r3, r3, r1, r0
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	3332      	adds	r3, #50	@ 0x32
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	005a      	lsls	r2, r3, #1
 80035fc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003600:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	6821      	ldr	r1, [r4, #0]
 800360a:	4413      	add	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
 800360e:	e7d4      	b.n	80035ba <UART_SetConfig+0xb2>
 8003610:	40011000 	.word	0x40011000
 8003614:	51eb851f 	.word	0x51eb851f

08003618 <UART_WaitOnFlagUntilTimeout>:
{
 8003618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800361c:	b083      	sub	sp, #12
 800361e:	4605      	mov	r5, r0
 8003620:	460e      	mov	r6, r1
 8003622:	4617      	mov	r7, r2
 8003624:	4699      	mov	r9, r3
 8003626:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	681c      	ldr	r4, [r3, #0]
 800362e:	ea36 0404 	bics.w	r4, r6, r4
 8003632:	bf0c      	ite	eq
 8003634:	2401      	moveq	r4, #1
 8003636:	2400      	movne	r4, #0
 8003638:	42bc      	cmp	r4, r7
 800363a:	d128      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800363c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003640:	d0f3      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe f917 	bl	8001874 <HAL_GetTick>
 8003646:	eba0 0009 	sub.w	r0, r0, r9
 800364a:	4540      	cmp	r0, r8
 800364c:	d823      	bhi.n	8003696 <UART_WaitOnFlagUntilTimeout+0x7e>
 800364e:	f1b8 0f00 	cmp.w	r8, #0
 8003652:	d022      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	f012 0f04 	tst.w	r2, #4
 800365c:	d0e5      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
 800365e:	2e80      	cmp	r6, #128	@ 0x80
 8003660:	d0e3      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
 8003662:	2e40      	cmp	r6, #64	@ 0x40
 8003664:	d0e1      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	f012 0f08 	tst.w	r2, #8
 800366c:	d0dd      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800366e:	2400      	movs	r4, #0
 8003670:	9401      	str	r4, [sp, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	9201      	str	r2, [sp, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800367c:	4628      	mov	r0, r5
 800367e:	f7ff fee5 	bl	800344c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003682:	2308      	movs	r3, #8
 8003684:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003686:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
 800368c:	e000      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800368e:	2000      	movs	r0, #0
}
 8003690:	b003      	add	sp, #12
 8003692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003696:	2003      	movs	r0, #3
 8003698:	e7fa      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x78>
 800369a:	2003      	movs	r0, #3
 800369c:	e7f8      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x78>

0800369e <HAL_UART_Init>:
  if (huart == NULL)
 800369e:	b360      	cbz	r0, 80036fa <HAL_UART_Init+0x5c>
{
 80036a0:	b510      	push	{r4, lr}
 80036a2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80036a4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80036a8:	b313      	cbz	r3, 80036f0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80036aa:	2324      	movs	r3, #36	@ 0x24
 80036ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80036b0:	6822      	ldr	r2, [r4, #0]
 80036b2:	68d3      	ldr	r3, [r2, #12]
 80036b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036b8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff ff24 	bl	8003508 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	6913      	ldr	r3, [r2, #16]
 80036c4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80036c8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	6953      	ldr	r3, [r2, #20]
 80036ce:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80036d2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	68d3      	ldr	r3, [r2, #12]
 80036d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036dc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036de:	2000      	movs	r0, #0
 80036e0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036e2:	2320      	movs	r3, #32
 80036e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ec:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80036ee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80036f0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80036f4:	f7fd ff8a 	bl	800160c <HAL_UART_MspInit>
 80036f8:	e7d7      	b.n	80036aa <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80036fa:	2001      	movs	r0, #1
}
 80036fc:	4770      	bx	lr

080036fe <HAL_UART_Transmit>:
{
 80036fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003706:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	d156      	bne.n	80037be <HAL_UART_Transmit+0xc0>
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
 8003714:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003716:	2900      	cmp	r1, #0
 8003718:	d055      	beq.n	80037c6 <HAL_UART_Transmit+0xc8>
 800371a:	b90a      	cbnz	r2, 8003720 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800371c:	2001      	movs	r0, #1
 800371e:	e04f      	b.n	80037c0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	2300      	movs	r3, #0
 8003722:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003724:	2321      	movs	r3, #33	@ 0x21
 8003726:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800372a:	f7fe f8a3 	bl	8001874 <HAL_GetTick>
 800372e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003730:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003734:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68a3      	ldr	r3, [r4, #8]
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373e:	d002      	beq.n	8003746 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003740:	f04f 0800 	mov.w	r8, #0
 8003744:	e014      	b.n	8003770 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	b32b      	cbz	r3, 8003796 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800374a:	f04f 0800 	mov.w	r8, #0
 800374e:	e00f      	b.n	8003770 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003750:	2320      	movs	r3, #32
 8003752:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3
 8003758:	e032      	b.n	80037c0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800375a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003764:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003766:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003768:	b292      	uxth	r2, r2
 800376a:	3a01      	subs	r2, #1
 800376c:	b292      	uxth	r2, r2
 800376e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003770:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003772:	b29b      	uxth	r3, r3
 8003774:	b193      	cbz	r3, 800379c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003776:	9600      	str	r6, [sp, #0]
 8003778:	463b      	mov	r3, r7
 800377a:	2200      	movs	r2, #0
 800377c:	2180      	movs	r1, #128	@ 0x80
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff ff4a 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8003784:	2800      	cmp	r0, #0
 8003786:	d1e3      	bne.n	8003750 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003788:	2d00      	cmp	r5, #0
 800378a:	d0e6      	beq.n	800375a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003794:	e7e7      	b.n	8003766 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003796:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003798:	2500      	movs	r5, #0
 800379a:	e7e9      	b.n	8003770 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379c:	9600      	str	r6, [sp, #0]
 800379e:	463b      	mov	r3, r7
 80037a0:	2200      	movs	r2, #0
 80037a2:	2140      	movs	r1, #64	@ 0x40
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ff37 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80037aa:	b918      	cbnz	r0, 80037b4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	2320      	movs	r3, #32
 80037ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80037b2:	e005      	b.n	80037c0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80037b4:	2320      	movs	r3, #32
 80037b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80037ba:	2003      	movs	r0, #3
 80037bc:	e000      	b.n	80037c0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80037be:	2002      	movs	r0, #2
}
 80037c0:	b002      	add	sp, #8
 80037c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80037c6:	2001      	movs	r0, #1
 80037c8:	e7fa      	b.n	80037c0 <HAL_UART_Transmit+0xc2>

080037ca <HAL_UART_TxCpltCallback>:
}
 80037ca:	4770      	bx	lr

080037cc <UART_EndTransmit_IT>:
{
 80037cc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ce:	6801      	ldr	r1, [r0, #0]
 80037d0:	68ca      	ldr	r2, [r1, #12]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	2220      	movs	r2, #32
 80037da:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80037de:	f7ff fff4 	bl	80037ca <HAL_UART_TxCpltCallback>
}
 80037e2:	2000      	movs	r0, #0
 80037e4:	bd08      	pop	{r3, pc}

080037e6 <HAL_UART_RxCpltCallback>:
}
 80037e6:	4770      	bx	lr

080037e8 <HAL_UART_ErrorCallback>:
}
 80037e8:	4770      	bx	lr

080037ea <UART_DMAAbortOnError>:
{
 80037ea:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ec:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037f2:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80037f4:	f7ff fff8 	bl	80037e8 <HAL_UART_ErrorCallback>
}
 80037f8:	bd08      	pop	{r3, pc}

080037fa <HAL_UARTEx_RxEventCallback>:
}
 80037fa:	4770      	bx	lr

080037fc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b22      	cmp	r3, #34	@ 0x22
 8003804:	d169      	bne.n	80038da <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003806:	6883      	ldr	r3, [r0, #8]
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380c:	d04f      	beq.n	80038ae <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800380e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d004      	beq.n	8003820 <UART_Receive_IT+0x24>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d156      	bne.n	80038c8 <UART_Receive_IT+0xcc>
 800381a:	6903      	ldr	r3, [r0, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d153      	bne.n	80038c8 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003820:	6803      	ldr	r3, [r0, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003826:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003828:	3301      	adds	r3, #1
 800382a:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800382c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29b      	uxth	r3, r3
 8003834:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003836:	2b00      	cmp	r3, #0
 8003838:	d151      	bne.n	80038de <UART_Receive_IT+0xe2>
{
 800383a:	b500      	push	{lr}
 800383c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800383e:	6802      	ldr	r2, [r0, #0]
 8003840:	68d3      	ldr	r3, [r2, #12]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003848:	6802      	ldr	r2, [r0, #0]
 800384a:	68d3      	ldr	r3, [r2, #12]
 800384c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003850:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003852:	6802      	ldr	r2, [r0, #0]
 8003854:	6953      	ldr	r3, [r2, #20]
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800385c:	2320      	movs	r3, #32
 800385e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003862:	2300      	movs	r3, #0
 8003864:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003866:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003868:	2b01      	cmp	r3, #1
 800386a:	d133      	bne.n	80038d4 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386c:	2300      	movs	r3, #0
 800386e:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003870:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	f102 030c 	add.w	r3, r2, #12
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	320c      	adds	r2, #12
 8003880:	e842 3100 	strex	r1, r3, [r2]
 8003884:	2900      	cmp	r1, #0
 8003886:	d1f3      	bne.n	8003870 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003888:	6803      	ldr	r3, [r0, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	f012 0f10 	tst.w	r2, #16
 8003890:	d006      	beq.n	80038a0 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003892:	2200      	movs	r2, #0
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	9201      	str	r2, [sp, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038a0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80038a2:	f7ff ffaa 	bl	80037fa <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80038a6:	2000      	movs	r0, #0
}
 80038a8:	b003      	add	sp, #12
 80038aa:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ae:	6902      	ldr	r2, [r0, #16]
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	d1ac      	bne.n	800380e <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038be:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80038c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80038c2:	3302      	adds	r3, #2
 80038c4:	6283      	str	r3, [r0, #40]	@ 0x28
 80038c6:	e7b1      	b.n	800382c <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038c8:	6803      	ldr	r3, [r0, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038d0:	7013      	strb	r3, [r2, #0]
 80038d2:	e7a8      	b.n	8003826 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80038d4:	f7ff ff87 	bl	80037e6 <HAL_UART_RxCpltCallback>
 80038d8:	e7e5      	b.n	80038a6 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80038da:	2002      	movs	r0, #2
 80038dc:	4770      	bx	lr
    return HAL_OK;
 80038de:	2000      	movs	r0, #0
}
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_UART_IRQHandler>:
{
 80038e4:	b510      	push	{r4, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038ea:	6802      	ldr	r2, [r0, #0]
 80038ec:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ee:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80038f2:	f013 0f0f 	tst.w	r3, #15
 80038f6:	d109      	bne.n	800390c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f8:	f013 0f20 	tst.w	r3, #32
 80038fc:	d00c      	beq.n	8003918 <HAL_UART_IRQHandler+0x34>
 80038fe:	f010 0f20 	tst.w	r0, #32
 8003902:	d009      	beq.n	8003918 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8003904:	4620      	mov	r0, r4
 8003906:	f7ff ff79 	bl	80037fc <UART_Receive_IT>
      return;
 800390a:	e016      	b.n	800393a <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800390c:	f011 0101 	ands.w	r1, r1, #1
 8003910:	d115      	bne.n	800393e <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003912:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8003916:	d112      	bne.n	800393e <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800391a:	2901      	cmp	r1, #1
 800391c:	d079      	beq.n	8003a12 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800391e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003922:	d003      	beq.n	800392c <HAL_UART_IRQHandler+0x48>
 8003924:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003928:	f040 8114 	bne.w	8003b54 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800392c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003930:	d003      	beq.n	800393a <HAL_UART_IRQHandler+0x56>
 8003932:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003936:	f040 8111 	bne.w	8003b5c <HAL_UART_IRQHandler+0x278>
}
 800393a:	b002      	add	sp, #8
 800393c:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800393e:	f013 0f01 	tst.w	r3, #1
 8003942:	d006      	beq.n	8003952 <HAL_UART_IRQHandler+0x6e>
 8003944:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003948:	d003      	beq.n	8003952 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800394a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003952:	f013 0f04 	tst.w	r3, #4
 8003956:	d004      	beq.n	8003962 <HAL_UART_IRQHandler+0x7e>
 8003958:	b119      	cbz	r1, 8003962 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800395a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800395c:	f042 0202 	orr.w	r2, r2, #2
 8003960:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003962:	f013 0f02 	tst.w	r3, #2
 8003966:	d004      	beq.n	8003972 <HAL_UART_IRQHandler+0x8e>
 8003968:	b119      	cbz	r1, 8003972 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800396c:	f042 0204 	orr.w	r2, r2, #4
 8003970:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003972:	f013 0f08 	tst.w	r3, #8
 8003976:	d007      	beq.n	8003988 <HAL_UART_IRQHandler+0xa4>
 8003978:	f010 0f20 	tst.w	r0, #32
 800397c:	d100      	bne.n	8003980 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800397e:	b119      	cbz	r1, 8003988 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003980:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003988:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800398a:	2a00      	cmp	r2, #0
 800398c:	d0d5      	beq.n	800393a <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398e:	f013 0f20 	tst.w	r3, #32
 8003992:	d002      	beq.n	800399a <HAL_UART_IRQHandler+0xb6>
 8003994:	f010 0f20 	tst.w	r0, #32
 8003998:	d129      	bne.n	80039ee <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039a2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80039a4:	f012 0f08 	tst.w	r2, #8
 80039a8:	d100      	bne.n	80039ac <HAL_UART_IRQHandler+0xc8>
 80039aa:	b363      	cbz	r3, 8003a06 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7ff fd4d 	bl	800344c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80039ba:	d020      	beq.n	80039fe <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	f102 0314 	add.w	r3, r2, #20
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	3214      	adds	r2, #20
 80039cc:	e842 3100 	strex	r1, r3, [r2]
 80039d0:	2900      	cmp	r1, #0
 80039d2:	d1f3      	bne.n	80039bc <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80039d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039d6:	b173      	cbz	r3, 80039f6 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d8:	4a62      	ldr	r2, [pc, #392]	@ (8003b64 <HAL_UART_IRQHandler+0x280>)
 80039da:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039dc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039de:	f7fe f944 	bl	8001c6a <HAL_DMA_Abort_IT>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0a9      	beq.n	800393a <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039e6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039e8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80039ea:	4798      	blx	r3
 80039ec:	e7a5      	b.n	800393a <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff ff04 	bl	80037fc <UART_Receive_IT>
 80039f4:	e7d1      	b.n	800399a <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fef6 	bl	80037e8 <HAL_UART_ErrorCallback>
 80039fc:	e79d      	b.n	800393a <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff fef2 	bl	80037e8 <HAL_UART_ErrorCallback>
 8003a04:	e799      	b.n	800393a <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff feee 	bl	80037e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8003a10:	e793      	b.n	800393a <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a12:	f013 0f10 	tst.w	r3, #16
 8003a16:	d082      	beq.n	800391e <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a18:	f010 0f10 	tst.w	r0, #16
 8003a1c:	f43f af7f 	beq.w	800391e <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a20:	2300      	movs	r3, #0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	6853      	ldr	r3, [r2, #4]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2e:	6953      	ldr	r3, [r2, #20]
 8003a30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003a34:	d052      	beq.n	8003adc <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a36:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f43f af7b 	beq.w	800393a <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a44:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003a46:	4299      	cmp	r1, r3
 8003a48:	f67f af77 	bls.w	800393a <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003a4c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a4e:	69d3      	ldr	r3, [r2, #28]
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a54:	d037      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	f102 030c 	add.w	r3, r2, #12
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	320c      	adds	r2, #12
 8003a66:	e842 3100 	strex	r1, r3, [r2]
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	d1f3      	bne.n	8003a56 <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	f102 0314 	add.w	r3, r2, #20
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	3214      	adds	r2, #20
 8003a7e:	e842 3100 	strex	r1, r3, [r2]
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d1f3      	bne.n	8003a6e <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	f102 0314 	add.w	r3, r2, #20
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	3214      	adds	r2, #20
 8003a96:	e842 3100 	strex	r1, r3, [r2]
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d1f3      	bne.n	8003a86 <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	f102 030c 	add.w	r3, r2, #12
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	320c      	adds	r2, #12
 8003ab8:	e842 3100 	strex	r1, r3, [r2]
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d1f3      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ac0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003ac2:	f7fe f888 	bl	8001bd6 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aca:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003acc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	1ac9      	subs	r1, r1, r3
 8003ad2:	b289      	uxth	r1, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fe90 	bl	80037fa <HAL_UARTEx_RxEventCallback>
      return;
 8003ada:	e72e      	b.n	800393a <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003adc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003ade:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	1ac9      	subs	r1, r1, r3
 8003ae4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003ae6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f43f af25 	beq.w	800393a <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003af0:	2900      	cmp	r1, #0
 8003af2:	f43f af22 	beq.w	800393a <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	f102 030c 	add.w	r3, r2, #12
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	320c      	adds	r2, #12
 8003b06:	e842 3000 	strex	r0, r3, [r2]
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d1f3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	f102 0314 	add.w	r3, r2, #20
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	3214      	adds	r2, #20
 8003b1e:	e842 3000 	strex	r0, r3, [r2]
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d1f3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	2320      	movs	r3, #32
 8003b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	f102 030c 	add.w	r3, r2, #12
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	320c      	adds	r2, #12
 8003b40:	e842 3000 	strex	r0, r3, [r2]
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d1f3      	bne.n	8003b30 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f7ff fe54 	bl	80037fa <HAL_UARTEx_RxEventCallback>
      return;
 8003b52:	e6f2      	b.n	800393a <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff fca7 	bl	80034a8 <UART_Transmit_IT>
    return;
 8003b5a:	e6ee      	b.n	800393a <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f7ff fe35 	bl	80037cc <UART_EndTransmit_IT>
    return;
 8003b62:	e6ea      	b.n	800393a <HAL_UART_IRQHandler+0x56>
 8003b64:	080037eb 	.word	0x080037eb

08003b68 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <SDMMC_GetCmdError+0x30>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b9c <SDMMC_GetCmdError+0x34>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0a5b      	lsrs	r3, r3, #9
 8003b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b13a      	cbz	r2, 8003b92 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003b82:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003b84:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003b88:	d0f8      	beq.n	8003b7c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b8a:	23c5      	movs	r3, #197	@ 0xc5
 8003b8c:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003b92:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003b96:	4770      	bx	lr
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	10624dd3 	.word	0x10624dd3

08003ba0 <SDIO_Init>:
{
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	f10d 0c04 	add.w	ip, sp, #4
 8003ba6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8003bae:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8003bb0:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8003bb2:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8003bb4:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8003bb6:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8003bb8:	4313      	orrs	r3, r2
             Init.ClockDiv
 8003bba:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8003bbc:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003bbe:	6842      	ldr	r2, [r0, #4]
 8003bc0:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8003bc4:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	6043      	str	r3, [r0, #4]
}
 8003bcc:	2000      	movs	r0, #0
 8003bce:	b004      	add	sp, #16
 8003bd0:	4770      	bx	lr

08003bd2 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8003bd2:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8003bd6:	4770      	bx	lr

08003bd8 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 8003bde:	2000      	movs	r0, #0
 8003be0:	4770      	bx	lr

08003be2 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003be2:	2303      	movs	r3, #3
 8003be4:	6003      	str	r3, [r0, #0]
}
 8003be6:	2000      	movs	r0, #0
 8003be8:	4770      	bx	lr

08003bea <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003bea:	6800      	ldr	r0, [r0, #0]
}
 8003bec:	f000 0003 	and.w	r0, r0, #3
 8003bf0:	4770      	bx	lr

08003bf2 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003bf2:	680b      	ldr	r3, [r1, #0]
 8003bf4:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003bf6:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8003bf8:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003bfa:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8003bfc:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8003bfe:	4313      	orrs	r3, r2
                       Command->CPSM);
 8003c00:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8003c02:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c04:	68c2      	ldr	r2, [r0, #12]
 8003c06:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 8003c0a:	f022 020f 	bic.w	r2, r2, #15
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60c3      	str	r3, [r0, #12]
}
 8003c12:	2000      	movs	r0, #0
 8003c14:	4770      	bx	lr

08003c16 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8003c16:	6900      	ldr	r0, [r0, #16]
}
 8003c18:	b2c0      	uxtb	r0, r0
 8003c1a:	4770      	bx	lr

08003c1c <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003c1c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8003c1e:	5840      	ldr	r0, [r0, r1]
}  
 8003c20:	4770      	bx	lr

08003c22 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c22:	680b      	ldr	r3, [r1, #0]
 8003c24:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 8003c26:	684b      	ldr	r3, [r1, #4]
 8003c28:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c2a:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8003c2c:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c2e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8003c30:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8003c32:	4313      	orrs	r3, r2
                       Data->DPSM);
 8003c34:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8003c36:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c38:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8003c3a:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 8003c42:	2000      	movs	r0, #0
 8003c44:	4770      	bx	lr

08003c46 <SDMMC_CmdGoIdleState>:
{
 8003c46:	b510      	push	{r4, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003c50:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003c52:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c54:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c5a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c5c:	a901      	add	r1, sp, #4
 8003c5e:	f7ff ffc8 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff ff80 	bl	8003b68 <SDMMC_GetCmdError>
}
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd10      	pop	{r4, pc}

08003c6c <SDMMC_GetCmdResp1>:
{
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4604      	mov	r4, r0
 8003c70:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c72:	4b50      	ldr	r3, [pc, #320]	@ (8003db4 <SDMMC_GetCmdResp1+0x148>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4950      	ldr	r1, [pc, #320]	@ (8003db8 <SDMMC_GetCmdResp1+0x14c>)
 8003c78:	fba1 1303 	umull	r1, r3, r1, r3
 8003c7c:	0a5b      	lsrs	r3, r3, #9
 8003c7e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8003c82:	4613      	mov	r3, r2
 8003c84:	3a01      	subs	r2, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d05d      	beq.n	8003d46 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8003c8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c8c:	f013 0f45 	tst.w	r3, #69	@ 0x45
 8003c90:	d0f7      	beq.n	8003c82 <SDMMC_GetCmdResp1+0x16>
 8003c92:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003c96:	d1f4      	bne.n	8003c82 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c9a:	f013 0f04 	tst.w	r3, #4
 8003c9e:	d106      	bne.n	8003cae <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ca2:	f013 0f01 	tst.w	r3, #1
 8003ca6:	d005      	beq.n	8003cb4 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cac:	e04d      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003cae:	2004      	movs	r0, #4
 8003cb0:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cb2:	e04a      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003cb4:	23c5      	movs	r3, #197	@ 0xc5
 8003cb6:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff ffac 	bl	8003c16 <SDIO_GetCommandResponse>
 8003cbe:	42a8      	cmp	r0, r5
 8003cc0:	d001      	beq.n	8003cc6 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	e041      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff ffa7 	bl	8003c1c <SDIO_GetResponse>
 8003cce:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003cd0:	483a      	ldr	r0, [pc, #232]	@ (8003dbc <SDMMC_GetCmdResp1+0x150>)
 8003cd2:	4018      	ands	r0, r3
 8003cd4:	b3c8      	cbz	r0, 8003d4a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db38      	blt.n	8003d4c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003cda:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003cde:	d138      	bne.n	8003d52 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003ce0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003ce4:	d137      	bne.n	8003d56 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003ce6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003cea:	d136      	bne.n	8003d5a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003cec:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8003cf0:	d136      	bne.n	8003d60 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003cf2:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8003cf6:	d136      	bne.n	8003d66 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003cf8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003cfc:	d136      	bne.n	8003d6c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003cfe:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003d02:	d136      	bne.n	8003d72 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003d04:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003d08:	d136      	bne.n	8003d78 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003d0a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8003d0e:	d136      	bne.n	8003d7e <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003d10:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003d14:	d136      	bne.n	8003d84 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003d16:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003d1a:	d136      	bne.n	8003d8a <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003d1c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003d20:	d136      	bne.n	8003d90 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003d22:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003d26:	d136      	bne.n	8003d96 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003d28:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003d2c:	d136      	bne.n	8003d9c <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003d2e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003d32:	d136      	bne.n	8003da2 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003d34:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003d38:	d136      	bne.n	8003da8 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003d3a:	f013 0f08 	tst.w	r3, #8
 8003d3e:	d036      	beq.n	8003dae <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003d40:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003d44:	e001      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8003d46:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003d4c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003d50:	e7fb      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003d52:	2040      	movs	r0, #64	@ 0x40
 8003d54:	e7f9      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d56:	2080      	movs	r0, #128	@ 0x80
 8003d58:	e7f7      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d5a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003d5e:	e7f4      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003d64:	e7f1      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d66:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d6a:	e7ee      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003d6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d70:	e7eb      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d72:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d76:	e7e8      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003d7c:	e7e5      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003d7e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003d82:	e7e2      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8003d84:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003d88:	e7df      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003d8a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003d8e:	e7dc      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003d90:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003d94:	e7d9      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003d96:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d9a:	e7d6      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003d9c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003da0:	e7d3      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003da2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003da6:	e7d0      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8003da8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8003dac:	e7cd      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003dae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003db2:	e7ca      	b.n	8003d4a <SDMMC_GetCmdResp1+0xde>
 8003db4:	20000000 	.word	0x20000000
 8003db8:	10624dd3 	.word	0x10624dd3
 8003dbc:	fdffe008 	.word	0xfdffe008

08003dc0 <SDMMC_CmdBlockLength>:
{
 8003dc0:	b530      	push	{r4, r5, lr}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003dc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003dc8:	2510      	movs	r5, #16
 8003dca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dcc:	2340      	movs	r3, #64	@ 0x40
 8003dce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dd8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dda:	a901      	add	r1, sp, #4
 8003ddc:	f7ff ff09 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4629      	mov	r1, r5
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7ff ff40 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003dec:	b007      	add	sp, #28
 8003dee:	bd30      	pop	{r4, r5, pc}

08003df0 <SDMMC_CmdReadSingleBlock>:
{
 8003df0:	b530      	push	{r4, r5, lr}
 8003df2:	b087      	sub	sp, #28
 8003df4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003df6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003df8:	2511      	movs	r5, #17
 8003dfa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dfc:	2340      	movs	r3, #64	@ 0x40
 8003dfe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e00:	2300      	movs	r3, #0
 8003e02:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e08:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e0a:	a901      	add	r1, sp, #4
 8003e0c:	f7ff fef1 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e14:	4629      	mov	r1, r5
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7ff ff28 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003e1c:	b007      	add	sp, #28
 8003e1e:	bd30      	pop	{r4, r5, pc}

08003e20 <SDMMC_CmdReadMultiBlock>:
{
 8003e20:	b530      	push	{r4, r5, lr}
 8003e22:	b087      	sub	sp, #28
 8003e24:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e26:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e28:	2512      	movs	r5, #18
 8003e2a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e2c:	2340      	movs	r3, #64	@ 0x40
 8003e2e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e30:	2300      	movs	r3, #0
 8003e32:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e38:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e3a:	a901      	add	r1, sp, #4
 8003e3c:	f7ff fed9 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e44:	4629      	mov	r1, r5
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7ff ff10 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003e4c:	b007      	add	sp, #28
 8003e4e:	bd30      	pop	{r4, r5, pc}

08003e50 <SDMMC_CmdWriteSingleBlock>:
{
 8003e50:	b530      	push	{r4, r5, lr}
 8003e52:	b087      	sub	sp, #28
 8003e54:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e56:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e58:	2518      	movs	r5, #24
 8003e5a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e5c:	2340      	movs	r3, #64	@ 0x40
 8003e5e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e60:	2300      	movs	r3, #0
 8003e62:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e68:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e6a:	a901      	add	r1, sp, #4
 8003e6c:	f7ff fec1 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4629      	mov	r1, r5
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7ff fef8 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003e7c:	b007      	add	sp, #28
 8003e7e:	bd30      	pop	{r4, r5, pc}

08003e80 <SDMMC_CmdWriteMultiBlock>:
{
 8003e80:	b530      	push	{r4, r5, lr}
 8003e82:	b087      	sub	sp, #28
 8003e84:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e86:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003e88:	2519      	movs	r5, #25
 8003e8a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e8c:	2340      	movs	r3, #64	@ 0x40
 8003e8e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e90:	2300      	movs	r3, #0
 8003e92:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e98:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e9a:	a901      	add	r1, sp, #4
 8003e9c:	f7ff fea9 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f7ff fee0 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003eac:	b007      	add	sp, #28
 8003eae:	bd30      	pop	{r4, r5, pc}

08003eb0 <SDMMC_CmdStopTransfer>:
{
 8003eb0:	b530      	push	{r4, r5, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003eba:	250c      	movs	r5, #12
 8003ebc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eca:	a901      	add	r1, sp, #4
 8003ecc:	f7ff fe91 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003ed0:	4a03      	ldr	r2, [pc, #12]	@ (8003ee0 <SDMMC_CmdStopTransfer+0x30>)
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f7ff fec9 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003eda:	b007      	add	sp, #28
 8003edc:	bd30      	pop	{r4, r5, pc}
 8003ede:	bf00      	nop
 8003ee0:	05f5e100 	.word	0x05f5e100

08003ee4 <SDMMC_CmdSelDesel>:
{
 8003ee4:	b530      	push	{r4, r5, lr}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003eea:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003eec:	2507      	movs	r5, #7
 8003eee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ef0:	2340      	movs	r3, #64	@ 0x40
 8003ef2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003efc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003efe:	a901      	add	r1, sp, #4
 8003f00:	f7ff fe77 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff feae 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003f10:	b007      	add	sp, #28
 8003f12:	bd30      	pop	{r4, r5, pc}

08003f14 <SDMMC_CmdAppCommand>:
{
 8003f14:	b530      	push	{r4, r5, lr}
 8003f16:	b087      	sub	sp, #28
 8003f18:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003f1a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003f1c:	2537      	movs	r5, #55	@ 0x37
 8003f1e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f20:	2340      	movs	r3, #64	@ 0x40
 8003f22:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f24:	2300      	movs	r3, #0
 8003f26:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f2c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f2e:	a901      	add	r1, sp, #4
 8003f30:	f7ff fe5f 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fe96 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003f40:	b007      	add	sp, #28
 8003f42:	bd30      	pop	{r4, r5, pc}

08003f44 <SDMMC_CmdBusWidth>:
{
 8003f44:	b530      	push	{r4, r5, lr}
 8003f46:	b087      	sub	sp, #28
 8003f48:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003f4a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003f4c:	2506      	movs	r5, #6
 8003f4e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f50:	2340      	movs	r3, #64	@ 0x40
 8003f52:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f54:	2300      	movs	r3, #0
 8003f56:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f5e:	a901      	add	r1, sp, #4
 8003f60:	f7ff fe47 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7ff fe7e 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003f70:	b007      	add	sp, #28
 8003f72:	bd30      	pop	{r4, r5, pc}

08003f74 <SDMMC_CmdSendSCR>:
{
 8003f74:	b530      	push	{r4, r5, lr}
 8003f76:	b087      	sub	sp, #28
 8003f78:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003f7e:	2533      	movs	r5, #51	@ 0x33
 8003f80:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f86:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f8c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f8e:	a901      	add	r1, sp, #4
 8003f90:	f7ff fe2f 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7ff fe66 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003fa0:	b007      	add	sp, #28
 8003fa2:	bd30      	pop	{r4, r5, pc}

08003fa4 <SDMMC_CmdSendStatus>:
{
 8003fa4:	b530      	push	{r4, r5, lr}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003faa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003fac:	250d      	movs	r5, #13
 8003fae:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fb0:	2340      	movs	r3, #64	@ 0x40
 8003fb2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fbc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fbe:	a901      	add	r1, sp, #4
 8003fc0:	f7ff fe17 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7ff fe4e 	bl	8003c6c <SDMMC_GetCmdResp1>
}
 8003fd0:	b007      	add	sp, #28
 8003fd2:	bd30      	pop	{r4, r5, pc}

08003fd4 <SDMMC_GetCmdResp2>:
{
 8003fd4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fd6:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <SDMMC_GetCmdResp2+0x54>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a14      	ldr	r2, [pc, #80]	@ (800402c <SDMMC_GetCmdResp2+0x58>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	0a5b      	lsrs	r3, r3, #9
 8003fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8003fea:	461a      	mov	r2, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b1ba      	cbz	r2, 8004020 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8003ff0:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ff2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8003ff6:	d0f8      	beq.n	8003fea <SDMMC_GetCmdResp2+0x16>
 8003ff8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003ffc:	d1f5      	bne.n	8003fea <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ffe:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004000:	f013 0f04 	tst.w	r3, #4
 8004004:	d106      	bne.n	8004014 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004006:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004008:	f010 0001 	ands.w	r0, r0, #1
 800400c:	d105      	bne.n	800401a <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800400e:	23c5      	movs	r3, #197	@ 0xc5
 8004010:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004012:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004014:	2004      	movs	r0, #4
 8004016:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004018:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800401a:	2001      	movs	r0, #1
 800401c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800401e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004020:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000000 	.word	0x20000000
 800402c:	10624dd3 	.word	0x10624dd3

08004030 <SDMMC_CmdSendCID>:
{
 8004030:	b510      	push	{r4, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800403a:	2202      	movs	r2, #2
 800403c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800403e:	22c0      	movs	r2, #192	@ 0xc0
 8004040:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004042:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004048:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800404a:	a901      	add	r1, sp, #4
 800404c:	f7ff fdd1 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004050:	4620      	mov	r0, r4
 8004052:	f7ff ffbf 	bl	8003fd4 <SDMMC_GetCmdResp2>
}
 8004056:	b006      	add	sp, #24
 8004058:	bd10      	pop	{r4, pc}

0800405a <SDMMC_CmdSendCSD>:
{
 800405a:	b510      	push	{r4, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004060:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004062:	2309      	movs	r3, #9
 8004064:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004066:	23c0      	movs	r3, #192	@ 0xc0
 8004068:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800406a:	2300      	movs	r3, #0
 800406c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800406e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004072:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004074:	a901      	add	r1, sp, #4
 8004076:	f7ff fdbc 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff ffaa 	bl	8003fd4 <SDMMC_GetCmdResp2>
}
 8004080:	b006      	add	sp, #24
 8004082:	bd10      	pop	{r4, pc}

08004084 <SDMMC_GetCmdResp3>:
{
 8004084:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <SDMMC_GetCmdResp3+0x44>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a10      	ldr	r2, [pc, #64]	@ (80040cc <SDMMC_GetCmdResp3+0x48>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	0a5b      	lsrs	r3, r3, #9
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800409a:	461a      	mov	r2, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b182      	cbz	r2, 80040c2 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 80040a0:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040a2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80040a6:	d0f8      	beq.n	800409a <SDMMC_GetCmdResp3+0x16>
 80040a8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80040ac:	d1f5      	bne.n	800409a <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040ae:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80040b0:	f010 0004 	ands.w	r0, r0, #4
 80040b4:	d102      	bne.n	80040bc <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040b6:	23c5      	movs	r3, #197	@ 0xc5
 80040b8:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80040ba:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040bc:	2004      	movs	r0, #4
 80040be:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040c0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80040c2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80040c6:	4770      	bx	lr
 80040c8:	20000000 	.word	0x20000000
 80040cc:	10624dd3 	.word	0x10624dd3

080040d0 <SDMMC_CmdAppOperCommand>:
{
 80040d0:	b510      	push	{r4, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80040d6:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80040da:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80040de:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80040e0:	2329      	movs	r3, #41	@ 0x29
 80040e2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040e4:	2340      	movs	r3, #64	@ 0x40
 80040e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040e8:	2300      	movs	r3, #0
 80040ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040f0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040f2:	a901      	add	r1, sp, #4
 80040f4:	f7ff fd7d 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff ffc3 	bl	8004084 <SDMMC_GetCmdResp3>
}
 80040fe:	b006      	add	sp, #24
 8004100:	bd10      	pop	{r4, pc}
	...

08004104 <SDMMC_GetCmdResp6>:
{
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	4605      	mov	r5, r0
 8004108:	460e      	mov	r6, r1
 800410a:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800410c:	4b23      	ldr	r3, [pc, #140]	@ (800419c <SDMMC_GetCmdResp6+0x98>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <SDMMC_GetCmdResp6+0x9c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a5b      	lsrs	r3, r3, #9
 8004118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411c:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004120:	461a      	mov	r2, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b38a      	cbz	r2, 800418a <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8004126:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004128:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800412c:	d0f8      	beq.n	8004120 <SDMMC_GetCmdResp6+0x1c>
 800412e:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8004132:	d1f5      	bne.n	8004120 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004134:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004136:	f013 0f04 	tst.w	r3, #4
 800413a:	d106      	bne.n	800414a <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800413c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800413e:	f013 0f01 	tst.w	r3, #1
 8004142:	d005      	beq.n	8004150 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004144:	2001      	movs	r0, #1
 8004146:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004148:	e021      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800414a:	2004      	movs	r0, #4
 800414c:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800414e:	e01e      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004150:	4628      	mov	r0, r5
 8004152:	f7ff fd60 	bl	8003c16 <SDIO_GetCommandResponse>
 8004156:	42b0      	cmp	r0, r6
 8004158:	d001      	beq.n	800415e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800415a:	2001      	movs	r0, #1
 800415c:	e017      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800415e:	23c5      	movs	r3, #197	@ 0xc5
 8004160:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004162:	2100      	movs	r1, #0
 8004164:	4628      	mov	r0, r5
 8004166:	f7ff fd59 	bl	8003c1c <SDIO_GetResponse>
 800416a:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800416c:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 8004170:	d008      	beq.n	8004184 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004172:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004176:	d10b      	bne.n	8004190 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004178:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800417c:	d00b      	beq.n	8004196 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800417e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004182:	e004      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004188:	e001      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800418a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004190:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004194:	e7fb      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004196:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800419a:	e7f8      	b.n	800418e <SDMMC_GetCmdResp6+0x8a>
 800419c:	20000000 	.word	0x20000000
 80041a0:	10624dd3 	.word	0x10624dd3

080041a4 <SDMMC_CmdSetRelAdd>:
{
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	4604      	mov	r4, r0
 80041aa:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80041b0:	2603      	movs	r6, #3
 80041b2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041b4:	2240      	movs	r2, #64	@ 0x40
 80041b6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041be:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041c0:	a901      	add	r1, sp, #4
 80041c2:	f7ff fd16 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80041c6:	462a      	mov	r2, r5
 80041c8:	4631      	mov	r1, r6
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff ff9a 	bl	8004104 <SDMMC_GetCmdResp6>
}
 80041d0:	b006      	add	sp, #24
 80041d2:	bd70      	pop	{r4, r5, r6, pc}

080041d4 <SDMMC_GetCmdResp7>:
{
 80041d4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041d6:	4b16      	ldr	r3, [pc, #88]	@ (8004230 <SDMMC_GetCmdResp7+0x5c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <SDMMC_GetCmdResp7+0x60>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	0a5b      	lsrs	r3, r3, #9
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80041ea:	461a      	mov	r2, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b1e2      	cbz	r2, 800422a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 80041f0:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041f2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80041f6:	d0f8      	beq.n	80041ea <SDMMC_GetCmdResp7+0x16>
 80041f8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80041fc:	d1f5      	bne.n	80041ea <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041fe:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004200:	f013 0f04 	tst.w	r3, #4
 8004204:	d10b      	bne.n	800421e <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004206:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004208:	f013 0301 	ands.w	r3, r3, #1
 800420c:	d10a      	bne.n	8004224 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800420e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004210:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8004214:	d00b      	beq.n	800422e <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004216:	2240      	movs	r2, #64	@ 0x40
 8004218:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800421a:	4618      	mov	r0, r3
 800421c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800421e:	2004      	movs	r0, #4
 8004220:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004222:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004224:	2001      	movs	r0, #1
 8004226:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004228:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800422a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800422e:	4770      	bx	lr
 8004230:	20000000 	.word	0x20000000
 8004234:	10624dd3 	.word	0x10624dd3

08004238 <SDMMC_CmdOperCond>:
{
 8004238:	b510      	push	{r4, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800423e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004242:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004244:	2308      	movs	r3, #8
 8004246:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004248:	2340      	movs	r3, #64	@ 0x40
 800424a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800424c:	2300      	movs	r3, #0
 800424e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004254:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004256:	a901      	add	r1, sp, #4
 8004258:	f7ff fccb 	bl	8003bf2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff ffb9 	bl	80041d4 <SDMMC_GetCmdResp7>
}
 8004262:	b006      	add	sp, #24
 8004264:	bd10      	pop	{r4, pc}
	...

08004268 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004268:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800426a:	4903      	ldr	r1, [pc, #12]	@ (8004278 <MX_FATFS_Init+0x10>)
 800426c:	4803      	ldr	r0, [pc, #12]	@ (800427c <MX_FATFS_Init+0x14>)
 800426e:	f003 f855 	bl	800731c <FATFS_LinkDriver>
 8004272:	4b03      	ldr	r3, [pc, #12]	@ (8004280 <MX_FATFS_Init+0x18>)
 8004274:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004276:	bd08      	pop	{r3, pc}
 8004278:	200007c0 	.word	0x200007c0
 800427c:	0800a3e8 	.word	0x0800a3e8
 8004280:	200007c4 	.word	0x200007c4

08004284 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004284:	2000      	movs	r0, #0
 8004286:	4770      	bx	lr

08004288 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004288:	b508      	push	{r3, lr}
 800428a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800428c:	460a      	mov	r2, r1
 800428e:	4601      	mov	r1, r0
 8004290:	4802      	ldr	r0, [pc, #8]	@ (800429c <BSP_SD_ReadBlocks_DMA+0x14>)
 8004292:	f7fe fbc3 	bl	8002a1c <HAL_SD_ReadBlocks_DMA>
 8004296:	b100      	cbz	r0, 800429a <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8004298:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800429a:	bd08      	pop	{r3, pc}
 800429c:	200002a0 	.word	0x200002a0

080042a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80042a0:	b508      	push	{r3, lr}
 80042a2:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80042a4:	460a      	mov	r2, r1
 80042a6:	4601      	mov	r1, r0
 80042a8:	4802      	ldr	r0, [pc, #8]	@ (80042b4 <BSP_SD_WriteBlocks_DMA+0x14>)
 80042aa:	f7fe fc53 	bl	8002b54 <HAL_SD_WriteBlocks_DMA>
 80042ae:	b100      	cbz	r0, 80042b2 <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 80042b0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80042b2:	bd08      	pop	{r3, pc}
 80042b4:	200002a0 	.word	0x200002a0

080042b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80042b8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80042ba:	4803      	ldr	r0, [pc, #12]	@ (80042c8 <BSP_SD_GetCardState+0x10>)
 80042bc:	f7fe ff4c 	bl	8003158 <HAL_SD_GetCardState>
}
 80042c0:	3804      	subs	r0, #4
 80042c2:	bf18      	it	ne
 80042c4:	2001      	movne	r0, #1
 80042c6:	bd08      	pop	{r3, pc}
 80042c8:	200002a0 	.word	0x200002a0

080042cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80042cc:	b508      	push	{r3, lr}
 80042ce:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80042d0:	4801      	ldr	r0, [pc, #4]	@ (80042d8 <BSP_SD_GetCardInfo+0xc>)
 80042d2:	f7fe fece 	bl	8003072 <HAL_SD_GetCardInfo>
}
 80042d6:	bd08      	pop	{r3, pc}
 80042d8:	200002a0 	.word	0x200002a0

080042dc <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 80042dc:	4770      	bx	lr

080042de <HAL_SD_AbortCallback>:
{
 80042de:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 80042e0:	f7ff fffc 	bl	80042dc <BSP_SD_AbortCallback>
}
 80042e4:	bd08      	pop	{r3, pc}

080042e6 <HAL_SD_TxCpltCallback>:
{
 80042e6:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80042e8:	f000 f924 	bl	8004534 <BSP_SD_WriteCpltCallback>
}
 80042ec:	bd08      	pop	{r3, pc}

080042ee <HAL_SD_RxCpltCallback>:
{
 80042ee:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80042f0:	f000 f926 	bl	8004540 <BSP_SD_ReadCpltCallback>
}
 80042f4:	bd08      	pop	{r3, pc}

080042f6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80042f6:	b500      	push	{lr}
 80042f8:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004300:	f000 f824 	bl	800434c <BSP_PlatformIsDetected>
 8004304:	b910      	cbnz	r0, 800430c <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8004306:	2300      	movs	r3, #0
 8004308:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800430c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004310:	b003      	add	sp, #12
 8004312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004318 <BSP_SD_Init>:
{
 8004318:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800431a:	f7ff ffec 	bl	80042f6 <BSP_SD_IsDetected>
 800431e:	2801      	cmp	r0, #1
 8004320:	d002      	beq.n	8004328 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 8004322:	2501      	movs	r5, #1
}
 8004324:	4628      	mov	r0, r5
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 800432a:	4807      	ldr	r0, [pc, #28]	@ (8004348 <BSP_SD_Init+0x30>)
 800432c:	f7fe fe86 	bl	800303c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8004330:	4605      	mov	r5, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d1f6      	bne.n	8004324 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004336:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800433a:	4803      	ldr	r0, [pc, #12]	@ (8004348 <BSP_SD_Init+0x30>)
 800433c:	f7fe feac 	bl	8003098 <HAL_SD_ConfigWideBusOperation>
 8004340:	2800      	cmp	r0, #0
 8004342:	d0ef      	beq.n	8004324 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8004344:	4625      	mov	r5, r4
 8004346:	e7ed      	b.n	8004324 <BSP_SD_Init+0xc>
 8004348:	200002a0 	.word	0x200002a0

0800434c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800434c:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800434e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004352:	4804      	ldr	r0, [pc, #16]	@ (8004364 <BSP_PlatformIsDetected+0x18>)
 8004354:	f7fd fe82 	bl	800205c <HAL_GPIO_ReadPin>
 8004358:	b908      	cbnz	r0, 800435e <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 800435a:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800435c:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 800435e:	2000      	movs	r0, #0
 8004360:	e7fc      	b.n	800435c <BSP_PlatformIsDetected+0x10>
 8004362:	bf00      	nop
 8004364:	40020000 	.word	0x40020000

08004368 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004368:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800436a:	4b07      	ldr	r3, [pc, #28]	@ (8004388 <SD_CheckStatus+0x20>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004370:	f7ff ffa2 	bl	80042b8 <BSP_SD_GetCardState>
 8004374:	b920      	cbnz	r0, 8004380 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8004376:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <SD_CheckStatus+0x20>)
 8004378:	7813      	ldrb	r3, [r2, #0]
 800437a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800437e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8004380:	4b01      	ldr	r3, [pc, #4]	@ (8004388 <SD_CheckStatus+0x20>)
 8004382:	7818      	ldrb	r0, [r3, #0]
}
 8004384:	bd08      	pop	{r3, pc}
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c

0800438c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800438c:	b510      	push	{r4, lr}
 800438e:	4604      	mov	r4, r0

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004390:	f7ff ffc2 	bl	8004318 <BSP_SD_Init>
 8004394:	b110      	cbz	r0, 800439c <SD_initialize+0x10>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004396:	4b04      	ldr	r3, [pc, #16]	@ (80043a8 <SD_initialize+0x1c>)
 8004398:	7818      	ldrb	r0, [r3, #0]
}
 800439a:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff ffe3 	bl	8004368 <SD_CheckStatus>
 80043a2:	4b01      	ldr	r3, [pc, #4]	@ (80043a8 <SD_initialize+0x1c>)
 80043a4:	7018      	strb	r0, [r3, #0]
 80043a6:	e7f6      	b.n	8004396 <SD_initialize+0xa>
 80043a8:	2000000c 	.word	0x2000000c

080043ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80043ac:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 80043ae:	f7ff ffdb 	bl	8004368 <SD_CheckStatus>
}
 80043b2:	bd08      	pop	{r3, pc}

080043b4 <SD_CheckStatusWithTimeout>:
{
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 80043b8:	f7fd fa5c 	bl	8001874 <HAL_GetTick>
 80043bc:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 80043be:	f7fd fa59 	bl	8001874 <HAL_GetTick>
 80043c2:	1b00      	subs	r0, r0, r4
 80043c4:	42a8      	cmp	r0, r5
 80043c6:	d205      	bcs.n	80043d4 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80043c8:	f7ff ff76 	bl	80042b8 <BSP_SD_GetCardState>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1f6      	bne.n	80043be <SD_CheckStatusWithTimeout+0xa>
      return 0;
 80043d0:	2000      	movs	r0, #0
 80043d2:	e001      	b.n	80043d8 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80043d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080043dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	460c      	mov	r4, r1
 80043e0:	4615      	mov	r5, r2
 80043e2:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80043e4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80043e8:	f7ff ffe4 	bl	80043b4 <SD_CheckStatusWithTimeout>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	db30      	blt.n	8004452 <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80043f0:	4632      	mov	r2, r6
 80043f2:	4629      	mov	r1, r5
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7ff ff47 	bl	8004288 <BSP_SD_ReadBlocks_DMA>
 80043fa:	b108      	cbz	r0, 8004400 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 80043fc:	2001      	movs	r0, #1
 80043fe:	e029      	b.n	8004454 <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004400:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <SD_read+0x7c>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004406:	f7fd fa35 	bl	8001874 <HAL_GetTick>
 800440a:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800440c:	4b12      	ldr	r3, [pc, #72]	@ (8004458 <SD_read+0x7c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	b933      	cbnz	r3, 8004420 <SD_read+0x44>
 8004412:	f7fd fa2f 	bl	8001874 <HAL_GetTick>
 8004416:	1b00      	subs	r0, r0, r4
 8004418:	f247 532f 	movw	r3, #29999	@ 0x752f
 800441c:	4298      	cmp	r0, r3
 800441e:	d9f5      	bls.n	800440c <SD_read+0x30>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004420:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <SD_read+0x7c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b90b      	cbnz	r3, 800442a <SD_read+0x4e>
      {
        res = RES_ERROR;
 8004426:	2001      	movs	r0, #1
 8004428:	e014      	b.n	8004454 <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 800442a:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <SD_read+0x7c>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004430:	f7fd fa20 	bl	8001874 <HAL_GetTick>
 8004434:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004436:	f7fd fa1d 	bl	8001874 <HAL_GetTick>
 800443a:	1b00      	subs	r0, r0, r4
 800443c:	f247 532f 	movw	r3, #29999	@ 0x752f
 8004440:	4298      	cmp	r0, r3
 8004442:	d804      	bhi.n	800444e <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004444:	f7ff ff38 	bl	80042b8 <BSP_SD_GetCardState>
 8004448:	2800      	cmp	r0, #0
 800444a:	d1f4      	bne.n	8004436 <SD_read+0x5a>
 800444c:	e002      	b.n	8004454 <SD_read+0x78>
  DRESULT res = RES_ERROR;
 800444e:	2001      	movs	r0, #1
 8004450:	e000      	b.n	8004454 <SD_read+0x78>
    return res;
 8004452:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 8004454:	bd70      	pop	{r4, r5, r6, pc}
 8004456:	bf00      	nop
 8004458:	200007c8 	.word	0x200007c8

0800445c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	460c      	mov	r4, r1
 8004460:	4615      	mov	r5, r2
 8004462:	461e      	mov	r6, r3
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004464:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <SD_write+0x7c>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800446a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800446e:	f7ff ffa1 	bl	80043b4 <SD_CheckStatusWithTimeout>
 8004472:	2800      	cmp	r0, #0
 8004474:	db2d      	blt.n	80044d2 <SD_write+0x76>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004476:	4632      	mov	r2, r6
 8004478:	4629      	mov	r1, r5
 800447a:	4620      	mov	r0, r4
 800447c:	f7ff ff10 	bl	80042a0 <BSP_SD_WriteBlocks_DMA>
 8004480:	b108      	cbz	r0, 8004486 <SD_write+0x2a>
  DRESULT res = RES_ERROR;
 8004482:	2001      	movs	r0, #1
 8004484:	e026      	b.n	80044d4 <SD_write+0x78>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004486:	f7fd f9f5 	bl	8001874 <HAL_GetTick>
 800448a:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800448c:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <SD_write+0x7c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	b933      	cbnz	r3, 80044a0 <SD_write+0x44>
 8004492:	f7fd f9ef 	bl	8001874 <HAL_GetTick>
 8004496:	1b00      	subs	r0, r0, r4
 8004498:	f247 532f 	movw	r3, #29999	@ 0x752f
 800449c:	4298      	cmp	r0, r3
 800449e:	d9f5      	bls.n	800448c <SD_write+0x30>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80044a0:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <SD_write+0x7c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b90b      	cbnz	r3, 80044aa <SD_write+0x4e>
      {
        res = RES_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e014      	b.n	80044d4 <SD_write+0x78>
      }
      else
      {
        WriteStatus = 0;
 80044aa:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <SD_write+0x7c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80044b0:	f7fd f9e0 	bl	8001874 <HAL_GetTick>
 80044b4:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80044b6:	f7fd f9dd 	bl	8001874 <HAL_GetTick>
 80044ba:	1b00      	subs	r0, r0, r4
 80044bc:	f247 532f 	movw	r3, #29999	@ 0x752f
 80044c0:	4298      	cmp	r0, r3
 80044c2:	d804      	bhi.n	80044ce <SD_write+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80044c4:	f7ff fef8 	bl	80042b8 <BSP_SD_GetCardState>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d1f4      	bne.n	80044b6 <SD_write+0x5a>
 80044cc:	e002      	b.n	80044d4 <SD_write+0x78>
  DRESULT res = RES_ERROR;
 80044ce:	2001      	movs	r0, #1
 80044d0:	e000      	b.n	80044d4 <SD_write+0x78>
    return res;
 80044d2:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
}
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	bf00      	nop
 80044d8:	200007cc 	.word	0x200007cc

080044dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80044dc:	b530      	push	{r4, r5, lr}
 80044de:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044e0:	4b13      	ldr	r3, [pc, #76]	@ (8004530 <SD_ioctl+0x54>)
 80044e2:	7818      	ldrb	r0, [r3, #0]
 80044e4:	f010 0401 	ands.w	r4, r0, #1
 80044e8:	d11b      	bne.n	8004522 <SD_ioctl+0x46>
 80044ea:	4615      	mov	r5, r2

  switch (cmd)
 80044ec:	2903      	cmp	r1, #3
 80044ee:	d81c      	bhi.n	800452a <SD_ioctl+0x4e>
 80044f0:	e8df f001 	tbb	[pc, r1]
 80044f4:	100a0402 	.word	0x100a0402
 80044f8:	460c      	mov	r4, r1
 80044fa:	e013      	b.n	8004524 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80044fc:	4668      	mov	r0, sp
 80044fe:	f7ff fee5 	bl	80042cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004502:	9b06      	ldr	r3, [sp, #24]
 8004504:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8004506:	e00d      	b.n	8004524 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004508:	4668      	mov	r0, sp
 800450a:	f7ff fedf 	bl	80042cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800450e:	9b07      	ldr	r3, [sp, #28]
 8004510:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8004512:	e007      	b.n	8004524 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004514:	4668      	mov	r0, sp
 8004516:	f7ff fed9 	bl	80042cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800451a:	9b07      	ldr	r3, [sp, #28]
 800451c:	0a5b      	lsrs	r3, r3, #9
 800451e:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8004520:	e000      	b.n	8004524 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004522:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8004524:	4620      	mov	r0, r4
 8004526:	b009      	add	sp, #36	@ 0x24
 8004528:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800452a:	2404      	movs	r4, #4
 800452c:	e7fa      	b.n	8004524 <SD_ioctl+0x48>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c

08004534 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8004534:	4b01      	ldr	r3, [pc, #4]	@ (800453c <BSP_SD_WriteCpltCallback+0x8>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	4770      	bx	lr
 800453c:	200007cc 	.word	0x200007cc

08004540 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8004540:	4b01      	ldr	r3, [pc, #4]	@ (8004548 <BSP_SD_ReadCpltCallback+0x8>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	4770      	bx	lr
 8004548:	200007c8 	.word	0x200007c8

0800454c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800454c:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800454e:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <disk_status+0x18>)
 8004550:	1c82      	adds	r2, r0, #2
 8004552:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004556:	6852      	ldr	r2, [r2, #4]
 8004558:	4403      	add	r3, r0
 800455a:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 800455e:	4790      	blx	r2
  return stat;
}
 8004560:	bd08      	pop	{r3, pc}
 8004562:	bf00      	nop
 8004564:	20000874 	.word	0x20000874

08004568 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004568:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <disk_initialize+0x2c>)
 800456a:	5c1b      	ldrb	r3, [r3, r0]
 800456c:	b97b      	cbnz	r3, 800458e <disk_initialize+0x26>
{
 800456e:	b510      	push	{r4, lr}
 8004570:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <disk_initialize+0x2c>)
 8004574:	1c82      	adds	r2, r0, #2
 8004576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	4403      	add	r3, r0
 800457e:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 8004582:	4790      	blx	r2
    if(stat == RES_OK)
 8004584:	b910      	cbnz	r0, 800458c <disk_initialize+0x24>
    {
      disk.is_initialized[pdrv] = 1;
 8004586:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <disk_initialize+0x2c>)
 8004588:	2201      	movs	r2, #1
 800458a:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 800458c:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 800458e:	2000      	movs	r0, #0
}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000874 	.word	0x20000874

08004598 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004598:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800459a:	4c05      	ldr	r4, [pc, #20]	@ (80045b0 <disk_read+0x18>)
 800459c:	1c85      	adds	r5, r0, #2
 800459e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80045a2:	68ad      	ldr	r5, [r5, #8]
 80045a4:	4404      	add	r4, r0
 80045a6:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80045aa:	47a8      	blx	r5
  return res;
}
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
 80045ae:	bf00      	nop
 80045b0:	20000874 	.word	0x20000874

080045b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80045b4:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80045b6:	4c05      	ldr	r4, [pc, #20]	@ (80045cc <disk_write+0x18>)
 80045b8:	1c85      	adds	r5, r0, #2
 80045ba:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80045be:	68ed      	ldr	r5, [r5, #12]
 80045c0:	4404      	add	r4, r0
 80045c2:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80045c6:	47a8      	blx	r5
  return res;
}
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop
 80045cc:	20000874 	.word	0x20000874

080045d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80045d0:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80045d2:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <disk_ioctl+0x18>)
 80045d4:	1c84      	adds	r4, r0, #2
 80045d6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80045da:	6924      	ldr	r4, [r4, #16]
 80045dc:	4403      	add	r3, r0
 80045de:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 80045e2:	47a0      	blx	r4
  return res;
}
 80045e4:	bd10      	pop	{r4, pc}
 80045e6:	bf00      	nop
 80045e8:	20000874 	.word	0x20000874

080045ec <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80045ec:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80045ee:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80045f0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80045f4:	4770      	bx	lr

080045f6 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80045f6:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 80045f8:	7882      	ldrb	r2, [r0, #2]
 80045fa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 80045fe:	7843      	ldrb	r3, [r0, #1]
 8004600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004604:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8004606:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800460a:	4770      	bx	lr

0800460c <ld_qword>:
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
	QWORD rv;

	rv = ptr[7];
 800460c:	79c3      	ldrb	r3, [r0, #7]
	rv = rv << 8 | ptr[6];
 800460e:	7982      	ldrb	r2, [r0, #6]
 8004610:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[5];
 8004614:	7943      	ldrb	r3, [r0, #5]
 8004616:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[4];
 800461a:	7902      	ldrb	r2, [r0, #4]
 800461c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[3];
 8004620:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004624:	78c1      	ldrb	r1, [r0, #3]
 8004626:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[2];
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8004630:	7882      	ldrb	r2, [r0, #2]
 8004632:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[1];
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800463c:	7841      	ldrb	r1, [r0, #1]
 800463e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8004646:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800464a:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 800464e:	4770      	bx	lr

08004650 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004650:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8004652:	0a09      	lsrs	r1, r1, #8
 8004654:	7041      	strb	r1, [r0, #1]
}
 8004656:	4770      	bx	lr

08004658 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004658:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800465a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800465e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004660:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004664:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004666:	0e09      	lsrs	r1, r1, #24
 8004668:	70c1      	strb	r1, [r0, #3]
}
 800466a:	4770      	bx	lr

0800466c <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800466c:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800466e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004672:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004674:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8004678:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800467a:	0e12      	lsrs	r2, r2, #24
 800467c:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800467e:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004680:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004684:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8004686:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800468a:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	71c3      	strb	r3, [r0, #7]
}
 8004690:	4770      	bx	lr

08004692 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8004692:	4694      	mov	ip, r2
 8004694:	b132      	cbz	r2, 80046a4 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8004696:	780a      	ldrb	r2, [r1, #0]
 8004698:	3101      	adds	r1, #1
 800469a:	7002      	strb	r2, [r0, #0]
 800469c:	3001      	adds	r0, #1
		} while (--cnt);
 800469e:	f1bc 0c01 	subs.w	ip, ip, #1
 80046a2:	d1f8      	bne.n	8004696 <mem_cpy+0x4>
	}
}
 80046a4:	4770      	bx	lr

080046a6 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80046a6:	7001      	strb	r1, [r0, #0]
 80046a8:	3001      	adds	r0, #1
	} while (--cnt);
 80046aa:	3a01      	subs	r2, #1
 80046ac:	d1fb      	bne.n	80046a6 <mem_set>
}
 80046ae:	4770      	bx	lr

080046b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046b0:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80046b2:	f89c 0000 	ldrb.w	r0, [ip]
 80046b6:	f10c 0c01 	add.w	ip, ip, #1
 80046ba:	780b      	ldrb	r3, [r1, #0]
 80046bc:	3101      	adds	r1, #1
 80046be:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 80046c0:	3a01      	subs	r2, #1
 80046c2:	d001      	beq.n	80046c8 <mem_cmp+0x18>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d0f4      	beq.n	80046b2 <mem_cmp+0x2>

	return r;
}
 80046c8:	4770      	bx	lr

080046ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80046ca:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 80046cc:	e000      	b.n	80046d0 <chk_chr+0x6>
 80046ce:	3301      	adds	r3, #1
 80046d0:	7818      	ldrb	r0, [r3, #0]
 80046d2:	b108      	cbz	r0, 80046d8 <chk_chr+0xe>
 80046d4:	4288      	cmp	r0, r1
 80046d6:	d1fa      	bne.n	80046ce <chk_chr+0x4>
	return *str;
}
 80046d8:	4770      	bx	lr
	...

080046dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80046dc:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80046de:	2500      	movs	r5, #0
 80046e0:	462b      	mov	r3, r5
 80046e2:	e001      	b.n	80046e8 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80046e4:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80046e6:	3301      	adds	r3, #1
 80046e8:	2b07      	cmp	r3, #7
 80046ea:	d815      	bhi.n	8004718 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 80046ec:	011a      	lsls	r2, r3, #4
 80046ee:	4c17      	ldr	r4, [pc, #92]	@ (800474c <chk_lock+0x70>)
 80046f0:	58a2      	ldr	r2, [r4, r2]
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	d0f6      	beq.n	80046e4 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046f6:	6804      	ldr	r4, [r0, #0]
 80046f8:	42a2      	cmp	r2, r4
 80046fa:	d1f4      	bne.n	80046e6 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 80046fc:	4a13      	ldr	r2, [pc, #76]	@ (800474c <chk_lock+0x70>)
 80046fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004702:	6854      	ldr	r4, [r2, #4]
 8004704:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004706:	4294      	cmp	r4, r2
 8004708:	d1ed      	bne.n	80046e6 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 800470a:	4a10      	ldr	r2, [pc, #64]	@ (800474c <chk_lock+0x70>)
 800470c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004710:	6894      	ldr	r4, [r2, #8]
 8004712:	6b02      	ldr	r2, [r0, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8004714:	4294      	cmp	r4, r2
 8004716:	d1e6      	bne.n	80046e6 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004718:	2b08      	cmp	r3, #8
 800471a:	d00a      	beq.n	8004732 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800471c:	b9a1      	cbnz	r1, 8004748 <chk_lock+0x6c>
 800471e:	4a0b      	ldr	r2, [pc, #44]	@ (800474c <chk_lock+0x70>)
 8004720:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004724:	899b      	ldrh	r3, [r3, #12]
 8004726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472a:	d00b      	beq.n	8004744 <chk_lock+0x68>
 800472c:	2000      	movs	r0, #0
}
 800472e:	bc30      	pop	{r4, r5}
 8004730:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004732:	b92d      	cbnz	r5, 8004740 <chk_lock+0x64>
 8004734:	2902      	cmp	r1, #2
 8004736:	d001      	beq.n	800473c <chk_lock+0x60>
 8004738:	2012      	movs	r0, #18
 800473a:	e7f8      	b.n	800472e <chk_lock+0x52>
 800473c:	2000      	movs	r0, #0
 800473e:	e7f6      	b.n	800472e <chk_lock+0x52>
 8004740:	2000      	movs	r0, #0
 8004742:	e7f4      	b.n	800472e <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004744:	2010      	movs	r0, #16
 8004746:	e7f2      	b.n	800472e <chk_lock+0x52>
 8004748:	2010      	movs	r0, #16
 800474a:	e7f0      	b.n	800472e <chk_lock+0x52>
 800474c:	200007d0 	.word	0x200007d0

08004750 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004750:	2000      	movs	r0, #0
 8004752:	2807      	cmp	r0, #7
 8004754:	d805      	bhi.n	8004762 <enq_lock+0x12>
 8004756:	0103      	lsls	r3, r0, #4
 8004758:	4a04      	ldr	r2, [pc, #16]	@ (800476c <enq_lock+0x1c>)
 800475a:	58d3      	ldr	r3, [r2, r3]
 800475c:	b10b      	cbz	r3, 8004762 <enq_lock+0x12>
 800475e:	3001      	adds	r0, #1
 8004760:	e7f7      	b.n	8004752 <enq_lock+0x2>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8004762:	3808      	subs	r0, #8
 8004764:	bf18      	it	ne
 8004766:	2001      	movne	r0, #1
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200007d0 	.word	0x200007d0

08004770 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004770:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <inc_lock+0x8>
 8004776:	3301      	adds	r3, #1
 8004778:	2b07      	cmp	r3, #7
 800477a:	d813      	bhi.n	80047a4 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800477c:	011a      	lsls	r2, r3, #4
 800477e:	4c24      	ldr	r4, [pc, #144]	@ (8004810 <inc_lock+0xa0>)
 8004780:	58a4      	ldr	r4, [r4, r2]
 8004782:	6802      	ldr	r2, [r0, #0]
 8004784:	4294      	cmp	r4, r2
 8004786:	d1f6      	bne.n	8004776 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8004788:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <inc_lock+0xa0>)
 800478a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800478e:	6854      	ldr	r4, [r2, #4]
 8004790:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004792:	4294      	cmp	r4, r2
 8004794:	d1ef      	bne.n	8004776 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8004796:	4a1e      	ldr	r2, [pc, #120]	@ (8004810 <inc_lock+0xa0>)
 8004798:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800479c:	6894      	ldr	r4, [r2, #8]
 800479e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 80047a0:	4294      	cmp	r4, r2
 80047a2:	d1e8      	bne.n	8004776 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d01f      	beq.n	80047e8 <inc_lock+0x78>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047a8:	b301      	cbz	r1, 80047ec <inc_lock+0x7c>
 80047aa:	4a19      	ldr	r2, [pc, #100]	@ (8004810 <inc_lock+0xa0>)
 80047ac:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80047b0:	8992      	ldrh	r2, [r2, #12]
 80047b2:	bb52      	cbnz	r2, 800480a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047b8:	e01e      	b.n	80047f8 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047ba:	3301      	adds	r3, #1
 80047bc:	2b07      	cmp	r3, #7
 80047be:	d804      	bhi.n	80047ca <inc_lock+0x5a>
 80047c0:	011a      	lsls	r2, r3, #4
 80047c2:	4c13      	ldr	r4, [pc, #76]	@ (8004810 <inc_lock+0xa0>)
 80047c4:	58a2      	ldr	r2, [r4, r2]
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	d1f7      	bne.n	80047ba <inc_lock+0x4a>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d01b      	beq.n	8004806 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 80047ce:	4d10      	ldr	r5, [pc, #64]	@ (8004810 <inc_lock+0xa0>)
 80047d0:	011c      	lsls	r4, r3, #4
 80047d2:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 80047d6:	6806      	ldr	r6, [r0, #0]
 80047d8:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80047da:	6884      	ldr	r4, [r0, #8]
 80047dc:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80047de:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80047e0:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80047e2:	2000      	movs	r0, #0
 80047e4:	8190      	strh	r0, [r2, #12]
 80047e6:	e7df      	b.n	80047a8 <inc_lock+0x38>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e7e7      	b.n	80047bc <inc_lock+0x4c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047ec:	4a08      	ldr	r2, [pc, #32]	@ (8004810 <inc_lock+0xa0>)
 80047ee:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80047f2:	8992      	ldrh	r2, [r2, #12]
 80047f4:	3201      	adds	r2, #1
 80047f6:	b292      	uxth	r2, r2
 80047f8:	4905      	ldr	r1, [pc, #20]	@ (8004810 <inc_lock+0xa0>)
 80047fa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80047fe:	818a      	strh	r2, [r1, #12]

	return i + 1;
 8004800:	1c58      	adds	r0, r3, #1
}
 8004802:	bc70      	pop	{r4, r5, r6}
 8004804:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004806:	2000      	movs	r0, #0
 8004808:	e7fb      	b.n	8004802 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800480a:	2000      	movs	r0, #0
 800480c:	e7f9      	b.n	8004802 <inc_lock+0x92>
 800480e:	bf00      	nop
 8004810:	200007d0 	.word	0x200007d0

08004814 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004814:	3801      	subs	r0, #1
 8004816:	2807      	cmp	r0, #7
 8004818:	d815      	bhi.n	8004846 <dec_lock+0x32>
		n = Files[i].ctr;
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <dec_lock+0x3c>)
 800481c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8004820:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004826:	d003      	beq.n	8004830 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8004828:	b143      	cbz	r3, 800483c <dec_lock+0x28>
 800482a:	3b01      	subs	r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	e000      	b.n	8004832 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004830:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8004832:	4a07      	ldr	r2, [pc, #28]	@ (8004850 <dec_lock+0x3c>)
 8004834:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8004838:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800483a:	b933      	cbnz	r3, 800484a <dec_lock+0x36>
 800483c:	0103      	lsls	r3, r0, #4
 800483e:	2000      	movs	r0, #0
 8004840:	4a03      	ldr	r2, [pc, #12]	@ (8004850 <dec_lock+0x3c>)
 8004842:	50d0      	str	r0, [r2, r3]
 8004844:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004846:	2002      	movs	r0, #2
 8004848:	4770      	bx	lr
		res = FR_OK;
 800484a:	2000      	movs	r0, #0
	}
	return res;
}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	200007d0 	.word	0x200007d0

08004854 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004854:	2300      	movs	r3, #0
 8004856:	e003      	b.n	8004860 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8004858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800485c:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800485e:	3301      	adds	r3, #1
 8004860:	2b07      	cmp	r3, #7
 8004862:	d811      	bhi.n	8004888 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004864:	011a      	lsls	r2, r3, #4
 8004866:	4909      	ldr	r1, [pc, #36]	@ (800488c <clear_lock+0x38>)
 8004868:	588a      	ldr	r2, [r1, r2]
 800486a:	4282      	cmp	r2, r0
 800486c:	d1f7      	bne.n	800485e <clear_lock+0xa>
{
 800486e:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004870:	011a      	lsls	r2, r3, #4
 8004872:	2400      	movs	r4, #0
 8004874:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8004876:	3301      	adds	r3, #1
 8004878:	2b07      	cmp	r3, #7
 800487a:	d8ed      	bhi.n	8004858 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	4903      	ldr	r1, [pc, #12]	@ (800488c <clear_lock+0x38>)
 8004880:	588a      	ldr	r2, [r1, r2]
 8004882:	4282      	cmp	r2, r0
 8004884:	d1f7      	bne.n	8004876 <clear_lock+0x22>
 8004886:	e7f3      	b.n	8004870 <clear_lock+0x1c>
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	200007d0 	.word	0x200007d0

08004890 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8004890:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004892:	69c3      	ldr	r3, [r0, #28]
 8004894:	3b02      	subs	r3, #2
 8004896:	428b      	cmp	r3, r1
 8004898:	d904      	bls.n	80048a4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800489a:	8943      	ldrh	r3, [r0, #10]
 800489c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800489e:	fb01 0003 	mla	r0, r1, r3, r0
 80048a2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80048a4:	2000      	movs	r0, #0
}
 80048a6:	4770      	bx	lr

080048a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80048ac:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80048ae:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80048b0:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80048b2:	0a50      	lsrs	r0, r2, #9
 80048b4:	895a      	ldrh	r2, [r3, #10]
 80048b6:	2300      	movs	r3, #0
 80048b8:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 80048bc:	0a49      	lsrs	r1, r1, #9
 80048be:	f7fc f973 	bl	8000ba8 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	e001      	b.n	80048ca <clmt_clust+0x22>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 80048c6:	1a12      	subs	r2, r2, r0
 80048c8:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048ca:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80048cc:	b118      	cbz	r0, 80048d6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80048ce:	4282      	cmp	r2, r0
 80048d0:	d2f9      	bcs.n	80048c6 <clmt_clust+0x1e>
	}
	return cl + *tbl;	/* Return the cluster number */
 80048d2:	6860      	ldr	r0, [r4, #4]
 80048d4:	4410      	add	r0, r2
}
 80048d6:	bd10      	pop	{r4, pc}

080048d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4606      	mov	r6, r0
 80048dc:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80048de:	f101 001a 	add.w	r0, r1, #26
 80048e2:	f7ff fe83 	bl	80045ec <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80048e6:	7833      	ldrb	r3, [r6, #0]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d000      	beq.n	80048ee <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80048f0:	f105 0014 	add.w	r0, r5, #20
 80048f4:	f7ff fe7a 	bl	80045ec <ld_word>
 80048f8:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 80048fc:	e7f6      	b.n	80048ec <ld_clust+0x14>

080048fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	4606      	mov	r6, r0
 8004902:	460c      	mov	r4, r1
 8004904:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004906:	b291      	uxth	r1, r2
 8004908:	f104 001a 	add.w	r0, r4, #26
 800490c:	f7ff fea0 	bl	8004650 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004910:	7833      	ldrb	r3, [r6, #0]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d000      	beq.n	8004918 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8004916:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004918:	0c29      	lsrs	r1, r5, #16
 800491a:	f104 0014 	add.w	r0, r4, #20
 800491e:	f7ff fe97 	bl	8004650 <st_word>
}
 8004922:	e7f8      	b.n	8004916 <st_clust+0x18>

08004924 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	4680      	mov	r8, r0
 800492a:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800492c:	f101 001a 	add.w	r0, r1, #26
 8004930:	f7ff fe5c 	bl	80045ec <ld_word>
 8004934:	bb50      	cbnz	r0, 800498c <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004936:	7835      	ldrb	r5, [r6, #0]
 8004938:	f025 0540 	bic.w	r5, r5, #64	@ 0x40
 800493c:	3d01      	subs	r5, #1
 800493e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8004942:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004946:	2701      	movs	r7, #1
 8004948:	2400      	movs	r4, #0
 800494a:	e004      	b.n	8004956 <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800494c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004950:	4298      	cmp	r0, r3
 8004952:	d120      	bne.n	8004996 <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004954:	3401      	adds	r4, #1
 8004956:	2c0c      	cmp	r4, #12
 8004958:	d80d      	bhi.n	8004976 <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800495a:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <pick_lfn+0x80>)
 800495c:	5d18      	ldrb	r0, [r3, r4]
 800495e:	4430      	add	r0, r6
 8004960:	f7ff fe44 	bl	80045ec <ld_word>
		if (wc) {
 8004964:	2f00      	cmp	r7, #0
 8004966:	d0f1      	beq.n	800494c <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004968:	2dfe      	cmp	r5, #254	@ 0xfe
 800496a:	d812      	bhi.n	8004992 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800496c:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 8004970:	4607      	mov	r7, r0
 8004972:	3501      	adds	r5, #1
 8004974:	e7ee      	b.n	8004954 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004976:	7833      	ldrb	r3, [r6, #0]
 8004978:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800497c:	d00d      	beq.n	800499a <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800497e:	2dfe      	cmp	r5, #254	@ 0xfe
 8004980:	d80d      	bhi.n	800499e <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 8004988:	2001      	movs	r0, #1
 800498a:	e000      	b.n	800498e <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800498c:	2000      	movs	r0, #0
}
 800498e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004992:	2000      	movs	r0, #0
 8004994:	e7fb      	b.n	800498e <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004996:	2000      	movs	r0, #0
 8004998:	e7f9      	b.n	800498e <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800499a:	2001      	movs	r0, #1
 800499c:	e7f7      	b.n	800498e <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800499e:	2000      	movs	r0, #0
 80049a0:	e7f5      	b.n	800498e <pick_lfn+0x6a>
 80049a2:	bf00      	nop
 80049a4:	0800a41c 	.word	0x0800a41c

080049a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	4680      	mov	r8, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80049b2:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80049b4:	230f      	movs	r3, #15
 80049b6:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 80049b8:	2400      	movs	r4, #0
 80049ba:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 80049bc:	4621      	mov	r1, r4
 80049be:	f107 001a 	add.w	r0, r7, #26
 80049c2:	f7ff fe45 	bl	8004650 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80049c6:	f109 36ff 	add.w	r6, r9, #4294967295	@ 0xffffffff
 80049ca:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80049ce:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 80049d2:	4625      	mov	r5, r4
 80049d4:	e002      	b.n	80049dc <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 80049d6:	3401      	adds	r4, #1
 80049d8:	2c0c      	cmp	r4, #12
 80049da:	d811      	bhi.n	8004a00 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80049dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049e0:	429d      	cmp	r5, r3
 80049e2:	d002      	beq.n	80049ea <put_lfn+0x42>
 80049e4:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 80049e8:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80049ea:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <put_lfn+0x74>)
 80049ec:	5d18      	ldrb	r0, [r3, r4]
 80049ee:	4629      	mov	r1, r5
 80049f0:	4438      	add	r0, r7
 80049f2:	f7ff fe2d 	bl	8004650 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	d1ed      	bne.n	80049d6 <put_lfn+0x2e>
 80049fa:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80049fe:	e7ea      	b.n	80049d6 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a04:	429d      	cmp	r5, r3
 8004a06:	d002      	beq.n	8004a0e <put_lfn+0x66>
 8004a08:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8004a0c:	b90b      	cbnz	r3, 8004a12 <put_lfn+0x6a>
 8004a0e:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004a12:	f887 9000 	strb.w	r9, [r7]
}
 8004a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	bf00      	nop
 8004a1c:	0800a41c 	.word	0x0800a41c

08004a20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	4605      	mov	r5, r0
 8004a26:	4616      	mov	r6, r2
 8004a28:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004a2a:	220b      	movs	r2, #11
 8004a2c:	f7ff fe31 	bl	8004692 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004a30:	2c05      	cmp	r4, #5
 8004a32:	d811      	bhi.n	8004a58 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8004a34:	2307      	movs	r3, #7
 8004a36:	e01f      	b.n	8004a78 <gen_numname+0x58>
 8004a38:	3101      	adds	r1, #1
 8004a3a:	290f      	cmp	r1, #15
 8004a3c:	d80c      	bhi.n	8004a58 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8004a3e:	f003 0c01 	and.w	ip, r3, #1
 8004a42:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 8004a46:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8004a48:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8004a4c:	d0f4      	beq.n	8004a38 <gen_numname+0x18>
 8004a4e:	f484 3488 	eor.w	r4, r4, #69632	@ 0x11000
 8004a52:	f084 0421 	eor.w	r4, r4, #33	@ 0x21
 8004a56:	e7ef      	b.n	8004a38 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8004a58:	8833      	ldrh	r3, [r6, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ea      	beq.n	8004a34 <gen_numname+0x14>
			wc = *lfn++;
 8004a5e:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8004a60:	2100      	movs	r1, #0
 8004a62:	e7ea      	b.n	8004a3a <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8004a64:	1e5a      	subs	r2, r3, #1
 8004a66:	3308      	adds	r3, #8
 8004a68:	446b      	add	r3, sp
 8004a6a:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 8004a6e:	0921      	lsrs	r1, r4, #4
	} while (seq);
 8004a70:	2c0f      	cmp	r4, #15
 8004a72:	d90a      	bls.n	8004a8a <gen_numname+0x6a>
		ns[i--] = c;
 8004a74:	4613      	mov	r3, r2
		seq /= 16;
 8004a76:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 8004a78:	f004 020f 	and.w	r2, r4, #15
 8004a7c:	f102 0130 	add.w	r1, r2, #48	@ 0x30
		if (c > '9') c += 7;
 8004a80:	2939      	cmp	r1, #57	@ 0x39
 8004a82:	d9ef      	bls.n	8004a64 <gen_numname+0x44>
 8004a84:	f102 0137 	add.w	r1, r2, #55	@ 0x37
 8004a88:	e7ec      	b.n	8004a64 <gen_numname+0x44>
	ns[i] = '~';
 8004a8a:	217e      	movs	r1, #126	@ 0x7e
 8004a8c:	f102 0308 	add.w	r3, r2, #8
 8004a90:	446b      	add	r3, sp
 8004a92:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <gen_numname+0x7c>
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d209      	bcs.n	8004ab4 <gen_numname+0x94>
 8004aa0:	5ce9      	ldrb	r1, [r5, r3]
 8004aa2:	2920      	cmp	r1, #32
 8004aa4:	d1f9      	bne.n	8004a9a <gen_numname+0x7a>
 8004aa6:	e005      	b.n	8004ab4 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004aa8:	2020      	movs	r0, #32
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 8004aae:	2907      	cmp	r1, #7
 8004ab0:	d809      	bhi.n	8004ac6 <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	2a07      	cmp	r2, #7
 8004ab6:	d8f7      	bhi.n	8004aa8 <gen_numname+0x88>
 8004ab8:	f102 0108 	add.w	r1, r2, #8
 8004abc:	4469      	add	r1, sp
 8004abe:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004ac2:	3201      	adds	r2, #1
 8004ac4:	e7f1      	b.n	8004aaa <gen_numname+0x8a>
}
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}

08004aca <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004aca:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8004acc:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8004ad0:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004ad2:	01c3      	lsls	r3, r0, #7
 8004ad4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004ad8:	780a      	ldrb	r2, [r1, #0]
 8004ada:	3101      	adds	r1, #1
 8004adc:	fa52 f383 	uxtab	r3, r2, r3
 8004ae0:	b2d8      	uxtb	r0, r3
	} while (--n);
 8004ae2:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ae6:	d1f4      	bne.n	8004ad2 <sum_sfn+0x8>
	return sum;
}
 8004ae8:	4770      	bx	lr

08004aea <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8004aea:	b500      	push	{lr}
 8004aec:	4686      	mov	lr, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8004aee:	7841      	ldrb	r1, [r0, #1]
 8004af0:	3101      	adds	r1, #1
 8004af2:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 8004af4:	2000      	movs	r0, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	e001      	b.n	8004afe <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 8004afa:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 8004afc:	3301      	adds	r3, #1
 8004afe:	428b      	cmp	r3, r1
 8004b00:	d20a      	bcs.n	8004b18 <xdir_sum+0x2e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d0f9      	beq.n	8004afa <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004b06:	0842      	lsrs	r2, r0, #1
 8004b08:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 8004b0c:	f81e c003 	ldrb.w	ip, [lr, r3]
 8004b10:	fa1c f282 	uxtah	r2, ip, r2
 8004b14:	b290      	uxth	r0, r2
 8004b16:	e7f1      	b.n	8004afc <xdir_sum+0x12>
		}
	}
	return sum;
}
 8004b18:	f85d fb04 	ldr.w	pc, [sp], #4

08004b1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004b1c:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004b1e:	6800      	ldr	r0, [r0, #0]
 8004b20:	b138      	cbz	r0, 8004b32 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004b22:	4602      	mov	r2, r0
 8004b24:	7813      	ldrb	r3, [r2, #0]
 8004b26:	2b1f      	cmp	r3, #31
 8004b28:	d906      	bls.n	8004b38 <get_ldnumber+0x1c>
 8004b2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004b2c:	d004      	beq.n	8004b38 <get_ldnumber+0x1c>
 8004b2e:	3201      	adds	r2, #1
 8004b30:	e7f8      	b.n	8004b24 <get_ldnumber+0x8>
	int vol = -1;
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b36:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004b38:	2b3a      	cmp	r3, #58	@ 0x3a
 8004b3a:	d001      	beq.n	8004b40 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004b3c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004b3e:	4770      	bx	lr
			i = *tp++ - '0';
 8004b40:	4603      	mov	r3, r0
 8004b42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004b46:	3830      	subs	r0, #48	@ 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004b48:	2809      	cmp	r0, #9
 8004b4a:	d809      	bhi.n	8004b60 <get_ldnumber+0x44>
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d002      	beq.n	8004b56 <get_ldnumber+0x3a>
	int vol = -1;
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b54:	4770      	bx	lr
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004b56:	2807      	cmp	r0, #7
 8004b58:	d805      	bhi.n	8004b66 <get_ldnumber+0x4a>
					*path = ++tt;
 8004b5a:	3201      	adds	r2, #1
 8004b5c:	600a      	str	r2, [r1, #0]
 8004b5e:	4770      	bx	lr
	int vol = -1;
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b64:	4770      	bx	lr
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return vol;
 8004b6a:	4770      	bx	lr

08004b6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004b70:	4604      	mov	r4, r0
 8004b72:	b198      	cbz	r0, 8004b9c <validate+0x30>
 8004b74:	6803      	ldr	r3, [r0, #0]
 8004b76:	b19b      	cbz	r3, 8004ba0 <validate+0x34>
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	b1a2      	cbz	r2, 8004ba6 <validate+0x3a>
 8004b7c:	8881      	ldrh	r1, [r0, #4]
 8004b7e:	88da      	ldrh	r2, [r3, #6]
 8004b80:	4291      	cmp	r1, r2
 8004b82:	d003      	beq.n	8004b8c <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8004b84:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004b86:	2400      	movs	r4, #0
 8004b88:	602c      	str	r4, [r5, #0]
	return res;
}
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004b8c:	7858      	ldrb	r0, [r3, #1]
 8004b8e:	f7ff fcdd 	bl	800454c <disk_status>
 8004b92:	f010 0001 	ands.w	r0, r0, #1
 8004b96:	d109      	bne.n	8004bac <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004b98:	6824      	ldr	r4, [r4, #0]
 8004b9a:	e7f5      	b.n	8004b88 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8004b9c:	2009      	movs	r0, #9
 8004b9e:	e7f3      	b.n	8004b88 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004ba0:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8004ba2:	2009      	movs	r0, #9
 8004ba4:	e7f0      	b.n	8004b88 <validate+0x1c>
 8004ba6:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004ba8:	2400      	movs	r4, #0
 8004baa:	e7ed      	b.n	8004b88 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8004bac:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004bae:	2400      	movs	r4, #0
 8004bb0:	e7ea      	b.n	8004b88 <validate+0x1c>

08004bb2 <sync_window>:
{
 8004bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004bb6:	78c5      	ldrb	r5, [r0, #3]
 8004bb8:	b915      	cbnz	r5, 8004bc0 <sync_window+0xe>
}
 8004bba:	4628      	mov	r0, r5
 8004bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc0:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8004bc2:	6b47      	ldr	r7, [r0, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004bc4:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 8004bc8:	2301      	movs	r3, #1
 8004bca:	463a      	mov	r2, r7
 8004bcc:	4641      	mov	r1, r8
 8004bce:	7840      	ldrb	r0, [r0, #1]
 8004bd0:	f7ff fcf0 	bl	80045b4 <disk_write>
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	b9a0      	cbnz	r0, 8004c02 <sync_window+0x50>
			fs->wflag = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004bdc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004bde:	1afb      	subs	r3, r7, r3
 8004be0:	6a22      	ldr	r2, [r4, #32]
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d2e9      	bcs.n	8004bba <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004be6:	78a6      	ldrb	r6, [r4, #2]
 8004be8:	e008      	b.n	8004bfc <sync_window+0x4a>
					wsect += fs->fsize;
 8004bea:	6a23      	ldr	r3, [r4, #32]
 8004bec:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004bee:	2301      	movs	r3, #1
 8004bf0:	463a      	mov	r2, r7
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	7860      	ldrb	r0, [r4, #1]
 8004bf6:	f7ff fcdd 	bl	80045b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bfa:	3e01      	subs	r6, #1
 8004bfc:	2e01      	cmp	r6, #1
 8004bfe:	d8f4      	bhi.n	8004bea <sync_window+0x38>
 8004c00:	e7db      	b.n	8004bba <sync_window+0x8>
			res = FR_DISK_ERR;
 8004c02:	2501      	movs	r5, #1
 8004c04:	e7d9      	b.n	8004bba <sync_window+0x8>

08004c06 <move_window>:
{
 8004c06:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c08:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004c0a:	428b      	cmp	r3, r1
 8004c0c:	d102      	bne.n	8004c14 <move_window+0xe>
	FRESULT res = FR_OK;
 8004c0e:	2600      	movs	r6, #0
}
 8004c10:	4630      	mov	r0, r6
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	4604      	mov	r4, r0
 8004c16:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8004c18:	f7ff ffcb 	bl	8004bb2 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d1f6      	bne.n	8004c10 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004c22:	2301      	movs	r3, #1
 8004c24:	462a      	mov	r2, r5
 8004c26:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8004c2a:	7860      	ldrb	r0, [r4, #1]
 8004c2c:	f7ff fcb4 	bl	8004598 <disk_read>
 8004c30:	b110      	cbz	r0, 8004c38 <move_window+0x32>
				res = FR_DISK_ERR;
 8004c32:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004c34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
			fs->winsect = sector;
 8004c38:	6365      	str	r5, [r4, #52]	@ 0x34
 8004c3a:	e7e9      	b.n	8004c10 <move_window+0xa>

08004c3c <check_fs>:
{
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004c40:	2300      	movs	r3, #0
 8004c42:	70c3      	strb	r3, [r0, #3]
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c48:	6343      	str	r3, [r0, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004c4a:	f7ff ffdc 	bl	8004c06 <move_window>
 8004c4e:	bb60      	cbnz	r0, 8004caa <check_fs+0x6e>
 8004c50:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004c52:	f204 2036 	addw	r0, r4, #566	@ 0x236
 8004c56:	f7ff fcc9 	bl	80045ec <ld_word>
 8004c5a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	d125      	bne.n	8004cae <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004c62:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8004c66:	2be9      	cmp	r3, #233	@ 0xe9
 8004c68:	d00e      	beq.n	8004c88 <check_fs+0x4c>
 8004c6a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004c6c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8004c70:	4a11      	ldr	r2, [pc, #68]	@ (8004cb8 <check_fs+0x7c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d008      	beq.n	8004c88 <check_fs+0x4c>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8004c76:	220b      	movs	r2, #11
 8004c78:	4910      	ldr	r1, [pc, #64]	@ (8004cbc <check_fs+0x80>)
 8004c7a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8004c7e:	f7ff fd17 	bl	80046b0 <mem_cmp>
 8004c82:	b1b8      	cbz	r0, 8004cb4 <check_fs+0x78>
	return 2;
 8004c84:	2502      	movs	r5, #2
 8004c86:	e013      	b.n	8004cb0 <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004c88:	f104 006e 	add.w	r0, r4, #110	@ 0x6e
 8004c8c:	f7ff fcb3 	bl	80045f6 <ld_dword>
 8004c90:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <check_fs+0x84>)
 8004c96:	4298      	cmp	r0, r3
 8004c98:	d00a      	beq.n	8004cb0 <check_fs+0x74>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004c9a:	f104 008a 	add.w	r0, r4, #138	@ 0x8a
 8004c9e:	f7ff fcaa 	bl	80045f6 <ld_dword>
 8004ca2:	4b08      	ldr	r3, [pc, #32]	@ (8004cc4 <check_fs+0x88>)
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	d1e6      	bne.n	8004c76 <check_fs+0x3a>
 8004ca8:	e002      	b.n	8004cb0 <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004caa:	2504      	movs	r5, #4
 8004cac:	e000      	b.n	8004cb0 <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004cae:	2503      	movs	r5, #3
}
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8004cb4:	2501      	movs	r5, #1
 8004cb6:	e7fb      	b.n	8004cb0 <check_fs+0x74>
 8004cb8:	009000eb 	.word	0x009000eb
 8004cbc:	0800a3fc 	.word	0x0800a3fc
 8004cc0:	00544146 	.word	0x00544146
 8004cc4:	33544146 	.word	0x33544146

08004cc8 <find_volume>:
{
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	460d      	mov	r5, r1
 8004cd0:	4616      	mov	r6, r2
	*rfs = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8004cd6:	f7ff ff21 	bl	8004b1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004cda:	1e07      	subs	r7, r0, #0
 8004cdc:	f2c0 8208 	blt.w	80050f0 <find_volume+0x428>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004ce0:	4bc1      	ldr	r3, [pc, #772]	@ (8004fe8 <find_volume+0x320>)
 8004ce2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	f000 8207 	beq.w	80050fa <find_volume+0x432>
	*rfs = fs;							/* Return pointer to the file system object */
 8004cec:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004cee:	f006 05fe 	and.w	r5, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004cf2:	7823      	ldrb	r3, [r4, #0]
 8004cf4:	b173      	cbz	r3, 8004d14 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8004cf6:	7860      	ldrb	r0, [r4, #1]
 8004cf8:	f7ff fc28 	bl	800454c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004cfc:	f010 0601 	ands.w	r6, r0, #1
 8004d00:	d108      	bne.n	8004d14 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	f000 81f5 	beq.w	80050f2 <find_volume+0x42a>
 8004d08:	f010 0f04 	tst.w	r0, #4
 8004d0c:	f000 81f1 	beq.w	80050f2 <find_volume+0x42a>
				return FR_WRITE_PROTECTED;
 8004d10:	260a      	movs	r6, #10
 8004d12:	e1ee      	b.n	80050f2 <find_volume+0x42a>
	fs->fs_type = 0;					/* Clear the file system object */
 8004d14:	2300      	movs	r3, #0
 8004d16:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004d18:	4bb4      	ldr	r3, [pc, #720]	@ (8004fec <find_volume+0x324>)
 8004d1a:	f813 0017 	ldrb.w	r0, [r3, r7, lsl #1]
 8004d1e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004d20:	f7ff fc22 	bl	8004568 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004d24:	f010 0601 	ands.w	r6, r0, #1
 8004d28:	f040 81e9 	bne.w	80050fe <find_volume+0x436>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004d2c:	b11d      	cbz	r5, 8004d36 <find_volume+0x6e>
 8004d2e:	f010 0f04 	tst.w	r0, #4
 8004d32:	f040 81e6 	bne.w	8005102 <find_volume+0x43a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004d36:	2100      	movs	r1, #0
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff ff7f 	bl	8004c3c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	f000 808c 	beq.w	8004e5c <find_volume+0x194>
 8004d44:	2801      	cmp	r0, #1
 8004d46:	d96c      	bls.n	8004e22 <find_volume+0x15a>
	bsect = 0;
 8004d48:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004d4a:	2804      	cmp	r0, #4
 8004d4c:	f000 81db 	beq.w	8005106 <find_volume+0x43e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004d50:	2801      	cmp	r0, #1
 8004d52:	f200 81da 	bhi.w	800510a <find_volume+0x442>
	if (fmt == 1) {
 8004d56:	f000 8127 	beq.w	8004fa8 <find_volume+0x2e0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004d5a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8004d5e:	f7ff fc45 	bl	80045ec <ld_word>
 8004d62:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004d66:	f040 81e6 	bne.w	8005136 <find_volume+0x46e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004d6a:	f104 004e 	add.w	r0, r4, #78	@ 0x4e
 8004d6e:	f7ff fc3d 	bl	80045ec <ld_word>
 8004d72:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004d74:	b920      	cbnz	r0, 8004d80 <find_volume+0xb8>
 8004d76:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8004d7a:	f7ff fc3c 	bl	80045f6 <ld_dword>
 8004d7e:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8004d80:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004d82:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 8004d86:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d88:	1e53      	subs	r3, r2, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f200 81d4 	bhi.w	800513a <find_volume+0x472>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004d92:	fb07 f802 	mul.w	r8, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d96:	f894 9045 	ldrb.w	r9, [r4, #69]	@ 0x45
 8004d9a:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d9e:	f1b9 0f00 	cmp.w	r9, #0
 8004da2:	f000 81cc 	beq.w	800513e <find_volume+0x476>
 8004da6:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8004daa:	ea19 0f03 	tst.w	r9, r3
 8004dae:	f040 81c8 	bne.w	8005142 <find_volume+0x47a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004db2:	f104 0049 	add.w	r0, r4, #73	@ 0x49
 8004db6:	f7ff fc19 	bl	80045ec <ld_word>
 8004dba:	4682      	mov	sl, r0
 8004dbc:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004dbe:	f010 0f0f 	tst.w	r0, #15
 8004dc2:	f040 81c0 	bne.w	8005146 <find_volume+0x47e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004dc6:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 8004dca:	f7ff fc0f 	bl	80045ec <ld_word>
 8004dce:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004dd0:	b920      	cbnz	r0, 8004ddc <find_volume+0x114>
 8004dd2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dd6:	f7ff fc0e 	bl	80045f6 <ld_dword>
 8004dda:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004ddc:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 8004de0:	f7ff fc04 	bl	80045ec <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004de4:	4602      	mov	r2, r0
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f000 81af 	beq.w	800514a <find_volume+0x482>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004dec:	eb00 0308 	add.w	r3, r0, r8
 8004df0:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004df4:	459b      	cmp	fp, r3
 8004df6:	f0c0 81aa 	bcc.w	800514e <find_volume+0x486>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004dfa:	ebab 0b03 	sub.w	fp, fp, r3
 8004dfe:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004e02:	45cb      	cmp	fp, r9
 8004e04:	f0c0 81a5 	bcc.w	8005152 <find_volume+0x48a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004e08:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8004e0c:	4281      	cmp	r1, r0
 8004e0e:	f200 80f1 	bhi.w	8004ff4 <find_volume+0x32c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004e12:	f640 70f5 	movw	r0, #4085	@ 0xff5
 8004e16:	4281      	cmp	r1, r0
 8004e18:	f240 8124 	bls.w	8005064 <find_volume+0x39c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004e1c:	f04f 0b02 	mov.w	fp, #2
 8004e20:	e0ea      	b.n	8004ff8 <find_volume+0x330>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004e22:	4b72      	ldr	r3, [pc, #456]	@ (8004fec <find_volume+0x324>)
 8004e24:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	b9cb      	cbnz	r3, 8004e60 <find_volume+0x198>
	bsect = 0;
 8004e2c:	2500      	movs	r5, #0
 8004e2e:	e78c      	b.n	8004d4a <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004e30:	2000      	movs	r0, #0
 8004e32:	ab06      	add	r3, sp, #24
 8004e34:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004e38:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	2d03      	cmp	r5, #3
 8004e40:	d810      	bhi.n	8004e64 <find_volume+0x19c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004e42:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8004e46:	012b      	lsls	r3, r5, #4
 8004e48:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004e4c:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004e4e:	7903      	ldrb	r3, [r0, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ed      	beq.n	8004e30 <find_volume+0x168>
 8004e54:	3008      	adds	r0, #8
 8004e56:	f7ff fbce 	bl	80045f6 <ld_dword>
 8004e5a:	e7ea      	b.n	8004e32 <find_volume+0x16a>
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	e7ee      	b.n	8004e3e <find_volume+0x176>
 8004e60:	2500      	movs	r5, #0
 8004e62:	e7ec      	b.n	8004e3e <find_volume+0x176>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004e64:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <find_volume+0x324>)
 8004e66:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8004e6a:	f893 8001 	ldrb.w	r8, [r3, #1]
		if (i) i--;
 8004e6e:	f1b8 0f00 	cmp.w	r8, #0
 8004e72:	d016      	beq.n	8004ea2 <find_volume+0x1da>
 8004e74:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004e78:	e013      	b.n	8004ea2 <find_volume+0x1da>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7ff fedd 	bl	8004c3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004e82:	4b5a      	ldr	r3, [pc, #360]	@ (8004fec <find_volume+0x324>)
 8004e84:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f47f af5d 	bne.w	8004d4a <find_volume+0x82>
 8004e90:	2801      	cmp	r0, #1
 8004e92:	f67f af5a 	bls.w	8004d4a <find_volume+0x82>
 8004e96:	f108 0801 	add.w	r8, r8, #1
 8004e9a:	f1b8 0f03 	cmp.w	r8, #3
 8004e9e:	f63f af54 	bhi.w	8004d4a <find_volume+0x82>
			bsect = br[i];
 8004ea2:	ab06      	add	r3, sp, #24
 8004ea4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8004ea8:	f853 5c10 	ldr.w	r5, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	d1e4      	bne.n	8004e7a <find_volume+0x1b2>
 8004eb0:	2003      	movs	r0, #3
 8004eb2:	e7e6      	b.n	8004e82 <find_volume+0x1ba>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8004eb8:	d804      	bhi.n	8004ec4 <find_volume+0x1fc>
 8004eba:	18e2      	adds	r2, r4, r3
 8004ebc:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d0f7      	beq.n	8004eb4 <find_volume+0x1ec>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8004ec4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ec6:	f240 8122 	bls.w	800510e <find_volume+0x446>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8004eca:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8004ece:	f7ff fb8d 	bl	80045ec <ld_word>
 8004ed2:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004ed6:	f040 811c 	bne.w	8005112 <find_volume+0x44a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8004eda:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	f040 8119 	bne.w	8005116 <find_volume+0x44e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8004ee4:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8004ee8:	f7ff fb90 	bl	800460c <ld_qword>
 8004eec:	1947      	adds	r7, r0, r5
 8004eee:	f141 0800 	adc.w	r8, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ef6:	42bb      	cmp	r3, r7
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	eb73 0308 	sbcs.w	r3, r3, r8
 8004f00:	f0c0 810b 	bcc.w	800511a <find_volume+0x452>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8004f04:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8004f08:	f7ff fb75 	bl	80045f6 <ld_dword>
 8004f0c:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8004f0e:	f894 a0a6 	ldrb.w	sl, [r4, #166]	@ 0xa6
 8004f12:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8004f16:	f1ba 0f01 	cmp.w	sl, #1
 8004f1a:	f040 8100 	bne.w	800511e <find_volume+0x456>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8004f1e:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8004f22:	2201      	movs	r2, #1
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f2e:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80f6 	beq.w	8005122 <find_volume+0x45a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8004f36:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 8004f3a:	f7ff fb5c 	bl	80045f6 <ld_dword>
 8004f3e:	4683      	mov	fp, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8004f40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff0 <find_volume+0x328>)
 8004f42:	4298      	cmp	r0, r3
 8004f44:	f200 80ef 	bhi.w	8005126 <find_volume+0x45e>
		fs->n_fatent = nclst + 2;
 8004f48:	1c83      	adds	r3, r0, #2
 8004f4a:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 8004f4c:	6265      	str	r5, [r4, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8004f4e:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8004f52:	f7ff fb50 	bl	80045f6 <ld_dword>
 8004f56:	eb00 0905 	add.w	r9, r0, r5
 8004f5a:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8004f5e:	f104 0088 	add.w	r0, r4, #136	@ 0x88
 8004f62:	f7ff fb48 	bl	80045f6 <ld_dword>
 8004f66:	4428      	add	r0, r5
 8004f68:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f70:	fb0b f303 	mul.w	r3, fp, r3
 8004f74:	eb19 0903 	adds.w	r9, r9, r3
 8004f78:	4152      	adcs	r2, r2
 8004f7a:	454f      	cmp	r7, r9
 8004f7c:	eb78 0202 	sbcs.w	r2, r8, r2
 8004f80:	f0c0 80d3 	bcc.w	800512a <find_volume+0x462>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8004f84:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8004f88:	f7ff fb35 	bl	80045f6 <ld_dword>
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8004f90:	4620      	mov	r0, r4
 8004f92:	f7ff fc7d 	bl	8004890 <clust2sect>
 8004f96:	4601      	mov	r1, r0
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff fe34 	bl	8004c06 <move_window>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f040 80c5 	bne.w	800512e <find_volume+0x466>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	e002      	b.n	8004fae <find_volume+0x2e6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8004fa8:	230b      	movs	r3, #11
 8004faa:	e784      	b.n	8004eb6 <find_volume+0x1ee>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8004fac:	3520      	adds	r5, #32
 8004fae:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004fb2:	d20d      	bcs.n	8004fd0 <find_volume+0x308>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8004fb4:	1963      	adds	r3, r4, r5
 8004fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fba:	2b81      	cmp	r3, #129	@ 0x81
 8004fbc:	d1f6      	bne.n	8004fac <find_volume+0x2e4>
 8004fbe:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8004fc2:	f105 0014 	add.w	r0, r5, #20
 8004fc6:	4418      	add	r0, r3
 8004fc8:	f7ff fb15 	bl	80045f6 <ld_dword>
 8004fcc:	2802      	cmp	r0, #2
 8004fce:	d1ed      	bne.n	8004fac <find_volume+0x2e4>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8004fd0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004fd4:	f000 80ad 	beq.w	8005132 <find_volume+0x46a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fdc:	61a3      	str	r3, [r4, #24]
 8004fde:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 8004fe0:	f04f 0b04 	mov.w	fp, #4
 8004fe4:	e032      	b.n	800504c <find_volume+0x384>
 8004fe6:	bf00      	nop
 8004fe8:	20000854 	.word	0x20000854
 8004fec:	2000032c 	.word	0x2000032c
 8004ff0:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8004ff4:	f04f 0b03 	mov.w	fp, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004ff8:	f101 0902 	add.w	r9, r1, #2
 8004ffc:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005000:	6265      	str	r5, [r4, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005002:	442a      	add	r2, r5
 8005004:	62a2      	str	r2, [r4, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005006:	442b      	add	r3, r5
 8005008:	6323      	str	r3, [r4, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800500a:	f1bb 0f03 	cmp.w	fp, #3
 800500e:	d02c      	beq.n	800506a <find_volume+0x3a2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005010:	f1ba 0f00 	cmp.w	sl, #0
 8005014:	f000 80a3 	beq.w	800515e <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005018:	4442      	add	r2, r8
 800501a:	62e2      	str	r2, [r4, #44]	@ 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800501c:	f1bb 0f02 	cmp.w	fp, #2
 8005020:	d034      	beq.n	800508c <find_volume+0x3c4>
 8005022:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8005026:	f009 0901 	and.w	r9, r9, #1
 800502a:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800502e:	f209 13ff 	addw	r3, r9, #511	@ 0x1ff
 8005032:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8005036:	f0c0 8094 	bcc.w	8005162 <find_volume+0x49a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800503a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800503e:	61a3      	str	r3, [r4, #24]
 8005040:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8005042:	2380      	movs	r3, #128	@ 0x80
 8005044:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005046:	f1bb 0f03 	cmp.w	fp, #3
 800504a:	d022      	beq.n	8005092 <find_volume+0x3ca>
	fs->fs_type = fmt;		/* FAT sub-type */
 800504c:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8005050:	4a45      	ldr	r2, [pc, #276]	@ (8005168 <find_volume+0x4a0>)
 8005052:	8813      	ldrh	r3, [r2, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
 800505a:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff fbf9 	bl	8004854 <clear_lock>
	return FR_OK;
 8005062:	e046      	b.n	80050f2 <find_volume+0x42a>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005064:	f04f 0b01 	mov.w	fp, #1
 8005068:	e7c6      	b.n	8004ff8 <find_volume+0x330>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800506a:	f104 0062 	add.w	r0, r4, #98	@ 0x62
 800506e:	f7ff fabd 	bl	80045ec <ld_word>
 8005072:	2800      	cmp	r0, #0
 8005074:	d16f      	bne.n	8005156 <find_volume+0x48e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005076:	f1ba 0f00 	cmp.w	sl, #0
 800507a:	d16e      	bne.n	800515a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800507c:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8005080:	f7ff fab9 	bl	80045f6 <ld_dword>
 8005084:	62e0      	str	r0, [r4, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005086:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800508a:	e7d0      	b.n	800502e <find_volume+0x366>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800508c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8005090:	e7cd      	b.n	800502e <find_volume+0x366>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005092:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005096:	f7ff faa9 	bl	80045ec <ld_word>
 800509a:	2801      	cmp	r0, #1
 800509c:	d1d6      	bne.n	800504c <find_volume+0x384>
			&& move_window(fs, bsect + 1) == FR_OK)
 800509e:	1c69      	adds	r1, r5, #1
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff fdb0 	bl	8004c06 <move_window>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1d0      	bne.n	800504c <find_volume+0x384>
			fs->fsi_flag = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80050ae:	f204 2036 	addw	r0, r4, #566	@ 0x236
 80050b2:	f7ff fa9b 	bl	80045ec <ld_word>
 80050b6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80050ba:	4298      	cmp	r0, r3
 80050bc:	d1c6      	bne.n	800504c <find_volume+0x384>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80050be:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80050c2:	f7ff fa98 	bl	80045f6 <ld_dword>
 80050c6:	4b29      	ldr	r3, [pc, #164]	@ (800516c <find_volume+0x4a4>)
 80050c8:	4298      	cmp	r0, r3
 80050ca:	d1bf      	bne.n	800504c <find_volume+0x384>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80050cc:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 80050d0:	f7ff fa91 	bl	80045f6 <ld_dword>
 80050d4:	4b26      	ldr	r3, [pc, #152]	@ (8005170 <find_volume+0x4a8>)
 80050d6:	4298      	cmp	r0, r3
 80050d8:	d1b8      	bne.n	800504c <find_volume+0x384>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80050da:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 80050de:	f7ff fa8a 	bl	80045f6 <ld_dword>
 80050e2:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80050e4:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 80050e8:	f7ff fa85 	bl	80045f6 <ld_dword>
 80050ec:	6160      	str	r0, [r4, #20]
 80050ee:	e7ad      	b.n	800504c <find_volume+0x384>
	if (vol < 0) return FR_INVALID_DRIVE;
 80050f0:	260b      	movs	r6, #11
}
 80050f2:	4630      	mov	r0, r6
 80050f4:	b007      	add	sp, #28
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050fa:	260c      	movs	r6, #12
 80050fc:	e7f9      	b.n	80050f2 <find_volume+0x42a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80050fe:	2603      	movs	r6, #3
 8005100:	e7f7      	b.n	80050f2 <find_volume+0x42a>
		return FR_WRITE_PROTECTED;
 8005102:	260a      	movs	r6, #10
 8005104:	e7f5      	b.n	80050f2 <find_volume+0x42a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005106:	2601      	movs	r6, #1
 8005108:	e7f3      	b.n	80050f2 <find_volume+0x42a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800510a:	260d      	movs	r6, #13
 800510c:	e7f1      	b.n	80050f2 <find_volume+0x42a>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800510e:	260d      	movs	r6, #13
 8005110:	e7ef      	b.n	80050f2 <find_volume+0x42a>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8005112:	260d      	movs	r6, #13
 8005114:	e7ed      	b.n	80050f2 <find_volume+0x42a>
			return FR_NO_FILESYSTEM;
 8005116:	260d      	movs	r6, #13
 8005118:	e7eb      	b.n	80050f2 <find_volume+0x42a>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800511a:	260d      	movs	r6, #13
 800511c:	e7e9      	b.n	80050f2 <find_volume+0x42a>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800511e:	260d      	movs	r6, #13
 8005120:	e7e7      	b.n	80050f2 <find_volume+0x42a>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8005122:	260d      	movs	r6, #13
 8005124:	e7e5      	b.n	80050f2 <find_volume+0x42a>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005126:	260d      	movs	r6, #13
 8005128:	e7e3      	b.n	80050f2 <find_volume+0x42a>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800512a:	260d      	movs	r6, #13
 800512c:	e7e1      	b.n	80050f2 <find_volume+0x42a>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800512e:	4656      	mov	r6, sl
 8005130:	e7df      	b.n	80050f2 <find_volume+0x42a>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8005132:	260d      	movs	r6, #13
 8005134:	e7dd      	b.n	80050f2 <find_volume+0x42a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005136:	260d      	movs	r6, #13
 8005138:	e7db      	b.n	80050f2 <find_volume+0x42a>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800513a:	260d      	movs	r6, #13
 800513c:	e7d9      	b.n	80050f2 <find_volume+0x42a>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800513e:	260d      	movs	r6, #13
 8005140:	e7d7      	b.n	80050f2 <find_volume+0x42a>
 8005142:	260d      	movs	r6, #13
 8005144:	e7d5      	b.n	80050f2 <find_volume+0x42a>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005146:	260d      	movs	r6, #13
 8005148:	e7d3      	b.n	80050f2 <find_volume+0x42a>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800514a:	260d      	movs	r6, #13
 800514c:	e7d1      	b.n	80050f2 <find_volume+0x42a>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800514e:	260d      	movs	r6, #13
 8005150:	e7cf      	b.n	80050f2 <find_volume+0x42a>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005152:	260d      	movs	r6, #13
 8005154:	e7cd      	b.n	80050f2 <find_volume+0x42a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005156:	260d      	movs	r6, #13
 8005158:	e7cb      	b.n	80050f2 <find_volume+0x42a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800515a:	260d      	movs	r6, #13
 800515c:	e7c9      	b.n	80050f2 <find_volume+0x42a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800515e:	260d      	movs	r6, #13
 8005160:	e7c7      	b.n	80050f2 <find_volume+0x42a>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005162:	260d      	movs	r6, #13
 8005164:	e7c5      	b.n	80050f2 <find_volume+0x42a>
 8005166:	bf00      	nop
 8005168:	20000850 	.word	0x20000850
 800516c:	41615252 	.word	0x41615252
 8005170:	61417272 	.word	0x61417272

08005174 <find_bitmap>:
{
 8005174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005178:	4605      	mov	r5, r0
 800517a:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800517c:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 800517e:	69c3      	ldr	r3, [r0, #28]
 8005180:	3b02      	subs	r3, #2
 8005182:	42bb      	cmp	r3, r7
 8005184:	d800      	bhi.n	8005188 <find_bitmap+0x14>
 8005186:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
 8005188:	46b8      	mov	r8, r7
 800518a:	463c      	mov	r4, r7
 800518c:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800518e:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8005190:	eb01 3114 	add.w	r1, r1, r4, lsr #12
 8005194:	4628      	mov	r0, r5
 8005196:	f7ff fd36 	bl	8004c06 <move_window>
 800519a:	4684      	mov	ip, r0
 800519c:	bb40      	cbnz	r0, 80051f0 <find_bitmap+0x7c>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800519e:	f3c4 00c8 	ubfx	r0, r4, #3, #9
 80051a2:	f004 0207 	and.w	r2, r4, #7
 80051a6:	2301      	movs	r3, #1
 80051a8:	4093      	lsls	r3, r2
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e009      	b.n	80051c2 <find_bitmap+0x4e>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80051ae:	46a0      	mov	r8, r4
 80051b0:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
 80051b2:	42a7      	cmp	r7, r4
 80051b4:	d01f      	beq.n	80051f6 <find_bitmap+0x82>
			} while (bm);
 80051b6:	b923      	cbnz	r3, 80051c2 <find_bitmap+0x4e>
		} while (++i < SS(fs));
 80051b8:	3001      	adds	r0, #1
 80051ba:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80051be:	d2e6      	bcs.n	800518e <find_bitmap+0x1a>
			bm = 1;
 80051c0:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80051c2:	182a      	adds	r2, r5, r0
 80051c4:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 80051c8:	401a      	ands	r2, r3
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80051ce:	3401      	adds	r4, #1
 80051d0:	69e9      	ldr	r1, [r5, #28]
 80051d2:	3902      	subs	r1, #2
 80051d4:	42a1      	cmp	r1, r4
 80051d6:	d803      	bhi.n	80051e0 <find_bitmap+0x6c>
					val = 0; bm = 0; i = SS(fs);
 80051d8:	4663      	mov	r3, ip
 80051da:	2400      	movs	r4, #0
 80051dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
				if (!bv) {	/* Is it a free cluster? */
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d1e4      	bne.n	80051ae <find_bitmap+0x3a>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80051e4:	3601      	adds	r6, #1
 80051e6:	454e      	cmp	r6, r9
 80051e8:	d1e3      	bne.n	80051b2 <find_bitmap+0x3e>
 80051ea:	f108 0002 	add.w	r0, r8, #2
 80051ee:	e003      	b.n	80051f8 <find_bitmap+0x84>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051f4:	e000      	b.n	80051f8 <find_bitmap+0x84>
				if (val == clst) return 0;	/* All cluster scanned? */
 80051f6:	2000      	movs	r0, #0
}
 80051f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080051fc <change_bitmap>:
{
 80051fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005200:	4606      	mov	r6, r0
 8005202:	4617      	mov	r7, r2
 8005204:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8005206:	1e8b      	subs	r3, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005208:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800520a:	eb01 3113 	add.w	r1, r1, r3, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800520e:	f3c3 05c8 	ubfx	r5, r3, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2401      	movs	r4, #1
 8005218:	409c      	lsls	r4, r3
 800521a:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800521c:	f101 0901 	add.w	r9, r1, #1
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff fcf0 	bl	8004c06 <move_window>
 8005226:	4602      	mov	r2, r0
 8005228:	b110      	cbz	r0, 8005230 <change_bitmap+0x34>
 800522a:	2201      	movs	r2, #1
 800522c:	e01e      	b.n	800526c <change_bitmap+0x70>
			bm = 1;
 800522e:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005230:	1973      	adds	r3, r6, r5
 8005232:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8005236:	4221      	tst	r1, r4
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	4543      	cmp	r3, r8
 8005240:	d013      	beq.n	800526a <change_bitmap+0x6e>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005242:	1973      	adds	r3, r6, r5
 8005244:	4061      	eors	r1, r4
 8005246:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
				fs->wflag = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800524e:	3f01      	subs	r7, #1
 8005250:	d00c      	beq.n	800526c <change_bitmap+0x70>
			} while (bm <<= 1);		/* Next bit */
 8005252:	409c      	lsls	r4, r3
 8005254:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8005258:	d1ea      	bne.n	8005230 <change_bitmap+0x34>
		} while (++i < SS(fs));		/* Next byte */
 800525a:	441d      	add	r5, r3
			bm = 1;
 800525c:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
 800525e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8005262:	d3e4      	bcc.n	800522e <change_bitmap+0x32>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005264:	4649      	mov	r1, r9
		i = 0;
 8005266:	2500      	movs	r5, #0
 8005268:	e7d8      	b.n	800521c <change_bitmap+0x20>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800526a:	2202      	movs	r2, #2
}
 800526c:	4610      	mov	r0, r2
 800526e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005272 <put_fat>:
{
 8005272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005276:	2901      	cmp	r1, #1
 8005278:	f240 8086 	bls.w	8005388 <put_fat+0x116>
 800527c:	4605      	mov	r5, r0
 800527e:	460c      	mov	r4, r1
 8005280:	4616      	mov	r6, r2
 8005282:	69c3      	ldr	r3, [r0, #28]
 8005284:	428b      	cmp	r3, r1
 8005286:	f240 8083 	bls.w	8005390 <put_fat+0x11e>
		switch (fs->fs_type) {
 800528a:	7803      	ldrb	r3, [r0, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d068      	beq.n	8005362 <put_fat+0xf0>
 8005290:	d836      	bhi.n	8005300 <put_fat+0x8e>
 8005292:	2b01      	cmp	r3, #1
 8005294:	d132      	bne.n	80052fc <put_fat+0x8a>
			bc = (UINT)clst; bc += bc / 2;
 8005296:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800529a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800529c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80052a0:	f7ff fcb1 	bl	8004c06 <move_window>
			if (res != FR_OK) break;
 80052a4:	4607      	mov	r7, r0
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d16f      	bne.n	800538a <put_fat+0x118>
			p = fs->win + bc++ % SS(fs);
 80052aa:	f105 0a38 	add.w	sl, r5, #56	@ 0x38
 80052ae:	f108 0901 	add.w	r9, r8, #1
 80052b2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052b6:	f014 0401 	ands.w	r4, r4, #1
 80052ba:	d048      	beq.n	800534e <put_fat+0xdc>
 80052bc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80052c0:	0132      	lsls	r2, r6, #4
 80052c2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052d6:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80052d8:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 80052dc:	4628      	mov	r0, r5
 80052de:	f7ff fc92 	bl	8004c06 <move_window>
			if (res != FR_OK) break;
 80052e2:	4607      	mov	r7, r0
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d150      	bne.n	800538a <put_fat+0x118>
			p = fs->win + bc % SS(fs);
 80052e8:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80052ec:	b38c      	cbz	r4, 8005352 <put_fat+0xe0>
 80052ee:	f3c6 1307 	ubfx	r3, r6, #4, #8
 80052f2:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	70eb      	strb	r3, [r5, #3]
			break;
 80052fa:	e046      	b.n	800538a <put_fat+0x118>
		switch (fs->fs_type) {
 80052fc:	2702      	movs	r7, #2
 80052fe:	e044      	b.n	800538a <put_fat+0x118>
 8005300:	3b03      	subs	r3, #3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d845      	bhi.n	8005394 <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005308:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800530a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800530e:	f7ff fc7a 	bl	8004c06 <move_window>
			if (res != FR_OK) break;
 8005312:	4607      	mov	r7, r0
 8005314:	bbc8      	cbnz	r0, 800538a <put_fat+0x118>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005316:	782b      	ldrb	r3, [r5, #0]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d00c      	beq.n	8005336 <put_fat+0xc4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800531c:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
 8005320:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8005324:	00a3      	lsls	r3, r4, #2
 8005326:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800532a:	4418      	add	r0, r3
 800532c:	f7ff f963 	bl	80045f6 <ld_dword>
 8005330:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8005334:	4306      	orrs	r6, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005336:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800533a:	00a4      	lsls	r4, r4, #2
 800533c:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8005340:	4631      	mov	r1, r6
 8005342:	4420      	add	r0, r4
 8005344:	f7ff f988 	bl	8004658 <st_dword>
			fs->wflag = 1;
 8005348:	2301      	movs	r3, #1
 800534a:	70eb      	strb	r3, [r5, #3]
			break;
 800534c:	e01d      	b.n	800538a <put_fat+0x118>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800534e:	b2f3      	uxtb	r3, r6
 8005350:	e7bd      	b.n	80052ce <put_fat+0x5c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005352:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8005356:	f3c6 2603 	ubfx	r6, r6, #8, #4
 800535a:	f023 030f 	bic.w	r3, r3, #15
 800535e:	4333      	orrs	r3, r6
 8005360:	e7c7      	b.n	80052f2 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005362:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8005364:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005368:	f7ff fc4d 	bl	8004c06 <move_window>
			if (res != FR_OK) break;
 800536c:	4607      	mov	r7, r0
 800536e:	b960      	cbnz	r0, 800538a <put_fat+0x118>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005370:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8005374:	0064      	lsls	r4, r4, #1
 8005376:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800537a:	b2b1      	uxth	r1, r6
 800537c:	4420      	add	r0, r4
 800537e:	f7ff f967 	bl	8004650 <st_word>
			fs->wflag = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	70eb      	strb	r3, [r5, #3]
			break;
 8005386:	e000      	b.n	800538a <put_fat+0x118>
	FRESULT res = FR_INT_ERR;
 8005388:	2702      	movs	r7, #2
}
 800538a:	4638      	mov	r0, r7
 800538c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 8005390:	2702      	movs	r7, #2
 8005392:	e7fa      	b.n	800538a <put_fat+0x118>
		switch (fs->fs_type) {
 8005394:	2702      	movs	r7, #2
 8005396:	e7f8      	b.n	800538a <put_fat+0x118>

08005398 <fill_last_frag>:
{
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4604      	mov	r4, r0
 800539c:	460d      	mov	r5, r1
 800539e:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80053a0:	e007      	b.n	80053b2 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80053a2:	4632      	mov	r2, r6
 80053a4:	f7ff ff65 	bl	8005272 <put_fat>
		if (res != FR_OK) return res;
 80053a8:	4603      	mov	r3, r0
 80053aa:	b958      	cbnz	r0, 80053c4 <fill_last_frag+0x2c>
		obj->n_frag--;
 80053ac:	69e3      	ldr	r3, [r4, #28]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80053b2:	69e3      	ldr	r3, [r4, #28]
 80053b4:	b133      	cbz	r3, 80053c4 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	1aea      	subs	r2, r5, r3
 80053ba:	1c51      	adds	r1, r2, #1
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d9f0      	bls.n	80053a2 <fill_last_frag+0xa>
 80053c0:	3202      	adds	r2, #2
 80053c2:	e7ef      	b.n	80053a4 <fill_last_frag+0xc>
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd70      	pop	{r4, r5, r6, pc}

080053c8 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80053c8:	79c3      	ldrb	r3, [r0, #7]
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d002      	beq.n	80053d4 <fill_first_frag+0xc>
	return FR_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	4770      	bx	lr
{
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80053d8:	6881      	ldr	r1, [r0, #8]
 80053da:	6984      	ldr	r4, [r0, #24]
 80053dc:	b14c      	cbz	r4, 80053f2 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 80053de:	1c4d      	adds	r5, r1, #1
 80053e0:	462a      	mov	r2, r5
 80053e2:	6830      	ldr	r0, [r6, #0]
 80053e4:	f7ff ff45 	bl	8005272 <put_fat>
			if (res != FR_OK) return res;
 80053e8:	4603      	mov	r3, r0
 80053ea:	b920      	cbnz	r0, 80053f6 <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80053ec:	3c01      	subs	r4, #1
 80053ee:	4629      	mov	r1, r5
 80053f0:	e7f4      	b.n	80053dc <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80053f2:	2300      	movs	r3, #0
 80053f4:	71f3      	strb	r3, [r6, #7]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	bd70      	pop	{r4, r5, r6, pc}

080053fa <get_fat>:
{
 80053fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80053fc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80053fe:	2901      	cmp	r1, #1
 8005400:	f240 8094 	bls.w	800552c <get_fat+0x132>
 8005404:	4603      	mov	r3, r0
 8005406:	460c      	mov	r4, r1
 8005408:	69ea      	ldr	r2, [r5, #28]
 800540a:	428a      	cmp	r2, r1
 800540c:	f240 8090 	bls.w	8005530 <get_fat+0x136>
		switch (fs->fs_type) {
 8005410:	782a      	ldrb	r2, [r5, #0]
 8005412:	3a01      	subs	r2, #1
 8005414:	2a03      	cmp	r2, #3
 8005416:	f200 808d 	bhi.w	8005534 <get_fat+0x13a>
 800541a:	e8df f002 	tbb	[pc, r2]
 800541e:	2b02      	.short	0x2b02
 8005420:	4f3c      	.short	0x4f3c
			bc = (UINT)clst; bc += bc / 2;
 8005422:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005426:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005428:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800542c:	4628      	mov	r0, r5
 800542e:	f7ff fbea 	bl	8004c06 <move_window>
 8005432:	b110      	cbz	r0, 800543a <get_fat+0x40>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005438:	e079      	b.n	800552e <get_fat+0x134>
			wc = fs->win[bc++ % SS(fs)];
 800543a:	1c77      	adds	r7, r6, #1
 800543c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005440:	442e      	add	r6, r5
 8005442:	f896 6038 	ldrb.w	r6, [r6, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005446:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005448:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800544c:	4628      	mov	r0, r5
 800544e:	f7ff fbda 	bl	8004c06 <move_window>
 8005452:	2800      	cmp	r0, #0
 8005454:	d170      	bne.n	8005538 <get_fat+0x13e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005456:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800545a:	442f      	add	r7, r5
 800545c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005460:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005464:	f014 0f01 	tst.w	r4, #1
 8005468:	d001      	beq.n	800546e <get_fat+0x74>
 800546a:	0930      	lsrs	r0, r6, #4
 800546c:	e05f      	b.n	800552e <get_fat+0x134>
 800546e:	f3c6 000b 	ubfx	r0, r6, #0, #12
 8005472:	e05c      	b.n	800552e <get_fat+0x134>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005474:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005476:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800547a:	4628      	mov	r0, r5
 800547c:	f7ff fbc3 	bl	8004c06 <move_window>
 8005480:	2800      	cmp	r0, #0
 8005482:	d15c      	bne.n	800553e <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005484:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8005488:	0064      	lsls	r4, r4, #1
 800548a:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800548e:	4420      	add	r0, r4
 8005490:	f7ff f8ac 	bl	80045ec <ld_word>
			break;
 8005494:	e04b      	b.n	800552e <get_fat+0x134>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005496:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005498:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800549c:	4628      	mov	r0, r5
 800549e:	f7ff fbb2 	bl	8004c06 <move_window>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d14e      	bne.n	8005544 <get_fat+0x14a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054a6:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80054aa:	00a4      	lsls	r4, r4, #2
 80054ac:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 80054b0:	4420      	add	r0, r4
 80054b2:	f7ff f8a0 	bl	80045f6 <ld_dword>
 80054b6:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 80054ba:	e038      	b.n	800552e <get_fat+0x134>
			if (obj->objsize) {
 80054bc:	6902      	ldr	r2, [r0, #16]
 80054be:	6941      	ldr	r1, [r0, #20]
 80054c0:	ea52 0001 	orrs.w	r0, r2, r1
 80054c4:	d041      	beq.n	800554a <get_fat+0x150>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80054c6:	6898      	ldr	r0, [r3, #8]
 80054c8:	1a20      	subs	r0, r4, r0
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80054ca:	3a01      	subs	r2, #1
 80054cc:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 80054d0:	0a52      	lsrs	r2, r2, #9
 80054d2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80054d6:	8969      	ldrh	r1, [r5, #10]
 80054d8:	fbb2 f2f1 	udiv	r2, r2, r1
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80054dc:	79d9      	ldrb	r1, [r3, #7]
 80054de:	2902      	cmp	r1, #2
 80054e0:	d008      	beq.n	80054f4 <get_fat+0xfa>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80054e2:	2903      	cmp	r1, #3
 80054e4:	d00b      	beq.n	80054fe <get_fat+0x104>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80054e6:	2902      	cmp	r1, #2
 80054e8:	d034      	beq.n	8005554 <get_fat+0x15a>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	b163      	cbz	r3, 8005508 <get_fat+0x10e>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80054ee:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80054f2:	e01c      	b.n	800552e <get_fat+0x134>
					if (cofs <= clen) {
 80054f4:	4290      	cmp	r0, r2
 80054f6:	d8f4      	bhi.n	80054e2 <get_fat+0xe8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80054f8:	d029      	beq.n	800554e <get_fat+0x154>
 80054fa:	1c60      	adds	r0, r4, #1
 80054fc:	e017      	b.n	800552e <get_fat+0x134>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	4282      	cmp	r2, r0
 8005502:	d9f0      	bls.n	80054e6 <get_fat+0xec>
					val = clst + 1; 	/* Generate the value */
 8005504:	1c60      	adds	r0, r4, #1
					break;
 8005506:	e012      	b.n	800552e <get_fat+0x134>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005508:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800550a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800550e:	4628      	mov	r0, r5
 8005510:	f7ff fb79 	bl	8004c06 <move_window>
 8005514:	bb00      	cbnz	r0, 8005558 <get_fat+0x15e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005516:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800551a:	00a3      	lsls	r3, r4, #2
 800551c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005520:	4418      	add	r0, r3
 8005522:	f7ff f868 	bl	80045f6 <ld_dword>
 8005526:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800552a:	e000      	b.n	800552e <get_fat+0x134>
		val = 1;	/* Internal error */
 800552c:	2001      	movs	r0, #1
}
 800552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8005530:	2001      	movs	r0, #1
 8005532:	e7fc      	b.n	800552e <get_fat+0x134>
		switch (fs->fs_type) {
 8005534:	2001      	movs	r0, #1
 8005536:	e7fa      	b.n	800552e <get_fat+0x134>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800553c:	e7f7      	b.n	800552e <get_fat+0x134>
 800553e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005542:	e7f4      	b.n	800552e <get_fat+0x134>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005548:	e7f1      	b.n	800552e <get_fat+0x134>
			val = 1;	/* Internal error */
 800554a:	2001      	movs	r0, #1
 800554c:	e7ef      	b.n	800552e <get_fat+0x134>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800554e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8005552:	e7ec      	b.n	800552e <get_fat+0x134>
			val = 1;	/* Internal error */
 8005554:	2001      	movs	r0, #1
 8005556:	e7ea      	b.n	800552e <get_fat+0x134>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	return val;
 800555c:	e7e7      	b.n	800552e <get_fat+0x134>

0800555e <dir_sdi>:
{
 800555e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005562:	4607      	mov	r7, r0
 8005564:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8005566:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800556a:	f898 3000 	ldrb.w	r3, [r8]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d028      	beq.n	80055c4 <dir_sdi+0x66>
 8005572:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005576:	42b3      	cmp	r3, r6
 8005578:	d942      	bls.n	8005600 <dir_sdi+0xa2>
 800557a:	f016 0f1f 	tst.w	r6, #31
 800557e:	d142      	bne.n	8005606 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 8005580:	633e      	str	r6, [r7, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005582:	68bc      	ldr	r4, [r7, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005584:	bb0c      	cbnz	r4, 80055ca <dir_sdi+0x6c>
 8005586:	f898 3000 	ldrb.w	r3, [r8]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d903      	bls.n	8005596 <dir_sdi+0x38>
		clst = fs->dirbase;
 800558e:	f8d8 402c 	ldr.w	r4, [r8, #44]	@ 0x2c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8005592:	2300      	movs	r3, #0
 8005594:	71fb      	strb	r3, [r7, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005596:	b9c4      	cbnz	r4, 80055ca <dir_sdi+0x6c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005598:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800559c:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 80055a0:	d933      	bls.n	800560a <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 80055a2:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 80055a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	dp->clust = clst;					/* Current cluster# */
 80055a8:	637c      	str	r4, [r7, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 80055aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ac:	b3ab      	cbz	r3, 800561a <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80055ae:	eb03 2356 	add.w	r3, r3, r6, lsr #9
 80055b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80055b4:	f108 0838 	add.w	r8, r8, #56	@ 0x38
 80055b8:	f3c6 0108 	ubfx	r1, r6, #0, #9
 80055bc:	4441      	add	r1, r8
 80055be:	63f9      	str	r1, [r7, #60]	@ 0x3c
	return FR_OK;
 80055c0:	2000      	movs	r0, #0
 80055c2:	e01e      	b.n	8005602 <dir_sdi+0xa4>
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80055c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80055c8:	e7d5      	b.n	8005576 <dir_sdi+0x18>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80055ca:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 80055ce:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80055d0:	42ae      	cmp	r6, r5
 80055d2:	d30f      	bcc.n	80055f4 <dir_sdi+0x96>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055d4:	4621      	mov	r1, r4
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff ff0f 	bl	80053fa <get_fat>
 80055dc:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055de:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80055e2:	d014      	beq.n	800560e <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80055e4:	2801      	cmp	r0, #1
 80055e6:	d914      	bls.n	8005612 <dir_sdi+0xb4>
 80055e8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80055ec:	4283      	cmp	r3, r0
 80055ee:	d912      	bls.n	8005616 <dir_sdi+0xb8>
			ofs -= csz;
 80055f0:	1b76      	subs	r6, r6, r5
 80055f2:	e7ed      	b.n	80055d0 <dir_sdi+0x72>
		dp->sect = clust2sect(fs, clst);
 80055f4:	4621      	mov	r1, r4
 80055f6:	4640      	mov	r0, r8
 80055f8:	f7ff f94a 	bl	8004890 <clust2sect>
 80055fc:	63b8      	str	r0, [r7, #56]	@ 0x38
 80055fe:	e7d3      	b.n	80055a8 <dir_sdi+0x4a>
		return FR_INT_ERR;
 8005600:	2002      	movs	r0, #2
}
 8005602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8005606:	2002      	movs	r0, #2
 8005608:	e7fb      	b.n	8005602 <dir_sdi+0xa4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800560a:	2002      	movs	r0, #2
 800560c:	e7f9      	b.n	8005602 <dir_sdi+0xa4>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800560e:	2001      	movs	r0, #1
 8005610:	e7f7      	b.n	8005602 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005612:	2002      	movs	r0, #2
 8005614:	e7f5      	b.n	8005602 <dir_sdi+0xa4>
 8005616:	2002      	movs	r0, #2
 8005618:	e7f3      	b.n	8005602 <dir_sdi+0xa4>
	if (!dp->sect) return FR_INT_ERR;
 800561a:	2002      	movs	r0, #2
 800561c:	e7f1      	b.n	8005602 <dir_sdi+0xa4>

0800561e <create_chain>:
{
 800561e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005622:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8005624:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8005628:	4689      	mov	r9, r1
 800562a:	b941      	cbnz	r1, 800563e <create_chain+0x20>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800562c:	f8d8 6014 	ldr.w	r6, [r8, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005630:	b1b6      	cbz	r6, 8005660 <create_chain+0x42>
 8005632:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005636:	42b3      	cmp	r3, r6
 8005638:	d813      	bhi.n	8005662 <create_chain+0x44>
 800563a:	2601      	movs	r6, #1
 800563c:	e011      	b.n	8005662 <create_chain+0x44>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800563e:	f7ff fedc 	bl	80053fa <get_fat>
 8005642:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005644:	2801      	cmp	r0, #1
 8005646:	f240 809e 	bls.w	8005786 <create_chain+0x168>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800564a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800564e:	f000 80a4 	beq.w	800579a <create_chain+0x17c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005652:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005656:	4283      	cmp	r3, r0
 8005658:	f200 809f 	bhi.w	800579a <create_chain+0x17c>
		scl = clst;
 800565c:	464e      	mov	r6, r9
 800565e:	e000      	b.n	8005662 <create_chain+0x44>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005660:	2601      	movs	r6, #1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005662:	f898 3000 	ldrb.w	r3, [r8]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d001      	beq.n	800566e <create_chain+0x50>
		ncl = scl;	/* Start cluster */
 800566a:	4634      	mov	r4, r6
 800566c:	e052      	b.n	8005714 <create_chain+0xf6>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800566e:	2201      	movs	r2, #1
 8005670:	4631      	mov	r1, r6
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff fd7e 	bl	8005174 <find_bitmap>
 8005678:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800567a:	1e43      	subs	r3, r0, #1
 800567c:	f113 0f03 	cmn.w	r3, #3
 8005680:	f200 808b 	bhi.w	800579a <create_chain+0x17c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005684:	2301      	movs	r3, #1
 8005686:	461a      	mov	r2, r3
 8005688:	4601      	mov	r1, r0
 800568a:	4640      	mov	r0, r8
 800568c:	f7ff fdb6 	bl	80051fc <change_bitmap>
 8005690:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
 8005692:	2802      	cmp	r0, #2
 8005694:	d079      	beq.n	800578a <create_chain+0x16c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005696:	2801      	cmp	r0, #1
 8005698:	d079      	beq.n	800578e <create_chain+0x170>
		if (clst == 0) {							/* Is it a new chain? */
 800569a:	f1b9 0f00 	cmp.w	r9, #0
 800569e:	d118      	bne.n	80056d2 <create_chain+0xb4>
			obj->stat = 2;							/* Set status 'contiguous' */
 80056a0:	2202      	movs	r2, #2
 80056a2:	71fa      	strb	r2, [r7, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80056a4:	79fa      	ldrb	r2, [r7, #7]
 80056a6:	2a02      	cmp	r2, #2
 80056a8:	d064      	beq.n	8005774 <create_chain+0x156>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80056aa:	f109 0201 	add.w	r2, r9, #1
 80056ae:	42aa      	cmp	r2, r5
 80056b0:	d01b      	beq.n	80056ea <create_chain+0xcc>
				if (obj->n_frag == 0) obj->n_frag = 1;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	b90b      	cbnz	r3, 80056ba <create_chain+0x9c>
 80056b6:	2301      	movs	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80056ba:	462a      	mov	r2, r5
 80056bc:	4649      	mov	r1, r9
 80056be:	4638      	mov	r0, r7
 80056c0:	f7ff fe6a 	bl	8005398 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 80056c4:	4603      	mov	r3, r0
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d156      	bne.n	8005778 <create_chain+0x15a>
 80056ca:	2201      	movs	r2, #1
 80056cc:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80056ce:	462c      	mov	r4, r5
 80056d0:	e034      	b.n	800573c <create_chain+0x11e>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80056d2:	79fa      	ldrb	r2, [r7, #7]
 80056d4:	2a02      	cmp	r2, #2
 80056d6:	d1e5      	bne.n	80056a4 <create_chain+0x86>
 80056d8:	1c72      	adds	r2, r6, #1
 80056da:	42aa      	cmp	r2, r5
 80056dc:	d0e2      	beq.n	80056a4 <create_chain+0x86>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	1ab2      	subs	r2, r6, r2
 80056e2:	61ba      	str	r2, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80056e4:	2203      	movs	r2, #3
 80056e6:	71fa      	strb	r2, [r7, #7]
 80056e8:	e7dc      	b.n	80056a4 <create_chain+0x86>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	b10a      	cbz	r2, 80056f2 <create_chain+0xd4>
 80056ee:	3201      	adds	r2, #1
 80056f0:	e000      	b.n	80056f4 <create_chain+0xd6>
 80056f2:	2202      	movs	r2, #2
 80056f4:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80056f6:	462c      	mov	r4, r5
 80056f8:	e020      	b.n	800573c <create_chain+0x11e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80056fa:	4621      	mov	r1, r4
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff fe7c 	bl	80053fa <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8005702:	4605      	mov	r5, r0
 8005704:	b178      	cbz	r0, 8005726 <create_chain+0x108>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005706:	2801      	cmp	r0, #1
 8005708:	d047      	beq.n	800579a <create_chain+0x17c>
 800570a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800570e:	d044      	beq.n	800579a <create_chain+0x17c>
			if (ncl == scl) return 0;		/* No free cluster */
 8005710:	42b4      	cmp	r4, r6
 8005712:	d041      	beq.n	8005798 <create_chain+0x17a>
			ncl++;							/* Next cluster */
 8005714:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005716:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800571a:	42a3      	cmp	r3, r4
 800571c:	d8ed      	bhi.n	80056fa <create_chain+0xdc>
				if (ncl > scl) return 0;	/* No free cluster */
 800571e:	2e01      	cmp	r6, #1
 8005720:	d938      	bls.n	8005794 <create_chain+0x176>
				ncl = 2;
 8005722:	2402      	movs	r4, #2
 8005724:	e7e9      	b.n	80056fa <create_chain+0xdc>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800572a:	4621      	mov	r1, r4
 800572c:	4640      	mov	r0, r8
 800572e:	f7ff fda0 	bl	8005272 <put_fat>
		if (res == FR_OK && clst != 0) {
 8005732:	4603      	mov	r3, r0
 8005734:	bb00      	cbnz	r0, 8005778 <create_chain+0x15a>
 8005736:	f1b9 0f00 	cmp.w	r9, #0
 800573a:	d114      	bne.n	8005766 <create_chain+0x148>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800573c:	b9e3      	cbnz	r3, 8005778 <create_chain+0x15a>
		fs->last_clst = ncl;
 800573e:	f8c8 4014 	str.w	r4, [r8, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005742:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8005746:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800574a:	3b02      	subs	r3, #2
 800574c:	429a      	cmp	r2, r3
 800574e:	d802      	bhi.n	8005756 <create_chain+0x138>
 8005750:	3a01      	subs	r2, #1
 8005752:	f8c8 2018 	str.w	r2, [r8, #24]
		fs->fsi_flag |= 1;
 8005756:	f898 3004 	ldrb.w	r3, [r8, #4]
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	f888 3004 	strb.w	r3, [r8, #4]
 8005762:	4625      	mov	r5, r4
 8005764:	e019      	b.n	800579a <create_chain+0x17c>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005766:	4622      	mov	r2, r4
 8005768:	4649      	mov	r1, r9
 800576a:	4640      	mov	r0, r8
 800576c:	f7ff fd81 	bl	8005272 <put_fat>
 8005770:	4603      	mov	r3, r0
 8005772:	e7e3      	b.n	800573c <create_chain+0x11e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8005774:	462c      	mov	r4, r5
 8005776:	e7e1      	b.n	800573c <create_chain+0x11e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <create_chain+0x162>
 800577c:	2501      	movs	r5, #1
 800577e:	e00c      	b.n	800579a <create_chain+0x17c>
 8005780:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005784:	e009      	b.n	800579a <create_chain+0x17c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005786:	2501      	movs	r5, #1
 8005788:	e007      	b.n	800579a <create_chain+0x17c>
		if (res == FR_INT_ERR) return 1;
 800578a:	2501      	movs	r5, #1
 800578c:	e005      	b.n	800579a <create_chain+0x17c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800578e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005792:	e002      	b.n	800579a <create_chain+0x17c>
				if (ncl > scl) return 0;	/* No free cluster */
 8005794:	2500      	movs	r5, #0
 8005796:	e000      	b.n	800579a <create_chain+0x17c>
			if (ncl == scl) return 0;		/* No free cluster */
 8005798:	2500      	movs	r5, #0
}
 800579a:	4628      	mov	r0, r5
 800579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080057a0 <remove_chain>:
{
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80057a4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80057a6:	2901      	cmp	r1, #1
 80057a8:	d96b      	bls.n	8005882 <remove_chain+0xe2>
 80057aa:	4607      	mov	r7, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	4691      	mov	r9, r2
 80057b0:	69eb      	ldr	r3, [r5, #28]
 80057b2:	428b      	cmp	r3, r1
 80057b4:	d967      	bls.n	8005886 <remove_chain+0xe6>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80057b6:	b172      	cbz	r2, 80057d6 <remove_chain+0x36>
 80057b8:	782b      	ldrb	r3, [r5, #0]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d102      	bne.n	80057c4 <remove_chain+0x24>
 80057be:	79c3      	ldrb	r3, [r0, #7]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d008      	beq.n	80057d6 <remove_chain+0x36>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057c8:	4649      	mov	r1, r9
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7ff fd51 	bl	8005272 <put_fat>
		if (res != FR_OK) return res;
 80057d0:	4603      	mov	r3, r0
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d158      	bne.n	8005888 <remove_chain+0xe8>
{
 80057d6:	46a0      	mov	r8, r4
 80057d8:	e011      	b.n	80057fe <remove_chain+0x5e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057da:	2200      	movs	r2, #0
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	f7ff fd47 	bl	8005272 <put_fat>
			if (res != FR_OK) return res;
 80057e4:	4603      	mov	r3, r0
 80057e6:	b1c8      	cbz	r0, 800581c <remove_chain+0x7c>
 80057e8:	e04e      	b.n	8005888 <remove_chain+0xe8>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80057ea:	1c73      	adds	r3, r6, #1
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d003      	beq.n	80057f8 <remove_chain+0x58>
			if (fs->fs_type == FS_EXFAT) {
 80057f0:	782b      	ldrb	r3, [r5, #0]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d01e      	beq.n	8005834 <remove_chain+0x94>
			scl = ecl = nxt;
 80057f6:	46a0      	mov	r8, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057f8:	69eb      	ldr	r3, [r5, #28]
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	d926      	bls.n	800584c <remove_chain+0xac>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80057fe:	4626      	mov	r6, r4
 8005800:	4621      	mov	r1, r4
 8005802:	4638      	mov	r0, r7
 8005804:	f7ff fdf9 	bl	80053fa <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8005808:	4604      	mov	r4, r0
 800580a:	b1f8      	cbz	r0, 800584c <remove_chain+0xac>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800580c:	2801      	cmp	r0, #1
 800580e:	d03e      	beq.n	800588e <remove_chain+0xee>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005810:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8005814:	d03d      	beq.n	8005892 <remove_chain+0xf2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005816:	782b      	ldrb	r3, [r5, #0]
 8005818:	2b04      	cmp	r3, #4
 800581a:	d1de      	bne.n	80057da <remove_chain+0x3a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800581c:	69aa      	ldr	r2, [r5, #24]
 800581e:	69eb      	ldr	r3, [r5, #28]
 8005820:	3b02      	subs	r3, #2
 8005822:	429a      	cmp	r2, r3
 8005824:	d2e1      	bcs.n	80057ea <remove_chain+0x4a>
			fs->free_clst++;
 8005826:	3201      	adds	r2, #1
 8005828:	61aa      	str	r2, [r5, #24]
			fs->fsi_flag |= 1;
 800582a:	792b      	ldrb	r3, [r5, #4]
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	712b      	strb	r3, [r5, #4]
 8005832:	e7da      	b.n	80057ea <remove_chain+0x4a>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8005834:	eba6 0208 	sub.w	r2, r6, r8
 8005838:	2300      	movs	r3, #0
 800583a:	3201      	adds	r2, #1
 800583c:	4641      	mov	r1, r8
 800583e:	4628      	mov	r0, r5
 8005840:	f7ff fcdc 	bl	80051fc <change_bitmap>
				if (res != FR_OK) return res;
 8005844:	4603      	mov	r3, r0
 8005846:	b9f8      	cbnz	r0, 8005888 <remove_chain+0xe8>
			scl = ecl = nxt;
 8005848:	46a0      	mov	r8, r4
 800584a:	e7d5      	b.n	80057f8 <remove_chain+0x58>
	if (fs->fs_type == FS_EXFAT) {
 800584c:	782b      	ldrb	r3, [r5, #0]
 800584e:	2b04      	cmp	r3, #4
 8005850:	d001      	beq.n	8005856 <remove_chain+0xb6>
	return FR_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e018      	b.n	8005888 <remove_chain+0xe8>
		if (pclst == 0) {	/* Does the object have no chain? */
 8005856:	f1b9 0f00 	cmp.w	r9, #0
 800585a:	d102      	bne.n	8005862 <remove_chain+0xc2>
			obj->stat = 0;		/* Change the object status 'initial' */
 800585c:	2300      	movs	r3, #0
 800585e:	71fb      	strb	r3, [r7, #7]
 8005860:	e012      	b.n	8005888 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d001      	beq.n	800586c <remove_chain+0xcc>
	return FR_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e00d      	b.n	8005888 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	454b      	cmp	r3, r9
 8005870:	d811      	bhi.n	8005896 <remove_chain+0xf6>
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4413      	add	r3, r2
 8005876:	454b      	cmp	r3, r9
 8005878:	d30f      	bcc.n	800589a <remove_chain+0xfa>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800587a:	2302      	movs	r3, #2
 800587c:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e002      	b.n	8005888 <remove_chain+0xe8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005882:	2302      	movs	r3, #2
 8005884:	e000      	b.n	8005888 <remove_chain+0xe8>
 8005886:	2302      	movs	r3, #2
}
 8005888:	4618      	mov	r0, r3
 800588a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800588e:	2302      	movs	r3, #2
 8005890:	e7fa      	b.n	8005888 <remove_chain+0xe8>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005892:	2301      	movs	r3, #1
 8005894:	e7f8      	b.n	8005888 <remove_chain+0xe8>
	return FR_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e7f6      	b.n	8005888 <remove_chain+0xe8>
 800589a:	2300      	movs	r3, #0
 800589c:	e7f4      	b.n	8005888 <remove_chain+0xe8>

0800589e <dir_next>:
{
 800589e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 80058a2:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80058a4:	6b05      	ldr	r5, [r0, #48]	@ 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80058a6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d078      	beq.n	800599e <dir_next+0x100>
 80058ac:	4604      	mov	r4, r0
 80058ae:	4688      	mov	r8, r1
 80058b0:	3520      	adds	r5, #32
 80058b2:	7832      	ldrb	r2, [r6, #0]
 80058b4:	2a04      	cmp	r2, #4
 80058b6:	d016      	beq.n	80058e6 <dir_next+0x48>
 80058b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80058bc:	42aa      	cmp	r2, r5
 80058be:	d970      	bls.n	80059a2 <dir_next+0x104>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80058c0:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80058c4:	b93f      	cbnz	r7, 80058d6 <dir_next+0x38>
		dp->sect++;				/* Next sector */
 80058c6:	3301      	adds	r3, #1
 80058c8:	63a3      	str	r3, [r4, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 80058ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058cc:	b991      	cbnz	r1, 80058f4 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80058ce:	8933      	ldrh	r3, [r6, #8]
 80058d0:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80058d4:	d90a      	bls.n	80058ec <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 80058d6:	6325      	str	r5, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80058d8:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 80058dc:	443b      	add	r3, r7
 80058de:	63e3      	str	r3, [r4, #60]	@ 0x3c
	return FR_OK;
 80058e0:	2000      	movs	r0, #0
}
 80058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80058e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ea:	e7e7      	b.n	80058bc <dir_next+0x1e>
				dp->sect = 0; return FR_NO_FILE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	63a3      	str	r3, [r4, #56]	@ 0x38
 80058f0:	2004      	movs	r0, #4
 80058f2:	e7f6      	b.n	80058e2 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80058f4:	8973      	ldrh	r3, [r6, #10]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 80058fc:	d1eb      	bne.n	80058d6 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff fd7b 	bl	80053fa <get_fat>
 8005904:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005906:	2801      	cmp	r0, #1
 8005908:	d94d      	bls.n	80059a6 <dir_next+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800590a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800590e:	d04c      	beq.n	80059aa <dir_next+0x10c>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005910:	69f3      	ldr	r3, [r6, #28]
 8005912:	4283      	cmp	r3, r0
 8005914:	d83b      	bhi.n	800598e <dir_next+0xf0>
					if (!stretch) {								/* If no stretch, report EOT */
 8005916:	f1b8 0f00 	cmp.w	r8, #0
 800591a:	d015      	beq.n	8005948 <dir_next+0xaa>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800591c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff fe7d 	bl	800561e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005924:	4682      	mov	sl, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	d041      	beq.n	80059ae <dir_next+0x110>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800592a:	2801      	cmp	r0, #1
 800592c:	d041      	beq.n	80059b2 <dir_next+0x114>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800592e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8005932:	d040      	beq.n	80059b6 <dir_next+0x118>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8005934:	79e3      	ldrb	r3, [r4, #7]
 8005936:	f043 0304 	orr.w	r3, r3, #4
 800593a:	71e3      	strb	r3, [r4, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff f938 	bl	8004bb2 <sync_window>
 8005942:	b128      	cbz	r0, 8005950 <dir_next+0xb2>
 8005944:	2001      	movs	r0, #1
 8005946:	e7cc      	b.n	80058e2 <dir_next+0x44>
						dp->sect = 0; return FR_NO_FILE;
 8005948:	2300      	movs	r3, #0
 800594a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800594c:	2004      	movs	r0, #4
 800594e:	e7c8      	b.n	80058e2 <dir_next+0x44>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005954:	2100      	movs	r1, #0
 8005956:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 800595a:	f7fe fea4 	bl	80046a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800595e:	4651      	mov	r1, sl
 8005960:	4630      	mov	r0, r6
 8005962:	f7fe ff95 	bl	8004890 <clust2sect>
 8005966:	6370      	str	r0, [r6, #52]	@ 0x34
 8005968:	8973      	ldrh	r3, [r6, #10]
 800596a:	454b      	cmp	r3, r9
 800596c:	d90b      	bls.n	8005986 <dir_next+0xe8>
						fs->wflag = 1;
 800596e:	2301      	movs	r3, #1
 8005970:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005972:	4630      	mov	r0, r6
 8005974:	f7ff f91d 	bl	8004bb2 <sync_window>
 8005978:	b9f8      	cbnz	r0, 80059ba <dir_next+0x11c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800597a:	f109 0901 	add.w	r9, r9, #1
 800597e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8005980:	3301      	adds	r3, #1
 8005982:	6373      	str	r3, [r6, #52]	@ 0x34
 8005984:	e7f0      	b.n	8005968 <dir_next+0xca>
					fs->winsect -= n;							/* Restore window offset */
 8005986:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8005988:	eba3 0309 	sub.w	r3, r3, r9
 800598c:	6373      	str	r3, [r6, #52]	@ 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 800598e:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8005992:	4651      	mov	r1, sl
 8005994:	4630      	mov	r0, r6
 8005996:	f7fe ff7b 	bl	8004890 <clust2sect>
 800599a:	63a0      	str	r0, [r4, #56]	@ 0x38
 800599c:	e79b      	b.n	80058d6 <dir_next+0x38>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800599e:	2004      	movs	r0, #4
 80059a0:	e79f      	b.n	80058e2 <dir_next+0x44>
 80059a2:	2004      	movs	r0, #4
 80059a4:	e79d      	b.n	80058e2 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80059a6:	2002      	movs	r0, #2
 80059a8:	e79b      	b.n	80058e2 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80059aa:	2001      	movs	r0, #1
 80059ac:	e799      	b.n	80058e2 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80059ae:	2007      	movs	r0, #7
 80059b0:	e797      	b.n	80058e2 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059b2:	2002      	movs	r0, #2
 80059b4:	e795      	b.n	80058e2 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059b6:	2001      	movs	r0, #1
 80059b8:	e793      	b.n	80058e2 <dir_next+0x44>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80059ba:	2001      	movs	r0, #1
 80059bc:	e791      	b.n	80058e2 <dir_next+0x44>
	...

080059c0 <load_xdir>:
{
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80059c6:	6800      	ldr	r0, [r0, #0]
 80059c8:	6907      	ldr	r7, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 80059ca:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059cc:	f7ff f91b 	bl	8004c06 <move_window>
	if (res != FR_OK) return res;
 80059d0:	4605      	mov	r5, r0
 80059d2:	b920      	cbnz	r0, 80059de <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80059d4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80059d6:	780b      	ldrb	r3, [r1, #0]
 80059d8:	2b85      	cmp	r3, #133	@ 0x85
 80059da:	d003      	beq.n	80059e4 <load_xdir+0x24>
 80059dc:	2502      	movs	r5, #2
}
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80059e4:	2220      	movs	r2, #32
 80059e6:	4638      	mov	r0, r7
 80059e8:	f7fe fe53 	bl	8004692 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80059ec:	787e      	ldrb	r6, [r7, #1]
 80059ee:	3601      	adds	r6, #1
 80059f0:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80059f2:	f1a6 0360 	sub.w	r3, r6, #96	@ 0x60
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059fa:	d851      	bhi.n	8005aa0 <load_xdir+0xe0>
	res = dir_next(dp, 0);
 80059fc:	2100      	movs	r1, #0
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff ff4d 	bl	800589e <dir_next>
	if (res != FR_OK) return res;
 8005a04:	4605      	mov	r5, r0
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d1e9      	bne.n	80059de <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 8005a0a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	f7ff f8fa 	bl	8004c06 <move_window>
	if (res != FR_OK) return res;
 8005a12:	4605      	mov	r5, r0
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d1e2      	bne.n	80059de <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8005a18:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005a1a:	780b      	ldrb	r3, [r1, #0]
 8005a1c:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a1e:	d001      	beq.n	8005a24 <load_xdir+0x64>
 8005a20:	2502      	movs	r5, #2
 8005a22:	e7dc      	b.n	80059de <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8005a24:	2220      	movs	r2, #32
 8005a26:	18b8      	adds	r0, r7, r2
 8005a28:	f7fe fe33 	bl	8004692 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8005a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a30:	332c      	adds	r3, #44	@ 0x2c
 8005a32:	4a1e      	ldr	r2, [pc, #120]	@ (8005aac <load_xdir+0xec>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	08db      	lsrs	r3, r3, #3
 8005a3a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8005a3e:	d331      	bcc.n	8005aa4 <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 8005a40:	f04f 0840 	mov.w	r8, #64	@ 0x40
 8005a44:	e003      	b.n	8005a4e <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 8005a46:	f108 0820 	add.w	r8, r8, #32
 8005a4a:	4546      	cmp	r6, r8
 8005a4c:	d91a      	bls.n	8005a84 <load_xdir+0xc4>
		res = dir_next(dp, 0);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7ff ff24 	bl	800589e <dir_next>
		if (res != FR_OK) return res;
 8005a56:	4605      	mov	r5, r0
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d1c0      	bne.n	80059de <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 8005a5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	f7ff f8d1 	bl	8004c06 <move_window>
		if (res != FR_OK) return res;
 8005a64:	4605      	mov	r5, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1b9      	bne.n	80059de <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8005a6a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005a6c:	780b      	ldrb	r3, [r1, #0]
 8005a6e:	2bc1      	cmp	r3, #193	@ 0xc1
 8005a70:	d11a      	bne.n	8005aa8 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8005a72:	f5b8 7f18 	cmp.w	r8, #608	@ 0x260
 8005a76:	d2e6      	bcs.n	8005a46 <load_xdir+0x86>
 8005a78:	2220      	movs	r2, #32
 8005a7a:	eb07 0008 	add.w	r0, r7, r8
 8005a7e:	f7fe fe08 	bl	8004692 <mem_cpy>
 8005a82:	e7e0      	b.n	8005a46 <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 8005a84:	f5b8 7f18 	cmp.w	r8, #608	@ 0x260
 8005a88:	d8a9      	bhi.n	80059de <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff f82d 	bl	8004aea <xdir_sum>
 8005a90:	4604      	mov	r4, r0
 8005a92:	1cb8      	adds	r0, r7, #2
 8005a94:	f7fe fdaa 	bl	80045ec <ld_word>
 8005a98:	4284      	cmp	r4, r0
 8005a9a:	d0a0      	beq.n	80059de <load_xdir+0x1e>
 8005a9c:	2502      	movs	r5, #2
 8005a9e:	e79e      	b.n	80059de <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8005aa0:	2502      	movs	r5, #2
 8005aa2:	e79c      	b.n	80059de <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8005aa4:	2502      	movs	r5, #2
 8005aa6:	e79a      	b.n	80059de <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8005aa8:	2502      	movs	r5, #2
 8005aaa:	e798      	b.n	80059de <load_xdir+0x1e>
 8005aac:	88888889 	.word	0x88888889

08005ab0 <load_obj_dir>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
 8005ab4:	680b      	ldr	r3, [r1, #0]
 8005ab6:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
 8005ab8:	6a0b      	ldr	r3, [r1, #32]
 8005aba:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8005abc:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
 8005ac0:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005ac2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8005ac4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ac8:	6103      	str	r3, [r0, #16]
 8005aca:	2300      	movs	r3, #0
 8005acc:	6143      	str	r3, [r0, #20]
	dp->blk_ofs = obj->c_ofs;
 8005ace:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005ad0:	64c1      	str	r1, [r0, #76]	@ 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005ad2:	f7ff fd44 	bl	800555e <dir_sdi>
	if (res == FR_OK) {
 8005ad6:	b100      	cbz	r0, 8005ada <load_obj_dir+0x2a>
}
 8005ad8:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
 8005ada:	4620      	mov	r0, r4
 8005adc:	f7ff ff70 	bl	80059c0 <load_xdir>
 8005ae0:	e7fa      	b.n	8005ad8 <load_obj_dir+0x28>

08005ae2 <dir_read>:
{
 8005ae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8005aea:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8005aec:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8005af0:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 8005af2:	2504      	movs	r5, #4
	while (dp->sect) {
 8005af4:	e042      	b.n	8005b7c <dir_read+0x9a>
			if (_USE_LABEL && vol) {
 8005af6:	f1b8 0f00 	cmp.w	r8, #0
 8005afa:	d002      	beq.n	8005b02 <dir_read+0x20>
				if (c == 0x83) break;	/* Volume label entry? */
 8005afc:	2b83      	cmp	r3, #131	@ 0x83
 8005afe:	d137      	bne.n	8005b70 <dir_read+0x8e>
 8005b00:	e060      	b.n	8005bc4 <dir_read+0xe2>
				if (c == 0x85) {		/* Start of the file entry block? */
 8005b02:	2b85      	cmp	r3, #133	@ 0x85
 8005b04:	d134      	bne.n	8005b70 <dir_read+0x8e>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005b06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b08:	64e3      	str	r3, [r4, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7ff ff58 	bl	80059c0 <load_xdir>
					if (res == FR_OK) {
 8005b10:	4605      	mov	r5, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d157      	bne.n	8005bc6 <dir_read+0xe4>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005b16:	6933      	ldr	r3, [r6, #16]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b1e:	71a3      	strb	r3, [r4, #6]
 8005b20:	e050      	b.n	8005bc4 <dir_read+0xe2>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005b22:	2a0f      	cmp	r2, #15
 8005b24:	d119      	bne.n	8005b5a <dir_read+0x78>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005b26:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005b2a:	d006      	beq.n	8005b3a <dir_read+0x58>
						sum = dp->dir[LDIR_Chksum];
 8005b2c:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8005b30:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;
 8005b34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005b36:	64e2      	str	r2, [r4, #76]	@ 0x4c
						c &= (BYTE)~LLEF; ord = c;
 8005b38:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005b3a:	42bb      	cmp	r3, r7
 8005b3c:	d001      	beq.n	8005b42 <dir_read+0x60>
 8005b3e:	27ff      	movs	r7, #255	@ 0xff
 8005b40:	e016      	b.n	8005b70 <dir_read+0x8e>
 8005b42:	7b4b      	ldrb	r3, [r1, #13]
 8005b44:	454b      	cmp	r3, r9
 8005b46:	d001      	beq.n	8005b4c <dir_read+0x6a>
 8005b48:	27ff      	movs	r7, #255	@ 0xff
 8005b4a:	e011      	b.n	8005b70 <dir_read+0x8e>
 8005b4c:	68f0      	ldr	r0, [r6, #12]
 8005b4e:	f7fe fee9 	bl	8004924 <pick_lfn>
 8005b52:	b3a0      	cbz	r0, 8005bbe <dir_read+0xdc>
 8005b54:	3f01      	subs	r7, #1
 8005b56:	b2ff      	uxtb	r7, r7
 8005b58:	e00a      	b.n	8005b70 <dir_read+0x8e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005b5a:	b927      	cbnz	r7, 8005b66 <dir_read+0x84>
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	f7fe ffb4 	bl	8004aca <sum_sfn>
 8005b62:	4548      	cmp	r0, r9
 8005b64:	d02e      	beq.n	8005bc4 <dir_read+0xe2>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b6a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8005b6c:	e02a      	b.n	8005bc4 <dir_read+0xe2>
				ord = 0xFF;
 8005b6e:	27ff      	movs	r7, #255	@ 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8005b70:	2100      	movs	r1, #0
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7ff fe93 	bl	800589e <dir_next>
		if (res != FR_OK) break;
 8005b78:	4605      	mov	r5, r0
 8005b7a:	bb18      	cbnz	r0, 8005bc4 <dir_read+0xe2>
	while (dp->sect) {
 8005b7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b7e:	b309      	cbz	r1, 8005bc4 <dir_read+0xe2>
		res = move_window(fs, dp->sect);
 8005b80:	4630      	mov	r0, r6
 8005b82:	f7ff f840 	bl	8004c06 <move_window>
		if (res != FR_OK) break;
 8005b86:	4605      	mov	r5, r0
 8005b88:	b9e0      	cbnz	r0, 8005bc4 <dir_read+0xe2>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005b8a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005b8c:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 8005b8e:	b1c3      	cbz	r3, 8005bc2 <dir_read+0xe0>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005b90:	7832      	ldrb	r2, [r6, #0]
 8005b92:	2a04      	cmp	r2, #4
 8005b94:	d0af      	beq.n	8005af6 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005b96:	7aca      	ldrb	r2, [r1, #11]
 8005b98:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005b9c:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005b9e:	2be5      	cmp	r3, #229	@ 0xe5
 8005ba0:	d0e5      	beq.n	8005b6e <dir_read+0x8c>
 8005ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ba4:	d009      	beq.n	8005bba <dir_read+0xd8>
 8005ba6:	f022 0020 	bic.w	r0, r2, #32
 8005baa:	2808      	cmp	r0, #8
 8005bac:	bf14      	ite	ne
 8005bae:	2000      	movne	r0, #0
 8005bb0:	2001      	moveq	r0, #1
 8005bb2:	4540      	cmp	r0, r8
 8005bb4:	d0b5      	beq.n	8005b22 <dir_read+0x40>
				ord = 0xFF;
 8005bb6:	27ff      	movs	r7, #255	@ 0xff
 8005bb8:	e7da      	b.n	8005b70 <dir_read+0x8e>
 8005bba:	27ff      	movs	r7, #255	@ 0xff
 8005bbc:	e7d8      	b.n	8005b70 <dir_read+0x8e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005bbe:	27ff      	movs	r7, #255	@ 0xff
 8005bc0:	e7d6      	b.n	8005b70 <dir_read+0x8e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005bc2:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005bc4:	b10d      	cbz	r5, 8005bca <dir_read+0xe8>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8005bca:	4628      	mov	r0, r5
 8005bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005bd0 <dir_alloc>:
{
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8005bd6:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f7ff fcc0 	bl	800555e <dir_sdi>
	if (res == FR_OK) {
 8005bde:	4603      	mov	r3, r0
 8005be0:	bb10      	cbnz	r0, 8005c28 <dir_alloc+0x58>
		n = 0;
 8005be2:	2500      	movs	r5, #0
 8005be4:	e00f      	b.n	8005c06 <dir_alloc+0x36>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005be6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005be8:	f992 2000 	ldrsb.w	r2, [r2]
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	da01      	bge.n	8005bf4 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8005bf0:	2500      	movs	r5, #0
 8005bf2:	e002      	b.n	8005bfa <dir_alloc+0x2a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	42bd      	cmp	r5, r7
 8005bf8:	d016      	beq.n	8005c28 <dir_alloc+0x58>
			res = dir_next(dp, 1);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f7ff fe4e 	bl	800589e <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c02:	4603      	mov	r3, r0
 8005c04:	b980      	cbnz	r0, 8005c28 <dir_alloc+0x58>
			res = move_window(fs, dp->sect);
 8005c06:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7fe fffc 	bl	8004c06 <move_window>
			if (res != FR_OK) break;
 8005c0e:	4603      	mov	r3, r0
 8005c10:	b950      	cbnz	r0, 8005c28 <dir_alloc+0x58>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005c12:	7832      	ldrb	r2, [r6, #0]
 8005c14:	2a04      	cmp	r2, #4
 8005c16:	d0e6      	beq.n	8005be6 <dir_alloc+0x16>
 8005c18:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005c1a:	7812      	ldrb	r2, [r2, #0]
 8005c1c:	2ae5      	cmp	r2, #229	@ 0xe5
 8005c1e:	d0e9      	beq.n	8005bf4 <dir_alloc+0x24>
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	d0e7      	beq.n	8005bf4 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8005c24:	2500      	movs	r5, #0
 8005c26:	e7e8      	b.n	8005bfa <dir_alloc+0x2a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d001      	beq.n	8005c30 <dir_alloc+0x60>
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c30:	2307      	movs	r3, #7
 8005c32:	e7fb      	b.n	8005c2c <dir_alloc+0x5c>

08005c34 <store_xdir>:
{
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8005c38:	6803      	ldr	r3, [r0, #0]
 8005c3a:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7fe ff54 	bl	8004aea <xdir_sum>
 8005c42:	4601      	mov	r1, r0
 8005c44:	1cb0      	adds	r0, r6, #2
 8005c46:	f7fe fd03 	bl	8004650 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8005c4a:	7877      	ldrb	r7, [r6, #1]
 8005c4c:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
 8005c4e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7ff fc84 	bl	800555e <dir_sdi>
 8005c56:	4605      	mov	r5, r0
	while (res == FR_OK) {
 8005c58:	e005      	b.n	8005c66 <store_xdir+0x32>
		dirb += SZDIRE;
 8005c5a:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff fe1d 	bl	800589e <dir_next>
 8005c64:	4605      	mov	r5, r0
	while (res == FR_OK) {
 8005c66:	b97d      	cbnz	r5, 8005c88 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
 8005c68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	f7fe ffcb 	bl	8004c06 <move_window>
		if (res != FR_OK) break;
 8005c70:	4605      	mov	r5, r0
 8005c72:	b948      	cbnz	r0, 8005c88 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8005c74:	2220      	movs	r2, #32
 8005c76:	4631      	mov	r1, r6
 8005c78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005c7a:	f7fe fd0a 	bl	8004692 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	2201      	movs	r2, #1
 8005c82:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8005c84:	3f01      	subs	r7, #1
 8005c86:	d1e8      	bne.n	8005c5a <store_xdir+0x26>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8005c88:	2d02      	cmp	r5, #2
 8005c8a:	bf28      	it	cs
 8005c8c:	2502      	movcs	r5, #2
}
 8005c8e:	b2e8      	uxtb	r0, r5
 8005c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c94 <create_name>:
{
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005c9e:	f8d1 9000 	ldr.w	r9, [r1]
 8005ca2:	6803      	ldr	r3, [r0, #0]
 8005ca4:	68dd      	ldr	r5, [r3, #12]
 8005ca6:	2400      	movs	r4, #0
 8005ca8:	4623      	mov	r3, r4
 8005caa:	e012      	b.n	8005cd2 <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005cac:	3601      	adds	r6, #1
 8005cae:	f819 3006 	ldrb.w	r3, [r9, r6]
 8005cb2:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cb4:	d0fa      	beq.n	8005cac <create_name+0x18>
 8005cb6:	2b5c      	cmp	r3, #92	@ 0x5c
 8005cb8:	d0f8      	beq.n	8005cac <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8005cba:	444e      	add	r6, r9
 8005cbc:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005cc0:	281f      	cmp	r0, #31
 8005cc2:	d823      	bhi.n	8005d0c <create_name+0x78>
 8005cc4:	f04f 0804 	mov.w	r8, #4
 8005cc8:	e024      	b.n	8005d14 <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 8005cca:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 8005cce:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8005cd0:	4633      	mov	r3, r6
 8005cd2:	1c5e      	adds	r6, r3, #1
 8005cd4:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8005cd8:	281f      	cmp	r0, #31
 8005cda:	d9ee      	bls.n	8005cba <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005cdc:	282f      	cmp	r0, #47	@ 0x2f
 8005cde:	d0e6      	beq.n	8005cae <create_name+0x1a>
 8005ce0:	285c      	cmp	r0, #92	@ 0x5c
 8005ce2:	d0e4      	beq.n	8005cae <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005ce4:	2cfe      	cmp	r4, #254	@ 0xfe
 8005ce6:	f200 80df 	bhi.w	8005ea8 <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005cea:	2101      	movs	r1, #1
 8005cec:	f001 fb1c 	bl	8007328 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f000 80da 	beq.w	8005eac <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005cf8:	287f      	cmp	r0, #127	@ 0x7f
 8005cfa:	d8e6      	bhi.n	8005cca <create_name+0x36>
 8005cfc:	4601      	mov	r1, r0
 8005cfe:	486d      	ldr	r0, [pc, #436]	@ (8005eb4 <create_name+0x220>)
 8005d00:	f7fe fce3 	bl	80046ca <chk_chr>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d0e0      	beq.n	8005cca <create_name+0x36>
 8005d08:	2006      	movs	r0, #6
 8005d0a:	e085      	b.n	8005e18 <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005d0c:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005d10:	e000      	b.n	8005d14 <create_name+0x80>
		di--;
 8005d12:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005d14:	b144      	cbz	r4, 8005d28 <create_name+0x94>
		w = lfn[di - 1];
 8005d16:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d0f6      	beq.n	8005d12 <create_name+0x7e>
 8005d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d26:	d0f4      	beq.n	8005d12 <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	f000 80be 	beq.w	8005eb0 <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 8005d34:	220b      	movs	r2, #11
 8005d36:	2120      	movs	r1, #32
 8005d38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005d3c:	f7fe fcb3 	bl	80046a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <create_name+0xb2>
 8005d44:	3301      	adds	r3, #1
 8005d46:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8005d4a:	2a20      	cmp	r2, #32
 8005d4c:	d0fa      	beq.n	8005d44 <create_name+0xb0>
 8005d4e:	2a2e      	cmp	r2, #46	@ 0x2e
 8005d50:	d0f8      	beq.n	8005d44 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005d52:	b11b      	cbz	r3, 8005d5c <create_name+0xc8>
 8005d54:	f048 0803 	orr.w	r8, r8, #3
 8005d58:	e000      	b.n	8005d5c <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005d5a:	3c01      	subs	r4, #1
 8005d5c:	b16c      	cbz	r4, 8005d7a <create_name+0xe6>
 8005d5e:	f104 4200 	add.w	r2, r4, #2147483648	@ 0x80000000
 8005d62:	3a01      	subs	r2, #1
 8005d64:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8005d68:	2a2e      	cmp	r2, #46	@ 0x2e
 8005d6a:	d1f6      	bne.n	8005d5a <create_name+0xc6>
 8005d6c:	f04f 0b08 	mov.w	fp, #8
 8005d70:	f04f 0a00 	mov.w	sl, #0
 8005d74:	f8cd a004 	str.w	sl, [sp, #4]
 8005d78:	e00a      	b.n	8005d90 <create_name+0xfc>
 8005d7a:	46a2      	mov	sl, r4
 8005d7c:	f04f 0b08 	mov.w	fp, #8
 8005d80:	2200      	movs	r2, #0
 8005d82:	9201      	str	r2, [sp, #4]
 8005d84:	e004      	b.n	8005d90 <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005d86:	454c      	cmp	r4, r9
 8005d88:	d00b      	beq.n	8005da2 <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 8005d8a:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8005d8e:	464b      	mov	r3, r9
 8005d90:	f103 0901 	add.w	r9, r3, #1
 8005d94:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8005d98:	b1fe      	cbz	r6, 8005dda <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005d9a:	2e20      	cmp	r6, #32
 8005d9c:	d0f5      	beq.n	8005d8a <create_name+0xf6>
 8005d9e:	2e2e      	cmp	r6, #46	@ 0x2e
 8005da0:	d0f1      	beq.n	8005d86 <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005da2:	45da      	cmp	sl, fp
 8005da4:	d210      	bcs.n	8005dc8 <create_name+0x134>
 8005da6:	454c      	cmp	r4, r9
 8005da8:	d00e      	beq.n	8005dc8 <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 8005daa:	2e7f      	cmp	r6, #127	@ 0x7f
 8005dac:	d844      	bhi.n	8005e38 <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d14f      	bne.n	8005e52 <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005db2:	f048 0803 	orr.w	r8, r8, #3
 8005db6:	265f      	movs	r6, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8005db8:	eb07 030a 	add.w	r3, r7, sl
 8005dbc:	f883 6040 	strb.w	r6, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 8005dc0:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8005dc2:	f10a 0a01 	add.w	sl, sl, #1
 8005dc6:	e7e3      	b.n	8005d90 <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 8005dc8:	f1bb 0f0b 	cmp.w	fp, #11
 8005dcc:	d027      	beq.n	8005e1e <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005dce:	454c      	cmp	r4, r9
 8005dd0:	d001      	beq.n	8005dd6 <create_name+0x142>
 8005dd2:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8005dd6:	454c      	cmp	r4, r9
 8005dd8:	d224      	bcs.n	8005e24 <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005dda:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005dde:	2be5      	cmp	r3, #229	@ 0xe5
 8005de0:	d053      	beq.n	8005e8a <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 8005de2:	f1bb 0f08 	cmp.w	fp, #8
 8005de6:	d054      	beq.n	8005e92 <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005de8:	9b01      	ldr	r3, [sp, #4]
 8005dea:	f003 020c 	and.w	r2, r3, #12
 8005dee:	2a0c      	cmp	r2, #12
 8005df0:	d003      	beq.n	8005dfa <create_name+0x166>
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d101      	bne.n	8005dfe <create_name+0x16a>
 8005dfa:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005dfe:	f018 0f02 	tst.w	r8, #2
 8005e02:	d106      	bne.n	8005e12 <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d046      	beq.n	8005e9c <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005e0e:	2a04      	cmp	r2, #4
 8005e10:	d047      	beq.n	8005ea2 <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005e12:	f887 804b 	strb.w	r8, [r7, #75]	@ 0x4b
	return FR_OK;
 8005e16:	2000      	movs	r0, #0
}
 8005e18:	b003      	add	sp, #12
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8005e1e:	f048 0803 	orr.w	r8, r8, #3
 8005e22:	e7da      	b.n	8005dda <create_name+0x146>
			b <<= 2; continue;
 8005e24:	9b01      	ldr	r3, [sp, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005e2c:	4623      	mov	r3, r4
 8005e2e:	f04f 0b0b 	mov.w	fp, #11
 8005e32:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8005e36:	e7ab      	b.n	8005d90 <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f001 fa74 	bl	8007328 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005e40:	4606      	mov	r6, r0
 8005e42:	b118      	cbz	r0, 8005e4c <create_name+0x1b8>
 8005e44:	f1a0 0680 	sub.w	r6, r0, #128	@ 0x80
 8005e48:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <create_name+0x224>)
 8005e4a:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8005e4c:	f048 0802 	orr.w	r8, r8, #2
 8005e50:	e7ad      	b.n	8005dae <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005e52:	4631      	mov	r1, r6
 8005e54:	4819      	ldr	r0, [pc, #100]	@ (8005ebc <create_name+0x228>)
 8005e56:	f7fe fc38 	bl	80046ca <chk_chr>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1a9      	bne.n	8005db2 <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005e5e:	f1a6 0341 	sub.w	r3, r6, #65	@ 0x41
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b19      	cmp	r3, #25
 8005e66:	d804      	bhi.n	8005e72 <create_name+0x1de>
					b |= 2;
 8005e68:	9b01      	ldr	r3, [sp, #4]
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	e7a2      	b.n	8005db8 <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 8005e72:	f1a6 0361 	sub.w	r3, r6, #97	@ 0x61
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b19      	cmp	r3, #25
 8005e7a:	d89d      	bhi.n	8005db8 <create_name+0x124>
						b |= 1; w -= 0x20;
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	3e20      	subs	r6, #32
 8005e86:	b2b6      	uxth	r6, r6
 8005e88:	e796      	b.n	8005db8 <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e8a:	2305      	movs	r3, #5
 8005e8c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8005e90:	e7a7      	b.n	8005de2 <create_name+0x14e>
	if (ni == 8) b <<= 2;
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	e7a5      	b.n	8005de8 <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005e9c:	f048 0810 	orr.w	r8, r8, #16
 8005ea0:	e7b5      	b.n	8005e0e <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ea2:	f048 0808 	orr.w	r8, r8, #8
 8005ea6:	e7b4      	b.n	8005e12 <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005ea8:	2006      	movs	r0, #6
 8005eaa:	e7b5      	b.n	8005e18 <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005eac:	2006      	movs	r0, #6
 8005eae:	e7b3      	b.n	8005e18 <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005eb0:	2006      	movs	r0, #6
 8005eb2:	e7b1      	b.n	8005e18 <create_name+0x184>
 8005eb4:	0800a408 	.word	0x0800a408
 8005eb8:	0800a42c 	.word	0x0800a42c
 8005ebc:	0800a414 	.word	0x0800a414

08005ec0 <get_xdir_info>:
{
 8005ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4688      	mov	r8, r1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8005ec8:	2600      	movs	r6, #0
 8005eca:	2440      	movs	r4, #64	@ 0x40
	di = 0;
 8005ecc:	4635      	mov	r5, r6
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8005ece:	e00e      	b.n	8005eee <get_xdir_info+0x2e>
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8005ed0:	1938      	adds	r0, r7, r4
 8005ed2:	f7fe fb8b 	bl	80045ec <ld_word>
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f001 fa26 	bl	8007328 <ff_convert>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8005edc:	b180      	cbz	r0, 8005f00 <get_xdir_info+0x40>
 8005ede:	2dfe      	cmp	r5, #254	@ 0xfe
 8005ee0:	d836      	bhi.n	8005f50 <get_xdir_info+0x90>
		fno->fname[di++] = (char)w;
 8005ee2:	eb08 0205 	add.w	r2, r8, r5
 8005ee6:	7690      	strb	r0, [r2, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8005ee8:	3402      	adds	r4, #2
 8005eea:	3601      	adds	r6, #1
		fno->fname[di++] = (char)w;
 8005eec:	3501      	adds	r5, #1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8005eee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ef2:	42b3      	cmp	r3, r6
 8005ef4:	d905      	bls.n	8005f02 <get_xdir_info+0x42>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8005ef6:	f014 0f1f 	tst.w	r4, #31
 8005efa:	d1e9      	bne.n	8005ed0 <get_xdir_info+0x10>
 8005efc:	3402      	adds	r4, #2
 8005efe:	e7e7      	b.n	8005ed0 <get_xdir_info+0x10>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8005f00:	2500      	movs	r5, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8005f02:	b925      	cbnz	r5, 8005f0e <get_xdir_info+0x4e>
 8005f04:	eb08 0305 	add.w	r3, r8, r5
 8005f08:	223f      	movs	r2, #63	@ 0x3f
 8005f0a:	769a      	strb	r2, [r3, #26]
 8005f0c:	3501      	adds	r5, #1
	fno->fname[di] = 0;						/* Terminate file name */
 8005f0e:	4445      	add	r5, r8
 8005f10:	2300      	movs	r3, #0
 8005f12:	76ab      	strb	r3, [r5, #26]
	fno->altname[0] = 0;							/* No SFN */
 8005f14:	f888 300d 	strb.w	r3, [r8, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8005f18:	793b      	ldrb	r3, [r7, #4]
 8005f1a:	f888 300c 	strb.w	r3, [r8, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8005f1e:	f013 0f10 	tst.w	r3, #16
 8005f22:	d117      	bne.n	8005f54 <get_xdir_info+0x94>
 8005f24:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005f28:	f7fe fb70 	bl	800460c <ld_qword>
 8005f2c:	f8c8 0000 	str.w	r0, [r8]
 8005f30:	f8c8 1004 	str.w	r1, [r8, #4]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8005f34:	f107 000c 	add.w	r0, r7, #12
 8005f38:	f7fe fb58 	bl	80045ec <ld_word>
 8005f3c:	f8a8 000a 	strh.w	r0, [r8, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8005f40:	f107 000e 	add.w	r0, r7, #14
 8005f44:	f7fe fb52 	bl	80045ec <ld_word>
 8005f48:	f8a8 0008 	strh.w	r0, [r8, #8]
}
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8005f50:	2500      	movs	r5, #0
 8005f52:	e7d6      	b.n	8005f02 <get_xdir_info+0x42>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8005f54:	2000      	movs	r0, #0
 8005f56:	4601      	mov	r1, r0
 8005f58:	e7e8      	b.n	8005f2c <get_xdir_info+0x6c>

08005f5a <get_fileinfo>:
{
 8005f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8005f5e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8005f62:	2300      	movs	r3, #0
 8005f64:	768b      	strb	r3, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005f66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d075      	beq.n	8006058 <get_fileinfo+0xfe>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	460c      	mov	r4, r1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005f70:	f898 3000 	ldrb.w	r3, [r8]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d016      	beq.n	8005fa6 <get_fileinfo+0x4c>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005f78:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f7e:	d01b      	beq.n	8005fb8 <get_fileinfo+0x5e>
			i = j = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005f84:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8005f88:	1c5f      	adds	r7, r3, #1
 8005f8a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8005f8e:	b180      	cbz	r0, 8005fb2 <get_fileinfo+0x58>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005f90:	2100      	movs	r1, #0
 8005f92:	f001 f9c9 	bl	8007328 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005f96:	b158      	cbz	r0, 8005fb0 <get_fileinfo+0x56>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005f98:	2dfe      	cmp	r5, #254	@ 0xfe
 8005f9a:	d811      	bhi.n	8005fc0 <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 8005f9c:	1962      	adds	r2, r4, r5
 8005f9e:	7690      	strb	r0, [r2, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005fa0:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	e7ee      	b.n	8005f84 <get_fileinfo+0x2a>
		get_xdir_info(fs->dirbuf, fno);
 8005fa6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005faa:	f7ff ff89 	bl	8005ec0 <get_xdir_info>
		return;
 8005fae:	e053      	b.n	8006058 <get_fileinfo+0xfe>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005fb0:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8005fb2:	4425      	add	r5, r4
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	76ab      	strb	r3, [r5, #26]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8005fb8:	7ea5      	ldrb	r5, [r4, #26]
	i = j = 0;
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8005fbe:	e012      	b.n	8005fe6 <get_fileinfo+0x8c>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005fc0:	2500      	movs	r5, #0
 8005fc2:	e7f6      	b.n	8005fb2 <get_fileinfo+0x58>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005fc4:	23e5      	movs	r3, #229	@ 0xe5
 8005fc6:	e017      	b.n	8005ff8 <get_fileinfo+0x9e>
			if (!lfv) fno->fname[j] = '.';
 8005fc8:	b915      	cbnz	r5, 8005fd0 <get_fileinfo+0x76>
 8005fca:	18a0      	adds	r0, r4, r2
 8005fcc:	272e      	movs	r7, #46	@ 0x2e
 8005fce:	7687      	strb	r7, [r0, #26]
			fno->altname[j++] = '.';
 8005fd0:	18a0      	adds	r0, r4, r2
 8005fd2:	272e      	movs	r7, #46	@ 0x2e
 8005fd4:	7347      	strb	r7, [r0, #13]
 8005fd6:	3201      	adds	r2, #1
 8005fd8:	e010      	b.n	8005ffc <get_fileinfo+0xa2>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8005fda:	2010      	movs	r0, #16
 8005fdc:	e01c      	b.n	8006018 <get_fileinfo+0xbe>
			fno->fname[j] = c;
 8005fde:	18a0      	adds	r0, r4, r2
 8005fe0:	7683      	strb	r3, [r0, #26]
		j++;
 8005fe2:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8005fe4:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 8005fe6:	2b0a      	cmp	r3, #10
 8005fe8:	d81b      	bhi.n	8006022 <get_fileinfo+0xc8>
		c = (TCHAR)dp->dir[i++];
 8005fea:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8005fec:	1c59      	adds	r1, r3, #1
 8005fee:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d0f7      	beq.n	8005fe4 <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d0e5      	beq.n	8005fc4 <get_fileinfo+0x6a>
		if (i == 9) {						/* Insert a . if extension is exist */
 8005ff8:	2909      	cmp	r1, #9
 8005ffa:	d0e5      	beq.n	8005fc8 <get_fileinfo+0x6e>
		fno->altname[j] = c;
 8005ffc:	18a0      	adds	r0, r4, r2
 8005ffe:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
 8006000:	2d00      	cmp	r5, #0
 8006002:	d1ee      	bne.n	8005fe2 <get_fileinfo+0x88>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006004:	f1a3 0041 	sub.w	r0, r3, #65	@ 0x41
 8006008:	b2c0      	uxtb	r0, r0
 800600a:	2819      	cmp	r0, #25
 800600c:	d8e7      	bhi.n	8005fde <get_fileinfo+0x84>
 800600e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8006010:	7b07      	ldrb	r7, [r0, #12]
 8006012:	2908      	cmp	r1, #8
 8006014:	d8e1      	bhi.n	8005fda <get_fileinfo+0x80>
 8006016:	2008      	movs	r0, #8
 8006018:	4207      	tst	r7, r0
 800601a:	d0e0      	beq.n	8005fde <get_fileinfo+0x84>
				c += 0x20;			/* To lower */
 800601c:	3320      	adds	r3, #32
 800601e:	b2db      	uxtb	r3, r3
 8006020:	e7dd      	b.n	8005fde <get_fileinfo+0x84>
	if (!lfv) {
 8006022:	b935      	cbnz	r5, 8006032 <get_fileinfo+0xd8>
		fno->fname[j] = 0;
 8006024:	18a3      	adds	r3, r4, r2
 8006026:	2100      	movs	r1, #0
 8006028:	7699      	strb	r1, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800602a:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800602c:	7b1b      	ldrb	r3, [r3, #12]
 800602e:	b903      	cbnz	r3, 8006032 <get_fileinfo+0xd8>
 8006030:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006032:	4422      	add	r2, r4
 8006034:	2500      	movs	r5, #0
 8006036:	7355      	strb	r5, [r2, #13]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006038:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800603a:	7adb      	ldrb	r3, [r3, #11]
 800603c:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800603e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8006040:	301c      	adds	r0, #28
 8006042:	f7fe fad8 	bl	80045f6 <ld_dword>
 8006046:	6020      	str	r0, [r4, #0]
 8006048:	6065      	str	r5, [r4, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800604a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800604c:	3016      	adds	r0, #22
 800604e:	f7fe fad2 	bl	80045f6 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006052:	8160      	strh	r0, [r4, #10]
 8006054:	0c00      	lsrs	r0, r0, #16
 8006056:	8120      	strh	r0, [r4, #8]
}
 8006058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800605c <xname_sum>:
{
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4604      	mov	r4, r0
	WORD sum = 0;
 8006060:	2500      	movs	r5, #0
	while ((chr = *name++) != 0) {
 8006062:	e011      	b.n	8006088 <xname_sum+0x2c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8006064:	f001 f97e 	bl	8007364 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8006068:	086b      	lsrs	r3, r5, #1
 800606a:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
 800606e:	b2c2      	uxtb	r2, r0
 8006070:	fa12 f383 	uxtah	r3, r2, r3
 8006074:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006076:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800607a:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800607e:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8006082:	fa10 f383 	uxtah	r3, r0, r3
 8006086:	b29d      	uxth	r5, r3
	while ((chr = *name++) != 0) {
 8006088:	f834 0b02 	ldrh.w	r0, [r4], #2
 800608c:	2800      	cmp	r0, #0
 800608e:	d1e9      	bne.n	8006064 <xname_sum+0x8>
}
 8006090:	4628      	mov	r0, r5
 8006092:	bd38      	pop	{r3, r4, r5, pc}

08006094 <create_xdir>:
{
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	4607      	mov	r7, r0
 800609a:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
 800609c:	2240      	movs	r2, #64	@ 0x40
 800609e:	2100      	movs	r1, #0
 80060a0:	f7fe fb01 	bl	80046a6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 80060a4:	2385      	movs	r3, #133	@ 0x85
 80060a6:	703b      	strb	r3, [r7, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80060a8:	23c0      	movs	r3, #192	@ 0xc0
 80060aa:	f887 3020 	strb.w	r3, [r7, #32]
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80060ae:	2501      	movs	r5, #1
 80060b0:	2600      	movs	r6, #0
 80060b2:	46a9      	mov	r9, r5
 80060b4:	2440      	movs	r4, #64	@ 0x40
 80060b6:	e017      	b.n	80060e8 <create_xdir+0x54>
			st_word(dirb + i, chr); 		/* Store it */
 80060b8:	4629      	mov	r1, r5
 80060ba:	1938      	adds	r0, r7, r4
 80060bc:	f7fe fac8 	bl	8004650 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80060c0:	3402      	adds	r4, #2
 80060c2:	f014 0f1f 	tst.w	r4, #31
 80060c6:	d008      	beq.n	80060da <create_xdir+0x46>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	d0f5      	beq.n	80060b8 <create_xdir+0x24>
 80060cc:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	d0f1      	beq.n	80060b8 <create_xdir+0x24>
 80060d4:	3601      	adds	r6, #1
 80060d6:	b2f6      	uxtb	r6, r6
 80060d8:	e7ee      	b.n	80060b8 <create_xdir+0x24>
		nb++;
 80060da:	f109 0901 	add.w	r9, r9, #1
 80060de:	fa5f f989 	uxtb.w	r9, r9
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80060e2:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 80060e6:	b133      	cbz	r3, 80060f6 <create_xdir+0x62>
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80060e8:	1c63      	adds	r3, r4, #1
 80060ea:	22c1      	movs	r2, #193	@ 0xc1
 80060ec:	553a      	strb	r2, [r7, r4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	54fa      	strb	r2, [r7, r3]
 80060f2:	3402      	adds	r4, #2
 80060f4:	e7e8      	b.n	80060c8 <create_xdir+0x34>
	dirb[XDIR_NumName] = nc;	/* Set name length */
 80060f6:	f887 6023 	strb.w	r6, [r7, #35]	@ 0x23
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80060fa:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80060fe:	4640      	mov	r0, r8
 8006100:	f7ff ffac 	bl	800605c <xname_sum>
 8006104:	4601      	mov	r1, r0
 8006106:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800610a:	f7fe faa1 	bl	8004650 <st_word>
}
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08006114 <cmp_lfn>:
{
 8006114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	4681      	mov	r9, r0
 800611a:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800611c:	f101 001a 	add.w	r0, r1, #26
 8006120:	f7fe fa64 	bl	80045ec <ld_word>
 8006124:	bbc8      	cbnz	r0, 800619a <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006126:	783e      	ldrb	r6, [r7, #0]
 8006128:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 800612c:	3e01      	subs	r6, #1
 800612e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8006132:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006136:	f04f 0801 	mov.w	r8, #1
 800613a:	2500      	movs	r5, #0
 800613c:	e006      	b.n	800614c <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800613e:	2000      	movs	r0, #0
 8006140:	e02c      	b.n	800619c <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006142:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006146:	4298      	cmp	r0, r3
 8006148:	d12a      	bne.n	80061a0 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800614a:	3501      	adds	r5, #1
 800614c:	2d0c      	cmp	r5, #12
 800614e:	d818      	bhi.n	8006182 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006150:	4b17      	ldr	r3, [pc, #92]	@ (80061b0 <cmp_lfn+0x9c>)
 8006152:	5d58      	ldrb	r0, [r3, r5]
 8006154:	4438      	add	r0, r7
 8006156:	f7fe fa49 	bl	80045ec <ld_word>
 800615a:	4604      	mov	r4, r0
		if (wc) {
 800615c:	f1b8 0f00 	cmp.w	r8, #0
 8006160:	d0ef      	beq.n	8006142 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006162:	2efe      	cmp	r6, #254	@ 0xfe
 8006164:	d8eb      	bhi.n	800613e <cmp_lfn+0x2a>
 8006166:	f001 f8fd 	bl	8007364 <ff_wtoupper>
 800616a:	4680      	mov	r8, r0
 800616c:	f106 0a01 	add.w	sl, r6, #1
 8006170:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8006174:	f001 f8f6 	bl	8007364 <ff_wtoupper>
 8006178:	4580      	cmp	r8, r0
 800617a:	d1e0      	bne.n	800613e <cmp_lfn+0x2a>
			wc = uc;
 800617c:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800617e:	4656      	mov	r6, sl
 8006180:	e7e3      	b.n	800614a <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006182:	783b      	ldrb	r3, [r7, #0]
 8006184:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006188:	d00c      	beq.n	80061a4 <cmp_lfn+0x90>
 800618a:	f1b8 0f00 	cmp.w	r8, #0
 800618e:	d00b      	beq.n	80061a8 <cmp_lfn+0x94>
 8006190:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8006194:	b953      	cbnz	r3, 80061ac <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8006196:	2001      	movs	r0, #1
 8006198:	e000      	b.n	800619c <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800619a:	2000      	movs	r0, #0
}
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80061a0:	2000      	movs	r0, #0
 80061a2:	e7fb      	b.n	800619c <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 80061a4:	2001      	movs	r0, #1
 80061a6:	e7f9      	b.n	800619c <cmp_lfn+0x88>
 80061a8:	2001      	movs	r0, #1
 80061aa:	e7f7      	b.n	800619c <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80061ac:	2000      	movs	r0, #0
 80061ae:	e7f5      	b.n	800619c <cmp_lfn+0x88>
 80061b0:	0800a41c 	.word	0x0800a41c

080061b4 <dir_find>:
{
 80061b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80061ba:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80061bc:	2100      	movs	r1, #0
 80061be:	f7ff f9ce 	bl	800555e <dir_sdi>
	if (res != FR_OK) return res;
 80061c2:	4606      	mov	r6, r0
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f040 80ab 	bne.w	8006320 <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80061ca:	783b      	ldrb	r3, [r7, #0]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d006      	beq.n	80061de <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061d4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80061d6:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 80061da:	46c8      	mov	r8, r9
 80061dc:	e046      	b.n	800626c <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff ff3c 	bl	800605c <xname_sum>
 80061e4:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80061e6:	e020      	b.n	800622a <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80061e8:	6938      	ldr	r0, [r7, #16]
 80061ea:	4440      	add	r0, r8
 80061ec:	f7fe f9fe 	bl	80045ec <ld_word>
 80061f0:	f001 f8b8 	bl	8007364 <ff_wtoupper>
 80061f4:	4681      	mov	r9, r0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
 80061fc:	f001 f8b2 	bl	8007364 <ff_wtoupper>
 8006200:	4581      	cmp	r9, r0
 8006202:	d10c      	bne.n	800621e <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006204:	3d01      	subs	r5, #1
 8006206:	b2ed      	uxtb	r5, r5
 8006208:	f108 0802 	add.w	r8, r8, #2
 800620c:	f10a 0a01 	add.w	sl, sl, #1
 8006210:	b12d      	cbz	r5, 800621e <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
 8006212:	f018 0f1f 	tst.w	r8, #31
 8006216:	d1e7      	bne.n	80061e8 <dir_find+0x34>
 8006218:	f108 0802 	add.w	r8, r8, #2
 800621c:	e7e4      	b.n	80061e8 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800621e:	b925      	cbnz	r5, 800622a <dir_find+0x76>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d07a      	beq.n	8006320 <dir_find+0x16c>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800622a:	2100      	movs	r1, #0
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff fc58 	bl	8005ae2 <dir_read>
 8006232:	4606      	mov	r6, r0
 8006234:	2800      	cmp	r0, #0
 8006236:	d173      	bne.n	8006320 <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8006238:	693d      	ldr	r5, [r7, #16]
 800623a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800623e:	f7fe f9d5 	bl	80045ec <ld_word>
 8006242:	4558      	cmp	r0, fp
 8006244:	d1f1      	bne.n	800622a <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006246:	f895 5023 	ldrb.w	r5, [r5, #35]	@ 0x23
 800624a:	f04f 0a00 	mov.w	sl, #0
 800624e:	f04f 0840 	mov.w	r8, #64	@ 0x40
 8006252:	e7dd      	b.n	8006210 <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006258:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800625a:	f04f 08ff 	mov.w	r8, #255	@ 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800625e:	2100      	movs	r1, #0
 8006260:	4620      	mov	r0, r4
 8006262:	f7ff fb1c 	bl	800589e <dir_next>
	} while (res == FR_OK);
 8006266:	4606      	mov	r6, r0
 8006268:	2800      	cmp	r0, #0
 800626a:	d159      	bne.n	8006320 <dir_find+0x16c>
		res = move_window(fs, dp->sect);
 800626c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800626e:	4638      	mov	r0, r7
 8006270:	f7fe fcc9 	bl	8004c06 <move_window>
		if (res != FR_OK) break;
 8006274:	4606      	mov	r6, r0
 8006276:	2800      	cmp	r0, #0
 8006278:	d152      	bne.n	8006320 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800627a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800627c:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04d      	beq.n	800631e <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006282:	7aea      	ldrb	r2, [r5, #11]
 8006284:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 8006288:	71a1      	strb	r1, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800628a:	2be5      	cmp	r3, #229	@ 0xe5
 800628c:	d0e2      	beq.n	8006254 <dir_find+0xa0>
 800628e:	f012 0f08 	tst.w	r2, #8
 8006292:	d015      	beq.n	80062c0 <dir_find+0x10c>
 8006294:	290f      	cmp	r1, #15
 8006296:	d1dd      	bne.n	8006254 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006298:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800629c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80062a0:	d1dd      	bne.n	800625e <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80062a2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80062a6:	d006      	beq.n	80062b6 <dir_find+0x102>
						sum = dp->dir[LDIR_Chksum];
 80062a8:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80062ac:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80062b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80062b2:	64e2      	str	r2, [r4, #76]	@ 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80062b4:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80062b6:	4543      	cmp	r3, r8
 80062b8:	d01e      	beq.n	80062f8 <dir_find+0x144>
 80062ba:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 80062be:	e7ce      	b.n	800625e <dir_find+0xaa>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80062c0:	290f      	cmp	r1, #15
 80062c2:	d0e9      	beq.n	8006298 <dir_find+0xe4>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80062c4:	f1b8 0f00 	cmp.w	r8, #0
 80062c8:	d104      	bne.n	80062d4 <dir_find+0x120>
 80062ca:	4628      	mov	r0, r5
 80062cc:	f7fe fbfd 	bl	8004aca <sum_sfn>
 80062d0:	4548      	cmp	r0, r9
 80062d2:	d025      	beq.n	8006320 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062d4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80062d8:	f013 0f01 	tst.w	r3, #1
 80062dc:	d106      	bne.n	80062ec <dir_find+0x138>
 80062de:	220b      	movs	r2, #11
 80062e0:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7fe f9e3 	bl	80046b0 <mem_cmp>
 80062ea:	b1c8      	cbz	r0, 8006320 <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80062ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062f0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80062f2:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 80062f6:	e7b2      	b.n	800625e <dir_find+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80062f8:	7b6b      	ldrb	r3, [r5, #13]
 80062fa:	454b      	cmp	r3, r9
 80062fc:	d002      	beq.n	8006304 <dir_find+0x150>
 80062fe:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8006302:	e7ac      	b.n	800625e <dir_find+0xaa>
 8006304:	4629      	mov	r1, r5
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff ff04 	bl	8006114 <cmp_lfn>
 800630c:	b120      	cbz	r0, 8006318 <dir_find+0x164>
 800630e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006312:	fa5f f888 	uxtb.w	r8, r8
 8006316:	e7a2      	b.n	800625e <dir_find+0xaa>
 8006318:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800631c:	e79f      	b.n	800625e <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800631e:	2604      	movs	r6, #4
}
 8006320:	4630      	mov	r0, r6
 8006322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006326 <follow_path>:
{
 8006326:	b530      	push	{r4, r5, lr}
 8006328:	b083      	sub	sp, #12
 800632a:	4604      	mov	r4, r0
 800632c:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800632e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006330:	e001      	b.n	8006336 <follow_path+0x10>
 8006332:	3301      	adds	r3, #1
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	2a2f      	cmp	r2, #47	@ 0x2f
 800633c:	d0f9      	beq.n	8006332 <follow_path+0xc>
 800633e:	2a5c      	cmp	r2, #92	@ 0x5c
 8006340:	d0f7      	beq.n	8006332 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8006342:	2200      	movs	r2, #0
 8006344:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8006346:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b1f      	cmp	r3, #31
 800634c:	d82c      	bhi.n	80063a8 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 800634e:	2380      	movs	r3, #128	@ 0x80
 8006350:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8006354:	4611      	mov	r1, r2
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff f901 	bl	800555e <dir_sdi>
 800635c:	4603      	mov	r3, r0
}
 800635e:	4618      	mov	r0, r3
 8006360:	b003      	add	sp, #12
 8006362:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006364:	2804      	cmp	r0, #4
 8006366:	d1fa      	bne.n	800635e <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006368:	f012 0f04 	tst.w	r2, #4
 800636c:	d1f7      	bne.n	800635e <follow_path+0x38>
 800636e:	2305      	movs	r3, #5
 8006370:	e7f5      	b.n	800635e <follow_path+0x38>
				obj->c_scl = obj->sclust;
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800637c:	79e2      	ldrb	r2, [r4, #7]
 800637e:	4313      	orrs	r3, r2
 8006380:	6263      	str	r3, [r4, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8006382:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006384:	62a3      	str	r3, [r4, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8006386:	6928      	ldr	r0, [r5, #16]
 8006388:	3034      	adds	r0, #52	@ 0x34
 800638a:	f7fe f934 	bl	80045f6 <ld_dword>
 800638e:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006390:	692b      	ldr	r3, [r5, #16]
 8006392:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800639c:	6928      	ldr	r0, [r5, #16]
 800639e:	3038      	adds	r0, #56	@ 0x38
 80063a0:	f7fe f934 	bl	800460c <ld_qword>
 80063a4:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063a8:	a901      	add	r1, sp, #4
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff fc72 	bl	8005c94 <create_name>
			if (res != FR_OK) break;
 80063b0:	4603      	mov	r3, r0
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d1d3      	bne.n	800635e <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff fefc 	bl	80061b4 <dir_find>
			ns = dp->fn[NSFLAG];
 80063bc:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 80063c0:	4603      	mov	r3, r0
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d1ce      	bne.n	8006364 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063c6:	f012 0f04 	tst.w	r2, #4
 80063ca:	d1c8      	bne.n	800635e <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80063cc:	79a3      	ldrb	r3, [r4, #6]
 80063ce:	f013 0f10 	tst.w	r3, #16
 80063d2:	d00d      	beq.n	80063f0 <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80063d4:	782b      	ldrb	r3, [r5, #0]
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d0cb      	beq.n	8006372 <follow_path+0x4c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80063da:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80063de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80063e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e4:	4419      	add	r1, r3
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7fe fa76 	bl	80048d8 <ld_clust>
 80063ec:	60a0      	str	r0, [r4, #8]
 80063ee:	e7db      	b.n	80063a8 <follow_path+0x82>
				res = FR_NO_PATH; break;
 80063f0:	2305      	movs	r3, #5
 80063f2:	e7b4      	b.n	800635e <follow_path+0x38>

080063f4 <dir_register>:
{
 80063f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063f8:	b09b      	sub	sp, #108	@ 0x6c
	FATFS *fs = dp->obj.fs;
 80063fa:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80063fc:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 8006400:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 8006404:	f040 80e6 	bne.w	80065d4 <dir_register+0x1e0>
 8006408:	4606      	mov	r6, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800640a:	2400      	movs	r4, #0
 800640c:	e000      	b.n	8006410 <dir_register+0x1c>
 800640e:	3401      	adds	r4, #1
 8006410:	68eb      	ldr	r3, [r5, #12]
 8006412:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f9      	bne.n	800640e <dir_register+0x1a>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800641a:	782b      	ldrb	r3, [r5, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d022      	beq.n	8006466 <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
 8006420:	f106 0740 	add.w	r7, r6, #64	@ 0x40
 8006424:	220c      	movs	r2, #12
 8006426:	4639      	mov	r1, r7
 8006428:	a817      	add	r0, sp, #92	@ 0x5c
 800642a:	f7fe f932 	bl	8004692 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800642e:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 8006432:	f013 0f01 	tst.w	r3, #1
 8006436:	d075      	beq.n	8006524 <dir_register+0x130>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006438:	2340      	movs	r3, #64	@ 0x40
 800643a:	f886 304b 	strb.w	r3, [r6, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800643e:	f04f 0801 	mov.w	r8, #1
 8006442:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8006446:	d863      	bhi.n	8006510 <dir_register+0x11c>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006448:	4643      	mov	r3, r8
 800644a:	68ea      	ldr	r2, [r5, #12]
 800644c:	a917      	add	r1, sp, #92	@ 0x5c
 800644e:	4638      	mov	r0, r7
 8006450:	f7fe fae6 	bl	8004a20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006454:	4630      	mov	r0, r6
 8006456:	f7ff fead 	bl	80061b4 <dir_find>
			if (res != FR_OK) break;
 800645a:	4681      	mov	r9, r0
 800645c:	2800      	cmp	r0, #0
 800645e:	d157      	bne.n	8006510 <dir_register+0x11c>
		for (n = 1; n < 100; n++) {
 8006460:	f108 0801 	add.w	r8, r8, #1
 8006464:	e7ed      	b.n	8006442 <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006466:	340e      	adds	r4, #14
 8006468:	4b5f      	ldr	r3, [pc, #380]	@ (80065e8 <dir_register+0x1f4>)
 800646a:	fba3 3404 	umull	r3, r4, r3, r4
 800646e:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8006470:	1ca1      	adds	r1, r4, #2
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff fbac 	bl	8005bd0 <dir_alloc>
		if (res != FR_OK) return res;
 8006478:	4681      	mov	r9, r0
 800647a:	2800      	cmp	r0, #0
 800647c:	f040 80ac 	bne.w	80065d8 <dir_register+0x1e4>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8006480:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8006482:	3401      	adds	r4, #1
 8006484:	eba3 1344 	sub.w	r3, r3, r4, lsl #5
 8006488:	64f3      	str	r3, [r6, #76]	@ 0x4c
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800648a:	68b3      	ldr	r3, [r6, #8]
 800648c:	b11b      	cbz	r3, 8006496 <dir_register+0xa2>
 800648e:	79f3      	ldrb	r3, [r6, #7]
 8006490:	f013 0f04 	tst.w	r3, #4
 8006494:	d104      	bne.n	80064a0 <dir_register+0xac>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006496:	68e9      	ldr	r1, [r5, #12]
 8006498:	6928      	ldr	r0, [r5, #16]
 800649a:	f7ff fdfb 	bl	8006094 <create_xdir>
		return FR_OK;
 800649e:	e09b      	b.n	80065d8 <dir_register+0x1e4>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80064a0:	6933      	ldr	r3, [r6, #16]
 80064a2:	6971      	ldr	r1, [r6, #20]
 80064a4:	896a      	ldrh	r2, [r5, #10]
 80064a6:	0252      	lsls	r2, r2, #9
 80064a8:	189b      	adds	r3, r3, r2
 80064aa:	f141 0100 	adc.w	r1, r1, #0
 80064ae:	6133      	str	r3, [r6, #16]
 80064b0:	6171      	str	r1, [r6, #20]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7fe ff88 	bl	80053c8 <fill_first_frag>
			if (res != FR_OK) return res;
 80064b8:	b108      	cbz	r0, 80064be <dir_register+0xca>
 80064ba:	4681      	mov	r9, r0
 80064bc:	e08c      	b.n	80065d8 <dir_register+0x1e4>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80064be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064c2:	6b71      	ldr	r1, [r6, #52]	@ 0x34
 80064c4:	4630      	mov	r0, r6
 80064c6:	f7fe ff67 	bl	8005398 <fill_last_frag>
			if (res != FR_OK) return res;
 80064ca:	b108      	cbz	r0, 80064d0 <dir_register+0xdc>
 80064cc:	4681      	mov	r9, r0
 80064ce:	e083      	b.n	80065d8 <dir_register+0x1e4>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80064d0:	4631      	mov	r1, r6
 80064d2:	4668      	mov	r0, sp
 80064d4:	f7ff faec 	bl	8005ab0 <load_obj_dir>
			if (res != FR_OK) return res;
 80064d8:	b108      	cbz	r0, 80064de <dir_register+0xea>
 80064da:	4681      	mov	r9, r0
 80064dc:	e07c      	b.n	80065d8 <dir_register+0x1e4>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80064de:	6928      	ldr	r0, [r5, #16]
 80064e0:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80064e4:	3038      	adds	r0, #56	@ 0x38
 80064e6:	f7fe f8c1 	bl	800466c <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80064ea:	6928      	ldr	r0, [r5, #16]
 80064ec:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80064f0:	3028      	adds	r0, #40	@ 0x28
 80064f2:	f7fe f8bb 	bl	800466c <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80064f6:	79f3      	ldrb	r3, [r6, #7]
 80064f8:	692a      	ldr	r2, [r5, #16]
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
			res = store_xdir(&dj);							/* Store the object status */
 8006502:	4668      	mov	r0, sp
 8006504:	f7ff fb96 	bl	8005c34 <store_xdir>
			if (res != FR_OK) return res;
 8006508:	2800      	cmp	r0, #0
 800650a:	d0c4      	beq.n	8006496 <dir_register+0xa2>
 800650c:	4681      	mov	r9, r0
 800650e:	e063      	b.n	80065d8 <dir_register+0x1e4>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006510:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8006514:	d064      	beq.n	80065e0 <dir_register+0x1ec>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006516:	f1b9 0f04 	cmp.w	r9, #4
 800651a:	d15d      	bne.n	80065d8 <dir_register+0x1e4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800651c:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 8006520:	f886 304b 	strb.w	r3, [r6, #75]	@ 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006524:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 8006528:	f013 0f02 	tst.w	r3, #2
 800652c:	d02b      	beq.n	8006586 <dir_register+0x192>
 800652e:	340c      	adds	r4, #12
 8006530:	4b2e      	ldr	r3, [pc, #184]	@ (80065ec <dir_register+0x1f8>)
 8006532:	fba3 3404 	umull	r3, r4, r3, r4
 8006536:	08a4      	lsrs	r4, r4, #2
 8006538:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800653a:	4621      	mov	r1, r4
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff fb47 	bl	8005bd0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006542:	4681      	mov	r9, r0
 8006544:	2800      	cmp	r0, #0
 8006546:	d147      	bne.n	80065d8 <dir_register+0x1e4>
 8006548:	3c01      	subs	r4, #1
 800654a:	d11e      	bne.n	800658a <dir_register+0x196>
	if (res == FR_OK) {
 800654c:	f1b9 0f00 	cmp.w	r9, #0
 8006550:	d142      	bne.n	80065d8 <dir_register+0x1e4>
		res = move_window(fs, dp->sect);
 8006552:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8006554:	4628      	mov	r0, r5
 8006556:	f7fe fb56 	bl	8004c06 <move_window>
		if (res == FR_OK) {
 800655a:	4681      	mov	r9, r0
 800655c:	2800      	cmp	r0, #0
 800655e:	d13b      	bne.n	80065d8 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006560:	2220      	movs	r2, #32
 8006562:	2100      	movs	r1, #0
 8006564:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8006566:	f7fe f89e 	bl	80046a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800656a:	220b      	movs	r2, #11
 800656c:	4639      	mov	r1, r7
 800656e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8006570:	f7fe f88f 	bl	8004692 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006574:	f896 304b 	ldrb.w	r3, [r6, #75]	@ 0x4b
 8006578:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800657a:	f003 0318 	and.w	r3, r3, #24
 800657e:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8006580:	2301      	movs	r3, #1
 8006582:	70eb      	strb	r3, [r5, #3]
 8006584:	e028      	b.n	80065d8 <dir_register+0x1e4>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006586:	2401      	movs	r4, #1
 8006588:	e7d7      	b.n	800653a <dir_register+0x146>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800658a:	6b31      	ldr	r1, [r6, #48]	@ 0x30
 800658c:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8006590:	4630      	mov	r0, r6
 8006592:	f7fe ffe4 	bl	800555e <dir_sdi>
		if (res == FR_OK) {
 8006596:	4681      	mov	r9, r0
 8006598:	b9f0      	cbnz	r0, 80065d8 <dir_register+0x1e4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800659a:	4638      	mov	r0, r7
 800659c:	f7fe fa95 	bl	8004aca <sum_sfn>
 80065a0:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 80065a2:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80065a4:	4628      	mov	r0, r5
 80065a6:	f7fe fb2e 	bl	8004c06 <move_window>
				if (res != FR_OK) break;
 80065aa:	4681      	mov	r9, r0
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d1cd      	bne.n	800654c <dir_register+0x158>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80065b0:	4643      	mov	r3, r8
 80065b2:	b2e2      	uxtb	r2, r4
 80065b4:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80065b6:	68e8      	ldr	r0, [r5, #12]
 80065b8:	f7fe f9f6 	bl	80049a8 <put_lfn>
				fs->wflag = 1;
 80065bc:	2301      	movs	r3, #1
 80065be:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80065c0:	2100      	movs	r1, #0
 80065c2:	4630      	mov	r0, r6
 80065c4:	f7ff f96b 	bl	800589e <dir_next>
			} while (res == FR_OK && --nent);
 80065c8:	4681      	mov	r9, r0
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d1be      	bne.n	800654c <dir_register+0x158>
 80065ce:	3c01      	subs	r4, #1
 80065d0:	d1e7      	bne.n	80065a2 <dir_register+0x1ae>
 80065d2:	e7bb      	b.n	800654c <dir_register+0x158>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065d4:	f04f 0906 	mov.w	r9, #6
}
 80065d8:	4648      	mov	r0, r9
 80065da:	b01b      	add	sp, #108	@ 0x6c
 80065dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80065e0:	f04f 0907 	mov.w	r9, #7
 80065e4:	e7f8      	b.n	80065d8 <dir_register+0x1e4>
 80065e6:	bf00      	nop
 80065e8:	88888889 	.word	0x88888889
 80065ec:	4ec4ec4f 	.word	0x4ec4ec4f

080065f0 <sync_fs>:
{
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4604      	mov	r4, r0
	res = sync_window(fs);
 80065f4:	f7fe fadd 	bl	8004bb2 <sync_window>
	if (res == FR_OK) {
 80065f8:	4605      	mov	r5, r0
 80065fa:	b948      	cbnz	r0, 8006610 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065fc:	7823      	ldrb	r3, [r4, #0]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d008      	beq.n	8006614 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006602:	2200      	movs	r2, #0
 8006604:	4611      	mov	r1, r2
 8006606:	7860      	ldrb	r0, [r4, #1]
 8006608:	f7fd ffe2 	bl	80045d0 <disk_ioctl>
 800660c:	b100      	cbz	r0, 8006610 <sync_fs+0x20>
 800660e:	2501      	movs	r5, #1
}
 8006610:	4628      	mov	r0, r5
 8006612:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006614:	7923      	ldrb	r3, [r4, #4]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d1f3      	bne.n	8006602 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800661a:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 800661e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006622:	2100      	movs	r1, #0
 8006624:	4630      	mov	r0, r6
 8006626:	f7fe f83e 	bl	80046a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800662a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800662e:	f204 2036 	addw	r0, r4, #566	@ 0x236
 8006632:	f7fe f80d 	bl	8004650 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006636:	490f      	ldr	r1, [pc, #60]	@ (8006674 <sync_fs+0x84>)
 8006638:	4630      	mov	r0, r6
 800663a:	f7fe f80d 	bl	8004658 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800663e:	490e      	ldr	r1, [pc, #56]	@ (8006678 <sync_fs+0x88>)
 8006640:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8006644:	f7fe f808 	bl	8004658 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006648:	69a1      	ldr	r1, [r4, #24]
 800664a:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800664e:	f7fe f803 	bl	8004658 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006652:	6961      	ldr	r1, [r4, #20]
 8006654:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8006658:	f7fd fffe 	bl	8004658 <st_dword>
			fs->winsect = fs->volbase + 1;
 800665c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800665e:	3201      	adds	r2, #1
 8006660:	6362      	str	r2, [r4, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	7860      	ldrb	r0, [r4, #1]
 8006668:	f7fd ffa4 	bl	80045b4 <disk_write>
			fs->fsi_flag = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	7123      	strb	r3, [r4, #4]
 8006670:	e7c7      	b.n	8006602 <sync_fs+0x12>
 8006672:	bf00      	nop
 8006674:	41615252 	.word	0x41615252
 8006678:	61417272 	.word	0x61417272

0800667c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	9001      	str	r0, [sp, #4]
 8006682:	9100      	str	r1, [sp, #0]
 8006684:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006686:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006688:	a803      	add	r0, sp, #12
 800668a:	f7fe fa47 	bl	8004b1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800668e:	1e04      	subs	r4, r0, #0
 8006690:	db1c      	blt.n	80066cc <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <f_mount+0x58>)
 8006694:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8006698:	b125      	cbz	r5, 80066a4 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800669a:	4628      	mov	r0, r5
 800669c:	f7fe f8da 	bl	8004854 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80066a0:	2300      	movs	r3, #0
 80066a2:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	b10b      	cbz	r3, 80066ac <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	4a09      	ldr	r2, [pc, #36]	@ (80066d4 <f_mount+0x58>)
 80066b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066b4:	b163      	cbz	r3, 80066d0 <f_mount+0x54>
 80066b6:	2e01      	cmp	r6, #1
 80066b8:	d002      	beq.n	80066c0 <f_mount+0x44>
 80066ba:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80066bc:	b004      	add	sp, #16
 80066be:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80066c0:	2200      	movs	r2, #0
 80066c2:	a901      	add	r1, sp, #4
 80066c4:	4668      	mov	r0, sp
 80066c6:	f7fe faff 	bl	8004cc8 <find_volume>
	LEAVE_FF(fs, res);
 80066ca:	e7f7      	b.n	80066bc <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 80066cc:	200b      	movs	r0, #11
 80066ce:	e7f5      	b.n	80066bc <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066d0:	2000      	movs	r0, #0
 80066d2:	e7f3      	b.n	80066bc <f_mount+0x40>
 80066d4:	20000854 	.word	0x20000854

080066d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 80066e0:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f000 81c6 	beq.w	8006a74 <f_open+0x39c>
 80066e8:	4614      	mov	r4, r2
 80066ea:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80066ec:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 80066f0:	463a      	mov	r2, r7
 80066f2:	f20d 416c 	addw	r1, sp, #1132	@ 0x46c
 80066f6:	a801      	add	r0, sp, #4
 80066f8:	f7fe fae6 	bl	8004cc8 <find_volume>
	if (res == FR_OK) {
 80066fc:	4605      	mov	r5, r0
 80066fe:	b130      	cbz	r0, 800670e <f_open+0x36>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006700:	2300      	movs	r3, #0
 8006702:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8006704:	4628      	mov	r0, r5
 8006706:	f50d 6d99 	add.w	sp, sp, #1224	@ 0x4c8
 800670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800670e:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 8006712:	f8cd 3470 	str.w	r3, [sp, #1136]	@ 0x470
		INIT_NAMBUF(fs);
 8006716:	aa9b      	add	r2, sp, #620	@ 0x26c
 8006718:	60da      	str	r2, [r3, #12]
 800671a:	aa03      	add	r2, sp, #12
 800671c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800671e:	9901      	ldr	r1, [sp, #4]
 8006720:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8006724:	f7ff fdff 	bl	8006326 <follow_path>
		if (res == FR_OK) {
 8006728:	4605      	mov	r5, r0
 800672a:	b968      	cbnz	r0, 8006748 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800672c:	f99d 34bb 	ldrsb.w	r3, [sp, #1211]	@ 0x4bb
 8006730:	2b00      	cmp	r3, #0
 8006732:	db66      	blt.n	8006802 <f_open+0x12a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006734:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 8006738:	bf14      	ite	ne
 800673a:	2101      	movne	r1, #1
 800673c:	2100      	moveq	r1, #0
 800673e:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8006742:	f7fd ffcb 	bl	80046dc <chk_lock>
 8006746:	4605      	mov	r5, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006748:	f014 0f1c 	tst.w	r4, #28
 800674c:	f000 80cd 	beq.w	80068ea <f_open+0x212>
			if (res != FR_OK) {					/* No file, create new */
 8006750:	2d00      	cmp	r5, #0
 8006752:	d063      	beq.n	800681c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006754:	2d04      	cmp	r5, #4
 8006756:	d056      	beq.n	8006806 <f_open+0x12e>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006758:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800675c:	2d00      	cmp	r5, #0
 800675e:	d1cf      	bne.n	8006700 <f_open+0x28>
 8006760:	f017 0f08 	tst.w	r7, #8
 8006764:	f000 80d3 	beq.w	800690e <f_open+0x236>
				dw = GET_FATTIME();
 8006768:	f7fd fd8c 	bl	8004284 <get_fattime>
 800676c:	4604      	mov	r4, r0
				if (fs->fs_type == FS_EXFAT) {
 800676e:	f8dd 846c 	ldr.w	r8, [sp, #1132]	@ 0x46c
 8006772:	f898 3000 	ldrb.w	r3, [r8]
 8006776:	2b04      	cmp	r3, #4
 8006778:	d05a      	beq.n	8006830 <f_open+0x158>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800677a:	4601      	mov	r1, r0
 800677c:	f8dd 04ac 	ldr.w	r0, [sp, #1196]	@ 0x4ac
 8006780:	300e      	adds	r0, #14
 8006782:	f7fd ff69 	bl	8004658 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006786:	4621      	mov	r1, r4
 8006788:	f8dd 04ac 	ldr.w	r0, [sp, #1196]	@ 0x4ac
 800678c:	3016      	adds	r0, #22
 800678e:	f7fd ff63 	bl	8004658 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006792:	f8dd 34ac 	ldr.w	r3, [sp, #1196]	@ 0x4ac
 8006796:	2220      	movs	r2, #32
 8006798:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800679a:	f8dd 446c 	ldr.w	r4, [sp, #1132]	@ 0x46c
 800679e:	f8dd 84ac 	ldr.w	r8, [sp, #1196]	@ 0x4ac
 80067a2:	4641      	mov	r1, r8
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7fe f897 	bl	80048d8 <ld_clust>
 80067aa:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80067ac:	2200      	movs	r2, #0
 80067ae:	4641      	mov	r1, r8
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7fe f8a4 	bl	80048fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80067b6:	2100      	movs	r1, #0
 80067b8:	f8dd 04ac 	ldr.w	r0, [sp, #1196]	@ 0x4ac
 80067bc:	301c      	adds	r0, #28
 80067be:	f7fd ff4b 	bl	8004658 <st_dword>
					fs->wflag = 1;
 80067c2:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 80067c6:	2201      	movs	r2, #1
 80067c8:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80067ca:	f1b9 0f00 	cmp.w	r9, #0
 80067ce:	f000 809e 	beq.w	800690e <f_open+0x236>
						dw = fs->winsect;
 80067d2:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 80067d6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
						res = remove_chain(&dj.obj, cl, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	4649      	mov	r1, r9
 80067dc:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 80067e0:	f7fe ffde 	bl	80057a0 <remove_chain>
						if (res == FR_OK) {
 80067e4:	4605      	mov	r5, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d18a      	bne.n	8006700 <f_open+0x28>
							res = move_window(fs, dw);
 80067ea:	4621      	mov	r1, r4
 80067ec:	f8dd 046c 	ldr.w	r0, [sp, #1132]	@ 0x46c
 80067f0:	f7fe fa09 	bl	8004c06 <move_window>
 80067f4:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80067f6:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 80067fa:	f8dd 246c 	ldr.w	r2, [sp, #1132]	@ 0x46c
 80067fe:	6153      	str	r3, [r2, #20]
 8006800:	e085      	b.n	800690e <f_open+0x236>
				res = FR_INVALID_NAME;
 8006802:	2506      	movs	r5, #6
 8006804:	e7a0      	b.n	8006748 <f_open+0x70>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006806:	f7fd ffa3 	bl	8004750 <enq_lock>
 800680a:	b908      	cbnz	r0, 8006810 <f_open+0x138>
 800680c:	2512      	movs	r5, #18
 800680e:	e7a3      	b.n	8006758 <f_open+0x80>
 8006810:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8006814:	f7ff fdee 	bl	80063f4 <dir_register>
 8006818:	4605      	mov	r5, r0
 800681a:	e79d      	b.n	8006758 <f_open+0x80>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800681c:	f89d 3476 	ldrb.w	r3, [sp, #1142]	@ 0x476
 8006820:	f013 0f11 	tst.w	r3, #17
 8006824:	d172      	bne.n	800690c <f_open+0x234>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006826:	f014 0f04 	tst.w	r4, #4
 800682a:	d097      	beq.n	800675c <f_open+0x84>
 800682c:	2508      	movs	r5, #8
 800682e:	e767      	b.n	8006700 <f_open+0x28>
					fp->obj.fs = fs;
 8006830:	f8c6 8000 	str.w	r8, [r6]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8006834:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006838:	3034      	adds	r0, #52	@ 0x34
 800683a:	f7fd fedc 	bl	80045f6 <ld_dword>
 800683e:	60b0      	str	r0, [r6, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006840:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006844:	3038      	adds	r0, #56	@ 0x38
 8006846:	f7fd fee1 	bl	800460c <ld_qword>
 800684a:	e9c6 0104 	strd	r0, r1, [r6, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800684e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006852:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	71f3      	strb	r3, [r6, #7]
					fp->obj.n_frag = 0;
 800685c:	61f5      	str	r5, [r6, #28]
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800685e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006862:	4621      	mov	r1, r4
 8006864:	3008      	adds	r0, #8
 8006866:	f7fd fef7 	bl	8004658 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800686a:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	7515      	strb	r5, [r2, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8006872:	6918      	ldr	r0, [r3, #16]
 8006874:	4621      	mov	r1, r4
 8006876:	300c      	adds	r0, #12
 8006878:	f7fd feee 	bl	8004658 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800687c:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	7555      	strb	r5, [r2, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	2120      	movs	r1, #32
 8006888:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800688a:	6918      	ldr	r0, [r3, #16]
 800688c:	4629      	mov	r1, r5
 800688e:	3034      	adds	r0, #52	@ 0x34
 8006890:	f7fd fee2 	bl	8004658 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8006894:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	3038      	adds	r0, #56	@ 0x38
 80068a0:	f7fd fee4 	bl	800466c <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80068a4:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 80068a8:	6918      	ldr	r0, [r3, #16]
 80068aa:	2200      	movs	r2, #0
 80068ac:	2300      	movs	r3, #0
 80068ae:	3028      	adds	r0, #40	@ 0x28
 80068b0:	f7fd fedc 	bl	800466c <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80068b4:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 80068c0:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 80068c4:	f7ff f9b6 	bl	8005c34 <store_xdir>
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80068c8:	4605      	mov	r5, r0
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f47f af18 	bne.w	8006700 <f_open+0x28>
 80068d0:	68b1      	ldr	r1, [r6, #8]
 80068d2:	b1e1      	cbz	r1, 800690e <f_open+0x236>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80068d4:	2200      	movs	r2, #0
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7fe ff62 	bl	80057a0 <remove_chain>
 80068dc:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80068de:	68b3      	ldr	r3, [r6, #8]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	f8dd 246c 	ldr.w	r2, [sp, #1132]	@ 0x46c
 80068e6:	6153      	str	r3, [r2, #20]
 80068e8:	e011      	b.n	800690e <f_open+0x236>
			if (res == FR_OK) {					/* Following succeeded */
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	f47f af08 	bne.w	8006700 <f_open+0x28>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80068f0:	f89d 3476 	ldrb.w	r3, [sp, #1142]	@ 0x476
 80068f4:	f013 0f10 	tst.w	r3, #16
 80068f8:	f040 80b6 	bne.w	8006a68 <f_open+0x390>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80068fc:	f014 0f02 	tst.w	r4, #2
 8006900:	d005      	beq.n	800690e <f_open+0x236>
 8006902:	f013 0f01 	tst.w	r3, #1
 8006906:	d002      	beq.n	800690e <f_open+0x236>
						res = FR_DENIED;
 8006908:	2507      	movs	r5, #7
 800690a:	e6f9      	b.n	8006700 <f_open+0x28>
					res = FR_DENIED;
 800690c:	2507      	movs	r5, #7
		if (res == FR_OK) {
 800690e:	2d00      	cmp	r5, #0
 8006910:	f47f aef6 	bne.w	8006700 <f_open+0x28>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006914:	f017 0f08 	tst.w	r7, #8
 8006918:	d001      	beq.n	800691e <f_open+0x246>
				mode |= FA_MODIFIED;
 800691a:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800691e:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 8006922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006924:	64b3      	str	r3, [r6, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8006926:	f8dd 34ac 	ldr.w	r3, [sp, #1196]	@ 0x4ac
 800692a:	64f3      	str	r3, [r6, #76]	@ 0x4c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800692c:	2f01      	cmp	r7, #1
 800692e:	bf94      	ite	ls
 8006930:	2100      	movls	r1, #0
 8006932:	2101      	movhi	r1, #1
 8006934:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8006938:	f7fd ff1a 	bl	8004770 <inc_lock>
 800693c:	62f0      	str	r0, [r6, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800693e:	2800      	cmp	r0, #0
 8006940:	f000 8094 	beq.w	8006a6c <f_open+0x394>
			if (fs->fs_type == FS_EXFAT) {
 8006944:	f8dd 446c 	ldr.w	r4, [sp, #1132]	@ 0x46c
 8006948:	7823      	ldrb	r3, [r4, #0]
 800694a:	2b04      	cmp	r3, #4
 800694c:	d036      	beq.n	80069bc <f_open+0x2e4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800694e:	f8dd 84ac 	ldr.w	r8, [sp, #1196]	@ 0x4ac
 8006952:	4641      	mov	r1, r8
 8006954:	4620      	mov	r0, r4
 8006956:	f7fd ffbf 	bl	80048d8 <ld_clust>
 800695a:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800695c:	f108 001c 	add.w	r0, r8, #28
 8006960:	f7fd fe49 	bl	80045f6 <ld_dword>
 8006964:	6130      	str	r0, [r6, #16]
 8006966:	2300      	movs	r3, #0
 8006968:	6173      	str	r3, [r6, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800696a:	2100      	movs	r1, #0
 800696c:	6531      	str	r1, [r6, #80]	@ 0x50
			fp->obj.fs = fs;	 	/* Validate the file object */
 800696e:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 8006970:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8006978:	f886 7030 	strb.w	r7, [r6, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800697c:	f886 1031 	strb.w	r1, [r6, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8006980:	6471      	str	r1, [r6, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	e9c6 230e 	strd	r2, r3, [r6, #56]	@ 0x38
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800698a:	f106 0954 	add.w	r9, r6, #84	@ 0x54
 800698e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006992:	4648      	mov	r0, r9
 8006994:	f7fd fe87 	bl	80046a6 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006998:	f017 0f20 	tst.w	r7, #32
 800699c:	d060      	beq.n	8006a60 <f_open+0x388>
 800699e:	6934      	ldr	r4, [r6, #16]
 80069a0:	6977      	ldr	r7, [r6, #20]
 80069a2:	ea54 0307 	orrs.w	r3, r4, r7
 80069a6:	d05b      	beq.n	8006a60 <f_open+0x388>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80069a8:	63b4      	str	r4, [r6, #56]	@ 0x38
 80069aa:	63f7      	str	r7, [r6, #60]	@ 0x3c
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80069ac:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 80069b0:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 80069b4:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80069b8:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80069ba:	e024      	b.n	8006a06 <f_open+0x32e>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80069bc:	f8dd 3478 	ldr.w	r3, [sp, #1144]	@ 0x478
 80069c0:	6233      	str	r3, [r6, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80069c2:	f8dd 3480 	ldr.w	r3, [sp, #1152]	@ 0x480
 80069c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80069ca:	f89d 2477 	ldrb.w	r2, [sp, #1143]	@ 0x477
 80069ce:	4313      	orrs	r3, r2
 80069d0:	6273      	str	r3, [r6, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80069d2:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 80069d6:	62b3      	str	r3, [r6, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80069d8:	6920      	ldr	r0, [r4, #16]
 80069da:	3034      	adds	r0, #52	@ 0x34
 80069dc:	f7fd fe0b 	bl	80045f6 <ld_dword>
 80069e0:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80069e2:	6920      	ldr	r0, [r4, #16]
 80069e4:	3038      	adds	r0, #56	@ 0x38
 80069e6:	f7fd fe11 	bl	800460c <ld_qword>
 80069ea:	e9c6 0104 	strd	r0, r1, [r6, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	71f3      	strb	r3, [r6, #7]
 80069fa:	e7b6      	b.n	800696a <f_open+0x292>
					if (clst <= 1) res = FR_INT_ERR;
 80069fc:	2502      	movs	r5, #2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80069fe:	ebb4 0408 	subs.w	r4, r4, r8
 8006a02:	f167 0700 	sbc.w	r7, r7, #0
 8006a06:	b985      	cbnz	r5, 8006a2a <f_open+0x352>
 8006a08:	46d0      	mov	r8, sl
 8006a0a:	45a2      	cmp	sl, r4
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	41bb      	sbcs	r3, r7
 8006a12:	d20a      	bcs.n	8006a2a <f_open+0x352>
					clst = get_fat(&fp->obj, clst);
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7fe fcf0 	bl	80053fa <get_fat>
 8006a1a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006a1c:	2801      	cmp	r0, #1
 8006a1e:	d9ed      	bls.n	80069fc <f_open+0x324>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a20:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8006a24:	d1eb      	bne.n	80069fe <f_open+0x326>
 8006a26:	2501      	movs	r5, #1
 8006a28:	e7e9      	b.n	80069fe <f_open+0x326>
				fp->clust = clst;
 8006a2a:	6431      	str	r1, [r6, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	f47f ae67 	bne.w	8006700 <f_open+0x28>
 8006a32:	f3c4 0308 	ubfx	r3, r4, #0, #9
 8006a36:	b19b      	cbz	r3, 8006a60 <f_open+0x388>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006a38:	f8dd 846c 	ldr.w	r8, [sp, #1132]	@ 0x46c
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	f7fd ff27 	bl	8004890 <clust2sect>
 8006a42:	b908      	cbnz	r0, 8006a48 <f_open+0x370>
						res = FR_INT_ERR;
 8006a44:	2502      	movs	r5, #2
 8006a46:	e65b      	b.n	8006700 <f_open+0x28>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006a48:	0a64      	lsrs	r4, r4, #9
 8006a4a:	ea44 54c7 	orr.w	r4, r4, r7, lsl #23
 8006a4e:	1822      	adds	r2, r4, r0
 8006a50:	6472      	str	r2, [r6, #68]	@ 0x44
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	4649      	mov	r1, r9
 8006a56:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006a5a:	f7fd fd9d 	bl	8004598 <disk_read>
 8006a5e:	b938      	cbnz	r0, 8006a70 <f_open+0x398>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	f43f ae4f 	beq.w	8006704 <f_open+0x2c>
 8006a66:	e64b      	b.n	8006700 <f_open+0x28>
					res = FR_NO_FILE;
 8006a68:	2504      	movs	r5, #4
 8006a6a:	e649      	b.n	8006700 <f_open+0x28>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006a6c:	2502      	movs	r5, #2
 8006a6e:	e647      	b.n	8006700 <f_open+0x28>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006a70:	2501      	movs	r5, #1
 8006a72:	e645      	b.n	8006700 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
 8006a74:	2509      	movs	r5, #9
 8006a76:	e645      	b.n	8006704 <f_open+0x2c>

08006a78 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	4604      	mov	r4, r0
 8006a80:	460e      	mov	r6, r1
 8006a82:	4615      	mov	r5, r2
 8006a84:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006a8c:	a903      	add	r1, sp, #12
 8006a8e:	f7fe f86d 	bl	8004b6c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a92:	9001      	str	r0, [sp, #4]
 8006a94:	2800      	cmp	r0, #0
 8006a96:	f040 80be 	bne.w	8006c16 <f_read+0x19e>
 8006a9a:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 80b8 	bne.w	8006c16 <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006aa6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006aaa:	f013 0f01 	tst.w	r3, #1
 8006aae:	f000 80d3 	beq.w	8006c58 <f_read+0x1e0>
	remain = fp->obj.objsize - fp->fptr;
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6962      	ldr	r2, [r4, #20]
 8006ab6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006ab8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006aba:	1a1b      	subs	r3, r3, r0
 8006abc:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	f172 0200 	sbcs.w	r2, r2, #0
 8006ac6:	d266      	bcs.n	8006b96 <f_read+0x11e>
 8006ac8:	461d      	mov	r5, r3
 8006aca:	e064      	b.n	8006b96 <f_read+0x11e>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006acc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006ace:	b119      	cbz	r1, 8006ad8 <f_read+0x60>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7fd fee9 	bl	80048a8 <clmt_clust>
 8006ad6:	e072      	b.n	8006bbe <f_read+0x146>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006ad8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7fe fc8d 	bl	80053fa <get_fat>
 8006ae0:	e06d      	b.n	8006bbe <f_read+0x146>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006ae2:	f04f 0a02 	mov.w	sl, #2
 8006ae6:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006aea:	f8cd a004 	str.w	sl, [sp, #4]
 8006aee:	e092      	b.n	8006c16 <f_read+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006af0:	f04f 0a01 	mov.w	sl, #1
 8006af4:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006af8:	f8cd a004 	str.w	sl, [sp, #4]
 8006afc:	e08b      	b.n	8006c16 <f_read+0x19e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006afe:	f04f 0a02 	mov.w	sl, #2
 8006b02:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006b06:	f8cd a004 	str.w	sl, [sp, #4]
 8006b0a:	e084      	b.n	8006c16 <f_read+0x19e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006b0c:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	db02      	blt.n	8006b1a <f_read+0xa2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006b14:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8006b18:	e02f      	b.n	8006b7a <f_read+0x102>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006b1a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8006b1c:	eba0 0009 	sub.w	r0, r0, r9
 8006b20:	4550      	cmp	r0, sl
 8006b22:	d2f7      	bcs.n	8006b14 <f_read+0x9c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b28:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006b2c:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 8006b30:	f7fd fdaf 	bl	8004692 <mem_cpy>
 8006b34:	e7ee      	b.n	8006b14 <f_read+0x9c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006b36:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006b38:	454a      	cmp	r2, r9
 8006b3a:	d00d      	beq.n	8006b58 <f_read+0xe0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006b3c:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	db6c      	blt.n	8006c1e <f_read+0x1a6>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006b44:	2301      	movs	r3, #1
 8006b46:	464a      	mov	r2, r9
 8006b48:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006b4c:	9803      	ldr	r0, [sp, #12]
 8006b4e:	7840      	ldrb	r0, [r0, #1]
 8006b50:	f7fd fd22 	bl	8004598 <disk_read>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d178      	bne.n	8006c4a <f_read+0x1d2>
			}
#endif
			fp->sect = sect;
 8006b58:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	f5c3 7700 	rsb	r7, r3, #512	@ 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006b66:	42bd      	cmp	r5, r7
 8006b68:	d200      	bcs.n	8006b6c <f_read+0xf4>
 8006b6a:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006b6c:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006b70:	463a      	mov	r2, r7
 8006b72:	4419      	add	r1, r3
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7fd fd8c 	bl	8004692 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b7a:	443e      	add	r6, r7
 8006b7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b7e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	f142 0200 	adc.w	r2, r2, #0
 8006b86:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b88:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8006b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b8e:	443b      	add	r3, r7
 8006b90:	f8c8 3000 	str.w	r3, [r8]
 8006b94:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	d03d      	beq.n	8006c16 <f_read+0x19e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006b9a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006b9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b9e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006ba2:	2900      	cmp	r1, #0
 8006ba4:	d1da      	bne.n	8006b5c <f_read+0xe4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ba6:	0a57      	lsrs	r7, r2, #9
 8006ba8:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
 8006bac:	9903      	ldr	r1, [sp, #12]
 8006bae:	8949      	ldrh	r1, [r1, #10]
 8006bb0:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8006bb2:	400f      	ands	r7, r1
 8006bb4:	d109      	bne.n	8006bca <f_read+0x152>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006bb6:	ea52 0103 	orrs.w	r1, r2, r3
 8006bba:	d187      	bne.n	8006acc <f_read+0x54>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006bbc:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006bbe:	2801      	cmp	r0, #1
 8006bc0:	d98f      	bls.n	8006ae2 <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006bc2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8006bc6:	d093      	beq.n	8006af0 <f_read+0x78>
				fp->clust = clst;				/* Update current cluster */
 8006bc8:	6420      	str	r0, [r4, #64]	@ 0x40
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006bca:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006bce:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	f7fd fe5d 	bl	8004890 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006bd6:	4681      	mov	r9, r0
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d090      	beq.n	8006afe <f_read+0x86>
			sect += csect;
 8006bdc:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006bde:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006be2:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006be6:	d3a6      	bcc.n	8006b36 <f_read+0xbe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006be8:	eb07 030a 	add.w	r3, r7, sl
 8006bec:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d901      	bls.n	8006bf8 <f_read+0x180>
					cc = fs->csize - csect;
 8006bf4:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bf8:	4653      	mov	r3, sl
 8006bfa:	464a      	mov	r2, r9
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006c02:	f7fd fcc9 	bl	8004598 <disk_read>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d080      	beq.n	8006b0c <f_read+0x94>
 8006c0a:	f04f 0a01 	mov.w	sl, #1
 8006c0e:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006c12:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006c16:	9801      	ldr	r0, [sp, #4]
 8006c18:	b005      	add	sp, #20
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006c24:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006c28:	f7fd fcc4 	bl	80045b4 <disk_write>
 8006c2c:	b930      	cbnz	r0, 8006c3c <f_read+0x1c4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c2e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c36:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006c3a:	e783      	b.n	8006b44 <f_read+0xcc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c3c:	f04f 0a01 	mov.w	sl, #1
 8006c40:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006c44:	f8cd a004 	str.w	sl, [sp, #4]
 8006c48:	e7e5      	b.n	8006c16 <f_read+0x19e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c4a:	f04f 0a01 	mov.w	sl, #1
 8006c4e:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006c52:	f8cd a004 	str.w	sl, [sp, #4]
 8006c56:	e7de      	b.n	8006c16 <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006c58:	2307      	movs	r3, #7
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	e7db      	b.n	8006c16 <f_read+0x19e>

08006c5e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c62:	b085      	sub	sp, #20
 8006c64:	4604      	mov	r4, r0
 8006c66:	460e      	mov	r6, r1
 8006c68:	4615      	mov	r5, r2
 8006c6a:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006c72:	a903      	add	r1, sp, #12
 8006c74:	f7fd ff7a 	bl	8004b6c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c78:	9001      	str	r0, [sp, #4]
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d151      	bne.n	8006d22 <f_write+0xc4>
 8006c7e:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d14c      	bne.n	8006d22 <f_write+0xc4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006c88:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006c8c:	f013 0f02 	tst.w	r3, #2
 8006c90:	f000 8105 	beq.w	8006e9e <f_write+0x240>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	f000 80cb 	beq.w	8006e34 <f_write+0x1d6>
 8006c9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ca0:	42eb      	cmn	r3, r5
 8006ca2:	f0c0 80c7 	bcc.w	8006e34 <f_write+0x1d6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006ca6:	43dd      	mvns	r5, r3
 8006ca8:	e0c4      	b.n	8006e34 <f_write+0x1d6>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006caa:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006cac:	2900      	cmp	r1, #0
 8006cae:	d03c      	beq.n	8006d2a <f_write+0xcc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7fd fdf9 	bl	80048a8 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f000 80ea 	beq.w	8006e90 <f_write+0x232>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006cbc:	2801      	cmp	r0, #1
 8006cbe:	d039      	beq.n	8006d34 <f_write+0xd6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006cc0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8006cc4:	d03d      	beq.n	8006d42 <f_write+0xe4>
				fp->clust = clst;			/* Update current cluster */
 8006cc6:	6420      	str	r0, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	b903      	cbnz	r3, 8006cce <f_write+0x70>
 8006ccc:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006cce:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db3c      	blt.n	8006d50 <f_write+0xf2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006cd6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006cda:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006cdc:	4658      	mov	r0, fp
 8006cde:	f7fd fdd7 	bl	8004890 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d04a      	beq.n	8006d7e <f_write+0x120>
			sect += csect;
 8006ce8:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006cea:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006cee:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006cf2:	d362      	bcc.n	8006dba <f_write+0x15c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006cf4:	eb07 030a 	add.w	r3, r7, sl
 8006cf8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <f_write+0xa6>
					cc = fs->csize - csect;
 8006d00:	eba2 0a07 	sub.w	sl, r2, r7
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d04:	4653      	mov	r3, sl
 8006d06:	464a      	mov	r2, r9
 8006d08:	4631      	mov	r1, r6
 8006d0a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006d0e:	f7fd fc51 	bl	80045b4 <disk_write>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d03a      	beq.n	8006d8c <f_write+0x12e>
 8006d16:	f04f 0a01 	mov.w	sl, #1
 8006d1a:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006d1e:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8006d22:	9801      	ldr	r0, [sp, #4]
 8006d24:	b005      	add	sp, #20
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006d2a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7fe fc76 	bl	800561e <create_chain>
 8006d32:	e7c0      	b.n	8006cb6 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006d34:	f04f 0a02 	mov.w	sl, #2
 8006d38:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006d3c:	f8cd a004 	str.w	sl, [sp, #4]
 8006d40:	e7ef      	b.n	8006d22 <f_write+0xc4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d42:	f04f 0a01 	mov.w	sl, #1
 8006d46:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006d4a:	f8cd a004 	str.w	sl, [sp, #4]
 8006d4e:	e7e8      	b.n	8006d22 <f_write+0xc4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d50:	2301      	movs	r3, #1
 8006d52:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006d54:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006d58:	9803      	ldr	r0, [sp, #12]
 8006d5a:	7840      	ldrb	r0, [r0, #1]
 8006d5c:	f7fd fc2a 	bl	80045b4 <disk_write>
 8006d60:	b930      	cbnz	r0, 8006d70 <f_write+0x112>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d62:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d6a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006d6e:	e7b2      	b.n	8006cd6 <f_write+0x78>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d70:	f04f 0a01 	mov.w	sl, #1
 8006d74:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006d78:	f8cd a004 	str.w	sl, [sp, #4]
 8006d7c:	e7d1      	b.n	8006d22 <f_write+0xc4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d7e:	f04f 0a02 	mov.w	sl, #2
 8006d82:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006d86:	f8cd a004 	str.w	sl, [sp, #4]
 8006d8a:	e7ca      	b.n	8006d22 <f_write+0xc4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006d8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006d8e:	eba1 0109 	sub.w	r1, r1, r9
 8006d92:	4551      	cmp	r1, sl
 8006d94:	d302      	bcc.n	8006d9c <f_write+0x13e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006d96:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8006d9a:	e02f      	b.n	8006dfc <f_write+0x19e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006da0:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 8006da4:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8006da8:	f7fd fc73 	bl	8004692 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006dac:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006db8:	e7ed      	b.n	8006d96 <f_write+0x138>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006dba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006dbc:	454b      	cmp	r3, r9
 8006dbe:	d006      	beq.n	8006dce <f_write+0x170>
				fp->fptr < fp->obj.objsize &&
 8006dc0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006dc2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006dc4:	6921      	ldr	r1, [r4, #16]
 8006dc6:	6962      	ldr	r2, [r4, #20]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006dc8:	4288      	cmp	r0, r1
 8006dca:	4193      	sbcs	r3, r2
 8006dcc:	d34f      	bcc.n	8006e6e <f_write+0x210>
			fp->sect = sect;
 8006dce:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006dd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd8:	f5c3 7700 	rsb	r7, r3, #512	@ 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006ddc:	42bd      	cmp	r5, r7
 8006dde:	d200      	bcs.n	8006de2 <f_write+0x184>
 8006de0:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006de2:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8006de6:	463a      	mov	r2, r7
 8006de8:	4631      	mov	r1, r6
 8006dea:	4418      	add	r0, r3
 8006dec:	f7fd fc51 	bl	8004692 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006df0:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006df4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006df8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006dfc:	443e      	add	r6, r7
 8006dfe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006e02:	18ba      	adds	r2, r7, r2
 8006e04:	f143 0300 	adc.w	r3, r3, #0
 8006e08:	63a2      	str	r2, [r4, #56]	@ 0x38
 8006e0a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006e0c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006e10:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	4572      	cmp	r2, lr
 8006e1a:	eb73 030c 	sbcs.w	r3, r3, ip
 8006e1e:	d201      	bcs.n	8006e24 <f_write+0x1c6>
 8006e20:	4670      	mov	r0, lr
 8006e22:	4661      	mov	r1, ip
 8006e24:	6120      	str	r0, [r4, #16]
 8006e26:	6161      	str	r1, [r4, #20]
 8006e28:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2c:	443b      	add	r3, r7
 8006e2e:	f8c8 3000 	str.w	r3, [r8]
 8006e32:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 8006e34:	b365      	cbz	r5, 8006e90 <f_write+0x232>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006e36:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006e3a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d1c7      	bne.n	8006dd2 <f_write+0x174>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006e42:	0a57      	lsrs	r7, r2, #9
 8006e44:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
 8006e48:	9903      	ldr	r1, [sp, #12]
 8006e4a:	8949      	ldrh	r1, [r1, #10]
 8006e4c:	3901      	subs	r1, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006e4e:	400f      	ands	r7, r1
 8006e50:	f47f af3d 	bne.w	8006cce <f_write+0x70>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006e54:	ea52 0103 	orrs.w	r1, r2, r3
 8006e58:	f47f af27 	bne.w	8006caa <f_write+0x4c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006e5c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f47f af2c 	bne.w	8006cbc <f_write+0x5e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006e64:	2100      	movs	r1, #0
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fe fbd9 	bl	800561e <create_chain>
 8006e6c:	e723      	b.n	8006cb6 <f_write+0x58>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006e6e:	2301      	movs	r3, #1
 8006e70:	464a      	mov	r2, r9
 8006e72:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006e76:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006e7a:	f7fd fb8d 	bl	8004598 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d0a5      	beq.n	8006dce <f_write+0x170>
					ABORT(fs, FR_DISK_ERR);
 8006e82:	f04f 0a01 	mov.w	sl, #1
 8006e86:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
 8006e8a:	f8cd a004 	str.w	sl, [sp, #4]
 8006e8e:	e748      	b.n	8006d22 <f_write+0xc4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006e90:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e98:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	LEAVE_FF(fs, FR_OK);
 8006e9c:	e741      	b.n	8006d22 <f_write+0xc4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006e9e:	2307      	movs	r3, #7
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	e73e      	b.n	8006d22 <f_write+0xc4>

08006ea4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 8006eaa:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006eac:	f20d 41bc 	addw	r1, sp, #1212	@ 0x4bc
 8006eb0:	f7fd fe5c 	bl	8004b6c <validate>
	if (res == FR_OK) {
 8006eb4:	b9a0      	cbnz	r0, 8006ee0 <f_sync+0x3c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006eb6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006eba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006ebe:	d00f      	beq.n	8006ee0 <f_sync+0x3c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ec4:	d10f      	bne.n	8006ee6 <f_sync+0x42>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006ec6:	f7fd f9dd 	bl	8004284 <get_fattime>
 8006eca:	4605      	mov	r5, r0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006ecc:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	@ 0x4bc
 8006ed0:	7803      	ldrb	r3, [r0, #0]
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d01a      	beq.n	8006f0c <f_sync+0x68>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ed6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ed8:	f7fd fe95 	bl	8004c06 <move_window>
				if (res == FR_OK) {
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d072      	beq.n	8006fc6 <f_sync+0x122>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8006ee0:	f50d 6d98 	add.w	sp, sp, #1216	@ 0x4c0
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006eea:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006eee:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	@ 0x4bc
 8006ef2:	7840      	ldrb	r0, [r0, #1]
 8006ef4:	f7fd fb5e 	bl	80045b4 <disk_write>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f040 808c 	bne.w	8007016 <f_sync+0x172>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006efe:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f06:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006f0a:	e7dc      	b.n	8006ec6 <f_sync+0x22>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7fe fa5b 	bl	80053c8 <fill_first_frag>
				if (res == FR_OK) {
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d1e4      	bne.n	8006ee0 <f_sync+0x3c>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f1a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7fe fa3b 	bl	8005398 <fill_last_frag>
				if (res == FR_OK) {
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d1dc      	bne.n	8006ee0 <f_sync+0x3c>
					INIT_NAMBUF(fs);
 8006f26:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006f2a:	aa98      	add	r2, sp, #608	@ 0x260
 8006f2c:	60da      	str	r2, [r3, #12]
 8006f2e:	f8c3 d010 	str.w	sp, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8006f32:	4621      	mov	r1, r4
 8006f34:	f50d 608c 	add.w	r0, sp, #1120	@ 0x460
 8006f38:	f7fe fdba 	bl	8005ab0 <load_obj_dir>
					if (res == FR_OK) {
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1cf      	bne.n	8006ee0 <f_sync+0x3c>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8006f40:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006f44:	6919      	ldr	r1, [r3, #16]
 8006f46:	790a      	ldrb	r2, [r1, #4]
 8006f48:	f042 0220 	orr.w	r2, r2, #32
 8006f4c:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8006f4e:	79e2      	ldrb	r2, [r4, #7]
 8006f50:	6919      	ldr	r1, [r3, #16]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	f881 2021 	strb.w	r2, [r1, #33]	@ 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8006f5a:	6918      	ldr	r0, [r3, #16]
 8006f5c:	68a1      	ldr	r1, [r4, #8]
 8006f5e:	3034      	adds	r0, #52	@ 0x34
 8006f60:	f7fd fb7a 	bl	8004658 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8006f64:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006f68:	6918      	ldr	r0, [r3, #16]
 8006f6a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006f6e:	3038      	adds	r0, #56	@ 0x38
 8006f70:	f7fd fb7c 	bl	800466c <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8006f74:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006f78:	6918      	ldr	r0, [r3, #16]
 8006f7a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006f7e:	3028      	adds	r0, #40	@ 0x28
 8006f80:	f7fd fb74 	bl	800466c <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8006f84:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006f88:	6918      	ldr	r0, [r3, #16]
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	300c      	adds	r0, #12
 8006f8e:	f7fd fb63 	bl	8004658 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8006f92:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8006f9c:	6918      	ldr	r0, [r3, #16]
 8006f9e:	3010      	adds	r0, #16
 8006fa0:	f7fd fb5a 	bl	8004658 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8006fa4:	f50d 608c 	add.w	r0, sp, #1120	@ 0x460
 8006fa8:	f7fe fe44 	bl	8005c34 <store_xdir>
						if (res == FR_OK) {
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d197      	bne.n	8006ee0 <f_sync+0x3c>
							res = sync_fs(fs);
 8006fb0:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	@ 0x4bc
 8006fb4:	f7ff fb1c 	bl	80065f0 <sync_fs>
							fp->flag &= (BYTE)~FA_MODIFIED;
 8006fb8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006fc4:	e78c      	b.n	8006ee0 <f_sync+0x3c>
					dir = fp->dir_ptr;
 8006fc6:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006fc8:	7af3      	ldrb	r3, [r6, #11]
 8006fca:	f043 0320 	orr.w	r3, r3, #32
 8006fce:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006fd0:	68a2      	ldr	r2, [r4, #8]
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	f7fd fc92 	bl	80048fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006fda:	6921      	ldr	r1, [r4, #16]
 8006fdc:	f106 001c 	add.w	r0, r6, #28
 8006fe0:	f7fd fb3a 	bl	8004658 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f106 0016 	add.w	r0, r6, #22
 8006fea:	f7fd fb35 	bl	8004658 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006fee:	2100      	movs	r1, #0
 8006ff0:	f106 0012 	add.w	r0, r6, #18
 8006ff4:	f7fd fb2c 	bl	8004650 <st_word>
					fs->wflag = 1;
 8006ff8:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	@ 0x4bc
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007000:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	@ 0x4bc
 8007004:	f7ff faf4 	bl	80065f0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007008:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800700c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007010:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8007014:	e764      	b.n	8006ee0 <f_sync+0x3c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007016:	2001      	movs	r0, #1
 8007018:	e762      	b.n	8006ee0 <f_sync+0x3c>

0800701a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800701a:	b510      	push	{r4, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007020:	f7ff ff40 	bl	8006ea4 <f_sync>
	if (res == FR_OK)
 8007024:	b108      	cbz	r0, 800702a <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007026:	b002      	add	sp, #8
 8007028:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800702a:	a901      	add	r1, sp, #4
 800702c:	4620      	mov	r0, r4
 800702e:	f7fd fd9d 	bl	8004b6c <validate>
		if (res == FR_OK) {
 8007032:	2800      	cmp	r0, #0
 8007034:	d1f7      	bne.n	8007026 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007036:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007038:	f7fd fbec 	bl	8004814 <dec_lock>
			if (res == FR_OK)
 800703c:	2800      	cmp	r0, #0
 800703e:	d1f2      	bne.n	8007026 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8007040:	6020      	str	r0, [r4, #0]
 8007042:	e7f0      	b.n	8007026 <f_close+0xc>

08007044 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007044:	b530      	push	{r4, r5, lr}
 8007046:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 800704a:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800704c:	2800      	cmp	r0, #0
 800704e:	d069      	beq.n	8007124 <f_opendir+0xe0>
 8007050:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8007052:	2200      	movs	r2, #0
 8007054:	f20d 416c 	addw	r1, sp, #1132	@ 0x46c
 8007058:	a801      	add	r0, sp, #4
 800705a:	f7fd fe35 	bl	8004cc8 <find_volume>
	if (res == FR_OK) {
 800705e:	4605      	mov	r5, r0
 8007060:	b128      	cbz	r0, 800706e <f_opendir+0x2a>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007062:	2300      	movs	r3, #0
 8007064:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8007066:	4628      	mov	r0, r5
 8007068:	f20d 4d74 	addw	sp, sp, #1140	@ 0x474
 800706c:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800706e:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 8007072:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 8007074:	aa9b      	add	r2, sp, #620	@ 0x26c
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	aa03      	add	r2, sp, #12
 800707a:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800707c:	9901      	ldr	r1, [sp, #4]
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff f951 	bl	8006326 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8007084:	4605      	mov	r5, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d145      	bne.n	8007116 <f_opendir+0xd2>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800708a:	f994 304b 	ldrsb.w	r3, [r4, #75]	@ 0x4b
 800708e:	2b00      	cmp	r3, #0
 8007090:	db0d      	blt.n	80070ae <f_opendir+0x6a>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007092:	79a3      	ldrb	r3, [r4, #6]
 8007094:	f013 0f10 	tst.w	r3, #16
 8007098:	d03c      	beq.n	8007114 <f_opendir+0xd0>
					if (fs->fs_type == FS_EXFAT) {
 800709a:	f8dd 546c 	ldr.w	r5, [sp, #1132]	@ 0x46c
 800709e:	782b      	ldrb	r3, [r5, #0]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d013      	beq.n	80070cc <f_opendir+0x88>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80070a4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80070a6:	4628      	mov	r0, r5
 80070a8:	f7fd fc16 	bl	80048d8 <ld_clust>
 80070ac:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 80070ae:	f8dd 346c 	ldr.w	r3, [sp, #1132]	@ 0x46c
 80070b2:	88db      	ldrh	r3, [r3, #6]
 80070b4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80070b6:	2100      	movs	r1, #0
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7fe fa50 	bl	800555e <dir_sdi>
				if (res == FR_OK) {
 80070be:	4605      	mov	r5, r0
 80070c0:	bb48      	cbnz	r0, 8007116 <f_opendir+0xd2>
					if (obj->sclust) {
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	b9f3      	cbnz	r3, 8007104 <f_opendir+0xc0>
						obj->lockid = 0;	/* Root directory need not to be locked */
 80070c6:	2300      	movs	r3, #0
 80070c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070ca:	e024      	b.n	8007116 <f_opendir+0xd2>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070d6:	79e2      	ldrb	r2, [r4, #7]
 80070d8:	4313      	orrs	r3, r2
 80070da:	6263      	str	r3, [r4, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 80070dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80070de:	62a3      	str	r3, [r4, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80070e0:	6928      	ldr	r0, [r5, #16]
 80070e2:	3034      	adds	r0, #52	@ 0x34
 80070e4:	f7fd fa87 	bl	80045f6 <ld_dword>
 80070e8:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80070ea:	6928      	ldr	r0, [r5, #16]
 80070ec:	3038      	adds	r0, #56	@ 0x38
 80070ee:	f7fd fa8d 	bl	800460c <ld_qword>
 80070f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80070f6:	692b      	ldr	r3, [r5, #16]
 80070f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	71e3      	strb	r3, [r4, #7]
 8007102:	e7d4      	b.n	80070ae <f_opendir+0x6a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007104:	2100      	movs	r1, #0
 8007106:	4620      	mov	r0, r4
 8007108:	f7fd fb32 	bl	8004770 <inc_lock>
 800710c:	62e0      	str	r0, [r4, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800710e:	b910      	cbnz	r0, 8007116 <f_opendir+0xd2>
 8007110:	2512      	movs	r5, #18
 8007112:	e002      	b.n	800711a <f_opendir+0xd6>
					res = FR_NO_PATH;
 8007114:	2505      	movs	r5, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007116:	2d04      	cmp	r5, #4
 8007118:	d002      	beq.n	8007120 <f_opendir+0xdc>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800711a:	2d00      	cmp	r5, #0
 800711c:	d0a3      	beq.n	8007066 <f_opendir+0x22>
 800711e:	e7a0      	b.n	8007062 <f_opendir+0x1e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007120:	2505      	movs	r5, #5
 8007122:	e79e      	b.n	8007062 <f_opendir+0x1e>
	if (!dp) return FR_INVALID_OBJECT;
 8007124:	2509      	movs	r5, #9
 8007126:	e79e      	b.n	8007066 <f_opendir+0x22>

08007128 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 800712e:	4605      	mov	r5, r0
 8007130:	460c      	mov	r4, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007132:	f20d 4164 	addw	r1, sp, #1124	@ 0x464
 8007136:	f7fd fd19 	bl	8004b6c <validate>
	if (res == FR_OK) {
 800713a:	4606      	mov	r6, r0
 800713c:	b9f0      	cbnz	r0, 800717c <f_readdir+0x54>
		if (!fno) {
 800713e:	b1c4      	cbz	r4, 8007172 <f_readdir+0x4a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 8007140:	f8dd 3464 	ldr.w	r3, [sp, #1124]	@ 0x464
 8007144:	aa99      	add	r2, sp, #612	@ 0x264
 8007146:	60da      	str	r2, [r3, #12]
 8007148:	aa01      	add	r2, sp, #4
 800714a:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800714c:	2100      	movs	r1, #0
 800714e:	4628      	mov	r0, r5
 8007150:	f7fe fcc7 	bl	8005ae2 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007154:	2804      	cmp	r0, #4
 8007156:	d000      	beq.n	800715a <f_readdir+0x32>
			if (res == FR_OK) {				/* A valid entry is found */
 8007158:	b9a0      	cbnz	r0, 8007184 <f_readdir+0x5c>
				get_fileinfo(dp, fno);		/* Get the object information */
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f7fe fefc 	bl	8005f5a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007162:	2100      	movs	r1, #0
 8007164:	4628      	mov	r0, r5
 8007166:	f7fe fb9a 	bl	800589e <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800716a:	2804      	cmp	r0, #4
 800716c:	d006      	beq.n	800717c <f_readdir+0x54>
				res = dir_next(dp, 0);		/* Increment index for next */
 800716e:	4606      	mov	r6, r0
 8007170:	e004      	b.n	800717c <f_readdir+0x54>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007172:	2100      	movs	r1, #0
 8007174:	4628      	mov	r0, r5
 8007176:	f7fe f9f2 	bl	800555e <dir_sdi>
 800717a:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800717c:	4630      	mov	r0, r6
 800717e:	f50d 6d8d 	add.w	sp, sp, #1128	@ 0x468
 8007182:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 8007184:	4606      	mov	r6, r0
 8007186:	e7f9      	b.n	800717c <f_readdir+0x54>

08007188 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800718c:	b090      	sub	sp, #64	@ 0x40
 800718e:	9001      	str	r0, [sp, #4]
 8007190:	460f      	mov	r7, r1
 8007192:	4614      	mov	r4, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007194:	2200      	movs	r2, #0
 8007196:	a90f      	add	r1, sp, #60	@ 0x3c
 8007198:	a801      	add	r0, sp, #4
 800719a:	f7fd fd95 	bl	8004cc8 <find_volume>
	if (res == FR_OK) {
 800719e:	4680      	mov	r8, r0
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f040 8084 	bne.w	80072ae <f_getfree+0x126>
		*fatfs = fs;				/* Return ptr to the fs object */
 80071a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071a8:	6023      	str	r3, [r4, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	69de      	ldr	r6, [r3, #28]
 80071ae:	1eb4      	subs	r4, r6, #2
 80071b0:	42a2      	cmp	r2, r4
 80071b2:	d801      	bhi.n	80071b8 <f_getfree+0x30>
			*nclst = fs->free_clst;
 80071b4:	603a      	str	r2, [r7, #0]
 80071b6:	e07a      	b.n	80072ae <f_getfree+0x126>
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80071b8:	f893 9000 	ldrb.w	r9, [r3]
 80071bc:	f1b9 0f01 	cmp.w	r9, #1
 80071c0:	d008      	beq.n	80071d4 <f_getfree+0x4c>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 80071c2:	f1b9 0f04 	cmp.w	r9, #4
 80071c6:	d01b      	beq.n	8007200 <f_getfree+0x78>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80071c8:	f8d3 a028 	ldr.w	sl, [r3, #40]	@ 0x28
					i = 0; p = 0;
 80071cc:	2400      	movs	r4, #0
 80071ce:	46a1      	mov	r9, r4
			nfree = 0;
 80071d0:	4625      	mov	r5, r4
 80071d2:	e055      	b.n	8007280 <f_getfree+0xf8>
				clst = 2; obj.fs = fs;
 80071d4:	9302      	str	r3, [sp, #8]
 80071d6:	2402      	movs	r4, #2
			nfree = 0;
 80071d8:	2500      	movs	r5, #0
 80071da:	e004      	b.n	80071e6 <f_getfree+0x5e>
				} while (++clst < fs->n_fatent);
 80071dc:	3401      	adds	r4, #1
 80071de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	42a3      	cmp	r3, r4
 80071e4:	d95c      	bls.n	80072a0 <f_getfree+0x118>
					stat = get_fat(&obj, clst);
 80071e6:	4621      	mov	r1, r4
 80071e8:	a802      	add	r0, sp, #8
 80071ea:	f7fe f906 	bl	80053fa <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80071ee:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80071f2:	d054      	beq.n	800729e <f_getfree+0x116>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80071f4:	2801      	cmp	r0, #1
 80071f6:	d05e      	beq.n	80072b6 <f_getfree+0x12e>
					if (stat == 0) nfree++;
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d1ef      	bne.n	80071dc <f_getfree+0x54>
 80071fc:	3501      	adds	r5, #1
 80071fe:	e7ed      	b.n	80071dc <f_getfree+0x54>
					sect = fs->database;
 8007200:	6b19      	ldr	r1, [r3, #48]	@ 0x30
					i = 0;
 8007202:	2600      	movs	r6, #0
			nfree = 0;
 8007204:	4635      	mov	r5, r6
 8007206:	e017      	b.n	8007238 <f_getfree+0xb0>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8007208:	f101 0901 	add.w	r9, r1, #1
 800720c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800720e:	f7fd fcfa 	bl	8004c06 <move_window>
 8007212:	4680      	mov	r8, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d143      	bne.n	80072a0 <f_getfree+0x118>
 8007218:	4649      	mov	r1, r9
 800721a:	e00f      	b.n	800723c <f_getfree+0xb4>
							bm >>= 1;
 800721c:	0852      	lsrs	r2, r2, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800721e:	3b01      	subs	r3, #1
 8007220:	3c01      	subs	r4, #1
 8007222:	b12b      	cbz	r3, 8007230 <f_getfree+0xa8>
 8007224:	b124      	cbz	r4, 8007230 <f_getfree+0xa8>
							if (!(bm & 1)) nfree++;
 8007226:	f012 0f01 	tst.w	r2, #1
 800722a:	d1f7      	bne.n	800721c <f_getfree+0x94>
 800722c:	3501      	adds	r5, #1
 800722e:	e7f5      	b.n	800721c <f_getfree+0x94>
						i = (i + 1) % SS(fs);
 8007230:	3601      	adds	r6, #1
 8007232:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (clst);
 8007236:	b39c      	cbz	r4, 80072a0 <f_getfree+0x118>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8007238:	2e00      	cmp	r6, #0
 800723a:	d0e5      	beq.n	8007208 <f_getfree+0x80>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800723c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800723e:	4433      	add	r3, r6
 8007240:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8007244:	2308      	movs	r3, #8
 8007246:	e7ec      	b.n	8007222 <f_getfree+0x9a>
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
 8007248:	f10a 0901 	add.w	r9, sl, #1
 800724c:	4651      	mov	r1, sl
 800724e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007250:	f7fd fcd9 	bl	8004c06 <move_window>
							if (res != FR_OK) break;
 8007254:	4680      	mov	r8, r0
 8007256:	bb18      	cbnz	r0, 80072a0 <f_getfree+0x118>
							p = fs->win;
 8007258:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800725a:	3438      	adds	r4, #56	@ 0x38
							res = move_window(fs, sect++);
 800725c:	46ca      	mov	sl, r9
							i = SS(fs);
 800725e:	f44f 7900 	mov.w	r9, #512	@ 0x200
 8007262:	e010      	b.n	8007286 <f_getfree+0xfe>
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
 8007264:	4620      	mov	r0, r4
 8007266:	f7fd f9c1 	bl	80045ec <ld_word>
 800726a:	b900      	cbnz	r0, 800726e <f_getfree+0xe6>
 800726c:	3501      	adds	r5, #1
							p += 2; i -= 2;
 800726e:	3402      	adds	r4, #2
 8007270:	f1a9 0902 	sub.w	r9, r9, #2
 8007274:	e002      	b.n	800727c <f_getfree+0xf4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
							p += 4; i -= 4;
 8007276:	3404      	adds	r4, #4
 8007278:	f1a9 0904 	sub.w	r9, r9, #4
						}
					} while (--clst);
 800727c:	3e01      	subs	r6, #1
 800727e:	d00f      	beq.n	80072a0 <f_getfree+0x118>
						if (i == 0) {
 8007280:	f1b9 0f00 	cmp.w	r9, #0
 8007284:	d0e0      	beq.n	8007248 <f_getfree+0xc0>
						if (fs->fs_type == FS_FAT16) {
 8007286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d0ea      	beq.n	8007264 <f_getfree+0xdc>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800728e:	4620      	mov	r0, r4
 8007290:	f7fd f9b1 	bl	80045f6 <ld_dword>
 8007294:	f030 4370 	bics.w	r3, r0, #4026531840	@ 0xf0000000
 8007298:	d1ed      	bne.n	8007276 <f_getfree+0xee>
 800729a:	3501      	adds	r5, #1
 800729c:	e7eb      	b.n	8007276 <f_getfree+0xee>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800729e:	46c8      	mov	r8, r9
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80072a0:	603d      	str	r5, [r7, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80072a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072a4:	619d      	str	r5, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80072a6:	791a      	ldrb	r2, [r3, #4]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
}
 80072ae:	4640      	mov	r0, r8
 80072b0:	b010      	add	sp, #64	@ 0x40
 80072b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 80072b6:	f04f 0802 	mov.w	r8, #2
 80072ba:	e7f1      	b.n	80072a0 <f_getfree+0x118>

080072bc <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80072bc:	4b16      	ldr	r3, [pc, #88]	@ (8007318 <FATFS_LinkDriverEx+0x5c>)
 80072be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b07      	cmp	r3, #7
 80072c6:	d824      	bhi.n	8007312 <FATFS_LinkDriverEx+0x56>
{
 80072c8:	b410      	push	{r4}
 80072ca:	4604      	mov	r4, r0
  {
    disk.is_initialized[disk.nbr] = 0;
 80072cc:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <FATFS_LinkDriverEx+0x5c>)
 80072ce:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 80072d2:	fa5f fc8c 	uxtb.w	ip, ip
 80072d6:	2000      	movs	r0, #0
 80072d8:	f803 000c 	strb.w	r0, [r3, ip]
    disk.drv[disk.nbr] = drv;
 80072dc:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 80072e0:	f10c 0c02 	add.w	ip, ip, #2
 80072e4:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
    disk.lun[disk.nbr] = lun;
 80072e8:	f893 4030 	ldrb.w	r4, [r3, #48]	@ 0x30
 80072ec:	441c      	add	r4, r3
 80072ee:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
    DiskNum = disk.nbr++;
 80072f2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80072f6:	1c54      	adds	r4, r2, #1
 80072f8:	b2e4      	uxtb	r4, r4
 80072fa:	f883 4030 	strb.w	r4, [r3, #48]	@ 0x30
    path[0] = DiskNum + '0';
 80072fe:	3230      	adds	r2, #48	@ 0x30
 8007300:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007302:	233a      	movs	r3, #58	@ 0x3a
 8007304:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007306:	232f      	movs	r3, #47	@ 0x2f
 8007308:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800730a:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800730c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007310:	4770      	bx	lr
  uint8_t ret = 1;
 8007312:	2001      	movs	r0, #1
}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000874 	.word	0x20000874

0800731c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800731c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800731e:	2200      	movs	r2, #0
 8007320:	f7ff ffcc 	bl	80072bc <FATFS_LinkDriverEx>
}
 8007324:	bd08      	pop	{r3, pc}
	...

08007328 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007328:	287f      	cmp	r0, #127	@ 0x7f
 800732a:	d917      	bls.n	800735c <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800732c:	b131      	cbz	r1, 800733c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800732e:	28ff      	cmp	r0, #255	@ 0xff
 8007330:	d813      	bhi.n	800735a <ff_convert+0x32>
 8007332:	3880      	subs	r0, #128	@ 0x80
 8007334:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <ff_convert+0x38>)
 8007336:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800733a:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800733c:	2300      	movs	r3, #0
 800733e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007340:	d807      	bhi.n	8007352 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8007342:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <ff_convert+0x38>)
 8007344:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007348:	4282      	cmp	r2, r0
 800734a:	d002      	beq.n	8007352 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800734c:	3301      	adds	r3, #1
 800734e:	b29b      	uxth	r3, r3
 8007350:	e7f5      	b.n	800733e <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8007352:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8007356:	b2c0      	uxtb	r0, r0
 8007358:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800735a:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	0800a75c 	.word	0x0800a75c

08007364 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007364:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8007368:	d207      	bcs.n	800737a <ff_wtoupper+0x16>
 800736a:	4b23      	ldr	r3, [pc, #140]	@ (80073f8 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800736c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800736e:	2a00      	cmp	r2, #0
 8007370:	d041      	beq.n	80073f6 <ff_wtoupper+0x92>
 8007372:	4290      	cmp	r0, r2
 8007374:	d33f      	bcc.n	80073f6 <ff_wtoupper+0x92>
{
 8007376:	b510      	push	{r4, lr}
 8007378:	e006      	b.n	8007388 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800737a:	4b20      	ldr	r3, [pc, #128]	@ (80073fc <ff_wtoupper+0x98>)
 800737c:	e7f6      	b.n	800736c <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800737e:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 8007380:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8007382:	b1da      	cbz	r2, 80073bc <ff_wtoupper+0x58>
 8007384:	4290      	cmp	r0, r2
 8007386:	d319      	bcc.n	80073bc <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007388:	f103 0e04 	add.w	lr, r3, #4
 800738c:	885b      	ldrh	r3, [r3, #2]
 800738e:	0a19      	lsrs	r1, r3, #8
 8007390:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8007392:	eb03 0c02 	add.w	ip, r3, r2
 8007396:	4560      	cmp	r0, ip
 8007398:	db04      	blt.n	80073a4 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800739a:	2900      	cmp	r1, #0
 800739c:	d1ef      	bne.n	800737e <ff_wtoupper+0x1a>
 800739e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80073a2:	e7ed      	b.n	8007380 <ff_wtoupper+0x1c>
			switch (cmd) {
 80073a4:	2908      	cmp	r1, #8
 80073a6:	d809      	bhi.n	80073bc <ff_wtoupper+0x58>
 80073a8:	e8df f001 	tbb	[pc, r1]
 80073ac:	120f0905 	.word	0x120f0905
 80073b0:	1e1b1815 	.word	0x1e1b1815
 80073b4:	21          	.byte	0x21
 80073b5:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80073b6:	1a84      	subs	r4, r0, r2
 80073b8:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 80073bc:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80073be:	1a83      	subs	r3, r0, r2
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	1ac0      	subs	r0, r0, r3
 80073c6:	b280      	uxth	r0, r0
 80073c8:	e7f8      	b.n	80073bc <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 80073ca:	3810      	subs	r0, #16
 80073cc:	b280      	uxth	r0, r0
 80073ce:	e7f5      	b.n	80073bc <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80073d0:	3820      	subs	r0, #32
 80073d2:	b280      	uxth	r0, r0
 80073d4:	e7f2      	b.n	80073bc <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80073d6:	3830      	subs	r0, #48	@ 0x30
 80073d8:	b280      	uxth	r0, r0
 80073da:	e7ef      	b.n	80073bc <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80073dc:	381a      	subs	r0, #26
 80073de:	b280      	uxth	r0, r0
 80073e0:	e7ec      	b.n	80073bc <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 80073e2:	3008      	adds	r0, #8
 80073e4:	b280      	uxth	r0, r0
 80073e6:	e7e9      	b.n	80073bc <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 80073e8:	3850      	subs	r0, #80	@ 0x50
 80073ea:	b280      	uxth	r0, r0
 80073ec:	e7e6      	b.n	80073bc <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80073ee:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 80073f2:	b280      	uxth	r0, r0
 80073f4:	e7e2      	b.n	80073bc <ff_wtoupper+0x58>
}
 80073f6:	4770      	bx	lr
 80073f8:	0800a568 	.word	0x0800a568
 80073fc:	0800a4ac 	.word	0x0800a4ac

08007400 <__cvt>:
 8007400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007404:	ec57 6b10 	vmov	r6, r7, d0
 8007408:	2f00      	cmp	r7, #0
 800740a:	460c      	mov	r4, r1
 800740c:	4619      	mov	r1, r3
 800740e:	463b      	mov	r3, r7
 8007410:	bfbb      	ittet	lt
 8007412:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007416:	461f      	movlt	r7, r3
 8007418:	2300      	movge	r3, #0
 800741a:	232d      	movlt	r3, #45	@ 0x2d
 800741c:	700b      	strb	r3, [r1, #0]
 800741e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007420:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007424:	4691      	mov	r9, r2
 8007426:	f023 0820 	bic.w	r8, r3, #32
 800742a:	bfbc      	itt	lt
 800742c:	4632      	movlt	r2, r6
 800742e:	4616      	movlt	r6, r2
 8007430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007434:	d005      	beq.n	8007442 <__cvt+0x42>
 8007436:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800743a:	d100      	bne.n	800743e <__cvt+0x3e>
 800743c:	3401      	adds	r4, #1
 800743e:	2102      	movs	r1, #2
 8007440:	e000      	b.n	8007444 <__cvt+0x44>
 8007442:	2103      	movs	r1, #3
 8007444:	ab03      	add	r3, sp, #12
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	ab02      	add	r3, sp, #8
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	ec47 6b10 	vmov	d0, r6, r7
 8007450:	4653      	mov	r3, sl
 8007452:	4622      	mov	r2, r4
 8007454:	f000 ff60 	bl	8008318 <_dtoa_r>
 8007458:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800745c:	4605      	mov	r5, r0
 800745e:	d119      	bne.n	8007494 <__cvt+0x94>
 8007460:	f019 0f01 	tst.w	r9, #1
 8007464:	d00e      	beq.n	8007484 <__cvt+0x84>
 8007466:	eb00 0904 	add.w	r9, r0, r4
 800746a:	2200      	movs	r2, #0
 800746c:	2300      	movs	r3, #0
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f9 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007476:	b108      	cbz	r0, 800747c <__cvt+0x7c>
 8007478:	f8cd 900c 	str.w	r9, [sp, #12]
 800747c:	2230      	movs	r2, #48	@ 0x30
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	454b      	cmp	r3, r9
 8007482:	d31e      	bcc.n	80074c2 <__cvt+0xc2>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007488:	1b5b      	subs	r3, r3, r5
 800748a:	4628      	mov	r0, r5
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	b004      	add	sp, #16
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007498:	eb00 0904 	add.w	r9, r0, r4
 800749c:	d1e5      	bne.n	800746a <__cvt+0x6a>
 800749e:	7803      	ldrb	r3, [r0, #0]
 80074a0:	2b30      	cmp	r3, #48	@ 0x30
 80074a2:	d10a      	bne.n	80074ba <__cvt+0xba>
 80074a4:	2200      	movs	r2, #0
 80074a6:	2300      	movs	r3, #0
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80074b0:	b918      	cbnz	r0, 80074ba <__cvt+0xba>
 80074b2:	f1c4 0401 	rsb	r4, r4, #1
 80074b6:	f8ca 4000 	str.w	r4, [sl]
 80074ba:	f8da 3000 	ldr.w	r3, [sl]
 80074be:	4499      	add	r9, r3
 80074c0:	e7d3      	b.n	800746a <__cvt+0x6a>
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	9103      	str	r1, [sp, #12]
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e7d9      	b.n	800747e <__cvt+0x7e>

080074ca <__exponent>:
 80074ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074cc:	2900      	cmp	r1, #0
 80074ce:	bfba      	itte	lt
 80074d0:	4249      	neglt	r1, r1
 80074d2:	232d      	movlt	r3, #45	@ 0x2d
 80074d4:	232b      	movge	r3, #43	@ 0x2b
 80074d6:	2909      	cmp	r1, #9
 80074d8:	7002      	strb	r2, [r0, #0]
 80074da:	7043      	strb	r3, [r0, #1]
 80074dc:	dd29      	ble.n	8007532 <__exponent+0x68>
 80074de:	f10d 0307 	add.w	r3, sp, #7
 80074e2:	461d      	mov	r5, r3
 80074e4:	270a      	movs	r7, #10
 80074e6:	461a      	mov	r2, r3
 80074e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80074ec:	fb07 1416 	mls	r4, r7, r6, r1
 80074f0:	3430      	adds	r4, #48	@ 0x30
 80074f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074f6:	460c      	mov	r4, r1
 80074f8:	2c63      	cmp	r4, #99	@ 0x63
 80074fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80074fe:	4631      	mov	r1, r6
 8007500:	dcf1      	bgt.n	80074e6 <__exponent+0x1c>
 8007502:	3130      	adds	r1, #48	@ 0x30
 8007504:	1e94      	subs	r4, r2, #2
 8007506:	f803 1c01 	strb.w	r1, [r3, #-1]
 800750a:	1c41      	adds	r1, r0, #1
 800750c:	4623      	mov	r3, r4
 800750e:	42ab      	cmp	r3, r5
 8007510:	d30a      	bcc.n	8007528 <__exponent+0x5e>
 8007512:	f10d 0309 	add.w	r3, sp, #9
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	42ac      	cmp	r4, r5
 800751a:	bf88      	it	hi
 800751c:	2300      	movhi	r3, #0
 800751e:	3302      	adds	r3, #2
 8007520:	4403      	add	r3, r0
 8007522:	1a18      	subs	r0, r3, r0
 8007524:	b003      	add	sp, #12
 8007526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007528:	f813 6b01 	ldrb.w	r6, [r3], #1
 800752c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007530:	e7ed      	b.n	800750e <__exponent+0x44>
 8007532:	2330      	movs	r3, #48	@ 0x30
 8007534:	3130      	adds	r1, #48	@ 0x30
 8007536:	7083      	strb	r3, [r0, #2]
 8007538:	70c1      	strb	r1, [r0, #3]
 800753a:	1d03      	adds	r3, r0, #4
 800753c:	e7f1      	b.n	8007522 <__exponent+0x58>
	...

08007540 <_printf_float>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b08d      	sub	sp, #52	@ 0x34
 8007546:	460c      	mov	r4, r1
 8007548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800754c:	4616      	mov	r6, r2
 800754e:	461f      	mov	r7, r3
 8007550:	4605      	mov	r5, r0
 8007552:	f000 fddf 	bl	8008114 <_localeconv_r>
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	4618      	mov	r0, r3
 800755c:	f7f8 fe88 	bl	8000270 <strlen>
 8007560:	2300      	movs	r3, #0
 8007562:	930a      	str	r3, [sp, #40]	@ 0x28
 8007564:	f8d8 3000 	ldr.w	r3, [r8]
 8007568:	9005      	str	r0, [sp, #20]
 800756a:	3307      	adds	r3, #7
 800756c:	f023 0307 	bic.w	r3, r3, #7
 8007570:	f103 0208 	add.w	r2, r3, #8
 8007574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007578:	f8d4 b000 	ldr.w	fp, [r4]
 800757c:	f8c8 2000 	str.w	r2, [r8]
 8007580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007588:	9307      	str	r3, [sp, #28]
 800758a:	f8cd 8018 	str.w	r8, [sp, #24]
 800758e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007596:	4b9c      	ldr	r3, [pc, #624]	@ (8007808 <_printf_float+0x2c8>)
 8007598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800759c:	f7f9 fac6 	bl	8000b2c <__aeabi_dcmpun>
 80075a0:	bb70      	cbnz	r0, 8007600 <_printf_float+0xc0>
 80075a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a6:	4b98      	ldr	r3, [pc, #608]	@ (8007808 <_printf_float+0x2c8>)
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075ac:	f7f9 faa0 	bl	8000af0 <__aeabi_dcmple>
 80075b0:	bb30      	cbnz	r0, 8007600 <_printf_float+0xc0>
 80075b2:	2200      	movs	r2, #0
 80075b4:	2300      	movs	r3, #0
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f9 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80075be:	b110      	cbz	r0, 80075c6 <_printf_float+0x86>
 80075c0:	232d      	movs	r3, #45	@ 0x2d
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c6:	4a91      	ldr	r2, [pc, #580]	@ (800780c <_printf_float+0x2cc>)
 80075c8:	4b91      	ldr	r3, [pc, #580]	@ (8007810 <_printf_float+0x2d0>)
 80075ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075ce:	bf94      	ite	ls
 80075d0:	4690      	movls	r8, r2
 80075d2:	4698      	movhi	r8, r3
 80075d4:	2303      	movs	r3, #3
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	f02b 0304 	bic.w	r3, fp, #4
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	9700      	str	r7, [sp, #0]
 80075e4:	4633      	mov	r3, r6
 80075e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f9d2 	bl	8007994 <_printf_common>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f040 808d 	bne.w	8007710 <_printf_float+0x1d0>
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075fa:	b00d      	add	sp, #52	@ 0x34
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	4640      	mov	r0, r8
 8007606:	4649      	mov	r1, r9
 8007608:	f7f9 fa90 	bl	8000b2c <__aeabi_dcmpun>
 800760c:	b140      	cbz	r0, 8007620 <_printf_float+0xe0>
 800760e:	464b      	mov	r3, r9
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfbc      	itt	lt
 8007614:	232d      	movlt	r3, #45	@ 0x2d
 8007616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800761a:	4a7e      	ldr	r2, [pc, #504]	@ (8007814 <_printf_float+0x2d4>)
 800761c:	4b7e      	ldr	r3, [pc, #504]	@ (8007818 <_printf_float+0x2d8>)
 800761e:	e7d4      	b.n	80075ca <_printf_float+0x8a>
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007626:	9206      	str	r2, [sp, #24]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	d13b      	bne.n	80076a4 <_printf_float+0x164>
 800762c:	2306      	movs	r3, #6
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007634:	2300      	movs	r3, #0
 8007636:	6022      	str	r2, [r4, #0]
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	ab0a      	add	r3, sp, #40	@ 0x28
 800763c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007640:	ab09      	add	r3, sp, #36	@ 0x24
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	6861      	ldr	r1, [r4, #4]
 8007646:	ec49 8b10 	vmov	d0, r8, r9
 800764a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff fed6 	bl	8007400 <__cvt>
 8007654:	9b06      	ldr	r3, [sp, #24]
 8007656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007658:	2b47      	cmp	r3, #71	@ 0x47
 800765a:	4680      	mov	r8, r0
 800765c:	d129      	bne.n	80076b2 <_printf_float+0x172>
 800765e:	1cc8      	adds	r0, r1, #3
 8007660:	db02      	blt.n	8007668 <_printf_float+0x128>
 8007662:	6863      	ldr	r3, [r4, #4]
 8007664:	4299      	cmp	r1, r3
 8007666:	dd41      	ble.n	80076ec <_printf_float+0x1ac>
 8007668:	f1aa 0a02 	sub.w	sl, sl, #2
 800766c:	fa5f fa8a 	uxtb.w	sl, sl
 8007670:	3901      	subs	r1, #1
 8007672:	4652      	mov	r2, sl
 8007674:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007678:	9109      	str	r1, [sp, #36]	@ 0x24
 800767a:	f7ff ff26 	bl	80074ca <__exponent>
 800767e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007680:	1813      	adds	r3, r2, r0
 8007682:	2a01      	cmp	r2, #1
 8007684:	4681      	mov	r9, r0
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	dc02      	bgt.n	8007690 <_printf_float+0x150>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	07d2      	lsls	r2, r2, #31
 800768e:	d501      	bpl.n	8007694 <_printf_float+0x154>
 8007690:	3301      	adds	r3, #1
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0a2      	beq.n	80075e2 <_printf_float+0xa2>
 800769c:	232d      	movs	r3, #45	@ 0x2d
 800769e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a2:	e79e      	b.n	80075e2 <_printf_float+0xa2>
 80076a4:	9a06      	ldr	r2, [sp, #24]
 80076a6:	2a47      	cmp	r2, #71	@ 0x47
 80076a8:	d1c2      	bne.n	8007630 <_printf_float+0xf0>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1c0      	bne.n	8007630 <_printf_float+0xf0>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7bd      	b.n	800762e <_printf_float+0xee>
 80076b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076b6:	d9db      	bls.n	8007670 <_printf_float+0x130>
 80076b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076bc:	d118      	bne.n	80076f0 <_printf_float+0x1b0>
 80076be:	2900      	cmp	r1, #0
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	dd0b      	ble.n	80076dc <_printf_float+0x19c>
 80076c4:	6121      	str	r1, [r4, #16]
 80076c6:	b913      	cbnz	r3, 80076ce <_printf_float+0x18e>
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	07d0      	lsls	r0, r2, #31
 80076cc:	d502      	bpl.n	80076d4 <_printf_float+0x194>
 80076ce:	3301      	adds	r3, #1
 80076d0:	440b      	add	r3, r1
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	e7db      	b.n	8007694 <_printf_float+0x154>
 80076dc:	b913      	cbnz	r3, 80076e4 <_printf_float+0x1a4>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	07d2      	lsls	r2, r2, #31
 80076e2:	d501      	bpl.n	80076e8 <_printf_float+0x1a8>
 80076e4:	3302      	adds	r3, #2
 80076e6:	e7f4      	b.n	80076d2 <_printf_float+0x192>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e7f2      	b.n	80076d2 <_printf_float+0x192>
 80076ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f2:	4299      	cmp	r1, r3
 80076f4:	db05      	blt.n	8007702 <_printf_float+0x1c2>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	6121      	str	r1, [r4, #16]
 80076fa:	07d8      	lsls	r0, r3, #31
 80076fc:	d5ea      	bpl.n	80076d4 <_printf_float+0x194>
 80076fe:	1c4b      	adds	r3, r1, #1
 8007700:	e7e7      	b.n	80076d2 <_printf_float+0x192>
 8007702:	2900      	cmp	r1, #0
 8007704:	bfd4      	ite	le
 8007706:	f1c1 0202 	rsble	r2, r1, #2
 800770a:	2201      	movgt	r2, #1
 800770c:	4413      	add	r3, r2
 800770e:	e7e0      	b.n	80076d2 <_printf_float+0x192>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	055a      	lsls	r2, r3, #21
 8007714:	d407      	bmi.n	8007726 <_printf_float+0x1e6>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	4642      	mov	r2, r8
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	d12b      	bne.n	800777c <_printf_float+0x23c>
 8007724:	e767      	b.n	80075f6 <_printf_float+0xb6>
 8007726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800772a:	f240 80dd 	bls.w	80078e8 <_printf_float+0x3a8>
 800772e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007732:	2200      	movs	r2, #0
 8007734:	2300      	movs	r3, #0
 8007736:	f7f9 f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800773a:	2800      	cmp	r0, #0
 800773c:	d033      	beq.n	80077a6 <_printf_float+0x266>
 800773e:	4a37      	ldr	r2, [pc, #220]	@ (800781c <_printf_float+0x2dc>)
 8007740:	2301      	movs	r3, #1
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	f43f af54 	beq.w	80075f6 <_printf_float+0xb6>
 800774e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007752:	4543      	cmp	r3, r8
 8007754:	db02      	blt.n	800775c <_printf_float+0x21c>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	07d8      	lsls	r0, r3, #31
 800775a:	d50f      	bpl.n	800777c <_printf_float+0x23c>
 800775c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f af45 	beq.w	80075f6 <_printf_float+0xb6>
 800776c:	f04f 0900 	mov.w	r9, #0
 8007770:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007774:	f104 0a1a 	add.w	sl, r4, #26
 8007778:	45c8      	cmp	r8, r9
 800777a:	dc09      	bgt.n	8007790 <_printf_float+0x250>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	079b      	lsls	r3, r3, #30
 8007780:	f100 8103 	bmi.w	800798a <_printf_float+0x44a>
 8007784:	68e0      	ldr	r0, [r4, #12]
 8007786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007788:	4298      	cmp	r0, r3
 800778a:	bfb8      	it	lt
 800778c:	4618      	movlt	r0, r3
 800778e:	e734      	b.n	80075fa <_printf_float+0xba>
 8007790:	2301      	movs	r3, #1
 8007792:	4652      	mov	r2, sl
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af2b 	beq.w	80075f6 <_printf_float+0xb6>
 80077a0:	f109 0901 	add.w	r9, r9, #1
 80077a4:	e7e8      	b.n	8007778 <_printf_float+0x238>
 80077a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dc39      	bgt.n	8007820 <_printf_float+0x2e0>
 80077ac:	4a1b      	ldr	r2, [pc, #108]	@ (800781c <_printf_float+0x2dc>)
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f af1d 	beq.w	80075f6 <_printf_float+0xb6>
 80077bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077c0:	ea59 0303 	orrs.w	r3, r9, r3
 80077c4:	d102      	bne.n	80077cc <_printf_float+0x28c>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	07d9      	lsls	r1, r3, #31
 80077ca:	d5d7      	bpl.n	800777c <_printf_float+0x23c>
 80077cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af0d 	beq.w	80075f6 <_printf_float+0xb6>
 80077dc:	f04f 0a00 	mov.w	sl, #0
 80077e0:	f104 0b1a 	add.w	fp, r4, #26
 80077e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e6:	425b      	negs	r3, r3
 80077e8:	4553      	cmp	r3, sl
 80077ea:	dc01      	bgt.n	80077f0 <_printf_float+0x2b0>
 80077ec:	464b      	mov	r3, r9
 80077ee:	e793      	b.n	8007718 <_printf_float+0x1d8>
 80077f0:	2301      	movs	r3, #1
 80077f2:	465a      	mov	r2, fp
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f aefb 	beq.w	80075f6 <_printf_float+0xb6>
 8007800:	f10a 0a01 	add.w	sl, sl, #1
 8007804:	e7ee      	b.n	80077e4 <_printf_float+0x2a4>
 8007806:	bf00      	nop
 8007808:	7fefffff 	.word	0x7fefffff
 800780c:	0800a85c 	.word	0x0800a85c
 8007810:	0800a860 	.word	0x0800a860
 8007814:	0800a864 	.word	0x0800a864
 8007818:	0800a868 	.word	0x0800a868
 800781c:	0800a86c 	.word	0x0800a86c
 8007820:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007822:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007826:	4553      	cmp	r3, sl
 8007828:	bfa8      	it	ge
 800782a:	4653      	movge	r3, sl
 800782c:	2b00      	cmp	r3, #0
 800782e:	4699      	mov	r9, r3
 8007830:	dc36      	bgt.n	80078a0 <_printf_float+0x360>
 8007832:	f04f 0b00 	mov.w	fp, #0
 8007836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800783a:	f104 021a 	add.w	r2, r4, #26
 800783e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007840:	9306      	str	r3, [sp, #24]
 8007842:	eba3 0309 	sub.w	r3, r3, r9
 8007846:	455b      	cmp	r3, fp
 8007848:	dc31      	bgt.n	80078ae <_printf_float+0x36e>
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	459a      	cmp	sl, r3
 800784e:	dc3a      	bgt.n	80078c6 <_printf_float+0x386>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07da      	lsls	r2, r3, #31
 8007854:	d437      	bmi.n	80078c6 <_printf_float+0x386>
 8007856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007858:	ebaa 0903 	sub.w	r9, sl, r3
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	ebaa 0303 	sub.w	r3, sl, r3
 8007862:	4599      	cmp	r9, r3
 8007864:	bfa8      	it	ge
 8007866:	4699      	movge	r9, r3
 8007868:	f1b9 0f00 	cmp.w	r9, #0
 800786c:	dc33      	bgt.n	80078d6 <_printf_float+0x396>
 800786e:	f04f 0800 	mov.w	r8, #0
 8007872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007876:	f104 0b1a 	add.w	fp, r4, #26
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	ebaa 0303 	sub.w	r3, sl, r3
 8007880:	eba3 0309 	sub.w	r3, r3, r9
 8007884:	4543      	cmp	r3, r8
 8007886:	f77f af79 	ble.w	800777c <_printf_float+0x23c>
 800788a:	2301      	movs	r3, #1
 800788c:	465a      	mov	r2, fp
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	f43f aeae 	beq.w	80075f6 <_printf_float+0xb6>
 800789a:	f108 0801 	add.w	r8, r8, #1
 800789e:	e7ec      	b.n	800787a <_printf_float+0x33a>
 80078a0:	4642      	mov	r2, r8
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	d1c2      	bne.n	8007832 <_printf_float+0x2f2>
 80078ac:	e6a3      	b.n	80075f6 <_printf_float+0xb6>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	9206      	str	r2, [sp, #24]
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f ae9c 	beq.w	80075f6 <_printf_float+0xb6>
 80078be:	9a06      	ldr	r2, [sp, #24]
 80078c0:	f10b 0b01 	add.w	fp, fp, #1
 80078c4:	e7bb      	b.n	800783e <_printf_float+0x2fe>
 80078c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	d1c0      	bne.n	8007856 <_printf_float+0x316>
 80078d4:	e68f      	b.n	80075f6 <_printf_float+0xb6>
 80078d6:	9a06      	ldr	r2, [sp, #24]
 80078d8:	464b      	mov	r3, r9
 80078da:	4442      	add	r2, r8
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	d1c3      	bne.n	800786e <_printf_float+0x32e>
 80078e6:	e686      	b.n	80075f6 <_printf_float+0xb6>
 80078e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078ec:	f1ba 0f01 	cmp.w	sl, #1
 80078f0:	dc01      	bgt.n	80078f6 <_printf_float+0x3b6>
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d536      	bpl.n	8007964 <_printf_float+0x424>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4642      	mov	r2, r8
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	f43f ae78 	beq.w	80075f6 <_printf_float+0xb6>
 8007906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800790a:	4631      	mov	r1, r6
 800790c:	4628      	mov	r0, r5
 800790e:	47b8      	blx	r7
 8007910:	3001      	adds	r0, #1
 8007912:	f43f ae70 	beq.w	80075f6 <_printf_float+0xb6>
 8007916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007922:	f7f9 f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007926:	b9c0      	cbnz	r0, 800795a <_printf_float+0x41a>
 8007928:	4653      	mov	r3, sl
 800792a:	f108 0201 	add.w	r2, r8, #1
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d10c      	bne.n	8007952 <_printf_float+0x412>
 8007938:	e65d      	b.n	80075f6 <_printf_float+0xb6>
 800793a:	2301      	movs	r3, #1
 800793c:	465a      	mov	r2, fp
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae56 	beq.w	80075f6 <_printf_float+0xb6>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	45d0      	cmp	r8, sl
 8007950:	dbf3      	blt.n	800793a <_printf_float+0x3fa>
 8007952:	464b      	mov	r3, r9
 8007954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007958:	e6df      	b.n	800771a <_printf_float+0x1da>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	f104 0b1a 	add.w	fp, r4, #26
 8007962:	e7f4      	b.n	800794e <_printf_float+0x40e>
 8007964:	2301      	movs	r3, #1
 8007966:	4642      	mov	r2, r8
 8007968:	e7e1      	b.n	800792e <_printf_float+0x3ee>
 800796a:	2301      	movs	r3, #1
 800796c:	464a      	mov	r2, r9
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae3e 	beq.w	80075f6 <_printf_float+0xb6>
 800797a:	f108 0801 	add.w	r8, r8, #1
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	4543      	cmp	r3, r8
 8007986:	dcf0      	bgt.n	800796a <_printf_float+0x42a>
 8007988:	e6fc      	b.n	8007784 <_printf_float+0x244>
 800798a:	f04f 0800 	mov.w	r8, #0
 800798e:	f104 0919 	add.w	r9, r4, #25
 8007992:	e7f4      	b.n	800797e <_printf_float+0x43e>

08007994 <_printf_common>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	4616      	mov	r6, r2
 800799a:	4698      	mov	r8, r3
 800799c:	688a      	ldr	r2, [r1, #8]
 800799e:	690b      	ldr	r3, [r1, #16]
 80079a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bfb8      	it	lt
 80079a8:	4613      	movlt	r3, r2
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079b0:	4607      	mov	r7, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b10a      	cbz	r2, 80079ba <_printf_common+0x26>
 80079b6:	3301      	adds	r3, #1
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	0699      	lsls	r1, r3, #26
 80079be:	bf42      	ittt	mi
 80079c0:	6833      	ldrmi	r3, [r6, #0]
 80079c2:	3302      	addmi	r3, #2
 80079c4:	6033      	strmi	r3, [r6, #0]
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	f015 0506 	ands.w	r5, r5, #6
 80079cc:	d106      	bne.n	80079dc <_printf_common+0x48>
 80079ce:	f104 0a19 	add.w	sl, r4, #25
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	6832      	ldr	r2, [r6, #0]
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dc26      	bgt.n	8007a2a <_printf_common+0x96>
 80079dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	3b00      	subs	r3, #0
 80079e4:	bf18      	it	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	0692      	lsls	r2, r2, #26
 80079ea:	d42b      	bmi.n	8007a44 <_printf_common+0xb0>
 80079ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079f0:	4641      	mov	r1, r8
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c8      	blx	r9
 80079f6:	3001      	adds	r0, #1
 80079f8:	d01e      	beq.n	8007a38 <_printf_common+0xa4>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	6922      	ldr	r2, [r4, #16]
 80079fe:	f003 0306 	and.w	r3, r3, #6
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	bf02      	ittt	eq
 8007a06:	68e5      	ldreq	r5, [r4, #12]
 8007a08:	6833      	ldreq	r3, [r6, #0]
 8007a0a:	1aed      	subeq	r5, r5, r3
 8007a0c:	68a3      	ldr	r3, [r4, #8]
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a14:	2500      	movne	r5, #0
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bfc4      	itt	gt
 8007a1a:	1a9b      	subgt	r3, r3, r2
 8007a1c:	18ed      	addgt	r5, r5, r3
 8007a1e:	2600      	movs	r6, #0
 8007a20:	341a      	adds	r4, #26
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	d11a      	bne.n	8007a5c <_printf_common+0xc8>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e008      	b.n	8007a3c <_printf_common+0xa8>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4641      	mov	r1, r8
 8007a30:	4638      	mov	r0, r7
 8007a32:	47c8      	blx	r9
 8007a34:	3001      	adds	r0, #1
 8007a36:	d103      	bne.n	8007a40 <_printf_common+0xac>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	3501      	adds	r5, #1
 8007a42:	e7c6      	b.n	80079d2 <_printf_common+0x3e>
 8007a44:	18e1      	adds	r1, r4, r3
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	2030      	movs	r0, #48	@ 0x30
 8007a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a4e:	4422      	add	r2, r4
 8007a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a58:	3302      	adds	r3, #2
 8007a5a:	e7c7      	b.n	80079ec <_printf_common+0x58>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4641      	mov	r1, r8
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c8      	blx	r9
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0e6      	beq.n	8007a38 <_printf_common+0xa4>
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7d9      	b.n	8007a22 <_printf_common+0x8e>
	...

08007a70 <_printf_i>:
 8007a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	7e0f      	ldrb	r7, [r1, #24]
 8007a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a78:	2f78      	cmp	r7, #120	@ 0x78
 8007a7a:	4691      	mov	r9, r2
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	469a      	mov	sl, r3
 8007a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a86:	d807      	bhi.n	8007a98 <_printf_i+0x28>
 8007a88:	2f62      	cmp	r7, #98	@ 0x62
 8007a8a:	d80a      	bhi.n	8007aa2 <_printf_i+0x32>
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	f000 80d2 	beq.w	8007c36 <_printf_i+0x1c6>
 8007a92:	2f58      	cmp	r7, #88	@ 0x58
 8007a94:	f000 80b9 	beq.w	8007c0a <_printf_i+0x19a>
 8007a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007aa0:	e03a      	b.n	8007b18 <_printf_i+0xa8>
 8007aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aa6:	2b15      	cmp	r3, #21
 8007aa8:	d8f6      	bhi.n	8007a98 <_printf_i+0x28>
 8007aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8007ab0 <_printf_i+0x40>)
 8007aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007b1d 	.word	0x08007b1d
 8007ab8:	08007a99 	.word	0x08007a99
 8007abc:	08007a99 	.word	0x08007a99
 8007ac0:	08007a99 	.word	0x08007a99
 8007ac4:	08007a99 	.word	0x08007a99
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007a99 	.word	0x08007a99
 8007ad0:	08007a99 	.word	0x08007a99
 8007ad4:	08007a99 	.word	0x08007a99
 8007ad8:	08007a99 	.word	0x08007a99
 8007adc:	08007c1d 	.word	0x08007c1d
 8007ae0:	08007b47 	.word	0x08007b47
 8007ae4:	08007bd7 	.word	0x08007bd7
 8007ae8:	08007a99 	.word	0x08007a99
 8007aec:	08007a99 	.word	0x08007a99
 8007af0:	08007c3f 	.word	0x08007c3f
 8007af4:	08007a99 	.word	0x08007a99
 8007af8:	08007b47 	.word	0x08007b47
 8007afc:	08007a99 	.word	0x08007a99
 8007b00:	08007a99 	.word	0x08007a99
 8007b04:	08007bdf 	.word	0x08007bdf
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	1d1a      	adds	r2, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6032      	str	r2, [r6, #0]
 8007b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e09d      	b.n	8007c58 <_printf_i+0x1e8>
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	6820      	ldr	r0, [r4, #0]
 8007b20:	1d19      	adds	r1, r3, #4
 8007b22:	6031      	str	r1, [r6, #0]
 8007b24:	0606      	lsls	r6, r0, #24
 8007b26:	d501      	bpl.n	8007b2c <_printf_i+0xbc>
 8007b28:	681d      	ldr	r5, [r3, #0]
 8007b2a:	e003      	b.n	8007b34 <_printf_i+0xc4>
 8007b2c:	0645      	lsls	r5, r0, #25
 8007b2e:	d5fb      	bpl.n	8007b28 <_printf_i+0xb8>
 8007b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	da03      	bge.n	8007b40 <_printf_i+0xd0>
 8007b38:	232d      	movs	r3, #45	@ 0x2d
 8007b3a:	426d      	negs	r5, r5
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b40:	4859      	ldr	r0, [pc, #356]	@ (8007ca8 <_printf_i+0x238>)
 8007b42:	230a      	movs	r3, #10
 8007b44:	e011      	b.n	8007b6a <_printf_i+0xfa>
 8007b46:	6821      	ldr	r1, [r4, #0]
 8007b48:	6833      	ldr	r3, [r6, #0]
 8007b4a:	0608      	lsls	r0, r1, #24
 8007b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b50:	d402      	bmi.n	8007b58 <_printf_i+0xe8>
 8007b52:	0649      	lsls	r1, r1, #25
 8007b54:	bf48      	it	mi
 8007b56:	b2ad      	uxthmi	r5, r5
 8007b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b5a:	4853      	ldr	r0, [pc, #332]	@ (8007ca8 <_printf_i+0x238>)
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	bf14      	ite	ne
 8007b60:	230a      	movne	r3, #10
 8007b62:	2308      	moveq	r3, #8
 8007b64:	2100      	movs	r1, #0
 8007b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b6a:	6866      	ldr	r6, [r4, #4]
 8007b6c:	60a6      	str	r6, [r4, #8]
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	bfa2      	ittt	ge
 8007b72:	6821      	ldrge	r1, [r4, #0]
 8007b74:	f021 0104 	bicge.w	r1, r1, #4
 8007b78:	6021      	strge	r1, [r4, #0]
 8007b7a:	b90d      	cbnz	r5, 8007b80 <_printf_i+0x110>
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	d04b      	beq.n	8007c18 <_printf_i+0x1a8>
 8007b80:	4616      	mov	r6, r2
 8007b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b86:	fb03 5711 	mls	r7, r3, r1, r5
 8007b8a:	5dc7      	ldrb	r7, [r0, r7]
 8007b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b90:	462f      	mov	r7, r5
 8007b92:	42bb      	cmp	r3, r7
 8007b94:	460d      	mov	r5, r1
 8007b96:	d9f4      	bls.n	8007b82 <_printf_i+0x112>
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d10b      	bne.n	8007bb4 <_printf_i+0x144>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	07df      	lsls	r7, r3, #31
 8007ba0:	d508      	bpl.n	8007bb4 <_printf_i+0x144>
 8007ba2:	6923      	ldr	r3, [r4, #16]
 8007ba4:	6861      	ldr	r1, [r4, #4]
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	bfde      	ittt	le
 8007baa:	2330      	movle	r3, #48	@ 0x30
 8007bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bb0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007bb4:	1b92      	subs	r2, r2, r6
 8007bb6:	6122      	str	r2, [r4, #16]
 8007bb8:	f8cd a000 	str.w	sl, [sp]
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	aa03      	add	r2, sp, #12
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	f7ff fee6 	bl	8007994 <_printf_common>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d14a      	bne.n	8007c62 <_printf_i+0x1f2>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bd0:	b004      	add	sp, #16
 8007bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	f043 0320 	orr.w	r3, r3, #32
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	4833      	ldr	r0, [pc, #204]	@ (8007cac <_printf_i+0x23c>)
 8007be0:	2778      	movs	r7, #120	@ 0x78
 8007be2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	6831      	ldr	r1, [r6, #0]
 8007bea:	061f      	lsls	r7, r3, #24
 8007bec:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bf0:	d402      	bmi.n	8007bf8 <_printf_i+0x188>
 8007bf2:	065f      	lsls	r7, r3, #25
 8007bf4:	bf48      	it	mi
 8007bf6:	b2ad      	uxthmi	r5, r5
 8007bf8:	6031      	str	r1, [r6, #0]
 8007bfa:	07d9      	lsls	r1, r3, #31
 8007bfc:	bf44      	itt	mi
 8007bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8007c02:	6023      	strmi	r3, [r4, #0]
 8007c04:	b11d      	cbz	r5, 8007c0e <_printf_i+0x19e>
 8007c06:	2310      	movs	r3, #16
 8007c08:	e7ac      	b.n	8007b64 <_printf_i+0xf4>
 8007c0a:	4827      	ldr	r0, [pc, #156]	@ (8007ca8 <_printf_i+0x238>)
 8007c0c:	e7e9      	b.n	8007be2 <_printf_i+0x172>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f023 0320 	bic.w	r3, r3, #32
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	e7f6      	b.n	8007c06 <_printf_i+0x196>
 8007c18:	4616      	mov	r6, r2
 8007c1a:	e7bd      	b.n	8007b98 <_printf_i+0x128>
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	6825      	ldr	r5, [r4, #0]
 8007c20:	6961      	ldr	r1, [r4, #20]
 8007c22:	1d18      	adds	r0, r3, #4
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	062e      	lsls	r6, r5, #24
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	d501      	bpl.n	8007c30 <_printf_i+0x1c0>
 8007c2c:	6019      	str	r1, [r3, #0]
 8007c2e:	e002      	b.n	8007c36 <_printf_i+0x1c6>
 8007c30:	0668      	lsls	r0, r5, #25
 8007c32:	d5fb      	bpl.n	8007c2c <_printf_i+0x1bc>
 8007c34:	8019      	strh	r1, [r3, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	e7bc      	b.n	8007bb8 <_printf_i+0x148>
 8007c3e:	6833      	ldr	r3, [r6, #0]
 8007c40:	1d1a      	adds	r2, r3, #4
 8007c42:	6032      	str	r2, [r6, #0]
 8007c44:	681e      	ldr	r6, [r3, #0]
 8007c46:	6862      	ldr	r2, [r4, #4]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7f8 fac0 	bl	80001d0 <memchr>
 8007c50:	b108      	cbz	r0, 8007c56 <_printf_i+0x1e6>
 8007c52:	1b80      	subs	r0, r0, r6
 8007c54:	6060      	str	r0, [r4, #4]
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	6123      	str	r3, [r4, #16]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c60:	e7aa      	b.n	8007bb8 <_printf_i+0x148>
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	4632      	mov	r2, r6
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d0ad      	beq.n	8007bcc <_printf_i+0x15c>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	079b      	lsls	r3, r3, #30
 8007c74:	d413      	bmi.n	8007c9e <_printf_i+0x22e>
 8007c76:	68e0      	ldr	r0, [r4, #12]
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	bfb8      	it	lt
 8007c7e:	4618      	movlt	r0, r3
 8007c80:	e7a6      	b.n	8007bd0 <_printf_i+0x160>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4632      	mov	r2, r6
 8007c86:	4649      	mov	r1, r9
 8007c88:	4640      	mov	r0, r8
 8007c8a:	47d0      	blx	sl
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d09d      	beq.n	8007bcc <_printf_i+0x15c>
 8007c90:	3501      	adds	r5, #1
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	9903      	ldr	r1, [sp, #12]
 8007c96:	1a5b      	subs	r3, r3, r1
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dcf2      	bgt.n	8007c82 <_printf_i+0x212>
 8007c9c:	e7eb      	b.n	8007c76 <_printf_i+0x206>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	f104 0619 	add.w	r6, r4, #25
 8007ca4:	e7f5      	b.n	8007c92 <_printf_i+0x222>
 8007ca6:	bf00      	nop
 8007ca8:	0800a86e 	.word	0x0800a86e
 8007cac:	0800a87f 	.word	0x0800a87f

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	@ 0x5c
 8007cce:	f000 fa19 	bl	8008104 <memset>
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <std+0x58>)
 8007cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x5c>)
 8007cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x60>)
 8007cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <std+0x64>)
 8007ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <std+0x68>)
 8007ce4:	6224      	str	r4, [r4, #32]
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d006      	beq.n	8007cf8 <std+0x48>
 8007cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cee:	4294      	cmp	r4, r2
 8007cf0:	d002      	beq.n	8007cf8 <std+0x48>
 8007cf2:	33d0      	adds	r3, #208	@ 0xd0
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d105      	bne.n	8007d04 <std+0x54>
 8007cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 ba7c 	b.w	80081fc <__retarget_lock_init_recursive>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	08007f55 	.word	0x08007f55
 8007d0c:	08007f77 	.word	0x08007f77
 8007d10:	08007faf 	.word	0x08007faf
 8007d14:	08007fd3 	.word	0x08007fd3
 8007d18:	200008a8 	.word	0x200008a8

08007d1c <stdio_exit_handler>:
 8007d1c:	4a02      	ldr	r2, [pc, #8]	@ (8007d28 <stdio_exit_handler+0xc>)
 8007d1e:	4903      	ldr	r1, [pc, #12]	@ (8007d2c <stdio_exit_handler+0x10>)
 8007d20:	4803      	ldr	r0, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x14>)
 8007d22:	f000 b869 	b.w	8007df8 <_fwalk_sglue>
 8007d26:	bf00      	nop
 8007d28:	20000010 	.word	0x20000010
 8007d2c:	08009de1 	.word	0x08009de1
 8007d30:	20000020 	.word	0x20000020

08007d34 <cleanup_stdio>:
 8007d34:	6841      	ldr	r1, [r0, #4]
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <cleanup_stdio+0x34>)
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	d001      	beq.n	8007d44 <cleanup_stdio+0x10>
 8007d40:	f002 f84e 	bl	8009de0 <_fflush_r>
 8007d44:	68a1      	ldr	r1, [r4, #8]
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <cleanup_stdio+0x38>)
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <cleanup_stdio+0x1e>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f002 f847 	bl	8009de0 <_fflush_r>
 8007d52:	68e1      	ldr	r1, [r4, #12]
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <cleanup_stdio+0x3c>)
 8007d56:	4299      	cmp	r1, r3
 8007d58:	d004      	beq.n	8007d64 <cleanup_stdio+0x30>
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f002 b83e 	b.w	8009de0 <_fflush_r>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	200008a8 	.word	0x200008a8
 8007d6c:	20000910 	.word	0x20000910
 8007d70:	20000978 	.word	0x20000978

08007d74 <global_stdio_init.part.0>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <global_stdio_init.part.0+0x30>)
 8007d78:	4c0b      	ldr	r4, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x34>)
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dac <global_stdio_init.part.0+0x38>)
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	2200      	movs	r2, #0
 8007d82:	2104      	movs	r1, #4
 8007d84:	f7ff ff94 	bl	8007cb0 <std>
 8007d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2109      	movs	r1, #9
 8007d90:	f7ff ff8e 	bl	8007cb0 <std>
 8007d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d98:	2202      	movs	r2, #2
 8007d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9e:	2112      	movs	r1, #18
 8007da0:	f7ff bf86 	b.w	8007cb0 <std>
 8007da4:	200009e0 	.word	0x200009e0
 8007da8:	200008a8 	.word	0x200008a8
 8007dac:	08007d1d 	.word	0x08007d1d

08007db0 <__sfp_lock_acquire>:
 8007db0:	4801      	ldr	r0, [pc, #4]	@ (8007db8 <__sfp_lock_acquire+0x8>)
 8007db2:	f000 ba24 	b.w	80081fe <__retarget_lock_acquire_recursive>
 8007db6:	bf00      	nop
 8007db8:	200009e9 	.word	0x200009e9

08007dbc <__sfp_lock_release>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__sfp_lock_release+0x8>)
 8007dbe:	f000 ba1f 	b.w	8008200 <__retarget_lock_release_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	200009e9 	.word	0x200009e9

08007dc8 <__sinit>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	f7ff fff0 	bl	8007db0 <__sfp_lock_acquire>
 8007dd0:	6a23      	ldr	r3, [r4, #32]
 8007dd2:	b11b      	cbz	r3, 8007ddc <__sinit+0x14>
 8007dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd8:	f7ff bff0 	b.w	8007dbc <__sfp_lock_release>
 8007ddc:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__sinit+0x28>)
 8007dde:	6223      	str	r3, [r4, #32]
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x2c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f5      	bne.n	8007dd4 <__sinit+0xc>
 8007de8:	f7ff ffc4 	bl	8007d74 <global_stdio_init.part.0>
 8007dec:	e7f2      	b.n	8007dd4 <__sinit+0xc>
 8007dee:	bf00      	nop
 8007df0:	08007d35 	.word	0x08007d35
 8007df4:	200009e0 	.word	0x200009e0

08007df8 <_fwalk_sglue>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	2600      	movs	r6, #0
 8007e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e08:	f1b9 0901 	subs.w	r9, r9, #1
 8007e0c:	d505      	bpl.n	8007e1a <_fwalk_sglue+0x22>
 8007e0e:	6824      	ldr	r4, [r4, #0]
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	d1f7      	bne.n	8007e04 <_fwalk_sglue+0xc>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d907      	bls.n	8007e30 <_fwalk_sglue+0x38>
 8007e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	d003      	beq.n	8007e30 <_fwalk_sglue+0x38>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	4306      	orrs	r6, r0
 8007e30:	3568      	adds	r5, #104	@ 0x68
 8007e32:	e7e9      	b.n	8007e08 <_fwalk_sglue+0x10>

08007e34 <iprintf>:
 8007e34:	b40f      	push	{r0, r1, r2, r3}
 8007e36:	b507      	push	{r0, r1, r2, lr}
 8007e38:	4906      	ldr	r1, [pc, #24]	@ (8007e54 <iprintf+0x20>)
 8007e3a:	ab04      	add	r3, sp, #16
 8007e3c:	6808      	ldr	r0, [r1, #0]
 8007e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e42:	6881      	ldr	r1, [r0, #8]
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	f001 fe2f 	bl	8009aa8 <_vfiprintf_r>
 8007e4a:	b003      	add	sp, #12
 8007e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e50:	b004      	add	sp, #16
 8007e52:	4770      	bx	lr
 8007e54:	2000001c 	.word	0x2000001c

08007e58 <_puts_r>:
 8007e58:	6a03      	ldr	r3, [r0, #32]
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	6884      	ldr	r4, [r0, #8]
 8007e5e:	4605      	mov	r5, r0
 8007e60:	460e      	mov	r6, r1
 8007e62:	b90b      	cbnz	r3, 8007e68 <_puts_r+0x10>
 8007e64:	f7ff ffb0 	bl	8007dc8 <__sinit>
 8007e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e6a:	07db      	lsls	r3, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_puts_r+0x22>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_puts_r+0x22>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f000 f9c2 	bl	80081fe <__retarget_lock_acquire_recursive>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	0719      	lsls	r1, r3, #28
 8007e7e:	d502      	bpl.n	8007e86 <_puts_r+0x2e>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d135      	bne.n	8007ef2 <_puts_r+0x9a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 f8e5 	bl	8008058 <__swsetup_r>
 8007e8e:	b380      	cbz	r0, 8007ef2 <_puts_r+0x9a>
 8007e90:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e96:	07da      	lsls	r2, r3, #31
 8007e98:	d405      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea2:	f000 f9ad 	bl	8008200 <__retarget_lock_release_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da04      	bge.n	8007eb8 <_puts_r+0x60>
 8007eae:	69a2      	ldr	r2, [r4, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	dc17      	bgt.n	8007ee4 <_puts_r+0x8c>
 8007eb4:	290a      	cmp	r1, #10
 8007eb6:	d015      	beq.n	8007ee4 <_puts_r+0x8c>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d1ed      	bne.n	8007eaa <_puts_r+0x52>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da11      	bge.n	8007ef6 <_puts_r+0x9e>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	210a      	movs	r1, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 f87f 	bl	8007fda <__swbuf_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d0d7      	beq.n	8007e90 <_puts_r+0x38>
 8007ee0:	250a      	movs	r5, #10
 8007ee2:	e7d7      	b.n	8007e94 <_puts_r+0x3c>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 f877 	bl	8007fda <__swbuf_r>
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1e7      	bne.n	8007ec0 <_puts_r+0x68>
 8007ef0:	e7ce      	b.n	8007e90 <_puts_r+0x38>
 8007ef2:	3e01      	subs	r6, #1
 8007ef4:	e7e4      	b.n	8007ec0 <_puts_r+0x68>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	220a      	movs	r2, #10
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e7ee      	b.n	8007ee0 <_puts_r+0x88>
	...

08007f04 <puts>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <puts+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f7ff bfa5 	b.w	8007e58 <_puts_r>
 8007f0e:	bf00      	nop
 8007f10:	2000001c 	.word	0x2000001c

08007f14 <siprintf>:
 8007f14:	b40e      	push	{r1, r2, r3}
 8007f16:	b500      	push	{lr}
 8007f18:	b09c      	sub	sp, #112	@ 0x70
 8007f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f1c:	9002      	str	r0, [sp, #8]
 8007f1e:	9006      	str	r0, [sp, #24]
 8007f20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f24:	4809      	ldr	r0, [pc, #36]	@ (8007f4c <siprintf+0x38>)
 8007f26:	9107      	str	r1, [sp, #28]
 8007f28:	9104      	str	r1, [sp, #16]
 8007f2a:	4909      	ldr	r1, [pc, #36]	@ (8007f50 <siprintf+0x3c>)
 8007f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f30:	9105      	str	r1, [sp, #20]
 8007f32:	6800      	ldr	r0, [r0, #0]
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	a902      	add	r1, sp, #8
 8007f38:	f001 fc90 	bl	800985c <_svfiprintf_r>
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	b01c      	add	sp, #112	@ 0x70
 8007f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f48:	b003      	add	sp, #12
 8007f4a:	4770      	bx	lr
 8007f4c:	2000001c 	.word	0x2000001c
 8007f50:	ffff0208 	.word	0xffff0208

08007f54 <__sread>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	460c      	mov	r4, r1
 8007f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5c:	f000 f900 	bl	8008160 <_read_r>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	bfab      	itete	ge
 8007f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f66:	89a3      	ldrhlt	r3, [r4, #12]
 8007f68:	181b      	addge	r3, r3, r0
 8007f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f6e:	bfac      	ite	ge
 8007f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f72:	81a3      	strhlt	r3, [r4, #12]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__swrite>:
 8007f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7a:	461f      	mov	r7, r3
 8007f7c:	898b      	ldrh	r3, [r1, #12]
 8007f7e:	05db      	lsls	r3, r3, #23
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4616      	mov	r6, r2
 8007f86:	d505      	bpl.n	8007f94 <__swrite+0x1e>
 8007f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f000 f8d4 	bl	800813c <_lseek_r>
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f9e:	81a3      	strh	r3, [r4, #12]
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	463b      	mov	r3, r7
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	f000 b8eb 	b.w	8008184 <_write_r>

08007fae <__sseek>:
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb6:	f000 f8c1 	bl	800813c <_lseek_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	bf15      	itete	ne
 8007fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fca:	81a3      	strheq	r3, [r4, #12]
 8007fcc:	bf18      	it	ne
 8007fce:	81a3      	strhne	r3, [r4, #12]
 8007fd0:	bd10      	pop	{r4, pc}

08007fd2 <__sclose>:
 8007fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd6:	f000 b8a1 	b.w	800811c <_close_r>

08007fda <__swbuf_r>:
 8007fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fdc:	460e      	mov	r6, r1
 8007fde:	4614      	mov	r4, r2
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	b118      	cbz	r0, 8007fec <__swbuf_r+0x12>
 8007fe4:	6a03      	ldr	r3, [r0, #32]
 8007fe6:	b90b      	cbnz	r3, 8007fec <__swbuf_r+0x12>
 8007fe8:	f7ff feee 	bl	8007dc8 <__sinit>
 8007fec:	69a3      	ldr	r3, [r4, #24]
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	071a      	lsls	r2, r3, #28
 8007ff4:	d501      	bpl.n	8007ffa <__swbuf_r+0x20>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b943      	cbnz	r3, 800800c <__swbuf_r+0x32>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f82b 	bl	8008058 <__swsetup_r>
 8008002:	b118      	cbz	r0, 800800c <__swbuf_r+0x32>
 8008004:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008008:	4638      	mov	r0, r7
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	1a98      	subs	r0, r3, r2
 8008012:	6963      	ldr	r3, [r4, #20]
 8008014:	b2f6      	uxtb	r6, r6
 8008016:	4283      	cmp	r3, r0
 8008018:	4637      	mov	r7, r6
 800801a:	dc05      	bgt.n	8008028 <__swbuf_r+0x4e>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f001 fede 	bl	8009de0 <_fflush_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d1ed      	bne.n	8008004 <__swbuf_r+0x2a>
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	3b01      	subs	r3, #1
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	701e      	strb	r6, [r3, #0]
 8008036:	6962      	ldr	r2, [r4, #20]
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	429a      	cmp	r2, r3
 800803c:	d004      	beq.n	8008048 <__swbuf_r+0x6e>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d5e1      	bpl.n	8008008 <__swbuf_r+0x2e>
 8008044:	2e0a      	cmp	r6, #10
 8008046:	d1df      	bne.n	8008008 <__swbuf_r+0x2e>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f001 fec8 	bl	8009de0 <_fflush_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	d0d9      	beq.n	8008008 <__swbuf_r+0x2e>
 8008054:	e7d6      	b.n	8008004 <__swbuf_r+0x2a>
	...

08008058 <__swsetup_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4b29      	ldr	r3, [pc, #164]	@ (8008100 <__swsetup_r+0xa8>)
 800805c:	4605      	mov	r5, r0
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	460c      	mov	r4, r1
 8008062:	b118      	cbz	r0, 800806c <__swsetup_r+0x14>
 8008064:	6a03      	ldr	r3, [r0, #32]
 8008066:	b90b      	cbnz	r3, 800806c <__swsetup_r+0x14>
 8008068:	f7ff feae 	bl	8007dc8 <__sinit>
 800806c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d422      	bmi.n	80080ba <__swsetup_r+0x62>
 8008074:	06da      	lsls	r2, r3, #27
 8008076:	d407      	bmi.n	8008088 <__swsetup_r+0x30>
 8008078:	2209      	movs	r2, #9
 800807a:	602a      	str	r2, [r5, #0]
 800807c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008086:	e033      	b.n	80080f0 <__swsetup_r+0x98>
 8008088:	0758      	lsls	r0, r3, #29
 800808a:	d512      	bpl.n	80080b2 <__swsetup_r+0x5a>
 800808c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800808e:	b141      	cbz	r1, 80080a2 <__swsetup_r+0x4a>
 8008090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008094:	4299      	cmp	r1, r3
 8008096:	d002      	beq.n	800809e <__swsetup_r+0x46>
 8008098:	4628      	mov	r0, r5
 800809a:	f000 ff01 	bl	8008ea0 <_free_r>
 800809e:	2300      	movs	r3, #0
 80080a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	2300      	movs	r3, #0
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	6923      	ldr	r3, [r4, #16]
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f043 0308 	orr.w	r3, r3, #8
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	b94b      	cbnz	r3, 80080d2 <__swsetup_r+0x7a>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c8:	d003      	beq.n	80080d2 <__swsetup_r+0x7a>
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f001 fed5 	bl	8009e7c <__smakebuf_r>
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	f013 0201 	ands.w	r2, r3, #1
 80080da:	d00a      	beq.n	80080f2 <__swsetup_r+0x9a>
 80080dc:	2200      	movs	r2, #0
 80080de:	60a2      	str	r2, [r4, #8]
 80080e0:	6962      	ldr	r2, [r4, #20]
 80080e2:	4252      	negs	r2, r2
 80080e4:	61a2      	str	r2, [r4, #24]
 80080e6:	6922      	ldr	r2, [r4, #16]
 80080e8:	b942      	cbnz	r2, 80080fc <__swsetup_r+0xa4>
 80080ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080ee:	d1c5      	bne.n	800807c <__swsetup_r+0x24>
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
 80080f2:	0799      	lsls	r1, r3, #30
 80080f4:	bf58      	it	pl
 80080f6:	6962      	ldrpl	r2, [r4, #20]
 80080f8:	60a2      	str	r2, [r4, #8]
 80080fa:	e7f4      	b.n	80080e6 <__swsetup_r+0x8e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7f7      	b.n	80080f0 <__swsetup_r+0x98>
 8008100:	2000001c 	.word	0x2000001c

08008104 <memset>:
 8008104:	4402      	add	r2, r0
 8008106:	4603      	mov	r3, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <_localeconv_r>:
 8008114:	4800      	ldr	r0, [pc, #0]	@ (8008118 <_localeconv_r+0x4>)
 8008116:	4770      	bx	lr
 8008118:	2000015c 	.word	0x2000015c

0800811c <_close_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d06      	ldr	r5, [pc, #24]	@ (8008138 <_close_r+0x1c>)
 8008120:	2300      	movs	r3, #0
 8008122:	4604      	mov	r4, r0
 8008124:	4608      	mov	r0, r1
 8008126:	602b      	str	r3, [r5, #0]
 8008128:	f7f9 faf4 	bl	8001714 <_close>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_close_r+0x1a>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_close_r+0x1a>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	200009e4 	.word	0x200009e4

0800813c <_lseek_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d07      	ldr	r5, [pc, #28]	@ (800815c <_lseek_r+0x20>)
 8008140:	4604      	mov	r4, r0
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	2200      	movs	r2, #0
 8008148:	602a      	str	r2, [r5, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f7f9 faec 	bl	8001728 <_lseek>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_lseek_r+0x1e>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_lseek_r+0x1e>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	200009e4 	.word	0x200009e4

08008160 <_read_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	@ (8008180 <_read_r+0x20>)
 8008164:	4604      	mov	r4, r0
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	2200      	movs	r2, #0
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7f9 fac0 	bl	80016f4 <_read>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_read_r+0x1e>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_read_r+0x1e>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200009e4 	.word	0x200009e4

08008184 <_write_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	@ (80081a4 <_write_r+0x20>)
 8008188:	4604      	mov	r4, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7f8 fef8 	bl	8000f88 <_write>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_write_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_write_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200009e4 	.word	0x200009e4

080081a8 <__errno>:
 80081a8:	4b01      	ldr	r3, [pc, #4]	@ (80081b0 <__errno+0x8>)
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2000001c 	.word	0x2000001c

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4d0d      	ldr	r5, [pc, #52]	@ (80081ec <__libc_init_array+0x38>)
 80081b8:	4c0d      	ldr	r4, [pc, #52]	@ (80081f0 <__libc_init_array+0x3c>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	2600      	movs	r6, #0
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	4d0b      	ldr	r5, [pc, #44]	@ (80081f4 <__libc_init_array+0x40>)
 80081c6:	4c0c      	ldr	r4, [pc, #48]	@ (80081f8 <__libc_init_array+0x44>)
 80081c8:	f001 ffd4 	bl	800a174 <_init>
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	10a4      	asrs	r4, r4, #2
 80081d0:	2600      	movs	r6, #0
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	0800abd8 	.word	0x0800abd8
 80081f0:	0800abd8 	.word	0x0800abd8
 80081f4:	0800abd8 	.word	0x0800abd8
 80081f8:	0800abdc 	.word	0x0800abdc

080081fc <__retarget_lock_init_recursive>:
 80081fc:	4770      	bx	lr

080081fe <__retarget_lock_acquire_recursive>:
 80081fe:	4770      	bx	lr

08008200 <__retarget_lock_release_recursive>:
 8008200:	4770      	bx	lr

08008202 <quorem>:
 8008202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	6903      	ldr	r3, [r0, #16]
 8008208:	690c      	ldr	r4, [r1, #16]
 800820a:	42a3      	cmp	r3, r4
 800820c:	4607      	mov	r7, r0
 800820e:	db7e      	blt.n	800830e <quorem+0x10c>
 8008210:	3c01      	subs	r4, #1
 8008212:	f101 0814 	add.w	r8, r1, #20
 8008216:	00a3      	lsls	r3, r4, #2
 8008218:	f100 0514 	add.w	r5, r0, #20
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800822c:	3301      	adds	r3, #1
 800822e:	429a      	cmp	r2, r3
 8008230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008234:	fbb2 f6f3 	udiv	r6, r2, r3
 8008238:	d32e      	bcc.n	8008298 <quorem+0x96>
 800823a:	f04f 0a00 	mov.w	sl, #0
 800823e:	46c4      	mov	ip, r8
 8008240:	46ae      	mov	lr, r5
 8008242:	46d3      	mov	fp, sl
 8008244:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008248:	b298      	uxth	r0, r3
 800824a:	fb06 a000 	mla	r0, r6, r0, sl
 800824e:	0c02      	lsrs	r2, r0, #16
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	fb06 2303 	mla	r3, r6, r3, r2
 8008256:	f8de 2000 	ldr.w	r2, [lr]
 800825a:	b280      	uxth	r0, r0
 800825c:	b292      	uxth	r2, r2
 800825e:	1a12      	subs	r2, r2, r0
 8008260:	445a      	add	r2, fp
 8008262:	f8de 0000 	ldr.w	r0, [lr]
 8008266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800826a:	b29b      	uxth	r3, r3
 800826c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008270:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008274:	b292      	uxth	r2, r2
 8008276:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800827a:	45e1      	cmp	r9, ip
 800827c:	f84e 2b04 	str.w	r2, [lr], #4
 8008280:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008284:	d2de      	bcs.n	8008244 <quorem+0x42>
 8008286:	9b00      	ldr	r3, [sp, #0]
 8008288:	58eb      	ldr	r3, [r5, r3]
 800828a:	b92b      	cbnz	r3, 8008298 <quorem+0x96>
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	3b04      	subs	r3, #4
 8008290:	429d      	cmp	r5, r3
 8008292:	461a      	mov	r2, r3
 8008294:	d32f      	bcc.n	80082f6 <quorem+0xf4>
 8008296:	613c      	str	r4, [r7, #16]
 8008298:	4638      	mov	r0, r7
 800829a:	f001 f97b 	bl	8009594 <__mcmp>
 800829e:	2800      	cmp	r0, #0
 80082a0:	db25      	blt.n	80082ee <quorem+0xec>
 80082a2:	4629      	mov	r1, r5
 80082a4:	2000      	movs	r0, #0
 80082a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80082aa:	f8d1 c000 	ldr.w	ip, [r1]
 80082ae:	fa1f fe82 	uxth.w	lr, r2
 80082b2:	fa1f f38c 	uxth.w	r3, ip
 80082b6:	eba3 030e 	sub.w	r3, r3, lr
 80082ba:	4403      	add	r3, r0
 80082bc:	0c12      	lsrs	r2, r2, #16
 80082be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082cc:	45c1      	cmp	r9, r8
 80082ce:	f841 3b04 	str.w	r3, [r1], #4
 80082d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082d6:	d2e6      	bcs.n	80082a6 <quorem+0xa4>
 80082d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082e0:	b922      	cbnz	r2, 80082ec <quorem+0xea>
 80082e2:	3b04      	subs	r3, #4
 80082e4:	429d      	cmp	r5, r3
 80082e6:	461a      	mov	r2, r3
 80082e8:	d30b      	bcc.n	8008302 <quorem+0x100>
 80082ea:	613c      	str	r4, [r7, #16]
 80082ec:	3601      	adds	r6, #1
 80082ee:	4630      	mov	r0, r6
 80082f0:	b003      	add	sp, #12
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	3b04      	subs	r3, #4
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d1cb      	bne.n	8008296 <quorem+0x94>
 80082fe:	3c01      	subs	r4, #1
 8008300:	e7c6      	b.n	8008290 <quorem+0x8e>
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	3b04      	subs	r3, #4
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1ef      	bne.n	80082ea <quorem+0xe8>
 800830a:	3c01      	subs	r4, #1
 800830c:	e7ea      	b.n	80082e4 <quorem+0xe2>
 800830e:	2000      	movs	r0, #0
 8008310:	e7ee      	b.n	80082f0 <quorem+0xee>
 8008312:	0000      	movs	r0, r0
 8008314:	0000      	movs	r0, r0
	...

08008318 <_dtoa_r>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	69c7      	ldr	r7, [r0, #28]
 800831e:	b099      	sub	sp, #100	@ 0x64
 8008320:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008324:	ec55 4b10 	vmov	r4, r5, d0
 8008328:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800832a:	9109      	str	r1, [sp, #36]	@ 0x24
 800832c:	4683      	mov	fp, r0
 800832e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008330:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008332:	b97f      	cbnz	r7, 8008354 <_dtoa_r+0x3c>
 8008334:	2010      	movs	r0, #16
 8008336:	f000 fdfd 	bl	8008f34 <malloc>
 800833a:	4602      	mov	r2, r0
 800833c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008340:	b920      	cbnz	r0, 800834c <_dtoa_r+0x34>
 8008342:	4ba7      	ldr	r3, [pc, #668]	@ (80085e0 <_dtoa_r+0x2c8>)
 8008344:	21ef      	movs	r1, #239	@ 0xef
 8008346:	48a7      	ldr	r0, [pc, #668]	@ (80085e4 <_dtoa_r+0x2cc>)
 8008348:	f001 fe2e 	bl	8009fa8 <__assert_func>
 800834c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008350:	6007      	str	r7, [r0, #0]
 8008352:	60c7      	str	r7, [r0, #12]
 8008354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008358:	6819      	ldr	r1, [r3, #0]
 800835a:	b159      	cbz	r1, 8008374 <_dtoa_r+0x5c>
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	604a      	str	r2, [r1, #4]
 8008360:	2301      	movs	r3, #1
 8008362:	4093      	lsls	r3, r2
 8008364:	608b      	str	r3, [r1, #8]
 8008366:	4658      	mov	r0, fp
 8008368:	f000 feda 	bl	8009120 <_Bfree>
 800836c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	1e2b      	subs	r3, r5, #0
 8008376:	bfb9      	ittee	lt
 8008378:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800837c:	9303      	strlt	r3, [sp, #12]
 800837e:	2300      	movge	r3, #0
 8008380:	6033      	strge	r3, [r6, #0]
 8008382:	9f03      	ldr	r7, [sp, #12]
 8008384:	4b98      	ldr	r3, [pc, #608]	@ (80085e8 <_dtoa_r+0x2d0>)
 8008386:	bfbc      	itt	lt
 8008388:	2201      	movlt	r2, #1
 800838a:	6032      	strlt	r2, [r6, #0]
 800838c:	43bb      	bics	r3, r7
 800838e:	d112      	bne.n	80083b6 <_dtoa_r+0x9e>
 8008390:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008392:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800839c:	4323      	orrs	r3, r4
 800839e:	f000 854d 	beq.w	8008e3c <_dtoa_r+0xb24>
 80083a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80085fc <_dtoa_r+0x2e4>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 854f 	beq.w	8008e4c <_dtoa_r+0xb34>
 80083ae:	f10a 0303 	add.w	r3, sl, #3
 80083b2:	f000 bd49 	b.w	8008e48 <_dtoa_r+0xb30>
 80083b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	ec51 0b17 	vmov	r0, r1, d7
 80083c0:	2300      	movs	r3, #0
 80083c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083c6:	f7f8 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ca:	4680      	mov	r8, r0
 80083cc:	b158      	cbz	r0, 80083e6 <_dtoa_r+0xce>
 80083ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083d0:	2301      	movs	r3, #1
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083d6:	b113      	cbz	r3, 80083de <_dtoa_r+0xc6>
 80083d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083da:	4b84      	ldr	r3, [pc, #528]	@ (80085ec <_dtoa_r+0x2d4>)
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008600 <_dtoa_r+0x2e8>
 80083e2:	f000 bd33 	b.w	8008e4c <_dtoa_r+0xb34>
 80083e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80083ea:	aa16      	add	r2, sp, #88	@ 0x58
 80083ec:	a917      	add	r1, sp, #92	@ 0x5c
 80083ee:	4658      	mov	r0, fp
 80083f0:	f001 f980 	bl	80096f4 <__d2b>
 80083f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80083f8:	4681      	mov	r9, r0
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d077      	beq.n	80084ee <_dtoa_r+0x1d6>
 80083fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008400:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800840c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008410:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008414:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008418:	4619      	mov	r1, r3
 800841a:	2200      	movs	r2, #0
 800841c:	4b74      	ldr	r3, [pc, #464]	@ (80085f0 <_dtoa_r+0x2d8>)
 800841e:	f7f7 ff33 	bl	8000288 <__aeabi_dsub>
 8008422:	a369      	add	r3, pc, #420	@ (adr r3, 80085c8 <_dtoa_r+0x2b0>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f8 f8e6 	bl	80005f8 <__aeabi_dmul>
 800842c:	a368      	add	r3, pc, #416	@ (adr r3, 80085d0 <_dtoa_r+0x2b8>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f7 ff2b 	bl	800028c <__adddf3>
 8008436:	4604      	mov	r4, r0
 8008438:	4630      	mov	r0, r6
 800843a:	460d      	mov	r5, r1
 800843c:	f7f8 f872 	bl	8000524 <__aeabi_i2d>
 8008440:	a365      	add	r3, pc, #404	@ (adr r3, 80085d8 <_dtoa_r+0x2c0>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f8 f8d7 	bl	80005f8 <__aeabi_dmul>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f7 ff1b 	bl	800028c <__adddf3>
 8008456:	4604      	mov	r4, r0
 8008458:	460d      	mov	r5, r1
 800845a:	f7f8 fb7d 	bl	8000b58 <__aeabi_d2iz>
 800845e:	2200      	movs	r2, #0
 8008460:	4607      	mov	r7, r0
 8008462:	2300      	movs	r3, #0
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f8 fb38 	bl	8000adc <__aeabi_dcmplt>
 800846c:	b140      	cbz	r0, 8008480 <_dtoa_r+0x168>
 800846e:	4638      	mov	r0, r7
 8008470:	f7f8 f858 	bl	8000524 <__aeabi_i2d>
 8008474:	4622      	mov	r2, r4
 8008476:	462b      	mov	r3, r5
 8008478:	f7f8 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800847c:	b900      	cbnz	r0, 8008480 <_dtoa_r+0x168>
 800847e:	3f01      	subs	r7, #1
 8008480:	2f16      	cmp	r7, #22
 8008482:	d851      	bhi.n	8008528 <_dtoa_r+0x210>
 8008484:	4b5b      	ldr	r3, [pc, #364]	@ (80085f4 <_dtoa_r+0x2dc>)
 8008486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008492:	f7f8 fb23 	bl	8000adc <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	d048      	beq.n	800852c <_dtoa_r+0x214>
 800849a:	3f01      	subs	r7, #1
 800849c:	2300      	movs	r3, #0
 800849e:	9312      	str	r3, [sp, #72]	@ 0x48
 80084a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084a2:	1b9b      	subs	r3, r3, r6
 80084a4:	1e5a      	subs	r2, r3, #1
 80084a6:	bf44      	itt	mi
 80084a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80084ac:	2300      	movmi	r3, #0
 80084ae:	9208      	str	r2, [sp, #32]
 80084b0:	bf54      	ite	pl
 80084b2:	f04f 0800 	movpl.w	r8, #0
 80084b6:	9308      	strmi	r3, [sp, #32]
 80084b8:	2f00      	cmp	r7, #0
 80084ba:	db39      	blt.n	8008530 <_dtoa_r+0x218>
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084c0:	443b      	add	r3, r7
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	2300      	movs	r3, #0
 80084c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ca:	2b09      	cmp	r3, #9
 80084cc:	d864      	bhi.n	8008598 <_dtoa_r+0x280>
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	bfc4      	itt	gt
 80084d2:	3b04      	subgt	r3, #4
 80084d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d8:	f1a3 0302 	sub.w	r3, r3, #2
 80084dc:	bfcc      	ite	gt
 80084de:	2400      	movgt	r4, #0
 80084e0:	2401      	movle	r4, #1
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d863      	bhi.n	80085ae <_dtoa_r+0x296>
 80084e6:	e8df f003 	tbb	[pc, r3]
 80084ea:	372a      	.short	0x372a
 80084ec:	5535      	.short	0x5535
 80084ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80084f2:	441e      	add	r6, r3
 80084f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	bfc1      	itttt	gt
 80084fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008500:	409f      	lslgt	r7, r3
 8008502:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008506:	fa24 f303 	lsrgt.w	r3, r4, r3
 800850a:	bfd6      	itet	le
 800850c:	f1c3 0320 	rsble	r3, r3, #32
 8008510:	ea47 0003 	orrgt.w	r0, r7, r3
 8008514:	fa04 f003 	lslle.w	r0, r4, r3
 8008518:	f7f7 fff4 	bl	8000504 <__aeabi_ui2d>
 800851c:	2201      	movs	r2, #1
 800851e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008522:	3e01      	subs	r6, #1
 8008524:	9214      	str	r2, [sp, #80]	@ 0x50
 8008526:	e777      	b.n	8008418 <_dtoa_r+0x100>
 8008528:	2301      	movs	r3, #1
 800852a:	e7b8      	b.n	800849e <_dtoa_r+0x186>
 800852c:	9012      	str	r0, [sp, #72]	@ 0x48
 800852e:	e7b7      	b.n	80084a0 <_dtoa_r+0x188>
 8008530:	427b      	negs	r3, r7
 8008532:	930a      	str	r3, [sp, #40]	@ 0x28
 8008534:	2300      	movs	r3, #0
 8008536:	eba8 0807 	sub.w	r8, r8, r7
 800853a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800853c:	e7c4      	b.n	80084c8 <_dtoa_r+0x1b0>
 800853e:	2300      	movs	r3, #0
 8008540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008544:	2b00      	cmp	r3, #0
 8008546:	dc35      	bgt.n	80085b4 <_dtoa_r+0x29c>
 8008548:	2301      	movs	r3, #1
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	9307      	str	r3, [sp, #28]
 800854e:	461a      	mov	r2, r3
 8008550:	920e      	str	r2, [sp, #56]	@ 0x38
 8008552:	e00b      	b.n	800856c <_dtoa_r+0x254>
 8008554:	2301      	movs	r3, #1
 8008556:	e7f3      	b.n	8008540 <_dtoa_r+0x228>
 8008558:	2300      	movs	r3, #0
 800855a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800855c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	2b01      	cmp	r3, #1
 8008566:	9307      	str	r3, [sp, #28]
 8008568:	bfb8      	it	lt
 800856a:	2301      	movlt	r3, #1
 800856c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008570:	2100      	movs	r1, #0
 8008572:	2204      	movs	r2, #4
 8008574:	f102 0514 	add.w	r5, r2, #20
 8008578:	429d      	cmp	r5, r3
 800857a:	d91f      	bls.n	80085bc <_dtoa_r+0x2a4>
 800857c:	6041      	str	r1, [r0, #4]
 800857e:	4658      	mov	r0, fp
 8008580:	f000 fd8e 	bl	80090a0 <_Balloc>
 8008584:	4682      	mov	sl, r0
 8008586:	2800      	cmp	r0, #0
 8008588:	d13c      	bne.n	8008604 <_dtoa_r+0x2ec>
 800858a:	4b1b      	ldr	r3, [pc, #108]	@ (80085f8 <_dtoa_r+0x2e0>)
 800858c:	4602      	mov	r2, r0
 800858e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008592:	e6d8      	b.n	8008346 <_dtoa_r+0x2e>
 8008594:	2301      	movs	r3, #1
 8008596:	e7e0      	b.n	800855a <_dtoa_r+0x242>
 8008598:	2401      	movs	r4, #1
 800859a:	2300      	movs	r3, #0
 800859c:	9309      	str	r3, [sp, #36]	@ 0x24
 800859e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	9307      	str	r3, [sp, #28]
 80085a8:	2200      	movs	r2, #0
 80085aa:	2312      	movs	r3, #18
 80085ac:	e7d0      	b.n	8008550 <_dtoa_r+0x238>
 80085ae:	2301      	movs	r3, #1
 80085b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b2:	e7f5      	b.n	80085a0 <_dtoa_r+0x288>
 80085b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	e7d7      	b.n	800856c <_dtoa_r+0x254>
 80085bc:	3101      	adds	r1, #1
 80085be:	0052      	lsls	r2, r2, #1
 80085c0:	e7d8      	b.n	8008574 <_dtoa_r+0x25c>
 80085c2:	bf00      	nop
 80085c4:	f3af 8000 	nop.w
 80085c8:	636f4361 	.word	0x636f4361
 80085cc:	3fd287a7 	.word	0x3fd287a7
 80085d0:	8b60c8b3 	.word	0x8b60c8b3
 80085d4:	3fc68a28 	.word	0x3fc68a28
 80085d8:	509f79fb 	.word	0x509f79fb
 80085dc:	3fd34413 	.word	0x3fd34413
 80085e0:	0800a89d 	.word	0x0800a89d
 80085e4:	0800a8b4 	.word	0x0800a8b4
 80085e8:	7ff00000 	.word	0x7ff00000
 80085ec:	0800a86d 	.word	0x0800a86d
 80085f0:	3ff80000 	.word	0x3ff80000
 80085f4:	0800a9b0 	.word	0x0800a9b0
 80085f8:	0800a90c 	.word	0x0800a90c
 80085fc:	0800a899 	.word	0x0800a899
 8008600:	0800a86c 	.word	0x0800a86c
 8008604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008608:	6018      	str	r0, [r3, #0]
 800860a:	9b07      	ldr	r3, [sp, #28]
 800860c:	2b0e      	cmp	r3, #14
 800860e:	f200 80a4 	bhi.w	800875a <_dtoa_r+0x442>
 8008612:	2c00      	cmp	r4, #0
 8008614:	f000 80a1 	beq.w	800875a <_dtoa_r+0x442>
 8008618:	2f00      	cmp	r7, #0
 800861a:	dd33      	ble.n	8008684 <_dtoa_r+0x36c>
 800861c:	4bad      	ldr	r3, [pc, #692]	@ (80088d4 <_dtoa_r+0x5bc>)
 800861e:	f007 020f 	and.w	r2, r7, #15
 8008622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008626:	ed93 7b00 	vldr	d7, [r3]
 800862a:	05f8      	lsls	r0, r7, #23
 800862c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008630:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008634:	d516      	bpl.n	8008664 <_dtoa_r+0x34c>
 8008636:	4ba8      	ldr	r3, [pc, #672]	@ (80088d8 <_dtoa_r+0x5c0>)
 8008638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800863c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008640:	f7f8 f904 	bl	800084c <__aeabi_ddiv>
 8008644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008648:	f004 040f 	and.w	r4, r4, #15
 800864c:	2603      	movs	r6, #3
 800864e:	4da2      	ldr	r5, [pc, #648]	@ (80088d8 <_dtoa_r+0x5c0>)
 8008650:	b954      	cbnz	r4, 8008668 <_dtoa_r+0x350>
 8008652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865a:	f7f8 f8f7 	bl	800084c <__aeabi_ddiv>
 800865e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008662:	e028      	b.n	80086b6 <_dtoa_r+0x39e>
 8008664:	2602      	movs	r6, #2
 8008666:	e7f2      	b.n	800864e <_dtoa_r+0x336>
 8008668:	07e1      	lsls	r1, r4, #31
 800866a:	d508      	bpl.n	800867e <_dtoa_r+0x366>
 800866c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008674:	f7f7 ffc0 	bl	80005f8 <__aeabi_dmul>
 8008678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800867c:	3601      	adds	r6, #1
 800867e:	1064      	asrs	r4, r4, #1
 8008680:	3508      	adds	r5, #8
 8008682:	e7e5      	b.n	8008650 <_dtoa_r+0x338>
 8008684:	f000 80d2 	beq.w	800882c <_dtoa_r+0x514>
 8008688:	427c      	negs	r4, r7
 800868a:	4b92      	ldr	r3, [pc, #584]	@ (80088d4 <_dtoa_r+0x5bc>)
 800868c:	4d92      	ldr	r5, [pc, #584]	@ (80088d8 <_dtoa_r+0x5c0>)
 800868e:	f004 020f 	and.w	r2, r4, #15
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a6:	1124      	asrs	r4, r4, #4
 80086a8:	2300      	movs	r3, #0
 80086aa:	2602      	movs	r6, #2
 80086ac:	2c00      	cmp	r4, #0
 80086ae:	f040 80b2 	bne.w	8008816 <_dtoa_r+0x4fe>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1d3      	bne.n	800865e <_dtoa_r+0x346>
 80086b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80b7 	beq.w	8008830 <_dtoa_r+0x518>
 80086c2:	4b86      	ldr	r3, [pc, #536]	@ (80088dc <_dtoa_r+0x5c4>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f8 fa07 	bl	8000adc <__aeabi_dcmplt>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f000 80ae 	beq.w	8008830 <_dtoa_r+0x518>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80aa 	beq.w	8008830 <_dtoa_r+0x518>
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dd37      	ble.n	8008752 <_dtoa_r+0x43a>
 80086e2:	1e7b      	subs	r3, r7, #1
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	4620      	mov	r0, r4
 80086e8:	4b7d      	ldr	r3, [pc, #500]	@ (80088e0 <_dtoa_r+0x5c8>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f7 ff83 	bl	80005f8 <__aeabi_dmul>
 80086f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f6:	9c00      	ldr	r4, [sp, #0]
 80086f8:	3601      	adds	r6, #1
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7f7 ff12 	bl	8000524 <__aeabi_i2d>
 8008700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008704:	f7f7 ff78 	bl	80005f8 <__aeabi_dmul>
 8008708:	4b76      	ldr	r3, [pc, #472]	@ (80088e4 <_dtoa_r+0x5cc>)
 800870a:	2200      	movs	r2, #0
 800870c:	f7f7 fdbe 	bl	800028c <__adddf3>
 8008710:	4605      	mov	r5, r0
 8008712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008716:	2c00      	cmp	r4, #0
 8008718:	f040 808d 	bne.w	8008836 <_dtoa_r+0x51e>
 800871c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008720:	4b71      	ldr	r3, [pc, #452]	@ (80088e8 <_dtoa_r+0x5d0>)
 8008722:	2200      	movs	r2, #0
 8008724:	f7f7 fdb0 	bl	8000288 <__aeabi_dsub>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008730:	462a      	mov	r2, r5
 8008732:	4633      	mov	r3, r6
 8008734:	f7f8 f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 8008738:	2800      	cmp	r0, #0
 800873a:	f040 828b 	bne.w	8008c54 <_dtoa_r+0x93c>
 800873e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008742:	462a      	mov	r2, r5
 8008744:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008748:	f7f8 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 8128 	bne.w	80089a2 <_dtoa_r+0x68a>
 8008752:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008756:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800875a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800875c:	2b00      	cmp	r3, #0
 800875e:	f2c0 815a 	blt.w	8008a16 <_dtoa_r+0x6fe>
 8008762:	2f0e      	cmp	r7, #14
 8008764:	f300 8157 	bgt.w	8008a16 <_dtoa_r+0x6fe>
 8008768:	4b5a      	ldr	r3, [pc, #360]	@ (80088d4 <_dtoa_r+0x5bc>)
 800876a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800876e:	ed93 7b00 	vldr	d7, [r3]
 8008772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008774:	2b00      	cmp	r3, #0
 8008776:	ed8d 7b00 	vstr	d7, [sp]
 800877a:	da03      	bge.n	8008784 <_dtoa_r+0x46c>
 800877c:	9b07      	ldr	r3, [sp, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f340 8101 	ble.w	8008986 <_dtoa_r+0x66e>
 8008784:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008788:	4656      	mov	r6, sl
 800878a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878e:	4620      	mov	r0, r4
 8008790:	4629      	mov	r1, r5
 8008792:	f7f8 f85b 	bl	800084c <__aeabi_ddiv>
 8008796:	f7f8 f9df 	bl	8000b58 <__aeabi_d2iz>
 800879a:	4680      	mov	r8, r0
 800879c:	f7f7 fec2 	bl	8000524 <__aeabi_i2d>
 80087a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087a4:	f7f7 ff28 	bl	80005f8 <__aeabi_dmul>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087b4:	f7f7 fd68 	bl	8000288 <__aeabi_dsub>
 80087b8:	f806 4b01 	strb.w	r4, [r6], #1
 80087bc:	9d07      	ldr	r5, [sp, #28]
 80087be:	eba6 040a 	sub.w	r4, r6, sl
 80087c2:	42a5      	cmp	r5, r4
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	f040 8117 	bne.w	80089fa <_dtoa_r+0x6e2>
 80087cc:	f7f7 fd5e 	bl	800028c <__adddf3>
 80087d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087d4:	4604      	mov	r4, r0
 80087d6:	460d      	mov	r5, r1
 80087d8:	f7f8 f99e 	bl	8000b18 <__aeabi_dcmpgt>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f040 80f9 	bne.w	80089d4 <_dtoa_r+0x6bc>
 80087e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e6:	4620      	mov	r0, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f8 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ee:	b118      	cbz	r0, 80087f8 <_dtoa_r+0x4e0>
 80087f0:	f018 0f01 	tst.w	r8, #1
 80087f4:	f040 80ee 	bne.w	80089d4 <_dtoa_r+0x6bc>
 80087f8:	4649      	mov	r1, r9
 80087fa:	4658      	mov	r0, fp
 80087fc:	f000 fc90 	bl	8009120 <_Bfree>
 8008800:	2300      	movs	r3, #0
 8008802:	7033      	strb	r3, [r6, #0]
 8008804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008806:	3701      	adds	r7, #1
 8008808:	601f      	str	r7, [r3, #0]
 800880a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 831d 	beq.w	8008e4c <_dtoa_r+0xb34>
 8008812:	601e      	str	r6, [r3, #0]
 8008814:	e31a      	b.n	8008e4c <_dtoa_r+0xb34>
 8008816:	07e2      	lsls	r2, r4, #31
 8008818:	d505      	bpl.n	8008826 <_dtoa_r+0x50e>
 800881a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800881e:	f7f7 feeb 	bl	80005f8 <__aeabi_dmul>
 8008822:	3601      	adds	r6, #1
 8008824:	2301      	movs	r3, #1
 8008826:	1064      	asrs	r4, r4, #1
 8008828:	3508      	adds	r5, #8
 800882a:	e73f      	b.n	80086ac <_dtoa_r+0x394>
 800882c:	2602      	movs	r6, #2
 800882e:	e742      	b.n	80086b6 <_dtoa_r+0x39e>
 8008830:	9c07      	ldr	r4, [sp, #28]
 8008832:	9704      	str	r7, [sp, #16]
 8008834:	e761      	b.n	80086fa <_dtoa_r+0x3e2>
 8008836:	4b27      	ldr	r3, [pc, #156]	@ (80088d4 <_dtoa_r+0x5bc>)
 8008838:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800883a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800883e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008842:	4454      	add	r4, sl
 8008844:	2900      	cmp	r1, #0
 8008846:	d053      	beq.n	80088f0 <_dtoa_r+0x5d8>
 8008848:	4928      	ldr	r1, [pc, #160]	@ (80088ec <_dtoa_r+0x5d4>)
 800884a:	2000      	movs	r0, #0
 800884c:	f7f7 fffe 	bl	800084c <__aeabi_ddiv>
 8008850:	4633      	mov	r3, r6
 8008852:	462a      	mov	r2, r5
 8008854:	f7f7 fd18 	bl	8000288 <__aeabi_dsub>
 8008858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800885c:	4656      	mov	r6, sl
 800885e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008862:	f7f8 f979 	bl	8000b58 <__aeabi_d2iz>
 8008866:	4605      	mov	r5, r0
 8008868:	f7f7 fe5c 	bl	8000524 <__aeabi_i2d>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008874:	f7f7 fd08 	bl	8000288 <__aeabi_dsub>
 8008878:	3530      	adds	r5, #48	@ 0x30
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008882:	f806 5b01 	strb.w	r5, [r6], #1
 8008886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800888a:	f7f8 f927 	bl	8000adc <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	d171      	bne.n	8008976 <_dtoa_r+0x65e>
 8008892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008896:	4911      	ldr	r1, [pc, #68]	@ (80088dc <_dtoa_r+0x5c4>)
 8008898:	2000      	movs	r0, #0
 800889a:	f7f7 fcf5 	bl	8000288 <__aeabi_dsub>
 800889e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088a2:	f7f8 f91b 	bl	8000adc <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f040 8095 	bne.w	80089d6 <_dtoa_r+0x6be>
 80088ac:	42a6      	cmp	r6, r4
 80088ae:	f43f af50 	beq.w	8008752 <_dtoa_r+0x43a>
 80088b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088b6:	4b0a      	ldr	r3, [pc, #40]	@ (80088e0 <_dtoa_r+0x5c8>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	f7f7 fe9d 	bl	80005f8 <__aeabi_dmul>
 80088be:	4b08      	ldr	r3, [pc, #32]	@ (80088e0 <_dtoa_r+0x5c8>)
 80088c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088c4:	2200      	movs	r2, #0
 80088c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ca:	f7f7 fe95 	bl	80005f8 <__aeabi_dmul>
 80088ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d2:	e7c4      	b.n	800885e <_dtoa_r+0x546>
 80088d4:	0800a9b0 	.word	0x0800a9b0
 80088d8:	0800a988 	.word	0x0800a988
 80088dc:	3ff00000 	.word	0x3ff00000
 80088e0:	40240000 	.word	0x40240000
 80088e4:	401c0000 	.word	0x401c0000
 80088e8:	40140000 	.word	0x40140000
 80088ec:	3fe00000 	.word	0x3fe00000
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7f7 fe80 	bl	80005f8 <__aeabi_dmul>
 80088f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80088fe:	4656      	mov	r6, sl
 8008900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008904:	f7f8 f928 	bl	8000b58 <__aeabi_d2iz>
 8008908:	4605      	mov	r5, r0
 800890a:	f7f7 fe0b 	bl	8000524 <__aeabi_i2d>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008916:	f7f7 fcb7 	bl	8000288 <__aeabi_dsub>
 800891a:	3530      	adds	r5, #48	@ 0x30
 800891c:	f806 5b01 	strb.w	r5, [r6], #1
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	42a6      	cmp	r6, r4
 8008926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	d124      	bne.n	800897a <_dtoa_r+0x662>
 8008930:	4bac      	ldr	r3, [pc, #688]	@ (8008be4 <_dtoa_r+0x8cc>)
 8008932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008936:	f7f7 fca9 	bl	800028c <__adddf3>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008942:	f7f8 f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 8008946:	2800      	cmp	r0, #0
 8008948:	d145      	bne.n	80089d6 <_dtoa_r+0x6be>
 800894a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800894e:	49a5      	ldr	r1, [pc, #660]	@ (8008be4 <_dtoa_r+0x8cc>)
 8008950:	2000      	movs	r0, #0
 8008952:	f7f7 fc99 	bl	8000288 <__aeabi_dsub>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895e:	f7f8 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8008962:	2800      	cmp	r0, #0
 8008964:	f43f aef5 	beq.w	8008752 <_dtoa_r+0x43a>
 8008968:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800896a:	1e73      	subs	r3, r6, #1
 800896c:	9315      	str	r3, [sp, #84]	@ 0x54
 800896e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008972:	2b30      	cmp	r3, #48	@ 0x30
 8008974:	d0f8      	beq.n	8008968 <_dtoa_r+0x650>
 8008976:	9f04      	ldr	r7, [sp, #16]
 8008978:	e73e      	b.n	80087f8 <_dtoa_r+0x4e0>
 800897a:	4b9b      	ldr	r3, [pc, #620]	@ (8008be8 <_dtoa_r+0x8d0>)
 800897c:	f7f7 fe3c 	bl	80005f8 <__aeabi_dmul>
 8008980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008984:	e7bc      	b.n	8008900 <_dtoa_r+0x5e8>
 8008986:	d10c      	bne.n	80089a2 <_dtoa_r+0x68a>
 8008988:	4b98      	ldr	r3, [pc, #608]	@ (8008bec <_dtoa_r+0x8d4>)
 800898a:	2200      	movs	r2, #0
 800898c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008990:	f7f7 fe32 	bl	80005f8 <__aeabi_dmul>
 8008994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008998:	f7f8 f8b4 	bl	8000b04 <__aeabi_dcmpge>
 800899c:	2800      	cmp	r0, #0
 800899e:	f000 8157 	beq.w	8008c50 <_dtoa_r+0x938>
 80089a2:	2400      	movs	r4, #0
 80089a4:	4625      	mov	r5, r4
 80089a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089a8:	43db      	mvns	r3, r3
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	4656      	mov	r6, sl
 80089ae:	2700      	movs	r7, #0
 80089b0:	4621      	mov	r1, r4
 80089b2:	4658      	mov	r0, fp
 80089b4:	f000 fbb4 	bl	8009120 <_Bfree>
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	d0dc      	beq.n	8008976 <_dtoa_r+0x65e>
 80089bc:	b12f      	cbz	r7, 80089ca <_dtoa_r+0x6b2>
 80089be:	42af      	cmp	r7, r5
 80089c0:	d003      	beq.n	80089ca <_dtoa_r+0x6b2>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4658      	mov	r0, fp
 80089c6:	f000 fbab 	bl	8009120 <_Bfree>
 80089ca:	4629      	mov	r1, r5
 80089cc:	4658      	mov	r0, fp
 80089ce:	f000 fba7 	bl	8009120 <_Bfree>
 80089d2:	e7d0      	b.n	8008976 <_dtoa_r+0x65e>
 80089d4:	9704      	str	r7, [sp, #16]
 80089d6:	4633      	mov	r3, r6
 80089d8:	461e      	mov	r6, r3
 80089da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089de:	2a39      	cmp	r2, #57	@ 0x39
 80089e0:	d107      	bne.n	80089f2 <_dtoa_r+0x6da>
 80089e2:	459a      	cmp	sl, r3
 80089e4:	d1f8      	bne.n	80089d8 <_dtoa_r+0x6c0>
 80089e6:	9a04      	ldr	r2, [sp, #16]
 80089e8:	3201      	adds	r2, #1
 80089ea:	9204      	str	r2, [sp, #16]
 80089ec:	2230      	movs	r2, #48	@ 0x30
 80089ee:	f88a 2000 	strb.w	r2, [sl]
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	3201      	adds	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e7bd      	b.n	8008976 <_dtoa_r+0x65e>
 80089fa:	4b7b      	ldr	r3, [pc, #492]	@ (8008be8 <_dtoa_r+0x8d0>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	f7f8 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f aebb 	beq.w	800878a <_dtoa_r+0x472>
 8008a14:	e6f0      	b.n	80087f8 <_dtoa_r+0x4e0>
 8008a16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	f000 80db 	beq.w	8008bd4 <_dtoa_r+0x8bc>
 8008a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a20:	2a01      	cmp	r2, #1
 8008a22:	f300 80bf 	bgt.w	8008ba4 <_dtoa_r+0x88c>
 8008a26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a28:	2a00      	cmp	r2, #0
 8008a2a:	f000 80b7 	beq.w	8008b9c <_dtoa_r+0x884>
 8008a2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a34:	4646      	mov	r6, r8
 8008a36:	9a08      	ldr	r2, [sp, #32]
 8008a38:	2101      	movs	r1, #1
 8008a3a:	441a      	add	r2, r3
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	4498      	add	r8, r3
 8008a40:	9208      	str	r2, [sp, #32]
 8008a42:	f000 fc21 	bl	8009288 <__i2b>
 8008a46:	4605      	mov	r5, r0
 8008a48:	b15e      	cbz	r6, 8008a62 <_dtoa_r+0x74a>
 8008a4a:	9b08      	ldr	r3, [sp, #32]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd08      	ble.n	8008a62 <_dtoa_r+0x74a>
 8008a50:	42b3      	cmp	r3, r6
 8008a52:	9a08      	ldr	r2, [sp, #32]
 8008a54:	bfa8      	it	ge
 8008a56:	4633      	movge	r3, r6
 8008a58:	eba8 0803 	sub.w	r8, r8, r3
 8008a5c:	1af6      	subs	r6, r6, r3
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a64:	b1f3      	cbz	r3, 8008aa4 <_dtoa_r+0x78c>
 8008a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80b7 	beq.w	8008bdc <_dtoa_r+0x8c4>
 8008a6e:	b18c      	cbz	r4, 8008a94 <_dtoa_r+0x77c>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4622      	mov	r2, r4
 8008a74:	4658      	mov	r0, fp
 8008a76:	f000 fcc7 	bl	8009408 <__pow5mult>
 8008a7a:	464a      	mov	r2, r9
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	4605      	mov	r5, r0
 8008a80:	4658      	mov	r0, fp
 8008a82:	f000 fc17 	bl	80092b4 <__multiply>
 8008a86:	4649      	mov	r1, r9
 8008a88:	9004      	str	r0, [sp, #16]
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	f000 fb48 	bl	8009120 <_Bfree>
 8008a90:	9b04      	ldr	r3, [sp, #16]
 8008a92:	4699      	mov	r9, r3
 8008a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a96:	1b1a      	subs	r2, r3, r4
 8008a98:	d004      	beq.n	8008aa4 <_dtoa_r+0x78c>
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4658      	mov	r0, fp
 8008a9e:	f000 fcb3 	bl	8009408 <__pow5mult>
 8008aa2:	4681      	mov	r9, r0
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	4658      	mov	r0, fp
 8008aa8:	f000 fbee 	bl	8009288 <__i2b>
 8008aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aae:	4604      	mov	r4, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 81cf 	beq.w	8008e54 <_dtoa_r+0xb3c>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4601      	mov	r1, r0
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 fca4 	bl	8009408 <__pow5mult>
 8008ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	f300 8095 	bgt.w	8008bf4 <_dtoa_r+0x8dc>
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 8087 	bne.w	8008be0 <_dtoa_r+0x8c8>
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f040 8089 	bne.w	8008bf0 <_dtoa_r+0x8d8>
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	0d1b      	lsrs	r3, r3, #20
 8008ae6:	051b      	lsls	r3, r3, #20
 8008ae8:	b12b      	cbz	r3, 8008af6 <_dtoa_r+0x7de>
 8008aea:	9b08      	ldr	r3, [sp, #32]
 8008aec:	3301      	adds	r3, #1
 8008aee:	9308      	str	r3, [sp, #32]
 8008af0:	f108 0801 	add.w	r8, r8, #1
 8008af4:	2301      	movs	r3, #1
 8008af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 81b0 	beq.w	8008e60 <_dtoa_r+0xb48>
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b06:	6918      	ldr	r0, [r3, #16]
 8008b08:	f000 fb72 	bl	80091f0 <__hi0bits>
 8008b0c:	f1c0 0020 	rsb	r0, r0, #32
 8008b10:	9b08      	ldr	r3, [sp, #32]
 8008b12:	4418      	add	r0, r3
 8008b14:	f010 001f 	ands.w	r0, r0, #31
 8008b18:	d077      	beq.n	8008c0a <_dtoa_r+0x8f2>
 8008b1a:	f1c0 0320 	rsb	r3, r0, #32
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	dd6b      	ble.n	8008bfa <_dtoa_r+0x8e2>
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	f1c0 001c 	rsb	r0, r0, #28
 8008b28:	4403      	add	r3, r0
 8008b2a:	4480      	add	r8, r0
 8008b2c:	4406      	add	r6, r0
 8008b2e:	9308      	str	r3, [sp, #32]
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	dd05      	ble.n	8008b42 <_dtoa_r+0x82a>
 8008b36:	4649      	mov	r1, r9
 8008b38:	4642      	mov	r2, r8
 8008b3a:	4658      	mov	r0, fp
 8008b3c:	f000 fcbe 	bl	80094bc <__lshift>
 8008b40:	4681      	mov	r9, r0
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dd05      	ble.n	8008b54 <_dtoa_r+0x83c>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	f000 fcb5 	bl	80094bc <__lshift>
 8008b52:	4604      	mov	r4, r0
 8008b54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d059      	beq.n	8008c0e <_dtoa_r+0x8f6>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f000 fd19 	bl	8009594 <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	da53      	bge.n	8008c0e <_dtoa_r+0x8f6>
 8008b66:	1e7b      	subs	r3, r7, #1
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	220a      	movs	r2, #10
 8008b70:	4658      	mov	r0, fp
 8008b72:	f000 faf7 	bl	8009164 <__multadd>
 8008b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b78:	4681      	mov	r9, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 8172 	beq.w	8008e64 <_dtoa_r+0xb4c>
 8008b80:	2300      	movs	r3, #0
 8008b82:	4629      	mov	r1, r5
 8008b84:	220a      	movs	r2, #10
 8008b86:	4658      	mov	r0, fp
 8008b88:	f000 faec 	bl	8009164 <__multadd>
 8008b8c:	9b00      	ldr	r3, [sp, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	4605      	mov	r5, r0
 8008b92:	dc67      	bgt.n	8008c64 <_dtoa_r+0x94c>
 8008b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	dc41      	bgt.n	8008c1e <_dtoa_r+0x906>
 8008b9a:	e063      	b.n	8008c64 <_dtoa_r+0x94c>
 8008b9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008ba2:	e746      	b.n	8008a32 <_dtoa_r+0x71a>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	1e5c      	subs	r4, r3, #1
 8008ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	bfbf      	itttt	lt
 8008bae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bb4:	1ae3      	sublt	r3, r4, r3
 8008bb6:	bfb4      	ite	lt
 8008bb8:	18d2      	addlt	r2, r2, r3
 8008bba:	1b1c      	subge	r4, r3, r4
 8008bbc:	9b07      	ldr	r3, [sp, #28]
 8008bbe:	bfbc      	itt	lt
 8008bc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008bc2:	2400      	movlt	r4, #0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bfb5      	itete	lt
 8008bc8:	eba8 0603 	sublt.w	r6, r8, r3
 8008bcc:	9b07      	ldrge	r3, [sp, #28]
 8008bce:	2300      	movlt	r3, #0
 8008bd0:	4646      	movge	r6, r8
 8008bd2:	e730      	b.n	8008a36 <_dtoa_r+0x71e>
 8008bd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008bd8:	4646      	mov	r6, r8
 8008bda:	e735      	b.n	8008a48 <_dtoa_r+0x730>
 8008bdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bde:	e75c      	b.n	8008a9a <_dtoa_r+0x782>
 8008be0:	2300      	movs	r3, #0
 8008be2:	e788      	b.n	8008af6 <_dtoa_r+0x7de>
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	40240000 	.word	0x40240000
 8008bec:	40140000 	.word	0x40140000
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	e780      	b.n	8008af6 <_dtoa_r+0x7de>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bf8:	e782      	b.n	8008b00 <_dtoa_r+0x7e8>
 8008bfa:	d099      	beq.n	8008b30 <_dtoa_r+0x818>
 8008bfc:	9a08      	ldr	r2, [sp, #32]
 8008bfe:	331c      	adds	r3, #28
 8008c00:	441a      	add	r2, r3
 8008c02:	4498      	add	r8, r3
 8008c04:	441e      	add	r6, r3
 8008c06:	9208      	str	r2, [sp, #32]
 8008c08:	e792      	b.n	8008b30 <_dtoa_r+0x818>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	e7f6      	b.n	8008bfc <_dtoa_r+0x8e4>
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	9704      	str	r7, [sp, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	dc20      	bgt.n	8008c58 <_dtoa_r+0x940>
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	dd1e      	ble.n	8008c5c <_dtoa_r+0x944>
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f47f aec0 	bne.w	80089a6 <_dtoa_r+0x68e>
 8008c26:	4621      	mov	r1, r4
 8008c28:	2205      	movs	r2, #5
 8008c2a:	4658      	mov	r0, fp
 8008c2c:	f000 fa9a 	bl	8009164 <__multadd>
 8008c30:	4601      	mov	r1, r0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4648      	mov	r0, r9
 8008c36:	f000 fcad 	bl	8009594 <__mcmp>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f77f aeb3 	ble.w	80089a6 <_dtoa_r+0x68e>
 8008c40:	4656      	mov	r6, sl
 8008c42:	2331      	movs	r3, #49	@ 0x31
 8008c44:	f806 3b01 	strb.w	r3, [r6], #1
 8008c48:	9b04      	ldr	r3, [sp, #16]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	e6ae      	b.n	80089ae <_dtoa_r+0x696>
 8008c50:	9c07      	ldr	r4, [sp, #28]
 8008c52:	9704      	str	r7, [sp, #16]
 8008c54:	4625      	mov	r5, r4
 8008c56:	e7f3      	b.n	8008c40 <_dtoa_r+0x928>
 8008c58:	9b07      	ldr	r3, [sp, #28]
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 8104 	beq.w	8008e6c <_dtoa_r+0xb54>
 8008c64:	2e00      	cmp	r6, #0
 8008c66:	dd05      	ble.n	8008c74 <_dtoa_r+0x95c>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	4658      	mov	r0, fp
 8008c6e:	f000 fc25 	bl	80094bc <__lshift>
 8008c72:	4605      	mov	r5, r0
 8008c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d05a      	beq.n	8008d30 <_dtoa_r+0xa18>
 8008c7a:	6869      	ldr	r1, [r5, #4]
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	f000 fa0f 	bl	80090a0 <_Balloc>
 8008c82:	4606      	mov	r6, r0
 8008c84:	b928      	cbnz	r0, 8008c92 <_dtoa_r+0x97a>
 8008c86:	4b84      	ldr	r3, [pc, #528]	@ (8008e98 <_dtoa_r+0xb80>)
 8008c88:	4602      	mov	r2, r0
 8008c8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c8e:	f7ff bb5a 	b.w	8008346 <_dtoa_r+0x2e>
 8008c92:	692a      	ldr	r2, [r5, #16]
 8008c94:	3202      	adds	r2, #2
 8008c96:	0092      	lsls	r2, r2, #2
 8008c98:	f105 010c 	add.w	r1, r5, #12
 8008c9c:	300c      	adds	r0, #12
 8008c9e:	f001 f975 	bl	8009f8c <memcpy>
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4658      	mov	r0, fp
 8008ca8:	f000 fc08 	bl	80094bc <__lshift>
 8008cac:	f10a 0301 	add.w	r3, sl, #1
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	4453      	add	r3, sl
 8008cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	462f      	mov	r7, r5
 8008cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	9b07      	ldr	r3, [sp, #28]
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	4648      	mov	r0, r9
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	f7ff fa98 	bl	8008202 <quorem>
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	9002      	str	r0, [sp, #8]
 8008cd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cda:	4648      	mov	r0, r9
 8008cdc:	f000 fc5a 	bl	8009594 <__mcmp>
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	9008      	str	r0, [sp, #32]
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	f000 fc70 	bl	80095cc <__mdiff>
 8008cec:	68c2      	ldr	r2, [r0, #12]
 8008cee:	4606      	mov	r6, r0
 8008cf0:	bb02      	cbnz	r2, 8008d34 <_dtoa_r+0xa1c>
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fc4d 	bl	8009594 <__mcmp>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4658      	mov	r0, fp
 8008d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d02:	f000 fa0d 	bl	8009120 <_Bfree>
 8008d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d0a:	9e07      	ldr	r6, [sp, #28]
 8008d0c:	ea43 0102 	orr.w	r1, r3, r2
 8008d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d12:	4319      	orrs	r1, r3
 8008d14:	d110      	bne.n	8008d38 <_dtoa_r+0xa20>
 8008d16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d1a:	d029      	beq.n	8008d70 <_dtoa_r+0xa58>
 8008d1c:	9b08      	ldr	r3, [sp, #32]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd02      	ble.n	8008d28 <_dtoa_r+0xa10>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d28:	9b00      	ldr	r3, [sp, #0]
 8008d2a:	f883 8000 	strb.w	r8, [r3]
 8008d2e:	e63f      	b.n	80089b0 <_dtoa_r+0x698>
 8008d30:	4628      	mov	r0, r5
 8008d32:	e7bb      	b.n	8008cac <_dtoa_r+0x994>
 8008d34:	2201      	movs	r2, #1
 8008d36:	e7e1      	b.n	8008cfc <_dtoa_r+0x9e4>
 8008d38:	9b08      	ldr	r3, [sp, #32]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db04      	blt.n	8008d48 <_dtoa_r+0xa30>
 8008d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d40:	430b      	orrs	r3, r1
 8008d42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d44:	430b      	orrs	r3, r1
 8008d46:	d120      	bne.n	8008d8a <_dtoa_r+0xa72>
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	dded      	ble.n	8008d28 <_dtoa_r+0xa10>
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4658      	mov	r0, fp
 8008d52:	f000 fbb3 	bl	80094bc <__lshift>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4681      	mov	r9, r0
 8008d5a:	f000 fc1b 	bl	8009594 <__mcmp>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	dc03      	bgt.n	8008d6a <_dtoa_r+0xa52>
 8008d62:	d1e1      	bne.n	8008d28 <_dtoa_r+0xa10>
 8008d64:	f018 0f01 	tst.w	r8, #1
 8008d68:	d0de      	beq.n	8008d28 <_dtoa_r+0xa10>
 8008d6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d6e:	d1d8      	bne.n	8008d22 <_dtoa_r+0xa0a>
 8008d70:	9a00      	ldr	r2, [sp, #0]
 8008d72:	2339      	movs	r3, #57	@ 0x39
 8008d74:	7013      	strb	r3, [r2, #0]
 8008d76:	4633      	mov	r3, r6
 8008d78:	461e      	mov	r6, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d80:	2a39      	cmp	r2, #57	@ 0x39
 8008d82:	d052      	beq.n	8008e2a <_dtoa_r+0xb12>
 8008d84:	3201      	adds	r2, #1
 8008d86:	701a      	strb	r2, [r3, #0]
 8008d88:	e612      	b.n	80089b0 <_dtoa_r+0x698>
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	dd07      	ble.n	8008d9e <_dtoa_r+0xa86>
 8008d8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d92:	d0ed      	beq.n	8008d70 <_dtoa_r+0xa58>
 8008d94:	9a00      	ldr	r2, [sp, #0]
 8008d96:	f108 0301 	add.w	r3, r8, #1
 8008d9a:	7013      	strb	r3, [r2, #0]
 8008d9c:	e608      	b.n	80089b0 <_dtoa_r+0x698>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	9a07      	ldr	r2, [sp, #28]
 8008da2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d028      	beq.n	8008dfe <_dtoa_r+0xae6>
 8008dac:	4649      	mov	r1, r9
 8008dae:	2300      	movs	r3, #0
 8008db0:	220a      	movs	r2, #10
 8008db2:	4658      	mov	r0, fp
 8008db4:	f000 f9d6 	bl	8009164 <__multadd>
 8008db8:	42af      	cmp	r7, r5
 8008dba:	4681      	mov	r9, r0
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	f04f 020a 	mov.w	r2, #10
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	d107      	bne.n	8008dda <_dtoa_r+0xac2>
 8008dca:	f000 f9cb 	bl	8009164 <__multadd>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	9b07      	ldr	r3, [sp, #28]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	9307      	str	r3, [sp, #28]
 8008dd8:	e774      	b.n	8008cc4 <_dtoa_r+0x9ac>
 8008dda:	f000 f9c3 	bl	8009164 <__multadd>
 8008dde:	4629      	mov	r1, r5
 8008de0:	4607      	mov	r7, r0
 8008de2:	2300      	movs	r3, #0
 8008de4:	220a      	movs	r2, #10
 8008de6:	4658      	mov	r0, fp
 8008de8:	f000 f9bc 	bl	8009164 <__multadd>
 8008dec:	4605      	mov	r5, r0
 8008dee:	e7f0      	b.n	8008dd2 <_dtoa_r+0xaba>
 8008df0:	9b00      	ldr	r3, [sp, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bfcc      	ite	gt
 8008df6:	461e      	movgt	r6, r3
 8008df8:	2601      	movle	r6, #1
 8008dfa:	4456      	add	r6, sl
 8008dfc:	2700      	movs	r7, #0
 8008dfe:	4649      	mov	r1, r9
 8008e00:	2201      	movs	r2, #1
 8008e02:	4658      	mov	r0, fp
 8008e04:	f000 fb5a 	bl	80094bc <__lshift>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4681      	mov	r9, r0
 8008e0c:	f000 fbc2 	bl	8009594 <__mcmp>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	dcb0      	bgt.n	8008d76 <_dtoa_r+0xa5e>
 8008e14:	d102      	bne.n	8008e1c <_dtoa_r+0xb04>
 8008e16:	f018 0f01 	tst.w	r8, #1
 8008e1a:	d1ac      	bne.n	8008d76 <_dtoa_r+0xa5e>
 8008e1c:	4633      	mov	r3, r6
 8008e1e:	461e      	mov	r6, r3
 8008e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e24:	2a30      	cmp	r2, #48	@ 0x30
 8008e26:	d0fa      	beq.n	8008e1e <_dtoa_r+0xb06>
 8008e28:	e5c2      	b.n	80089b0 <_dtoa_r+0x698>
 8008e2a:	459a      	cmp	sl, r3
 8008e2c:	d1a4      	bne.n	8008d78 <_dtoa_r+0xa60>
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	3301      	adds	r3, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	2331      	movs	r3, #49	@ 0x31
 8008e36:	f88a 3000 	strb.w	r3, [sl]
 8008e3a:	e5b9      	b.n	80089b0 <_dtoa_r+0x698>
 8008e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008e9c <_dtoa_r+0xb84>
 8008e42:	b11b      	cbz	r3, 8008e4c <_dtoa_r+0xb34>
 8008e44:	f10a 0308 	add.w	r3, sl, #8
 8008e48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	b019      	add	sp, #100	@ 0x64
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	f77f ae37 	ble.w	8008aca <_dtoa_r+0x7b2>
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e60:	2001      	movs	r0, #1
 8008e62:	e655      	b.n	8008b10 <_dtoa_r+0x7f8>
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f77f aed6 	ble.w	8008c18 <_dtoa_r+0x900>
 8008e6c:	4656      	mov	r6, sl
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4648      	mov	r0, r9
 8008e72:	f7ff f9c6 	bl	8008202 <quorem>
 8008e76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e7a:	f806 8b01 	strb.w	r8, [r6], #1
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	eba6 020a 	sub.w	r2, r6, sl
 8008e84:	4293      	cmp	r3, r2
 8008e86:	ddb3      	ble.n	8008df0 <_dtoa_r+0xad8>
 8008e88:	4649      	mov	r1, r9
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f000 f968 	bl	8009164 <__multadd>
 8008e94:	4681      	mov	r9, r0
 8008e96:	e7ea      	b.n	8008e6e <_dtoa_r+0xb56>
 8008e98:	0800a90c 	.word	0x0800a90c
 8008e9c:	0800a890 	.word	0x0800a890

08008ea0 <_free_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d041      	beq.n	8008f2c <_free_r+0x8c>
 8008ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eac:	1f0c      	subs	r4, r1, #4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bfb8      	it	lt
 8008eb2:	18e4      	addlt	r4, r4, r3
 8008eb4:	f000 f8e8 	bl	8009088 <__malloc_lock>
 8008eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f30 <_free_r+0x90>)
 8008eba:	6813      	ldr	r3, [r2, #0]
 8008ebc:	b933      	cbnz	r3, 8008ecc <_free_r+0x2c>
 8008ebe:	6063      	str	r3, [r4, #4]
 8008ec0:	6014      	str	r4, [r2, #0]
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ec8:	f000 b8e4 	b.w	8009094 <__malloc_unlock>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d908      	bls.n	8008ee2 <_free_r+0x42>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	1821      	adds	r1, r4, r0
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	bf01      	itttt	eq
 8008ed8:	6819      	ldreq	r1, [r3, #0]
 8008eda:	685b      	ldreq	r3, [r3, #4]
 8008edc:	1809      	addeq	r1, r1, r0
 8008ede:	6021      	streq	r1, [r4, #0]
 8008ee0:	e7ed      	b.n	8008ebe <_free_r+0x1e>
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b10b      	cbz	r3, 8008eec <_free_r+0x4c>
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d9fa      	bls.n	8008ee2 <_free_r+0x42>
 8008eec:	6811      	ldr	r1, [r2, #0]
 8008eee:	1850      	adds	r0, r2, r1
 8008ef0:	42a0      	cmp	r0, r4
 8008ef2:	d10b      	bne.n	8008f0c <_free_r+0x6c>
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	4401      	add	r1, r0
 8008ef8:	1850      	adds	r0, r2, r1
 8008efa:	4283      	cmp	r3, r0
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	d1e0      	bne.n	8008ec2 <_free_r+0x22>
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	6053      	str	r3, [r2, #4]
 8008f06:	4408      	add	r0, r1
 8008f08:	6010      	str	r0, [r2, #0]
 8008f0a:	e7da      	b.n	8008ec2 <_free_r+0x22>
 8008f0c:	d902      	bls.n	8008f14 <_free_r+0x74>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	e7d6      	b.n	8008ec2 <_free_r+0x22>
 8008f14:	6820      	ldr	r0, [r4, #0]
 8008f16:	1821      	adds	r1, r4, r0
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf04      	itt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	bf04      	itt	eq
 8008f24:	1809      	addeq	r1, r1, r0
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	6054      	str	r4, [r2, #4]
 8008f2a:	e7ca      	b.n	8008ec2 <_free_r+0x22>
 8008f2c:	bd38      	pop	{r3, r4, r5, pc}
 8008f2e:	bf00      	nop
 8008f30:	200009f0 	.word	0x200009f0

08008f34 <malloc>:
 8008f34:	4b02      	ldr	r3, [pc, #8]	@ (8008f40 <malloc+0xc>)
 8008f36:	4601      	mov	r1, r0
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	f000 b825 	b.w	8008f88 <_malloc_r>
 8008f3e:	bf00      	nop
 8008f40:	2000001c 	.word	0x2000001c

08008f44 <sbrk_aligned>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4e0f      	ldr	r6, [pc, #60]	@ (8008f84 <sbrk_aligned+0x40>)
 8008f48:	460c      	mov	r4, r1
 8008f4a:	6831      	ldr	r1, [r6, #0]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	b911      	cbnz	r1, 8008f56 <sbrk_aligned+0x12>
 8008f50:	f001 f80c 	bl	8009f6c <_sbrk_r>
 8008f54:	6030      	str	r0, [r6, #0]
 8008f56:	4621      	mov	r1, r4
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f001 f807 	bl	8009f6c <_sbrk_r>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d103      	bne.n	8008f6a <sbrk_aligned+0x26>
 8008f62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f66:	4620      	mov	r0, r4
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	1cc4      	adds	r4, r0, #3
 8008f6c:	f024 0403 	bic.w	r4, r4, #3
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d0f8      	beq.n	8008f66 <sbrk_aligned+0x22>
 8008f74:	1a21      	subs	r1, r4, r0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 fff8 	bl	8009f6c <_sbrk_r>
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d1f2      	bne.n	8008f66 <sbrk_aligned+0x22>
 8008f80:	e7ef      	b.n	8008f62 <sbrk_aligned+0x1e>
 8008f82:	bf00      	nop
 8008f84:	200009ec 	.word	0x200009ec

08008f88 <_malloc_r>:
 8008f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	1ccd      	adds	r5, r1, #3
 8008f8e:	f025 0503 	bic.w	r5, r5, #3
 8008f92:	3508      	adds	r5, #8
 8008f94:	2d0c      	cmp	r5, #12
 8008f96:	bf38      	it	cc
 8008f98:	250c      	movcc	r5, #12
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	db01      	blt.n	8008fa4 <_malloc_r+0x1c>
 8008fa0:	42a9      	cmp	r1, r5
 8008fa2:	d904      	bls.n	8008fae <_malloc_r+0x26>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	6033      	str	r3, [r6, #0]
 8008fa8:	2000      	movs	r0, #0
 8008faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009084 <_malloc_r+0xfc>
 8008fb2:	f000 f869 	bl	8009088 <__malloc_lock>
 8008fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fba:	461c      	mov	r4, r3
 8008fbc:	bb44      	cbnz	r4, 8009010 <_malloc_r+0x88>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff ffbf 	bl	8008f44 <sbrk_aligned>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	4604      	mov	r4, r0
 8008fca:	d158      	bne.n	800907e <_malloc_r+0xf6>
 8008fcc:	f8d8 4000 	ldr.w	r4, [r8]
 8008fd0:	4627      	mov	r7, r4
 8008fd2:	2f00      	cmp	r7, #0
 8008fd4:	d143      	bne.n	800905e <_malloc_r+0xd6>
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d04b      	beq.n	8009072 <_malloc_r+0xea>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	4639      	mov	r1, r7
 8008fde:	4630      	mov	r0, r6
 8008fe0:	eb04 0903 	add.w	r9, r4, r3
 8008fe4:	f000 ffc2 	bl	8009f6c <_sbrk_r>
 8008fe8:	4581      	cmp	r9, r0
 8008fea:	d142      	bne.n	8009072 <_malloc_r+0xea>
 8008fec:	6821      	ldr	r1, [r4, #0]
 8008fee:	1a6d      	subs	r5, r5, r1
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ffa6 	bl	8008f44 <sbrk_aligned>
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d03a      	beq.n	8009072 <_malloc_r+0xea>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	442b      	add	r3, r5
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	f8d8 3000 	ldr.w	r3, [r8]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	bb62      	cbnz	r2, 8009064 <_malloc_r+0xdc>
 800900a:	f8c8 7000 	str.w	r7, [r8]
 800900e:	e00f      	b.n	8009030 <_malloc_r+0xa8>
 8009010:	6822      	ldr	r2, [r4, #0]
 8009012:	1b52      	subs	r2, r2, r5
 8009014:	d420      	bmi.n	8009058 <_malloc_r+0xd0>
 8009016:	2a0b      	cmp	r2, #11
 8009018:	d917      	bls.n	800904a <_malloc_r+0xc2>
 800901a:	1961      	adds	r1, r4, r5
 800901c:	42a3      	cmp	r3, r4
 800901e:	6025      	str	r5, [r4, #0]
 8009020:	bf18      	it	ne
 8009022:	6059      	strne	r1, [r3, #4]
 8009024:	6863      	ldr	r3, [r4, #4]
 8009026:	bf08      	it	eq
 8009028:	f8c8 1000 	streq.w	r1, [r8]
 800902c:	5162      	str	r2, [r4, r5]
 800902e:	604b      	str	r3, [r1, #4]
 8009030:	4630      	mov	r0, r6
 8009032:	f000 f82f 	bl	8009094 <__malloc_unlock>
 8009036:	f104 000b 	add.w	r0, r4, #11
 800903a:	1d23      	adds	r3, r4, #4
 800903c:	f020 0007 	bic.w	r0, r0, #7
 8009040:	1ac2      	subs	r2, r0, r3
 8009042:	bf1c      	itt	ne
 8009044:	1a1b      	subne	r3, r3, r0
 8009046:	50a3      	strne	r3, [r4, r2]
 8009048:	e7af      	b.n	8008faa <_malloc_r+0x22>
 800904a:	6862      	ldr	r2, [r4, #4]
 800904c:	42a3      	cmp	r3, r4
 800904e:	bf0c      	ite	eq
 8009050:	f8c8 2000 	streq.w	r2, [r8]
 8009054:	605a      	strne	r2, [r3, #4]
 8009056:	e7eb      	b.n	8009030 <_malloc_r+0xa8>
 8009058:	4623      	mov	r3, r4
 800905a:	6864      	ldr	r4, [r4, #4]
 800905c:	e7ae      	b.n	8008fbc <_malloc_r+0x34>
 800905e:	463c      	mov	r4, r7
 8009060:	687f      	ldr	r7, [r7, #4]
 8009062:	e7b6      	b.n	8008fd2 <_malloc_r+0x4a>
 8009064:	461a      	mov	r2, r3
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	42a3      	cmp	r3, r4
 800906a:	d1fb      	bne.n	8009064 <_malloc_r+0xdc>
 800906c:	2300      	movs	r3, #0
 800906e:	6053      	str	r3, [r2, #4]
 8009070:	e7de      	b.n	8009030 <_malloc_r+0xa8>
 8009072:	230c      	movs	r3, #12
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f80c 	bl	8009094 <__malloc_unlock>
 800907c:	e794      	b.n	8008fa8 <_malloc_r+0x20>
 800907e:	6005      	str	r5, [r0, #0]
 8009080:	e7d6      	b.n	8009030 <_malloc_r+0xa8>
 8009082:	bf00      	nop
 8009084:	200009f0 	.word	0x200009f0

08009088 <__malloc_lock>:
 8009088:	4801      	ldr	r0, [pc, #4]	@ (8009090 <__malloc_lock+0x8>)
 800908a:	f7ff b8b8 	b.w	80081fe <__retarget_lock_acquire_recursive>
 800908e:	bf00      	nop
 8009090:	200009e8 	.word	0x200009e8

08009094 <__malloc_unlock>:
 8009094:	4801      	ldr	r0, [pc, #4]	@ (800909c <__malloc_unlock+0x8>)
 8009096:	f7ff b8b3 	b.w	8008200 <__retarget_lock_release_recursive>
 800909a:	bf00      	nop
 800909c:	200009e8 	.word	0x200009e8

080090a0 <_Balloc>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	69c6      	ldr	r6, [r0, #28]
 80090a4:	4604      	mov	r4, r0
 80090a6:	460d      	mov	r5, r1
 80090a8:	b976      	cbnz	r6, 80090c8 <_Balloc+0x28>
 80090aa:	2010      	movs	r0, #16
 80090ac:	f7ff ff42 	bl	8008f34 <malloc>
 80090b0:	4602      	mov	r2, r0
 80090b2:	61e0      	str	r0, [r4, #28]
 80090b4:	b920      	cbnz	r0, 80090c0 <_Balloc+0x20>
 80090b6:	4b18      	ldr	r3, [pc, #96]	@ (8009118 <_Balloc+0x78>)
 80090b8:	4818      	ldr	r0, [pc, #96]	@ (800911c <_Balloc+0x7c>)
 80090ba:	216b      	movs	r1, #107	@ 0x6b
 80090bc:	f000 ff74 	bl	8009fa8 <__assert_func>
 80090c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090c4:	6006      	str	r6, [r0, #0]
 80090c6:	60c6      	str	r6, [r0, #12]
 80090c8:	69e6      	ldr	r6, [r4, #28]
 80090ca:	68f3      	ldr	r3, [r6, #12]
 80090cc:	b183      	cbz	r3, 80090f0 <_Balloc+0x50>
 80090ce:	69e3      	ldr	r3, [r4, #28]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090d6:	b9b8      	cbnz	r0, 8009108 <_Balloc+0x68>
 80090d8:	2101      	movs	r1, #1
 80090da:	fa01 f605 	lsl.w	r6, r1, r5
 80090de:	1d72      	adds	r2, r6, #5
 80090e0:	0092      	lsls	r2, r2, #2
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 ff7e 	bl	8009fe4 <_calloc_r>
 80090e8:	b160      	cbz	r0, 8009104 <_Balloc+0x64>
 80090ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ee:	e00e      	b.n	800910e <_Balloc+0x6e>
 80090f0:	2221      	movs	r2, #33	@ 0x21
 80090f2:	2104      	movs	r1, #4
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 ff75 	bl	8009fe4 <_calloc_r>
 80090fa:	69e3      	ldr	r3, [r4, #28]
 80090fc:	60f0      	str	r0, [r6, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e4      	bne.n	80090ce <_Balloc+0x2e>
 8009104:	2000      	movs	r0, #0
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	6802      	ldr	r2, [r0, #0]
 800910a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800910e:	2300      	movs	r3, #0
 8009110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009114:	e7f7      	b.n	8009106 <_Balloc+0x66>
 8009116:	bf00      	nop
 8009118:	0800a89d 	.word	0x0800a89d
 800911c:	0800a91d 	.word	0x0800a91d

08009120 <_Bfree>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	69c6      	ldr	r6, [r0, #28]
 8009124:	4605      	mov	r5, r0
 8009126:	460c      	mov	r4, r1
 8009128:	b976      	cbnz	r6, 8009148 <_Bfree+0x28>
 800912a:	2010      	movs	r0, #16
 800912c:	f7ff ff02 	bl	8008f34 <malloc>
 8009130:	4602      	mov	r2, r0
 8009132:	61e8      	str	r0, [r5, #28]
 8009134:	b920      	cbnz	r0, 8009140 <_Bfree+0x20>
 8009136:	4b09      	ldr	r3, [pc, #36]	@ (800915c <_Bfree+0x3c>)
 8009138:	4809      	ldr	r0, [pc, #36]	@ (8009160 <_Bfree+0x40>)
 800913a:	218f      	movs	r1, #143	@ 0x8f
 800913c:	f000 ff34 	bl	8009fa8 <__assert_func>
 8009140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009144:	6006      	str	r6, [r0, #0]
 8009146:	60c6      	str	r6, [r0, #12]
 8009148:	b13c      	cbz	r4, 800915a <_Bfree+0x3a>
 800914a:	69eb      	ldr	r3, [r5, #28]
 800914c:	6862      	ldr	r2, [r4, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009154:	6021      	str	r1, [r4, #0]
 8009156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	0800a89d 	.word	0x0800a89d
 8009160:	0800a91d 	.word	0x0800a91d

08009164 <__multadd>:
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	690d      	ldr	r5, [r1, #16]
 800916a:	4607      	mov	r7, r0
 800916c:	460c      	mov	r4, r1
 800916e:	461e      	mov	r6, r3
 8009170:	f101 0c14 	add.w	ip, r1, #20
 8009174:	2000      	movs	r0, #0
 8009176:	f8dc 3000 	ldr.w	r3, [ip]
 800917a:	b299      	uxth	r1, r3
 800917c:	fb02 6101 	mla	r1, r2, r1, r6
 8009180:	0c1e      	lsrs	r6, r3, #16
 8009182:	0c0b      	lsrs	r3, r1, #16
 8009184:	fb02 3306 	mla	r3, r2, r6, r3
 8009188:	b289      	uxth	r1, r1
 800918a:	3001      	adds	r0, #1
 800918c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009190:	4285      	cmp	r5, r0
 8009192:	f84c 1b04 	str.w	r1, [ip], #4
 8009196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800919a:	dcec      	bgt.n	8009176 <__multadd+0x12>
 800919c:	b30e      	cbz	r6, 80091e2 <__multadd+0x7e>
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	dc19      	bgt.n	80091d8 <__multadd+0x74>
 80091a4:	6861      	ldr	r1, [r4, #4]
 80091a6:	4638      	mov	r0, r7
 80091a8:	3101      	adds	r1, #1
 80091aa:	f7ff ff79 	bl	80090a0 <_Balloc>
 80091ae:	4680      	mov	r8, r0
 80091b0:	b928      	cbnz	r0, 80091be <__multadd+0x5a>
 80091b2:	4602      	mov	r2, r0
 80091b4:	4b0c      	ldr	r3, [pc, #48]	@ (80091e8 <__multadd+0x84>)
 80091b6:	480d      	ldr	r0, [pc, #52]	@ (80091ec <__multadd+0x88>)
 80091b8:	21ba      	movs	r1, #186	@ 0xba
 80091ba:	f000 fef5 	bl	8009fa8 <__assert_func>
 80091be:	6922      	ldr	r2, [r4, #16]
 80091c0:	3202      	adds	r2, #2
 80091c2:	f104 010c 	add.w	r1, r4, #12
 80091c6:	0092      	lsls	r2, r2, #2
 80091c8:	300c      	adds	r0, #12
 80091ca:	f000 fedf 	bl	8009f8c <memcpy>
 80091ce:	4621      	mov	r1, r4
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff ffa5 	bl	8009120 <_Bfree>
 80091d6:	4644      	mov	r4, r8
 80091d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091dc:	3501      	adds	r5, #1
 80091de:	615e      	str	r6, [r3, #20]
 80091e0:	6125      	str	r5, [r4, #16]
 80091e2:	4620      	mov	r0, r4
 80091e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e8:	0800a90c 	.word	0x0800a90c
 80091ec:	0800a91d 	.word	0x0800a91d

080091f0 <__hi0bits>:
 80091f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091f4:	4603      	mov	r3, r0
 80091f6:	bf36      	itet	cc
 80091f8:	0403      	lslcc	r3, r0, #16
 80091fa:	2000      	movcs	r0, #0
 80091fc:	2010      	movcc	r0, #16
 80091fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009202:	bf3c      	itt	cc
 8009204:	021b      	lslcc	r3, r3, #8
 8009206:	3008      	addcc	r0, #8
 8009208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800920c:	bf3c      	itt	cc
 800920e:	011b      	lslcc	r3, r3, #4
 8009210:	3004      	addcc	r0, #4
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009216:	bf3c      	itt	cc
 8009218:	009b      	lslcc	r3, r3, #2
 800921a:	3002      	addcc	r0, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	db05      	blt.n	800922c <__hi0bits+0x3c>
 8009220:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009224:	f100 0001 	add.w	r0, r0, #1
 8009228:	bf08      	it	eq
 800922a:	2020      	moveq	r0, #32
 800922c:	4770      	bx	lr

0800922e <__lo0bits>:
 800922e:	6803      	ldr	r3, [r0, #0]
 8009230:	4602      	mov	r2, r0
 8009232:	f013 0007 	ands.w	r0, r3, #7
 8009236:	d00b      	beq.n	8009250 <__lo0bits+0x22>
 8009238:	07d9      	lsls	r1, r3, #31
 800923a:	d421      	bmi.n	8009280 <__lo0bits+0x52>
 800923c:	0798      	lsls	r0, r3, #30
 800923e:	bf49      	itett	mi
 8009240:	085b      	lsrmi	r3, r3, #1
 8009242:	089b      	lsrpl	r3, r3, #2
 8009244:	2001      	movmi	r0, #1
 8009246:	6013      	strmi	r3, [r2, #0]
 8009248:	bf5c      	itt	pl
 800924a:	6013      	strpl	r3, [r2, #0]
 800924c:	2002      	movpl	r0, #2
 800924e:	4770      	bx	lr
 8009250:	b299      	uxth	r1, r3
 8009252:	b909      	cbnz	r1, 8009258 <__lo0bits+0x2a>
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	2010      	movs	r0, #16
 8009258:	b2d9      	uxtb	r1, r3
 800925a:	b909      	cbnz	r1, 8009260 <__lo0bits+0x32>
 800925c:	3008      	adds	r0, #8
 800925e:	0a1b      	lsrs	r3, r3, #8
 8009260:	0719      	lsls	r1, r3, #28
 8009262:	bf04      	itt	eq
 8009264:	091b      	lsreq	r3, r3, #4
 8009266:	3004      	addeq	r0, #4
 8009268:	0799      	lsls	r1, r3, #30
 800926a:	bf04      	itt	eq
 800926c:	089b      	lsreq	r3, r3, #2
 800926e:	3002      	addeq	r0, #2
 8009270:	07d9      	lsls	r1, r3, #31
 8009272:	d403      	bmi.n	800927c <__lo0bits+0x4e>
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	f100 0001 	add.w	r0, r0, #1
 800927a:	d003      	beq.n	8009284 <__lo0bits+0x56>
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	4770      	bx	lr
 8009280:	2000      	movs	r0, #0
 8009282:	4770      	bx	lr
 8009284:	2020      	movs	r0, #32
 8009286:	4770      	bx	lr

08009288 <__i2b>:
 8009288:	b510      	push	{r4, lr}
 800928a:	460c      	mov	r4, r1
 800928c:	2101      	movs	r1, #1
 800928e:	f7ff ff07 	bl	80090a0 <_Balloc>
 8009292:	4602      	mov	r2, r0
 8009294:	b928      	cbnz	r0, 80092a2 <__i2b+0x1a>
 8009296:	4b05      	ldr	r3, [pc, #20]	@ (80092ac <__i2b+0x24>)
 8009298:	4805      	ldr	r0, [pc, #20]	@ (80092b0 <__i2b+0x28>)
 800929a:	f240 1145 	movw	r1, #325	@ 0x145
 800929e:	f000 fe83 	bl	8009fa8 <__assert_func>
 80092a2:	2301      	movs	r3, #1
 80092a4:	6144      	str	r4, [r0, #20]
 80092a6:	6103      	str	r3, [r0, #16]
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	bf00      	nop
 80092ac:	0800a90c 	.word	0x0800a90c
 80092b0:	0800a91d 	.word	0x0800a91d

080092b4 <__multiply>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	4614      	mov	r4, r2
 80092ba:	690a      	ldr	r2, [r1, #16]
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	bfa8      	it	ge
 80092c2:	4623      	movge	r3, r4
 80092c4:	460f      	mov	r7, r1
 80092c6:	bfa4      	itt	ge
 80092c8:	460c      	movge	r4, r1
 80092ca:	461f      	movge	r7, r3
 80092cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80092d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80092d4:	68a3      	ldr	r3, [r4, #8]
 80092d6:	6861      	ldr	r1, [r4, #4]
 80092d8:	eb0a 0609 	add.w	r6, sl, r9
 80092dc:	42b3      	cmp	r3, r6
 80092de:	b085      	sub	sp, #20
 80092e0:	bfb8      	it	lt
 80092e2:	3101      	addlt	r1, #1
 80092e4:	f7ff fedc 	bl	80090a0 <_Balloc>
 80092e8:	b930      	cbnz	r0, 80092f8 <__multiply+0x44>
 80092ea:	4602      	mov	r2, r0
 80092ec:	4b44      	ldr	r3, [pc, #272]	@ (8009400 <__multiply+0x14c>)
 80092ee:	4845      	ldr	r0, [pc, #276]	@ (8009404 <__multiply+0x150>)
 80092f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092f4:	f000 fe58 	bl	8009fa8 <__assert_func>
 80092f8:	f100 0514 	add.w	r5, r0, #20
 80092fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009300:	462b      	mov	r3, r5
 8009302:	2200      	movs	r2, #0
 8009304:	4543      	cmp	r3, r8
 8009306:	d321      	bcc.n	800934c <__multiply+0x98>
 8009308:	f107 0114 	add.w	r1, r7, #20
 800930c:	f104 0214 	add.w	r2, r4, #20
 8009310:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009314:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009318:	9302      	str	r3, [sp, #8]
 800931a:	1b13      	subs	r3, r2, r4
 800931c:	3b15      	subs	r3, #21
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	3304      	adds	r3, #4
 8009324:	f104 0715 	add.w	r7, r4, #21
 8009328:	42ba      	cmp	r2, r7
 800932a:	bf38      	it	cc
 800932c:	2304      	movcc	r3, #4
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	9103      	str	r1, [sp, #12]
 8009334:	428b      	cmp	r3, r1
 8009336:	d80c      	bhi.n	8009352 <__multiply+0x9e>
 8009338:	2e00      	cmp	r6, #0
 800933a:	dd03      	ble.n	8009344 <__multiply+0x90>
 800933c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009340:	2b00      	cmp	r3, #0
 8009342:	d05b      	beq.n	80093fc <__multiply+0x148>
 8009344:	6106      	str	r6, [r0, #16]
 8009346:	b005      	add	sp, #20
 8009348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934c:	f843 2b04 	str.w	r2, [r3], #4
 8009350:	e7d8      	b.n	8009304 <__multiply+0x50>
 8009352:	f8b1 a000 	ldrh.w	sl, [r1]
 8009356:	f1ba 0f00 	cmp.w	sl, #0
 800935a:	d024      	beq.n	80093a6 <__multiply+0xf2>
 800935c:	f104 0e14 	add.w	lr, r4, #20
 8009360:	46a9      	mov	r9, r5
 8009362:	f04f 0c00 	mov.w	ip, #0
 8009366:	f85e 7b04 	ldr.w	r7, [lr], #4
 800936a:	f8d9 3000 	ldr.w	r3, [r9]
 800936e:	fa1f fb87 	uxth.w	fp, r7
 8009372:	b29b      	uxth	r3, r3
 8009374:	fb0a 330b 	mla	r3, sl, fp, r3
 8009378:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800937c:	f8d9 7000 	ldr.w	r7, [r9]
 8009380:	4463      	add	r3, ip
 8009382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009386:	fb0a c70b 	mla	r7, sl, fp, ip
 800938a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800938e:	b29b      	uxth	r3, r3
 8009390:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009394:	4572      	cmp	r2, lr
 8009396:	f849 3b04 	str.w	r3, [r9], #4
 800939a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800939e:	d8e2      	bhi.n	8009366 <__multiply+0xb2>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	f845 c003 	str.w	ip, [r5, r3]
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093ac:	3104      	adds	r1, #4
 80093ae:	f1b9 0f00 	cmp.w	r9, #0
 80093b2:	d021      	beq.n	80093f8 <__multiply+0x144>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	f104 0c14 	add.w	ip, r4, #20
 80093ba:	46ae      	mov	lr, r5
 80093bc:	f04f 0a00 	mov.w	sl, #0
 80093c0:	f8bc b000 	ldrh.w	fp, [ip]
 80093c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80093c8:	fb09 770b 	mla	r7, r9, fp, r7
 80093cc:	4457      	add	r7, sl
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093d4:	f84e 3b04 	str.w	r3, [lr], #4
 80093d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093e0:	f8be 3000 	ldrh.w	r3, [lr]
 80093e4:	fb09 330a 	mla	r3, r9, sl, r3
 80093e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80093ec:	4562      	cmp	r2, ip
 80093ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093f2:	d8e5      	bhi.n	80093c0 <__multiply+0x10c>
 80093f4:	9f01      	ldr	r7, [sp, #4]
 80093f6:	51eb      	str	r3, [r5, r7]
 80093f8:	3504      	adds	r5, #4
 80093fa:	e799      	b.n	8009330 <__multiply+0x7c>
 80093fc:	3e01      	subs	r6, #1
 80093fe:	e79b      	b.n	8009338 <__multiply+0x84>
 8009400:	0800a90c 	.word	0x0800a90c
 8009404:	0800a91d 	.word	0x0800a91d

08009408 <__pow5mult>:
 8009408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800940c:	4615      	mov	r5, r2
 800940e:	f012 0203 	ands.w	r2, r2, #3
 8009412:	4607      	mov	r7, r0
 8009414:	460e      	mov	r6, r1
 8009416:	d007      	beq.n	8009428 <__pow5mult+0x20>
 8009418:	4c25      	ldr	r4, [pc, #148]	@ (80094b0 <__pow5mult+0xa8>)
 800941a:	3a01      	subs	r2, #1
 800941c:	2300      	movs	r3, #0
 800941e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009422:	f7ff fe9f 	bl	8009164 <__multadd>
 8009426:	4606      	mov	r6, r0
 8009428:	10ad      	asrs	r5, r5, #2
 800942a:	d03d      	beq.n	80094a8 <__pow5mult+0xa0>
 800942c:	69fc      	ldr	r4, [r7, #28]
 800942e:	b97c      	cbnz	r4, 8009450 <__pow5mult+0x48>
 8009430:	2010      	movs	r0, #16
 8009432:	f7ff fd7f 	bl	8008f34 <malloc>
 8009436:	4602      	mov	r2, r0
 8009438:	61f8      	str	r0, [r7, #28]
 800943a:	b928      	cbnz	r0, 8009448 <__pow5mult+0x40>
 800943c:	4b1d      	ldr	r3, [pc, #116]	@ (80094b4 <__pow5mult+0xac>)
 800943e:	481e      	ldr	r0, [pc, #120]	@ (80094b8 <__pow5mult+0xb0>)
 8009440:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009444:	f000 fdb0 	bl	8009fa8 <__assert_func>
 8009448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800944c:	6004      	str	r4, [r0, #0]
 800944e:	60c4      	str	r4, [r0, #12]
 8009450:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009458:	b94c      	cbnz	r4, 800946e <__pow5mult+0x66>
 800945a:	f240 2171 	movw	r1, #625	@ 0x271
 800945e:	4638      	mov	r0, r7
 8009460:	f7ff ff12 	bl	8009288 <__i2b>
 8009464:	2300      	movs	r3, #0
 8009466:	f8c8 0008 	str.w	r0, [r8, #8]
 800946a:	4604      	mov	r4, r0
 800946c:	6003      	str	r3, [r0, #0]
 800946e:	f04f 0900 	mov.w	r9, #0
 8009472:	07eb      	lsls	r3, r5, #31
 8009474:	d50a      	bpl.n	800948c <__pow5mult+0x84>
 8009476:	4631      	mov	r1, r6
 8009478:	4622      	mov	r2, r4
 800947a:	4638      	mov	r0, r7
 800947c:	f7ff ff1a 	bl	80092b4 <__multiply>
 8009480:	4631      	mov	r1, r6
 8009482:	4680      	mov	r8, r0
 8009484:	4638      	mov	r0, r7
 8009486:	f7ff fe4b 	bl	8009120 <_Bfree>
 800948a:	4646      	mov	r6, r8
 800948c:	106d      	asrs	r5, r5, #1
 800948e:	d00b      	beq.n	80094a8 <__pow5mult+0xa0>
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	b938      	cbnz	r0, 80094a4 <__pow5mult+0x9c>
 8009494:	4622      	mov	r2, r4
 8009496:	4621      	mov	r1, r4
 8009498:	4638      	mov	r0, r7
 800949a:	f7ff ff0b 	bl	80092b4 <__multiply>
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	f8c0 9000 	str.w	r9, [r0]
 80094a4:	4604      	mov	r4, r0
 80094a6:	e7e4      	b.n	8009472 <__pow5mult+0x6a>
 80094a8:	4630      	mov	r0, r6
 80094aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ae:	bf00      	nop
 80094b0:	0800a978 	.word	0x0800a978
 80094b4:	0800a89d 	.word	0x0800a89d
 80094b8:	0800a91d 	.word	0x0800a91d

080094bc <__lshift>:
 80094bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c0:	460c      	mov	r4, r1
 80094c2:	6849      	ldr	r1, [r1, #4]
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	4607      	mov	r7, r0
 80094ce:	4691      	mov	r9, r2
 80094d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094d4:	f108 0601 	add.w	r6, r8, #1
 80094d8:	42b3      	cmp	r3, r6
 80094da:	db0b      	blt.n	80094f4 <__lshift+0x38>
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff fddf 	bl	80090a0 <_Balloc>
 80094e2:	4605      	mov	r5, r0
 80094e4:	b948      	cbnz	r0, 80094fa <__lshift+0x3e>
 80094e6:	4602      	mov	r2, r0
 80094e8:	4b28      	ldr	r3, [pc, #160]	@ (800958c <__lshift+0xd0>)
 80094ea:	4829      	ldr	r0, [pc, #164]	@ (8009590 <__lshift+0xd4>)
 80094ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80094f0:	f000 fd5a 	bl	8009fa8 <__assert_func>
 80094f4:	3101      	adds	r1, #1
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	e7ee      	b.n	80094d8 <__lshift+0x1c>
 80094fa:	2300      	movs	r3, #0
 80094fc:	f100 0114 	add.w	r1, r0, #20
 8009500:	f100 0210 	add.w	r2, r0, #16
 8009504:	4618      	mov	r0, r3
 8009506:	4553      	cmp	r3, sl
 8009508:	db33      	blt.n	8009572 <__lshift+0xb6>
 800950a:	6920      	ldr	r0, [r4, #16]
 800950c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009510:	f104 0314 	add.w	r3, r4, #20
 8009514:	f019 091f 	ands.w	r9, r9, #31
 8009518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800951c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009520:	d02b      	beq.n	800957a <__lshift+0xbe>
 8009522:	f1c9 0e20 	rsb	lr, r9, #32
 8009526:	468a      	mov	sl, r1
 8009528:	2200      	movs	r2, #0
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	fa00 f009 	lsl.w	r0, r0, r9
 8009530:	4310      	orrs	r0, r2
 8009532:	f84a 0b04 	str.w	r0, [sl], #4
 8009536:	f853 2b04 	ldr.w	r2, [r3], #4
 800953a:	459c      	cmp	ip, r3
 800953c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009540:	d8f3      	bhi.n	800952a <__lshift+0x6e>
 8009542:	ebac 0304 	sub.w	r3, ip, r4
 8009546:	3b15      	subs	r3, #21
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	3304      	adds	r3, #4
 800954e:	f104 0015 	add.w	r0, r4, #21
 8009552:	4584      	cmp	ip, r0
 8009554:	bf38      	it	cc
 8009556:	2304      	movcc	r3, #4
 8009558:	50ca      	str	r2, [r1, r3]
 800955a:	b10a      	cbz	r2, 8009560 <__lshift+0xa4>
 800955c:	f108 0602 	add.w	r6, r8, #2
 8009560:	3e01      	subs	r6, #1
 8009562:	4638      	mov	r0, r7
 8009564:	612e      	str	r6, [r5, #16]
 8009566:	4621      	mov	r1, r4
 8009568:	f7ff fdda 	bl	8009120 <_Bfree>
 800956c:	4628      	mov	r0, r5
 800956e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009572:	f842 0f04 	str.w	r0, [r2, #4]!
 8009576:	3301      	adds	r3, #1
 8009578:	e7c5      	b.n	8009506 <__lshift+0x4a>
 800957a:	3904      	subs	r1, #4
 800957c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009580:	f841 2f04 	str.w	r2, [r1, #4]!
 8009584:	459c      	cmp	ip, r3
 8009586:	d8f9      	bhi.n	800957c <__lshift+0xc0>
 8009588:	e7ea      	b.n	8009560 <__lshift+0xa4>
 800958a:	bf00      	nop
 800958c:	0800a90c 	.word	0x0800a90c
 8009590:	0800a91d 	.word	0x0800a91d

08009594 <__mcmp>:
 8009594:	690a      	ldr	r2, [r1, #16]
 8009596:	4603      	mov	r3, r0
 8009598:	6900      	ldr	r0, [r0, #16]
 800959a:	1a80      	subs	r0, r0, r2
 800959c:	b530      	push	{r4, r5, lr}
 800959e:	d10e      	bne.n	80095be <__mcmp+0x2a>
 80095a0:	3314      	adds	r3, #20
 80095a2:	3114      	adds	r1, #20
 80095a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095b4:	4295      	cmp	r5, r2
 80095b6:	d003      	beq.n	80095c0 <__mcmp+0x2c>
 80095b8:	d205      	bcs.n	80095c6 <__mcmp+0x32>
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095be:	bd30      	pop	{r4, r5, pc}
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	d3f3      	bcc.n	80095ac <__mcmp+0x18>
 80095c4:	e7fb      	b.n	80095be <__mcmp+0x2a>
 80095c6:	2001      	movs	r0, #1
 80095c8:	e7f9      	b.n	80095be <__mcmp+0x2a>
	...

080095cc <__mdiff>:
 80095cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	4689      	mov	r9, r1
 80095d2:	4606      	mov	r6, r0
 80095d4:	4611      	mov	r1, r2
 80095d6:	4648      	mov	r0, r9
 80095d8:	4614      	mov	r4, r2
 80095da:	f7ff ffdb 	bl	8009594 <__mcmp>
 80095de:	1e05      	subs	r5, r0, #0
 80095e0:	d112      	bne.n	8009608 <__mdiff+0x3c>
 80095e2:	4629      	mov	r1, r5
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff fd5b 	bl	80090a0 <_Balloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	b928      	cbnz	r0, 80095fa <__mdiff+0x2e>
 80095ee:	4b3f      	ldr	r3, [pc, #252]	@ (80096ec <__mdiff+0x120>)
 80095f0:	f240 2137 	movw	r1, #567	@ 0x237
 80095f4:	483e      	ldr	r0, [pc, #248]	@ (80096f0 <__mdiff+0x124>)
 80095f6:	f000 fcd7 	bl	8009fa8 <__assert_func>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009600:	4610      	mov	r0, r2
 8009602:	b003      	add	sp, #12
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009608:	bfbc      	itt	lt
 800960a:	464b      	movlt	r3, r9
 800960c:	46a1      	movlt	r9, r4
 800960e:	4630      	mov	r0, r6
 8009610:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009614:	bfba      	itte	lt
 8009616:	461c      	movlt	r4, r3
 8009618:	2501      	movlt	r5, #1
 800961a:	2500      	movge	r5, #0
 800961c:	f7ff fd40 	bl	80090a0 <_Balloc>
 8009620:	4602      	mov	r2, r0
 8009622:	b918      	cbnz	r0, 800962c <__mdiff+0x60>
 8009624:	4b31      	ldr	r3, [pc, #196]	@ (80096ec <__mdiff+0x120>)
 8009626:	f240 2145 	movw	r1, #581	@ 0x245
 800962a:	e7e3      	b.n	80095f4 <__mdiff+0x28>
 800962c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009630:	6926      	ldr	r6, [r4, #16]
 8009632:	60c5      	str	r5, [r0, #12]
 8009634:	f109 0310 	add.w	r3, r9, #16
 8009638:	f109 0514 	add.w	r5, r9, #20
 800963c:	f104 0e14 	add.w	lr, r4, #20
 8009640:	f100 0b14 	add.w	fp, r0, #20
 8009644:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009648:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	46d9      	mov	r9, fp
 8009650:	f04f 0c00 	mov.w	ip, #0
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	f85e 0b04 	ldr.w	r0, [lr], #4
 800965a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	fa1f f38a 	uxth.w	r3, sl
 8009664:	4619      	mov	r1, r3
 8009666:	b283      	uxth	r3, r0
 8009668:	1acb      	subs	r3, r1, r3
 800966a:	0c00      	lsrs	r0, r0, #16
 800966c:	4463      	add	r3, ip
 800966e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009672:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800967c:	4576      	cmp	r6, lr
 800967e:	f849 3b04 	str.w	r3, [r9], #4
 8009682:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009686:	d8e5      	bhi.n	8009654 <__mdiff+0x88>
 8009688:	1b33      	subs	r3, r6, r4
 800968a:	3b15      	subs	r3, #21
 800968c:	f023 0303 	bic.w	r3, r3, #3
 8009690:	3415      	adds	r4, #21
 8009692:	3304      	adds	r3, #4
 8009694:	42a6      	cmp	r6, r4
 8009696:	bf38      	it	cc
 8009698:	2304      	movcc	r3, #4
 800969a:	441d      	add	r5, r3
 800969c:	445b      	add	r3, fp
 800969e:	461e      	mov	r6, r3
 80096a0:	462c      	mov	r4, r5
 80096a2:	4544      	cmp	r4, r8
 80096a4:	d30e      	bcc.n	80096c4 <__mdiff+0xf8>
 80096a6:	f108 0103 	add.w	r1, r8, #3
 80096aa:	1b49      	subs	r1, r1, r5
 80096ac:	f021 0103 	bic.w	r1, r1, #3
 80096b0:	3d03      	subs	r5, #3
 80096b2:	45a8      	cmp	r8, r5
 80096b4:	bf38      	it	cc
 80096b6:	2100      	movcc	r1, #0
 80096b8:	440b      	add	r3, r1
 80096ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096be:	b191      	cbz	r1, 80096e6 <__mdiff+0x11a>
 80096c0:	6117      	str	r7, [r2, #16]
 80096c2:	e79d      	b.n	8009600 <__mdiff+0x34>
 80096c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80096c8:	46e6      	mov	lr, ip
 80096ca:	0c08      	lsrs	r0, r1, #16
 80096cc:	fa1c fc81 	uxtah	ip, ip, r1
 80096d0:	4471      	add	r1, lr
 80096d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096d6:	b289      	uxth	r1, r1
 80096d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096dc:	f846 1b04 	str.w	r1, [r6], #4
 80096e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096e4:	e7dd      	b.n	80096a2 <__mdiff+0xd6>
 80096e6:	3f01      	subs	r7, #1
 80096e8:	e7e7      	b.n	80096ba <__mdiff+0xee>
 80096ea:	bf00      	nop
 80096ec:	0800a90c 	.word	0x0800a90c
 80096f0:	0800a91d 	.word	0x0800a91d

080096f4 <__d2b>:
 80096f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096f8:	460f      	mov	r7, r1
 80096fa:	2101      	movs	r1, #1
 80096fc:	ec59 8b10 	vmov	r8, r9, d0
 8009700:	4616      	mov	r6, r2
 8009702:	f7ff fccd 	bl	80090a0 <_Balloc>
 8009706:	4604      	mov	r4, r0
 8009708:	b930      	cbnz	r0, 8009718 <__d2b+0x24>
 800970a:	4602      	mov	r2, r0
 800970c:	4b23      	ldr	r3, [pc, #140]	@ (800979c <__d2b+0xa8>)
 800970e:	4824      	ldr	r0, [pc, #144]	@ (80097a0 <__d2b+0xac>)
 8009710:	f240 310f 	movw	r1, #783	@ 0x30f
 8009714:	f000 fc48 	bl	8009fa8 <__assert_func>
 8009718:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800971c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009720:	b10d      	cbz	r5, 8009726 <__d2b+0x32>
 8009722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	f1b8 0300 	subs.w	r3, r8, #0
 800972c:	d023      	beq.n	8009776 <__d2b+0x82>
 800972e:	4668      	mov	r0, sp
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	f7ff fd7c 	bl	800922e <__lo0bits>
 8009736:	e9dd 1200 	ldrd	r1, r2, [sp]
 800973a:	b1d0      	cbz	r0, 8009772 <__d2b+0x7e>
 800973c:	f1c0 0320 	rsb	r3, r0, #32
 8009740:	fa02 f303 	lsl.w	r3, r2, r3
 8009744:	430b      	orrs	r3, r1
 8009746:	40c2      	lsrs	r2, r0
 8009748:	6163      	str	r3, [r4, #20]
 800974a:	9201      	str	r2, [sp, #4]
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	61a3      	str	r3, [r4, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bf0c      	ite	eq
 8009754:	2201      	moveq	r2, #1
 8009756:	2202      	movne	r2, #2
 8009758:	6122      	str	r2, [r4, #16]
 800975a:	b1a5      	cbz	r5, 8009786 <__d2b+0x92>
 800975c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009760:	4405      	add	r5, r0
 8009762:	603d      	str	r5, [r7, #0]
 8009764:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009768:	6030      	str	r0, [r6, #0]
 800976a:	4620      	mov	r0, r4
 800976c:	b003      	add	sp, #12
 800976e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009772:	6161      	str	r1, [r4, #20]
 8009774:	e7ea      	b.n	800974c <__d2b+0x58>
 8009776:	a801      	add	r0, sp, #4
 8009778:	f7ff fd59 	bl	800922e <__lo0bits>
 800977c:	9b01      	ldr	r3, [sp, #4]
 800977e:	6163      	str	r3, [r4, #20]
 8009780:	3020      	adds	r0, #32
 8009782:	2201      	movs	r2, #1
 8009784:	e7e8      	b.n	8009758 <__d2b+0x64>
 8009786:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800978a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800978e:	6038      	str	r0, [r7, #0]
 8009790:	6918      	ldr	r0, [r3, #16]
 8009792:	f7ff fd2d 	bl	80091f0 <__hi0bits>
 8009796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800979a:	e7e5      	b.n	8009768 <__d2b+0x74>
 800979c:	0800a90c 	.word	0x0800a90c
 80097a0:	0800a91d 	.word	0x0800a91d

080097a4 <__ssputs_r>:
 80097a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a8:	688e      	ldr	r6, [r1, #8]
 80097aa:	461f      	mov	r7, r3
 80097ac:	42be      	cmp	r6, r7
 80097ae:	680b      	ldr	r3, [r1, #0]
 80097b0:	4682      	mov	sl, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	4690      	mov	r8, r2
 80097b6:	d82d      	bhi.n	8009814 <__ssputs_r+0x70>
 80097b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097c0:	d026      	beq.n	8009810 <__ssputs_r+0x6c>
 80097c2:	6965      	ldr	r5, [r4, #20]
 80097c4:	6909      	ldr	r1, [r1, #16]
 80097c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097ca:	eba3 0901 	sub.w	r9, r3, r1
 80097ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097d2:	1c7b      	adds	r3, r7, #1
 80097d4:	444b      	add	r3, r9
 80097d6:	106d      	asrs	r5, r5, #1
 80097d8:	429d      	cmp	r5, r3
 80097da:	bf38      	it	cc
 80097dc:	461d      	movcc	r5, r3
 80097de:	0553      	lsls	r3, r2, #21
 80097e0:	d527      	bpl.n	8009832 <__ssputs_r+0x8e>
 80097e2:	4629      	mov	r1, r5
 80097e4:	f7ff fbd0 	bl	8008f88 <_malloc_r>
 80097e8:	4606      	mov	r6, r0
 80097ea:	b360      	cbz	r0, 8009846 <__ssputs_r+0xa2>
 80097ec:	6921      	ldr	r1, [r4, #16]
 80097ee:	464a      	mov	r2, r9
 80097f0:	f000 fbcc 	bl	8009f8c <memcpy>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	6126      	str	r6, [r4, #16]
 8009802:	6165      	str	r5, [r4, #20]
 8009804:	444e      	add	r6, r9
 8009806:	eba5 0509 	sub.w	r5, r5, r9
 800980a:	6026      	str	r6, [r4, #0]
 800980c:	60a5      	str	r5, [r4, #8]
 800980e:	463e      	mov	r6, r7
 8009810:	42be      	cmp	r6, r7
 8009812:	d900      	bls.n	8009816 <__ssputs_r+0x72>
 8009814:	463e      	mov	r6, r7
 8009816:	6820      	ldr	r0, [r4, #0]
 8009818:	4632      	mov	r2, r6
 800981a:	4641      	mov	r1, r8
 800981c:	f000 fb6a 	bl	8009ef4 <memmove>
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	1b9b      	subs	r3, r3, r6
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	4433      	add	r3, r6
 800982a:	6023      	str	r3, [r4, #0]
 800982c:	2000      	movs	r0, #0
 800982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009832:	462a      	mov	r2, r5
 8009834:	f000 fbfc 	bl	800a030 <_realloc_r>
 8009838:	4606      	mov	r6, r0
 800983a:	2800      	cmp	r0, #0
 800983c:	d1e0      	bne.n	8009800 <__ssputs_r+0x5c>
 800983e:	6921      	ldr	r1, [r4, #16]
 8009840:	4650      	mov	r0, sl
 8009842:	f7ff fb2d 	bl	8008ea0 <_free_r>
 8009846:	230c      	movs	r3, #12
 8009848:	f8ca 3000 	str.w	r3, [sl]
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009852:	81a3      	strh	r3, [r4, #12]
 8009854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009858:	e7e9      	b.n	800982e <__ssputs_r+0x8a>
	...

0800985c <_svfiprintf_r>:
 800985c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	4698      	mov	r8, r3
 8009862:	898b      	ldrh	r3, [r1, #12]
 8009864:	061b      	lsls	r3, r3, #24
 8009866:	b09d      	sub	sp, #116	@ 0x74
 8009868:	4607      	mov	r7, r0
 800986a:	460d      	mov	r5, r1
 800986c:	4614      	mov	r4, r2
 800986e:	d510      	bpl.n	8009892 <_svfiprintf_r+0x36>
 8009870:	690b      	ldr	r3, [r1, #16]
 8009872:	b973      	cbnz	r3, 8009892 <_svfiprintf_r+0x36>
 8009874:	2140      	movs	r1, #64	@ 0x40
 8009876:	f7ff fb87 	bl	8008f88 <_malloc_r>
 800987a:	6028      	str	r0, [r5, #0]
 800987c:	6128      	str	r0, [r5, #16]
 800987e:	b930      	cbnz	r0, 800988e <_svfiprintf_r+0x32>
 8009880:	230c      	movs	r3, #12
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009888:	b01d      	add	sp, #116	@ 0x74
 800988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988e:	2340      	movs	r3, #64	@ 0x40
 8009890:	616b      	str	r3, [r5, #20]
 8009892:	2300      	movs	r3, #0
 8009894:	9309      	str	r3, [sp, #36]	@ 0x24
 8009896:	2320      	movs	r3, #32
 8009898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800989c:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a0:	2330      	movs	r3, #48	@ 0x30
 80098a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a40 <_svfiprintf_r+0x1e4>
 80098a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098aa:	f04f 0901 	mov.w	r9, #1
 80098ae:	4623      	mov	r3, r4
 80098b0:	469a      	mov	sl, r3
 80098b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b6:	b10a      	cbz	r2, 80098bc <_svfiprintf_r+0x60>
 80098b8:	2a25      	cmp	r2, #37	@ 0x25
 80098ba:	d1f9      	bne.n	80098b0 <_svfiprintf_r+0x54>
 80098bc:	ebba 0b04 	subs.w	fp, sl, r4
 80098c0:	d00b      	beq.n	80098da <_svfiprintf_r+0x7e>
 80098c2:	465b      	mov	r3, fp
 80098c4:	4622      	mov	r2, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7ff ff6b 	bl	80097a4 <__ssputs_r>
 80098ce:	3001      	adds	r0, #1
 80098d0:	f000 80a7 	beq.w	8009a22 <_svfiprintf_r+0x1c6>
 80098d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098d6:	445a      	add	r2, fp
 80098d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80098da:	f89a 3000 	ldrb.w	r3, [sl]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 809f 	beq.w	8009a22 <_svfiprintf_r+0x1c6>
 80098e4:	2300      	movs	r3, #0
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ee:	f10a 0a01 	add.w	sl, sl, #1
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	9307      	str	r3, [sp, #28]
 80098f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80098fc:	4654      	mov	r4, sl
 80098fe:	2205      	movs	r2, #5
 8009900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009904:	484e      	ldr	r0, [pc, #312]	@ (8009a40 <_svfiprintf_r+0x1e4>)
 8009906:	f7f6 fc63 	bl	80001d0 <memchr>
 800990a:	9a04      	ldr	r2, [sp, #16]
 800990c:	b9d8      	cbnz	r0, 8009946 <_svfiprintf_r+0xea>
 800990e:	06d0      	lsls	r0, r2, #27
 8009910:	bf44      	itt	mi
 8009912:	2320      	movmi	r3, #32
 8009914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009918:	0711      	lsls	r1, r2, #28
 800991a:	bf44      	itt	mi
 800991c:	232b      	movmi	r3, #43	@ 0x2b
 800991e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009922:	f89a 3000 	ldrb.w	r3, [sl]
 8009926:	2b2a      	cmp	r3, #42	@ 0x2a
 8009928:	d015      	beq.n	8009956 <_svfiprintf_r+0xfa>
 800992a:	9a07      	ldr	r2, [sp, #28]
 800992c:	4654      	mov	r4, sl
 800992e:	2000      	movs	r0, #0
 8009930:	f04f 0c0a 	mov.w	ip, #10
 8009934:	4621      	mov	r1, r4
 8009936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800993a:	3b30      	subs	r3, #48	@ 0x30
 800993c:	2b09      	cmp	r3, #9
 800993e:	d94b      	bls.n	80099d8 <_svfiprintf_r+0x17c>
 8009940:	b1b0      	cbz	r0, 8009970 <_svfiprintf_r+0x114>
 8009942:	9207      	str	r2, [sp, #28]
 8009944:	e014      	b.n	8009970 <_svfiprintf_r+0x114>
 8009946:	eba0 0308 	sub.w	r3, r0, r8
 800994a:	fa09 f303 	lsl.w	r3, r9, r3
 800994e:	4313      	orrs	r3, r2
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	46a2      	mov	sl, r4
 8009954:	e7d2      	b.n	80098fc <_svfiprintf_r+0xa0>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	1d19      	adds	r1, r3, #4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	9103      	str	r1, [sp, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	bfbb      	ittet	lt
 8009962:	425b      	neglt	r3, r3
 8009964:	f042 0202 	orrlt.w	r2, r2, #2
 8009968:	9307      	strge	r3, [sp, #28]
 800996a:	9307      	strlt	r3, [sp, #28]
 800996c:	bfb8      	it	lt
 800996e:	9204      	strlt	r2, [sp, #16]
 8009970:	7823      	ldrb	r3, [r4, #0]
 8009972:	2b2e      	cmp	r3, #46	@ 0x2e
 8009974:	d10a      	bne.n	800998c <_svfiprintf_r+0x130>
 8009976:	7863      	ldrb	r3, [r4, #1]
 8009978:	2b2a      	cmp	r3, #42	@ 0x2a
 800997a:	d132      	bne.n	80099e2 <_svfiprintf_r+0x186>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	9203      	str	r2, [sp, #12]
 8009984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009988:	3402      	adds	r4, #2
 800998a:	9305      	str	r3, [sp, #20]
 800998c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a50 <_svfiprintf_r+0x1f4>
 8009990:	7821      	ldrb	r1, [r4, #0]
 8009992:	2203      	movs	r2, #3
 8009994:	4650      	mov	r0, sl
 8009996:	f7f6 fc1b 	bl	80001d0 <memchr>
 800999a:	b138      	cbz	r0, 80099ac <_svfiprintf_r+0x150>
 800999c:	9b04      	ldr	r3, [sp, #16]
 800999e:	eba0 000a 	sub.w	r0, r0, sl
 80099a2:	2240      	movs	r2, #64	@ 0x40
 80099a4:	4082      	lsls	r2, r0
 80099a6:	4313      	orrs	r3, r2
 80099a8:	3401      	adds	r4, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b0:	4824      	ldr	r0, [pc, #144]	@ (8009a44 <_svfiprintf_r+0x1e8>)
 80099b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099b6:	2206      	movs	r2, #6
 80099b8:	f7f6 fc0a 	bl	80001d0 <memchr>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d036      	beq.n	8009a2e <_svfiprintf_r+0x1d2>
 80099c0:	4b21      	ldr	r3, [pc, #132]	@ (8009a48 <_svfiprintf_r+0x1ec>)
 80099c2:	bb1b      	cbnz	r3, 8009a0c <_svfiprintf_r+0x1b0>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	3307      	adds	r3, #7
 80099c8:	f023 0307 	bic.w	r3, r3, #7
 80099cc:	3308      	adds	r3, #8
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d2:	4433      	add	r3, r6
 80099d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d6:	e76a      	b.n	80098ae <_svfiprintf_r+0x52>
 80099d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099dc:	460c      	mov	r4, r1
 80099de:	2001      	movs	r0, #1
 80099e0:	e7a8      	b.n	8009934 <_svfiprintf_r+0xd8>
 80099e2:	2300      	movs	r3, #0
 80099e4:	3401      	adds	r4, #1
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	4619      	mov	r1, r3
 80099ea:	f04f 0c0a 	mov.w	ip, #10
 80099ee:	4620      	mov	r0, r4
 80099f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f4:	3a30      	subs	r2, #48	@ 0x30
 80099f6:	2a09      	cmp	r2, #9
 80099f8:	d903      	bls.n	8009a02 <_svfiprintf_r+0x1a6>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0c6      	beq.n	800998c <_svfiprintf_r+0x130>
 80099fe:	9105      	str	r1, [sp, #20]
 8009a00:	e7c4      	b.n	800998c <_svfiprintf_r+0x130>
 8009a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a06:	4604      	mov	r4, r0
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e7f0      	b.n	80099ee <_svfiprintf_r+0x192>
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b0e      	ldr	r3, [pc, #56]	@ (8009a4c <_svfiprintf_r+0x1f0>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7fd fd92 	bl	8007540 <_printf_float>
 8009a1c:	1c42      	adds	r2, r0, #1
 8009a1e:	4606      	mov	r6, r0
 8009a20:	d1d6      	bne.n	80099d0 <_svfiprintf_r+0x174>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	065b      	lsls	r3, r3, #25
 8009a26:	f53f af2d 	bmi.w	8009884 <_svfiprintf_r+0x28>
 8009a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a2c:	e72c      	b.n	8009888 <_svfiprintf_r+0x2c>
 8009a2e:	ab03      	add	r3, sp, #12
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	462a      	mov	r2, r5
 8009a34:	4b05      	ldr	r3, [pc, #20]	@ (8009a4c <_svfiprintf_r+0x1f0>)
 8009a36:	a904      	add	r1, sp, #16
 8009a38:	4638      	mov	r0, r7
 8009a3a:	f7fe f819 	bl	8007a70 <_printf_i>
 8009a3e:	e7ed      	b.n	8009a1c <_svfiprintf_r+0x1c0>
 8009a40:	0800aa78 	.word	0x0800aa78
 8009a44:	0800aa82 	.word	0x0800aa82
 8009a48:	08007541 	.word	0x08007541
 8009a4c:	080097a5 	.word	0x080097a5
 8009a50:	0800aa7e 	.word	0x0800aa7e

08009a54 <__sfputc_r>:
 8009a54:	6893      	ldr	r3, [r2, #8]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	b410      	push	{r4}
 8009a5c:	6093      	str	r3, [r2, #8]
 8009a5e:	da08      	bge.n	8009a72 <__sfputc_r+0x1e>
 8009a60:	6994      	ldr	r4, [r2, #24]
 8009a62:	42a3      	cmp	r3, r4
 8009a64:	db01      	blt.n	8009a6a <__sfputc_r+0x16>
 8009a66:	290a      	cmp	r1, #10
 8009a68:	d103      	bne.n	8009a72 <__sfputc_r+0x1e>
 8009a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a6e:	f7fe bab4 	b.w	8007fda <__swbuf_r>
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	1c58      	adds	r0, r3, #1
 8009a76:	6010      	str	r0, [r2, #0]
 8009a78:	7019      	strb	r1, [r3, #0]
 8009a7a:	4608      	mov	r0, r1
 8009a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <__sfputs_r>:
 8009a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	4614      	mov	r4, r2
 8009a8a:	18d5      	adds	r5, r2, r3
 8009a8c:	42ac      	cmp	r4, r5
 8009a8e:	d101      	bne.n	8009a94 <__sfputs_r+0x12>
 8009a90:	2000      	movs	r0, #0
 8009a92:	e007      	b.n	8009aa4 <__sfputs_r+0x22>
 8009a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a98:	463a      	mov	r2, r7
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff ffda 	bl	8009a54 <__sfputc_r>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d1f3      	bne.n	8009a8c <__sfputs_r+0xa>
 8009aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aa8 <_vfiprintf_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	460d      	mov	r5, r1
 8009aae:	b09d      	sub	sp, #116	@ 0x74
 8009ab0:	4614      	mov	r4, r2
 8009ab2:	4698      	mov	r8, r3
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	b118      	cbz	r0, 8009ac0 <_vfiprintf_r+0x18>
 8009ab8:	6a03      	ldr	r3, [r0, #32]
 8009aba:	b90b      	cbnz	r3, 8009ac0 <_vfiprintf_r+0x18>
 8009abc:	f7fe f984 	bl	8007dc8 <__sinit>
 8009ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ac2:	07d9      	lsls	r1, r3, #31
 8009ac4:	d405      	bmi.n	8009ad2 <_vfiprintf_r+0x2a>
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	059a      	lsls	r2, r3, #22
 8009aca:	d402      	bmi.n	8009ad2 <_vfiprintf_r+0x2a>
 8009acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ace:	f7fe fb96 	bl	80081fe <__retarget_lock_acquire_recursive>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	071b      	lsls	r3, r3, #28
 8009ad6:	d501      	bpl.n	8009adc <_vfiprintf_r+0x34>
 8009ad8:	692b      	ldr	r3, [r5, #16]
 8009ada:	b99b      	cbnz	r3, 8009b04 <_vfiprintf_r+0x5c>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7fe faba 	bl	8008058 <__swsetup_r>
 8009ae4:	b170      	cbz	r0, 8009b04 <_vfiprintf_r+0x5c>
 8009ae6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ae8:	07dc      	lsls	r4, r3, #31
 8009aea:	d504      	bpl.n	8009af6 <_vfiprintf_r+0x4e>
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009af0:	b01d      	add	sp, #116	@ 0x74
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	0598      	lsls	r0, r3, #22
 8009afa:	d4f7      	bmi.n	8009aec <_vfiprintf_r+0x44>
 8009afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009afe:	f7fe fb7f 	bl	8008200 <__retarget_lock_release_recursive>
 8009b02:	e7f3      	b.n	8009aec <_vfiprintf_r+0x44>
 8009b04:	2300      	movs	r3, #0
 8009b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b12:	2330      	movs	r3, #48	@ 0x30
 8009b14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cc4 <_vfiprintf_r+0x21c>
 8009b18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b1c:	f04f 0901 	mov.w	r9, #1
 8009b20:	4623      	mov	r3, r4
 8009b22:	469a      	mov	sl, r3
 8009b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b28:	b10a      	cbz	r2, 8009b2e <_vfiprintf_r+0x86>
 8009b2a:	2a25      	cmp	r2, #37	@ 0x25
 8009b2c:	d1f9      	bne.n	8009b22 <_vfiprintf_r+0x7a>
 8009b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b32:	d00b      	beq.n	8009b4c <_vfiprintf_r+0xa4>
 8009b34:	465b      	mov	r3, fp
 8009b36:	4622      	mov	r2, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7ff ffa1 	bl	8009a82 <__sfputs_r>
 8009b40:	3001      	adds	r0, #1
 8009b42:	f000 80a7 	beq.w	8009c94 <_vfiprintf_r+0x1ec>
 8009b46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b48:	445a      	add	r2, fp
 8009b4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 809f 	beq.w	8009c94 <_vfiprintf_r+0x1ec>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b60:	f10a 0a01 	add.w	sl, sl, #1
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	9307      	str	r3, [sp, #28]
 8009b68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b6e:	4654      	mov	r4, sl
 8009b70:	2205      	movs	r2, #5
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	4853      	ldr	r0, [pc, #332]	@ (8009cc4 <_vfiprintf_r+0x21c>)
 8009b78:	f7f6 fb2a 	bl	80001d0 <memchr>
 8009b7c:	9a04      	ldr	r2, [sp, #16]
 8009b7e:	b9d8      	cbnz	r0, 8009bb8 <_vfiprintf_r+0x110>
 8009b80:	06d1      	lsls	r1, r2, #27
 8009b82:	bf44      	itt	mi
 8009b84:	2320      	movmi	r3, #32
 8009b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b8a:	0713      	lsls	r3, r2, #28
 8009b8c:	bf44      	itt	mi
 8009b8e:	232b      	movmi	r3, #43	@ 0x2b
 8009b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b94:	f89a 3000 	ldrb.w	r3, [sl]
 8009b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b9a:	d015      	beq.n	8009bc8 <_vfiprintf_r+0x120>
 8009b9c:	9a07      	ldr	r2, [sp, #28]
 8009b9e:	4654      	mov	r4, sl
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f04f 0c0a 	mov.w	ip, #10
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bac:	3b30      	subs	r3, #48	@ 0x30
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d94b      	bls.n	8009c4a <_vfiprintf_r+0x1a2>
 8009bb2:	b1b0      	cbz	r0, 8009be2 <_vfiprintf_r+0x13a>
 8009bb4:	9207      	str	r2, [sp, #28]
 8009bb6:	e014      	b.n	8009be2 <_vfiprintf_r+0x13a>
 8009bb8:	eba0 0308 	sub.w	r3, r0, r8
 8009bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	46a2      	mov	sl, r4
 8009bc6:	e7d2      	b.n	8009b6e <_vfiprintf_r+0xc6>
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	1d19      	adds	r1, r3, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	9103      	str	r1, [sp, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bfbb      	ittet	lt
 8009bd4:	425b      	neglt	r3, r3
 8009bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bda:	9307      	strge	r3, [sp, #28]
 8009bdc:	9307      	strlt	r3, [sp, #28]
 8009bde:	bfb8      	it	lt
 8009be0:	9204      	strlt	r2, [sp, #16]
 8009be2:	7823      	ldrb	r3, [r4, #0]
 8009be4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009be6:	d10a      	bne.n	8009bfe <_vfiprintf_r+0x156>
 8009be8:	7863      	ldrb	r3, [r4, #1]
 8009bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bec:	d132      	bne.n	8009c54 <_vfiprintf_r+0x1ac>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	9203      	str	r2, [sp, #12]
 8009bf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bfa:	3402      	adds	r4, #2
 8009bfc:	9305      	str	r3, [sp, #20]
 8009bfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cd4 <_vfiprintf_r+0x22c>
 8009c02:	7821      	ldrb	r1, [r4, #0]
 8009c04:	2203      	movs	r2, #3
 8009c06:	4650      	mov	r0, sl
 8009c08:	f7f6 fae2 	bl	80001d0 <memchr>
 8009c0c:	b138      	cbz	r0, 8009c1e <_vfiprintf_r+0x176>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	eba0 000a 	sub.w	r0, r0, sl
 8009c14:	2240      	movs	r2, #64	@ 0x40
 8009c16:	4082      	lsls	r2, r0
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	3401      	adds	r4, #1
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c22:	4829      	ldr	r0, [pc, #164]	@ (8009cc8 <_vfiprintf_r+0x220>)
 8009c24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c28:	2206      	movs	r2, #6
 8009c2a:	f7f6 fad1 	bl	80001d0 <memchr>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d03f      	beq.n	8009cb2 <_vfiprintf_r+0x20a>
 8009c32:	4b26      	ldr	r3, [pc, #152]	@ (8009ccc <_vfiprintf_r+0x224>)
 8009c34:	bb1b      	cbnz	r3, 8009c7e <_vfiprintf_r+0x1d6>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	3307      	adds	r3, #7
 8009c3a:	f023 0307 	bic.w	r3, r3, #7
 8009c3e:	3308      	adds	r3, #8
 8009c40:	9303      	str	r3, [sp, #12]
 8009c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c44:	443b      	add	r3, r7
 8009c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c48:	e76a      	b.n	8009b20 <_vfiprintf_r+0x78>
 8009c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c4e:	460c      	mov	r4, r1
 8009c50:	2001      	movs	r0, #1
 8009c52:	e7a8      	b.n	8009ba6 <_vfiprintf_r+0xfe>
 8009c54:	2300      	movs	r3, #0
 8009c56:	3401      	adds	r4, #1
 8009c58:	9305      	str	r3, [sp, #20]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f04f 0c0a 	mov.w	ip, #10
 8009c60:	4620      	mov	r0, r4
 8009c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c66:	3a30      	subs	r2, #48	@ 0x30
 8009c68:	2a09      	cmp	r2, #9
 8009c6a:	d903      	bls.n	8009c74 <_vfiprintf_r+0x1cc>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0c6      	beq.n	8009bfe <_vfiprintf_r+0x156>
 8009c70:	9105      	str	r1, [sp, #20]
 8009c72:	e7c4      	b.n	8009bfe <_vfiprintf_r+0x156>
 8009c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c78:	4604      	mov	r4, r0
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e7f0      	b.n	8009c60 <_vfiprintf_r+0x1b8>
 8009c7e:	ab03      	add	r3, sp, #12
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	462a      	mov	r2, r5
 8009c84:	4b12      	ldr	r3, [pc, #72]	@ (8009cd0 <_vfiprintf_r+0x228>)
 8009c86:	a904      	add	r1, sp, #16
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7fd fc59 	bl	8007540 <_printf_float>
 8009c8e:	4607      	mov	r7, r0
 8009c90:	1c78      	adds	r0, r7, #1
 8009c92:	d1d6      	bne.n	8009c42 <_vfiprintf_r+0x19a>
 8009c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c96:	07d9      	lsls	r1, r3, #31
 8009c98:	d405      	bmi.n	8009ca6 <_vfiprintf_r+0x1fe>
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	059a      	lsls	r2, r3, #22
 8009c9e:	d402      	bmi.n	8009ca6 <_vfiprintf_r+0x1fe>
 8009ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ca2:	f7fe faad 	bl	8008200 <__retarget_lock_release_recursive>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	065b      	lsls	r3, r3, #25
 8009caa:	f53f af1f 	bmi.w	8009aec <_vfiprintf_r+0x44>
 8009cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cb0:	e71e      	b.n	8009af0 <_vfiprintf_r+0x48>
 8009cb2:	ab03      	add	r3, sp, #12
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4b05      	ldr	r3, [pc, #20]	@ (8009cd0 <_vfiprintf_r+0x228>)
 8009cba:	a904      	add	r1, sp, #16
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7fd fed7 	bl	8007a70 <_printf_i>
 8009cc2:	e7e4      	b.n	8009c8e <_vfiprintf_r+0x1e6>
 8009cc4:	0800aa78 	.word	0x0800aa78
 8009cc8:	0800aa82 	.word	0x0800aa82
 8009ccc:	08007541 	.word	0x08007541
 8009cd0:	08009a83 	.word	0x08009a83
 8009cd4:	0800aa7e 	.word	0x0800aa7e

08009cd8 <__sflush_r>:
 8009cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce0:	0716      	lsls	r6, r2, #28
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	d454      	bmi.n	8009d92 <__sflush_r+0xba>
 8009ce8:	684b      	ldr	r3, [r1, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc02      	bgt.n	8009cf4 <__sflush_r+0x1c>
 8009cee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dd48      	ble.n	8009d86 <__sflush_r+0xae>
 8009cf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cf6:	2e00      	cmp	r6, #0
 8009cf8:	d045      	beq.n	8009d86 <__sflush_r+0xae>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d00:	682f      	ldr	r7, [r5, #0]
 8009d02:	6a21      	ldr	r1, [r4, #32]
 8009d04:	602b      	str	r3, [r5, #0]
 8009d06:	d030      	beq.n	8009d6a <__sflush_r+0x92>
 8009d08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	0759      	lsls	r1, r3, #29
 8009d0e:	d505      	bpl.n	8009d1c <__sflush_r+0x44>
 8009d10:	6863      	ldr	r3, [r4, #4]
 8009d12:	1ad2      	subs	r2, r2, r3
 8009d14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d16:	b10b      	cbz	r3, 8009d1c <__sflush_r+0x44>
 8009d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d1a:	1ad2      	subs	r2, r2, r3
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d20:	6a21      	ldr	r1, [r4, #32]
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b0      	blx	r6
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	d106      	bne.n	8009d3a <__sflush_r+0x62>
 8009d2c:	6829      	ldr	r1, [r5, #0]
 8009d2e:	291d      	cmp	r1, #29
 8009d30:	d82b      	bhi.n	8009d8a <__sflush_r+0xb2>
 8009d32:	4a2a      	ldr	r2, [pc, #168]	@ (8009ddc <__sflush_r+0x104>)
 8009d34:	410a      	asrs	r2, r1
 8009d36:	07d6      	lsls	r6, r2, #31
 8009d38:	d427      	bmi.n	8009d8a <__sflush_r+0xb2>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	6062      	str	r2, [r4, #4]
 8009d3e:	04d9      	lsls	r1, r3, #19
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	d504      	bpl.n	8009d50 <__sflush_r+0x78>
 8009d46:	1c42      	adds	r2, r0, #1
 8009d48:	d101      	bne.n	8009d4e <__sflush_r+0x76>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	b903      	cbnz	r3, 8009d50 <__sflush_r+0x78>
 8009d4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d52:	602f      	str	r7, [r5, #0]
 8009d54:	b1b9      	cbz	r1, 8009d86 <__sflush_r+0xae>
 8009d56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	d002      	beq.n	8009d64 <__sflush_r+0x8c>
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f7ff f89e 	bl	8008ea0 <_free_r>
 8009d64:	2300      	movs	r3, #0
 8009d66:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d68:	e00d      	b.n	8009d86 <__sflush_r+0xae>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	47b0      	blx	r6
 8009d70:	4602      	mov	r2, r0
 8009d72:	1c50      	adds	r0, r2, #1
 8009d74:	d1c9      	bne.n	8009d0a <__sflush_r+0x32>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0c6      	beq.n	8009d0a <__sflush_r+0x32>
 8009d7c:	2b1d      	cmp	r3, #29
 8009d7e:	d001      	beq.n	8009d84 <__sflush_r+0xac>
 8009d80:	2b16      	cmp	r3, #22
 8009d82:	d11e      	bne.n	8009dc2 <__sflush_r+0xea>
 8009d84:	602f      	str	r7, [r5, #0]
 8009d86:	2000      	movs	r0, #0
 8009d88:	e022      	b.n	8009dd0 <__sflush_r+0xf8>
 8009d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d8e:	b21b      	sxth	r3, r3
 8009d90:	e01b      	b.n	8009dca <__sflush_r+0xf2>
 8009d92:	690f      	ldr	r7, [r1, #16]
 8009d94:	2f00      	cmp	r7, #0
 8009d96:	d0f6      	beq.n	8009d86 <__sflush_r+0xae>
 8009d98:	0793      	lsls	r3, r2, #30
 8009d9a:	680e      	ldr	r6, [r1, #0]
 8009d9c:	bf08      	it	eq
 8009d9e:	694b      	ldreq	r3, [r1, #20]
 8009da0:	600f      	str	r7, [r1, #0]
 8009da2:	bf18      	it	ne
 8009da4:	2300      	movne	r3, #0
 8009da6:	eba6 0807 	sub.w	r8, r6, r7
 8009daa:	608b      	str	r3, [r1, #8]
 8009dac:	f1b8 0f00 	cmp.w	r8, #0
 8009db0:	dde9      	ble.n	8009d86 <__sflush_r+0xae>
 8009db2:	6a21      	ldr	r1, [r4, #32]
 8009db4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009db6:	4643      	mov	r3, r8
 8009db8:	463a      	mov	r2, r7
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b0      	blx	r6
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	dc08      	bgt.n	8009dd4 <__sflush_r+0xfc>
 8009dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd4:	4407      	add	r7, r0
 8009dd6:	eba8 0800 	sub.w	r8, r8, r0
 8009dda:	e7e7      	b.n	8009dac <__sflush_r+0xd4>
 8009ddc:	dfbffffe 	.word	0xdfbffffe

08009de0 <_fflush_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	4605      	mov	r5, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	b913      	cbnz	r3, 8009df0 <_fflush_r+0x10>
 8009dea:	2500      	movs	r5, #0
 8009dec:	4628      	mov	r0, r5
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	b118      	cbz	r0, 8009dfa <_fflush_r+0x1a>
 8009df2:	6a03      	ldr	r3, [r0, #32]
 8009df4:	b90b      	cbnz	r3, 8009dfa <_fflush_r+0x1a>
 8009df6:	f7fd ffe7 	bl	8007dc8 <__sinit>
 8009dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0f3      	beq.n	8009dea <_fflush_r+0xa>
 8009e02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e04:	07d0      	lsls	r0, r2, #31
 8009e06:	d404      	bmi.n	8009e12 <_fflush_r+0x32>
 8009e08:	0599      	lsls	r1, r3, #22
 8009e0a:	d402      	bmi.n	8009e12 <_fflush_r+0x32>
 8009e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0e:	f7fe f9f6 	bl	80081fe <__retarget_lock_acquire_recursive>
 8009e12:	4628      	mov	r0, r5
 8009e14:	4621      	mov	r1, r4
 8009e16:	f7ff ff5f 	bl	8009cd8 <__sflush_r>
 8009e1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e1c:	07da      	lsls	r2, r3, #31
 8009e1e:	4605      	mov	r5, r0
 8009e20:	d4e4      	bmi.n	8009dec <_fflush_r+0xc>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	059b      	lsls	r3, r3, #22
 8009e26:	d4e1      	bmi.n	8009dec <_fflush_r+0xc>
 8009e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e2a:	f7fe f9e9 	bl	8008200 <__retarget_lock_release_recursive>
 8009e2e:	e7dd      	b.n	8009dec <_fflush_r+0xc>

08009e30 <__swhatbuf_r>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	460c      	mov	r4, r1
 8009e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	b096      	sub	sp, #88	@ 0x58
 8009e3c:	4615      	mov	r5, r2
 8009e3e:	461e      	mov	r6, r3
 8009e40:	da0d      	bge.n	8009e5e <__swhatbuf_r+0x2e>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e48:	f04f 0100 	mov.w	r1, #0
 8009e4c:	bf14      	ite	ne
 8009e4e:	2340      	movne	r3, #64	@ 0x40
 8009e50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e54:	2000      	movs	r0, #0
 8009e56:	6031      	str	r1, [r6, #0]
 8009e58:	602b      	str	r3, [r5, #0]
 8009e5a:	b016      	add	sp, #88	@ 0x58
 8009e5c:	bd70      	pop	{r4, r5, r6, pc}
 8009e5e:	466a      	mov	r2, sp
 8009e60:	f000 f862 	bl	8009f28 <_fstat_r>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	dbec      	blt.n	8009e42 <__swhatbuf_r+0x12>
 8009e68:	9901      	ldr	r1, [sp, #4]
 8009e6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e72:	4259      	negs	r1, r3
 8009e74:	4159      	adcs	r1, r3
 8009e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e7a:	e7eb      	b.n	8009e54 <__swhatbuf_r+0x24>

08009e7c <__smakebuf_r>:
 8009e7c:	898b      	ldrh	r3, [r1, #12]
 8009e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e80:	079d      	lsls	r5, r3, #30
 8009e82:	4606      	mov	r6, r0
 8009e84:	460c      	mov	r4, r1
 8009e86:	d507      	bpl.n	8009e98 <__smakebuf_r+0x1c>
 8009e88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	6123      	str	r3, [r4, #16]
 8009e90:	2301      	movs	r3, #1
 8009e92:	6163      	str	r3, [r4, #20]
 8009e94:	b003      	add	sp, #12
 8009e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e98:	ab01      	add	r3, sp, #4
 8009e9a:	466a      	mov	r2, sp
 8009e9c:	f7ff ffc8 	bl	8009e30 <__swhatbuf_r>
 8009ea0:	9f00      	ldr	r7, [sp, #0]
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f7ff f86e 	bl	8008f88 <_malloc_r>
 8009eac:	b948      	cbnz	r0, 8009ec2 <__smakebuf_r+0x46>
 8009eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb2:	059a      	lsls	r2, r3, #22
 8009eb4:	d4ee      	bmi.n	8009e94 <__smakebuf_r+0x18>
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	f043 0302 	orr.w	r3, r3, #2
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	e7e2      	b.n	8009e88 <__smakebuf_r+0xc>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	6020      	str	r0, [r4, #0]
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	9b01      	ldr	r3, [sp, #4]
 8009ece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ed2:	b15b      	cbz	r3, 8009eec <__smakebuf_r+0x70>
 8009ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f000 f837 	bl	8009f4c <_isatty_r>
 8009ede:	b128      	cbz	r0, 8009eec <__smakebuf_r+0x70>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	f023 0303 	bic.w	r3, r3, #3
 8009ee6:	f043 0301 	orr.w	r3, r3, #1
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	431d      	orrs	r5, r3
 8009ef0:	81a5      	strh	r5, [r4, #12]
 8009ef2:	e7cf      	b.n	8009e94 <__smakebuf_r+0x18>

08009ef4 <memmove>:
 8009ef4:	4288      	cmp	r0, r1
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	eb01 0402 	add.w	r4, r1, r2
 8009efc:	d902      	bls.n	8009f04 <memmove+0x10>
 8009efe:	4284      	cmp	r4, r0
 8009f00:	4623      	mov	r3, r4
 8009f02:	d807      	bhi.n	8009f14 <memmove+0x20>
 8009f04:	1e43      	subs	r3, r0, #1
 8009f06:	42a1      	cmp	r1, r4
 8009f08:	d008      	beq.n	8009f1c <memmove+0x28>
 8009f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f12:	e7f8      	b.n	8009f06 <memmove+0x12>
 8009f14:	4402      	add	r2, r0
 8009f16:	4601      	mov	r1, r0
 8009f18:	428a      	cmp	r2, r1
 8009f1a:	d100      	bne.n	8009f1e <memmove+0x2a>
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f26:	e7f7      	b.n	8009f18 <memmove+0x24>

08009f28 <_fstat_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	@ (8009f48 <_fstat_r+0x20>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f7 fbf0 	bl	800171a <_fstat>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_fstat_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_fstat_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	200009e4 	.word	0x200009e4

08009f4c <_isatty_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d06      	ldr	r5, [pc, #24]	@ (8009f68 <_isatty_r+0x1c>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f7 fbe4 	bl	8001724 <_isatty>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_isatty_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_isatty_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	200009e4 	.word	0x200009e4

08009f6c <_sbrk_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	@ (8009f88 <_sbrk_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 fbd8 	bl	800172c <_sbrk>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_sbrk_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_sbrk_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	200009e4 	.word	0x200009e4

08009f8c <memcpy>:
 8009f8c:	440a      	add	r2, r1
 8009f8e:	4291      	cmp	r1, r2
 8009f90:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009f94:	d100      	bne.n	8009f98 <memcpy+0xc>
 8009f96:	4770      	bx	lr
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa2:	4291      	cmp	r1, r2
 8009fa4:	d1f9      	bne.n	8009f9a <memcpy+0xe>
 8009fa6:	bd10      	pop	{r4, pc}

08009fa8 <__assert_func>:
 8009fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009faa:	4614      	mov	r4, r2
 8009fac:	461a      	mov	r2, r3
 8009fae:	4b09      	ldr	r3, [pc, #36]	@ (8009fd4 <__assert_func+0x2c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	68d8      	ldr	r0, [r3, #12]
 8009fb6:	b954      	cbnz	r4, 8009fce <__assert_func+0x26>
 8009fb8:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <__assert_func+0x30>)
 8009fba:	461c      	mov	r4, r3
 8009fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fc0:	9100      	str	r1, [sp, #0]
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	4905      	ldr	r1, [pc, #20]	@ (8009fdc <__assert_func+0x34>)
 8009fc6:	f000 f86f 	bl	800a0a8 <fiprintf>
 8009fca:	f000 f87f 	bl	800a0cc <abort>
 8009fce:	4b04      	ldr	r3, [pc, #16]	@ (8009fe0 <__assert_func+0x38>)
 8009fd0:	e7f4      	b.n	8009fbc <__assert_func+0x14>
 8009fd2:	bf00      	nop
 8009fd4:	2000001c 	.word	0x2000001c
 8009fd8:	0800aace 	.word	0x0800aace
 8009fdc:	0800aaa0 	.word	0x0800aaa0
 8009fe0:	0800aa93 	.word	0x0800aa93

08009fe4 <_calloc_r>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	fba1 5402 	umull	r5, r4, r1, r2
 8009fea:	b93c      	cbnz	r4, 8009ffc <_calloc_r+0x18>
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7fe ffcb 	bl	8008f88 <_malloc_r>
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	b928      	cbnz	r0, 800a002 <_calloc_r+0x1e>
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	220c      	movs	r2, #12
 8009ffe:	6002      	str	r2, [r0, #0]
 800a000:	e7f9      	b.n	8009ff6 <_calloc_r+0x12>
 800a002:	462a      	mov	r2, r5
 800a004:	4621      	mov	r1, r4
 800a006:	f7fe f87d 	bl	8008104 <memset>
 800a00a:	e7f5      	b.n	8009ff8 <_calloc_r+0x14>

0800a00c <__ascii_mbtowc>:
 800a00c:	b082      	sub	sp, #8
 800a00e:	b901      	cbnz	r1, 800a012 <__ascii_mbtowc+0x6>
 800a010:	a901      	add	r1, sp, #4
 800a012:	b142      	cbz	r2, 800a026 <__ascii_mbtowc+0x1a>
 800a014:	b14b      	cbz	r3, 800a02a <__ascii_mbtowc+0x1e>
 800a016:	7813      	ldrb	r3, [r2, #0]
 800a018:	600b      	str	r3, [r1, #0]
 800a01a:	7812      	ldrb	r2, [r2, #0]
 800a01c:	1e10      	subs	r0, r2, #0
 800a01e:	bf18      	it	ne
 800a020:	2001      	movne	r0, #1
 800a022:	b002      	add	sp, #8
 800a024:	4770      	bx	lr
 800a026:	4610      	mov	r0, r2
 800a028:	e7fb      	b.n	800a022 <__ascii_mbtowc+0x16>
 800a02a:	f06f 0001 	mvn.w	r0, #1
 800a02e:	e7f8      	b.n	800a022 <__ascii_mbtowc+0x16>

0800a030 <_realloc_r>:
 800a030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a034:	4680      	mov	r8, r0
 800a036:	4615      	mov	r5, r2
 800a038:	460c      	mov	r4, r1
 800a03a:	b921      	cbnz	r1, 800a046 <_realloc_r+0x16>
 800a03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	4611      	mov	r1, r2
 800a042:	f7fe bfa1 	b.w	8008f88 <_malloc_r>
 800a046:	b92a      	cbnz	r2, 800a054 <_realloc_r+0x24>
 800a048:	f7fe ff2a 	bl	8008ea0 <_free_r>
 800a04c:	2400      	movs	r4, #0
 800a04e:	4620      	mov	r0, r4
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	f000 f841 	bl	800a0da <_malloc_usable_size_r>
 800a058:	4285      	cmp	r5, r0
 800a05a:	4606      	mov	r6, r0
 800a05c:	d802      	bhi.n	800a064 <_realloc_r+0x34>
 800a05e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a062:	d8f4      	bhi.n	800a04e <_realloc_r+0x1e>
 800a064:	4629      	mov	r1, r5
 800a066:	4640      	mov	r0, r8
 800a068:	f7fe ff8e 	bl	8008f88 <_malloc_r>
 800a06c:	4607      	mov	r7, r0
 800a06e:	2800      	cmp	r0, #0
 800a070:	d0ec      	beq.n	800a04c <_realloc_r+0x1c>
 800a072:	42b5      	cmp	r5, r6
 800a074:	462a      	mov	r2, r5
 800a076:	4621      	mov	r1, r4
 800a078:	bf28      	it	cs
 800a07a:	4632      	movcs	r2, r6
 800a07c:	f7ff ff86 	bl	8009f8c <memcpy>
 800a080:	4621      	mov	r1, r4
 800a082:	4640      	mov	r0, r8
 800a084:	f7fe ff0c 	bl	8008ea0 <_free_r>
 800a088:	463c      	mov	r4, r7
 800a08a:	e7e0      	b.n	800a04e <_realloc_r+0x1e>

0800a08c <__ascii_wctomb>:
 800a08c:	4603      	mov	r3, r0
 800a08e:	4608      	mov	r0, r1
 800a090:	b141      	cbz	r1, 800a0a4 <__ascii_wctomb+0x18>
 800a092:	2aff      	cmp	r2, #255	@ 0xff
 800a094:	d904      	bls.n	800a0a0 <__ascii_wctomb+0x14>
 800a096:	228a      	movs	r2, #138	@ 0x8a
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a09e:	4770      	bx	lr
 800a0a0:	700a      	strb	r2, [r1, #0]
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <fiprintf>:
 800a0a8:	b40e      	push	{r1, r2, r3}
 800a0aa:	b503      	push	{r0, r1, lr}
 800a0ac:	4601      	mov	r1, r0
 800a0ae:	ab03      	add	r3, sp, #12
 800a0b0:	4805      	ldr	r0, [pc, #20]	@ (800a0c8 <fiprintf+0x20>)
 800a0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b6:	6800      	ldr	r0, [r0, #0]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	f7ff fcf5 	bl	8009aa8 <_vfiprintf_r>
 800a0be:	b002      	add	sp, #8
 800a0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c4:	b003      	add	sp, #12
 800a0c6:	4770      	bx	lr
 800a0c8:	2000001c 	.word	0x2000001c

0800a0cc <abort>:
 800a0cc:	b508      	push	{r3, lr}
 800a0ce:	2006      	movs	r0, #6
 800a0d0:	f000 f834 	bl	800a13c <raise>
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f7f7 fb07 	bl	80016e8 <_exit>

0800a0da <_malloc_usable_size_r>:
 800a0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0de:	1f18      	subs	r0, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfbc      	itt	lt
 800a0e4:	580b      	ldrlt	r3, [r1, r0]
 800a0e6:	18c0      	addlt	r0, r0, r3
 800a0e8:	4770      	bx	lr

0800a0ea <_raise_r>:
 800a0ea:	291f      	cmp	r1, #31
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	d904      	bls.n	800a0fe <_raise_r+0x14>
 800a0f4:	2316      	movs	r3, #22
 800a0f6:	6003      	str	r3, [r0, #0]
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a100:	b112      	cbz	r2, 800a108 <_raise_r+0x1e>
 800a102:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a106:	b94b      	cbnz	r3, 800a11c <_raise_r+0x32>
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 f831 	bl	800a170 <_getpid_r>
 800a10e:	4622      	mov	r2, r4
 800a110:	4601      	mov	r1, r0
 800a112:	4628      	mov	r0, r5
 800a114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a118:	f000 b818 	b.w	800a14c <_kill_r>
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d00a      	beq.n	800a136 <_raise_r+0x4c>
 800a120:	1c59      	adds	r1, r3, #1
 800a122:	d103      	bne.n	800a12c <_raise_r+0x42>
 800a124:	2316      	movs	r3, #22
 800a126:	6003      	str	r3, [r0, #0]
 800a128:	2001      	movs	r0, #1
 800a12a:	e7e7      	b.n	800a0fc <_raise_r+0x12>
 800a12c:	2100      	movs	r1, #0
 800a12e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a132:	4620      	mov	r0, r4
 800a134:	4798      	blx	r3
 800a136:	2000      	movs	r0, #0
 800a138:	e7e0      	b.n	800a0fc <_raise_r+0x12>
	...

0800a13c <raise>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	@ (800a148 <raise+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f7ff bfd2 	b.w	800a0ea <_raise_r>
 800a146:	bf00      	nop
 800a148:	2000001c 	.word	0x2000001c

0800a14c <_kill_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	@ (800a16c <_kill_r+0x20>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	f7f7 fabd 	bl	80016d8 <_kill>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d102      	bne.n	800a168 <_kill_r+0x1c>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	b103      	cbz	r3, 800a168 <_kill_r+0x1c>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	200009e4 	.word	0x200009e4

0800a170 <_getpid_r>:
 800a170:	f7f7 bab0 	b.w	80016d4 <_getpid>

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
