
stm32world_sd_fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08009a88  08009a88  0000aa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe0  08009fe0  0001c000  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe0  08009fe0  0000afe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fe8  08009fe8  0001c000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fe8  08009fe8  0000afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fec  08009fec  0000afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009ff0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00010000  10000000  0800a1cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000115c  200001dc  200001dc  0001c1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001338  20001338  0001c1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c000  2**0
                  CONTENTS, READONLY
 13 .debug_info   000276df  00000000  00000000  0001c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a83  00000000  00000000  0004370f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001174e  00000000  00000000  00048192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019d0  00000000  00000000  000598e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014a4  00000000  00000000  0005b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005ee4  00000000  00000000  0005c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026919  00000000  00000000  00062638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d30c5  00000000  00000000  00088f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015c016  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005a60  00000000  00000000  0015c05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00161abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a70 	.word	0x08009a70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009a70 	.word	0x08009a70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_SDIO_SD_Init+0x1c>)
 8000e9a:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <MX_SDIO_SD_Init+0x20>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ea2:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ea4:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eaa:	6119      	str	r1, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eac:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000eae:	2204      	movs	r2, #4
 8000eb0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000300 	.word	0x20000300
 8000eb8:	40012c00 	.word	0x40012c00

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b530      	push	{r4, r5, lr}
 8000ebe:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	9405      	str	r4, [sp, #20]
 8000ec4:	9406      	str	r4, [sp, #24]
 8000ec6:	9407      	str	r4, [sp, #28]
 8000ec8:	9408      	str	r4, [sp, #32]
 8000eca:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ecc:	9400      	str	r4, [sp, #0]
 8000ece:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <MX_GPIO_Init+0xb0>)
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eda:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	9401      	str	r4, [sp, #4]
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee6:	f042 0204 	orr.w	r2, r2, #4
 8000eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eee:	f002 0204 	and.w	r2, r2, #4
 8000ef2:	9201      	str	r2, [sp, #4]
 8000ef4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	9402      	str	r4, [sp, #8]
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f02:	f002 0201 	and.w	r2, r2, #1
 8000f06:	9202      	str	r2, [sp, #8]
 8000f08:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	9403      	str	r4, [sp, #12]
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0e:	f042 0208 	orr.w	r2, r2, #8
 8000f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f16:	f002 0208 	and.w	r2, r2, #8
 8000f1a:	9203      	str	r2, [sp, #12]
 8000f1c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	9404      	str	r4, [sp, #16]
 8000f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f22:	f042 0202 	orr.w	r2, r2, #2
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f32:	4d0f      	ldr	r5, [pc, #60]	@ (8000f70 <MX_GPIO_Init+0xb4>)
 8000f34:	4622      	mov	r2, r4
 8000f36:	2110      	movs	r1, #16
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f001 f828 	bl	8001f8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8000f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	a905      	add	r1, sp, #20
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <MX_GPIO_Init+0xb8>)
 8000f4e:	f000 ff21 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f52:	2310      	movs	r3, #16
 8000f54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f56:	2311      	movs	r3, #17
 8000f58:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	a905      	add	r1, sp, #20
 8000f60:	4628      	mov	r0, r5
 8000f62:	f000 ff17 	bl	8001d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	b00b      	add	sp, #44	@ 0x2c
 8000f68:	bd30      	pop	{r4, r5, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020000 	.word	0x40020000

08000f78 <MX_DMA_Init>:
{
 8000f78:	b500      	push	{lr}
 8000f7a:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	9101      	str	r1, [sp, #4]
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_DMA_Init+0x30>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f84:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f94:	460a      	mov	r2, r1
 8000f96:	203b      	movs	r0, #59	@ 0x3b
 8000f98:	f000 fc80 	bl	800189c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f9c:	203b      	movs	r0, #59	@ 0x3b
 8000f9e:	f000 fc8d 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 8000fa2:	b003      	add	sp, #12
 8000fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa8:	40023800 	.word	0x40023800

08000fac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;)
            {
        osDelay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f003 fd24 	bl	80049fc <osDelay>
    for (;;)
 8000fb4:	e7fb      	b.n	8000fae <StartDefaultTask+0x2>
	...

08000fb8 <StartLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartLedTask */
    /* Infinite loop */
    for (;;) {
        osDelay(500);
 8000fba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fbe:	f003 fd1d 	bl	80049fc <osDelay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	4801      	ldr	r0, [pc, #4]	@ (8000fcc <StartLedTask+0x14>)
 8000fc6:	f000 ffe8 	bl	8001f9a <HAL_GPIO_TogglePin>
    for (;;) {
 8000fca:	e7f6      	b.n	8000fba <StartLedTask+0x2>
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <StartStatusTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStatusTask */
void StartStatusTask(void *argument)
{
 8000fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd4:	b08a      	sub	sp, #40	@ 0x28
 8000fd6:	e04f      	b.n	8001078 <StartStatusTask+0xa8>
            printf("No       Name          P  S   Usage       Count      HW\n");

            for (x = 0; x < uxArraySize; x++) {

                runtime_percentage = (float) (100
                        * (float) pxTaskStatusArray[x].ulRunTimeCounter
 8000fd8:	9b08      	ldr	r3, [sp, #32]
 8000fda:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000fde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fea:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80010cc <StartStatusTask+0xfc>
 8000fee:	ee67 7a87 	vmul.f32	s15, s15, s14
                        / (float) ulTotalRunTime);
 8000ff2:	ed9d 7a07 	vldr	s14, [sp, #28]
 8000ff6:	eeb8 7a47 	vcvt.f32.u32	s14, s14

                printf("Task %2lu: %-12s %2lu %2d %8.4f (%12lu) %5i\n",
 8000ffa:	9d08      	ldr	r5, [sp, #32]
                        x,
                        pxTaskStatusArray[x].pcTaskName,
 8000ffc:	9a08      	ldr	r2, [sp, #32]
 8000ffe:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8001002:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                        pxTaskStatusArray[x].uxCurrentPriority,
 8001006:	9b08      	ldr	r3, [sp, #32]
 8001008:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800100c:	eb04 0083 	add.w	r0, r4, r3, lsl #2
                        pxTaskStatusArray[x].eCurrentState,
 8001010:	9b08      	ldr	r3, [sp, #32]
 8001012:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001016:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800101a:	7b1e      	ldrb	r6, [r3, #12]
                        runtime_percentage,
                        pxTaskStatusArray[x].ulRunTimeCounter,
 800101c:	9b08      	ldr	r3, [sp, #32]
 800101e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                        pxTaskStatusArray[x].usStackHighWaterMark);
 8001026:	9908      	ldr	r1, [sp, #32]
 8001028:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800102c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001030:	8c09      	ldrh	r1, [r1, #32]
                printf("Task %2lu: %-12s %2lu %2d %8.4f (%12lu) %5i\n",
 8001032:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8001036:	6857      	ldr	r7, [r2, #4]
 8001038:	9105      	str	r1, [sp, #20]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	9304      	str	r3, [sp, #16]
 800103e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001042:	ee17 0a90 	vmov	r0, s15
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800104e:	9600      	str	r6, [sp, #0]
 8001050:	4643      	mov	r3, r8
 8001052:	463a      	mov	r2, r7
 8001054:	4629      	mov	r1, r5
 8001056:	481e      	ldr	r0, [pc, #120]	@ (80010d0 <StartStatusTask+0x100>)
 8001058:	f006 fcde 	bl	8007a18 <iprintf>
            for (x = 0; x < uxArraySize; x++) {
 800105c:	9b08      	ldr	r3, [sp, #32]
 800105e:	3301      	adds	r3, #1
 8001060:	9308      	str	r3, [sp, #32]
 8001062:	9a08      	ldr	r2, [sp, #32]
 8001064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001066:	429a      	cmp	r2, r3
 8001068:	d3b6      	bcc.n	8000fd8 <StartStatusTask+0x8>

            }

            vPortFree(pxTaskStatusArray);
 800106a:	4620      	mov	r0, r4
 800106c:	f005 ff7c 	bl	8006f68 <vPortFree>

        } else {
            printf("Unable to allocate stack space\n");
        }

        osMutexRelease(printMutexHandle);
 8001070:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <StartStatusTask+0x104>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	f003 fd48 	bl	8004b08 <osMutexRelease>
        osDelay(10000);
 8001078:	f242 7010 	movw	r0, #10000	@ 0x2710
 800107c:	f003 fcbe 	bl	80049fc <osDelay>
        uxArraySize = uxTaskGetNumberOfTasks();
 8001080:	f004 fe70 	bl	8005d64 <uxTaskGetNumberOfTasks>
 8001084:	9009      	str	r0, [sp, #36]	@ 0x24
        pxTaskStatusArray = pvPortMalloc(uxArraySize * sizeof(TaskStatus_t)); // a little bit scary!
 8001086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001088:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800108c:	0080      	lsls	r0, r0, #2
 800108e:	f005 fee9 	bl	8006e64 <pvPortMalloc>
 8001092:	4604      	mov	r4, r0
        osMutexWait(printMutexHandle, osWaitForever);
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <StartStatusTask+0x104>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f003 fd05 	bl	8004aaa <osMutexAcquire>
        if (pxTaskStatusArray != NULL) {
 80010a0:	b17c      	cbz	r4, 80010c2 <StartStatusTask+0xf2>
            uxArraySize = uxTaskGetSystemState(pxTaskStatusArray, uxArraySize,
 80010a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80010a4:	aa07      	add	r2, sp, #28
 80010a6:	4620      	mov	r0, r4
 80010a8:	f005 f930 	bl	800630c <uxTaskGetSystemState>
 80010ac:	9009      	str	r0, [sp, #36]	@ 0x24
            printf("Task count = %lu\n", uxArraySize);
 80010ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <StartStatusTask+0x108>)
 80010b2:	f006 fcb1 	bl	8007a18 <iprintf>
            printf("No       Name          P  S   Usage       Count      HW\n");
 80010b6:	4809      	ldr	r0, [pc, #36]	@ (80010dc <StartStatusTask+0x10c>)
 80010b8:	f006 fd16 	bl	8007ae8 <puts>
            for (x = 0; x < uxArraySize; x++) {
 80010bc:	2300      	movs	r3, #0
 80010be:	9308      	str	r3, [sp, #32]
 80010c0:	e7cf      	b.n	8001062 <StartStatusTask+0x92>
            printf("Unable to allocate stack space\n");
 80010c2:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <StartStatusTask+0x110>)
 80010c4:	f006 fd10 	bl	8007ae8 <puts>
 80010c8:	e7d2      	b.n	8001070 <StartStatusTask+0xa0>
 80010ca:	bf00      	nop
 80010cc:	42c80000 	.word	0x42c80000
 80010d0:	08009ad4 	.word	0x08009ad4
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	08009a88 	.word	0x08009a88
 80010dc:	08009a9c 	.word	0x08009a9c
 80010e0:	08009b04 	.word	0x08009b04

080010e4 <StartTickTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTickTask */
void StartTickTask(void *argument)
{
 80010e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTickTask */
    /* Infinite loop */
    for (;;)
            {

        osDelay(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ea:	f003 fc87 	bl	80049fc <osDelay>

        osMutexWait(printMutexHandle, osWaitForever);
 80010ee:	4c09      	ldr	r4, [pc, #36]	@ (8001114 <StartTickTask+0x30>)
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f4:	6820      	ldr	r0, [r4, #0]
 80010f6:	f003 fcd8 	bl	8004aaa <osMutexAcquire>

        printf("Tick %lu\n", osKernelGetTickCount() / 1000);
 80010fa:	f003 fc17 	bl	800492c <osKernelGetTickCount>
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <StartTickTask+0x34>)
 8001100:	fba3 3100 	umull	r3, r1, r3, r0
 8001104:	0989      	lsrs	r1, r1, #6
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <StartTickTask+0x38>)
 8001108:	f006 fc86 	bl	8007a18 <iprintf>

        osMutexRelease(printMutexHandle);
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	f003 fcfb 	bl	8004b08 <osMutexRelease>
    for (;;)
 8001112:	e7e8      	b.n	80010e6 <StartTickTask+0x2>
 8001114:	200001fc 	.word	0x200001fc
 8001118:	10624dd3 	.word	0x10624dd3
 800111c:	08009b24 	.word	0x08009b24

08001120 <_write>:
    if (fd == 1 || fd == 2) {
 8001120:	3801      	subs	r0, #1
 8001122:	2801      	cmp	r0, #1
 8001124:	d80a      	bhi.n	800113c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8001126:	b510      	push	{r4, lr}
 8001128:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800112a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112e:	b292      	uxth	r2, r2
 8001130:	4805      	ldr	r0, [pc, #20]	@ (8001148 <_write+0x28>)
 8001132:	f002 fc26 	bl	8003982 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8001136:	b920      	cbnz	r0, 8001142 <_write+0x22>
            return len;
 8001138:	4620      	mov	r0, r4
}
 800113a:	bd10      	pop	{r4, pc}
    return -1;
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001140:	4770      	bx	lr
            return -1;
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001146:	e7f8      	b.n	800113a <_write+0x1a>
 8001148:	20000210 	.word	0x20000210

0800114c <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void) {
 800114c:	b508      	push	{r3, lr}
    ulHighFrequencyTimerTicks = 0;
 800114e:	4b03      	ldr	r3, [pc, #12]	@ (800115c <configureTimerForRunTimeStats+0x10>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim13);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <configureTimerForRunTimeStats+0x14>)
 8001156:	f002 f929 	bl	80033ac <HAL_TIM_Base_Start_IT>
}
 800115a:	bd08      	pop	{r3, pc}
 800115c:	200001f8 	.word	0x200001f8
 8001160:	20000258 	.word	0x20000258

08001164 <getRunTimeCounterValue>:
    return ulHighFrequencyTimerTicks;
 8001164:	4b01      	ldr	r3, [pc, #4]	@ (800116c <getRunTimeCounterValue+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200001f8 	.word	0x200001f8

08001170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8001172:	6802      	ldr	r2, [r0, #0]
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001176:	429a      	cmp	r2, r3
 8001178:	d000      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800117c:	f000 fb14 	bl	80017a8 <HAL_IncTick>
}
 8001180:	e7fb      	b.n	800117a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001182:	bf00      	nop
 8001184:	40001800 	.word	0x40001800

08001188 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800118a:	e7fe      	b.n	800118a <Error_Handler+0x2>

0800118c <MX_USART1_UART_Init>:
{
 800118c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800118e:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <MX_USART1_UART_Init+0x2c>)
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_USART1_UART_Init+0x30>)
 8001192:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2000000;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <MX_USART1_UART_Init+0x34>)
 8001196:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001198:	2300      	movs	r3, #0
 800119a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a0:	220c      	movs	r2, #12
 80011a2:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a4:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80011a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011aa:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ac:	f002 fbb9 	bl	8003922 <HAL_UART_Init>
 80011b0:	b900      	cbnz	r0, 80011b4 <MX_USART1_UART_Init+0x28>
}
 80011b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011b4:	f7ff ffe8 	bl	8001188 <Error_Handler>
 80011b8:	20000210 	.word	0x20000210
 80011bc:	40011000 	.word	0x40011000
 80011c0:	001e8480 	.word	0x001e8480

080011c4 <MX_TIM13_Init>:
{
 80011c4:	b508      	push	{r3, lr}
  htim13.Instance = TIM13;
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_TIM13_Init+0x24>)
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <MX_TIM13_Init+0x28>)
 80011ca:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 84 - 1;
 80011cc:	2353      	movs	r3, #83	@ 0x53
 80011ce:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	2300      	movs	r3, #0
 80011d2:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 10 - 1;
 80011d4:	2209      	movs	r2, #9
 80011d6:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011dc:	f002 fa4a 	bl	8003674 <HAL_TIM_Base_Init>
 80011e0:	b900      	cbnz	r0, 80011e4 <MX_TIM13_Init+0x20>
}
 80011e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011e4:	f7ff ffd0 	bl	8001188 <Error_Handler>
 80011e8:	20000258 	.word	0x20000258
 80011ec:	40001c00 	.word	0x40001c00

080011f0 <SystemClock_Config>:
{
 80011f0:	b500      	push	{lr}
 80011f2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f4:	2230      	movs	r2, #48	@ 0x30
 80011f6:	2100      	movs	r1, #0
 80011f8:	a808      	add	r0, sp, #32
 80011fa:	f006 fd55 	bl	8007ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fe:	2300      	movs	r3, #0
 8001200:	9303      	str	r3, [sp, #12]
 8001202:	9304      	str	r3, [sp, #16]
 8001204:	9305      	str	r3, [sp, #20]
 8001206:	9306      	str	r3, [sp, #24]
 8001208:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	4a20      	ldr	r2, [pc, #128]	@ (8001290 <SystemClock_Config+0xa0>)
 800120e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001210:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001214:	6411      	str	r1, [r2, #64]	@ 0x40
 8001216:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001218:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800121c:	9201      	str	r2, [sp, #4]
 800121e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <SystemClock_Config+0xa4>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001236:	2301      	movs	r3, #1
 8001238:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2302      	movs	r3, #2
 8001242:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001244:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001248:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124a:	2208      	movs	r2, #8
 800124c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800124e:	22a8      	movs	r2, #168	@ 0xa8
 8001250:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001254:	2307      	movs	r3, #7
 8001256:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	a808      	add	r0, sp, #32
 800125a:	f000 fea7 	bl	8001fac <HAL_RCC_OscConfig>
 800125e:	b998      	cbnz	r0, 8001288 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2302      	movs	r3, #2
 8001266:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001270:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001276:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001278:	2105      	movs	r1, #5
 800127a:	a803      	add	r0, sp, #12
 800127c:	f001 f8fa 	bl	8002474 <HAL_RCC_ClockConfig>
 8001280:	b920      	cbnz	r0, 800128c <SystemClock_Config+0x9c>
}
 8001282:	b015      	add	sp, #84	@ 0x54
 8001284:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001288:	f7ff ff7e 	bl	8001188 <Error_Handler>
    Error_Handler();
 800128c:	f7ff ff7c 	bl	8001188 <Error_Handler>
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <main>:
{
 8001298:	b508      	push	{r3, lr}
  HAL_Init();
 800129a:	f000 fa6b 	bl	8001774 <HAL_Init>
  SystemClock_Config();
 800129e:	f7ff ffa7 	bl	80011f0 <SystemClock_Config>
  MX_GPIO_Init();
 80012a2:	f7ff fe0b 	bl	8000ebc <MX_GPIO_Init>
  MX_DMA_Init();
 80012a6:	f7ff fe67 	bl	8000f78 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80012aa:	f7ff fdf5 	bl	8000e98 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80012ae:	f7ff ff6d 	bl	800118c <MX_USART1_UART_Init>
  MX_TIM13_Init();
 80012b2:	f7ff ff87 	bl	80011c4 <MX_TIM13_Init>
  MX_FATFS_Init();
 80012b6:	f003 f919 	bl	80044ec <MX_FATFS_Init>
    printf("\n\n\n\n--------\nStarting\n");
 80012ba:	4814      	ldr	r0, [pc, #80]	@ (800130c <main+0x74>)
 80012bc:	f006 fc14 	bl	8007ae8 <puts>
  osKernelInitialize();
 80012c0:	f003 faf4 	bl	80048ac <osKernelInitialize>
  printMutexHandle = osMutexNew(&printMutex_attributes);
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <main+0x78>)
 80012c6:	f003 fba7 	bl	8004a18 <osMutexNew>
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <main+0x7c>)
 80012cc:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <main+0x80>)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4812      	ldr	r0, [pc, #72]	@ (800131c <main+0x84>)
 80012d4:	f003 fb34 	bl	8004940 <osThreadNew>
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <main+0x88>)
 80012da:	6018      	str	r0, [r3, #0]
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 80012dc:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <main+0x8c>)
 80012de:	2100      	movs	r1, #0
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <main+0x90>)
 80012e2:	f003 fb2d 	bl	8004940 <osThreadNew>
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <main+0x94>)
 80012e8:	6018      	str	r0, [r3, #0]
  statusTaskHandle = osThreadNew(StartStatusTask, NULL, &statusTask_attributes);
 80012ea:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <main+0x98>)
 80012ec:	2100      	movs	r1, #0
 80012ee:	4811      	ldr	r0, [pc, #68]	@ (8001334 <main+0x9c>)
 80012f0:	f003 fb26 	bl	8004940 <osThreadNew>
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <main+0xa0>)
 80012f6:	6018      	str	r0, [r3, #0]
  tickTaskHandle = osThreadNew(StartTickTask, NULL, &tickTask_attributes);
 80012f8:	4a10      	ldr	r2, [pc, #64]	@ (800133c <main+0xa4>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4810      	ldr	r0, [pc, #64]	@ (8001340 <main+0xa8>)
 80012fe:	f003 fb1f 	bl	8004940 <osThreadNew>
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <main+0xac>)
 8001304:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001306:	f003 faf5 	bl	80048f4 <osKernelStart>
    while (1)
 800130a:	e7fe      	b.n	800130a <main+0x72>
 800130c:	08009b30 	.word	0x08009b30
 8001310:	08009b80 	.word	0x08009b80
 8001314:	200001fc 	.word	0x200001fc
 8001318:	08009bfc 	.word	0x08009bfc
 800131c:	08000fad 	.word	0x08000fad
 8001320:	2000020c 	.word	0x2000020c
 8001324:	08009bd8 	.word	0x08009bd8
 8001328:	08000fb9 	.word	0x08000fb9
 800132c:	20000208 	.word	0x20000208
 8001330:	08009bb4 	.word	0x08009bb4
 8001334:	08000fd1 	.word	0x08000fd1
 8001338:	20000204 	.word	0x20000204
 800133c:	08009b90 	.word	0x08009b90
 8001340:	080010e5 	.word	0x080010e5
 8001344:	20000200 	.word	0x20000200

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b500      	push	{lr}
 800134a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134c:	2200      	movs	r2, #0
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_MspInit+0x40>)
 8001352:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001354:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001358:	6459      	str	r1, [r3, #68]	@ 0x44
 800135a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800135c:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001360:	9100      	str	r1, [sp, #0]
 8001362:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001368:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800136c:	6419      	str	r1, [r3, #64]	@ 0x40
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001378:	210f      	movs	r1, #15
 800137a:	f06f 0001 	mvn.w	r0, #1
 800137e:	f000 fa8d 	bl	800189c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	b003      	add	sp, #12
 8001384:	f85d fb04 	ldr.w	pc, [sp], #4
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800138c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001390:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	2300      	movs	r3, #0
 8001394:	9303      	str	r3, [sp, #12]
 8001396:	9304      	str	r3, [sp, #16]
 8001398:	9305      	str	r3, [sp, #20]
 800139a:	9306      	str	r3, [sp, #24]
 800139c:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 800139e:	6802      	ldr	r2, [r0, #0]
 80013a0:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <HAL_SD_MspInit+0x100>)
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80013a6:	b009      	add	sp, #36	@ 0x24
 80013a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ac:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 80013ae:	2500      	movs	r5, #0
 80013b0:	9500      	str	r5, [sp, #0]
 80013b2:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80013b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80013be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013c0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	9501      	str	r5, [sp, #4]
 80013ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d4:	f002 0204 	and.w	r2, r2, #4
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013dc:	9502      	str	r5, [sp, #8]
 80013de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013e0:	f042 0208 	orr.w	r2, r2, #8
 80013e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013f0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80013f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	f04f 0902 	mov.w	r9, #2
 80013fa:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2603      	movs	r6, #3
 8001400:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001402:	f04f 080c 	mov.w	r8, #12
 8001406:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	eb0d 0108 	add.w	r1, sp, r8
 800140e:	4820      	ldr	r0, [pc, #128]	@ (8001490 <HAL_SD_MspInit+0x104>)
 8001410:	f000 fcc0 	bl	8001d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001414:	2704      	movs	r7, #4
 8001416:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001420:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001424:	eb0d 0108 	add.w	r1, sp, r8
 8001428:	481a      	ldr	r0, [pc, #104]	@ (8001494 <HAL_SD_MspInit+0x108>)
 800142a:	f000 fcb3 	bl	8001d94 <HAL_GPIO_Init>
    hdma_sdio.Instance = DMA2_Stream3;
 800142e:	481a      	ldr	r0, [pc, #104]	@ (8001498 <HAL_SD_MspInit+0x10c>)
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_SD_MspInit+0x110>)
 8001432:	6003      	str	r3, [r0, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8001434:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001438:	6043      	str	r3, [r0, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	6085      	str	r5, [r0, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	60c5      	str	r5, [r0, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001442:	6103      	str	r3, [r0, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001448:	6143      	str	r3, [r0, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800144a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800144e:	6183      	str	r3, [r0, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8001450:	2320      	movs	r3, #32
 8001452:	61c3      	str	r3, [r0, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	6205      	str	r5, [r0, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001456:	6247      	str	r7, [r0, #36]	@ 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001458:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 800145a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800145e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8001460:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001464:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8001466:	f000 faad 	bl	80019c4 <HAL_DMA_Init>
 800146a:	b960      	cbnz	r0, 8001486 <HAL_SD_MspInit+0xfa>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_SD_MspInit+0x10c>)
 800146e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001470:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 8001472:	63e3      	str	r3, [r4, #60]	@ 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	4611      	mov	r1, r2
 8001478:	2031      	movs	r0, #49	@ 0x31
 800147a:	f000 fa0f 	bl	800189c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800147e:	2031      	movs	r0, #49	@ 0x31
 8001480:	f000 fa1c 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 8001484:	e78f      	b.n	80013a6 <HAL_SD_MspInit+0x1a>
      Error_Handler();
 8001486:	f7ff fe7f 	bl	8001188 <Error_Handler>
 800148a:	e7ef      	b.n	800146c <HAL_SD_MspInit+0xe0>
 800148c:	40012c00 	.word	0x40012c00
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	200002a0 	.word	0x200002a0
 800149c:	40026458 	.word	0x40026458

080014a0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM13)
 80014a0:	6802      	ldr	r2, [r0, #0]
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_TIM_Base_MspInit+0x3c>)
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d000      	beq.n	80014aa <HAL_TIM_Base_MspInit+0xa>
 80014a8:	4770      	bx	lr
{
 80014aa:	b500      	push	{lr}
 80014ac:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80014ae:	2100      	movs	r1, #0
 80014b0:	9101      	str	r1, [sp, #4]
 80014b2:	f503 3307 	add.w	r3, r3, #138240	@ 0x21c00
 80014b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	9b01      	ldr	r3, [sp, #4]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80014c8:	460a      	mov	r2, r1
 80014ca:	202c      	movs	r0, #44	@ 0x2c
 80014cc:	f000 f9e6 	bl	800189c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80014d0:	202c      	movs	r0, #44	@ 0x2c
 80014d2:	f000 f9f3 	bl	80018bc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM13_MspInit 1 */

  }

}
 80014d6:	b003      	add	sp, #12
 80014d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80014dc:	40001c00 	.word	0x40001c00

080014e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b510      	push	{r4, lr}
 80014e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	2300      	movs	r3, #0
 80014e6:	9303      	str	r3, [sp, #12]
 80014e8:	9304      	str	r3, [sp, #16]
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	9306      	str	r3, [sp, #24]
 80014ee:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80014f0:	6802      	ldr	r2, [r0, #0]
 80014f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014f6:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d001      	beq.n	8001502 <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80014fe:	b008      	add	sp, #32
 8001500:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001502:	2400      	movs	r4, #0
 8001504:	9401      	str	r4, [sp, #4]
 8001506:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800150a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800150c:	f042 0210 	orr.w	r2, r2, #16
 8001510:	645a      	str	r2, [r3, #68]	@ 0x44
 8001512:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001514:	f002 0210 	and.w	r2, r2, #16
 8001518:	9201      	str	r2, [sp, #4]
 800151a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	9402      	str	r4, [sp, #8]
 800151e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001530:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001534:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800153e:	2307      	movs	r3, #7
 8001540:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	a903      	add	r1, sp, #12
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <HAL_UART_MspInit+0x7c>)
 8001546:	f000 fc25 	bl	8001d94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800154a:	4622      	mov	r2, r4
 800154c:	4621      	mov	r1, r4
 800154e:	2025      	movs	r0, #37	@ 0x25
 8001550:	f000 f9a4 	bl	800189c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001554:	2025      	movs	r0, #37	@ 0x25
 8001556:	f000 f9b1 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 800155a:	e7d0      	b.n	80014fe <HAL_UART_MspInit+0x1e>
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b530      	push	{r4, r5, lr}
 8001562:	b089      	sub	sp, #36	@ 0x24
 8001564:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <HAL_InitTick+0x90>)
 800156c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800157e:	a902      	add	r1, sp, #8
 8001580:	a803      	add	r0, sp, #12
 8001582:	f001 f84d 	bl	8002620 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001586:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM12 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001588:	b9cb      	cbnz	r3, 80015be <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800158a:	f001 f829 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800158e:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001590:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_InitTick+0x94>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	3b01      	subs	r3, #1

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 800159a:	4817      	ldr	r0, [pc, #92]	@ (80015f8 <HAL_InitTick+0x98>)
 800159c:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_InitTick+0x9c>)
 800159e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80015a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015a4:	60c2      	str	r2, [r0, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 80015a6:	6043      	str	r3, [r0, #4]
  htim12.Init.ClockDivision = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	6103      	str	r3, [r0, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	6083      	str	r3, [r0, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim12);
 80015b0:	f002 f860 	bl	8003674 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80015b4:	4605      	mov	r5, r0
 80015b6:	b130      	cbz	r0, 80015c6 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80015b8:	4628      	mov	r0, r5
 80015ba:	b009      	add	sp, #36	@ 0x24
 80015bc:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015be:	f001 f80f 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80015c2:	0043      	lsls	r3, r0, #1
 80015c4:	e7e4      	b.n	8001590 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim12);
 80015c6:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <HAL_InitTick+0x98>)
 80015c8:	f001 fef0 	bl	80033ac <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80015cc:	4605      	mov	r5, r0
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d1f2      	bne.n	80015b8 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80015d2:	202b      	movs	r0, #43	@ 0x2b
 80015d4:	f000 f972 	bl	80018bc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d8:	2c0f      	cmp	r4, #15
 80015da:	d901      	bls.n	80015e0 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80015dc:	2501      	movs	r5, #1
 80015de:	e7eb      	b.n	80015b8 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	4621      	mov	r1, r4
 80015e4:	202b      	movs	r0, #43	@ 0x2b
 80015e6:	f000 f959 	bl	800189c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_InitTick+0xa0>)
 80015ec:	601c      	str	r4, [r3, #0]
 80015ee:	e7e3      	b.n	80015b8 <HAL_InitTick+0x58>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	431bde83 	.word	0x431bde83
 80015f8:	20000384 	.word	0x20000384
 80015fc:	40001800 	.word	0x40001800
 8001600:	20000008 	.word	0x20000008

08001604 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler>

08001606 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler>

08001608 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler>

0800160a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler>

0800160c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler>

0800160e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	4770      	bx	lr

08001610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001612:	4802      	ldr	r0, [pc, #8]	@ (800161c <USART1_IRQHandler+0xc>)
 8001614:	f002 faa8 	bl	8003b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001618:	bd08      	pop	{r3, pc}
 800161a:	bf00      	nop
 800161c:	20000210 	.word	0x20000210

08001620 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001620:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001622:	4802      	ldr	r0, [pc, #8]	@ (800162c <TIM8_BRK_TIM12_IRQHandler+0xc>)
 8001624:	f001 ff0a 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001628:	bd08      	pop	{r3, pc}
 800162a:	bf00      	nop
 800162c:	20000384 	.word	0x20000384

08001630 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001632:	4804      	ldr	r0, [pc, #16]	@ (8001644 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001634:	f001 ff02 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  ++ulHighFrequencyTimerTicks;
 8001638:	4a03      	ldr	r2, [pc, #12]	@ (8001648 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001640:	bd08      	pop	{r3, pc}
 8001642:	bf00      	nop
 8001644:	20000258 	.word	0x20000258
 8001648:	200001f8 	.word	0x200001f8

0800164c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800164c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800164e:	4802      	ldr	r0, [pc, #8]	@ (8001658 <SDIO_IRQHandler+0xc>)
 8001650:	f001 fdbc 	bl	80031cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001654:	bd08      	pop	{r3, pc}
 8001656:	bf00      	nop
 8001658:	20000300 	.word	0x20000300

0800165c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800165c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 800165e:	4802      	ldr	r0, [pc, #8]	@ (8001668 <DMA2_Stream3_IRQHandler+0xc>)
 8001660:	f000 faa8 	bl	8001bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001664:	bd08      	pop	{r3, pc}
 8001666:	bf00      	nop
 8001668:	200002a0 	.word	0x200002a0

0800166c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800166c:	2001      	movs	r0, #1
 800166e:	4770      	bx	lr

08001670 <_kill>:

int _kill(int pid, int sig)
{
 8001670:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f006 fbc1 	bl	8007df8 <__errno>
 8001676:	2316      	movs	r3, #22
 8001678:	6003      	str	r3, [r0, #0]
  return -1;
}
 800167a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800167e:	bd08      	pop	{r3, pc}

08001680 <_exit>:

void _exit (int status)
{
 8001680:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001682:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001686:	f7ff fff3 	bl	8001670 <_kill>
  while (1) {}    /* Make sure we hang here */
 800168a:	e7fe      	b.n	800168a <_exit+0xa>

0800168c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	460c      	mov	r4, r1
 8001690:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2500      	movs	r5, #0
 8001694:	e006      	b.n	80016a4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	4621      	mov	r1, r4
 800169c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80016a2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	42b5      	cmp	r5, r6
 80016a6:	dbf6      	blt.n	8001696 <_read+0xa>
  }

  return len;
}
 80016a8:	4630      	mov	r0, r6
 80016aa:	bd70      	pop	{r4, r5, r6, pc}

080016ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b0:	4770      	bx	lr

080016b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80016b8:	2000      	movs	r0, #0
 80016ba:	4770      	bx	lr

080016bc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80016bc:	2001      	movs	r0, #1
 80016be:	4770      	bx	lr

080016c0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80016c0:	2000      	movs	r0, #0
 80016c2:	4770      	bx	lr

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a0c      	ldr	r2, [pc, #48]	@ (80016fc <_sbrk+0x38>)
 80016ca:	490d      	ldr	r1, [pc, #52]	@ (8001700 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <_sbrk+0x40>)
 80016ce:	6800      	ldr	r0, [r0, #0]
 80016d0:	b140      	cbz	r0, 80016e4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <_sbrk+0x40>)
 80016d4:	6800      	ldr	r0, [r0, #0]
 80016d6:	4403      	add	r3, r0
 80016d8:	1a52      	subs	r2, r2, r1
 80016da:	4293      	cmp	r3, r2
 80016dc:	d806      	bhi.n	80016ec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <_sbrk+0x40>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80016e2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <_sbrk+0x40>)
 80016e6:	4c08      	ldr	r4, [pc, #32]	@ (8001708 <_sbrk+0x44>)
 80016e8:	6004      	str	r4, [r0, #0]
 80016ea:	e7f2      	b.n	80016d2 <_sbrk+0xe>
    errno = ENOMEM;
 80016ec:	f006 fb84 	bl	8007df8 <__errno>
 80016f0:	230c      	movs	r3, #12
 80016f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016f8:	e7f3      	b.n	80016e2 <_sbrk+0x1e>
 80016fa:	bf00      	nop
 80016fc:	20020000 	.word	0x20020000
 8001700:	00000400 	.word	0x00000400
 8001704:	200003cc 	.word	0x200003cc
 8001708:	20001338 	.word	0x20001338

0800170c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4a03      	ldr	r2, [pc, #12]	@ (800171c <SystemInit+0x10>)
 800170e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001716:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001724:	f7ff fff2 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800174e:	f006 fb59 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff fda1 	bl	8001298 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001764:	08009ff0 	.word	0x08009ff0
  ldr r2, =_sbss
 8001768:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800176c:	20001338 	.word	0x20001338

08001770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_Init+0x30>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800177e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001786:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800178e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f871 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f7ff fee2 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fdd4 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80017a0:	2000      	movs	r0, #0
 80017a2:	bd08      	pop	{r3, pc}
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017a8:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <HAL_IncTick+0x10>)
 80017aa:	6811      	ldr	r1, [r2, #0]
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_IncTick+0x14>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	440b      	add	r3, r1
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200003d0 	.word	0x200003d0
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017c0:	4b01      	ldr	r3, [pc, #4]	@ (80017c8 <HAL_GetTick+0x8>)
 80017c2:	6818      	ldr	r0, [r3, #0]
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	200003d0 	.word	0x200003d0

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fff6 	bl	80017c0 <HAL_GetTick>
 80017d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80017da:	d002      	beq.n	80017e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_Delay+0x24>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	f7ff ffed 	bl	80017c0 <HAL_GetTick>
 80017e6:	1b40      	subs	r0, r0, r5
 80017e8:	42a0      	cmp	r0, r4
 80017ea:	d3fa      	bcc.n	80017e2 <HAL_Delay+0x16>
  {
  }
}
 80017ec:	bd38      	pop	{r3, r4, r5, pc}
 80017ee:	bf00      	nop
 80017f0:	20000004 	.word	0x20000004

080017f4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80017f4:	2800      	cmp	r0, #0
 80017f6:	db07      	blt.n	8001808 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f8:	f000 021f 	and.w	r2, r0, #31
 80017fc:	0940      	lsrs	r0, r0, #5
 80017fe:	2301      	movs	r3, #1
 8001800:	4093      	lsls	r3, r2
 8001802:	4a02      	ldr	r2, [pc, #8]	@ (800180c <__NVIC_EnableIRQ+0x18>)
 8001804:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001810:	2800      	cmp	r0, #0
 8001812:	db08      	blt.n	8001826 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	0109      	lsls	r1, r1, #4
 8001816:	b2c9      	uxtb	r1, r1
 8001818:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800181c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001820:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001824:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	f000 000f 	and.w	r0, r0, #15
 800182a:	0109      	lsls	r1, r1, #4
 800182c:	b2c9      	uxtb	r1, r1
 800182e:	4b01      	ldr	r3, [pc, #4]	@ (8001834 <__NVIC_SetPriority+0x24>)
 8001830:	5419      	strb	r1, [r3, r0]
  }
}
 8001832:	4770      	bx	lr
 8001834:	e000ed14 	.word	0xe000ed14

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183e:	f1c0 0c07 	rsb	ip, r0, #7
 8001842:	f1bc 0f04 	cmp.w	ip, #4
 8001846:	bf28      	it	cs
 8001848:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184c:	1d03      	adds	r3, r0, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d90f      	bls.n	8001872 <NVIC_EncodePriority+0x3a>
 8001852:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001858:	fa0e f00c 	lsl.w	r0, lr, ip
 800185c:	ea21 0100 	bic.w	r1, r1, r0
 8001860:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001862:	fa0e fe03 	lsl.w	lr, lr, r3
 8001866:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800186a:	ea41 0002 	orr.w	r0, r1, r2
 800186e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	2300      	movs	r3, #0
 8001874:	e7ee      	b.n	8001854 <NVIC_EncodePriority+0x1c>
	...

08001878 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800187a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	0200      	lsls	r0, r0, #8
 8001886:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001894:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189c:	b510      	push	{r4, lr}
 800189e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_NVIC_SetPriority+0x1c>)
 80018a2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80018a8:	f7ff ffc6 	bl	8001838 <NVIC_EncodePriority>
 80018ac:	4601      	mov	r1, r0
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ffae 	bl	8001810 <__NVIC_SetPriority>
}
 80018b4:	bd10      	pop	{r4, pc}
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018be:	f7ff ff99 	bl	80017f4 <__NVIC_EnableIRQ>
}
 80018c2:	bd08      	pop	{r3, pc}

080018c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018c6:	6805      	ldr	r5, [r0, #0]
 80018c8:	682c      	ldr	r4, [r5, #0]
 80018ca:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80018ce:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018d0:	6804      	ldr	r4, [r0, #0]
 80018d2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018d4:	6883      	ldr	r3, [r0, #8]
 80018d6:	2b40      	cmp	r3, #64	@ 0x40
 80018d8:	d005      	beq.n	80018e6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80018de:	6803      	ldr	r3, [r0, #0]
 80018e0:	60da      	str	r2, [r3, #12]
  }
}
 80018e2:	bc30      	pop	{r4, r5}
 80018e4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80018e6:	6803      	ldr	r3, [r0, #0]
 80018e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80018ea:	6803      	ldr	r3, [r0, #0]
 80018ec:	60d9      	str	r1, [r3, #12]
 80018ee:	e7f8      	b.n	80018e2 <DMA_SetConfig+0x1e>

080018f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018f2:	6803      	ldr	r3, [r0, #0]
 80018f4:	b2d9      	uxtb	r1, r3
 80018f6:	3910      	subs	r1, #16
 80018f8:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <DMA_CalcBaseAndBitshift+0x3c>)
 80018fa:	fba2 4201 	umull	r4, r2, r2, r1
 80018fe:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001900:	4c0b      	ldr	r4, [pc, #44]	@ (8001930 <DMA_CalcBaseAndBitshift+0x40>)
 8001902:	5ca2      	ldrb	r2, [r4, r2]
 8001904:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001906:	295f      	cmp	r1, #95	@ 0x5f
 8001908:	d909      	bls.n	800191e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	3304      	adds	r3, #4
 8001914:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001916:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800191c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800191e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	6583      	str	r3, [r0, #88]	@ 0x58
 8001928:	e7f5      	b.n	8001916 <DMA_CalcBaseAndBitshift+0x26>
 800192a:	bf00      	nop
 800192c:	aaaaaaab 	.word	0xaaaaaaab
 8001930:	08009c38 	.word	0x08009c38

08001934 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001934:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001936:	6982      	ldr	r2, [r0, #24]
 8001938:	b992      	cbnz	r2, 8001960 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800193a:	2b01      	cmp	r3, #1
 800193c:	d00a      	beq.n	8001954 <DMA_CheckFifoParam+0x20>
 800193e:	2b02      	cmp	r3, #2
 8001940:	d002      	beq.n	8001948 <DMA_CheckFifoParam+0x14>
 8001942:	b10b      	cbz	r3, 8001948 <DMA_CheckFifoParam+0x14>
 8001944:	2000      	movs	r0, #0
 8001946:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001948:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800194a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800194e:	d128      	bne.n	80019a2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001954:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001956:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800195a:	d024      	beq.n	80019a6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001960:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001964:	d009      	beq.n	800197a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001966:	2b02      	cmp	r3, #2
 8001968:	d925      	bls.n	80019b6 <DMA_CheckFifoParam+0x82>
 800196a:	2b03      	cmp	r3, #3
 800196c:	d125      	bne.n	80019ba <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001970:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001974:	d123      	bne.n	80019be <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2000      	movs	r0, #0
 8001978:	4770      	bx	lr
    switch (tmp)
 800197a:	2b03      	cmp	r3, #3
 800197c:	d803      	bhi.n	8001986 <DMA_CheckFifoParam+0x52>
 800197e:	e8df f003 	tbb	[pc, r3]
 8001982:	0414      	.short	0x0414
 8001984:	0a14      	.short	0x0a14
 8001986:	2000      	movs	r0, #0
 8001988:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800198c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001990:	d10d      	bne.n	80019ae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001992:	2000      	movs	r0, #0
 8001994:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001996:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001998:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800199c:	d009      	beq.n	80019b2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2000      	movs	r0, #0
 80019a0:	4770      	bx	lr
        status = HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	4770      	bx	lr
        status = HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
 80019a8:	4770      	bx	lr
      status = HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
 80019ac:	4770      	bx	lr
        status = HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
 80019b0:	4770      	bx	lr
        status = HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
 80019b4:	4770      	bx	lr
      status = HAL_ERROR;
 80019b6:	2001      	movs	r0, #1
 80019b8:	4770      	bx	lr
    switch (tmp)
 80019ba:	2000      	movs	r0, #0
 80019bc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80019be:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_DMA_Init>:
{
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fefa 	bl	80017c0 <HAL_GetTick>
  if(hdma == NULL)
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d05b      	beq.n	8001a88 <HAL_DMA_Init+0xc4>
 80019d0:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80019d8:	2300      	movs	r3, #0
 80019da:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f012 0f01 	tst.w	r2, #1
 80019f0:	d00a      	beq.n	8001a08 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f2:	f7ff fee5 	bl	80017c0 <HAL_GetTick>
 80019f6:	1b43      	subs	r3, r0, r5
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d9f5      	bls.n	80019e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fc:	2320      	movs	r3, #32
 80019fe:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a00:	2003      	movs	r0, #3
 8001a02:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001a08:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0a:	4920      	ldr	r1, [pc, #128]	@ (8001a8c <HAL_DMA_Init+0xc8>)
 8001a0c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0e:	6862      	ldr	r2, [r4, #4]
 8001a10:	68a0      	ldr	r0, [r4, #8]
 8001a12:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	6920      	ldr	r0, [r4, #16]
 8001a1a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	69a0      	ldr	r0, [r4, #24]
 8001a22:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a24:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a28:	6a20      	ldr	r0, [r4, #32]
 8001a2a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001a30:	2904      	cmp	r1, #4
 8001a32:	d01e      	beq.n	8001a72 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001a34:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001a36:	6826      	ldr	r6, [r4, #0]
 8001a38:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a3a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001a3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a40:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d107      	bne.n	8001a56 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001a46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a48:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a4c:	b11b      	cbz	r3, 8001a56 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff ff70 	bl	8001934 <DMA_CheckFifoParam>
 8001a54:	b990      	cbnz	r0, 8001a7c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001a56:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff ff49 	bl	80018f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a60:	233f      	movs	r3, #63	@ 0x3f
 8001a62:	4093      	lsls	r3, r2
 8001a64:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a66:	2000      	movs	r0, #0
 8001a68:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001a70:	e7c9      	b.n	8001a06 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001a74:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001a76:	4301      	orrs	r1, r0
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	e7db      	b.n	8001a34 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a7c:	2340      	movs	r3, #64	@ 0x40
 8001a7e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001a80:	2001      	movs	r0, #1
 8001a82:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001a86:	e7be      	b.n	8001a06 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
 8001a8a:	e7bc      	b.n	8001a06 <HAL_DMA_Init+0x42>
 8001a8c:	f010803f 	.word	0xf010803f

08001a90 <HAL_DMA_Start_IT>:
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a94:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001a96:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001a9a:	2801      	cmp	r0, #1
 8001a9c:	d02b      	beq.n	8001af6 <HAL_DMA_Start_IT+0x66>
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001aa8:	b2c0      	uxtb	r0, r0
 8001aaa:	2801      	cmp	r0, #1
 8001aac:	d004      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001ab4:	2002      	movs	r0, #2
}
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abe:	2000      	movs	r0, #0
 8001ac0:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fefe 	bl	80018c4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001aca:	233f      	movs	r3, #63	@ 0x3f
 8001acc:	4093      	lsls	r3, r2
 8001ace:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	6813      	ldr	r3, [r2, #0]
 8001ad4:	f043 0316 	orr.w	r3, r3, #22
 8001ad8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001ada:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001adc:	b123      	cbz	r3, 8001ae8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	6813      	ldr	r3, [r2, #0]
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	6813      	ldr	r3, [r2, #0]
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af2:	2000      	movs	r0, #0
 8001af4:	e7df      	b.n	8001ab6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001af6:	2002      	movs	r0, #2
 8001af8:	e7dd      	b.n	8001ab6 <HAL_DMA_Start_IT+0x26>

08001afa <HAL_DMA_Abort>:
{
 8001afa:	b570      	push	{r4, r5, r6, lr}
 8001afc:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fe5e 	bl	80017c0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b04:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d006      	beq.n	8001b1c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001b12:	2300      	movs	r3, #0
 8001b14:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
}
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
 8001b1c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f023 0316 	bic.w	r3, r3, #22
 8001b26:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	6953      	ldr	r3, [r2, #20]
 8001b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b30:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b34:	b1e3      	cbz	r3, 8001b70 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f023 0308 	bic.w	r3, r3, #8
 8001b3e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f013 0f01 	tst.w	r3, #1
 8001b52:	d011      	beq.n	8001b78 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b54:	f7ff fe34 	bl	80017c0 <HAL_GetTick>
 8001b58:	1b43      	subs	r3, r0, r5
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d9f5      	bls.n	8001b4a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
 8001b64:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001b6e:	e7d4      	b.n	8001b1a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b70:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1df      	bne.n	8001b36 <HAL_DMA_Abort+0x3c>
 8001b76:	e7e3      	b.n	8001b40 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b7a:	233f      	movs	r3, #63	@ 0x3f
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001b8c:	e7c5      	b.n	8001b1a <HAL_DMA_Abort+0x20>

08001b8e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	6802      	ldr	r2, [r0, #0]
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001bb0:	2000      	movs	r0, #0
}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_DMA_IRQHandler>:
{
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bbe:	4b72      	ldr	r3, [pc, #456]	@ (8001d88 <HAL_DMA_IRQHandler+0x1d4>)
 8001bc0:	681d      	ldr	r5, [r3, #0]
 8001bc2:	4b72      	ldr	r3, [pc, #456]	@ (8001d8c <HAL_DMA_IRQHandler+0x1d8>)
 8001bc4:	fba3 3505 	umull	r3, r5, r3, r5
 8001bc8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001bcc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bce:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	4233      	tst	r3, r6
 8001bd6:	d010      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bd8:	6803      	ldr	r3, [r0, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f012 0f04 	tst.w	r2, #4
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f022 0204 	bic.w	r2, r2, #4
 8001be8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bea:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001bec:	2308      	movs	r3, #8
 8001bee:	4093      	lsls	r3, r2
 8001bf0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bf2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	4233      	tst	r3, r6
 8001c02:	d009      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	6952      	ldr	r2, [r2, #20]
 8001c08:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001c0c:	d004      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c0e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c18:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	4233      	tst	r3, r6
 8001c20:	d009      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	f012 0f02 	tst.w	r2, #2
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c2c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c36:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c38:	2310      	movs	r3, #16
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	4233      	tst	r3, r6
 8001c3e:	d024      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	f012 0f08 	tst.w	r2, #8
 8001c48:	d01f      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001c54:	d00d      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001c5c:	d104      	bne.n	8001c68 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c60:	b19b      	cbz	r3, 8001c8a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001c62:	4620      	mov	r0, r4
 8001c64:	4798      	blx	r3
 8001c66:	e010      	b.n	8001c8a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c68:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001c6a:	b173      	cbz	r3, 8001c8a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4798      	blx	r3
 8001c70:	e00b      	b.n	8001c8a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001c78:	d103      	bne.n	8001c82 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f022 0208 	bic.w	r2, r2, #8
 8001c80:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c84:	b10b      	cbz	r3, 8001c8a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001c86:	4620      	mov	r0, r4
 8001c88:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	4233      	tst	r3, r6
 8001c92:	d055      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c94:	6822      	ldr	r2, [r4, #0]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	f012 0f10 	tst.w	r2, #16
 8001c9c:	d050      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c9e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ca0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001cb2:	d033      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001cba:	d12a      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001cbc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03e      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4798      	blx	r3
 8001cc6:	e03b      	b.n	8001d40 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f023 0316 	bic.w	r3, r3, #22
 8001cd0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	6953      	ldr	r3, [r2, #20]
 8001cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cda:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cde:	b1a3      	cbz	r3, 8001d0a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	f023 0308 	bic.w	r3, r3, #8
 8001ce8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001cec:	233f      	movs	r3, #63	@ 0x3f
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001cfe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03f      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001d04:	4620      	mov	r0, r4
 8001d06:	4798      	blx	r3
        return;
 8001d08:	e03c      	b.n	8001d84 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d0a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e7      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x12c>
 8001d10:	e7eb      	b.n	8001cea <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001d12:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d14:	b1a3      	cbz	r3, 8001d40 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001d16:	4620      	mov	r0, r4
 8001d18:	4798      	blx	r3
 8001d1a:	e011      	b.n	8001d40 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001d22:	d109      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f022 0210 	bic.w	r2, r2, #16
 8001d2a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001d32:	2300      	movs	r3, #0
 8001d34:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001d38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d3a:	b10b      	cbz	r3, 8001d40 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d42:	b1fb      	cbz	r3, 8001d84 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d46:	f013 0f01 	tst.w	r3, #1
 8001d4a:	d017      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d52:	6822      	ldr	r2, [r4, #0]
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001d5c:	9b01      	ldr	r3, [sp, #4]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	d804      	bhi.n	8001d70 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f013 0f01 	tst.w	r3, #1
 8001d6e:	d1f5      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001d76:	2300      	movs	r3, #0
 8001d78:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001d7c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d7e:	b10b      	cbz	r3, 8001d84 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001d80:	4620      	mov	r0, r4
 8001d82:	4798      	blx	r3
}
 8001d84:	b003      	add	sp, #12
 8001d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	1b4e81b5 	.word	0x1b4e81b5

08001d90 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001d90:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f200 80e9 	bhi.w	8001f6e <HAL_GPIO_Init+0x1da>
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	e065      	b.n	8001e6e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001da8:	2403      	movs	r4, #3
 8001daa:	fa04 f40e 	lsl.w	r4, r4, lr
 8001dae:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db2:	68cc      	ldr	r4, [r1, #12]
 8001db4:	fa04 f40e 	lsl.w	r4, r4, lr
 8001db8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001dba:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dbe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc2:	684a      	ldr	r2, [r1, #4]
 8001dc4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001dcc:	6042      	str	r2, [r0, #4]
 8001dce:	e05c      	b.n	8001e8a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	08dc      	lsrs	r4, r3, #3
 8001dd2:	3408      	adds	r4, #8
 8001dd4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd8:	f003 0507 	and.w	r5, r3, #7
 8001ddc:	00ad      	lsls	r5, r5, #2
 8001dde:	f04f 0e0f 	mov.w	lr, #15
 8001de2:	fa0e fe05 	lsl.w	lr, lr, r5
 8001de6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dea:	690a      	ldr	r2, [r1, #16]
 8001dec:	40aa      	lsls	r2, r5
 8001dee:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001df2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001df6:	e05c      	b.n	8001eb2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df8:	2207      	movs	r2, #7
 8001dfa:	e000      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e02:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	3402      	adds	r4, #2
 8001e06:	4d5a      	ldr	r5, [pc, #360]	@ (8001f70 <HAL_GPIO_Init+0x1dc>)
 8001e08:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0c:	4a59      	ldr	r2, [pc, #356]	@ (8001f74 <HAL_GPIO_Init+0x1e0>)
 8001e0e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	ea6f 020c 	mvn.w	r2, ip
 8001e14:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e18:	684e      	ldr	r6, [r1, #4]
 8001e1a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001e1e:	d001      	beq.n	8001e24 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001e20:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001e24:	4c53      	ldr	r4, [pc, #332]	@ (8001f74 <HAL_GPIO_Init+0x1e0>)
 8001e26:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001e28:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2e:	684e      	ldr	r6, [r1, #4]
 8001e30:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001e34:	d001      	beq.n	8001e3a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001e36:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001e3a:	4c4e      	ldr	r4, [pc, #312]	@ (8001f74 <HAL_GPIO_Init+0x1e0>)
 8001e3c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001e3e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e44:	684e      	ldr	r6, [r1, #4]
 8001e46:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001e4a:	d001      	beq.n	8001e50 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001e4c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001e50:	4c48      	ldr	r4, [pc, #288]	@ (8001f74 <HAL_GPIO_Init+0x1e0>)
 8001e52:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e54:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e58:	684d      	ldr	r5, [r1, #4]
 8001e5a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001e5e:	d001      	beq.n	8001e64 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001e60:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001e64:	4c43      	ldr	r4, [pc, #268]	@ (8001f74 <HAL_GPIO_Init+0x1e0>)
 8001e66:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e68:	3301      	adds	r3, #1
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	d87d      	bhi.n	8001f6a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	680c      	ldr	r4, [r1, #0]
 8001e74:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001e78:	ea32 0404 	bics.w	r4, r2, r4
 8001e7c:	d1f4      	bne.n	8001e68 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	684c      	ldr	r4, [r1, #4]
 8001e80:	f004 0403 	and.w	r4, r4, #3
 8001e84:	3c01      	subs	r4, #1
 8001e86:	2c01      	cmp	r4, #1
 8001e88:	d98b      	bls.n	8001da2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8a:	684a      	ldr	r2, [r1, #4]
 8001e8c:	f002 0203 	and.w	r2, r2, #3
 8001e90:	2a03      	cmp	r2, #3
 8001e92:	d009      	beq.n	8001ea8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001e94:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e96:	005d      	lsls	r5, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	40aa      	lsls	r2, r5
 8001e9c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea0:	688a      	ldr	r2, [r1, #8]
 8001ea2:	40aa      	lsls	r2, r5
 8001ea4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001ea6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	684a      	ldr	r2, [r1, #4]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	2a02      	cmp	r2, #2
 8001eb0:	d08e      	beq.n	8001dd0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001eb2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ebe:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec2:	684a      	ldr	r2, [r1, #4]
 8001ec4:	f002 0203 	and.w	r2, r2, #3
 8001ec8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ecc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001ece:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed0:	684a      	ldr	r2, [r1, #4]
 8001ed2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001ed6:	d0c7      	beq.n	8001e68 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	2200      	movs	r2, #0
 8001eda:	9201      	str	r2, [sp, #4]
 8001edc:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <HAL_GPIO_Init+0x1e4>)
 8001ede:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001ee0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001ee4:	6454      	str	r4, [r2, #68]	@ 0x44
 8001ee6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ee8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001eec:	9201      	str	r2, [sp, #4]
 8001eee:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef0:	089c      	lsrs	r4, r3, #2
 8001ef2:	1ca5      	adds	r5, r4, #2
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_GPIO_Init+0x1dc>)
 8001ef6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efa:	f003 0e03 	and.w	lr, r3, #3
 8001efe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f08:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_GPIO_Init+0x1e8>)
 8001f0e:	4290      	cmp	r0, r2
 8001f10:	f43f af74 	beq.w	8001dfc <HAL_GPIO_Init+0x68>
 8001f14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	d01a      	beq.n	8001f52 <HAL_GPIO_Init+0x1be>
 8001f1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f20:	4290      	cmp	r0, r2
 8001f22:	d018      	beq.n	8001f56 <HAL_GPIO_Init+0x1c2>
 8001f24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f28:	4290      	cmp	r0, r2
 8001f2a:	d016      	beq.n	8001f5a <HAL_GPIO_Init+0x1c6>
 8001f2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f30:	4290      	cmp	r0, r2
 8001f32:	d014      	beq.n	8001f5e <HAL_GPIO_Init+0x1ca>
 8001f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f38:	4290      	cmp	r0, r2
 8001f3a:	d012      	beq.n	8001f62 <HAL_GPIO_Init+0x1ce>
 8001f3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f40:	4290      	cmp	r0, r2
 8001f42:	d010      	beq.n	8001f66 <HAL_GPIO_Init+0x1d2>
 8001f44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f48:	4290      	cmp	r0, r2
 8001f4a:	f43f af55 	beq.w	8001df8 <HAL_GPIO_Init+0x64>
 8001f4e:	2208      	movs	r2, #8
 8001f50:	e755      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001f52:	2201      	movs	r2, #1
 8001f54:	e753      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001f56:	2202      	movs	r2, #2
 8001f58:	e751      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	e74f      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001f5e:	2204      	movs	r2, #4
 8001f60:	e74d      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001f62:	2205      	movs	r2, #5
 8001f64:	e74b      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
 8001f66:	2206      	movs	r2, #6
 8001f68:	e749      	b.n	8001dfe <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001f6a:	b002      	add	sp, #8
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	4770      	bx	lr
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40013c00 	.word	0x40013c00
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f80:	6903      	ldr	r3, [r0, #16]
 8001f82:	4219      	tst	r1, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001f86:	2001      	movs	r0, #1
 8001f88:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8e:	b10a      	cbz	r2, 8001f94 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f90:	6181      	str	r1, [r0, #24]
 8001f92:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f94:	0409      	lsls	r1, r1, #16
 8001f96:	6181      	str	r1, [r0, #24]
  }
}
 8001f98:	4770      	bx	lr

08001f9a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f9a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9c:	ea01 0203 	and.w	r2, r1, r3
 8001fa0:	ea21 0103 	bic.w	r1, r1, r3
 8001fa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001fa8:	6181      	str	r1, [r0, #24]
}
 8001faa:	4770      	bx	lr

08001fac <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fac:	2800      	cmp	r0, #0
 8001fae:	f000 81e0 	beq.w	8002372 <HAL_RCC_OscConfig+0x3c6>
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb8:	6803      	ldr	r3, [r0, #0]
 8001fba:	f013 0f01 	tst.w	r3, #1
 8001fbe:	d03b      	beq.n	8002038 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fc0:	4b9f      	ldr	r3, [pc, #636]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d02c      	beq.n	8002026 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d021      	beq.n	800201c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd8:	6863      	ldr	r3, [r4, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fde:	d04f      	beq.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe4:	d052      	beq.n	800208c <HAL_RCC_OscConfig+0xe0>
 8001fe6:	4b96      	ldr	r3, [pc, #600]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff8:	6863      	ldr	r3, [r4, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d050      	beq.n	80020a0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fbdf 	bl	80017c0 <HAL_GetTick>
 8002002:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	4b8e      	ldr	r3, [pc, #568]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800200c:	d114      	bne.n	8002038 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200e:	f7ff fbd7 	bl	80017c0 <HAL_GetTick>
 8002012:	1b40      	subs	r0, r0, r5
 8002014:	2864      	cmp	r0, #100	@ 0x64
 8002016:	d9f5      	bls.n	8002004 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002018:	2003      	movs	r0, #3
 800201a:	e1b1      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201c:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002024:	d0d8      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	4b86      	ldr	r3, [pc, #536]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800202e:	d003      	beq.n	8002038 <HAL_RCC_OscConfig+0x8c>
 8002030:	6863      	ldr	r3, [r4, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 819f 	beq.w	8002376 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	f013 0f02 	tst.w	r3, #2
 800203e:	d054      	beq.n	80020ea <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002040:	4b7f      	ldr	r3, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f013 0f0c 	tst.w	r3, #12
 8002048:	d03e      	beq.n	80020c8 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b7d      	ldr	r3, [pc, #500]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002052:	2b08      	cmp	r3, #8
 8002054:	d033      	beq.n	80020be <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002056:	68e3      	ldr	r3, [r4, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d068      	beq.n	800212e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b79      	ldr	r3, [pc, #484]	@ (8002244 <HAL_RCC_OscConfig+0x298>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fbad 	bl	80017c0 <HAL_GetTick>
 8002066:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b75      	ldr	r3, [pc, #468]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f013 0f02 	tst.w	r3, #2
 8002070:	d154      	bne.n	800211c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fba5 	bl	80017c0 <HAL_GetTick>
 8002076:	1b40      	subs	r0, r0, r5
 8002078:	2802      	cmp	r0, #2
 800207a:	d9f5      	bls.n	8002068 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800207c:	2003      	movs	r0, #3
 800207e:	e17f      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	4a6f      	ldr	r2, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e7b5      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4c>
 800208c:	4b6c      	ldr	r3, [pc, #432]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e7ab      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80020a0:	f7ff fb8e 	bl	80017c0 <HAL_GetTick>
 80020a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020ae:	d0c3      	beq.n	8002038 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff fb86 	bl	80017c0 <HAL_GetTick>
 80020b4:	1b40      	subs	r0, r0, r5
 80020b6:	2864      	cmp	r0, #100	@ 0x64
 80020b8:	d9f5      	bls.n	80020a6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80020ba:	2003      	movs	r0, #3
 80020bc:	e160      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b60      	ldr	r3, [pc, #384]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80020c6:	d1c6      	bne.n	8002056 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f013 0f02 	tst.w	r3, #2
 80020d0:	d003      	beq.n	80020da <HAL_RCC_OscConfig+0x12e>
 80020d2:	68e3      	ldr	r3, [r4, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	f040 8150 	bne.w	800237a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4a59      	ldr	r2, [pc, #356]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 80020dc:	6813      	ldr	r3, [r2, #0]
 80020de:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80020e2:	6921      	ldr	r1, [r4, #16]
 80020e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020e8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	f013 0f08 	tst.w	r3, #8
 80020f0:	d042      	beq.n	8002178 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f2:	6963      	ldr	r3, [r4, #20]
 80020f4:	b36b      	cbz	r3, 8002152 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f6:	4b53      	ldr	r3, [pc, #332]	@ (8002244 <HAL_RCC_OscConfig+0x298>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff fb5f 	bl	80017c0 <HAL_GetTick>
 8002102:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002104:	4b4e      	ldr	r3, [pc, #312]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002108:	f013 0f02 	tst.w	r3, #2
 800210c:	d134      	bne.n	8002178 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff fb57 	bl	80017c0 <HAL_GetTick>
 8002112:	1b40      	subs	r0, r0, r5
 8002114:	2802      	cmp	r0, #2
 8002116:	d9f5      	bls.n	8002104 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
 800211a:	e131      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4a48      	ldr	r2, [pc, #288]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002124:	6921      	ldr	r1, [r4, #16]
 8002126:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e7dd      	b.n	80020ea <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b45      	ldr	r3, [pc, #276]	@ (8002244 <HAL_RCC_OscConfig+0x298>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002134:	f7ff fb44 	bl	80017c0 <HAL_GetTick>
 8002138:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f013 0f02 	tst.w	r3, #2
 8002142:	d0d2      	beq.n	80020ea <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fb3c 	bl	80017c0 <HAL_GetTick>
 8002148:	1b40      	subs	r0, r0, r5
 800214a:	2802      	cmp	r0, #2
 800214c:	d9f5      	bls.n	800213a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e116      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002152:	4b3c      	ldr	r3, [pc, #240]	@ (8002244 <HAL_RCC_OscConfig+0x298>)
 8002154:	2200      	movs	r2, #0
 8002156:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff fb31 	bl	80017c0 <HAL_GetTick>
 800215e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b37      	ldr	r3, [pc, #220]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002164:	f013 0f02 	tst.w	r3, #2
 8002168:	d006      	beq.n	8002178 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7ff fb29 	bl	80017c0 <HAL_GetTick>
 800216e:	1b40      	subs	r0, r0, r5
 8002170:	2802      	cmp	r0, #2
 8002172:	d9f5      	bls.n	8002160 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002174:	2003      	movs	r0, #3
 8002176:	e103      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	f013 0f04 	tst.w	r3, #4
 800217e:	d077      	beq.n	8002270 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002180:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002188:	d133      	bne.n	80021f2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002192:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021a2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b28      	ldr	r3, [pc, #160]	@ (8002248 <HAL_RCC_OscConfig+0x29c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80021ac:	d023      	beq.n	80021f6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ae:	68a3      	ldr	r3, [r4, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d034      	beq.n	800221e <HAL_RCC_OscConfig+0x272>
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d038      	beq.n	800222a <HAL_RCC_OscConfig+0x27e>
 80021b8:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 80021ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80021c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021c4:	f022 0204 	bic.w	r2, r2, #4
 80021c8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ca:	68a3      	ldr	r3, [r4, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d03d      	beq.n	800224c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff faf6 	bl	80017c0 <HAL_GetTick>
 80021d4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	f013 0f02 	tst.w	r3, #2
 80021de:	d146      	bne.n	800226e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff faee 	bl	80017c0 <HAL_GetTick>
 80021e4:	1b80      	subs	r0, r0, r6
 80021e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80021ea:	4298      	cmp	r0, r3
 80021ec:	d9f3      	bls.n	80021d6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
 80021f0:	e0c6      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2500      	movs	r5, #0
 80021f4:	e7d6      	b.n	80021a4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <HAL_RCC_OscConfig+0x29c>)
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002200:	f7ff fade 	bl	80017c0 <HAL_GetTick>
 8002204:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_OscConfig+0x29c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800220e:	d1ce      	bne.n	80021ae <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7ff fad6 	bl	80017c0 <HAL_GetTick>
 8002214:	1b80      	subs	r0, r0, r6
 8002216:	2802      	cmp	r0, #2
 8002218:	d9f5      	bls.n	8002206 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
 800221c:	e0b0      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221e:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 8002220:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	@ 0x70
 8002228:	e7cf      	b.n	80021ca <HAL_RCC_OscConfig+0x21e>
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_RCC_OscConfig+0x294>)
 800222c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800222e:	f042 0204 	orr.w	r2, r2, #4
 8002232:	671a      	str	r2, [r3, #112]	@ 0x70
 8002234:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	671a      	str	r2, [r3, #112]	@ 0x70
 800223c:	e7c5      	b.n	80021ca <HAL_RCC_OscConfig+0x21e>
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fab8 	bl	80017c0 <HAL_GetTick>
 8002250:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	4b52      	ldr	r3, [pc, #328]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	f013 0f02 	tst.w	r3, #2
 800225a:	d008      	beq.n	800226e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7ff fab0 	bl	80017c0 <HAL_GetTick>
 8002260:	1b80      	subs	r0, r0, r6
 8002262:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002266:	4298      	cmp	r0, r3
 8002268:	d9f3      	bls.n	8002252 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800226a:	2003      	movs	r0, #3
 800226c:	e088      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800226e:	b9ed      	cbnz	r5, 80022ac <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002270:	69a3      	ldr	r3, [r4, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8083 	beq.w	800237e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002278:	4a48      	ldr	r2, [pc, #288]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 800227a:	6892      	ldr	r2, [r2, #8]
 800227c:	f002 020c 	and.w	r2, r2, #12
 8002280:	2a08      	cmp	r2, #8
 8002282:	d051      	beq.n	8002328 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002284:	2b02      	cmp	r3, #2
 8002286:	d017      	beq.n	80022b8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b45      	ldr	r3, [pc, #276]	@ (80023a0 <HAL_RCC_OscConfig+0x3f4>)
 800228a:	2200      	movs	r2, #0
 800228c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fa97 	bl	80017c0 <HAL_GetTick>
 8002292:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	4b41      	ldr	r3, [pc, #260]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800229c:	d042      	beq.n	8002324 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff fa8f 	bl	80017c0 <HAL_GetTick>
 80022a2:	1b00      	subs	r0, r0, r4
 80022a4:	2802      	cmp	r0, #2
 80022a6:	d9f5      	bls.n	8002294 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022a8:	2003      	movs	r0, #3
 80022aa:	e069      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4a3b      	ldr	r2, [pc, #236]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 80022ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b6:	e7db      	b.n	8002270 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <HAL_RCC_OscConfig+0x3f4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80022be:	f7ff fa7f 	bl	80017c0 <HAL_GetTick>
 80022c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c4:	4b35      	ldr	r3, [pc, #212]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80022cc:	d006      	beq.n	80022dc <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fa77 	bl	80017c0 <HAL_GetTick>
 80022d2:	1b40      	subs	r0, r0, r5
 80022d4:	2802      	cmp	r0, #2
 80022d6:	d9f5      	bls.n	80022c4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80022d8:	2003      	movs	r0, #3
 80022da:	e051      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022dc:	69e3      	ldr	r3, [r4, #28]
 80022de:	6a22      	ldr	r2, [r4, #32]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80022e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80022ea:	0852      	lsrs	r2, r2, #1
 80022ec:	3a01      	subs	r2, #1
 80022ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80022f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022f8:	4a28      	ldr	r2, [pc, #160]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 80022fa:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_RCC_OscConfig+0x3f4>)
 80022fe:	2201      	movs	r2, #1
 8002300:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002302:	f7ff fa5d 	bl	80017c0 <HAL_GetTick>
 8002306:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002308:	4b24      	ldr	r3, [pc, #144]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff fa55 	bl	80017c0 <HAL_GetTick>
 8002316:	1b00      	subs	r0, r0, r4
 8002318:	2802      	cmp	r0, #2
 800231a:	d9f5      	bls.n	8002308 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800231c:	2003      	movs	r0, #3
 800231e:	e02f      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002320:	2000      	movs	r0, #0
 8002322:	e02d      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
 8002324:	2000      	movs	r0, #0
 8002326:	e02b      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002328:	2b01      	cmp	r3, #1
 800232a:	d02b      	beq.n	8002384 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_RCC_OscConfig+0x3f0>)
 800232e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002334:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002336:	4291      	cmp	r1, r2
 8002338:	d126      	bne.n	8002388 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800233e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002340:	428a      	cmp	r2, r1
 8002342:	d123      	bne.n	800238c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002344:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002346:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800234a:	401a      	ands	r2, r3
 800234c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002350:	d11e      	bne.n	8002390 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002352:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002356:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002358:	0852      	lsrs	r2, r2, #1
 800235a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002362:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002366:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800236c:	d114      	bne.n	8002398 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800236e:	2000      	movs	r0, #0
 8002370:	e006      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
}
 8002374:	4770      	bx	lr
        return HAL_ERROR;
 8002376:	2001      	movs	r0, #1
 8002378:	e002      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
 800237c:	e000      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800237e:	2000      	movs	r0, #0
}
 8002380:	b002      	add	sp, #8
 8002382:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
 8002386:	e7fb      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002388:	2001      	movs	r0, #1
 800238a:	e7f9      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
 800238c:	2001      	movs	r0, #1
 800238e:	e7f7      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
 8002390:	2001      	movs	r0, #1
 8002392:	e7f5      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
 8002394:	2001      	movs	r0, #1
 8002396:	e7f3      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
 8002398:	2001      	movs	r0, #1
 800239a:	e7f1      	b.n	8002380 <HAL_RCC_OscConfig+0x3d4>
 800239c:	40023800 	.word	0x40023800
 80023a0:	42470000 	.word	0x42470000

080023a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a6:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b2:	482f      	ldr	r0, [pc, #188]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023b4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b6:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80023c4:	d02c      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c6:	4b29      	ldr	r3, [pc, #164]	@ (800246c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c8:	6858      	ldr	r0, [r3, #4]
 80023ca:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80023ce:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80023d2:	ebbc 0c00 	subs.w	ip, ip, r0
 80023d6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80023da:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80023de:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80023e2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80023e6:	ebb1 010c 	subs.w	r1, r1, ip
 80023ea:	eb63 030e 	sbc.w	r3, r3, lr
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f4:	00c9      	lsls	r1, r1, #3
 80023f6:	eb11 0c00 	adds.w	ip, r1, r0
 80023fa:	f143 0300 	adc.w	r3, r3, #0
 80023fe:	0299      	lsls	r1, r3, #10
 8002400:	2300      	movs	r3, #0
 8002402:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002406:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800240a:	f7fe fbcd 	bl	8000ba8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800241a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800241e:	e7c9      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002422:	6858      	ldr	r0, [r3, #4]
 8002424:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002428:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800242c:	ebbc 0c00 	subs.w	ip, ip, r0
 8002430:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002434:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002438:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800243c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002440:	ebb1 010c 	subs.w	r1, r1, ip
 8002444:	eb63 030e 	sbc.w	r3, r3, lr
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244e:	00c9      	lsls	r1, r1, #3
 8002450:	eb11 0c00 	adds.w	ip, r1, r0
 8002454:	f143 0300 	adc.w	r3, r3, #0
 8002458:	0299      	lsls	r1, r3, #10
 800245a:	2300      	movs	r3, #0
 800245c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002460:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002464:	f7fe fba0 	bl	8000ba8 <__aeabi_uldivmod>
 8002468:	e7d1      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x6a>
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	00f42400 	.word	0x00f42400

08002474 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002474:	2800      	cmp	r0, #0
 8002476:	f000 809b 	beq.w	80025b0 <HAL_RCC_ClockConfig+0x13c>
{
 800247a:	b570      	push	{r4, r5, r6, lr}
 800247c:	460d      	mov	r5, r1
 800247e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b4f      	ldr	r3, [pc, #316]	@ (80025c0 <HAL_RCC_ClockConfig+0x14c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	428b      	cmp	r3, r1
 800248a:	d208      	bcs.n	800249e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248c:	b2cb      	uxtb	r3, r1
 800248e:	4a4c      	ldr	r2, [pc, #304]	@ (80025c0 <HAL_RCC_ClockConfig+0x14c>)
 8002490:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	428b      	cmp	r3, r1
 800249a:	f040 808b 	bne.w	80025b4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	f013 0f02 	tst.w	r3, #2
 80024a4:	d017      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a6:	f013 0f04 	tst.w	r3, #4
 80024aa:	d004      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4a45      	ldr	r2, [pc, #276]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 80024ae:	6893      	ldr	r3, [r2, #8]
 80024b0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024b4:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f013 0f08 	tst.w	r3, #8
 80024bc:	d004      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024be:	4a41      	ldr	r2, [pc, #260]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 80024c0:	6893      	ldr	r3, [r2, #8]
 80024c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024c6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4a3e      	ldr	r2, [pc, #248]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 80024ca:	6893      	ldr	r3, [r2, #8]
 80024cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024d0:	68a1      	ldr	r1, [r4, #8]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	f013 0f01 	tst.w	r3, #1
 80024dc:	d032      	beq.n	8002544 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	6863      	ldr	r3, [r4, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d021      	beq.n	8002528 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e4:	1e9a      	subs	r2, r3, #2
 80024e6:	2a01      	cmp	r2, #1
 80024e8:	d925      	bls.n	8002536 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4a36      	ldr	r2, [pc, #216]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	f012 0f02 	tst.w	r2, #2
 80024f2:	d061      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f4:	4933      	ldr	r1, [pc, #204]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 80024f6:	688a      	ldr	r2, [r1, #8]
 80024f8:	f022 0203 	bic.w	r2, r2, #3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002500:	f7ff f95e 	bl	80017c0 <HAL_GetTick>
 8002504:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002514:	d016      	beq.n	8002544 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002516:	f7ff f953 	bl	80017c0 <HAL_GetTick>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002520:	4298      	cmp	r0, r3
 8002522:	d9f0      	bls.n	8002506 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e042      	b.n	80025ae <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002528:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002530:	d1e0      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002532:	2001      	movs	r0, #1
 8002534:	e03b      	b.n	80025ae <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4a23      	ldr	r2, [pc, #140]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800253e:	d1d9      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
 8002542:	e034      	b.n	80025ae <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <HAL_RCC_ClockConfig+0x14c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	42ab      	cmp	r3, r5
 800254e:	d907      	bls.n	8002560 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	b2ea      	uxtb	r2, r5
 8002552:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_RCC_ClockConfig+0x14c>)
 8002554:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	42ab      	cmp	r3, r5
 800255e:	d12d      	bne.n	80025bc <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f013 0f04 	tst.w	r3, #4
 8002566:	d006      	beq.n	8002576 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4a16      	ldr	r2, [pc, #88]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 800256a:	6893      	ldr	r3, [r2, #8]
 800256c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002570:	68e1      	ldr	r1, [r4, #12]
 8002572:	430b      	orrs	r3, r1
 8002574:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	f013 0f08 	tst.w	r3, #8
 800257c:	d007      	beq.n	800258e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 8002580:	6893      	ldr	r3, [r2, #8]
 8002582:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002586:	6921      	ldr	r1, [r4, #16]
 8002588:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800258c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f7ff ff09 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_RCC_ClockConfig+0x150>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800259a:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_RCC_ClockConfig+0x154>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	40d8      	lsrs	r0, r3
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_RCC_ClockConfig+0x158>)
 80025a2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_RCC_ClockConfig+0x15c>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f7fe ffda 	bl	8001560 <HAL_InitTick>
  return HAL_OK;
 80025ac:	2000      	movs	r0, #0
}
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
}
 80025b2:	4770      	bx	lr
      return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
 80025b6:	e7fa      	b.n	80025ae <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
 80025ba:	e7f8      	b.n	80025ae <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
 80025be:	e7f6      	b.n	80025ae <HAL_RCC_ClockConfig+0x13a>
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08009c28 	.word	0x08009c28
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000008 	.word	0x20000008

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80025d4:	4b01      	ldr	r3, [pc, #4]	@ (80025dc <HAL_RCC_GetHCLKFreq+0x8>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e2:	f7ff fff7 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025e6:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025ee:	4a03      	ldr	r2, [pc, #12]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80025f2:	40d8      	lsrs	r0, r3
 80025f4:	bd08      	pop	{r3, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08009c20 	.word	0x08009c20

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002602:	f7ff ffe7 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800260e:	4a03      	ldr	r2, [pc, #12]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
}
 8002612:	40d8      	lsrs	r0, r3
 8002614:	bd08      	pop	{r3, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	08009c20 	.word	0x08009c20

08002620 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002620:	230f      	movs	r3, #15
 8002622:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCC_GetClockConfig+0x34>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	f002 0203 	and.w	r2, r2, #3
 800262c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002634:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800263c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	08db      	lsrs	r3, r3, #3
 8002642:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002646:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_RCC_GetClockConfig+0x38>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	600b      	str	r3, [r1, #0]
}
 8002652:	4770      	bx	lr
 8002654:	40023800 	.word	0x40023800
 8002658:	40023c00 	.word	0x40023c00

0800265c <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800265c:	6b83      	ldr	r3, [r0, #56]	@ 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002666:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002668:	4770      	bx	lr
	...

0800266c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002676:	6800      	ldr	r0, [r0, #0]
 8002678:	f001 fc27 	bl	8003eca <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800267c:	4605      	mov	r5, r0
 800267e:	b110      	cbz	r0, 8002686 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8002680:	4628      	mov	r0, r5
 8002682:	b002      	add	sp, #8
 8002684:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	f001 ff18 	bl	80044bc <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800268c:	b938      	cbnz	r0, 800269e <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800268e:	2301      	movs	r3, #1
 8002690:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002692:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00b      	beq.n	80026b0 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002698:	462e      	mov	r6, r5
 800269a:	4628      	mov	r0, r5
 800269c:	e014      	b.n	80026c8 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800269e:	2300      	movs	r3, #0
 80026a0:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80026a2:	6820      	ldr	r0, [r4, #0]
 80026a4:	f001 fc11 	bl	8003eca <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0f2      	beq.n	8002692 <SD_PowerON+0x26>
      return errorstate;
 80026ac:	4605      	mov	r5, r0
 80026ae:	e7e7      	b.n	8002680 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80026b0:	2100      	movs	r1, #0
 80026b2:	6820      	ldr	r0, [r4, #0]
 80026b4:	f001 fd70 	bl	8004198 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d0ed      	beq.n	8002698 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80026c0:	e7de      	b.n	8002680 <SD_PowerON+0x14>
    count++;
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	3301      	adds	r3, #1
 80026c6:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80026c8:	9a01      	ldr	r2, [sp, #4]
 80026ca:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d813      	bhi.n	80026fa <SD_PowerON+0x8e>
 80026d2:	b996      	cbnz	r6, 80026fa <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80026d4:	2100      	movs	r1, #0
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	f001 fd5e 	bl	8004198 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80026dc:	b9e0      	cbnz	r0, 8002718 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80026de:	4912      	ldr	r1, [pc, #72]	@ (8002728 <SD_PowerON+0xbc>)
 80026e0:	6820      	ldr	r0, [r4, #0]
 80026e2:	f001 fe37 	bl	8004354 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80026e6:	4606      	mov	r6, r0
 80026e8:	b9c0      	cbnz	r0, 800271c <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026ea:	2100      	movs	r1, #0
 80026ec:	6820      	ldr	r0, [r4, #0]
 80026ee:	f001 fbd7 	bl	8003ea0 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80026f2:	0fc3      	lsrs	r3, r0, #31
 80026f4:	d0e5      	beq.n	80026c2 <SD_PowerON+0x56>
 80026f6:	461e      	mov	r6, r3
 80026f8:	e7e3      	b.n	80026c2 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80026fa:	9a01      	ldr	r2, [sp, #4]
 80026fc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002700:	429a      	cmp	r2, r3
 8002702:	d80e      	bhi.n	8002722 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002704:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 8002708:	d002      	beq.n	8002710 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800270a:	2301      	movs	r3, #1
 800270c:	6463      	str	r3, [r4, #68]	@ 0x44
 800270e:	e7b7      	b.n	8002680 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8002710:	2200      	movs	r2, #0
 8002712:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 8002714:	461d      	mov	r5, r3
 8002716:	e7b3      	b.n	8002680 <SD_PowerON+0x14>
      return errorstate;
 8002718:	4605      	mov	r5, r0
 800271a:	e7b1      	b.n	8002680 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800271c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002720:	e7ae      	b.n	8002680 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002722:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8002726:	e7ab      	b.n	8002680 <SD_PowerON+0x14>
 8002728:	c1100000 	.word	0xc1100000

0800272c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800272e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  dataremaining = hsd->RxXferSize;
 8002730:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 8002732:	b9a6      	cbnz	r6, 800275e <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8002734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	f001 fb8d 	bl	8003e56 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800273c:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800273e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002742:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002744:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002748:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800274a:	0e00      	lsrs	r0, r0, #24
 800274c:	70e0      	strb	r0, [r4, #3]
      tmp++;
 800274e:	3404      	adds	r4, #4
      dataremaining--;
 8002750:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8002752:	3501      	adds	r5, #1
 8002754:	2d07      	cmp	r5, #7
 8002756:	d9ee      	bls.n	8002736 <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 8002758:	62bc      	str	r4, [r7, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800275a:	62fe      	str	r6, [r7, #44]	@ 0x2c
}
 800275c:	e7ea      	b.n	8002734 <SD_Read_IT+0x8>
 800275e:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002760:	2500      	movs	r5, #0
 8002762:	e7f7      	b.n	8002754 <SD_Read_IT+0x28>

08002764 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002768:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 800276a:	6a46      	ldr	r6, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 800276c:	b9de      	cbnz	r6, 80027a6 <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 800276e:	b003      	add	sp, #12
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 8002772:	7823      	ldrb	r3, [r4, #0]
 8002774:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8002776:	7862      	ldrb	r2, [r4, #1]
 8002778:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800277c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800277e:	78a2      	ldrb	r2, [r4, #2]
 8002780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002784:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002786:	78e2      	ldrb	r2, [r4, #3]
 8002788:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800278c:	9301      	str	r3, [sp, #4]
      tmp++;
 800278e:	3404      	adds	r4, #4
      dataremaining--;
 8002790:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002792:	a901      	add	r1, sp, #4
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f001 fb61 	bl	8003e5c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800279a:	3501      	adds	r5, #1
 800279c:	2d07      	cmp	r5, #7
 800279e:	d9e8      	bls.n	8002772 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 80027a0:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 80027a2:	627e      	str	r6, [r7, #36]	@ 0x24
}
 80027a4:	e7e3      	b.n	800276e <SD_Write_IT+0xa>
 80027a6:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 80027a8:	2500      	movs	r5, #0
 80027aa:	e7f7      	b.n	800279c <SD_Write_IT+0x38>

080027ac <SD_FindSCR>:
{
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	4604      	mov	r4, r0
 80027b2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff f804 	bl	80017c0 <HAL_GetTick>
 80027b8:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80027c0:	2108      	movs	r1, #8
 80027c2:	6820      	ldr	r0, [r4, #0]
 80027c4:	f001 fc3e 	bl	8004044 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80027c8:	4605      	mov	r5, r0
 80027ca:	b110      	cbz	r0, 80027d2 <SD_FindSCR+0x26>
}
 80027cc:	4628      	mov	r0, r5
 80027ce:	b009      	add	sp, #36	@ 0x24
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80027d2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80027d4:	0409      	lsls	r1, r1, #16
 80027d6:	6820      	ldr	r0, [r4, #0]
 80027d8:	f001 fcde 	bl	8004198 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80027dc:	4605      	mov	r5, r0
 80027de:	2800      	cmp	r0, #0
 80027e0:	d1f4      	bne.n	80027cc <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027e6:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80027e8:	2308      	movs	r3, #8
 80027ea:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80027ec:	2330      	movs	r3, #48	@ 0x30
 80027ee:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80027f0:	2302      	movs	r3, #2
 80027f2:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80027fc:	a902      	add	r1, sp, #8
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	f001 fb51 	bl	8003ea6 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	f001 fcf7 	bl	80041f8 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800280a:	4605      	mov	r5, r0
 800280c:	b158      	cbz	r0, 8002826 <SD_FindSCR+0x7a>
 800280e:	e7dd      	b.n	80027cc <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002810:	f001 fb21 	bl	8003e56 <SDIO_ReadFIFO>
 8002814:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8002818:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800281a:	f7fe ffd1 	bl	80017c0 <HAL_GetTick>
 800281e:	1b83      	subs	r3, r0, r6
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002824:	d043      	beq.n	80028ae <SD_FindSCR+0x102>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002826:	6820      	ldr	r0, [r4, #0]
 8002828:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800282a:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 800282e:	d107      	bne.n	8002840 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002830:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002832:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002836:	d1eb      	bne.n	8002810 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002838:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800283a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800283e:	d1ec      	bne.n	800281a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002840:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002842:	f013 0f08 	tst.w	r3, #8
 8002846:	d129      	bne.n	800289c <SD_FindSCR+0xf0>
 8002848:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800284a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800284e:	d125      	bne.n	800289c <SD_FindSCR+0xf0>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002850:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002852:	f013 0f02 	tst.w	r3, #2
 8002856:	d124      	bne.n	80028a2 <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002858:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800285a:	f015 0520 	ands.w	r5, r5, #32
 800285e:	d123      	bne.n	80028a8 <SD_FindSCR+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002860:	f240 533a 	movw	r3, #1338	@ 0x53a
 8002864:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002866:	9a01      	ldr	r2, [sp, #4]
 8002868:	0213      	lsls	r3, r2, #8
 800286a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800286e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002872:	0a11      	lsrs	r1, r2, #8
 8002874:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002878:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800287a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800287e:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002880:	9a00      	ldr	r2, [sp, #0]
 8002882:	0213      	lsls	r3, r2, #8
 8002884:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002888:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800288c:	0a11      	lsrs	r1, r2, #8
 800288e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002892:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002898:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800289a:	e797      	b.n	80027cc <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800289c:	2508      	movs	r5, #8
 800289e:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80028a0:	e794      	b.n	80027cc <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80028a2:	2502      	movs	r5, #2
 80028a4:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80028a6:	e791      	b.n	80027cc <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80028a8:	2520      	movs	r5, #32
 80028aa:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80028ac:	e78e      	b.n	80027cc <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80028ae:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 80028b2:	e78b      	b.n	80027cc <SD_FindSCR+0x20>

080028b4 <SD_WideBus_Enable>:
{
 80028b4:	b510      	push	{r4, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80028ba:	2100      	movs	r1, #0
 80028bc:	9100      	str	r1, [sp, #0]
 80028be:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80028c0:	6800      	ldr	r0, [r0, #0]
 80028c2:	f001 faed 	bl	8003ea0 <SDIO_GetResponse>
 80028c6:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80028ca:	d113      	bne.n	80028f4 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80028cc:	4669      	mov	r1, sp
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff ff6c 	bl	80027ac <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80028d4:	b980      	cbnz	r0, 80028f8 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80028d6:	9b01      	ldr	r3, [sp, #4]
 80028d8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80028dc:	d00e      	beq.n	80028fc <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028de:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80028e0:	0409      	lsls	r1, r1, #16
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	f001 fc58 	bl	8004198 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028e8:	b930      	cbnz	r0, 80028f8 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80028ea:	2102      	movs	r1, #2
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	f001 fc6b 	bl	80041c8 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028f2:	e001      	b.n	80028f8 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80028f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80028f8:	b002      	add	sp, #8
 80028fa:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80028fc:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002900:	e7fa      	b.n	80028f8 <SD_WideBus_Enable+0x44>

08002902 <SD_WideBus_Disable>:
{
 8002902:	b510      	push	{r4, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002908:	2100      	movs	r1, #0
 800290a:	9100      	str	r1, [sp, #0]
 800290c:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800290e:	6800      	ldr	r0, [r0, #0]
 8002910:	f001 fac6 	bl	8003ea0 <SDIO_GetResponse>
 8002914:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8002918:	d113      	bne.n	8002942 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800291a:	4669      	mov	r1, sp
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff ff45 	bl	80027ac <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002922:	b980      	cbnz	r0, 8002946 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002924:	9b01      	ldr	r3, [sp, #4]
 8002926:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800292a:	d00e      	beq.n	800294a <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800292c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800292e:	0409      	lsls	r1, r1, #16
 8002930:	6820      	ldr	r0, [r4, #0]
 8002932:	f001 fc31 	bl	8004198 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002936:	b930      	cbnz	r0, 8002946 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002938:	2100      	movs	r1, #0
 800293a:	6820      	ldr	r0, [r4, #0]
 800293c:	f001 fc44 	bl	80041c8 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002940:	e001      	b.n	8002946 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002942:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 8002946:	b002      	add	sp, #8
 8002948:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800294a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800294e:	e7fa      	b.n	8002946 <SD_WideBus_Disable+0x44>

08002950 <SD_SendStatus>:
{
 8002950:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8002952:	b181      	cbz	r1, 8002976 <SD_SendStatus+0x26>
 8002954:	4604      	mov	r4, r0
 8002956:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002958:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800295a:	0409      	lsls	r1, r1, #16
 800295c:	6800      	ldr	r0, [r0, #0]
 800295e:	f001 fc63 	bl	8004228 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002962:	4605      	mov	r5, r0
 8002964:	b108      	cbz	r0, 800296a <SD_SendStatus+0x1a>
}
 8002966:	4628      	mov	r0, r5
 8002968:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800296a:	2100      	movs	r1, #0
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	f001 fa97 	bl	8003ea0 <SDIO_GetResponse>
 8002972:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8002974:	e7f7      	b.n	8002966 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8002976:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 800297a:	e7f4      	b.n	8002966 <SD_SendStatus+0x16>

0800297c <HAL_SD_ReadBlocks_DMA>:
{
 800297c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002980:	b087      	sub	sp, #28
 8002982:	4604      	mov	r4, r0
  if(NULL == pData)
 8002984:	b191      	cbz	r1, 80029ac <HAL_SD_ReadBlocks_DMA+0x30>
 8002986:	4616      	mov	r6, r2
 8002988:	461f      	mov	r7, r3
 800298a:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800298c:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8002990:	b2ed      	uxtb	r5, r5
 8002992:	2d01      	cmp	r5, #1
 8002994:	d17f      	bne.n	8002a96 <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800299a:	19f0      	adds	r0, r6, r7
 800299c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800299e:	4298      	cmp	r0, r3
 80029a0:	d90a      	bls.n	80029b8 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 80029aa:	e075      	b.n	8002a98 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80029ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80029ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80029b2:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80029b4:	2501      	movs	r5, #1
 80029b6:	e06f      	b.n	8002a98 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 80029b8:	2303      	movs	r3, #3
 80029ba:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80029c8:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80029d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029d4:	4833      	ldr	r0, [pc, #204]	@ (8002aa4 <HAL_SD_ReadBlocks_DMA+0x128>)
 80029d6:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80029d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029da:	4833      	ldr	r0, [pc, #204]	@ (8002aa8 <HAL_SD_ReadBlocks_DMA+0x12c>)
 80029dc:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 80029de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029e0:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029e4:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80029e6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80029e8:	6801      	ldr	r1, [r0, #0]
 80029ea:	680b      	ldr	r3, [r1, #0]
 80029ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029f0:	6880      	ldr	r0, [r0, #8]
 80029f2:	4303      	orrs	r3, r0
 80029f4:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80029f6:	6821      	ldr	r1, [r4, #0]
 80029f8:	ea4f 2947 	mov.w	r9, r7, lsl #9
 80029fc:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8002a00:	3180      	adds	r1, #128	@ 0x80
 8002a02:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002a04:	f7ff f844 	bl	8001a90 <HAL_DMA_Start_IT>
 8002a08:	4680      	mov	r8, r0
 8002a0a:	bb68      	cbnz	r0, 8002a68 <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <HAL_SD_ReadBlocks_DMA+0x130>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a14:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d000      	beq.n	8002a1c <HAL_SD_ReadBlocks_DMA+0xa0>
        add *= 512U;
 8002a1a:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a20:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002a22:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a26:	2390      	movs	r3, #144	@ 0x90
 8002a28:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a36:	4669      	mov	r1, sp
 8002a38:	6820      	ldr	r0, [r4, #0]
 8002a3a:	f001 fa34 	bl	8003ea6 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8002a3e:	2f01      	cmp	r7, #1
 8002a40:	d922      	bls.n	8002a88 <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002a42:	2382      	movs	r3, #130	@ 0x82
 8002a44:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002a46:	4631      	mov	r1, r6
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	f001 fb2b 	bl	80040a4 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a4e:	b338      	cbz	r0, 8002aa0 <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <HAL_SD_ReadBlocks_DMA+0x134>)
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002a56:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a58:	4303      	orrs	r3, r0
 8002a5a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8002a66:	e017      	b.n	8002a98 <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002a6c:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 8002a70:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <HAL_SD_ReadBlocks_DMA+0x134>)
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002a78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a7e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8002a86:	e007      	b.n	8002a98 <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002a88:	2381      	movs	r3, #129	@ 0x81
 8002a8a:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002a8c:	4631      	mov	r1, r6
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	f001 faf0 	bl	8004074 <SDMMC_CmdReadSingleBlock>
 8002a94:	e7db      	b.n	8002a4e <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 8002a96:	2502      	movs	r5, #2
}
 8002a98:	4628      	mov	r0, r5
 8002a9a:	b007      	add	sp, #28
 8002a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8002aa0:	4645      	mov	r5, r8
 8002aa2:	e7f9      	b.n	8002a98 <HAL_SD_ReadBlocks_DMA+0x11c>
 8002aa4:	08002bf3 	.word	0x08002bf3
 8002aa8:	080030dd 	.word	0x080030dd
 8002aac:	42258000 	.word	0x42258000
 8002ab0:	004005ff 	.word	0x004005ff

08002ab4 <HAL_SD_WriteBlocks_DMA>:
{
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	4604      	mov	r4, r0
  if(NULL == pData)
 8002aba:	2900      	cmp	r1, #0
 8002abc:	d03b      	beq.n	8002b36 <HAL_SD_WriteBlocks_DMA+0x82>
 8002abe:	461e      	mov	r6, r3
 8002ac0:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8002ac2:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8002ac6:	b2ed      	uxtb	r5, r5
 8002ac8:	2d01      	cmp	r5, #1
 8002aca:	f040 8084 	bne.w	8002bd6 <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ad2:	1993      	adds	r3, r2, r6
 8002ad4:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8002ad6:	428b      	cmp	r3, r1
 8002ad8:	d833      	bhi.n	8002b42 <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8002ae0:	6803      	ldr	r3, [r0, #0]
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002aea:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002af4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002af6:	483a      	ldr	r0, [pc, #232]	@ (8002be0 <HAL_SD_WriteBlocks_DMA+0x12c>)
 8002af8:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002afa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002afc:	4839      	ldr	r0, [pc, #228]	@ (8002be4 <HAL_SD_WriteBlocks_DMA+0x130>)
 8002afe:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8002b00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b02:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002b04:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d000      	beq.n	8002b0c <HAL_SD_WriteBlocks_DMA+0x58>
      add *= 512U;
 8002b0a:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8002b0c:	2e01      	cmp	r6, #1
 8002b0e:	d91d      	bls.n	8002b4c <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002b10:	23a0      	movs	r3, #160	@ 0xa0
 8002b12:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002b14:	4611      	mov	r1, r2
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	f001 faf4 	bl	8004104 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b1c:	b1e8      	cbz	r0, 8002b5a <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	4a31      	ldr	r2, [pc, #196]	@ (8002be8 <HAL_SD_WriteBlocks_DMA+0x134>)
 8002b22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002b24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b26:	4303      	orrs	r3, r0
 8002b28:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8002b34:	e050      	b.n	8002bd8 <HAL_SD_WriteBlocks_DMA+0x124>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b36:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002b38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b3c:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8002b3e:	2501      	movs	r5, #1
 8002b40:	e04a      	b.n	8002bd8 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002b42:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002b44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	6383      	str	r3, [r0, #56]	@ 0x38
      return HAL_ERROR;
 8002b4a:	e045      	b.n	8002bd8 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002b4c:	2390      	movs	r3, #144	@ 0x90
 8002b4e:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002b50:	4611      	mov	r1, r2
 8002b52:	6820      	ldr	r0, [r4, #0]
 8002b54:	f001 fabe 	bl	80040d4 <SDMMC_CmdWriteSingleBlock>
 8002b58:	e7e0      	b.n	8002b1c <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_SD_WriteBlocks_DMA+0x138>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b64:	2240      	movs	r2, #64	@ 0x40
 8002b66:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002b68:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002b6a:	680a      	ldr	r2, [r1, #0]
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b72:	6889      	ldr	r1, [r1, #8]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002b78:	6822      	ldr	r2, [r4, #0]
 8002b7a:	0276      	lsls	r6, r6, #9
 8002b7c:	08b3      	lsrs	r3, r6, #2
 8002b7e:	3280      	adds	r2, #128	@ 0x80
 8002b80:	4639      	mov	r1, r7
 8002b82:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002b84:	f7fe ff84 	bl	8001a90 <HAL_DMA_Start_IT>
 8002b88:	4607      	mov	r7, r0
 8002b8a:	b198      	cbz	r0, 8002bb4 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002b8c:	6822      	ldr	r2, [r4, #0]
 8002b8e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002b90:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8002b94:	f023 0302 	bic.w	r3, r3, #2
 8002b98:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <HAL_SD_WriteBlocks_DMA+0x134>)
 8002b9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002ba0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ba2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ba6:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8002bb2:	e011      	b.n	8002bd8 <HAL_SD_WriteBlocks_DMA+0x124>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bb8:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002bba:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002bbc:	2390      	movs	r3, #144	@ 0x90
 8002bbe:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002bc4:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002bca:	4669      	mov	r1, sp
 8002bcc:	6820      	ldr	r0, [r4, #0]
 8002bce:	f001 f96a 	bl	8003ea6 <SDIO_ConfigData>
      return HAL_OK;
 8002bd2:	463d      	mov	r5, r7
 8002bd4:	e000      	b.n	8002bd8 <HAL_SD_WriteBlocks_DMA+0x124>
    return HAL_BUSY;
 8002bd6:	2502      	movs	r5, #2
}
 8002bd8:	4628      	mov	r0, r5
 8002bda:	b007      	add	sp, #28
 8002bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800265d 	.word	0x0800265d
 8002be4:	080030dd 	.word	0x080030dd
 8002be8:	004005ff 	.word	0x004005ff
 8002bec:	42258000 	.word	0x42258000

08002bf0 <HAL_SD_ErrorCallback>:
}
 8002bf0:	4770      	bx	lr

08002bf2 <SD_DMAReceiveCplt>:
{
 8002bf2:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002bf4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002bf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002bf8:	2b82      	cmp	r3, #130	@ 0x82
 8002bfa:	d011      	beq.n	8002c20 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002bfc:	6822      	ldr	r2, [r4, #0]
 8002bfe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c00:	f023 0308 	bic.w	r3, r3, #8
 8002c04:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f001 fca8 	bl	800456e <HAL_SD_RxCpltCallback>
}
 8002c1e:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c20:	6820      	ldr	r0, [r4, #0]
 8002c22:	f001 fa87 	bl	8004134 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c26:	4603      	mov	r3, r0
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d0e7      	beq.n	8002bfc <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8002c2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff ffdc 	bl	8002bf0 <HAL_SD_ErrorCallback>
 8002c38:	e7e0      	b.n	8002bfc <SD_DMAReceiveCplt+0xa>
	...

08002c3c <HAL_SD_GetCardCSD>:
{
 8002c3c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002c3e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8002c40:	0f92      	lsrs	r2, r2, #30
 8002c42:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002c44:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8002c46:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8002c4a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002c4c:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8002c50:	f002 0203 	and.w	r2, r2, #3
 8002c54:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002c56:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 8002c5a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002c5c:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8002c60:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002c62:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 8002c66:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002c68:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002c6a:	0d12      	lsrs	r2, r2, #20
 8002c6c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002c6e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8002c72:	f002 020f 	and.w	r2, r2, #15
 8002c76:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002c78:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002c7a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8002c7e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002c80:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002c82:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002c86:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002c88:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002c8a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002c8e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002c90:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002c92:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002c96:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002c98:	2200      	movs	r2, #0
 8002c9a:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002c9c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	f040 8086 	bne.w	8002db0 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002ca4:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8002ca6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002caa:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8002cae:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002cb0:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8002cb4:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002cb6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cb8:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8002cbc:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002cbe:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8002cc2:	f002 0207 	and.w	r2, r2, #7
 8002cc6:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002cc8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cca:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8002cce:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002cd0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cd2:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8002cd6:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002cd8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cda:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8002cde:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002ce0:	690a      	ldr	r2, [r1, #16]
 8002ce2:	3201      	adds	r2, #1
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ce6:	7e08      	ldrb	r0, [r1, #24]
 8002ce8:	f000 0007 	and.w	r0, r0, #7
 8002cec:	3002      	adds	r0, #2
 8002cee:	4082      	lsls	r2, r0
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002cf2:	f891 c008 	ldrb.w	ip, [r1, #8]
 8002cf6:	f00c 0c0f 	and.w	ip, ip, #15
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	fa00 f00c 	lsl.w	r0, r0, ip
 8002d00:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002d02:	0a40      	lsrs	r0, r0, #9
 8002d04:	fb00 f202 	mul.w	r2, r0, r2
 8002d08:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002d10:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d12:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002d16:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002d18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d1a:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8002d1e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002d20:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d26:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002d28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d2a:	0fd2      	lsrs	r2, r2, #31
 8002d2c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002d2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d30:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8002d34:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002d36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d38:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8002d3c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002d3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d40:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8002d44:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002d46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d48:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002d4c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8002d50:	2000      	movs	r0, #0
 8002d52:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002d56:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8002d5a:	f002 0201 	and.w	r2, r2, #1
 8002d5e:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d64:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8002d68:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002d6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d6e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002d72:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002d76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d78:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002d7c:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002d80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d82:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002d86:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002d8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d8c:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8002d90:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002d94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d96:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8002d9a:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002da4:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8002dae:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002db0:	2a01      	cmp	r2, #1
 8002db2:	d111      	bne.n	8002dd8 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002db4:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8002db6:	0412      	lsls	r2, r2, #16
 8002db8:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8002dbc:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8002dc0:	4302      	orrs	r2, r0
 8002dc2:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002dc4:	690a      	ldr	r2, [r1, #16]
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	0292      	lsls	r2, r2, #10
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd2:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002dd4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002dd6:	e79b      	b.n	8002d10 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dd8:	6802      	ldr	r2, [r0, #0]
 8002dda:	4905      	ldr	r1, [pc, #20]	@ (8002df0 <HAL_SD_GetCardCSD+0x1b4>)
 8002ddc:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dde:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002de0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002de4:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002de6:	2001      	movs	r0, #1
 8002de8:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	004005ff 	.word	0x004005ff

08002df4 <SD_InitCard>:
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	b090      	sub	sp, #64	@ 0x40
 8002df8:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002e00:	6800      	ldr	r0, [r0, #0]
 8002e02:	f001 f834 	bl	8003e6e <SDIO_GetPowerState>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d06c      	beq.n	8002ee4 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e0a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d145      	bne.n	8002e9c <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d15d      	bne.n	8002ed2 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d01d      	beq.n	8002e58 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002e1c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002e20:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e22:	0409      	lsls	r1, r1, #16
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	f001 fa5a 	bl	80042de <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d15b      	bne.n	8002ee8 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e30:	2100      	movs	r1, #0
 8002e32:	6820      	ldr	r0, [r4, #0]
 8002e34:	f001 f834 	bl	8003ea0 <SDIO_GetResponse>
 8002e38:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	f001 f82f 	bl	8003ea0 <SDIO_GetResponse>
 8002e42:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e44:	2108      	movs	r1, #8
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	f001 f82a 	bl	8003ea0 <SDIO_GetResponse>
 8002e4c:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e4e:	210c      	movs	r1, #12
 8002e50:	6820      	ldr	r0, [r4, #0]
 8002e52:	f001 f825 	bl	8003ea0 <SDIO_GetResponse>
 8002e56:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002e58:	2104      	movs	r1, #4
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	f001 f820 	bl	8003ea0 <SDIO_GetResponse>
 8002e60:	0d00      	lsrs	r0, r0, #20
 8002e62:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002e64:	a905      	add	r1, sp, #20
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff fee8 	bl	8002c3c <HAL_SD_GetCardCSD>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d13e      	bne.n	8002eee <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002e70:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002e72:	0412      	lsls	r2, r2, #16
 8002e74:	2300      	movs	r3, #0
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	f001 f976 	bl	8004168 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	bb98      	cbnz	r0, 8002ee8 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002e80:	4623      	mov	r3, r4
 8002e82:	f853 6b10 	ldr.w	r6, [r3], #16
 8002e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e8a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002e8e:	3404      	adds	r4, #4
 8002e90:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002e94:	4630      	mov	r0, r6
 8002e96:	f000 ffc5 	bl	8003e24 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8002e9a:	e025      	b.n	8002ee8 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	f001 fa09 	bl	80042b4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	bb00      	cbnz	r0, 8002ee8 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	f000 fff9 	bl	8003ea0 <SDIO_GetResponse>
 8002eae:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	f000 fff4 	bl	8003ea0 <SDIO_GetResponse>
 8002eb8:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002eba:	2108      	movs	r1, #8
 8002ebc:	6820      	ldr	r0, [r4, #0]
 8002ebe:	f000 ffef 	bl	8003ea0 <SDIO_GetResponse>
 8002ec2:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ec4:	210c      	movs	r1, #12
 8002ec6:	6820      	ldr	r0, [r4, #0]
 8002ec8:	f000 ffea 	bl	8003ea0 <SDIO_GetResponse>
 8002ecc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8002ed0:	e79e      	b.n	8002e10 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002ed2:	f10d 0112 	add.w	r1, sp, #18
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	f001 faa6 	bl	8004428 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002edc:	4605      	mov	r5, r0
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d099      	beq.n	8002e16 <SD_InitCard+0x22>
 8002ee2:	e001      	b.n	8002ee8 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ee4:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 8002ee8:	4628      	mov	r0, r5
 8002eea:	b010      	add	sp, #64	@ 0x40
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002eee:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002ef2:	e7f9      	b.n	8002ee8 <SD_InitCard+0xf4>

08002ef4 <HAL_SD_InitCard>:
{
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	b08a      	sub	sp, #40	@ 0x28
 8002ef8:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002efa:	2300      	movs	r3, #0
 8002efc:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002efe:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002f00:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002f02:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f04:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002f06:	2376      	movs	r3, #118	@ 0x76
 8002f08:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8002f0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8002f0c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002f10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002f14:	ab04      	add	r3, sp, #16
 8002f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	f000 ff83 	bl	8003e24 <SDIO_Init>
  if(status != HAL_OK)
 8002f1e:	b118      	cbz	r0, 8002f28 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8002f20:	2501      	movs	r5, #1
}
 8002f22:	4628      	mov	r0, r5
 8002f24:	b00a      	add	sp, #40	@ 0x28
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8002f2a:	4e1a      	ldr	r6, [pc, #104]	@ (8002f94 <HAL_SD_InitCard+0xa0>)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002f32:	6820      	ldr	r0, [r4, #0]
 8002f34:	f000 ff97 	bl	8003e66 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f7fe fc44 	bl	80017cc <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff fb91 	bl	800266c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f4a:	b130      	cbz	r0, 8002f5a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8002f4c:	2501      	movs	r5, #1
 8002f4e:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002f52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f54:	4303      	orrs	r3, r0
 8002f56:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8002f58:	e7e3      	b.n	8002f22 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff ff4a 	bl	8002df4 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f60:	b130      	cbz	r0, 8002f70 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8002f62:	2501      	movs	r5, #1
 8002f64:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002f68:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f6a:	4303      	orrs	r3, r0
 8002f6c:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8002f6e:	e7d8      	b.n	8002f22 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	f001 f865 	bl	8004044 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d0d1      	beq.n	8002f22 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	4905      	ldr	r1, [pc, #20]	@ (8002f98 <HAL_SD_InitCard+0xa4>)
 8002f82:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002f84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f86:	4303      	orrs	r3, r0
 8002f88:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f8a:	2501      	movs	r5, #1
 8002f8c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002f90:	e7c7      	b.n	8002f22 <HAL_SD_InitCard+0x2e>
 8002f92:	bf00      	nop
 8002f94:	42258000 	.word	0x42258000
 8002f98:	004005ff 	.word	0x004005ff

08002f9c <HAL_SD_Init>:
  if(hsd == NULL)
 8002f9c:	b1a8      	cbz	r0, 8002fca <HAL_SD_Init+0x2e>
{
 8002f9e:	b510      	push	{r4, lr}
 8002fa0:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8002fa2:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8002fa6:	b163      	cbz	r3, 8002fc2 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff ffa0 	bl	8002ef4 <HAL_SD_InitCard>
 8002fb4:	b958      	cbnz	r0, 8002fce <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fb6:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002fb8:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002fc0:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8002fc2:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002fc4:	f7fe f9e2 	bl	800138c <HAL_SD_MspInit>
 8002fc8:	e7ee      	b.n	8002fa8 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
}
 8002fcc:	4770      	bx	lr
    return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e7f6      	b.n	8002fc0 <HAL_SD_Init+0x24>

08002fd2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002fd2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002fd4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002fd6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002fd8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002fda:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002fdc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002fde:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002fe0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002fe2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002fe4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002fe6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002fe8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002fea:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002fec:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002fee:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002ff0:	61cb      	str	r3, [r1, #28]
}
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_SD_ConfigWideBusOperation>:
{
 8002ff8:	b530      	push	{r4, r5, lr}
 8002ffa:	b08b      	sub	sp, #44	@ 0x2c
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003000:	2303      	movs	r3, #3
 8003002:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003006:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003008:	2b03      	cmp	r3, #3
 800300a:	d01c      	beq.n	8003046 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 800300c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003010:	d008      	beq.n	8003024 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003012:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003016:	d00a      	beq.n	800302e <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003018:	b179      	cbz	r1, 800303a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800301a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800301c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003020:	6383      	str	r3, [r0, #56]	@ 0x38
 8003022:	e014      	b.n	800304e <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003024:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800302a:	6383      	str	r3, [r0, #56]	@ 0x38
 800302c:	e00f      	b.n	800304e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800302e:	f7ff fc41 	bl	80028b4 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003032:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003034:	4303      	orrs	r3, r0
 8003036:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003038:	e009      	b.n	800304e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800303a:	f7ff fc62 	bl	8002902 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800303e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003040:	4303      	orrs	r3, r0
 8003042:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003044:	e003      	b.n	800304e <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003046:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800304c:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800304e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003050:	b1c3      	cbz	r3, 8003084 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003056:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003058:	2501      	movs	r5, #1
 800305a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800305e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	f000 ffee 	bl	8004044 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003068:	b130      	cbz	r0, 8003078 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	4911      	ldr	r1, [pc, #68]	@ (80030b4 <HAL_SD_ConfigWideBusOperation+0xbc>)
 800306e:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003070:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003072:	4303      	orrs	r3, r0
 8003074:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8003076:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003078:	2301      	movs	r3, #1
 800307a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800307e:	4628      	mov	r0, r5
 8003080:	b00b      	add	sp, #44	@ 0x2c
 8003082:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800308c:	68e3      	ldr	r3, [r4, #12]
 800308e:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003090:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003092:	6963      	ldr	r3, [r4, #20]
 8003094:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003096:	69a3      	ldr	r3, [r4, #24]
 8003098:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800309a:	ab0a      	add	r3, sp, #40	@ 0x28
 800309c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80030a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80030a4:	ab04      	add	r3, sp, #16
 80030a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	f000 febb 	bl	8003e24 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2500      	movs	r5, #0
 80030b0:	e7d5      	b.n	800305e <HAL_SD_ConfigWideBusOperation+0x66>
 80030b2:	bf00      	nop
 80030b4:	004005ff 	.word	0x004005ff

080030b8 <HAL_SD_GetCardState>:
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80030c2:	a901      	add	r1, sp, #4
 80030c4:	f7ff fc44 	bl	8002950 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80030c8:	b110      	cbz	r0, 80030d0 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80030ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030cc:	4303      	orrs	r3, r0
 80030ce:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80030d0:	9801      	ldr	r0, [sp, #4]
 80030d2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80030d6:	b002      	add	sp, #8
 80030d8:	bd10      	pop	{r4, pc}
	...

080030dc <SD_DMAError>:
{
 80030dc:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030de:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80030e0:	f7fe fe56 	bl	8001d90 <HAL_DMA_GetError>
 80030e4:	2802      	cmp	r0, #2
 80030e6:	d00a      	beq.n	80030fe <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80030e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80030ec:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80030ee:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d005      	beq.n	8003100 <SD_DMAError+0x24>
 80030f4:	2a01      	cmp	r2, #1
 80030f6:	d003      	beq.n	8003100 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff fd79 	bl	8002bf0 <HAL_SD_ErrorCallback>
}
 80030fe:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	4a0f      	ldr	r2, [pc, #60]	@ (8003140 <SD_DMAError+0x64>)
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800310a:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 800310e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003110:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003112:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003116:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003118:	4620      	mov	r0, r4
 800311a:	f7ff ffcd 	bl	80030b8 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800311e:	3805      	subs	r0, #5
 8003120:	2801      	cmp	r0, #1
 8003122:	d905      	bls.n	8003130 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8003124:	2301      	movs	r3, #1
 8003126:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800312a:	2300      	movs	r3, #0
 800312c:	6323      	str	r3, [r4, #48]	@ 0x30
 800312e:	e7e3      	b.n	80030f8 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	f000 ffff 	bl	8004134 <SDMMC_CmdStopTransfer>
 8003136:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003138:	4303      	orrs	r3, r0
 800313a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800313c:	e7f2      	b.n	8003124 <SD_DMAError+0x48>
 800313e:	bf00      	nop
 8003140:	004005ff 	.word	0x004005ff

08003144 <SD_DMATxAbort>:
{
 8003144:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003146:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800314e:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003150:	4620      	mov	r0, r4
 8003152:	f7ff ffb1 	bl	80030b8 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003156:	2301      	movs	r3, #1
 8003158:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800315c:	2300      	movs	r3, #0
 800315e:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003160:	3805      	subs	r0, #5
 8003162:	2801      	cmp	r0, #1
 8003164:	d905      	bls.n	8003172 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003166:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003168:	b953      	cbnz	r3, 8003180 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800316a:	4620      	mov	r0, r4
 800316c:	f001 f9f7 	bl	800455e <HAL_SD_AbortCallback>
}
 8003170:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	f000 ffde 	bl	8004134 <SDMMC_CmdStopTransfer>
 8003178:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800317a:	4303      	orrs	r3, r0
 800317c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800317e:	e7f2      	b.n	8003166 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003180:	4620      	mov	r0, r4
 8003182:	f7ff fd35 	bl	8002bf0 <HAL_SD_ErrorCallback>
}
 8003186:	e7f3      	b.n	8003170 <SD_DMATxAbort+0x2c>

08003188 <SD_DMARxAbort>:
{
 8003188:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800318a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff ff8f 	bl	80030b8 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 800319a:	2301      	movs	r3, #1
 800319c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80031a4:	3805      	subs	r0, #5
 80031a6:	2801      	cmp	r0, #1
 80031a8:	d905      	bls.n	80031b6 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80031aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031ac:	b953      	cbnz	r3, 80031c4 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80031ae:	4620      	mov	r0, r4
 80031b0:	f001 f9d5 	bl	800455e <HAL_SD_AbortCallback>
}
 80031b4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f000 ffbc 	bl	8004134 <SDMMC_CmdStopTransfer>
 80031bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031be:	4303      	orrs	r3, r0
 80031c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80031c2:	e7f2      	b.n	80031aa <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff fd13 	bl	8002bf0 <HAL_SD_ErrorCallback>
}
 80031ca:	e7f3      	b.n	80031b4 <SD_DMARxAbort+0x2c>

080031cc <HAL_SD_IRQHandler>:
{
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80031d0:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80031d2:	6803      	ldr	r3, [r0, #0]
 80031d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d6:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80031da:	d002      	beq.n	80031e2 <HAL_SD_IRQHandler+0x16>
 80031dc:	f015 0f08 	tst.w	r5, #8
 80031e0:	d128      	bne.n	8003234 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80031e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80031e8:	d05a      	beq.n	80032a0 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80031ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80031f4:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80031f8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80031fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003208:	f015 0f08 	tst.w	r5, #8
 800320c:	d026      	beq.n	800325c <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800320e:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8003212:	d112      	bne.n	800323a <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	f240 523a 	movw	r2, #1338	@ 0x53a
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800321c:	2301      	movs	r3, #1
 800321e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003222:	2300      	movs	r3, #0
 8003224:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003226:	f015 0f03 	tst.w	r5, #3
 800322a:	d013      	beq.n	8003254 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 800322c:	4620      	mov	r0, r4
 800322e:	f001 f99e 	bl	800456e <HAL_SD_RxCpltCallback>
 8003232:	e001      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8003234:	f7ff fa7a 	bl	800272c <SD_Read_IT>
}
 8003238:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	f000 ff7a 	bl	8004134 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003240:	4603      	mov	r3, r0
 8003242:	2800      	cmp	r0, #0
 8003244:	d0e6      	beq.n	8003214 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8003246:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003248:	4313      	orrs	r3, r2
 800324a:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff fccf 	bl	8002bf0 <HAL_SD_ErrorCallback>
 8003252:	e7df      	b.n	8003214 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8003254:	4620      	mov	r0, r4
 8003256:	f001 f986 	bl	8004566 <HAL_SD_TxCpltCallback>
 800325a:	e7ed      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800325c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003260:	d0ea      	beq.n	8003238 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003262:	f015 0f20 	tst.w	r5, #32
 8003266:	d10e      	bne.n	8003286 <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003268:	f015 0f03 	tst.w	r5, #3
 800326c:	d1e4      	bne.n	8003238 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003272:	f023 0308 	bic.w	r3, r3, #8
 8003276:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003278:	2301      	movs	r3, #1
 800327a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800327e:	4620      	mov	r0, r4
 8003280:	f001 f971 	bl	8004566 <HAL_SD_TxCpltCallback>
 8003284:	e7d8      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003286:	6820      	ldr	r0, [r4, #0]
 8003288:	f000 ff54 	bl	8004134 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800328c:	4603      	mov	r3, r0
 800328e:	2800      	cmp	r0, #0
 8003290:	d0ea      	beq.n	8003268 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8003292:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003294:	4313      	orrs	r3, r2
 8003296:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff fca9 	bl	8002bf0 <HAL_SD_ErrorCallback>
 800329e:	e7e3      	b.n	8003268 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80032a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80032a6:	d002      	beq.n	80032ae <HAL_SD_IRQHandler+0xe2>
 80032a8:	f015 0f08 	tst.w	r5, #8
 80032ac:	d155      	bne.n	800335a <HAL_SD_IRQHandler+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80032ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032b0:	f240 223a 	movw	r2, #570	@ 0x23a
 80032b4:	4211      	tst	r1, r2
 80032b6:	d0bf      	beq.n	8003238 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80032b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ba:	f012 0f02 	tst.w	r2, #2
 80032be:	d003      	beq.n	80032c8 <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80032c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80032c2:	f042 0202 	orr.w	r2, r2, #2
 80032c6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80032c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ca:	f012 0f08 	tst.w	r2, #8
 80032ce:	d003      	beq.n	80032d8 <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80032d2:	f042 0208 	orr.w	r2, r2, #8
 80032d6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80032d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032da:	f012 0f20 	tst.w	r2, #32
 80032de:	d003      	beq.n	80032e8 <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80032e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ea:	f012 0f10 	tst.w	r2, #16
 80032ee:	d003      	beq.n	80032f8 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80032f0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80032f2:	f042 0210 	orr.w	r2, r2, #16
 80032f6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80032f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fa:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80032fe:	d003      	beq.n	8003308 <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003300:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003308:	f240 723a 	movw	r2, #1850	@ 0x73a
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003312:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003316:	f023 0302 	bic.w	r3, r3, #2
 800331a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	f000 ff09 	bl	8004134 <SDMMC_CmdStopTransfer>
 8003322:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003324:	4303      	orrs	r3, r0
 8003326:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003328:	f015 0f08 	tst.w	r5, #8
 800332c:	d119      	bne.n	8003362 <HAL_SD_IRQHandler+0x196>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800332e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003332:	d081      	beq.n	8003238 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003334:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8003338:	d11c      	bne.n	8003374 <HAL_SD_IRQHandler+0x1a8>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800333a:	f015 0f03 	tst.w	r5, #3
 800333e:	d026      	beq.n	800338e <HAL_SD_IRQHandler+0x1c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003342:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_SD_IRQHandler+0x1d8>)
 8003344:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003346:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003348:	f7fe fc21 	bl	8001b8e <HAL_DMA_Abort_IT>
 800334c:	2800      	cmp	r0, #0
 800334e:	f43f af73 	beq.w	8003238 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 8003352:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003354:	f7ff ff18 	bl	8003188 <SD_DMARxAbort>
 8003358:	e76e      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 800335a:	4620      	mov	r0, r4
 800335c:	f7ff fa02 	bl	8002764 <SD_Write_IT>
 8003360:	e76a      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8003362:	2301      	movs	r3, #1
 8003364:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003368:	2300      	movs	r3, #0
 800336a:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff fc3f 	bl	8002bf0 <HAL_SD_ErrorCallback>
 8003372:	e761      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003374:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003376:	4a0c      	ldr	r2, [pc, #48]	@ (80033a8 <HAL_SD_IRQHandler+0x1dc>)
 8003378:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800337a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800337c:	f7fe fc07 	bl	8001b8e <HAL_DMA_Abort_IT>
 8003380:	2800      	cmp	r0, #0
 8003382:	f43f af59 	beq.w	8003238 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8003386:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003388:	f7ff fedc 	bl	8003144 <SD_DMATxAbort>
 800338c:	e754      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003392:	2201      	movs	r2, #1
 8003394:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003398:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800339a:	4620      	mov	r0, r4
 800339c:	f001 f8df 	bl	800455e <HAL_SD_AbortCallback>
}
 80033a0:	e74a      	b.n	8003238 <HAL_SD_IRQHandler+0x6c>
 80033a2:	bf00      	nop
 80033a4:	08003189 	.word	0x08003189
 80033a8:	08003145 	.word	0x08003145

080033ac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d137      	bne.n	8003426 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	2302      	movs	r3, #2
 80033b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033bc:	6802      	ldr	r2, [r0, #0]
 80033be:	68d3      	ldr	r3, [r2, #12]
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c6:	6803      	ldr	r3, [r0, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	@ (8003430 <HAL_TIM_Base_Start_IT+0x84>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d020      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d2:	d01d      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033d4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80033d8:	4293      	cmp	r3, r2
 80033da:	d019      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d015      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d011      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033ec:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00d      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033f4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
 80033fc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003400:	4293      	cmp	r3, r2
 8003402:	d005      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2000      	movs	r0, #0
 800340e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003416:	2a06      	cmp	r2, #6
 8003418:	d007      	beq.n	800342a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003422:	2000      	movs	r0, #0
 8003424:	4770      	bx	lr
    return HAL_ERROR;
 8003426:	2001      	movs	r0, #1
 8003428:	4770      	bx	lr
  return HAL_OK;
 800342a:	2000      	movs	r0, #0
}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000

08003434 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800343a:	4770      	bx	lr

0800343c <HAL_TIM_IRQHandler>:
{
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003440:	6803      	ldr	r3, [r0, #0]
 8003442:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003444:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003446:	f015 0f02 	tst.w	r5, #2
 800344a:	d010      	beq.n	800346e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800344c:	f016 0f02 	tst.w	r6, #2
 8003450:	d00d      	beq.n	800346e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003452:	f06f 0202 	mvn.w	r2, #2
 8003456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003458:	2301      	movs	r3, #1
 800345a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800345c:	6803      	ldr	r3, [r0, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f013 0f03 	tst.w	r3, #3
 8003464:	d05e      	beq.n	8003524 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003466:	f7ff ffe6 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	2300      	movs	r3, #0
 800346c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800346e:	f015 0f04 	tst.w	r5, #4
 8003472:	d012      	beq.n	800349a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003474:	f016 0f04 	tst.w	r6, #4
 8003478:	d00f      	beq.n	800349a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	2302      	movs	r3, #2
 8003484:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800348e:	d04f      	beq.n	8003530 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003490:	4620      	mov	r0, r4
 8003492:	f7ff ffd0 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	2300      	movs	r3, #0
 8003498:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800349a:	f015 0f08 	tst.w	r5, #8
 800349e:	d012      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034a0:	f016 0f08 	tst.w	r6, #8
 80034a4:	d00f      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f06f 0208 	mvn.w	r2, #8
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ae:	2304      	movs	r3, #4
 80034b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f013 0f03 	tst.w	r3, #3
 80034ba:	d040      	beq.n	800353e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80034bc:	4620      	mov	r0, r4
 80034be:	f7ff ffba 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	2300      	movs	r3, #0
 80034c4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034c6:	f015 0f10 	tst.w	r5, #16
 80034ca:	d012      	beq.n	80034f2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034cc:	f016 0f10 	tst.w	r6, #16
 80034d0:	d00f      	beq.n	80034f2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	f06f 0210 	mvn.w	r2, #16
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034da:	2308      	movs	r3, #8
 80034dc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80034e6:	d031      	beq.n	800354c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff ffa4 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	2300      	movs	r3, #0
 80034f0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034f2:	f015 0f01 	tst.w	r5, #1
 80034f6:	d002      	beq.n	80034fe <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034f8:	f016 0f01 	tst.w	r6, #1
 80034fc:	d12d      	bne.n	800355a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034fe:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003502:	d002      	beq.n	800350a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003504:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003508:	d12f      	bne.n	800356a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800350a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800350e:	d002      	beq.n	8003516 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003510:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003514:	d131      	bne.n	800357a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003516:	f015 0f20 	tst.w	r5, #32
 800351a:	d002      	beq.n	8003522 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800351c:	f016 0f20 	tst.w	r6, #32
 8003520:	d133      	bne.n	800358a <HAL_TIM_IRQHandler+0x14e>
}
 8003522:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003524:	f7ff ff86 	bl	8003434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff ff85 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
 800352e:	e79c      	b.n	800346a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff ff7f 	bl	8003434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003536:	4620      	mov	r0, r4
 8003538:	f7ff ff7e 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
 800353c:	e7ab      	b.n	8003496 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	4620      	mov	r0, r4
 8003540:	f7ff ff78 	bl	8003434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	4620      	mov	r0, r4
 8003546:	f7ff ff77 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
 800354a:	e7ba      	b.n	80034c2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff ff71 	bl	8003434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff ff70 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
 8003558:	e7c9      	b.n	80034ee <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	4620      	mov	r0, r4
 8003564:	f7fd fe04 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
 8003568:	e7c9      	b.n	80034fe <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003570:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003572:	4620      	mov	r0, r4
 8003574:	f000 f8ab 	bl	80036ce <HAL_TIMEx_BreakCallback>
 8003578:	e7c7      	b.n	800350a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003580:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff ff59 	bl	800343a <HAL_TIM_TriggerCallback>
 8003588:	e7c5      	b.n	8003516 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003592:	4620      	mov	r0, r4
 8003594:	f000 f89a 	bl	80036cc <HAL_TIMEx_CommutCallback>
}
 8003598:	e7c3      	b.n	8003522 <HAL_TIM_IRQHandler+0xe6>
	...

0800359c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800359e:	4a34      	ldr	r2, [pc, #208]	@ (8003670 <TIM_Base_SetConfig+0xd4>)
 80035a0:	4290      	cmp	r0, r2
 80035a2:	d012      	beq.n	80035ca <TIM_Base_SetConfig+0x2e>
 80035a4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x2e>
 80035aa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80035ae:	4290      	cmp	r0, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x2e>
 80035b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035b6:	4290      	cmp	r0, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x2e>
 80035ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035be:	4290      	cmp	r0, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x2e>
 80035c2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80035c6:	4290      	cmp	r0, r2
 80035c8:	d103      	bne.n	80035d2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80035ce:	684a      	ldr	r2, [r1, #4]
 80035d0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	4a27      	ldr	r2, [pc, #156]	@ (8003670 <TIM_Base_SetConfig+0xd4>)
 80035d4:	4290      	cmp	r0, r2
 80035d6:	d02a      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 80035d8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80035dc:	d027      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 80035de:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80035e2:	4290      	cmp	r0, r2
 80035e4:	d023      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 80035e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035ea:	4290      	cmp	r0, r2
 80035ec:	d01f      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 80035ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035f2:	4290      	cmp	r0, r2
 80035f4:	d01b      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 80035f6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80035fa:	4290      	cmp	r0, r2
 80035fc:	d017      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 80035fe:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003602:	4290      	cmp	r0, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 8003606:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800360a:	4290      	cmp	r0, r2
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 800360e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003612:	4290      	cmp	r0, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 8003616:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800361a:	4290      	cmp	r0, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 800361e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003622:	4290      	cmp	r0, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x92>
 8003626:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800362a:	4290      	cmp	r0, r2
 800362c:	d103      	bne.n	8003636 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003632:	68ca      	ldr	r2, [r1, #12]
 8003634:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363a:	694a      	ldr	r2, [r1, #20]
 800363c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800363e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	688b      	ldr	r3, [r1, #8]
 8003642:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <TIM_Base_SetConfig+0xd4>)
 800364a:	4298      	cmp	r0, r3
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0xba>
 800364e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003652:	4298      	cmp	r0, r3
 8003654:	d101      	bne.n	800365a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003656:	690b      	ldr	r3, [r1, #16]
 8003658:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800365a:	2301      	movs	r3, #1
 800365c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800365e:	6903      	ldr	r3, [r0, #16]
 8003660:	f013 0f01 	tst.w	r3, #1
 8003664:	d003      	beq.n	800366e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003666:	6903      	ldr	r3, [r0, #16]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6103      	str	r3, [r0, #16]
  }
}
 800366e:	4770      	bx	lr
 8003670:	40010000 	.word	0x40010000

08003674 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003674:	b340      	cbz	r0, 80036c8 <HAL_TIM_Base_Init+0x54>
{
 8003676:	b510      	push	{r4, lr}
 8003678:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800367e:	b1f3      	cbz	r3, 80036be <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	2302      	movs	r3, #2
 8003682:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003686:	4621      	mov	r1, r4
 8003688:	f851 0b04 	ldr.w	r0, [r1], #4
 800368c:	f7ff ff86 	bl	800359c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	2301      	movs	r3, #1
 8003692:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800369a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800369e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80036a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80036b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80036ba:	2000      	movs	r0, #0
}
 80036bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80036c2:	f7fd feed 	bl	80014a0 <HAL_TIM_Base_MspInit>
 80036c6:	e7db      	b.n	8003680 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80036c8:	2001      	movs	r0, #1
}
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036cc:	4770      	bx	lr

080036ce <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ce:	4770      	bx	lr

080036d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	f102 030c 	add.w	r3, r2, #12
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	320c      	adds	r2, #12
 80036e0:	e842 3100 	strex	r1, r3, [r2]
 80036e4:	2900      	cmp	r1, #0
 80036e6:	d1f3      	bne.n	80036d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	f102 0314 	add.w	r3, r2, #20
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	3214      	adds	r2, #20
 80036f8:	e842 3100 	strex	r1, r3, [r2]
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d1f3      	bne.n	80036e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003702:	2b01      	cmp	r3, #1
 8003704:	d005      	beq.n	8003712 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003706:	2320      	movs	r3, #32
 8003708:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370c:	2300      	movs	r3, #0
 800370e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003710:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003712:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	f102 030c 	add.w	r3, r2, #12
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	320c      	adds	r2, #12
 8003722:	e842 3100 	strex	r1, r3, [r2]
 8003726:	2900      	cmp	r1, #0
 8003728:	d1f3      	bne.n	8003712 <UART_EndRxTransfer+0x42>
 800372a:	e7ec      	b.n	8003706 <UART_EndRxTransfer+0x36>

0800372c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800372c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b21      	cmp	r3, #33	@ 0x21
 8003734:	d001      	beq.n	800373a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003736:	2002      	movs	r0, #2
  }
}
 8003738:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373a:	6883      	ldr	r3, [r0, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003740:	d017      	beq.n	8003772 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003742:	6a03      	ldr	r3, [r0, #32]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	6202      	str	r2, [r0, #32]
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	6803      	ldr	r3, [r0, #0]
 800374c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800374e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8003758:	b94b      	cbnz	r3, 800376e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800375a:	6802      	ldr	r2, [r0, #0]
 800375c:	68d3      	ldr	r3, [r2, #12]
 800375e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003762:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003764:	6802      	ldr	r2, [r0, #0]
 8003766:	68d3      	ldr	r3, [r2, #12]
 8003768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800376e:	2000      	movs	r0, #0
 8003770:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	6903      	ldr	r3, [r0, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e4      	bne.n	8003742 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003778:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	6802      	ldr	r2, [r0, #0]
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8003784:	6a03      	ldr	r3, [r0, #32]
 8003786:	3302      	adds	r3, #2
 8003788:	6203      	str	r3, [r0, #32]
 800378a:	e7e0      	b.n	800374e <UART_Transmit_IT+0x22>

0800378c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003790:	6802      	ldr	r2, [r0, #0]
 8003792:	6913      	ldr	r3, [r2, #16]
 8003794:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003798:	68c1      	ldr	r1, [r0, #12]
 800379a:	430b      	orrs	r3, r1
 800379c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800379e:	6883      	ldr	r3, [r0, #8]
 80037a0:	6902      	ldr	r2, [r0, #16]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	6943      	ldr	r3, [r0, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	69c3      	ldr	r3, [r0, #28]
 80037aa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80037ac:	6801      	ldr	r1, [r0, #0]
 80037ae:	68cb      	ldr	r3, [r1, #12]
 80037b0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80037b4:	f023 030c 	bic.w	r3, r3, #12
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037bc:	6802      	ldr	r2, [r0, #0]
 80037be:	6953      	ldr	r3, [r2, #20]
 80037c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c4:	6981      	ldr	r1, [r0, #24]
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037ca:	6803      	ldr	r3, [r0, #0]
 80037cc:	4a31      	ldr	r2, [pc, #196]	@ (8003894 <UART_SetConfig+0x108>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d006      	beq.n	80037e0 <UART_SetConfig+0x54>
 80037d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037da:	f7fe ff01 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80037de:	e001      	b.n	80037e4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7fe ff0e 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e4:	69e3      	ldr	r3, [r4, #28]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ea:	d029      	beq.n	8003840 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ec:	2100      	movs	r1, #0
 80037ee:	1803      	adds	r3, r0, r0
 80037f0:	4149      	adcs	r1, r1
 80037f2:	181b      	adds	r3, r3, r0
 80037f4:	f141 0100 	adc.w	r1, r1, #0
 80037f8:	00c9      	lsls	r1, r1, #3
 80037fa:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1818      	adds	r0, r3, r0
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003808:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800380c:	f141 0100 	adc.w	r1, r1, #0
 8003810:	f7fd f9ca 	bl	8000ba8 <__aeabi_uldivmod>
 8003814:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <UART_SetConfig+0x10c>)
 8003816:	fba2 3100 	umull	r3, r1, r2, r0
 800381a:	0949      	lsrs	r1, r1, #5
 800381c:	2364      	movs	r3, #100	@ 0x64
 800381e:	fb03 0311 	mls	r3, r3, r1, r0
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	3332      	adds	r3, #50	@ 0x32
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003830:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	6821      	ldr	r1, [r4, #0]
 800383a:	4413      	add	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }
}
 800383e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003840:	2300      	movs	r3, #0
 8003842:	1802      	adds	r2, r0, r0
 8003844:	eb43 0103 	adc.w	r1, r3, r3
 8003848:	1812      	adds	r2, r2, r0
 800384a:	f141 0100 	adc.w	r1, r1, #0
 800384e:	00c9      	lsls	r1, r1, #3
 8003850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003854:	00d2      	lsls	r2, r2, #3
 8003856:	1810      	adds	r0, r2, r0
 8003858:	f141 0100 	adc.w	r1, r1, #0
 800385c:	6862      	ldr	r2, [r4, #4]
 800385e:	1892      	adds	r2, r2, r2
 8003860:	415b      	adcs	r3, r3
 8003862:	f7fd f9a1 	bl	8000ba8 <__aeabi_uldivmod>
 8003866:	4a0c      	ldr	r2, [pc, #48]	@ (8003898 <UART_SetConfig+0x10c>)
 8003868:	fba2 3100 	umull	r3, r1, r2, r0
 800386c:	0949      	lsrs	r1, r1, #5
 800386e:	2364      	movs	r3, #100	@ 0x64
 8003870:	fb03 0311 	mls	r3, r3, r1, r0
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	3332      	adds	r3, #50	@ 0x32
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	005a      	lsls	r2, r3, #1
 8003880:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003884:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	6821      	ldr	r1, [r4, #0]
 800388e:	4413      	add	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
 8003892:	e7d4      	b.n	800383e <UART_SetConfig+0xb2>
 8003894:	40011000 	.word	0x40011000
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <UART_WaitOnFlagUntilTimeout>:
{
 800389c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038a0:	b083      	sub	sp, #12
 80038a2:	4605      	mov	r5, r0
 80038a4:	460e      	mov	r6, r1
 80038a6:	4617      	mov	r7, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	681c      	ldr	r4, [r3, #0]
 80038b2:	ea36 0404 	bics.w	r4, r6, r4
 80038b6:	bf0c      	ite	eq
 80038b8:	2401      	moveq	r4, #1
 80038ba:	2400      	movne	r4, #0
 80038bc:	42bc      	cmp	r4, r7
 80038be:	d128      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80038c0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80038c4:	d0f3      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd ff7b 	bl	80017c0 <HAL_GetTick>
 80038ca:	eba0 0009 	sub.w	r0, r0, r9
 80038ce:	4540      	cmp	r0, r8
 80038d0:	d823      	bhi.n	800391a <UART_WaitOnFlagUntilTimeout+0x7e>
 80038d2:	f1b8 0f00 	cmp.w	r8, #0
 80038d6:	d022      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	f012 0f04 	tst.w	r2, #4
 80038e0:	d0e5      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x12>
 80038e2:	2e80      	cmp	r6, #128	@ 0x80
 80038e4:	d0e3      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x12>
 80038e6:	2e40      	cmp	r6, #64	@ 0x40
 80038e8:	d0e1      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	f012 0f08 	tst.w	r2, #8
 80038f0:	d0dd      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038f2:	2400      	movs	r4, #0
 80038f4:	9401      	str	r4, [sp, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	9201      	str	r2, [sp, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003900:	4628      	mov	r0, r5
 8003902:	f7ff fee5 	bl	80036d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003906:	2308      	movs	r3, #8
 8003908:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800390a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800390e:	2001      	movs	r0, #1
 8003910:	e000      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8003912:	2000      	movs	r0, #0
}
 8003914:	b003      	add	sp, #12
 8003916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800391a:	2003      	movs	r0, #3
 800391c:	e7fa      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x78>
 800391e:	2003      	movs	r0, #3
 8003920:	e7f8      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0x78>

08003922 <HAL_UART_Init>:
  if (huart == NULL)
 8003922:	b360      	cbz	r0, 800397e <HAL_UART_Init+0x5c>
{
 8003924:	b510      	push	{r4, lr}
 8003926:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003928:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800392c:	b313      	cbz	r3, 8003974 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800392e:	2324      	movs	r3, #36	@ 0x24
 8003930:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003934:	6822      	ldr	r2, [r4, #0]
 8003936:	68d3      	ldr	r3, [r2, #12]
 8003938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800393c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800393e:	4620      	mov	r0, r4
 8003940:	f7ff ff24 	bl	800378c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	6913      	ldr	r3, [r2, #16]
 8003948:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800394c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	6953      	ldr	r3, [r2, #20]
 8003952:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003956:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003958:	6822      	ldr	r2, [r4, #0]
 800395a:	68d3      	ldr	r3, [r2, #12]
 800395c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003960:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	2000      	movs	r0, #0
 8003964:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003966:	2320      	movs	r3, #32
 8003968:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800396c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003970:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003972:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003974:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003978:	f7fd fdb2 	bl	80014e0 <HAL_UART_MspInit>
 800397c:	e7d7      	b.n	800392e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
}
 8003980:	4770      	bx	lr

08003982 <HAL_UART_Transmit>:
{
 8003982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800398a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b20      	cmp	r3, #32
 8003992:	d156      	bne.n	8003a42 <HAL_UART_Transmit+0xc0>
 8003994:	4604      	mov	r4, r0
 8003996:	460d      	mov	r5, r1
 8003998:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800399a:	2900      	cmp	r1, #0
 800399c:	d055      	beq.n	8003a4a <HAL_UART_Transmit+0xc8>
 800399e:	b90a      	cbnz	r2, 80039a4 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80039a0:	2001      	movs	r0, #1
 80039a2:	e04f      	b.n	8003a44 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a8:	2321      	movs	r3, #33	@ 0x21
 80039aa:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80039ae:	f7fd ff07 	bl	80017c0 <HAL_GetTick>
 80039b2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80039b4:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039b8:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d002      	beq.n	80039ca <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80039c4:	f04f 0800 	mov.w	r8, #0
 80039c8:	e014      	b.n	80039f4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	b32b      	cbz	r3, 8003a1a <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80039ce:	f04f 0800 	mov.w	r8, #0
 80039d2:	e00f      	b.n	80039f4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80039d4:	2320      	movs	r3, #32
 80039d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	e032      	b.n	8003a44 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039de:	f838 3b02 	ldrh.w	r3, [r8], #2
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80039ea:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80039ec:	b292      	uxth	r2, r2
 80039ee:	3a01      	subs	r2, #1
 80039f0:	b292      	uxth	r2, r2
 80039f2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039f4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b193      	cbz	r3, 8003a20 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	9600      	str	r6, [sp, #0]
 80039fc:	463b      	mov	r3, r7
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ff4a 	bl	800389c <UART_WaitOnFlagUntilTimeout>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d1e3      	bne.n	80039d4 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003a0c:	2d00      	cmp	r5, #0
 8003a0e:	d0e6      	beq.n	80039de <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a10:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a18:	e7e7      	b.n	80039ea <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003a1a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003a1c:	2500      	movs	r5, #0
 8003a1e:	e7e9      	b.n	80039f4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a20:	9600      	str	r6, [sp, #0]
 8003a22:	463b      	mov	r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	2140      	movs	r1, #64	@ 0x40
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7ff ff37 	bl	800389c <UART_WaitOnFlagUntilTimeout>
 8003a2e:	b918      	cbnz	r0, 8003a38 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003a30:	2320      	movs	r3, #32
 8003a32:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003a36:	e005      	b.n	8003a44 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8003a3e:	2003      	movs	r0, #3
 8003a40:	e000      	b.n	8003a44 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8003a42:	2002      	movs	r0, #2
}
 8003a44:	b002      	add	sp, #8
 8003a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	e7fa      	b.n	8003a44 <HAL_UART_Transmit+0xc2>

08003a4e <HAL_UART_TxCpltCallback>:
}
 8003a4e:	4770      	bx	lr

08003a50 <UART_EndTransmit_IT>:
{
 8003a50:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a52:	6801      	ldr	r1, [r0, #0]
 8003a54:	68ca      	ldr	r2, [r1, #12]
 8003a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a5a:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003a62:	f7ff fff4 	bl	8003a4e <HAL_UART_TxCpltCallback>
}
 8003a66:	2000      	movs	r0, #0
 8003a68:	bd08      	pop	{r3, pc}

08003a6a <HAL_UART_RxCpltCallback>:
}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_ErrorCallback>:
}
 8003a6c:	4770      	bx	lr

08003a6e <UART_DMAAbortOnError>:
{
 8003a6e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a70:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a76:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8003a78:	f7ff fff8 	bl	8003a6c <HAL_UART_ErrorCallback>
}
 8003a7c:	bd08      	pop	{r3, pc}

08003a7e <HAL_UARTEx_RxEventCallback>:
}
 8003a7e:	4770      	bx	lr

08003a80 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a80:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b22      	cmp	r3, #34	@ 0x22
 8003a88:	d169      	bne.n	8003b5e <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8a:	6883      	ldr	r3, [r0, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a90:	d04f      	beq.n	8003b32 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a92:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a98:	d004      	beq.n	8003aa4 <UART_Receive_IT+0x24>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d156      	bne.n	8003b4c <UART_Receive_IT+0xcc>
 8003a9e:	6903      	ldr	r3, [r0, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d153      	bne.n	8003b4c <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aa4:	6803      	ldr	r3, [r0, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003aaa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003aac:	3301      	adds	r3, #1
 8003aae:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003ab0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d151      	bne.n	8003b62 <UART_Receive_IT+0xe2>
{
 8003abe:	b500      	push	{lr}
 8003ac0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac2:	6802      	ldr	r2, [r0, #0]
 8003ac4:	68d3      	ldr	r3, [r2, #12]
 8003ac6:	f023 0320 	bic.w	r3, r3, #32
 8003aca:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003acc:	6802      	ldr	r2, [r0, #0]
 8003ace:	68d3      	ldr	r3, [r2, #12]
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ad6:	6802      	ldr	r2, [r0, #0]
 8003ad8:	6953      	ldr	r3, [r2, #20]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d133      	bne.n	8003b58 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	2300      	movs	r3, #0
 8003af2:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	f102 030c 	add.w	r3, r2, #12
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	320c      	adds	r2, #12
 8003b04:	e842 3100 	strex	r1, r3, [r2]
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d1f3      	bne.n	8003af4 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f012 0f10 	tst.w	r2, #16
 8003b14:	d006      	beq.n	8003b24 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b16:	2200      	movs	r2, #0
 8003b18:	9201      	str	r2, [sp, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	9201      	str	r2, [sp, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b24:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003b26:	f7ff ffaa 	bl	8003a7e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003b2a:	2000      	movs	r0, #0
}
 8003b2c:	b003      	add	sp, #12
 8003b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b32:	6902      	ldr	r2, [r0, #16]
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d1ac      	bne.n	8003a92 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b38:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b3a:	6803      	ldr	r3, [r0, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003b44:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003b46:	3302      	adds	r3, #2
 8003b48:	6283      	str	r3, [r0, #40]	@ 0x28
 8003b4a:	e7b1      	b.n	8003ab0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b4c:	6803      	ldr	r3, [r0, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b54:	7013      	strb	r3, [r2, #0]
 8003b56:	e7a8      	b.n	8003aaa <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8003b58:	f7ff ff87 	bl	8003a6a <HAL_UART_RxCpltCallback>
 8003b5c:	e7e5      	b.n	8003b2a <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8003b5e:	2002      	movs	r0, #2
 8003b60:	4770      	bx	lr
    return HAL_OK;
 8003b62:	2000      	movs	r0, #0
}
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_UART_IRQHandler>:
{
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b6e:	6802      	ldr	r2, [r0, #0]
 8003b70:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b72:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b74:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8003b76:	f013 0f0f 	tst.w	r3, #15
 8003b7a:	d109      	bne.n	8003b90 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b7c:	f013 0f20 	tst.w	r3, #32
 8003b80:	d00c      	beq.n	8003b9c <HAL_UART_IRQHandler+0x34>
 8003b82:	f010 0f20 	tst.w	r0, #32
 8003b86:	d009      	beq.n	8003b9c <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7ff ff79 	bl	8003a80 <UART_Receive_IT>
      return;
 8003b8e:	e016      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b90:	f011 0101 	ands.w	r1, r1, #1
 8003b94:	d115      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b96:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8003b9a:	d112      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003b9e:	2901      	cmp	r1, #1
 8003ba0:	d079      	beq.n	8003c96 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ba2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ba6:	d003      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x48>
 8003ba8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003bac:	f040 8114 	bne.w	8003dd8 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bb0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_IRQHandler+0x56>
 8003bb6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003bba:	f040 8111 	bne.w	8003de0 <HAL_UART_IRQHandler+0x278>
}
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bc2:	f013 0f01 	tst.w	r3, #1
 8003bc6:	d006      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x6e>
 8003bc8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bce:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd6:	f013 0f04 	tst.w	r3, #4
 8003bda:	d004      	beq.n	8003be6 <HAL_UART_IRQHandler+0x7e>
 8003bdc:	b119      	cbz	r1, 8003be6 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bde:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003be0:	f042 0202 	orr.w	r2, r2, #2
 8003be4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be6:	f013 0f02 	tst.w	r3, #2
 8003bea:	d004      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x8e>
 8003bec:	b119      	cbz	r1, 8003bf6 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003bf0:	f042 0204 	orr.w	r2, r2, #4
 8003bf4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bf6:	f013 0f08 	tst.w	r3, #8
 8003bfa:	d007      	beq.n	8003c0c <HAL_UART_IRQHandler+0xa4>
 8003bfc:	f010 0f20 	tst.w	r0, #32
 8003c00:	d100      	bne.n	8003c04 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c02:	b119      	cbz	r1, 8003c0c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c04:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003c0e:	2a00      	cmp	r2, #0
 8003c10:	d0d5      	beq.n	8003bbe <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c12:	f013 0f20 	tst.w	r3, #32
 8003c16:	d002      	beq.n	8003c1e <HAL_UART_IRQHandler+0xb6>
 8003c18:	f010 0f20 	tst.w	r0, #32
 8003c1c:	d129      	bne.n	8003c72 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c26:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003c28:	f012 0f08 	tst.w	r2, #8
 8003c2c:	d100      	bne.n	8003c30 <HAL_UART_IRQHandler+0xc8>
 8003c2e:	b363      	cbz	r3, 8003c8a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7ff fd4d 	bl	80036d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003c3e:	d020      	beq.n	8003c82 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	f102 0314 	add.w	r3, r2, #20
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	3214      	adds	r2, #20
 8003c50:	e842 3100 	strex	r1, r3, [r2]
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d1f3      	bne.n	8003c40 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8003c58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c5a:	b173      	cbz	r3, 8003c7a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c5c:	4a62      	ldr	r2, [pc, #392]	@ (8003de8 <HAL_UART_IRQHandler+0x280>)
 8003c5e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c60:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003c62:	f7fd ff94 	bl	8001b8e <HAL_DMA_Abort_IT>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d0a9      	beq.n	8003bbe <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003c6c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003c6e:	4798      	blx	r3
 8003c70:	e7a5      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff ff04 	bl	8003a80 <UART_Receive_IT>
 8003c78:	e7d1      	b.n	8003c1e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f7ff fef6 	bl	8003a6c <HAL_UART_ErrorCallback>
 8003c80:	e79d      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7ff fef2 	bl	8003a6c <HAL_UART_ErrorCallback>
 8003c88:	e799      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7ff feee 	bl	8003a6c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8003c94:	e793      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c96:	f013 0f10 	tst.w	r3, #16
 8003c9a:	d082      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c9c:	f010 0f10 	tst.w	r0, #16
 8003ca0:	f43f af7f 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	6813      	ldr	r3, [r2, #0]
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6853      	ldr	r3, [r2, #4]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb2:	6953      	ldr	r3, [r2, #20]
 8003cb4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003cb8:	d052      	beq.n	8003d60 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cba:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f43f af7b 	beq.w	8003bbe <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cc8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	f67f af77 	bls.w	8003bbe <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd2:	69d3      	ldr	r3, [r2, #28]
 8003cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd8:	d037      	beq.n	8003d4a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cda:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f102 030c 	add.w	r3, r2, #12
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	320c      	adds	r2, #12
 8003cea:	e842 3100 	strex	r1, r3, [r2]
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d1f3      	bne.n	8003cda <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	f102 0314 	add.w	r3, r2, #20
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	3214      	adds	r2, #20
 8003d02:	e842 3100 	strex	r1, r3, [r2]
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d1f3      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	f102 0314 	add.w	r3, r2, #20
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	3214      	adds	r2, #20
 8003d1a:	e842 3100 	strex	r1, r3, [r2]
 8003d1e:	2900      	cmp	r1, #0
 8003d20:	d1f3      	bne.n	8003d0a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003d22:	2320      	movs	r3, #32
 8003d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	f102 030c 	add.w	r3, r2, #12
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	320c      	adds	r2, #12
 8003d3c:	e842 3100 	strex	r1, r3, [r2]
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d1f3      	bne.n	8003d2c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d44:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003d46:	f7fd fed8 	bl	8001afa <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d4e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003d50:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	1ac9      	subs	r1, r1, r3
 8003d56:	b289      	uxth	r1, r1
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff fe90 	bl	8003a7e <HAL_UARTEx_RxEventCallback>
      return;
 8003d5e:	e72e      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d60:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003d62:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	1ac9      	subs	r1, r1, r3
 8003d68:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003d6a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f43f af25 	beq.w	8003bbe <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003d74:	2900      	cmp	r1, #0
 8003d76:	f43f af22 	beq.w	8003bbe <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	f102 030c 	add.w	r3, r2, #12
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	320c      	adds	r2, #12
 8003d8a:	e842 3000 	strex	r0, r3, [r2]
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d1f3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	f102 0314 	add.w	r3, r2, #20
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	3214      	adds	r2, #20
 8003da2:	e842 3000 	strex	r0, r3, [r2]
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d1f3      	bne.n	8003d92 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8003daa:	2320      	movs	r3, #32
 8003dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db0:	2300      	movs	r3, #0
 8003db2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	f102 030c 	add.w	r3, r2, #12
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	320c      	adds	r2, #12
 8003dc4:	e842 3000 	strex	r0, r3, [r2]
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1f3      	bne.n	8003db4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7ff fe54 	bl	8003a7e <HAL_UARTEx_RxEventCallback>
      return;
 8003dd6:	e6f2      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff fca7 	bl	800372c <UART_Transmit_IT>
    return;
 8003dde:	e6ee      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff fe35 	bl	8003a50 <UART_EndTransmit_IT>
    return;
 8003de6:	e6ea      	b.n	8003bbe <HAL_UART_IRQHandler+0x56>
 8003de8:	08003a6f 	.word	0x08003a6f

08003dec <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <SDMMC_GetCmdError+0x30>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e20 <SDMMC_GetCmdError+0x34>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0a5b      	lsrs	r3, r3, #9
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003e00:	461a      	mov	r2, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b13a      	cbz	r2, 8003e16 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003e06:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003e08:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003e0c:	d0f8      	beq.n	8003e00 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e0e:	23c5      	movs	r3, #197	@ 0xc5
 8003e10:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8003e12:	2000      	movs	r0, #0
 8003e14:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003e16:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003e1a:	4770      	bx	lr
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <SDIO_Init>:
{
 8003e24:	b084      	sub	sp, #16
 8003e26:	f10d 0c04 	add.w	ip, sp, #4
 8003e2a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8003e32:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8003e34:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8003e36:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8003e38:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8003e3a:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8003e3c:	4313      	orrs	r3, r2
             Init.ClockDiv
 8003e3e:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8003e40:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e42:	6842      	ldr	r2, [r0, #4]
 8003e44:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8003e48:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	6043      	str	r3, [r0, #4]
}
 8003e50:	2000      	movs	r0, #0
 8003e52:	b004      	add	sp, #16
 8003e54:	4770      	bx	lr

08003e56 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8003e56:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8003e5a:	4770      	bx	lr

08003e5c <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8003e5c:	680b      	ldr	r3, [r1, #0]
 8003e5e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 8003e62:	2000      	movs	r0, #0
 8003e64:	4770      	bx	lr

08003e66 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003e66:	2303      	movs	r3, #3
 8003e68:	6003      	str	r3, [r0, #0]
}
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	4770      	bx	lr

08003e6e <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003e6e:	6800      	ldr	r0, [r0, #0]
}
 8003e70:	f000 0003 	and.w	r0, r0, #3
 8003e74:	4770      	bx	lr

08003e76 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8003e76:	680b      	ldr	r3, [r1, #0]
 8003e78:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e7a:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8003e7c:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e7e:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8003e80:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8003e82:	4313      	orrs	r3, r2
                       Command->CPSM);
 8003e84:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8003e86:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e88:	68c2      	ldr	r2, [r0, #12]
 8003e8a:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 8003e8e:	f022 020f 	bic.w	r2, r2, #15
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60c3      	str	r3, [r0, #12]
}
 8003e96:	2000      	movs	r0, #0
 8003e98:	4770      	bx	lr

08003e9a <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8003e9a:	6900      	ldr	r0, [r0, #16]
}
 8003e9c:	b2c0      	uxtb	r0, r0
 8003e9e:	4770      	bx	lr

08003ea0 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003ea0:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8003ea2:	5840      	ldr	r0, [r0, r1]
}  
 8003ea4:	4770      	bx	lr

08003ea6 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8003ea6:	680b      	ldr	r3, [r1, #0]
 8003ea8:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 8003eaa:	684b      	ldr	r3, [r1, #4]
 8003eac:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003eae:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8003eb0:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003eb2:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8003eb4:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8003eb6:	4313      	orrs	r3, r2
                       Data->DPSM);
 8003eb8:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8003eba:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ebc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8003ebe:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	4770      	bx	lr

08003eca <SDMMC_CmdGoIdleState>:
{
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003ed4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003ed6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ed8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ede:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ee0:	a901      	add	r1, sp, #4
 8003ee2:	f7ff ffc8 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f7ff ff80 	bl	8003dec <SDMMC_GetCmdError>
}
 8003eec:	b006      	add	sp, #24
 8003eee:	bd10      	pop	{r4, pc}

08003ef0 <SDMMC_GetCmdResp1>:
{
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ef6:	4b50      	ldr	r3, [pc, #320]	@ (8004038 <SDMMC_GetCmdResp1+0x148>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4950      	ldr	r1, [pc, #320]	@ (800403c <SDMMC_GetCmdResp1+0x14c>)
 8003efc:	fba1 1303 	umull	r1, r3, r1, r3
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8003f06:	4613      	mov	r3, r2
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d05d      	beq.n	8003fca <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8003f0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f10:	f013 0f45 	tst.w	r3, #69	@ 0x45
 8003f14:	d0f7      	beq.n	8003f06 <SDMMC_GetCmdResp1+0x16>
 8003f16:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003f1a:	d1f4      	bne.n	8003f06 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f1e:	f013 0f04 	tst.w	r3, #4
 8003f22:	d106      	bne.n	8003f32 <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f26:	f013 0f01 	tst.w	r3, #1
 8003f2a:	d005      	beq.n	8003f38 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f30:	e04d      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f32:	2004      	movs	r0, #4
 8003f34:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f36:	e04a      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f38:	23c5      	movs	r3, #197	@ 0xc5
 8003f3a:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff ffac 	bl	8003e9a <SDIO_GetCommandResponse>
 8003f42:	42a8      	cmp	r0, r5
 8003f44:	d001      	beq.n	8003f4a <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f46:	2001      	movs	r0, #1
 8003f48:	e041      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff ffa7 	bl	8003ea0 <SDIO_GetResponse>
 8003f52:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003f54:	483a      	ldr	r0, [pc, #232]	@ (8004040 <SDMMC_GetCmdResp1+0x150>)
 8003f56:	4018      	ands	r0, r3
 8003f58:	b3c8      	cbz	r0, 8003fce <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	db38      	blt.n	8003fd0 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f5e:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003f62:	d138      	bne.n	8003fd6 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f64:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003f68:	d137      	bne.n	8003fda <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f6a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003f6e:	d136      	bne.n	8003fde <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003f70:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8003f74:	d136      	bne.n	8003fe4 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f76:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8003f7a:	d136      	bne.n	8003fea <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f7c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003f80:	d136      	bne.n	8003ff0 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f82:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003f86:	d136      	bne.n	8003ff6 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f88:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003f8c:	d136      	bne.n	8003ffc <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f8e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8003f92:	d136      	bne.n	8004002 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f94:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003f98:	d136      	bne.n	8004008 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f9a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003f9e:	d136      	bne.n	800400e <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003fa0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003fa4:	d136      	bne.n	8004014 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003fa6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003faa:	d136      	bne.n	800401a <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003fac:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003fb0:	d136      	bne.n	8004020 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003fb2:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003fb6:	d136      	bne.n	8004026 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003fb8:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003fbc:	d136      	bne.n	800402c <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003fbe:	f013 0f08 	tst.w	r3, #8
 8003fc2:	d036      	beq.n	8004032 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003fc4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003fc8:	e001      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8003fca:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003fd0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003fd4:	e7fb      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003fd6:	2040      	movs	r0, #64	@ 0x40
 8003fd8:	e7f9      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003fda:	2080      	movs	r0, #128	@ 0x80
 8003fdc:	e7f7      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003fde:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003fe2:	e7f4      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003fe4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003fe8:	e7f1      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003fea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003fee:	e7ee      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003ff0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ff4:	e7eb      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ff6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003ffa:	e7e8      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ffc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004000:	e7e5      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004002:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004006:	e7e2      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004008:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800400c:	e7df      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800400e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004012:	e7dc      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004014:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004018:	e7d9      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800401a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800401e:	e7d6      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004020:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004024:	e7d3      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004026:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800402a:	e7d0      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 800402c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004030:	e7cd      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004032:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004036:	e7ca      	b.n	8003fce <SDMMC_GetCmdResp1+0xde>
 8004038:	20000000 	.word	0x20000000
 800403c:	10624dd3 	.word	0x10624dd3
 8004040:	fdffe008 	.word	0xfdffe008

08004044 <SDMMC_CmdBlockLength>:
{
 8004044:	b530      	push	{r4, r5, lr}
 8004046:	b087      	sub	sp, #28
 8004048:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800404a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800404c:	2510      	movs	r5, #16
 800404e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004050:	2340      	movs	r3, #64	@ 0x40
 8004052:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004054:	2300      	movs	r3, #0
 8004056:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800405c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800405e:	a901      	add	r1, sp, #4
 8004060:	f7ff ff09 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004068:	4629      	mov	r1, r5
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff ff40 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 8004070:	b007      	add	sp, #28
 8004072:	bd30      	pop	{r4, r5, pc}

08004074 <SDMMC_CmdReadSingleBlock>:
{
 8004074:	b530      	push	{r4, r5, lr}
 8004076:	b087      	sub	sp, #28
 8004078:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800407a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800407c:	2511      	movs	r5, #17
 800407e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004080:	2340      	movs	r3, #64	@ 0x40
 8004082:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004084:	2300      	movs	r3, #0
 8004086:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800408c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800408e:	a901      	add	r1, sp, #4
 8004090:	f7ff fef1 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004098:	4629      	mov	r1, r5
 800409a:	4620      	mov	r0, r4
 800409c:	f7ff ff28 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 80040a0:	b007      	add	sp, #28
 80040a2:	bd30      	pop	{r4, r5, pc}

080040a4 <SDMMC_CmdReadMultiBlock>:
{
 80040a4:	b530      	push	{r4, r5, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80040aa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80040ac:	2512      	movs	r5, #18
 80040ae:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040b0:	2340      	movs	r3, #64	@ 0x40
 80040b2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040b4:	2300      	movs	r3, #0
 80040b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040bc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040be:	a901      	add	r1, sp, #4
 80040c0:	f7ff fed9 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80040c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c8:	4629      	mov	r1, r5
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff ff10 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 80040d0:	b007      	add	sp, #28
 80040d2:	bd30      	pop	{r4, r5, pc}

080040d4 <SDMMC_CmdWriteSingleBlock>:
{
 80040d4:	b530      	push	{r4, r5, lr}
 80040d6:	b087      	sub	sp, #28
 80040d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80040da:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80040dc:	2518      	movs	r5, #24
 80040de:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040e0:	2340      	movs	r3, #64	@ 0x40
 80040e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040e4:	2300      	movs	r3, #0
 80040e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ec:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040ee:	a901      	add	r1, sp, #4
 80040f0:	f7ff fec1 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80040f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f8:	4629      	mov	r1, r5
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7ff fef8 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 8004100:	b007      	add	sp, #28
 8004102:	bd30      	pop	{r4, r5, pc}

08004104 <SDMMC_CmdWriteMultiBlock>:
{
 8004104:	b530      	push	{r4, r5, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800410a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800410c:	2519      	movs	r5, #25
 800410e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004110:	2340      	movs	r3, #64	@ 0x40
 8004112:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004114:	2300      	movs	r3, #0
 8004116:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800411e:	a901      	add	r1, sp, #4
 8004120:	f7ff fea9 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004128:	4629      	mov	r1, r5
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff fee0 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 8004130:	b007      	add	sp, #28
 8004132:	bd30      	pop	{r4, r5, pc}

08004134 <SDMMC_CmdStopTransfer>:
{
 8004134:	b530      	push	{r4, r5, lr}
 8004136:	b087      	sub	sp, #28
 8004138:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800413e:	250c      	movs	r5, #12
 8004140:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004142:	2240      	movs	r2, #64	@ 0x40
 8004144:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004146:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800414c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800414e:	a901      	add	r1, sp, #4
 8004150:	f7ff fe91 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004154:	4a03      	ldr	r2, [pc, #12]	@ (8004164 <SDMMC_CmdStopTransfer+0x30>)
 8004156:	4629      	mov	r1, r5
 8004158:	4620      	mov	r0, r4
 800415a:	f7ff fec9 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 800415e:	b007      	add	sp, #28
 8004160:	bd30      	pop	{r4, r5, pc}
 8004162:	bf00      	nop
 8004164:	05f5e100 	.word	0x05f5e100

08004168 <SDMMC_CmdSelDesel>:
{
 8004168:	b530      	push	{r4, r5, lr}
 800416a:	b087      	sub	sp, #28
 800416c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800416e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004170:	2507      	movs	r5, #7
 8004172:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004174:	2340      	movs	r3, #64	@ 0x40
 8004176:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004178:	2300      	movs	r3, #0
 800417a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800417c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004180:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004182:	a901      	add	r1, sp, #4
 8004184:	f7ff fe77 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418c:	4629      	mov	r1, r5
 800418e:	4620      	mov	r0, r4
 8004190:	f7ff feae 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 8004194:	b007      	add	sp, #28
 8004196:	bd30      	pop	{r4, r5, pc}

08004198 <SDMMC_CmdAppCommand>:
{
 8004198:	b530      	push	{r4, r5, lr}
 800419a:	b087      	sub	sp, #28
 800419c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800419e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80041a0:	2537      	movs	r5, #55	@ 0x37
 80041a2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041a4:	2340      	movs	r3, #64	@ 0x40
 80041a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041a8:	2300      	movs	r3, #0
 80041aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041b0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041b2:	a901      	add	r1, sp, #4
 80041b4:	f7ff fe5f 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80041b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041bc:	4629      	mov	r1, r5
 80041be:	4620      	mov	r0, r4
 80041c0:	f7ff fe96 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 80041c4:	b007      	add	sp, #28
 80041c6:	bd30      	pop	{r4, r5, pc}

080041c8 <SDMMC_CmdBusWidth>:
{
 80041c8:	b530      	push	{r4, r5, lr}
 80041ca:	b087      	sub	sp, #28
 80041cc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80041ce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80041d0:	2506      	movs	r5, #6
 80041d2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041d4:	2340      	movs	r3, #64	@ 0x40
 80041d6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041d8:	2300      	movs	r3, #0
 80041da:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041e0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041e2:	a901      	add	r1, sp, #4
 80041e4:	f7ff fe47 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4629      	mov	r1, r5
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7ff fe7e 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 80041f4:	b007      	add	sp, #28
 80041f6:	bd30      	pop	{r4, r5, pc}

080041f8 <SDMMC_CmdSendSCR>:
{
 80041f8:	b530      	push	{r4, r5, lr}
 80041fa:	b087      	sub	sp, #28
 80041fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004202:	2533      	movs	r5, #51	@ 0x33
 8004204:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004206:	2240      	movs	r2, #64	@ 0x40
 8004208:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800420a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800420c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004210:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004212:	a901      	add	r1, sp, #4
 8004214:	f7ff fe2f 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421c:	4629      	mov	r1, r5
 800421e:	4620      	mov	r0, r4
 8004220:	f7ff fe66 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 8004224:	b007      	add	sp, #28
 8004226:	bd30      	pop	{r4, r5, pc}

08004228 <SDMMC_CmdSendStatus>:
{
 8004228:	b530      	push	{r4, r5, lr}
 800422a:	b087      	sub	sp, #28
 800422c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800422e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004230:	250d      	movs	r5, #13
 8004232:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004234:	2340      	movs	r3, #64	@ 0x40
 8004236:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004238:	2300      	movs	r3, #0
 800423a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800423c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004240:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004242:	a901      	add	r1, sp, #4
 8004244:	f7ff fe17 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424c:	4629      	mov	r1, r5
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff fe4e 	bl	8003ef0 <SDMMC_GetCmdResp1>
}
 8004254:	b007      	add	sp, #28
 8004256:	bd30      	pop	{r4, r5, pc}

08004258 <SDMMC_GetCmdResp2>:
{
 8004258:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800425a:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <SDMMC_GetCmdResp2+0x54>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <SDMMC_GetCmdResp2+0x58>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800426e:	461a      	mov	r2, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b1ba      	cbz	r2, 80042a4 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8004274:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004276:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800427a:	d0f8      	beq.n	800426e <SDMMC_GetCmdResp2+0x16>
 800427c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004280:	d1f5      	bne.n	800426e <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004282:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004284:	f013 0f04 	tst.w	r3, #4
 8004288:	d106      	bne.n	8004298 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800428a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800428c:	f010 0001 	ands.w	r0, r0, #1
 8004290:	d105      	bne.n	800429e <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004292:	23c5      	movs	r3, #197	@ 0xc5
 8004294:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004296:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004298:	2004      	movs	r0, #4
 800429a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800429c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800429e:	2001      	movs	r0, #1
 80042a0:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042a2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80042a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000
 80042b0:	10624dd3 	.word	0x10624dd3

080042b4 <SDMMC_CmdSendCID>:
{
 80042b4:	b510      	push	{r4, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80042be:	2202      	movs	r2, #2
 80042c0:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80042c2:	22c0      	movs	r2, #192	@ 0xc0
 80042c4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042c6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042cc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ce:	a901      	add	r1, sp, #4
 80042d0:	f7ff fdd1 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff ffbf 	bl	8004258 <SDMMC_GetCmdResp2>
}
 80042da:	b006      	add	sp, #24
 80042dc:	bd10      	pop	{r4, pc}

080042de <SDMMC_CmdSendCSD>:
{
 80042de:	b510      	push	{r4, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80042e4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80042e6:	2309      	movs	r3, #9
 80042e8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80042ea:	23c0      	movs	r3, #192	@ 0xc0
 80042ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042ee:	2300      	movs	r3, #0
 80042f0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042f6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042f8:	a901      	add	r1, sp, #4
 80042fa:	f7ff fdbc 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff ffaa 	bl	8004258 <SDMMC_GetCmdResp2>
}
 8004304:	b006      	add	sp, #24
 8004306:	bd10      	pop	{r4, pc}

08004308 <SDMMC_GetCmdResp3>:
{
 8004308:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800430a:	4b10      	ldr	r3, [pc, #64]	@ (800434c <SDMMC_GetCmdResp3+0x44>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a10      	ldr	r2, [pc, #64]	@ (8004350 <SDMMC_GetCmdResp3+0x48>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	0a5b      	lsrs	r3, r3, #9
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800431e:	461a      	mov	r2, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b182      	cbz	r2, 8004346 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8004324:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004326:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800432a:	d0f8      	beq.n	800431e <SDMMC_GetCmdResp3+0x16>
 800432c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004330:	d1f5      	bne.n	800431e <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004332:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004334:	f010 0004 	ands.w	r0, r0, #4
 8004338:	d102      	bne.n	8004340 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800433a:	23c5      	movs	r3, #197	@ 0xc5
 800433c:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800433e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004340:	2004      	movs	r0, #4
 8004342:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004344:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004346:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800434a:	4770      	bx	lr
 800434c:	20000000 	.word	0x20000000
 8004350:	10624dd3 	.word	0x10624dd3

08004354 <SDMMC_CmdAppOperCommand>:
{
 8004354:	b510      	push	{r4, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800435a:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800435e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004362:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004364:	2329      	movs	r3, #41	@ 0x29
 8004366:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004368:	2340      	movs	r3, #64	@ 0x40
 800436a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800436c:	2300      	movs	r3, #0
 800436e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004374:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004376:	a901      	add	r1, sp, #4
 8004378:	f7ff fd7d 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ffc3 	bl	8004308 <SDMMC_GetCmdResp3>
}
 8004382:	b006      	add	sp, #24
 8004384:	bd10      	pop	{r4, pc}
	...

08004388 <SDMMC_GetCmdResp6>:
{
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	460e      	mov	r6, r1
 800438e:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004390:	4b23      	ldr	r3, [pc, #140]	@ (8004420 <SDMMC_GetCmdResp6+0x98>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a23      	ldr	r2, [pc, #140]	@ (8004424 <SDMMC_GetCmdResp6+0x9c>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a5b      	lsrs	r3, r3, #9
 800439c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80043a4:	461a      	mov	r2, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b38a      	cbz	r2, 800440e <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 80043aa:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043ac:	f014 0f45 	tst.w	r4, #69	@ 0x45
 80043b0:	d0f8      	beq.n	80043a4 <SDMMC_GetCmdResp6+0x1c>
 80043b2:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80043b6:	d1f5      	bne.n	80043a4 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043b8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80043ba:	f013 0f04 	tst.w	r3, #4
 80043be:	d106      	bne.n	80043ce <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043c0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80043c2:	f013 0f01 	tst.w	r3, #1
 80043c6:	d005      	beq.n	80043d4 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043c8:	2001      	movs	r0, #1
 80043ca:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043cc:	e021      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043ce:	2004      	movs	r0, #4
 80043d0:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043d2:	e01e      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7ff fd60 	bl	8003e9a <SDIO_GetCommandResponse>
 80043da:	42b0      	cmp	r0, r6
 80043dc:	d001      	beq.n	80043e2 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043de:	2001      	movs	r0, #1
 80043e0:	e017      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043e2:	23c5      	movs	r3, #197	@ 0xc5
 80043e4:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043e6:	2100      	movs	r1, #0
 80043e8:	4628      	mov	r0, r5
 80043ea:	f7ff fd59 	bl	8003ea0 <SDIO_GetResponse>
 80043ee:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80043f0:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 80043f4:	d008      	beq.n	8004408 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80043f6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80043fa:	d10b      	bne.n	8004414 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80043fc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004400:	d00b      	beq.n	800441a <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004402:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004406:	e004      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800440c:	e001      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800440e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004414:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004418:	e7fb      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800441a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800441e:	e7f8      	b.n	8004412 <SDMMC_GetCmdResp6+0x8a>
 8004420:	20000000 	.word	0x20000000
 8004424:	10624dd3 	.word	0x10624dd3

08004428 <SDMMC_CmdSetRelAdd>:
{
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	4604      	mov	r4, r0
 800442e:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004434:	2603      	movs	r6, #3
 8004436:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004438:	2240      	movs	r2, #64	@ 0x40
 800443a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800443c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800443e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004442:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004444:	a901      	add	r1, sp, #4
 8004446:	f7ff fd16 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800444a:	462a      	mov	r2, r5
 800444c:	4631      	mov	r1, r6
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ff9a 	bl	8004388 <SDMMC_GetCmdResp6>
}
 8004454:	b006      	add	sp, #24
 8004456:	bd70      	pop	{r4, r5, r6, pc}

08004458 <SDMMC_GetCmdResp7>:
{
 8004458:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800445a:	4b16      	ldr	r3, [pc, #88]	@ (80044b4 <SDMMC_GetCmdResp7+0x5c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a16      	ldr	r2, [pc, #88]	@ (80044b8 <SDMMC_GetCmdResp7+0x60>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800446e:	461a      	mov	r2, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b1e2      	cbz	r2, 80044ae <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004474:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004476:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800447a:	d0f8      	beq.n	800446e <SDMMC_GetCmdResp7+0x16>
 800447c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004480:	d1f5      	bne.n	800446e <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004482:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004484:	f013 0f04 	tst.w	r3, #4
 8004488:	d10b      	bne.n	80044a2 <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800448a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800448c:	f013 0301 	ands.w	r3, r3, #1
 8004490:	d10a      	bne.n	80044a8 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004492:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004494:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8004498:	d00b      	beq.n	80044b2 <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800449e:	4618      	mov	r0, r3
 80044a0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044a2:	2004      	movs	r0, #4
 80044a4:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044a6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044a8:	2001      	movs	r0, #1
 80044aa:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044ac:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80044ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80044b2:	4770      	bx	lr
 80044b4:	20000000 	.word	0x20000000
 80044b8:	10624dd3 	.word	0x10624dd3

080044bc <SDMMC_CmdOperCond>:
{
 80044bc:	b510      	push	{r4, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80044c2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80044c6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80044c8:	2308      	movs	r3, #8
 80044ca:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044cc:	2340      	movs	r3, #64	@ 0x40
 80044ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044d0:	2300      	movs	r3, #0
 80044d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044d8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044da:	a901      	add	r1, sp, #4
 80044dc:	f7ff fccb 	bl	8003e76 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7ff ffb9 	bl	8004458 <SDMMC_GetCmdResp7>
}
 80044e6:	b006      	add	sp, #24
 80044e8:	bd10      	pop	{r4, pc}
	...

080044ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80044ec:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80044ee:	4903      	ldr	r1, [pc, #12]	@ (80044fc <MX_FATFS_Init+0x10>)
 80044f0:	4803      	ldr	r0, [pc, #12]	@ (8004500 <MX_FATFS_Init+0x14>)
 80044f2:	f000 f9c9 	bl	8004888 <FATFS_LinkDriver>
 80044f6:	4b03      	ldr	r3, [pc, #12]	@ (8004504 <MX_FATFS_Init+0x18>)
 80044f8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80044fa:	bd08      	pop	{r3, pc}
 80044fc:	200003d4 	.word	0x200003d4
 8004500:	08009c40 	.word	0x08009c40
 8004504:	200003d8 	.word	0x200003d8

08004508 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004508:	b508      	push	{r3, lr}
 800450a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800450c:	460a      	mov	r2, r1
 800450e:	4601      	mov	r1, r0
 8004510:	4802      	ldr	r0, [pc, #8]	@ (800451c <BSP_SD_ReadBlocks_DMA+0x14>)
 8004512:	f7fe fa33 	bl	800297c <HAL_SD_ReadBlocks_DMA>
 8004516:	b100      	cbz	r0, 800451a <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8004518:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800451a:	bd08      	pop	{r3, pc}
 800451c:	20000300 	.word	0x20000300

08004520 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004520:	b508      	push	{r3, lr}
 8004522:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004524:	460a      	mov	r2, r1
 8004526:	4601      	mov	r1, r0
 8004528:	4802      	ldr	r0, [pc, #8]	@ (8004534 <BSP_SD_WriteBlocks_DMA+0x14>)
 800452a:	f7fe fac3 	bl	8002ab4 <HAL_SD_WriteBlocks_DMA>
 800452e:	b100      	cbz	r0, 8004532 <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8004530:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8004532:	bd08      	pop	{r3, pc}
 8004534:	20000300 	.word	0x20000300

08004538 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004538:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800453a:	4803      	ldr	r0, [pc, #12]	@ (8004548 <BSP_SD_GetCardState+0x10>)
 800453c:	f7fe fdbc 	bl	80030b8 <HAL_SD_GetCardState>
}
 8004540:	3804      	subs	r0, #4
 8004542:	bf18      	it	ne
 8004544:	2001      	movne	r0, #1
 8004546:	bd08      	pop	{r3, pc}
 8004548:	20000300 	.word	0x20000300

0800454c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800454c:	b508      	push	{r3, lr}
 800454e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004550:	4801      	ldr	r0, [pc, #4]	@ (8004558 <BSP_SD_GetCardInfo+0xc>)
 8004552:	f7fe fd3e 	bl	8002fd2 <HAL_SD_GetCardInfo>
}
 8004556:	bd08      	pop	{r3, pc}
 8004558:	20000300 	.word	0x20000300

0800455c <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 800455c:	4770      	bx	lr

0800455e <HAL_SD_AbortCallback>:
{
 800455e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8004560:	f7ff fffc 	bl	800455c <BSP_SD_AbortCallback>
}
 8004564:	bd08      	pop	{r3, pc}

08004566 <HAL_SD_TxCpltCallback>:
{
 8004566:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8004568:	f000 f940 	bl	80047ec <BSP_SD_WriteCpltCallback>
}
 800456c:	bd08      	pop	{r3, pc}

0800456e <HAL_SD_RxCpltCallback>:
{
 800456e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8004570:	f000 f94e 	bl	8004810 <BSP_SD_ReadCpltCallback>
}
 8004574:	bd08      	pop	{r3, pc}

08004576 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004576:	b500      	push	{lr}
 8004578:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800457a:	2301      	movs	r3, #1
 800457c:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004580:	f000 f824 	bl	80045cc <BSP_PlatformIsDetected>
 8004584:	b910      	cbnz	r0, 800458c <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8004586:	2300      	movs	r3, #0
 8004588:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800458c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004590:	b003      	add	sp, #12
 8004592:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004598 <BSP_SD_Init>:
{
 8004598:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800459a:	f7ff ffec 	bl	8004576 <BSP_SD_IsDetected>
 800459e:	2801      	cmp	r0, #1
 80045a0:	d002      	beq.n	80045a8 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 80045a2:	2501      	movs	r5, #1
}
 80045a4:	4628      	mov	r0, r5
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 80045aa:	4807      	ldr	r0, [pc, #28]	@ (80045c8 <BSP_SD_Init+0x30>)
 80045ac:	f7fe fcf6 	bl	8002f9c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80045b0:	4605      	mov	r5, r0
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d1f6      	bne.n	80045a4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80045b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80045ba:	4803      	ldr	r0, [pc, #12]	@ (80045c8 <BSP_SD_Init+0x30>)
 80045bc:	f7fe fd1c 	bl	8002ff8 <HAL_SD_ConfigWideBusOperation>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d0ef      	beq.n	80045a4 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80045c4:	4625      	mov	r5, r4
 80045c6:	e7ed      	b.n	80045a4 <BSP_SD_Init+0xc>
 80045c8:	20000300 	.word	0x20000300

080045cc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80045cc:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80045ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045d2:	4804      	ldr	r0, [pc, #16]	@ (80045e4 <BSP_PlatformIsDetected+0x18>)
 80045d4:	f7fd fcd4 	bl	8001f80 <HAL_GPIO_ReadPin>
 80045d8:	b908      	cbnz	r0, 80045de <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 80045da:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80045dc:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 80045de:	2000      	movs	r0, #0
 80045e0:	e7fc      	b.n	80045dc <BSP_PlatformIsDetected+0x10>
 80045e2:	bf00      	nop
 80045e4:	40020000 	.word	0x40020000

080045e8 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80045e8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80045ea:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <SD_CheckStatus+0x20>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80045f0:	f7ff ffa2 	bl	8004538 <BSP_SD_GetCardState>
 80045f4:	b920      	cbnz	r0, 8004600 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 80045f6:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <SD_CheckStatus+0x20>)
 80045f8:	7813      	ldrb	r3, [r2, #0]
 80045fa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80045fe:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8004600:	4b01      	ldr	r3, [pc, #4]	@ (8004608 <SD_CheckStatus+0x20>)
 8004602:	7818      	ldrb	r0, [r3, #0]
}
 8004604:	bd08      	pop	{r3, pc}
 8004606:	bf00      	nop
 8004608:	2000000c 	.word	0x2000000c

0800460c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800460c:	b510      	push	{r4, lr}
 800460e:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8004610:	4b16      	ldr	r3, [pc, #88]	@ (800466c <SD_initialize+0x60>)
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8004616:	f000 f95b 	bl	80048d0 <osKernelGetState>
 800461a:	2802      	cmp	r0, #2
 800461c:	d002      	beq.n	8004624 <SD_initialize+0x18>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 800461e:	4b13      	ldr	r3, [pc, #76]	@ (800466c <SD_initialize+0x60>)
 8004620:	7818      	ldrb	r0, [r3, #0]
}
 8004622:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 8004624:	f7ff ffb8 	bl	8004598 <BSP_SD_Init>
 8004628:	b188      	cbz	r0, 800464e <SD_initialize+0x42>
    if (Stat != STA_NOINIT)
 800462a:	4b10      	ldr	r3, [pc, #64]	@ (800466c <SD_initialize+0x60>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d0f4      	beq.n	800461e <SD_initialize+0x12>
      if (SDQueueID == NULL)
 8004634:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <SD_initialize+0x64>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b17b      	cbz	r3, 800465a <SD_initialize+0x4e>
      if (SDQueueID == NULL)
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <SD_initialize+0x64>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ed      	bne.n	800461e <SD_initialize+0x12>
        Stat |= STA_NOINIT;
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <SD_initialize+0x60>)
 8004644:	7813      	ldrb	r3, [r2, #0]
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	7013      	strb	r3, [r2, #0]
 800464c:	e7e7      	b.n	800461e <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff ffca 	bl	80045e8 <SD_CheckStatus>
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <SD_initialize+0x60>)
 8004656:	7018      	strb	r0, [r3, #0]
 8004658:	e7e7      	b.n	800462a <SD_initialize+0x1e>
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800465a:	2200      	movs	r2, #0
 800465c:	2102      	movs	r1, #2
 800465e:	200a      	movs	r0, #10
 8004660:	f000 fa79 	bl	8004b56 <osMessageQueueNew>
 8004664:	4b02      	ldr	r3, [pc, #8]	@ (8004670 <SD_initialize+0x64>)
 8004666:	6018      	str	r0, [r3, #0]
 8004668:	e7e7      	b.n	800463a <SD_initialize+0x2e>
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c
 8004670:	200003dc 	.word	0x200003dc

08004674 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004674:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8004676:	f7ff ffb7 	bl	80045e8 <SD_CheckStatus>
}
 800467a:	bd08      	pop	{r3, pc}

0800467c <SD_CheckStatusWithTimeout>:
{
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4605      	mov	r5, r0
  timer = osKernelGetTickCount();
 8004680:	f000 f954 	bl	800492c <osKernelGetTickCount>
 8004684:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 8004686:	f000 f951 	bl	800492c <osKernelGetTickCount>
 800468a:	1b00      	subs	r0, r0, r4
 800468c:	42a8      	cmp	r0, r5
 800468e:	d205      	bcs.n	800469c <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004690:	f7ff ff52 	bl	8004538 <BSP_SD_GetCardState>
 8004694:	2800      	cmp	r0, #0
 8004696:	d1f6      	bne.n	8004686 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8004698:	2000      	movs	r0, #0
 800469a:	e001      	b.n	80046a0 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800469c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080046a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	460c      	mov	r4, r1
 80046aa:	4615      	mov	r5, r2
 80046ac:	461e      	mov	r6, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80046ae:	f247 5030 	movw	r0, #30000	@ 0x7530
 80046b2:	f7ff ffe3 	bl	800467c <SD_CheckStatusWithTimeout>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	db28      	blt.n	800470c <SD_read+0x68>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80046ba:	4632      	mov	r2, r6
 80046bc:	4629      	mov	r1, r5
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff ff22 	bl	8004508 <BSP_SD_ReadBlocks_DMA>

    if (ret == MSD_OK) {
 80046c4:	b108      	cbz	r0, 80046ca <SD_read+0x26>
  DRESULT res = RES_ERROR;
 80046c6:	2001      	movs	r0, #1
 80046c8:	e021      	b.n	800470e <SD_read+0x6a>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80046ca:	f247 5330 	movw	r3, #30000	@ 0x7530
 80046ce:	2200      	movs	r2, #0
 80046d0:	f10d 0106 	add.w	r1, sp, #6
 80046d4:	4810      	ldr	r0, [pc, #64]	@ (8004718 <SD_read+0x74>)
 80046d6:	6800      	ldr	r0, [r0, #0]
 80046d8:	f000 faca 	bl	8004c70 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80046dc:	b9c8      	cbnz	r0, 8004712 <SD_read+0x6e>
 80046de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <SD_read+0x46>
  DRESULT res = RES_ERROR;
 80046e6:	2001      	movs	r0, #1
 80046e8:	e011      	b.n	800470e <SD_read+0x6a>
          {
            timer = osKernelGetTickCount();
 80046ea:	f000 f91f 	bl	800492c <osKernelGetTickCount>
 80046ee:	4604      	mov	r4, r0
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80046f0:	f000 f91c 	bl	800492c <osKernelGetTickCount>
 80046f4:	1b00      	subs	r0, r0, r4
 80046f6:	f247 532f 	movw	r3, #29999	@ 0x752f
 80046fa:	4298      	cmp	r0, r3
 80046fc:	d804      	bhi.n	8004708 <SD_read+0x64>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80046fe:	f7ff ff1b 	bl	8004538 <BSP_SD_GetCardState>
 8004702:	2800      	cmp	r0, #0
 8004704:	d1f4      	bne.n	80046f0 <SD_read+0x4c>
 8004706:	e002      	b.n	800470e <SD_read+0x6a>
  DRESULT res = RES_ERROR;
 8004708:	2001      	movs	r0, #1
 800470a:	e000      	b.n	800470e <SD_read+0x6a>
    return res;
 800470c:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800470e:	b002      	add	sp, #8
 8004710:	bd70      	pop	{r4, r5, r6, pc}
  DRESULT res = RES_ERROR;
 8004712:	2001      	movs	r0, #1
 8004714:	e7fb      	b.n	800470e <SD_read+0x6a>
 8004716:	bf00      	nop
 8004718:	200003dc 	.word	0x200003dc

0800471c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	460c      	mov	r4, r1
 8004722:	4615      	mov	r5, r2
 8004724:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004726:	f247 5030 	movw	r0, #30000	@ 0x7530
 800472a:	f7ff ffa7 	bl	800467c <SD_CheckStatusWithTimeout>
 800472e:	2800      	cmp	r0, #0
 8004730:	db28      	blt.n	8004784 <SD_write+0x68>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004732:	4632      	mov	r2, r6
 8004734:	4629      	mov	r1, r5
 8004736:	4620      	mov	r0, r4
 8004738:	f7ff fef2 	bl	8004520 <BSP_SD_WriteBlocks_DMA>
 800473c:	b108      	cbz	r0, 8004742 <SD_write+0x26>
  DRESULT res = RES_ERROR;
 800473e:	2001      	movs	r0, #1
 8004740:	e021      	b.n	8004786 <SD_write+0x6a>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8004742:	f247 5330 	movw	r3, #30000	@ 0x7530
 8004746:	2200      	movs	r2, #0
 8004748:	f10d 0106 	add.w	r1, sp, #6
 800474c:	4810      	ldr	r0, [pc, #64]	@ (8004790 <SD_write+0x74>)
 800474e:	6800      	ldr	r0, [r0, #0]
 8004750:	f000 fa8e 	bl	8004c70 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8004754:	b9c8      	cbnz	r0, 800478a <SD_write+0x6e>
 8004756:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d001      	beq.n	8004762 <SD_write+0x46>
  DRESULT res = RES_ERROR;
 800475e:	2001      	movs	r0, #1
 8004760:	e011      	b.n	8004786 <SD_write+0x6a>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8004762:	f000 f8e3 	bl	800492c <osKernelGetTickCount>
 8004766:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8004768:	f000 f8e0 	bl	800492c <osKernelGetTickCount>
 800476c:	1b00      	subs	r0, r0, r4
 800476e:	f247 532f 	movw	r3, #29999	@ 0x752f
 8004772:	4298      	cmp	r0, r3
 8004774:	d804      	bhi.n	8004780 <SD_write+0x64>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004776:	f7ff fedf 	bl	8004538 <BSP_SD_GetCardState>
 800477a:	2800      	cmp	r0, #0
 800477c:	d1f4      	bne.n	8004768 <SD_write+0x4c>
 800477e:	e002      	b.n	8004786 <SD_write+0x6a>
  DRESULT res = RES_ERROR;
 8004780:	2001      	movs	r0, #1
 8004782:	e000      	b.n	8004786 <SD_write+0x6a>
    return res;
 8004784:	2001      	movs	r0, #1

  }
#endif

  return res;
}
 8004786:	b002      	add	sp, #8
 8004788:	bd70      	pop	{r4, r5, r6, pc}
  DRESULT res = RES_ERROR;
 800478a:	2001      	movs	r0, #1
 800478c:	e7fb      	b.n	8004786 <SD_write+0x6a>
 800478e:	bf00      	nop
 8004790:	200003dc 	.word	0x200003dc

08004794 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004798:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <SD_ioctl+0x54>)
 800479a:	7818      	ldrb	r0, [r3, #0]
 800479c:	f010 0401 	ands.w	r4, r0, #1
 80047a0:	d11b      	bne.n	80047da <SD_ioctl+0x46>
 80047a2:	4615      	mov	r5, r2

  switch (cmd)
 80047a4:	2903      	cmp	r1, #3
 80047a6:	d81c      	bhi.n	80047e2 <SD_ioctl+0x4e>
 80047a8:	e8df f001 	tbb	[pc, r1]
 80047ac:	100a0402 	.word	0x100a0402
 80047b0:	460c      	mov	r4, r1
 80047b2:	e013      	b.n	80047dc <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80047b4:	4668      	mov	r0, sp
 80047b6:	f7ff fec9 	bl	800454c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80047ba:	9b06      	ldr	r3, [sp, #24]
 80047bc:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80047be:	e00d      	b.n	80047dc <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80047c0:	4668      	mov	r0, sp
 80047c2:	f7ff fec3 	bl	800454c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80047c6:	9b07      	ldr	r3, [sp, #28]
 80047c8:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 80047ca:	e007      	b.n	80047dc <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80047cc:	4668      	mov	r0, sp
 80047ce:	f7ff febd 	bl	800454c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80047d2:	9b07      	ldr	r3, [sp, #28]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80047d8:	e000      	b.n	80047dc <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047da:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80047dc:	4620      	mov	r0, r4
 80047de:	b009      	add	sp, #36	@ 0x24
 80047e0:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 80047e2:	2404      	movs	r4, #4
 80047e4:	e7fa      	b.n	80047dc <SD_ioctl+0x48>
 80047e6:	bf00      	nop
 80047e8:	2000000c 	.word	0x2000000c

080047ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80047ec:	b500      	push	{lr}
 80047ee:	b083      	sub	sp, #12
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80047f0:	2302      	movs	r3, #2
 80047f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80047f6:	2300      	movs	r3, #0
 80047f8:	461a      	mov	r2, r3
 80047fa:	f10d 0106 	add.w	r1, sp, #6
 80047fe:	4803      	ldr	r0, [pc, #12]	@ (800480c <BSP_SD_WriteCpltCallback+0x20>)
 8004800:	6800      	ldr	r0, [r0, #0]
 8004802:	f000 f9f3 	bl	8004bec <osMessageQueuePut>
#endif
}
 8004806:	b003      	add	sp, #12
 8004808:	f85d fb04 	ldr.w	pc, [sp], #4
 800480c:	200003dc 	.word	0x200003dc

08004810 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004810:	b500      	push	{lr}
 8004812:	b083      	sub	sp, #12
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8004814:	2301      	movs	r3, #1
 8004816:	f8ad 3006 	strh.w	r3, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800481a:	2300      	movs	r3, #0
 800481c:	461a      	mov	r2, r3
 800481e:	f10d 0106 	add.w	r1, sp, #6
 8004822:	4803      	ldr	r0, [pc, #12]	@ (8004830 <BSP_SD_ReadCpltCallback+0x20>)
 8004824:	6800      	ldr	r0, [r0, #0]
 8004826:	f000 f9e1 	bl	8004bec <osMessageQueuePut>
#endif
}
 800482a:	b003      	add	sp, #12
 800482c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004830:	200003dc 	.word	0x200003dc

08004834 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004834:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <FATFS_LinkDriverEx+0x50>)
 8004836:	7a5b      	ldrb	r3, [r3, #9]
 8004838:	bb13      	cbnz	r3, 8004880 <FATFS_LinkDriverEx+0x4c>
{
 800483a:	b510      	push	{r4, lr}
 800483c:	4604      	mov	r4, r0
 800483e:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <FATFS_LinkDriverEx+0x50>)
 8004844:	f893 c009 	ldrb.w	ip, [r3, #9]
 8004848:	fa5f fc8c 	uxtb.w	ip, ip
 800484c:	f04f 0e00 	mov.w	lr, #0
 8004850:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8004854:	f893 c009 	ldrb.w	ip, [r3, #9]
 8004858:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800485c:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8004860:	7a5c      	ldrb	r4, [r3, #9]
 8004862:	441c      	add	r4, r3
 8004864:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8004866:	7a5a      	ldrb	r2, [r3, #9]
 8004868:	1c54      	adds	r4, r2, #1
 800486a:	b2e4      	uxtb	r4, r4
 800486c:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800486e:	3230      	adds	r2, #48	@ 0x30
 8004870:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8004872:	233a      	movs	r3, #58	@ 0x3a
 8004874:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004876:	232f      	movs	r3, #47	@ 0x2f
 8004878:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800487a:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800487e:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8004880:	2001      	movs	r0, #1
}
 8004882:	4770      	bx	lr
 8004884:	200003e0 	.word	0x200003e0

08004888 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004888:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	f7ff ffd2 	bl	8004834 <FATFS_LinkDriverEx>
}
 8004890:	bd08      	pop	{r3, pc}

08004892 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004892:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8004894:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004898:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800489a:	f001 fd95 	bl	80063c8 <xTaskGetSchedulerState>
 800489e:	2801      	cmp	r0, #1
 80048a0:	d100      	bne.n	80048a4 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80048a2:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80048a4:	f002 f996 	bl	8006bd4 <xPortSysTickHandler>
}
 80048a8:	e7fb      	b.n	80048a2 <SysTick_Handler+0x10>
	...

080048ac <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ac:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b0:	b92b      	cbnz	r3, 80048be <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <osKernelInitialize+0x20>)
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	b928      	cbnz	r0, 80048c4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048bc:	4770      	bx	lr
    stat = osErrorISR;
 80048be:	f06f 0005 	mvn.w	r0, #5
 80048c2:	4770      	bx	lr
    } else {
      stat = osError;
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000b4c 	.word	0x20000b4c

080048d0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80048d0:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80048d2:	f001 fd79 	bl	80063c8 <xTaskGetSchedulerState>
 80048d6:	b140      	cbz	r0, 80048ea <osKernelGetState+0x1a>
 80048d8:	4603      	mov	r3, r0
 80048da:	2802      	cmp	r0, #2
 80048dc:	d006      	beq.n	80048ec <osKernelGetState+0x1c>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80048de:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <osKernelGetState+0x20>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d002      	beq.n	80048ec <osKernelGetState+0x1c>
        state = osKernelReady;
      } else {
        state = osKernelInactive;
 80048e6:	2300      	movs	r3, #0
      }
      break;
  }

  return (state);
 80048e8:	e000      	b.n	80048ec <osKernelGetState+0x1c>
      state = osKernelLocked;
 80048ea:	2303      	movs	r3, #3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd08      	pop	{r3, pc}
 80048f0:	20000b4c 	.word	0x20000b4c

080048f4 <osKernelStart>:
 80048f4:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f8:	b973      	cbnz	r3, 8004918 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80048fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <osKernelStart+0x30>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10d      	bne.n	800491e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8004902:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004904:	2400      	movs	r4, #0
 8004906:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <osKernelStart+0x34>)
 8004908:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <osKernelStart+0x30>)
 800490c:	2202      	movs	r2, #2
 800490e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004910:	f001 f9ba 	bl	8005c88 <vTaskStartScheduler>
      stat = osOK;
 8004914:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8004916:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004918:	f06f 0005 	mvn.w	r0, #5
 800491c:	4770      	bx	lr
      stat = osError;
 800491e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004922:	4770      	bx	lr
 8004924:	20000b4c 	.word	0x20000b4c
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800492c:	b508      	push	{r3, lr}
 800492e:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8004932:	b113      	cbz	r3, 800493a <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8004934:	f001 fa0e 	bl	8005d54 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8004938:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 800493a:	f001 fa05 	bl	8005d48 <xTaskGetTickCount>
  return (ticks);
 800493e:	e7fb      	b.n	8004938 <osKernelGetTickCount+0xc>

08004940 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004942:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004944:	2400      	movs	r4, #0
 8004946:	9405      	str	r4, [sp, #20]
 8004948:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800494c:	bb74      	cbnz	r4, 80049ac <osThreadNew+0x6c>
 800494e:	b368      	cbz	r0, 80049ac <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004950:	b322      	cbz	r2, 800499c <osThreadNew+0x5c>
      if (attr->name != NULL) {
 8004952:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004954:	6993      	ldr	r3, [r2, #24]
 8004956:	b903      	cbnz	r3, 800495a <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8004958:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800495a:	1e5c      	subs	r4, r3, #1
 800495c:	2c37      	cmp	r4, #55	@ 0x37
 800495e:	d849      	bhi.n	80049f4 <osThreadNew+0xb4>
 8004960:	6854      	ldr	r4, [r2, #4]
 8004962:	f014 0f01 	tst.w	r4, #1
 8004966:	d147      	bne.n	80049f8 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004968:	6956      	ldr	r6, [r2, #20]
 800496a:	b16e      	cbz	r6, 8004988 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800496c:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004970:	6894      	ldr	r4, [r2, #8]
 8004972:	b12c      	cbz	r4, 8004980 <osThreadNew+0x40>
 8004974:	68d7      	ldr	r7, [r2, #12]
 8004976:	2faf      	cmp	r7, #175	@ 0xaf
 8004978:	d902      	bls.n	8004980 <osThreadNew+0x40>
 800497a:	6917      	ldr	r7, [r2, #16]
 800497c:	b107      	cbz	r7, 8004980 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800497e:	b9c6      	cbnz	r6, 80049b2 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004980:	b12c      	cbz	r4, 800498e <osThreadNew+0x4e>
    mem  = -1;
 8004982:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004986:	e00e      	b.n	80049a6 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8004988:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800498c:	e7f0      	b.n	8004970 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800498e:	68d4      	ldr	r4, [r2, #12]
 8004990:	b98c      	cbnz	r4, 80049b6 <osThreadNew+0x76>
 8004992:	6914      	ldr	r4, [r2, #16]
 8004994:	b194      	cbz	r4, 80049bc <osThreadNew+0x7c>
    mem  = -1;
 8004996:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800499a:	e004      	b.n	80049a6 <osThreadNew+0x66>
    name = NULL;
 800499c:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800499e:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80049a0:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80049a2:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 80049a6:	2c01      	cmp	r4, #1
 80049a8:	d00a      	beq.n	80049c0 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80049aa:	b1ac      	cbz	r4, 80049d8 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049ac:	9805      	ldr	r0, [sp, #20]
}
 80049ae:	b007      	add	sp, #28
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80049b2:	2401      	movs	r4, #1
 80049b4:	e7f7      	b.n	80049a6 <osThreadNew+0x66>
    mem  = -1;
 80049b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049ba:	e7f4      	b.n	80049a6 <osThreadNew+0x66>
          mem = 0;
 80049bc:	2400      	movs	r4, #0
 80049be:	e7f2      	b.n	80049a6 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049c0:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049c4:	9202      	str	r2, [sp, #8]
 80049c6:	9401      	str	r4, [sp, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	460b      	mov	r3, r1
 80049cc:	4662      	mov	r2, ip
 80049ce:	4629      	mov	r1, r5
 80049d0:	f001 f8a4 	bl	8005b1c <xTaskCreateStatic>
 80049d4:	9005      	str	r0, [sp, #20]
 80049d6:	e7e9      	b.n	80049ac <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049d8:	aa05      	add	r2, sp, #20
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	460b      	mov	r3, r1
 80049e0:	fa1f f28c 	uxth.w	r2, ip
 80049e4:	4629      	mov	r1, r5
 80049e6:	f001 f8d4 	bl	8005b92 <xTaskCreate>
 80049ea:	2801      	cmp	r0, #1
 80049ec:	d0de      	beq.n	80049ac <osThreadNew+0x6c>
            hTask = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	e7db      	b.n	80049ac <osThreadNew+0x6c>
        return (NULL);
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7da      	b.n	80049ae <osThreadNew+0x6e>
 80049f8:	2000      	movs	r0, #0
 80049fa:	e7d8      	b.n	80049ae <osThreadNew+0x6e>

080049fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049fc:	b508      	push	{r3, lr}
 80049fe:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a02:	b933      	cbnz	r3, 8004a12 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004a04:	b908      	cbnz	r0, 8004a0a <osDelay+0xe>
    stat = osOK;
 8004a06:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004a08:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8004a0a:	f001 fab9 	bl	8005f80 <vTaskDelay>
    stat = osOK;
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e7fa      	b.n	8004a08 <osDelay+0xc>
    stat = osErrorISR;
 8004a12:	f06f 0005 	mvn.w	r0, #5
 8004a16:	e7f7      	b.n	8004a08 <osDelay+0xc>

08004a18 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d13c      	bne.n	8004a9c <osMutexNew+0x84>
 8004a22:	4604      	mov	r4, r0
    if (attr != NULL) {
 8004a24:	b100      	cbz	r0, 8004a28 <osMutexNew+0x10>
      type = attr->attr_bits;
 8004a26:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a28:	f013 0601 	ands.w	r6, r3, #1
 8004a2c:	d000      	beq.n	8004a30 <osMutexNew+0x18>
      rmtx = 1U;
 8004a2e:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a30:	f013 0f08 	tst.w	r3, #8
 8004a34:	d135      	bne.n	8004aa2 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8004a36:	b344      	cbz	r4, 8004a8a <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a38:	68a1      	ldr	r1, [r4, #8]
 8004a3a:	b111      	cbz	r1, 8004a42 <osMutexNew+0x2a>
 8004a3c:	68e3      	ldr	r3, [r4, #12]
 8004a3e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a40:	d818      	bhi.n	8004a74 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a42:	b191      	cbz	r1, 8004a6a <osMutexNew+0x52>
      mem = -1;
 8004a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004a48:	bb6b      	cbnz	r3, 8004aa6 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004a4a:	b316      	cbz	r6, 8004a92 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004a4c:	2004      	movs	r0, #4
 8004a4e:	f000 fbe7 	bl	8005220 <xQueueCreateMutex>
 8004a52:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004a54:	b31d      	cbz	r5, 8004a9e <osMutexNew+0x86>
        if (attr != NULL) {
 8004a56:	b104      	cbz	r4, 8004a5a <osMutexNew+0x42>
          name = attr->name;
 8004a58:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 fe79 	bl	8005754 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004a62:	b1e6      	cbz	r6, 8004a9e <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004a64:	f045 0501 	orr.w	r5, r5, #1
 8004a68:	e019      	b.n	8004a9e <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	b17b      	cbz	r3, 8004a8e <osMutexNew+0x76>
      mem = -1;
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a72:	e7e9      	b.n	8004a48 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8004a74:	b126      	cbz	r6, 8004a80 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a76:	2004      	movs	r0, #4
 8004a78:	f000 fbdd 	bl	8005236 <xQueueCreateMutexStatic>
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	e7e9      	b.n	8004a54 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004a80:	2001      	movs	r0, #1
 8004a82:	f000 fbd8 	bl	8005236 <xQueueCreateMutexStatic>
 8004a86:	4605      	mov	r5, r0
 8004a88:	e7e4      	b.n	8004a54 <osMutexNew+0x3c>
        mem = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e7dc      	b.n	8004a48 <osMutexNew+0x30>
            mem = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e7da      	b.n	8004a48 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8004a92:	2001      	movs	r0, #1
 8004a94:	f000 fbc4 	bl	8005220 <xQueueCreateMutex>
 8004a98:	4605      	mov	r5, r0
 8004a9a:	e7db      	b.n	8004a54 <osMutexNew+0x3c>
  hMutex = NULL;
 8004a9c:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	e7fb      	b.n	8004a9e <osMutexNew+0x86>
 8004aa6:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8004aa8:	e7f9      	b.n	8004a9e <osMutexNew+0x86>

08004aaa <osMutexAcquire>:
 8004aaa:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004aae:	b9da      	cbnz	r2, 8004ae8 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	f020 0001 	bic.w	r0, r0, #1
 8004aba:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d915      	bls.n	8004aee <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004ac2:	b141      	cbz	r1, 8004ad6 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	f000 fdce 	bl	8005666 <xQueueTakeMutexRecursive>
 8004aca:	2801      	cmp	r0, #1
 8004acc:	d012      	beq.n	8004af4 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8004ace:	b19c      	cbz	r4, 8004af8 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8004ad0:	f06f 0001 	mvn.w	r0, #1
 8004ad4:	e00f      	b.n	8004af6 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	f000 fcf2 	bl	80054c0 <xQueueSemaphoreTake>
 8004adc:	2801      	cmp	r0, #1
 8004ade:	d00e      	beq.n	8004afe <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8004ae0:	b17c      	cbz	r4, 8004b02 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8004ae2:	f06f 0001 	mvn.w	r0, #1
 8004ae6:	e006      	b.n	8004af6 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8004ae8:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8004aec:	4770      	bx	lr
    stat = osErrorParameter;
 8004aee:	f06f 0003 	mvn.w	r0, #3
 8004af2:	e000      	b.n	8004af6 <osMutexAcquire+0x4c>
  stat = osOK;
 8004af4:	2000      	movs	r0, #0
}
 8004af6:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8004af8:	f06f 0002 	mvn.w	r0, #2
 8004afc:	e7fb      	b.n	8004af6 <osMutexAcquire+0x4c>
  stat = osOK;
 8004afe:	2000      	movs	r0, #0
 8004b00:	e7f9      	b.n	8004af6 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8004b02:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004b06:	e7f6      	b.n	8004af6 <osMutexAcquire+0x4c>

08004b08 <osMutexRelease>:
 8004b08:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004b0c:	b9ba      	cbnz	r2, 8004b3e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004b0e:	b508      	push	{r3, lr}
 8004b10:	4603      	mov	r3, r0
 8004b12:	f020 0001 	bic.w	r0, r0, #1
 8004b16:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d912      	bls.n	8004b44 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004b1e:	b129      	cbz	r1, 8004b2c <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004b20:	f000 fb98 	bl	8005254 <xQueueGiveMutexRecursive>
 8004b24:	2801      	cmp	r0, #1
 8004b26:	d110      	bne.n	8004b4a <osMutexRelease+0x42>
  stat = osOK;
 8004b28:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004b2a:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	f000 faa5 	bl	8005080 <xQueueGenericSend>
 8004b36:	2801      	cmp	r0, #1
 8004b38:	d10a      	bne.n	8004b50 <osMutexRelease+0x48>
  stat = osOK;
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e7f5      	b.n	8004b2a <osMutexRelease+0x22>
    stat = osErrorISR;
 8004b3e:	f06f 0005 	mvn.w	r0, #5
}
 8004b42:	4770      	bx	lr
    stat = osErrorParameter;
 8004b44:	f06f 0003 	mvn.w	r0, #3
 8004b48:	e7ef      	b.n	8004b2a <osMutexRelease+0x22>
        stat = osErrorResource;
 8004b4a:	f06f 0002 	mvn.w	r0, #2
 8004b4e:	e7ec      	b.n	8004b2a <osMutexRelease+0x22>
        stat = osErrorResource;
 8004b50:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004b54:	e7e9      	b.n	8004b2a <osMutexRelease+0x22>

08004b56 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b56:	b570      	push	{r4, r5, r6, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d13a      	bne.n	8004bd8 <osMessageQueueNew+0x82>
 8004b62:	4614      	mov	r4, r2
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d03b      	beq.n	8004be0 <osMessageQueueNew+0x8a>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d03b      	beq.n	8004be4 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8004b6c:	b36a      	cbz	r2, 8004bca <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b6e:	6893      	ldr	r3, [r2, #8]
 8004b70:	b14b      	cbz	r3, 8004b86 <osMessageQueueNew+0x30>
 8004b72:	68d2      	ldr	r2, [r2, #12]
 8004b74:	2a4f      	cmp	r2, #79	@ 0x4f
 8004b76:	d906      	bls.n	8004b86 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b78:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b7a:	b122      	cbz	r2, 8004b86 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b7c:	fb01 f500 	mul.w	r5, r1, r0
 8004b80:	6966      	ldr	r6, [r4, #20]
 8004b82:	42ae      	cmp	r6, r5
 8004b84:	d21b      	bcs.n	8004bbe <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b86:	b173      	cbz	r3, 8004ba6 <osMessageQueueNew+0x50>
    mem = -1;
 8004b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8004b8c:	bb63      	cbnz	r3, 8004be8 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f000 fa52 	bl	8005038 <xQueueGenericCreate>
 8004b94:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b96:	b305      	cbz	r5, 8004bda <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8004b98:	b104      	cbz	r4, 8004b9c <osMessageQueueNew+0x46>
        name = attr->name;
 8004b9a:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 fdd8 	bl	8005754 <vQueueAddToRegistry>
 8004ba4:	e019      	b.n	8004bda <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ba6:	68e3      	ldr	r3, [r4, #12]
 8004ba8:	b98b      	cbnz	r3, 8004bce <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004baa:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bac:	b113      	cbz	r3, 8004bb4 <osMessageQueueNew+0x5e>
    mem = -1;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bb2:	e7eb      	b.n	8004b8c <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bb4:	6963      	ldr	r3, [r4, #20]
 8004bb6:	b16b      	cbz	r3, 8004bd4 <osMessageQueueNew+0x7e>
    mem = -1;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bbc:	e7e6      	b.n	8004b8c <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bbe:	2500      	movs	r5, #0
 8004bc0:	9500      	str	r5, [sp, #0]
 8004bc2:	f000 f9ef 	bl	8004fa4 <xQueueGenericCreateStatic>
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	e7e5      	b.n	8004b96 <osMessageQueueNew+0x40>
      mem = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e7de      	b.n	8004b8c <osMessageQueueNew+0x36>
    mem = -1;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bd2:	e7db      	b.n	8004b8c <osMessageQueueNew+0x36>
          mem = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e7d9      	b.n	8004b8c <osMessageQueueNew+0x36>
  hQueue = NULL;
 8004bd8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004bda:	4628      	mov	r0, r5
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8004be0:	2500      	movs	r5, #0
 8004be2:	e7fa      	b.n	8004bda <osMessageQueueNew+0x84>
 8004be4:	2500      	movs	r5, #0
 8004be6:	e7f8      	b.n	8004bda <osMessageQueueNew+0x84>
 8004be8:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8004bea:	e7f6      	b.n	8004bda <osMessageQueueNew+0x84>

08004bec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004bec:	b510      	push	{r4, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	461c      	mov	r4, r3
 8004bf2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004bf6:	b1c3      	cbz	r3, 8004c2a <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bf8:	b318      	cbz	r0, 8004c42 <osMessageQueuePut+0x56>
 8004bfa:	b329      	cbz	r1, 8004c48 <osMessageQueuePut+0x5c>
 8004bfc:	bb3c      	cbnz	r4, 8004c4e <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c02:	aa01      	add	r2, sp, #4
 8004c04:	f000 fb46 	bl	8005294 <xQueueGenericSendFromISR>
 8004c08:	2801      	cmp	r0, #1
 8004c0a:	d123      	bne.n	8004c54 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004c0c:	9801      	ldr	r0, [sp, #4]
 8004c0e:	b150      	cbz	r0, 8004c26 <osMessageQueuePut+0x3a>
 8004c10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004c24:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004c26:	b002      	add	sp, #8
 8004c28:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c2a:	b1b0      	cbz	r0, 8004c5a <osMessageQueuePut+0x6e>
 8004c2c:	b1c1      	cbz	r1, 8004c60 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4622      	mov	r2, r4
 8004c32:	f000 fa25 	bl	8005080 <xQueueGenericSend>
 8004c36:	2801      	cmp	r0, #1
 8004c38:	d015      	beq.n	8004c66 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8004c3a:	b1b4      	cbz	r4, 8004c6a <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8004c3c:	f06f 0001 	mvn.w	r0, #1
 8004c40:	e7f1      	b.n	8004c26 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8004c42:	f06f 0003 	mvn.w	r0, #3
 8004c46:	e7ee      	b.n	8004c26 <osMessageQueuePut+0x3a>
 8004c48:	f06f 0003 	mvn.w	r0, #3
 8004c4c:	e7eb      	b.n	8004c26 <osMessageQueuePut+0x3a>
 8004c4e:	f06f 0003 	mvn.w	r0, #3
 8004c52:	e7e8      	b.n	8004c26 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8004c54:	f06f 0002 	mvn.w	r0, #2
 8004c58:	e7e5      	b.n	8004c26 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8004c5a:	f06f 0003 	mvn.w	r0, #3
 8004c5e:	e7e2      	b.n	8004c26 <osMessageQueuePut+0x3a>
 8004c60:	f06f 0003 	mvn.w	r0, #3
 8004c64:	e7df      	b.n	8004c26 <osMessageQueuePut+0x3a>
  stat = osOK;
 8004c66:	2000      	movs	r0, #0
 8004c68:	e7dd      	b.n	8004c26 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8004c6a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004c6e:	e7da      	b.n	8004c26 <osMessageQueuePut+0x3a>

08004c70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004c70:	b510      	push	{r4, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	461c      	mov	r4, r3
 8004c76:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004c7a:	b1c3      	cbz	r3, 8004cae <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c7c:	b310      	cbz	r0, 8004cc4 <osMessageQueueGet+0x54>
 8004c7e:	b321      	cbz	r1, 8004cca <osMessageQueueGet+0x5a>
 8004c80:	bb34      	cbnz	r4, 8004cd0 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c86:	aa01      	add	r2, sp, #4
 8004c88:	f000 fd0d 	bl	80056a6 <xQueueReceiveFromISR>
 8004c8c:	2801      	cmp	r0, #1
 8004c8e:	d122      	bne.n	8004cd6 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004c90:	9801      	ldr	r0, [sp, #4]
 8004c92:	b150      	cbz	r0, 8004caa <osMessageQueueGet+0x3a>
 8004c94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004ca8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004caa:	b002      	add	sp, #8
 8004cac:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004cae:	b1a8      	cbz	r0, 8004cdc <osMessageQueueGet+0x6c>
 8004cb0:	b1b9      	cbz	r1, 8004ce2 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	f000 fb55 	bl	8005362 <xQueueReceive>
 8004cb8:	2801      	cmp	r0, #1
 8004cba:	d015      	beq.n	8004ce8 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8004cbc:	b1b4      	cbz	r4, 8004cec <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8004cbe:	f06f 0001 	mvn.w	r0, #1
 8004cc2:	e7f2      	b.n	8004caa <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8004cc4:	f06f 0003 	mvn.w	r0, #3
 8004cc8:	e7ef      	b.n	8004caa <osMessageQueueGet+0x3a>
 8004cca:	f06f 0003 	mvn.w	r0, #3
 8004cce:	e7ec      	b.n	8004caa <osMessageQueueGet+0x3a>
 8004cd0:	f06f 0003 	mvn.w	r0, #3
 8004cd4:	e7e9      	b.n	8004caa <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8004cd6:	f06f 0002 	mvn.w	r0, #2
 8004cda:	e7e6      	b.n	8004caa <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8004cdc:	f06f 0003 	mvn.w	r0, #3
 8004ce0:	e7e3      	b.n	8004caa <osMessageQueueGet+0x3a>
 8004ce2:	f06f 0003 	mvn.w	r0, #3
 8004ce6:	e7e0      	b.n	8004caa <osMessageQueueGet+0x3a>
  stat = osOK;
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e7de      	b.n	8004caa <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8004cec:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004cf0:	e7db      	b.n	8004caa <osMessageQueueGet+0x3a>
	...

08004cf4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cf4:	4b03      	ldr	r3, [pc, #12]	@ (8004d04 <vApplicationGetIdleTaskMemory+0x10>)
 8004cf6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cf8:	4b03      	ldr	r3, [pc, #12]	@ (8004d08 <vApplicationGetIdleTaskMemory+0x14>)
 8004cfa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000a9c 	.word	0x20000a9c
 8004d08:	2000089c 	.word	0x2000089c

08004d0c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d0c:	4b03      	ldr	r3, [pc, #12]	@ (8004d1c <vApplicationGetTimerTaskMemory+0x10>)
 8004d0e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d10:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <vApplicationGetTimerTaskMemory+0x14>)
 8004d12:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d18:	6013      	str	r3, [r2, #0]
}
 8004d1a:	4770      	bx	lr
 8004d1c:	200007ec 	.word	0x200007ec
 8004d20:	200003ec 	.word	0x200003ec

08004d24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d24:	f100 0308 	add.w	r3, r0, #8
 8004d28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d38:	4770      	bx	lr

08004d3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d3e:	4770      	bx	lr

08004d40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d40:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d48:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d4a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	6003      	str	r3, [r0, #0]
}
 8004d54:	4770      	bx	lr

08004d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d56:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d58:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d5a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8004d5e:	d011      	beq.n	8004d84 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d60:	f100 0308 	add.w	r3, r0, #8
 8004d64:	461c      	mov	r4, r3
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	42aa      	cmp	r2, r5
 8004d6c:	d9fa      	bls.n	8004d64 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d72:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d74:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d76:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d7a:	6803      	ldr	r3, [r0, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	6003      	str	r3, [r0, #0]
}
 8004d80:	bc30      	pop	{r4, r5}
 8004d82:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d84:	6904      	ldr	r4, [r0, #16]
 8004d86:	e7f2      	b.n	8004d6e <vListInsert+0x18>

08004d88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d8a:	6841      	ldr	r1, [r0, #4]
 8004d8c:	6882      	ldr	r2, [r0, #8]
 8004d8e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d90:	6841      	ldr	r1, [r0, #4]
 8004d92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	4282      	cmp	r2, r0
 8004d98:	d006      	beq.n	8004da8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	3a01      	subs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004da4:	6818      	ldr	r0, [r3, #0]
}
 8004da6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004da8:	6882      	ldr	r2, [r0, #8]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	e7f5      	b.n	8004d9a <uxListRemove+0x12>

08004dae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004dae:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004db0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004db2:	b118      	cbz	r0, 8004dbc <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8004dbc:	4770      	bx	lr

08004dbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc2:	f001 fe97 	bl	8006af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dc6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004dc8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d004      	beq.n	8004dd8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004dce:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004dd0:	f001 feb2 	bl	8006b38 <vPortExitCritical>

	return xReturn;
}
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004dd8:	2401      	movs	r4, #1
 8004dda:	e7f9      	b.n	8004dd0 <prvIsQueueFull+0x12>

08004ddc <prvIsQueueEmpty>:
{
 8004ddc:	b510      	push	{r4, lr}
 8004dde:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004de0:	f001 fe88 	bl	8006af4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004de4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004de6:	b923      	cbnz	r3, 8004df2 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8004de8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004dea:	f001 fea5 	bl	8006b38 <vPortExitCritical>
}
 8004dee:	4620      	mov	r0, r4
 8004df0:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8004df2:	2400      	movs	r4, #0
 8004df4:	e7f9      	b.n	8004dea <prvIsQueueEmpty+0xe>

08004df6 <prvCopyDataToQueue>:
{
 8004df6:	b570      	push	{r4, r5, r6, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dfc:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dfe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004e00:	b95a      	cbnz	r2, 8004e1a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e02:	6803      	ldr	r3, [r0, #0]
 8004e04:	b11b      	cbz	r3, 8004e0e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004e06:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e08:	3601      	adds	r6, #1
 8004e0a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e0e:	6880      	ldr	r0, [r0, #8]
 8004e10:	f001 fb36 	bl	8006480 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60a3      	str	r3, [r4, #8]
 8004e18:	e7f6      	b.n	8004e08 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004e1a:	b96d      	cbnz	r5, 8004e38 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e1c:	6840      	ldr	r0, [r0, #4]
 8004e1e:	f003 f818 	bl	8007e52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e22:	6863      	ldr	r3, [r4, #4]
 8004e24:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004e26:	4413      	add	r3, r2
 8004e28:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e2a:	68a2      	ldr	r2, [r4, #8]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d319      	bcc.n	8004e64 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004e34:	4628      	mov	r0, r5
 8004e36:	e7e7      	b.n	8004e08 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e38:	68c0      	ldr	r0, [r0, #12]
 8004e3a:	f003 f80a 	bl	8007e52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004e42:	4251      	negs	r1, r2
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d202      	bcs.n	8004e54 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	440b      	add	r3, r1
 8004e52:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004e54:	2d02      	cmp	r5, #2
 8004e56:	d001      	beq.n	8004e5c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e7d5      	b.n	8004e08 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e5c:	b126      	cbz	r6, 8004e68 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004e5e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004e60:	2000      	movs	r0, #0
 8004e62:	e7d1      	b.n	8004e08 <prvCopyDataToQueue+0x12>
 8004e64:	4628      	mov	r0, r5
 8004e66:	e7cf      	b.n	8004e08 <prvCopyDataToQueue+0x12>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e7cd      	b.n	8004e08 <prvCopyDataToQueue+0x12>

08004e6c <prvCopyDataFromQueue>:
{
 8004e6c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e6e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004e70:	b16a      	cbz	r2, 8004e8e <prvCopyDataFromQueue+0x22>
{
 8004e72:	b510      	push	{r4, lr}
 8004e74:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e76:	68d9      	ldr	r1, [r3, #12]
 8004e78:	4411      	add	r1, r2
 8004e7a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e7c:	689c      	ldr	r4, [r3, #8]
 8004e7e:	42a1      	cmp	r1, r4
 8004e80:	d301      	bcc.n	8004e86 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e86:	68d9      	ldr	r1, [r3, #12]
 8004e88:	f002 ffe3 	bl	8007e52 <memcpy>
}
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	4770      	bx	lr

08004e90 <prvUnlockQueue>:
{
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004e94:	f001 fe2e 	bl	8006af4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004e98:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8004e9c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e9e:	e001      	b.n	8004ea4 <prvUnlockQueue+0x14>
			--cTxLock;
 8004ea0:	3c01      	subs	r4, #1
 8004ea2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea4:	2c00      	cmp	r4, #0
 8004ea6:	dd0a      	ble.n	8004ebe <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004eaa:	b143      	cbz	r3, 8004ebe <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eac:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8004eb0:	f001 f926 	bl	8006100 <xTaskRemoveFromEventList>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d0f3      	beq.n	8004ea0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8004eb8:	f001 f9b6 	bl	8006228 <vTaskMissedYield>
 8004ebc:	e7f0      	b.n	8004ea0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004ebe:	23ff      	movs	r3, #255	@ 0xff
 8004ec0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8004ec4:	f001 fe38 	bl	8006b38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004ec8:	f001 fe14 	bl	8006af4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004ecc:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8004ed0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed2:	e001      	b.n	8004ed8 <prvUnlockQueue+0x48>
				--cRxLock;
 8004ed4:	3c01      	subs	r4, #1
 8004ed6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed8:	2c00      	cmp	r4, #0
 8004eda:	dd0a      	ble.n	8004ef2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004edc:	692b      	ldr	r3, [r5, #16]
 8004ede:	b143      	cbz	r3, 8004ef2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee0:	f105 0010 	add.w	r0, r5, #16
 8004ee4:	f001 f90c 	bl	8006100 <xTaskRemoveFromEventList>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d0f3      	beq.n	8004ed4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8004eec:	f001 f99c 	bl	8006228 <vTaskMissedYield>
 8004ef0:	e7f0      	b.n	8004ed4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004ef2:	23ff      	movs	r3, #255	@ 0xff
 8004ef4:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8004ef8:	f001 fe1e 	bl	8006b38 <vPortExitCritical>
}
 8004efc:	bd38      	pop	{r3, r4, r5, pc}

08004efe <xQueueGenericReset>:
{
 8004efe:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004f00:	b1e0      	cbz	r0, 8004f3c <xQueueGenericReset+0x3e>
 8004f02:	460d      	mov	r5, r1
 8004f04:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004f06:	f001 fdf5 	bl	8006af4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004f0e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004f10:	fb01 3002 	mla	r0, r1, r2, r3
 8004f14:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f16:	2000      	movs	r0, #0
 8004f18:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f1a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	fb02 3301 	mla	r3, r2, r1, r3
 8004f22:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f24:	23ff      	movs	r3, #255	@ 0xff
 8004f26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f2a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8004f2e:	b9fd      	cbnz	r5, 8004f70 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b963      	cbnz	r3, 8004f4e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004f34:	f001 fe00 	bl	8006b38 <vPortExitCritical>
}
 8004f38:	2001      	movs	r0, #1
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004f4c:	e7fe      	b.n	8004f4c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4e:	f104 0010 	add.w	r0, r4, #16
 8004f52:	f001 f8d5 	bl	8006100 <xTaskRemoveFromEventList>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d0ec      	beq.n	8004f34 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004f5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	e7e1      	b.n	8004f34 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f70:	f104 0010 	add.w	r0, r4, #16
 8004f74:	f7ff fed6 	bl	8004d24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f78:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f7c:	f7ff fed2 	bl	8004d24 <vListInitialise>
 8004f80:	e7d8      	b.n	8004f34 <xQueueGenericReset+0x36>

08004f82 <prvInitialiseNewQueue>:
{
 8004f82:	b538      	push	{r3, r4, r5, lr}
 8004f84:	461d      	mov	r5, r3
 8004f86:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f88:	460b      	mov	r3, r1
 8004f8a:	b949      	cbnz	r1, 8004fa0 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f8c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004f8e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f90:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f92:	2101      	movs	r1, #1
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ffb2 	bl	8004efe <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004f9a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fa0:	6022      	str	r2, [r4, #0]
 8004fa2:	e7f4      	b.n	8004f8e <prvInitialiseNewQueue+0xc>

08004fa4 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fa4:	b940      	cbnz	r0, 8004fb8 <xQueueGenericCreateStatic+0x14>
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	e7fe      	b.n	8004fb6 <xQueueGenericCreateStatic+0x12>
	{
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	461c      	mov	r4, r3
 8004fbe:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8004fc0:	b153      	cbz	r3, 8004fd8 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fc2:	b192      	cbz	r2, 8004fea <xQueueGenericCreateStatic+0x46>
 8004fc4:	b989      	cbnz	r1, 8004fea <xQueueGenericCreateStatic+0x46>
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueGenericCreateStatic+0x32>
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fea:	b16a      	cbz	r2, 8005008 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fec:	2350      	movs	r3, #80	@ 0x50
 8004fee:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	2b50      	cmp	r3, #80	@ 0x50
 8004ff4:	d013      	beq.n	800501e <xQueueGenericCreateStatic+0x7a>
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	e7fe      	b.n	8005006 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005008:	2900      	cmp	r1, #0
 800500a:	d0ef      	beq.n	8004fec <xQueueGenericCreateStatic+0x48>
 800500c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	e7fe      	b.n	800501c <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800501e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005026:	9400      	str	r4, [sp, #0]
 8005028:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800502c:	4660      	mov	r0, ip
 800502e:	f7ff ffa8 	bl	8004f82 <prvInitialiseNewQueue>
	}
 8005032:	4620      	mov	r0, r4
 8005034:	b004      	add	sp, #16
 8005036:	bd10      	pop	{r4, pc}

08005038 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005038:	b940      	cbnz	r0, 800504c <xQueueGenericCreate+0x14>
 800503a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	e7fe      	b.n	800504a <xQueueGenericCreate+0x12>
	{
 800504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504e:	b083      	sub	sp, #12
 8005050:	460d      	mov	r5, r1
 8005052:	4614      	mov	r4, r2
 8005054:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800505a:	3050      	adds	r0, #80	@ 0x50
 800505c:	f001 ff02 	bl	8006e64 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005060:	4607      	mov	r7, r0
 8005062:	b150      	cbz	r0, 800507a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800506a:	9000      	str	r0, [sp, #0]
 800506c:	4623      	mov	r3, r4
 800506e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8005072:	4629      	mov	r1, r5
 8005074:	4630      	mov	r0, r6
 8005076:	f7ff ff84 	bl	8004f82 <prvInitialiseNewQueue>
	}
 800507a:	4638      	mov	r0, r7
 800507c:	b003      	add	sp, #12
 800507e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005080 <xQueueGenericSend>:
{
 8005080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005082:	b085      	sub	sp, #20
 8005084:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005086:	b188      	cbz	r0, 80050ac <xQueueGenericSend+0x2c>
 8005088:	460f      	mov	r7, r1
 800508a:	461d      	mov	r5, r3
 800508c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508e:	b1b1      	cbz	r1, 80050be <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005090:	2d02      	cmp	r5, #2
 8005092:	d120      	bne.n	80050d6 <xQueueGenericSend+0x56>
 8005094:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d01d      	beq.n	80050d6 <xQueueGenericSend+0x56>
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	e7fe      	b.n	80050aa <xQueueGenericSend+0x2a>
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80050bc:	e7fe      	b.n	80050bc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050be:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0e5      	beq.n	8005090 <xQueueGenericSend+0x10>
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050d6:	f001 f977 	bl	80063c8 <xTaskGetSchedulerState>
 80050da:	4606      	mov	r6, r0
 80050dc:	b958      	cbnz	r0, 80050f6 <xQueueGenericSend+0x76>
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d048      	beq.n	8005176 <xQueueGenericSend+0xf6>
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericSend+0x74>
 80050f6:	2600      	movs	r6, #0
 80050f8:	e03d      	b.n	8005176 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050fa:	462a      	mov	r2, r5
 80050fc:	4639      	mov	r1, r7
 80050fe:	4620      	mov	r0, r4
 8005100:	f7ff fe79 	bl	8004df6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005104:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005106:	b97b      	cbnz	r3, 8005128 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8005108:	b148      	cbz	r0, 800511e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800510a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800510e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005112:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800511e:	f001 fd0b 	bl	8006b38 <vPortExitCritical>
				return pdPASS;
 8005122:	2001      	movs	r0, #1
}
 8005124:	b005      	add	sp, #20
 8005126:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005128:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800512c:	f000 ffe8 	bl	8006100 <xTaskRemoveFromEventList>
 8005130:	2800      	cmp	r0, #0
 8005132:	d0f4      	beq.n	800511e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8005134:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	e7e9      	b.n	800511e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800514a:	f001 fcf5 	bl	8006b38 <vPortExitCritical>
					return errQUEUE_FULL;
 800514e:	2000      	movs	r0, #0
 8005150:	e7e8      	b.n	8005124 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005152:	a802      	add	r0, sp, #8
 8005154:	f001 f81a 	bl	800618c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005158:	2601      	movs	r6, #1
 800515a:	e019      	b.n	8005190 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800515c:	2300      	movs	r3, #0
 800515e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005162:	e021      	b.n	80051a8 <xQueueGenericSend+0x128>
 8005164:	2300      	movs	r3, #0
 8005166:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800516a:	e023      	b.n	80051b4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800516c:	4620      	mov	r0, r4
 800516e:	f7ff fe8f 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005172:	f000 fe89 	bl	8005e88 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005176:	f001 fcbd 	bl	8006af4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800517a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800517c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800517e:	429a      	cmp	r2, r3
 8005180:	d3bb      	bcc.n	80050fa <xQueueGenericSend+0x7a>
 8005182:	2d02      	cmp	r5, #2
 8005184:	d0b9      	beq.n	80050fa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0de      	beq.n	800514a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800518c:	2e00      	cmp	r6, #0
 800518e:	d0e0      	beq.n	8005152 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8005190:	f001 fcd2 	bl	8006b38 <vPortExitCritical>
		vTaskSuspendAll();
 8005194:	f000 fdd0 	bl	8005d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005198:	f001 fcac 	bl	8006af4 <vPortEnterCritical>
 800519c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80051a0:	b252      	sxtb	r2, r2
 80051a2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80051a6:	d0d9      	beq.n	800515c <xQueueGenericSend+0xdc>
 80051a8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80051ac:	b252      	sxtb	r2, r2
 80051ae:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80051b2:	d0d7      	beq.n	8005164 <xQueueGenericSend+0xe4>
 80051b4:	f001 fcc0 	bl	8006b38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051b8:	a901      	add	r1, sp, #4
 80051ba:	a802      	add	r0, sp, #8
 80051bc:	f000 fff2 	bl	80061a4 <xTaskCheckForTimeOut>
 80051c0:	b9d8      	cbnz	r0, 80051fa <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff fdfb 	bl	8004dbe <prvIsQueueFull>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d0cf      	beq.n	800516c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051cc:	9901      	ldr	r1, [sp, #4]
 80051ce:	f104 0010 	add.w	r0, r4, #16
 80051d2:	f000 ff61 	bl	8006098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff fe5a 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051dc:	f000 fe54 	bl	8005e88 <xTaskResumeAll>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d1c8      	bne.n	8005176 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80051e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80051e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	e7bd      	b.n	8005176 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff fe48 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005200:	f000 fe42 	bl	8005e88 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005204:	2000      	movs	r0, #0
 8005206:	e78d      	b.n	8005124 <xQueueGenericSend+0xa4>

08005208 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8005208:	b148      	cbz	r0, 800521e <prvInitialiseMutex+0x16>
	{
 800520a:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800520c:	2100      	movs	r1, #0
 800520e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005210:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005212:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005214:	460b      	mov	r3, r1
 8005216:	460a      	mov	r2, r1
 8005218:	f7ff ff32 	bl	8005080 <xQueueGenericSend>
	}
 800521c:	bd08      	pop	{r3, pc}
 800521e:	4770      	bx	lr

08005220 <xQueueCreateMutex>:
	{
 8005220:	b510      	push	{r4, lr}
 8005222:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005224:	2100      	movs	r1, #0
 8005226:	2001      	movs	r0, #1
 8005228:	f7ff ff06 	bl	8005038 <xQueueGenericCreate>
 800522c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800522e:	f7ff ffeb 	bl	8005208 <prvInitialiseMutex>
	}
 8005232:	4620      	mov	r0, r4
 8005234:	bd10      	pop	{r4, pc}

08005236 <xQueueCreateMutexStatic>:
	{
 8005236:	b510      	push	{r4, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800523c:	9000      	str	r0, [sp, #0]
 800523e:	2200      	movs	r2, #0
 8005240:	4611      	mov	r1, r2
 8005242:	2001      	movs	r0, #1
 8005244:	f7ff feae 	bl	8004fa4 <xQueueGenericCreateStatic>
 8005248:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800524a:	f7ff ffdd 	bl	8005208 <prvInitialiseMutex>
	}
 800524e:	4620      	mov	r0, r4
 8005250:	b002      	add	sp, #8
 8005252:	bd10      	pop	{r4, pc}

08005254 <xQueueGiveMutexRecursive>:
	{
 8005254:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8005256:	b138      	cbz	r0, 8005268 <xQueueGiveMutexRecursive+0x14>
 8005258:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800525a:	6885      	ldr	r5, [r0, #8]
 800525c:	f001 f8ae 	bl	80063bc <xTaskGetCurrentTaskHandle>
 8005260:	4285      	cmp	r5, r0
 8005262:	d00a      	beq.n	800527a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8005264:	2000      	movs	r0, #0
	}
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8005278:	e7fe      	b.n	8005278 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800527a:	68e3      	ldr	r3, [r4, #12]
 800527c:	3b01      	subs	r3, #1
 800527e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005280:	b10b      	cbz	r3, 8005286 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8005282:	2001      	movs	r0, #1
		return xReturn;
 8005284:	e7ef      	b.n	8005266 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005286:	461a      	mov	r2, r3
 8005288:	4619      	mov	r1, r3
 800528a:	4620      	mov	r0, r4
 800528c:	f7ff fef8 	bl	8005080 <xQueueGenericSend>
			xReturn = pdPASS;
 8005290:	2001      	movs	r0, #1
 8005292:	e7e8      	b.n	8005266 <xQueueGiveMutexRecursive+0x12>

08005294 <xQueueGenericSendFromISR>:
{
 8005294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005298:	b190      	cbz	r0, 80052c0 <xQueueGenericSendFromISR+0x2c>
 800529a:	460f      	mov	r7, r1
 800529c:	4616      	mov	r6, r2
 800529e:	461c      	mov	r4, r3
 80052a0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a2:	b1b1      	cbz	r1, 80052d2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a4:	2c02      	cmp	r4, #2
 80052a6:	d120      	bne.n	80052ea <xQueueGenericSendFromISR+0x56>
 80052a8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d01d      	beq.n	80052ea <xQueueGenericSendFromISR+0x56>
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	e7fe      	b.n	80052be <xQueueGenericSendFromISR+0x2a>
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0e5      	beq.n	80052a4 <xQueueGenericSendFromISR+0x10>
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052ea:	f001 fd29 	bl	8006d40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052ee:	f3ef 8811 	mrs	r8, BASEPRI
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005302:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8005304:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8005306:	429a      	cmp	r2, r3
 8005308:	d306      	bcc.n	8005318 <xQueueGenericSendFromISR+0x84>
 800530a:	2c02      	cmp	r4, #2
 800530c:	d004      	beq.n	8005318 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800530e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005310:	f388 8811 	msr	BASEPRI, r8
}
 8005314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005318:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800531c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005320:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005322:	4622      	mov	r2, r4
 8005324:	4639      	mov	r1, r7
 8005326:	4628      	mov	r0, r5
 8005328:	f7ff fd65 	bl	8004df6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800532c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8005330:	d006      	beq.n	8005340 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005332:	f109 0301 	add.w	r3, r9, #1
 8005336:	b25b      	sxtb	r3, r3
 8005338:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800533c:	2001      	movs	r0, #1
 800533e:	e7e7      	b.n	8005310 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005340:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005342:	b90b      	cbnz	r3, 8005348 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8005344:	2001      	movs	r0, #1
 8005346:	e7e3      	b.n	8005310 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005348:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800534c:	f000 fed8 	bl	8006100 <xTaskRemoveFromEventList>
 8005350:	b118      	cbz	r0, 800535a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8005352:	b126      	cbz	r6, 800535e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005354:	2001      	movs	r0, #1
 8005356:	6030      	str	r0, [r6, #0]
 8005358:	e7da      	b.n	8005310 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800535a:	2001      	movs	r0, #1
 800535c:	e7d8      	b.n	8005310 <xQueueGenericSendFromISR+0x7c>
 800535e:	2001      	movs	r0, #1
 8005360:	e7d6      	b.n	8005310 <xQueueGenericSendFromISR+0x7c>

08005362 <xQueueReceive>:
{
 8005362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005364:	b085      	sub	sp, #20
 8005366:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005368:	b190      	cbz	r0, 8005390 <xQueueReceive+0x2e>
 800536a:	460f      	mov	r7, r1
 800536c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536e:	b1c1      	cbz	r1, 80053a2 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005370:	f001 f82a 	bl	80063c8 <xTaskGetSchedulerState>
 8005374:	4606      	mov	r6, r0
 8005376:	bb00      	cbnz	r0, 80053ba <xQueueReceive+0x58>
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d05e      	beq.n	800543c <xQueueReceive+0xda>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	e7fe      	b.n	800538e <xQueueReceive+0x2c>
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80053a0:	e7fe      	b.n	80053a0 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0e3      	beq.n	8005370 <xQueueReceive+0xe>
 80053a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	e7fe      	b.n	80053b8 <xQueueReceive+0x56>
 80053ba:	2600      	movs	r6, #0
 80053bc:	e03e      	b.n	800543c <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053be:	4639      	mov	r1, r7
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff fd53 	bl	8004e6c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053c6:	3d01      	subs	r5, #1
 80053c8:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	b923      	cbnz	r3, 80053d8 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80053ce:	f001 fbb3 	bl	8006b38 <vPortExitCritical>
				return pdPASS;
 80053d2:	2001      	movs	r0, #1
}
 80053d4:	b005      	add	sp, #20
 80053d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d8:	f104 0010 	add.w	r0, r4, #16
 80053dc:	f000 fe90 	bl	8006100 <xTaskRemoveFromEventList>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d0f4      	beq.n	80053ce <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80053e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80053e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	e7e9      	b.n	80053ce <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80053fa:	f001 fb9d 	bl	8006b38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80053fe:	2000      	movs	r0, #0
 8005400:	e7e8      	b.n	80053d4 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005402:	a802      	add	r0, sp, #8
 8005404:	f000 fec2 	bl	800618c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005408:	2601      	movs	r6, #1
 800540a:	e021      	b.n	8005450 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800540c:	2300      	movs	r3, #0
 800540e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005412:	e029      	b.n	8005468 <xQueueReceive+0x106>
 8005414:	2300      	movs	r3, #0
 8005416:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800541a:	e02b      	b.n	8005474 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800541c:	4620      	mov	r0, r4
 800541e:	f7ff fd37 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005422:	f000 fd31 	bl	8005e88 <xTaskResumeAll>
 8005426:	e009      	b.n	800543c <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff fd31 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800542e:	f000 fd2b 	bl	8005e88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff fcd2 	bl	8004ddc <prvIsQueueEmpty>
 8005438:	2800      	cmp	r0, #0
 800543a:	d13f      	bne.n	80054bc <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800543c:	f001 fb5a 	bl	8006af4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005440:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005442:	2d00      	cmp	r5, #0
 8005444:	d1bb      	bne.n	80053be <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005446:	9b01      	ldr	r3, [sp, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0d6      	beq.n	80053fa <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800544c:	2e00      	cmp	r6, #0
 800544e:	d0d8      	beq.n	8005402 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8005450:	f001 fb72 	bl	8006b38 <vPortExitCritical>
		vTaskSuspendAll();
 8005454:	f000 fc70 	bl	8005d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005458:	f001 fb4c 	bl	8006af4 <vPortEnterCritical>
 800545c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005460:	b25b      	sxtb	r3, r3
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005466:	d0d1      	beq.n	800540c <xQueueReceive+0xaa>
 8005468:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005472:	d0cf      	beq.n	8005414 <xQueueReceive+0xb2>
 8005474:	f001 fb60 	bl	8006b38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005478:	a901      	add	r1, sp, #4
 800547a:	a802      	add	r0, sp, #8
 800547c:	f000 fe92 	bl	80061a4 <xTaskCheckForTimeOut>
 8005480:	2800      	cmp	r0, #0
 8005482:	d1d1      	bne.n	8005428 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005484:	4620      	mov	r0, r4
 8005486:	f7ff fca9 	bl	8004ddc <prvIsQueueEmpty>
 800548a:	2800      	cmp	r0, #0
 800548c:	d0c6      	beq.n	800541c <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800548e:	9901      	ldr	r1, [sp, #4]
 8005490:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005494:	f000 fe00 	bl	8006098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff fcf9 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800549e:	f000 fcf3 	bl	8005e88 <xTaskResumeAll>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d1ca      	bne.n	800543c <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80054a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80054aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	e7bf      	b.n	800543c <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80054bc:	2000      	movs	r0, #0
 80054be:	e789      	b.n	80053d4 <xQueueReceive+0x72>

080054c0 <xQueueSemaphoreTake>:
{
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80054c6:	b158      	cbz	r0, 80054e0 <xQueueSemaphoreTake+0x20>
 80054c8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80054ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80054cc:	b18b      	cbz	r3, 80054f2 <xQueueSemaphoreTake+0x32>
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	e7fe      	b.n	80054de <xQueueSemaphoreTake+0x1e>
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80054f0:	e7fe      	b.n	80054f0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f2:	f000 ff69 	bl	80063c8 <xTaskGetSchedulerState>
 80054f6:	4605      	mov	r5, r0
 80054f8:	b950      	cbnz	r0, 8005510 <xQueueSemaphoreTake+0x50>
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	b15b      	cbz	r3, 8005516 <xQueueSemaphoreTake+0x56>
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	e7fe      	b.n	800550e <xQueueSemaphoreTake+0x4e>
 8005510:	2600      	movs	r6, #0
 8005512:	4635      	mov	r5, r6
 8005514:	e055      	b.n	80055c2 <xQueueSemaphoreTake+0x102>
 8005516:	4606      	mov	r6, r0
 8005518:	e053      	b.n	80055c2 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800551a:	3b01      	subs	r3, #1
 800551c:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	b13b      	cbz	r3, 8005532 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	b94b      	cbnz	r3, 800553a <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8005526:	f001 fb07 	bl	8006b38 <vPortExitCritical>
				return pdPASS;
 800552a:	2601      	movs	r6, #1
}
 800552c:	4630      	mov	r0, r6
 800552e:	b004      	add	sp, #16
 8005530:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005532:	f001 f83d 	bl	80065b0 <pvTaskIncrementMutexHeldCount>
 8005536:	60a0      	str	r0, [r4, #8]
 8005538:	e7f3      	b.n	8005522 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800553a:	f104 0010 	add.w	r0, r4, #16
 800553e:	f000 fddf 	bl	8006100 <xTaskRemoveFromEventList>
 8005542:	2800      	cmp	r0, #0
 8005544:	d0ef      	beq.n	8005526 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8005546:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800554a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800554e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	e7e4      	b.n	8005526 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800555c:	b146      	cbz	r6, 8005570 <xQueueSemaphoreTake+0xb0>
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	e7fe      	b.n	800556e <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8005570:	f001 fae2 	bl	8006b38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005574:	e7da      	b.n	800552c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005576:	a802      	add	r0, sp, #8
 8005578:	f000 fe08 	bl	800618c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557c:	2501      	movs	r5, #1
 800557e:	e02a      	b.n	80055d6 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8005580:	2300      	movs	r3, #0
 8005582:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005586:	e032      	b.n	80055ee <xQueueSemaphoreTake+0x12e>
 8005588:	2300      	movs	r3, #0
 800558a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800558e:	e034      	b.n	80055fa <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8005590:	f001 fab0 	bl	8006af4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005594:	68a0      	ldr	r0, [r4, #8]
 8005596:	f000 ff27 	bl	80063e8 <xTaskPriorityInherit>
 800559a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800559c:	f001 facc 	bl	8006b38 <vPortExitCritical>
 80055a0:	e03b      	b.n	800561a <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7ff fc74 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055a8:	f000 fc6e 	bl	8005e88 <xTaskResumeAll>
 80055ac:	e009      	b.n	80055c2 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7ff fc6e 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055b4:	f000 fc68 	bl	8005e88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7ff fc0f 	bl	8004ddc <prvIsQueueEmpty>
 80055be:	2800      	cmp	r0, #0
 80055c0:	d142      	bne.n	8005648 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80055c2:	f001 fa97 	bl	8006af4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1a6      	bne.n	800551a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80055cc:	9b01      	ldr	r3, [sp, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0c4      	beq.n	800555c <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	d0cf      	beq.n	8005576 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80055d6:	f001 faaf 	bl	8006b38 <vPortExitCritical>
		vTaskSuspendAll();
 80055da:	f000 fbad 	bl	8005d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055de:	f001 fa89 	bl	8006af4 <vPortEnterCritical>
 80055e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055ec:	d0c8      	beq.n	8005580 <xQueueSemaphoreTake+0xc0>
 80055ee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80055f2:	b25b      	sxtb	r3, r3
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055f8:	d0c6      	beq.n	8005588 <xQueueSemaphoreTake+0xc8>
 80055fa:	f001 fa9d 	bl	8006b38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055fe:	a901      	add	r1, sp, #4
 8005600:	a802      	add	r0, sp, #8
 8005602:	f000 fdcf 	bl	80061a4 <xTaskCheckForTimeOut>
 8005606:	2800      	cmp	r0, #0
 8005608:	d1d1      	bne.n	80055ae <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff fbe6 	bl	8004ddc <prvIsQueueEmpty>
 8005610:	2800      	cmp	r0, #0
 8005612:	d0c6      	beq.n	80055a2 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ba      	beq.n	8005590 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800561a:	9901      	ldr	r1, [sp, #4]
 800561c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005620:	f000 fd3a 	bl	8006098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff fc33 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800562a:	f000 fc2d 	bl	8005e88 <xTaskResumeAll>
 800562e:	2800      	cmp	r0, #0
 8005630:	d1c7      	bne.n	80055c2 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8005632:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	e7bc      	b.n	80055c2 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8005648:	b90e      	cbnz	r6, 800564e <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800564a:	2600      	movs	r6, #0
 800564c:	e76e      	b.n	800552c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800564e:	f001 fa51 	bl	8006af4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005652:	4620      	mov	r0, r4
 8005654:	f7ff fbab 	bl	8004dae <prvGetDisinheritPriorityAfterTimeout>
 8005658:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800565a:	68a0      	ldr	r0, [r4, #8]
 800565c:	f000 ff58 	bl	8006510 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005660:	f001 fa6a 	bl	8006b38 <vPortExitCritical>
 8005664:	e7f1      	b.n	800564a <xQueueSemaphoreTake+0x18a>

08005666 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8005666:	b180      	cbz	r0, 800568a <xQueueTakeMutexRecursive+0x24>
	{
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	460c      	mov	r4, r1
 800566c:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800566e:	6886      	ldr	r6, [r0, #8]
 8005670:	f000 fea4 	bl	80063bc <xTaskGetCurrentTaskHandle>
 8005674:	4286      	cmp	r6, r0
 8005676:	d011      	beq.n	800569c <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005678:	4621      	mov	r1, r4
 800567a:	4628      	mov	r0, r5
 800567c:	f7ff ff20 	bl	80054c0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8005680:	b180      	cbz	r0, 80056a4 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005682:	68eb      	ldr	r3, [r5, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8005688:	e00c      	b.n	80056a4 <xQueueTakeMutexRecursive+0x3e>
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800569a:	e7fe      	b.n	800569a <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800569c:	68eb      	ldr	r3, [r5, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80056a2:	2001      	movs	r0, #1
	}
 80056a4:	bd70      	pop	{r4, r5, r6, pc}

080056a6 <xQueueReceiveFromISR>:
{
 80056a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80056aa:	b1b0      	cbz	r0, 80056da <xQueueReceiveFromISR+0x34>
 80056ac:	460d      	mov	r5, r1
 80056ae:	4690      	mov	r8, r2
 80056b0:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b2:	b1d9      	cbz	r1, 80056ec <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056b4:	f001 fb44 	bl	8006d40 <vPortValidateInterruptPriority>
	__asm volatile
 80056b8:	f3ef 8711 	mrs	r7, BASEPRI
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056cc:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056ce:	b9ce      	cbnz	r6, 8005704 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80056d0:	2000      	movs	r0, #0
	__asm volatile
 80056d2:	f387 8811 	msr	BASEPRI, r7
}
 80056d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80056ea:	e7fe      	b.n	80056ea <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0e0      	beq.n	80056b4 <xQueueReceiveFromISR+0xe>
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	e7fe      	b.n	8005702 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005704:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8005708:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800570c:	4629      	mov	r1, r5
 800570e:	4620      	mov	r0, r4
 8005710:	f7ff fbac 	bl	8004e6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005714:	1e73      	subs	r3, r6, #1
 8005716:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005718:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 800571c:	d006      	beq.n	800572c <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800571e:	f109 0301 	add.w	r3, r9, #1
 8005722:	b25b      	sxtb	r3, r3
 8005724:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8005728:	2001      	movs	r0, #1
 800572a:	e7d2      	b.n	80056d2 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	b90b      	cbnz	r3, 8005734 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8005730:	2001      	movs	r0, #1
 8005732:	e7ce      	b.n	80056d2 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005734:	f104 0010 	add.w	r0, r4, #16
 8005738:	f000 fce2 	bl	8006100 <xTaskRemoveFromEventList>
 800573c:	b130      	cbz	r0, 800574c <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800573e:	f1b8 0f00 	cmp.w	r8, #0
 8005742:	d005      	beq.n	8005750 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005744:	2001      	movs	r0, #1
 8005746:	f8c8 0000 	str.w	r0, [r8]
 800574a:	e7c2      	b.n	80056d2 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800574c:	2001      	movs	r0, #1
 800574e:	e7c0      	b.n	80056d2 <xQueueReceiveFromISR+0x2c>
 8005750:	2001      	movs	r0, #1
 8005752:	e7be      	b.n	80056d2 <xQueueReceiveFromISR+0x2c>

08005754 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005754:	2300      	movs	r3, #0
 8005756:	2b07      	cmp	r3, #7
 8005758:	d80c      	bhi.n	8005774 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800575a:	4a07      	ldr	r2, [pc, #28]	@ (8005778 <vQueueAddToRegistry+0x24>)
 800575c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005760:	b10a      	cbz	r2, 8005766 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005762:	3301      	adds	r3, #1
 8005764:	e7f7      	b.n	8005756 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005766:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <vQueueAddToRegistry+0x24>)
 8005768:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800576c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8005770:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005772:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	20000b50 	.word	0x20000b50

0800577c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4604      	mov	r4, r0
 8005780:	460d      	mov	r5, r1
 8005782:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005784:	f001 f9b6 	bl	8006af4 <vPortEnterCritical>
 8005788:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005792:	d00d      	beq.n	80057b0 <vQueueWaitForMessageRestricted+0x34>
 8005794:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005798:	b25b      	sxtb	r3, r3
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800579e:	d00b      	beq.n	80057b8 <vQueueWaitForMessageRestricted+0x3c>
 80057a0:	f001 f9ca 	bl	8006b38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80057a6:	b15b      	cbz	r3, 80057c0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7ff fb71 	bl	8004e90 <prvUnlockQueue>
	}
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80057b0:	2300      	movs	r3, #0
 80057b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80057b6:	e7ed      	b.n	8005794 <vQueueWaitForMessageRestricted+0x18>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80057be:	e7ef      	b.n	80057a0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057c0:	4632      	mov	r2, r6
 80057c2:	4629      	mov	r1, r5
 80057c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80057c8:	f000 fc7e 	bl	80060c8 <vTaskPlaceOnEventListRestricted>
 80057cc:	e7ec      	b.n	80057a8 <vQueueWaitForMessageRestricted+0x2c>

080057ce <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80057ce:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80057d0:	e001      	b.n	80057d6 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 80057d2:	3001      	adds	r0, #1
			ulCount++;
 80057d4:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80057d6:	7802      	ldrb	r2, [r0, #0]
 80057d8:	2aa5      	cmp	r2, #165	@ 0xa5
 80057da:	d0fa      	beq.n	80057d2 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 80057dc:	f3c3 008f 	ubfx	r0, r3, #2, #16
 80057e0:	4770      	bx	lr
	...

080057e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e4:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <prvResetNextTaskUnblockTime+0x24>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	b923      	cbnz	r3, 80057f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057ec:	4b07      	ldr	r3, [pc, #28]	@ (800580c <prvResetNextTaskUnblockTime+0x28>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f6:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <prvResetNextTaskUnblockTime+0x24>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4b02      	ldr	r3, [pc, #8]	@ (800580c <prvResetNextTaskUnblockTime+0x28>)
 8005802:	601a      	str	r2, [r3, #0]
	}
}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000c08 	.word	0x20000c08
 800580c:	20000ba0 	.word	0x20000ba0

08005810 <prvInitialiseNewTask>:
{
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	4680      	mov	r8, r0
 8005816:	460d      	mov	r5, r1
 8005818:	4617      	mov	r7, r2
 800581a:	4699      	mov	r9, r3
 800581c:	9e08      	ldr	r6, [sp, #32]
 800581e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8005822:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005824:	0092      	lsls	r2, r2, #2
 8005826:	21a5      	movs	r1, #165	@ 0xa5
 8005828:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800582a:	f002 fa3d 	bl	8007ca8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800582e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005830:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8005834:	3a01      	subs	r2, #1
 8005836:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800583a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800583e:	6467      	str	r7, [r4, #68]	@ 0x44
	if( pcName != NULL )
 8005840:	2d00      	cmp	r5, #0
 8005842:	d043      	beq.n	80058cc <prvInitialiseNewTask+0xbc>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005844:	f04f 0c00 	mov.w	ip, #0
 8005848:	f1bc 0f0f 	cmp.w	ip, #15
 800584c:	d809      	bhi.n	8005862 <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800584e:	f815 300c 	ldrb.w	r3, [r5, ip]
 8005852:	eb04 020c 	add.w	r2, r4, ip
 8005856:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800585a:	b113      	cbz	r3, 8005862 <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800585c:	f10c 0c01 	add.w	ip, ip, #1
 8005860:	e7f2      	b.n	8005848 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005862:	2300      	movs	r3, #0
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005868:	2e37      	cmp	r6, #55	@ 0x37
 800586a:	d900      	bls.n	800586e <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800586c:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800586e:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005870:	6526      	str	r6, [r4, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8005872:	2500      	movs	r5, #0
 8005874:	6565      	str	r5, [r4, #84]	@ 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005876:	1d20      	adds	r0, r4, #4
 8005878:	f7ff fa5f 	bl	8004d3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800587c:	f104 0018 	add.w	r0, r4, #24
 8005880:	f7ff fa5b 	bl	8004d3a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005884:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005886:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800588a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800588c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 800588e:	65a5      	str	r5, [r4, #88]	@ 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8005890:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005894:	f884 50ac 	strb.w	r5, [r4, #172]	@ 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005898:	224c      	movs	r2, #76	@ 0x4c
 800589a:	4629      	mov	r1, r5
 800589c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80058a0:	f002 fa02 	bl	8007ca8 <memset>
 80058a4:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <prvInitialiseNewTask+0xc4>)
 80058a6:	6623      	str	r3, [r4, #96]	@ 0x60
 80058a8:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058ac:	6662      	str	r2, [r4, #100]	@ 0x64
 80058ae:	33d0      	adds	r3, #208	@ 0xd0
 80058b0:	66a3      	str	r3, [r4, #104]	@ 0x68
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058b2:	464a      	mov	r2, r9
 80058b4:	4641      	mov	r1, r8
 80058b6:	4638      	mov	r0, r7
 80058b8:	f001 f8f0 	bl	8006a9c <pxPortInitialiseStack>
 80058bc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80058be:	f1ba 0f00 	cmp.w	sl, #0
 80058c2:	d001      	beq.n	80058c8 <prvInitialiseNewTask+0xb8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058c4:	f8ca 4000 	str.w	r4, [sl]
}
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80058d2:	e7c9      	b.n	8005868 <prvInitialiseNewTask+0x58>
 80058d4:	200011ec 	.word	0x200011ec

080058d8 <prvInitialiseTaskLists>:
{
 80058d8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058da:	2400      	movs	r4, #0
 80058dc:	e007      	b.n	80058ee <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80058e2:	0093      	lsls	r3, r2, #2
 80058e4:	480e      	ldr	r0, [pc, #56]	@ (8005920 <prvInitialiseTaskLists+0x48>)
 80058e6:	4418      	add	r0, r3
 80058e8:	f7ff fa1c 	bl	8004d24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ec:	3401      	adds	r4, #1
 80058ee:	2c37      	cmp	r4, #55	@ 0x37
 80058f0:	d9f5      	bls.n	80058de <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80058f2:	4d0c      	ldr	r5, [pc, #48]	@ (8005924 <prvInitialiseTaskLists+0x4c>)
 80058f4:	4628      	mov	r0, r5
 80058f6:	f7ff fa15 	bl	8004d24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058fa:	4c0b      	ldr	r4, [pc, #44]	@ (8005928 <prvInitialiseTaskLists+0x50>)
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff fa11 	bl	8004d24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005902:	480a      	ldr	r0, [pc, #40]	@ (800592c <prvInitialiseTaskLists+0x54>)
 8005904:	f7ff fa0e 	bl	8004d24 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005908:	4809      	ldr	r0, [pc, #36]	@ (8005930 <prvInitialiseTaskLists+0x58>)
 800590a:	f7ff fa0b 	bl	8004d24 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800590e:	4809      	ldr	r0, [pc, #36]	@ (8005934 <prvInitialiseTaskLists+0x5c>)
 8005910:	f7ff fa08 	bl	8004d24 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005914:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <prvInitialiseTaskLists+0x60>)
 8005916:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005918:	4b08      	ldr	r3, [pc, #32]	@ (800593c <prvInitialiseTaskLists+0x64>)
 800591a:	601c      	str	r4, [r3, #0]
}
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	20000c34 	.word	0x20000c34
 8005924:	20000c20 	.word	0x20000c20
 8005928:	20000c0c 	.word	0x20000c0c
 800592c:	20000bf0 	.word	0x20000bf0
 8005930:	20000bdc 	.word	0x20000bdc
 8005934:	20000bc4 	.word	0x20000bc4
 8005938:	20000c08 	.word	0x20000c08
 800593c:	20000c04 	.word	0x20000c04

08005940 <prvAddNewTaskToReadyList>:
{
 8005940:	b510      	push	{r4, lr}
 8005942:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005944:	f001 f8d6 	bl	8006af4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005948:	4a22      	ldr	r2, [pc, #136]	@ (80059d4 <prvAddNewTaskToReadyList+0x94>)
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005950:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <prvAddNewTaskToReadyList+0x98>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b15b      	cbz	r3, 800596e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005956:	4b21      	ldr	r3, [pc, #132]	@ (80059dc <prvAddNewTaskToReadyList+0x9c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	b96b      	cbnz	r3, 8005978 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800595c:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <prvAddNewTaskToReadyList+0x98>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005962:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d807      	bhi.n	8005978 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <prvAddNewTaskToReadyList+0x98>)
 800596a:	601c      	str	r4, [r3, #0]
 800596c:	e004      	b.n	8005978 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800596e:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <prvAddNewTaskToReadyList+0x98>)
 8005970:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d029      	beq.n	80059cc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8005978:	4a19      	ldr	r2, [pc, #100]	@ (80059e0 <prvAddNewTaskToReadyList+0xa0>)
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005980:	64a3      	str	r3, [r4, #72]	@ 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8005982:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005984:	4b17      	ldr	r3, [pc, #92]	@ (80059e4 <prvAddNewTaskToReadyList+0xa4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4298      	cmp	r0, r3
 800598a:	d901      	bls.n	8005990 <prvAddNewTaskToReadyList+0x50>
 800598c:	4b15      	ldr	r3, [pc, #84]	@ (80059e4 <prvAddNewTaskToReadyList+0xa4>)
 800598e:	6018      	str	r0, [r3, #0]
 8005990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005994:	1d21      	adds	r1, r4, #4
 8005996:	4b14      	ldr	r3, [pc, #80]	@ (80059e8 <prvAddNewTaskToReadyList+0xa8>)
 8005998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800599c:	f7ff f9d0 	bl	8004d40 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80059a0:	f001 f8ca 	bl	8006b38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80059a4:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <prvAddNewTaskToReadyList+0x9c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	b17b      	cbz	r3, 80059ca <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059aa:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <prvAddNewTaskToReadyList+0x98>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d209      	bcs.n	80059ca <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80059b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	f3bf 8f6f 	isb	sy
}
 80059ca:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80059cc:	f7ff ff84 	bl	80058d8 <prvInitialiseTaskLists>
 80059d0:	e7d2      	b.n	8005978 <prvAddNewTaskToReadyList+0x38>
 80059d2:	bf00      	nop
 80059d4:	20000bc0 	.word	0x20000bc0
 80059d8:	20001094 	.word	0x20001094
 80059dc:	20000bb4 	.word	0x20000bb4
 80059e0:	20000ba4 	.word	0x20000ba4
 80059e4:	20000bb8 	.word	0x20000bb8
 80059e8:	20000c34 	.word	0x20000c34

080059ec <prvDeleteTCB>:
	{
 80059ec:	b510      	push	{r4, lr}
 80059ee:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059f0:	305c      	adds	r0, #92	@ 0x5c
 80059f2:	f002 f975 	bl	8007ce0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059f6:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80059fa:	b163      	cbz	r3, 8005a16 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d011      	beq.n	8005a24 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d00e      	beq.n	8005a22 <prvDeleteTCB+0x36>
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	e7fe      	b.n	8005a14 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005a16:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005a18:	f001 faa6 	bl	8006f68 <vPortFree>
				vPortFree( pxTCB );
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f001 faa3 	bl	8006f68 <vPortFree>
	}
 8005a22:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005a24:	4620      	mov	r0, r4
 8005a26:	f001 fa9f 	bl	8006f68 <vPortFree>
 8005a2a:	e7fa      	b.n	8005a22 <prvDeleteTCB+0x36>

08005a2c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a6c <prvCheckTasksWaitingTermination+0x40>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	b1d3      	cbz	r3, 8005a68 <prvCheckTasksWaitingTermination+0x3c>
{
 8005a32:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005a34:	f001 f85e 	bl	8006af4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a38:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <prvCheckTasksWaitingTermination+0x44>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3e:	1d20      	adds	r0, r4, #4
 8005a40:	f7ff f9a2 	bl	8004d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a44:	4a0b      	ldr	r2, [pc, #44]	@ (8005a74 <prvCheckTasksWaitingTermination+0x48>)
 8005a46:	6813      	ldr	r3, [r2, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a4c:	4a07      	ldr	r2, [pc, #28]	@ (8005a6c <prvCheckTasksWaitingTermination+0x40>)
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005a54:	f001 f870 	bl	8006b38 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7ff ffc7 	bl	80059ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a5e:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <prvCheckTasksWaitingTermination+0x40>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e6      	bne.n	8005a34 <prvCheckTasksWaitingTermination+0x8>
}
 8005a66:	bd10      	pop	{r4, pc}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000bd8 	.word	0x20000bd8
 8005a70:	20000bdc 	.word	0x20000bdc
 8005a74:	20000bc0 	.word	0x20000bc0

08005a78 <prvIdleTask>:
{
 8005a78:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005a7a:	f7ff ffd7 	bl	8005a2c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a7e:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <prvIdleTask+0x24>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d9f9      	bls.n	8005a7a <prvIdleTask+0x2>
				taskYIELD();
 8005a86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	e7ee      	b.n	8005a7a <prvIdleTask+0x2>
 8005a9c:	20000c34 	.word	0x20000c34

08005aa0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa6:	4b17      	ldr	r3, [pc, #92]	@ (8005b04 <prvAddCurrentTaskToDelayedList+0x64>)
 8005aa8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aaa:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <prvAddCurrentTaskToDelayedList+0x68>)
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	3004      	adds	r0, #4
 8005ab0:	f7ff f96a 	bl	8004d88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8005ab8:	d00d      	beq.n	8005ad6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aba:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005abc:	4b12      	ldr	r3, [pc, #72]	@ (8005b08 <prvAddCurrentTaskToDelayedList+0x68>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005ac2:	42a6      	cmp	r6, r4
 8005ac4:	d910      	bls.n	8005ae8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac6:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <prvAddCurrentTaskToDelayedList+0x6c>)
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <prvAddCurrentTaskToDelayedList+0x68>)
 8005acc:	6819      	ldr	r1, [r3, #0]
 8005ace:	3104      	adds	r1, #4
 8005ad0:	f7ff f941 	bl	8004d56 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	d0ef      	beq.n	8005aba <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ada:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <prvAddCurrentTaskToDelayedList+0x68>)
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	3104      	adds	r1, #4
 8005ae0:	480b      	ldr	r0, [pc, #44]	@ (8005b10 <prvAddCurrentTaskToDelayedList+0x70>)
 8005ae2:	f7ff f92d 	bl	8004d40 <vListInsertEnd>
 8005ae6:	e7f5      	b.n	8005ad4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0x74>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <prvAddCurrentTaskToDelayedList+0x68>)
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	3104      	adds	r1, #4
 8005af2:	f7ff f930 	bl	8004d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005af6:	4b08      	ldr	r3, [pc, #32]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x78>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	d9ea      	bls.n	8005ad4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8005afe:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x78>)
 8005b00:	601c      	str	r4, [r3, #0]
}
 8005b02:	e7e7      	b.n	8005ad4 <prvAddCurrentTaskToDelayedList+0x34>
 8005b04:	20000bbc 	.word	0x20000bbc
 8005b08:	20001094 	.word	0x20001094
 8005b0c:	20000c04 	.word	0x20000c04
 8005b10:	20000bc4 	.word	0x20000bc4
 8005b14:	20000c08 	.word	0x20000c08
 8005b18:	20000ba0 	.word	0x20000ba0

08005b1c <xTaskCreateStatic>:
	{
 8005b1c:	b530      	push	{r4, r5, lr}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005b22:	b17c      	cbz	r4, 8005b44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b24:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005b26:	b1b5      	cbz	r5, 8005b56 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b28:	25b0      	movs	r5, #176	@ 0xb0
 8005b2a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b2c:	9d04      	ldr	r5, [sp, #16]
 8005b2e:	2db0      	cmp	r5, #176	@ 0xb0
 8005b30:	d01a      	beq.n	8005b68 <xTaskCreateStatic+0x4c>
 8005b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	e7fe      	b.n	8005b42 <xTaskCreateStatic+0x26>
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005b54:	e7fe      	b.n	8005b54 <xTaskCreateStatic+0x38>
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005b66:	e7fe      	b.n	8005b66 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b68:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b6a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005b6c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b6e:	2402      	movs	r4, #2
 8005b70:	f885 40ad 	strb.w	r4, [r5, #173]	@ 0xad
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b74:	2400      	movs	r4, #0
 8005b76:	9403      	str	r4, [sp, #12]
 8005b78:	9502      	str	r5, [sp, #8]
 8005b7a:	ac05      	add	r4, sp, #20
 8005b7c:	9401      	str	r4, [sp, #4]
 8005b7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b80:	9400      	str	r4, [sp, #0]
 8005b82:	f7ff fe45 	bl	8005810 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b86:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005b88:	f7ff feda 	bl	8005940 <prvAddNewTaskToReadyList>
	}
 8005b8c:	9805      	ldr	r0, [sp, #20]
 8005b8e:	b007      	add	sp, #28
 8005b90:	bd30      	pop	{r4, r5, pc}

08005b92 <xTaskCreate>:
	{
 8005b92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b96:	b085      	sub	sp, #20
 8005b98:	4607      	mov	r7, r0
 8005b9a:	4688      	mov	r8, r1
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ba0:	0090      	lsls	r0, r2, #2
 8005ba2:	f001 f95f 	bl	8006e64 <pvPortMalloc>
			if( pxStack != NULL )
 8005ba6:	b308      	cbz	r0, 8005bec <xTaskCreate+0x5a>
 8005ba8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005baa:	20b0      	movs	r0, #176	@ 0xb0
 8005bac:	f001 f95a 	bl	8006e64 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	b1a8      	cbz	r0, 8005be0 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005bb4:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f880 30ad 	strb.w	r3, [r0, #173]	@ 0xad
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bbe:	9303      	str	r3, [sp, #12]
 8005bc0:	9002      	str	r0, [sp, #8]
 8005bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4633      	mov	r3, r6
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4641      	mov	r1, r8
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff fe1d 	bl	8005810 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7ff feb2 	bl	8005940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bdc:	2001      	movs	r0, #1
 8005bde:	e007      	b.n	8005bf0 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8005be0:	4648      	mov	r0, r9
 8005be2:	f001 f9c1 	bl	8006f68 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005be6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bea:	e001      	b.n	8005bf0 <xTaskCreate+0x5e>
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8005bf0:	b005      	add	sp, #20
 8005bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005bf8 <eTaskGetState>:
	{
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8005bfa:	b1d0      	cbz	r0, 8005c32 <eTaskGetState+0x3a>
 8005bfc:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <eTaskGetState+0x7c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4283      	cmp	r3, r0
 8005c04:	d02d      	beq.n	8005c62 <eTaskGetState+0x6a>
			taskENTER_CRITICAL();
 8005c06:	f000 ff75 	bl	8006af4 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005c0a:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <eTaskGetState+0x80>)
 8005c0e:	681e      	ldr	r6, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005c10:	4b1a      	ldr	r3, [pc, #104]	@ (8005c7c <eTaskGetState+0x84>)
 8005c12:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
 8005c14:	f000 ff90 	bl	8006b38 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005c18:	42b5      	cmp	r5, r6
 8005c1a:	d024      	beq.n	8005c66 <eTaskGetState+0x6e>
 8005c1c:	42bd      	cmp	r5, r7
 8005c1e:	d024      	beq.n	8005c6a <eTaskGetState+0x72>
				else if( pxStateList == &xSuspendedTaskList )
 8005c20:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <eTaskGetState+0x88>)
 8005c22:	429d      	cmp	r5, r3
 8005c24:	d00e      	beq.n	8005c44 <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005c26:	4b17      	ldr	r3, [pc, #92]	@ (8005c84 <eTaskGetState+0x8c>)
 8005c28:	429d      	cmp	r5, r3
 8005c2a:	d020      	beq.n	8005c6e <eTaskGetState+0x76>
 8005c2c:	b1bd      	cbz	r5, 8005c5e <eTaskGetState+0x66>
				eReturn = eReady;
 8005c2e:	2001      	movs	r0, #1
 8005c30:	e018      	b.n	8005c64 <eTaskGetState+0x6c>
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
 8005c42:	e7fe      	b.n	8005c42 <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005c44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005c46:	b10b      	cbz	r3, 8005c4c <eTaskGetState+0x54>
						eReturn = eBlocked;
 8005c48:	2002      	movs	r0, #2
 8005c4a:	e00b      	b.n	8005c64 <eTaskGetState+0x6c>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005c4c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <eTaskGetState+0x62>
								eReturn = eSuspended;
 8005c56:	2003      	movs	r0, #3
 8005c58:	e004      	b.n	8005c64 <eTaskGetState+0x6c>
								eReturn = eBlocked;
 8005c5a:	2002      	movs	r0, #2
 8005c5c:	e002      	b.n	8005c64 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 8005c5e:	2004      	movs	r0, #4
 8005c60:	e000      	b.n	8005c64 <eTaskGetState+0x6c>
			eReturn = eRunning;
 8005c62:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 8005c66:	2002      	movs	r0, #2
 8005c68:	e7fc      	b.n	8005c64 <eTaskGetState+0x6c>
 8005c6a:	2002      	movs	r0, #2
 8005c6c:	e7fa      	b.n	8005c64 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 8005c6e:	2004      	movs	r0, #4
 8005c70:	e7f8      	b.n	8005c64 <eTaskGetState+0x6c>
 8005c72:	bf00      	nop
 8005c74:	20001094 	.word	0x20001094
 8005c78:	20000c08 	.word	0x20000c08
 8005c7c:	20000c04 	.word	0x20000c04
 8005c80:	20000bc4 	.word	0x20000bc4
 8005c84:	20000bdc 	.word	0x20000bdc

08005c88 <vTaskStartScheduler>:
{
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c8c:	2400      	movs	r4, #0
 8005c8e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c90:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c92:	aa07      	add	r2, sp, #28
 8005c94:	a906      	add	r1, sp, #24
 8005c96:	a805      	add	r0, sp, #20
 8005c98:	f7ff f82c 	bl	8004cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c9c:	9b05      	ldr	r3, [sp, #20]
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	9400      	str	r4, [sp, #0]
 8005ca6:	4623      	mov	r3, r4
 8005ca8:	9a07      	ldr	r2, [sp, #28]
 8005caa:	491b      	ldr	r1, [pc, #108]	@ (8005d18 <vTaskStartScheduler+0x90>)
 8005cac:	481b      	ldr	r0, [pc, #108]	@ (8005d1c <vTaskStartScheduler+0x94>)
 8005cae:	f7ff ff35 	bl	8005b1c <xTaskCreateStatic>
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d20 <vTaskStartScheduler+0x98>)
 8005cb4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005cb6:	b1f8      	cbz	r0, 8005cf8 <vTaskStartScheduler+0x70>
			xReturn = xTimerCreateTimerTask();
 8005cb8:	f000 fcf4 	bl	80066a4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005cbc:	2801      	cmp	r0, #1
 8005cbe:	d11c      	bne.n	8005cfa <vTaskStartScheduler+0x72>
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cd0:	4b14      	ldr	r3, [pc, #80]	@ (8005d24 <vTaskStartScheduler+0x9c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	335c      	adds	r3, #92	@ 0x5c
 8005cd6:	4a14      	ldr	r2, [pc, #80]	@ (8005d28 <vTaskStartScheduler+0xa0>)
 8005cd8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cda:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <vTaskStartScheduler+0xa4>)
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ce0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <vTaskStartScheduler+0xa8>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ce8:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <vTaskStartScheduler+0xac>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005cee:	f7fb fa2d 	bl	800114c <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8005cf2:	f000 ff99 	bl	8006c28 <xPortStartScheduler>
 8005cf6:	e003      	b.n	8005d00 <vTaskStartScheduler+0x78>
			xReturn = pdFAIL;
 8005cf8:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cfa:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8005cfe:	d001      	beq.n	8005d04 <vTaskStartScheduler+0x7c>
}
 8005d00:	b008      	add	sp, #32
 8005d02:	bd10      	pop	{r4, pc}
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d14:	e7fe      	b.n	8005d14 <vTaskStartScheduler+0x8c>
 8005d16:	bf00      	nop
 8005d18:	08009c54 	.word	0x08009c54
 8005d1c:	08005a79 	.word	0x08005a79
 8005d20:	20000b9c 	.word	0x20000b9c
 8005d24:	20001094 	.word	0x20001094
 8005d28:	20000020 	.word	0x20000020
 8005d2c:	20000ba0 	.word	0x20000ba0
 8005d30:	20000bb4 	.word	0x20000bb4
 8005d34:	20000bbc 	.word	0x20000bbc

08005d38 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005d38:	4a02      	ldr	r2, [pc, #8]	@ (8005d44 <vTaskSuspendAll+0xc>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000b98 	.word	0x20000b98

08005d48 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005d48:	4b01      	ldr	r3, [pc, #4]	@ (8005d50 <xTaskGetTickCount+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000bbc 	.word	0x20000bbc

08005d54 <xTaskGetTickCountFromISR>:
{
 8005d54:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d56:	f000 fff3 	bl	8006d40 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005d5a:	4b01      	ldr	r3, [pc, #4]	@ (8005d60 <xTaskGetTickCountFromISR+0xc>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
}
 8005d5e:	bd08      	pop	{r3, pc}
 8005d60:	20000bbc 	.word	0x20000bbc

08005d64 <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
 8005d64:	4b01      	ldr	r3, [pc, #4]	@ (8005d6c <uxTaskGetNumberOfTasks+0x8>)
 8005d66:	6818      	ldr	r0, [r3, #0]
}
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000bc0 	.word	0x20000bc0

08005d70 <xTaskIncrementTick>:
{
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d72:	4b3a      	ldr	r3, [pc, #232]	@ (8005e5c <xTaskIncrementTick+0xec>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d169      	bne.n	8005e4e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d7a:	4b39      	ldr	r3, [pc, #228]	@ (8005e60 <xTaskIncrementTick+0xf0>)
 8005d7c:	681d      	ldr	r5, [r3, #0]
 8005d7e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005d80:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d82:	b9c5      	cbnz	r5, 8005db6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005d84:	4b37      	ldr	r3, [pc, #220]	@ (8005e64 <xTaskIncrementTick+0xf4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	b143      	cbz	r3, 8005d9e <xTaskIncrementTick+0x2e>
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	e7fe      	b.n	8005d9c <xTaskIncrementTick+0x2c>
 8005d9e:	4a31      	ldr	r2, [pc, #196]	@ (8005e64 <xTaskIncrementTick+0xf4>)
 8005da0:	6811      	ldr	r1, [r2, #0]
 8005da2:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <xTaskIncrementTick+0xf8>)
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	6010      	str	r0, [r2, #0]
 8005da8:	6019      	str	r1, [r3, #0]
 8005daa:	4a30      	ldr	r2, [pc, #192]	@ (8005e6c <xTaskIncrementTick+0xfc>)
 8005dac:	6813      	ldr	r3, [r2, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	f7ff fd17 	bl	80057e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005db6:	4b2e      	ldr	r3, [pc, #184]	@ (8005e70 <xTaskIncrementTick+0x100>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	42ab      	cmp	r3, r5
 8005dbc:	d93d      	bls.n	8005e3a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005dbe:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8005e74 <xTaskIncrementTick+0x104>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8005e78 <xTaskIncrementTick+0x108>)
 8005dce:	589b      	ldr	r3, [r3, r2]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d900      	bls.n	8005dd6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005dd4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8005dd6:	4b29      	ldr	r3, [pc, #164]	@ (8005e7c <xTaskIncrementTick+0x10c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d03c      	beq.n	8005e58 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005dde:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005de0:	e03a      	b.n	8005e58 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8005de2:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e64 <xTaskIncrementTick+0xf4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	b343      	cbz	r3, 8005e3e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dec:	4b1d      	ldr	r3, [pc, #116]	@ (8005e64 <xTaskIncrementTick+0xf4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005df4:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005df6:	429d      	cmp	r5, r3
 8005df8:	d326      	bcc.n	8005e48 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfa:	1d26      	adds	r6, r4, #4
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7fe ffc3 	bl	8004d88 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e02:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005e04:	b11b      	cbz	r3, 8005e0e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e06:	f104 0018 	add.w	r0, r4, #24
 8005e0a:	f7fe ffbd 	bl	8004d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e0e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005e10:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <xTaskIncrementTick+0x110>)
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <xTaskIncrementTick+0xac>
 8005e18:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <xTaskIncrementTick+0x110>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e20:	009a      	lsls	r2, r3, #2
 8005e22:	4631      	mov	r1, r6
 8005e24:	4814      	ldr	r0, [pc, #80]	@ (8005e78 <xTaskIncrementTick+0x108>)
 8005e26:	4410      	add	r0, r2
 8005e28:	f7fe ff8a 	bl	8004d40 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e2c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005e2e:	4b11      	ldr	r3, [pc, #68]	@ (8005e74 <xTaskIncrementTick+0x104>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d2d4      	bcs.n	8005de2 <xTaskIncrementTick+0x72>
 8005e38:	e7d4      	b.n	8005de4 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005e3a:	2700      	movs	r7, #0
 8005e3c:	e7d2      	b.n	8005de4 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <xTaskIncrementTick+0x100>)
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e44:	601a      	str	r2, [r3, #0]
					break;
 8005e46:	e7bb      	b.n	8005dc0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005e48:	4a09      	ldr	r2, [pc, #36]	@ (8005e70 <xTaskIncrementTick+0x100>)
 8005e4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e4c:	e7b8      	b.n	8005dc0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e84 <xTaskIncrementTick+0x114>)
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005e56:	2700      	movs	r7, #0
}
 8005e58:	4638      	mov	r0, r7
 8005e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e5c:	20000b98 	.word	0x20000b98
 8005e60:	20000bbc 	.word	0x20000bbc
 8005e64:	20000c08 	.word	0x20000c08
 8005e68:	20000c04 	.word	0x20000c04
 8005e6c:	20000ba8 	.word	0x20000ba8
 8005e70:	20000ba0 	.word	0x20000ba0
 8005e74:	20001094 	.word	0x20001094
 8005e78:	20000c34 	.word	0x20000c34
 8005e7c:	20000bac 	.word	0x20000bac
 8005e80:	20000bb8 	.word	0x20000bb8
 8005e84:	20000bb0 	.word	0x20000bb0

08005e88 <xTaskResumeAll>:
{
 8005e88:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005e8a:	4b35      	ldr	r3, [pc, #212]	@ (8005f60 <xTaskResumeAll+0xd8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	b943      	cbnz	r3, 8005ea2 <xTaskResumeAll+0x1a>
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	e7fe      	b.n	8005ea0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005ea2:	f000 fe27 	bl	8006af4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8005f60 <xTaskResumeAll+0xd8>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	3a01      	subs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d14f      	bne.n	8005f54 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005f64 <xTaskResumeAll+0xdc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b90b      	cbnz	r3, 8005ebe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005eba:	2400      	movs	r4, #0
 8005ebc:	e04b      	b.n	8005f56 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005ebe:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ec0:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <xTaskResumeAll+0xe0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	b31b      	cbz	r3, 8005f0e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec6:	4b28      	ldr	r3, [pc, #160]	@ (8005f68 <xTaskResumeAll+0xe0>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ecc:	f104 0018 	add.w	r0, r4, #24
 8005ed0:	f7fe ff5a 	bl	8004d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed4:	1d25      	adds	r5, r4, #4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f7fe ff56 	bl	8004d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005edc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005ede:	4b23      	ldr	r3, [pc, #140]	@ (8005f6c <xTaskResumeAll+0xe4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4298      	cmp	r0, r3
 8005ee4:	d901      	bls.n	8005eea <xTaskResumeAll+0x62>
 8005ee6:	4b21      	ldr	r3, [pc, #132]	@ (8005f6c <xTaskResumeAll+0xe4>)
 8005ee8:	6018      	str	r0, [r3, #0]
 8005eea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f70 <xTaskResumeAll+0xe8>)
 8005ef2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ef6:	f7fe ff23 	bl	8004d40 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005efa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005efc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <xTaskResumeAll+0xec>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3dc      	bcc.n	8005ec0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005f06:	4b1c      	ldr	r3, [pc, #112]	@ (8005f78 <xTaskResumeAll+0xf0>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e7d8      	b.n	8005ec0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005f0e:	b10c      	cbz	r4, 8005f14 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005f10:	f7ff fc68 	bl	80057e4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f14:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <xTaskResumeAll+0xf4>)
 8005f16:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005f18:	b984      	cbnz	r4, 8005f3c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005f1a:	4b17      	ldr	r3, [pc, #92]	@ (8005f78 <xTaskResumeAll+0xf0>)
 8005f1c:	681c      	ldr	r4, [r3, #0]
 8005f1e:	b1d4      	cbz	r4, 8005f56 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005f20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005f34:	2401      	movs	r4, #1
 8005f36:	e00e      	b.n	8005f56 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f38:	3c01      	subs	r4, #1
 8005f3a:	d007      	beq.n	8005f4c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005f3c:	f7ff ff18 	bl	8005d70 <xTaskIncrementTick>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d0f9      	beq.n	8005f38 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <xTaskResumeAll+0xf0>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e7f5      	b.n	8005f38 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <xTaskResumeAll+0xf4>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e7e2      	b.n	8005f1a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005f54:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005f56:	f000 fdef 	bl	8006b38 <vPortExitCritical>
}
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000b98 	.word	0x20000b98
 8005f64:	20000bc0 	.word	0x20000bc0
 8005f68:	20000bf0 	.word	0x20000bf0
 8005f6c:	20000bb8 	.word	0x20000bb8
 8005f70:	20000c34 	.word	0x20000c34
 8005f74:	20001094 	.word	0x20001094
 8005f78:	20000bac 	.word	0x20000bac
 8005f7c:	20000bb0 	.word	0x20000bb0

08005f80 <vTaskDelay>:
	{
 8005f80:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f82:	b1a8      	cbz	r0, 8005fb0 <vTaskDelay+0x30>
 8005f84:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005f86:	4b10      	ldr	r3, [pc, #64]	@ (8005fc8 <vTaskDelay+0x48>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	b143      	cbz	r3, 8005f9e <vTaskDelay+0x1e>
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	e7fe      	b.n	8005f9c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005f9e:	f7ff fecb 	bl	8005d38 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff fd7b 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005faa:	f7ff ff6d 	bl	8005e88 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005fae:	b948      	cbnz	r0, 8005fc4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005fb0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	f3bf 8f6f 	isb	sy
	}
 8005fc4:	bd10      	pop	{r4, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000b98 	.word	0x20000b98

08005fcc <vTaskSwitchContext>:
{
 8005fcc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fce:	4b2a      	ldr	r3, [pc, #168]	@ (8006078 <vTaskSwitchContext+0xac>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	b11b      	cbz	r3, 8005fdc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005fd4:	4b29      	ldr	r3, [pc, #164]	@ (800607c <vTaskSwitchContext+0xb0>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 8005fdc:	4b27      	ldr	r3, [pc, #156]	@ (800607c <vTaskSwitchContext+0xb0>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005fe2:	f7fb f8bf 	bl	8001164 <getRunTimeCounterValue>
 8005fe6:	4b26      	ldr	r3, [pc, #152]	@ (8006080 <vTaskSwitchContext+0xb4>)
 8005fe8:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005fea:	4b26      	ldr	r3, [pc, #152]	@ (8006084 <vTaskSwitchContext+0xb8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	d905      	bls.n	8005ffe <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005ff2:	4a25      	ldr	r2, [pc, #148]	@ (8006088 <vTaskSwitchContext+0xbc>)
 8005ff4:	6811      	ldr	r1, [r2, #0]
 8005ff6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005ff8:	1ac3      	subs	r3, r0, r3
 8005ffa:	441a      	add	r2, r3
 8005ffc:	658a      	str	r2, [r1, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005ffe:	4b21      	ldr	r3, [pc, #132]	@ (8006084 <vTaskSwitchContext+0xb8>)
 8006000:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <vTaskSwitchContext+0xc0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800600a:	0092      	lsls	r2, r2, #2
 800600c:	4920      	ldr	r1, [pc, #128]	@ (8006090 <vTaskSwitchContext+0xc4>)
 800600e:	588a      	ldr	r2, [r1, r2]
 8006010:	b95a      	cbnz	r2, 800602a <vTaskSwitchContext+0x5e>
 8006012:	b10b      	cbz	r3, 8006018 <vTaskSwitchContext+0x4c>
 8006014:	3b01      	subs	r3, #1
 8006016:	e7f6      	b.n	8006006 <vTaskSwitchContext+0x3a>
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	e7fe      	b.n	8006028 <vTaskSwitchContext+0x5c>
 800602a:	4608      	mov	r0, r1
 800602c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006030:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006034:	6851      	ldr	r1, [r2, #4]
 8006036:	6849      	ldr	r1, [r1, #4]
 8006038:	6051      	str	r1, [r2, #4]
 800603a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800603e:	0092      	lsls	r2, r2, #2
 8006040:	3208      	adds	r2, #8
 8006042:	4402      	add	r2, r0
 8006044:	4291      	cmp	r1, r2
 8006046:	d00f      	beq.n	8006068 <vTaskSwitchContext+0x9c>
 8006048:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800604c:	4a10      	ldr	r2, [pc, #64]	@ (8006090 <vTaskSwitchContext+0xc4>)
 800604e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	68d1      	ldr	r1, [r2, #12]
 8006056:	4a0c      	ldr	r2, [pc, #48]	@ (8006088 <vTaskSwitchContext+0xbc>)
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	490c      	ldr	r1, [pc, #48]	@ (800608c <vTaskSwitchContext+0xc0>)
 800605c:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	335c      	adds	r3, #92	@ 0x5c
 8006062:	4a0c      	ldr	r2, [pc, #48]	@ (8006094 <vTaskSwitchContext+0xc8>)
 8006064:	6013      	str	r3, [r2, #0]
}
 8006066:	e7b8      	b.n	8005fda <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006068:	6848      	ldr	r0, [r1, #4]
 800606a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800606e:	4a08      	ldr	r2, [pc, #32]	@ (8006090 <vTaskSwitchContext+0xc4>)
 8006070:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006074:	6050      	str	r0, [r2, #4]
 8006076:	e7e7      	b.n	8006048 <vTaskSwitchContext+0x7c>
 8006078:	20000b98 	.word	0x20000b98
 800607c:	20000bac 	.word	0x20000bac
 8006080:	20000b90 	.word	0x20000b90
 8006084:	20000b94 	.word	0x20000b94
 8006088:	20001094 	.word	0x20001094
 800608c:	20000bb8 	.word	0x20000bb8
 8006090:	20000c34 	.word	0x20000c34
 8006094:	20000020 	.word	0x20000020

08006098 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006098:	b158      	cbz	r0, 80060b2 <vTaskPlaceOnEventList+0x1a>
{
 800609a:	b510      	push	{r4, lr}
 800609c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800609e:	4a09      	ldr	r2, [pc, #36]	@ (80060c4 <vTaskPlaceOnEventList+0x2c>)
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	3118      	adds	r1, #24
 80060a4:	f7fe fe57 	bl	8004d56 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060a8:	2101      	movs	r1, #1
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7ff fcf8 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
}
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80060c2:	e7fe      	b.n	80060c2 <vTaskPlaceOnEventList+0x2a>
 80060c4:	20001094 	.word	0x20001094

080060c8 <vTaskPlaceOnEventListRestricted>:
	{
 80060c8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80060ca:	b170      	cbz	r0, 80060ea <vTaskPlaceOnEventListRestricted+0x22>
 80060cc:	460d      	mov	r5, r1
 80060ce:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060d0:	4a0a      	ldr	r2, [pc, #40]	@ (80060fc <vTaskPlaceOnEventListRestricted+0x34>)
 80060d2:	6811      	ldr	r1, [r2, #0]
 80060d4:	3118      	adds	r1, #24
 80060d6:	f7fe fe33 	bl	8004d40 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80060da:	b10c      	cbz	r4, 80060e0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80060dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060e0:	4621      	mov	r1, r4
 80060e2:	4628      	mov	r0, r5
 80060e4:	f7ff fcdc 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
	}
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80060fa:	e7fe      	b.n	80060fa <vTaskPlaceOnEventListRestricted+0x32>
 80060fc:	20001094 	.word	0x20001094

08006100 <xTaskRemoveFromEventList>:
{
 8006100:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006102:	68c3      	ldr	r3, [r0, #12]
 8006104:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006106:	b324      	cbz	r4, 8006152 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006108:	f104 0518 	add.w	r5, r4, #24
 800610c:	4628      	mov	r0, r5
 800610e:	f7fe fe3b 	bl	8004d88 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006112:	4b18      	ldr	r3, [pc, #96]	@ (8006174 <xTaskRemoveFromEventList+0x74>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	bb2b      	cbnz	r3, 8006164 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006118:	1d25      	adds	r5, r4, #4
 800611a:	4628      	mov	r0, r5
 800611c:	f7fe fe34 	bl	8004d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006120:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006122:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <xTaskRemoveFromEventList+0x78>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4298      	cmp	r0, r3
 8006128:	d901      	bls.n	800612e <xTaskRemoveFromEventList+0x2e>
 800612a:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <xTaskRemoveFromEventList+0x78>)
 800612c:	6018      	str	r0, [r3, #0]
 800612e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006132:	4629      	mov	r1, r5
 8006134:	4b11      	ldr	r3, [pc, #68]	@ (800617c <xTaskRemoveFromEventList+0x7c>)
 8006136:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800613a:	f7fe fe01 	bl	8004d40 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800613e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006140:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <xTaskRemoveFromEventList+0x80>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	429a      	cmp	r2, r3
 8006148:	d911      	bls.n	800616e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800614a:	2001      	movs	r0, #1
 800614c:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <xTaskRemoveFromEventList+0x84>)
 800614e:	6018      	str	r0, [r3, #0]
}
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006162:	e7fe      	b.n	8006162 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006164:	4629      	mov	r1, r5
 8006166:	4808      	ldr	r0, [pc, #32]	@ (8006188 <xTaskRemoveFromEventList+0x88>)
 8006168:	f7fe fdea 	bl	8004d40 <vListInsertEnd>
 800616c:	e7e7      	b.n	800613e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800616e:	2000      	movs	r0, #0
	return xReturn;
 8006170:	e7ee      	b.n	8006150 <xTaskRemoveFromEventList+0x50>
 8006172:	bf00      	nop
 8006174:	20000b98 	.word	0x20000b98
 8006178:	20000bb8 	.word	0x20000bb8
 800617c:	20000c34 	.word	0x20000c34
 8006180:	20001094 	.word	0x20001094
 8006184:	20000bac 	.word	0x20000bac
 8006188:	20000bf0 	.word	0x20000bf0

0800618c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800618c:	4b03      	ldr	r3, [pc, #12]	@ (800619c <vTaskInternalSetTimeOutState+0x10>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006192:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <vTaskInternalSetTimeOutState+0x14>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6043      	str	r3, [r0, #4]
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000ba8 	.word	0x20000ba8
 80061a0:	20000bbc 	.word	0x20000bbc

080061a4 <xTaskCheckForTimeOut>:
{
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80061a6:	b1c8      	cbz	r0, 80061dc <xTaskCheckForTimeOut+0x38>
 80061a8:	460c      	mov	r4, r1
 80061aa:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80061ac:	b1f9      	cbz	r1, 80061ee <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80061ae:	f000 fca1 	bl	8006af4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80061b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006220 <xTaskCheckForTimeOut+0x7c>)
 80061b4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061b6:	686b      	ldr	r3, [r5, #4]
 80061b8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80061c0:	d026      	beq.n	8006210 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061c2:	4e18      	ldr	r6, [pc, #96]	@ (8006224 <xTaskCheckForTimeOut+0x80>)
 80061c4:	6836      	ldr	r6, [r6, #0]
 80061c6:	682f      	ldr	r7, [r5, #0]
 80061c8:	42b7      	cmp	r7, r6
 80061ca:	d001      	beq.n	80061d0 <xTaskCheckForTimeOut+0x2c>
 80061cc:	428b      	cmp	r3, r1
 80061ce:	d924      	bls.n	800621a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061d0:	4282      	cmp	r2, r0
 80061d2:	d815      	bhi.n	8006200 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80061d8:	2401      	movs	r4, #1
 80061da:	e01a      	b.n	8006212 <xTaskCheckForTimeOut+0x6e>
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80061ec:	e7fe      	b.n	80061ec <xTaskCheckForTimeOut+0x48>
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80061fe:	e7fe      	b.n	80061fe <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8006200:	1a5b      	subs	r3, r3, r1
 8006202:	4413      	add	r3, r2
 8006204:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006206:	4628      	mov	r0, r5
 8006208:	f7ff ffc0 	bl	800618c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800620c:	2400      	movs	r4, #0
 800620e:	e000      	b.n	8006212 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8006210:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006212:	f000 fc91 	bl	8006b38 <vPortExitCritical>
}
 8006216:	4620      	mov	r0, r4
 8006218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800621a:	2401      	movs	r4, #1
 800621c:	e7f9      	b.n	8006212 <xTaskCheckForTimeOut+0x6e>
 800621e:	bf00      	nop
 8006220:	20000bbc 	.word	0x20000bbc
 8006224:	20000ba8 	.word	0x20000ba8

08006228 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006228:	4b01      	ldr	r3, [pc, #4]	@ (8006230 <vTaskMissedYield+0x8>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
}
 800622e:	4770      	bx	lr
 8006230:	20000bac 	.word	0x20000bac

08006234 <vTaskGetInfo>:
	{
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	460c      	mov	r4, r1
 8006238:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800623a:	4605      	mov	r5, r0
 800623c:	b1d0      	cbz	r0, 8006274 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800623e:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006240:	f105 0234 	add.w	r2, r5, #52	@ 0x34
 8006244:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8006246:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8006248:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800624a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800624c:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800624e:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8006250:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006252:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 8006254:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8006256:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8006258:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800625a:	2b05      	cmp	r3, #5
 800625c:	d019      	beq.n	8006292 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 800625e:	4a12      	ldr	r2, [pc, #72]	@ (80062a8 <vTaskGetInfo+0x74>)
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	42aa      	cmp	r2, r5
 8006264:	d009      	beq.n	800627a <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 8006266:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 8006268:	2b03      	cmp	r3, #3
 800626a:	d009      	beq.n	8006280 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 800626c:	b9b6      	cbnz	r6, 800629c <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	8423      	strh	r3, [r4, #32]
	}
 8006272:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 8006274:	4a0c      	ldr	r2, [pc, #48]	@ (80062a8 <vTaskGetInfo+0x74>)
 8006276:	6815      	ldr	r5, [r2, #0]
 8006278:	e7e1      	b.n	800623e <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 800627a:	2300      	movs	r3, #0
 800627c:	7323      	strb	r3, [r4, #12]
 800627e:	e7f5      	b.n	800626c <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 8006280:	f7ff fd5a 	bl	8005d38 <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006284:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006286:	b10b      	cbz	r3, 800628c <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 8006288:	2302      	movs	r3, #2
 800628a:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 800628c:	f7ff fdfc 	bl	8005e88 <xTaskResumeAll>
 8006290:	e7ec      	b.n	800626c <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8006292:	4628      	mov	r0, r5
 8006294:	f7ff fcb0 	bl	8005bf8 <eTaskGetState>
 8006298:	7320      	strb	r0, [r4, #12]
 800629a:	e7e7      	b.n	800626c <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800629c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800629e:	f7ff fa96 	bl	80057ce <prvTaskCheckFreeStackSpace>
 80062a2:	8420      	strh	r0, [r4, #32]
 80062a4:	e7e5      	b.n	8006272 <vTaskGetInfo+0x3e>
 80062a6:	bf00      	nop
 80062a8:	20001094 	.word	0x20001094

080062ac <prvListTasksWithinSingleList>:
	{
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80062b0:	680c      	ldr	r4, [r1, #0]
 80062b2:	b33c      	cbz	r4, 8006304 <prvListTasksWithinSingleList+0x58>
 80062b4:	4607      	mov	r7, r0
 80062b6:	460d      	mov	r5, r1
 80062b8:	4690      	mov	r8, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ba:	684b      	ldr	r3, [r1, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	604b      	str	r3, [r1, #4]
 80062c0:	f101 0908 	add.w	r9, r1, #8
 80062c4:	454b      	cmp	r3, r9
 80062c6:	d004      	beq.n	80062d2 <prvListTasksWithinSingleList+0x26>
 80062c8:	686b      	ldr	r3, [r5, #4]
 80062ca:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 80062ce:	2400      	movs	r4, #0
 80062d0:	e010      	b.n	80062f4 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	604b      	str	r3, [r1, #4]
 80062d6:	e7f7      	b.n	80062c8 <prvListTasksWithinSingleList+0x1c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d8:	686b      	ldr	r3, [r5, #4]
 80062da:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80062dc:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 80062e0:	4643      	mov	r3, r8
 80062e2:	2201      	movs	r2, #1
 80062e4:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80062e8:	4630      	mov	r0, r6
 80062ea:	f7ff ffa3 	bl	8006234 <vTaskGetInfo>
				uxTask++;
 80062ee:	3401      	adds	r4, #1
			} while( pxNextTCB != pxFirstTCB );
 80062f0:	45b2      	cmp	sl, r6
 80062f2:	d007      	beq.n	8006304 <prvListTasksWithinSingleList+0x58>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f4:	686b      	ldr	r3, [r5, #4]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	6069      	str	r1, [r5, #4]
 80062fa:	4589      	cmp	r9, r1
 80062fc:	d1ec      	bne.n	80062d8 <prvListTasksWithinSingleList+0x2c>
 80062fe:	684b      	ldr	r3, [r1, #4]
 8006300:	606b      	str	r3, [r5, #4]
 8006302:	e7e9      	b.n	80062d8 <prvListTasksWithinSingleList+0x2c>
	}
 8006304:	4620      	mov	r0, r4
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800630c <uxTaskGetSystemState>:
	{
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	4607      	mov	r7, r0
 8006310:	460c      	mov	r4, r1
 8006312:	4616      	mov	r6, r2
		vTaskSuspendAll();
 8006314:	f7ff fd10 	bl	8005d38 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006318:	4b22      	ldr	r3, [pc, #136]	@ (80063a4 <uxTaskGetSystemState+0x98>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	42a3      	cmp	r3, r4
 800631e:	d83c      	bhi.n	800639a <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006320:	2438      	movs	r4, #56	@ 0x38
 8006322:	2500      	movs	r5, #0
					uxQueue--;
 8006324:	3c01      	subs	r4, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006326:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800632a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800632e:	2201      	movs	r2, #1
 8006330:	4b1d      	ldr	r3, [pc, #116]	@ (80063a8 <uxTaskGetSystemState+0x9c>)
 8006332:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006336:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800633a:	f7ff ffb7 	bl	80062ac <prvListTasksWithinSingleList>
 800633e:	4405      	add	r5, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006340:	2c00      	cmp	r4, #0
 8006342:	d1ef      	bne.n	8006324 <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006344:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8006348:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <uxTaskGetSystemState+0xa0>)
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	2202      	movs	r2, #2
 800634e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006352:	f7ff ffab 	bl	80062ac <prvListTasksWithinSingleList>
 8006356:	4405      	add	r5, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006358:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800635c:	4b14      	ldr	r3, [pc, #80]	@ (80063b0 <uxTaskGetSystemState+0xa4>)
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	2202      	movs	r2, #2
 8006362:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006366:	f7ff ffa1 	bl	80062ac <prvListTasksWithinSingleList>
 800636a:	4405      	add	r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800636c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8006370:	2204      	movs	r2, #4
 8006372:	4910      	ldr	r1, [pc, #64]	@ (80063b4 <uxTaskGetSystemState+0xa8>)
 8006374:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006378:	f7ff ff98 	bl	80062ac <prvListTasksWithinSingleList>
 800637c:	182c      	adds	r4, r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800637e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8006382:	2203      	movs	r2, #3
 8006384:	490c      	ldr	r1, [pc, #48]	@ (80063b8 <uxTaskGetSystemState+0xac>)
 8006386:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800638a:	f7ff ff8f 	bl	80062ac <prvListTasksWithinSingleList>
 800638e:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8006390:	b126      	cbz	r6, 800639c <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006392:	f7fa fee7 	bl	8001164 <getRunTimeCounterValue>
 8006396:	6030      	str	r0, [r6, #0]
 8006398:	e000      	b.n	800639c <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800639a:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800639c:	f7ff fd74 	bl	8005e88 <xTaskResumeAll>
	}
 80063a0:	4620      	mov	r0, r4
 80063a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a4:	20000bc0 	.word	0x20000bc0
 80063a8:	20000c34 	.word	0x20000c34
 80063ac:	20000c08 	.word	0x20000c08
 80063b0:	20000c04 	.word	0x20000c04
 80063b4:	20000bdc 	.word	0x20000bdc
 80063b8:	20000bc4 	.word	0x20000bc4

080063bc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80063bc:	4b01      	ldr	r3, [pc, #4]	@ (80063c4 <xTaskGetCurrentTaskHandle+0x8>)
 80063be:	6818      	ldr	r0, [r3, #0]
	}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20001094 	.word	0x20001094

080063c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <xTaskGetSchedulerState+0x18>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	b133      	cbz	r3, 80063dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ce:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <xTaskGetSchedulerState+0x1c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	b10b      	cbz	r3, 80063d8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80063d4:	2000      	movs	r0, #0
	}
 80063d6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80063d8:	2002      	movs	r0, #2
 80063da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063dc:	2001      	movs	r0, #1
 80063de:	4770      	bx	lr
 80063e0:	20000bb4 	.word	0x20000bb4
 80063e4:	20000b98 	.word	0x20000b98

080063e8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d03e      	beq.n	800646a <xTaskPriorityInherit+0x82>
	{
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80063f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80063f2:	4a20      	ldr	r2, [pc, #128]	@ (8006474 <xTaskPriorityInherit+0x8c>)
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d22e      	bcs.n	800645a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063fc:	6982      	ldr	r2, [r0, #24]
 80063fe:	2a00      	cmp	r2, #0
 8006400:	db05      	blt.n	800640e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <xTaskPriorityInherit+0x8c>)
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006408:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800640c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800640e:	6961      	ldr	r1, [r4, #20]
 8006410:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <xTaskPriorityInherit+0x90>)
 8006416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800641a:	4299      	cmp	r1, r3
 800641c:	d005      	beq.n	800642a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800641e:	4b15      	ldr	r3, [pc, #84]	@ (8006474 <xTaskPriorityInherit+0x8c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8006426:	2001      	movs	r0, #1
	}
 8006428:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800642a:	1d25      	adds	r5, r4, #4
 800642c:	4628      	mov	r0, r5
 800642e:	f7fe fcab 	bl	8004d88 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006432:	4b10      	ldr	r3, [pc, #64]	@ (8006474 <xTaskPriorityInherit+0x8c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006438:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800643a:	4b10      	ldr	r3, [pc, #64]	@ (800647c <xTaskPriorityInherit+0x94>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4298      	cmp	r0, r3
 8006440:	d901      	bls.n	8006446 <xTaskPriorityInherit+0x5e>
 8006442:	4b0e      	ldr	r3, [pc, #56]	@ (800647c <xTaskPriorityInherit+0x94>)
 8006444:	6018      	str	r0, [r3, #0]
 8006446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800644a:	4629      	mov	r1, r5
 800644c:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <xTaskPriorityInherit+0x90>)
 800644e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006452:	f7fe fc75 	bl	8004d40 <vListInsertEnd>
				xReturn = pdTRUE;
 8006456:	2001      	movs	r0, #1
 8006458:	e7e6      	b.n	8006428 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800645a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800645c:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <xTaskPriorityInherit+0x8c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	429a      	cmp	r2, r3
 8006464:	d303      	bcc.n	800646e <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8006466:	2000      	movs	r0, #0
 8006468:	e7de      	b.n	8006428 <xTaskPriorityInherit+0x40>
 800646a:	2000      	movs	r0, #0
	}
 800646c:	4770      	bx	lr
					xReturn = pdTRUE;
 800646e:	2001      	movs	r0, #1
		return xReturn;
 8006470:	e7da      	b.n	8006428 <xTaskPriorityInherit+0x40>
 8006472:	bf00      	nop
 8006474:	20001094 	.word	0x20001094
 8006478:	20000c34 	.word	0x20000c34
 800647c:	20000bb8 	.word	0x20000bb8

08006480 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006480:	2800      	cmp	r0, #0
 8006482:	d03b      	beq.n	80064fc <xTaskPriorityDisinherit+0x7c>
	{
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006488:	4b1e      	ldr	r3, [pc, #120]	@ (8006504 <xTaskPriorityDisinherit+0x84>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4283      	cmp	r3, r0
 800648e:	d008      	beq.n	80064a2 <xTaskPriorityDisinherit+0x22>
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	e7fe      	b.n	80064a0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80064a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80064a4:	b943      	cbnz	r3, 80064b8 <xTaskPriorityDisinherit+0x38>
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	e7fe      	b.n	80064b6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80064b8:	3b01      	subs	r3, #1
 80064ba:	6543      	str	r3, [r0, #84]	@ 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064bc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80064be:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80064c0:	4291      	cmp	r1, r2
 80064c2:	d01d      	beq.n	8006500 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064c4:	b10b      	cbz	r3, 80064ca <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80064c6:	2000      	movs	r0, #0
	}
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ca:	1d05      	adds	r5, r0, #4
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7fe fc5b 	bl	8004d88 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064d2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80064d4:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d6:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80064da:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80064dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006508 <xTaskPriorityDisinherit+0x88>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4298      	cmp	r0, r3
 80064e2:	d901      	bls.n	80064e8 <xTaskPriorityDisinherit+0x68>
 80064e4:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <xTaskPriorityDisinherit+0x88>)
 80064e6:	6018      	str	r0, [r3, #0]
 80064e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064ec:	4629      	mov	r1, r5
 80064ee:	4b07      	ldr	r3, [pc, #28]	@ (800650c <xTaskPriorityDisinherit+0x8c>)
 80064f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064f4:	f7fe fc24 	bl	8004d40 <vListInsertEnd>
					xReturn = pdTRUE;
 80064f8:	2001      	movs	r0, #1
 80064fa:	e7e5      	b.n	80064c8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80064fc:	2000      	movs	r0, #0
	}
 80064fe:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006500:	2000      	movs	r0, #0
 8006502:	e7e1      	b.n	80064c8 <xTaskPriorityDisinherit+0x48>
 8006504:	20001094 	.word	0x20001094
 8006508:	20000bb8 	.word	0x20000bb8
 800650c:	20000c34 	.word	0x20000c34

08006510 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006510:	2800      	cmp	r0, #0
 8006512:	d046      	beq.n	80065a2 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8006518:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800651a:	b943      	cbnz	r3, 800652e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	e7fe      	b.n	800652c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800652e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006530:	428a      	cmp	r2, r1
 8006532:	d200      	bcs.n	8006536 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006534:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006536:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006538:	4291      	cmp	r1, r2
 800653a:	d001      	beq.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800653c:	2b01      	cmp	r3, #1
 800653e:	d000      	beq.n	8006542 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006540:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8006542:	4b18      	ldr	r3, [pc, #96]	@ (80065a4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	42a3      	cmp	r3, r4
 8006548:	d022      	beq.n	8006590 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800654a:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800654c:	69a3      	ldr	r3, [r4, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	db02      	blt.n	8006558 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006552:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006556:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006558:	6962      	ldr	r2, [r4, #20]
 800655a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800655e:	4b12      	ldr	r3, [pc, #72]	@ (80065a8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006560:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006564:	429a      	cmp	r2, r3
 8006566:	d1eb      	bne.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006568:	1d25      	adds	r5, r4, #4
 800656a:	4628      	mov	r0, r5
 800656c:	f7fe fc0c 	bl	8004d88 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006570:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006572:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4298      	cmp	r0, r3
 8006578:	d901      	bls.n	800657e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800657a:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800657c:	6018      	str	r0, [r3, #0]
 800657e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006582:	4629      	mov	r1, r5
 8006584:	4b08      	ldr	r3, [pc, #32]	@ (80065a8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006586:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800658a:	f7fe fbd9 	bl	8004d40 <vListInsertEnd>
	}
 800658e:	e7d7      	b.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8006590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80065a0:	e7fe      	b.n	80065a0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 80065a2:	4770      	bx	lr
 80065a4:	20001094 	.word	0x20001094
 80065a8:	20000c34 	.word	0x20000c34
 80065ac:	20000bb8 	.word	0x20000bb8

080065b0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <pvTaskIncrementMutexHeldCount+0x18>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b123      	cbz	r3, 80065c0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80065b6:	4b04      	ldr	r3, [pc, #16]	@ (80065c8 <pvTaskIncrementMutexHeldCount+0x18>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065bc:	3301      	adds	r3, #1
 80065be:	6553      	str	r3, [r2, #84]	@ 0x54
		return pxCurrentTCB;
 80065c0:	4b01      	ldr	r3, [pc, #4]	@ (80065c8 <pvTaskIncrementMutexHeldCount+0x18>)
 80065c2:	6818      	ldr	r0, [r3, #0]
	}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20001094 	.word	0x20001094

080065cc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065cc:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <prvGetNextExpireTime+0x1c>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	6813      	ldr	r3, [r2, #0]
 80065d2:	b92b      	cbnz	r3, 80065e0 <prvGetNextExpireTime+0x14>
 80065d4:	2301      	movs	r3, #1
 80065d6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065d8:	b923      	cbnz	r3, 80065e4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065da:	68d3      	ldr	r3, [r2, #12]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065e0:	2300      	movs	r3, #0
 80065e2:	e7f8      	b.n	80065d6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065e4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80065e6:	4770      	bx	lr
 80065e8:	20001198 	.word	0x20001198

080065ec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065ec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065ee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065f0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065f2:	4291      	cmp	r1, r2
 80065f4:	d80c      	bhi.n	8006610 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	6983      	ldr	r3, [r0, #24]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d301      	bcc.n	8006602 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065fe:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006600:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006602:	1d01      	adds	r1, r0, #4
 8006604:	4b09      	ldr	r3, [pc, #36]	@ (800662c <prvInsertTimerInActiveList+0x40>)
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	f7fe fba5 	bl	8004d56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800660c:	2000      	movs	r0, #0
 800660e:	e7f7      	b.n	8006600 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006610:	429a      	cmp	r2, r3
 8006612:	d201      	bcs.n	8006618 <prvInsertTimerInActiveList+0x2c>
 8006614:	4299      	cmp	r1, r3
 8006616:	d206      	bcs.n	8006626 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006618:	1d01      	adds	r1, r0, #4
 800661a:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <prvInsertTimerInActiveList+0x44>)
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f7fe fb9a 	bl	8004d56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006622:	2000      	movs	r0, #0
 8006624:	e7ec      	b.n	8006600 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006626:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006628:	e7ea      	b.n	8006600 <prvInsertTimerInActiveList+0x14>
 800662a:	bf00      	nop
 800662c:	20001194 	.word	0x20001194
 8006630:	20001198 	.word	0x20001198

08006634 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006634:	b530      	push	{r4, r5, lr}
 8006636:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006638:	f000 fa5c 	bl	8006af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800663c:	4b11      	ldr	r3, [pc, #68]	@ (8006684 <prvCheckForValidListAndQueue+0x50>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	b11b      	cbz	r3, 800664a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006642:	f000 fa79 	bl	8006b38 <vPortExitCritical>
}
 8006646:	b003      	add	sp, #12
 8006648:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800664a:	4d0f      	ldr	r5, [pc, #60]	@ (8006688 <prvCheckForValidListAndQueue+0x54>)
 800664c:	4628      	mov	r0, r5
 800664e:	f7fe fb69 	bl	8004d24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006652:	4c0e      	ldr	r4, [pc, #56]	@ (800668c <prvCheckForValidListAndQueue+0x58>)
 8006654:	4620      	mov	r0, r4
 8006656:	f7fe fb65 	bl	8004d24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <prvCheckForValidListAndQueue+0x5c>)
 800665c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800665e:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <prvCheckForValidListAndQueue+0x60>)
 8006660:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006662:	2300      	movs	r3, #0
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <prvCheckForValidListAndQueue+0x64>)
 8006668:	4a0c      	ldr	r2, [pc, #48]	@ (800669c <prvCheckForValidListAndQueue+0x68>)
 800666a:	2110      	movs	r1, #16
 800666c:	200a      	movs	r0, #10
 800666e:	f7fe fc99 	bl	8004fa4 <xQueueGenericCreateStatic>
 8006672:	4b04      	ldr	r3, [pc, #16]	@ (8006684 <prvCheckForValidListAndQueue+0x50>)
 8006674:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006676:	2800      	cmp	r0, #0
 8006678:	d0e3      	beq.n	8006642 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800667a:	4909      	ldr	r1, [pc, #36]	@ (80066a0 <prvCheckForValidListAndQueue+0x6c>)
 800667c:	f7ff f86a 	bl	8005754 <vQueueAddToRegistry>
 8006680:	e7df      	b.n	8006642 <prvCheckForValidListAndQueue+0xe>
 8006682:	bf00      	nop
 8006684:	20001190 	.word	0x20001190
 8006688:	200011b0 	.word	0x200011b0
 800668c:	2000119c 	.word	0x2000119c
 8006690:	20001198 	.word	0x20001198
 8006694:	20001194 	.word	0x20001194
 8006698:	20001098 	.word	0x20001098
 800669c:	200010e8 	.word	0x200010e8
 80066a0:	08009c5c 	.word	0x08009c5c

080066a4 <xTimerCreateTimerTask>:
{
 80066a4:	b510      	push	{r4, lr}
 80066a6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80066a8:	f7ff ffc4 	bl	8006634 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80066ac:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <xTimerCreateTimerTask+0x54>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	b1cb      	cbz	r3, 80066e6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066b2:	2400      	movs	r4, #0
 80066b4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066b6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066b8:	aa07      	add	r2, sp, #28
 80066ba:	a906      	add	r1, sp, #24
 80066bc:	a805      	add	r0, sp, #20
 80066be:	f7fe fb25 	bl	8004d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066c2:	9b05      	ldr	r3, [sp, #20]
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	9b06      	ldr	r3, [sp, #24]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	2302      	movs	r3, #2
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4623      	mov	r3, r4
 80066d0:	9a07      	ldr	r2, [sp, #28]
 80066d2:	490a      	ldr	r1, [pc, #40]	@ (80066fc <xTimerCreateTimerTask+0x58>)
 80066d4:	480a      	ldr	r0, [pc, #40]	@ (8006700 <xTimerCreateTimerTask+0x5c>)
 80066d6:	f7ff fa21 	bl	8005b1c <xTaskCreateStatic>
 80066da:	4b0a      	ldr	r3, [pc, #40]	@ (8006704 <xTimerCreateTimerTask+0x60>)
 80066dc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80066de:	b110      	cbz	r0, 80066e6 <xTimerCreateTimerTask+0x42>
}
 80066e0:	2001      	movs	r0, #1
 80066e2:	b008      	add	sp, #32
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80066f6:	e7fe      	b.n	80066f6 <xTimerCreateTimerTask+0x52>
 80066f8:	20001190 	.word	0x20001190
 80066fc:	08009c64 	.word	0x08009c64
 8006700:	08006a09 	.word	0x08006a09
 8006704:	2000118c 	.word	0x2000118c

08006708 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006708:	b1b8      	cbz	r0, 800673a <xTimerGenericCommand+0x32>
 800670a:	469c      	mov	ip, r3
 800670c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800670e:	4818      	ldr	r0, [pc, #96]	@ (8006770 <xTimerGenericCommand+0x68>)
 8006710:	6800      	ldr	r0, [r0, #0]
 8006712:	b358      	cbz	r0, 800676c <xTimerGenericCommand+0x64>
{
 8006714:	b500      	push	{lr}
 8006716:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006718:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800671a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800671c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800671e:	2905      	cmp	r1, #5
 8006720:	dc1c      	bgt.n	800675c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006722:	f7ff fe51 	bl	80063c8 <xTaskGetSchedulerState>
 8006726:	2802      	cmp	r0, #2
 8006728:	d010      	beq.n	800674c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800672a:	2300      	movs	r3, #0
 800672c:	461a      	mov	r2, r3
 800672e:	4669      	mov	r1, sp
 8006730:	480f      	ldr	r0, [pc, #60]	@ (8006770 <xTimerGenericCommand+0x68>)
 8006732:	6800      	ldr	r0, [r0, #0]
 8006734:	f7fe fca4 	bl	8005080 <xQueueGenericSend>
 8006738:	e015      	b.n	8006766 <xTimerGenericCommand+0x5e>
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800674a:	e7fe      	b.n	800674a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800674c:	2300      	movs	r3, #0
 800674e:	9a06      	ldr	r2, [sp, #24]
 8006750:	4669      	mov	r1, sp
 8006752:	4807      	ldr	r0, [pc, #28]	@ (8006770 <xTimerGenericCommand+0x68>)
 8006754:	6800      	ldr	r0, [r0, #0]
 8006756:	f7fe fc93 	bl	8005080 <xQueueGenericSend>
 800675a:	e004      	b.n	8006766 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800675c:	2300      	movs	r3, #0
 800675e:	4662      	mov	r2, ip
 8006760:	4669      	mov	r1, sp
 8006762:	f7fe fd97 	bl	8005294 <xQueueGenericSendFromISR>
}
 8006766:	b005      	add	sp, #20
 8006768:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800676c:	2000      	movs	r0, #0
}
 800676e:	4770      	bx	lr
 8006770:	20001190 	.word	0x20001190

08006774 <prvSwitchTimerLists>:
{
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <prvSwitchTimerLists+0x74>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	b362      	cbz	r2, 80067da <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006784:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006786:	1d25      	adds	r5, r4, #4
 8006788:	4628      	mov	r0, r5
 800678a:	f7fe fafd 	bl	8004d88 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678e:	6a23      	ldr	r3, [r4, #32]
 8006790:	4620      	mov	r0, r4
 8006792:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006794:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006798:	f013 0f04 	tst.w	r3, #4
 800679c:	d0ec      	beq.n	8006778 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800679e:	69a3      	ldr	r3, [r4, #24]
 80067a0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80067a2:	429e      	cmp	r6, r3
 80067a4:	d207      	bcs.n	80067b6 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067a6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067a8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067aa:	4629      	mov	r1, r5
 80067ac:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <prvSwitchTimerLists+0x74>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	f7fe fad1 	bl	8004d56 <vListInsert>
 80067b4:	e7e0      	b.n	8006778 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067b6:	2100      	movs	r1, #0
 80067b8:	9100      	str	r1, [sp, #0]
 80067ba:	460b      	mov	r3, r1
 80067bc:	4632      	mov	r2, r6
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff ffa2 	bl	8006708 <xTimerGenericCommand>
				configASSERT( xResult );
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1d7      	bne.n	8006778 <prvSwitchTimerLists+0x4>
 80067c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	e7fe      	b.n	80067d8 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80067da:	4a04      	ldr	r2, [pc, #16]	@ (80067ec <prvSwitchTimerLists+0x78>)
 80067dc:	6810      	ldr	r0, [r2, #0]
 80067de:	4902      	ldr	r1, [pc, #8]	@ (80067e8 <prvSwitchTimerLists+0x74>)
 80067e0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	b002      	add	sp, #8
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	20001198 	.word	0x20001198
 80067ec:	20001194 	.word	0x20001194

080067f0 <prvSampleTimeNow>:
{
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80067f4:	f7ff faa8 	bl	8005d48 <xTaskGetTickCount>
 80067f8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80067fa:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <prvSampleTimeNow+0x28>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4283      	cmp	r3, r0
 8006800:	d805      	bhi.n	800680e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8006802:	2300      	movs	r3, #0
 8006804:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8006806:	4b04      	ldr	r3, [pc, #16]	@ (8006818 <prvSampleTimeNow+0x28>)
 8006808:	601c      	str	r4, [r3, #0]
}
 800680a:	4620      	mov	r0, r4
 800680c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800680e:	f7ff ffb1 	bl	8006774 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006812:	2301      	movs	r3, #1
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	e7f6      	b.n	8006806 <prvSampleTimeNow+0x16>
 8006818:	20001188 	.word	0x20001188

0800681c <prvProcessExpiredTimer>:
{
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	4606      	mov	r6, r0
 8006822:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006824:	4917      	ldr	r1, [pc, #92]	@ (8006884 <prvProcessExpiredTimer+0x68>)
 8006826:	6809      	ldr	r1, [r1, #0]
 8006828:	68c9      	ldr	r1, [r1, #12]
 800682a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800682c:	1d20      	adds	r0, r4, #4
 800682e:	f7fe faab 	bl	8004d88 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006832:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8006836:	f01c 0f04 	tst.w	ip, #4
 800683a:	d108      	bne.n	800684e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800683c:	f02c 0c01 	bic.w	ip, ip, #1
 8006840:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006844:	6a23      	ldr	r3, [r4, #32]
 8006846:	4620      	mov	r0, r4
 8006848:	4798      	blx	r3
}
 800684a:	b002      	add	sp, #8
 800684c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800684e:	69a1      	ldr	r1, [r4, #24]
 8006850:	4633      	mov	r3, r6
 8006852:	462a      	mov	r2, r5
 8006854:	4431      	add	r1, r6
 8006856:	4620      	mov	r0, r4
 8006858:	f7ff fec8 	bl	80065ec <prvInsertTimerInActiveList>
 800685c:	2800      	cmp	r0, #0
 800685e:	d0f1      	beq.n	8006844 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006860:	2100      	movs	r1, #0
 8006862:	9100      	str	r1, [sp, #0]
 8006864:	460b      	mov	r3, r1
 8006866:	4632      	mov	r2, r6
 8006868:	4620      	mov	r0, r4
 800686a:	f7ff ff4d 	bl	8006708 <xTimerGenericCommand>
			configASSERT( xResult );
 800686e:	2800      	cmp	r0, #0
 8006870:	d1e8      	bne.n	8006844 <prvProcessExpiredTimer+0x28>
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	e7fe      	b.n	8006882 <prvProcessExpiredTimer+0x66>
 8006884:	20001198 	.word	0x20001198

08006888 <prvProcessTimerOrBlockTask>:
{
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	4606      	mov	r6, r0
 800688e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8006890:	f7ff fa52 	bl	8005d38 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006894:	a801      	add	r0, sp, #4
 8006896:	f7ff ffab 	bl	80067f0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800689a:	9b01      	ldr	r3, [sp, #4]
 800689c:	bb33      	cbnz	r3, 80068ec <prvProcessTimerOrBlockTask+0x64>
 800689e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068a0:	b9e4      	cbnz	r4, 80068dc <prvProcessTimerOrBlockTask+0x54>
 80068a2:	42b0      	cmp	r0, r6
 80068a4:	d213      	bcs.n	80068ce <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068a6:	4622      	mov	r2, r4
 80068a8:	1b71      	subs	r1, r6, r5
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <prvProcessTimerOrBlockTask+0x6c>)
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	f7fe ff65 	bl	800577c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068b2:	f7ff fae9 	bl	8005e88 <xTaskResumeAll>
 80068b6:	b9d8      	cbnz	r0, 80068f0 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 80068b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80068bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	e010      	b.n	80068f0 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 80068ce:	f7ff fadb 	bl	8005e88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068d2:	4629      	mov	r1, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff ffa1 	bl	800681c <prvProcessExpiredTimer>
 80068da:	e009      	b.n	80068f0 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068dc:	4a06      	ldr	r2, [pc, #24]	@ (80068f8 <prvProcessTimerOrBlockTask+0x70>)
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	b90a      	cbnz	r2, 80068e8 <prvProcessTimerOrBlockTask+0x60>
 80068e4:	2401      	movs	r4, #1
 80068e6:	e7de      	b.n	80068a6 <prvProcessTimerOrBlockTask+0x1e>
 80068e8:	461c      	mov	r4, r3
 80068ea:	e7dc      	b.n	80068a6 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 80068ec:	f7ff facc 	bl	8005e88 <xTaskResumeAll>
}
 80068f0:	b002      	add	sp, #8
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	20001190 	.word	0x20001190
 80068f8:	20001194 	.word	0x20001194

080068fc <prvProcessReceivedCommands>:
{
 80068fc:	b510      	push	{r4, lr}
 80068fe:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006900:	e002      	b.n	8006908 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	da0f      	bge.n	8006928 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006908:	2200      	movs	r2, #0
 800690a:	a904      	add	r1, sp, #16
 800690c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a04 <prvProcessReceivedCommands+0x108>)
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	f7fe fd27 	bl	8005362 <xQueueReceive>
 8006914:	2800      	cmp	r0, #0
 8006916:	d073      	beq.n	8006a00 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	daf1      	bge.n	8006902 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800691e:	9907      	ldr	r1, [sp, #28]
 8006920:	9806      	ldr	r0, [sp, #24]
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	4798      	blx	r3
 8006926:	e7ec      	b.n	8006902 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006928:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800692a:	6963      	ldr	r3, [r4, #20]
 800692c:	b113      	cbz	r3, 8006934 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800692e:	1d20      	adds	r0, r4, #4
 8006930:	f7fe fa2a 	bl	8004d88 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006934:	a803      	add	r0, sp, #12
 8006936:	f7ff ff5b 	bl	80067f0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	2b09      	cmp	r3, #9
 800693e:	d8e3      	bhi.n	8006908 <prvProcessReceivedCommands+0xc>
 8006940:	e8df f003 	tbb	[pc, r3]
 8006944:	30050505 	.word	0x30050505
 8006948:	05055037 	.word	0x05055037
 800694c:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800694e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800695a:	9b05      	ldr	r3, [sp, #20]
 800695c:	69a1      	ldr	r1, [r4, #24]
 800695e:	4602      	mov	r2, r0
 8006960:	4419      	add	r1, r3
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff fe42 	bl	80065ec <prvInsertTimerInActiveList>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0cd      	beq.n	8006908 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800696c:	6a23      	ldr	r3, [r4, #32]
 800696e:	4620      	mov	r0, r4
 8006970:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006972:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006976:	f013 0f04 	tst.w	r3, #4
 800697a:	d0c5      	beq.n	8006908 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800697c:	69a2      	ldr	r2, [r4, #24]
 800697e:	2100      	movs	r1, #0
 8006980:	9100      	str	r1, [sp, #0]
 8006982:	460b      	mov	r3, r1
 8006984:	9805      	ldr	r0, [sp, #20]
 8006986:	4402      	add	r2, r0
 8006988:	4620      	mov	r0, r4
 800698a:	f7ff febd 	bl	8006708 <xTimerGenericCommand>
							configASSERT( xResult );
 800698e:	2800      	cmp	r0, #0
 8006990:	d1ba      	bne.n	8006908 <prvProcessReceivedCommands+0xc>
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	e7fe      	b.n	80069a2 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80069a8:	f023 0301 	bic.w	r3, r3, #1
 80069ac:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 80069b0:	e7aa      	b.n	8006908 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069be:	9905      	ldr	r1, [sp, #20]
 80069c0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069c2:	b131      	cbz	r1, 80069d2 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069c4:	4603      	mov	r3, r0
 80069c6:	4602      	mov	r2, r0
 80069c8:	4401      	add	r1, r0
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7ff fe0e 	bl	80065ec <prvInsertTimerInActiveList>
					break;
 80069d0:	e79a      	b.n	8006908 <prvProcessReceivedCommands+0xc>
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069e2:	e7fe      	b.n	80069e2 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069e4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80069e8:	f013 0f02 	tst.w	r3, #2
 80069ec:	d004      	beq.n	80069f8 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80069f6:	e787      	b.n	8006908 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fab5 	bl	8006f68 <vPortFree>
 80069fe:	e783      	b.n	8006908 <prvProcessReceivedCommands+0xc>
}
 8006a00:	b008      	add	sp, #32
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	20001190 	.word	0x20001190

08006a08 <prvTimerTask>:
{
 8006a08:	b500      	push	{lr}
 8006a0a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a0c:	a801      	add	r0, sp, #4
 8006a0e:	f7ff fddd 	bl	80065cc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a12:	9901      	ldr	r1, [sp, #4]
 8006a14:	f7ff ff38 	bl	8006888 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8006a18:	f7ff ff70 	bl	80068fc <prvProcessReceivedCommands>
	for( ;; )
 8006a1c:	e7f6      	b.n	8006a0c <prvTimerTask+0x4>
	...

08006a20 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <prvTaskExitError+0x3c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a2e:	d008      	beq.n	8006a42 <prvTaskExitError+0x22>
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	e7fe      	b.n	8006a40 <prvTaskExitError+0x20>
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a52:	9b01      	ldr	r3, [sp, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0fc      	beq.n	8006a52 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a58:	b002      	add	sp, #8
 8006a5a:	4770      	bx	lr
 8006a5c:	20000010 	.word	0x20000010

08006a60 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a60:	4808      	ldr	r0, [pc, #32]	@ (8006a84 <prvPortStartFirstTask+0x24>)
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	6800      	ldr	r0, [r0, #0]
 8006a66:	f380 8808 	msr	MSP, r0
 8006a6a:	f04f 0000 	mov.w	r0, #0
 8006a6e:	f380 8814 	msr	CONTROL, r0
 8006a72:	b662      	cpsie	i
 8006a74:	b661      	cpsie	f
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	df00      	svc	0
 8006a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a82:	0000      	.short	0x0000
 8006a84:	e000ed08 	.word	0xe000ed08

08006a88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a98 <vPortEnableVFP+0x10>
 8006a8c:	6801      	ldr	r1, [r0, #0]
 8006a8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a92:	6001      	str	r1, [r0, #0]
 8006a94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a96:	0000      	.short	0x0000
 8006a98:	e000ed88 	.word	0xe000ed88

08006a9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006aa0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006aa4:	f021 0101 	bic.w	r1, r1, #1
 8006aa8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <pxPortInitialiseStack+0x28>)
 8006aae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ab2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ab6:	f06f 0302 	mvn.w	r3, #2
 8006aba:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006abe:	3844      	subs	r0, #68	@ 0x44
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	08006a21 	.word	0x08006a21
	...

08006ad0 <SVC_Handler>:
	__asm volatile (
 8006ad0:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <pxCurrentTCBConst2>)
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	6808      	ldr	r0, [r1, #0]
 8006ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	f380 8809 	msr	PSP, r0
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8811 	msr	BASEPRI, r0
 8006aea:	4770      	bx	lr
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst2>:
 8006af0:	20001094 	.word	0x20001094

08006af4 <vPortEnterCritical>:
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006b04:	4a0b      	ldr	r2, [pc, #44]	@ (8006b34 <vPortEnterCritical+0x40>)
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d000      	beq.n	8006b12 <vPortEnterCritical+0x1e>
}
 8006b10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b16:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006b1a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8006b1e:	d0f7      	beq.n	8006b10 <vPortEnterCritical+0x1c>
 8006b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	e7fe      	b.n	8006b30 <vPortEnterCritical+0x3c>
 8006b32:	bf00      	nop
 8006b34:	20000010 	.word	0x20000010

08006b38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006b38:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <vPortExitCritical+0x28>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	b943      	cbnz	r3, 8006b50 <vPortExitCritical+0x18>
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	e7fe      	b.n	8006b4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4a03      	ldr	r2, [pc, #12]	@ (8006b60 <vPortExitCritical+0x28>)
 8006b54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b56:	b90b      	cbnz	r3, 8006b5c <vPortExitCritical+0x24>
	__asm volatile
 8006b58:	f383 8811 	msr	BASEPRI, r3
}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000010 	.word	0x20000010
	...

08006b70 <PendSV_Handler>:
	__asm volatile
 8006b70:	f3ef 8009 	mrs	r0, PSP
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <pxCurrentTCBConst>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f01e 0f10 	tst.w	lr, #16
 8006b80:	bf08      	it	eq
 8006b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8a:	6010      	str	r0, [r2, #0]
 8006b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b94:	f380 8811 	msr	BASEPRI, r0
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f7ff fa14 	bl	8005fcc <vTaskSwitchContext>
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f380 8811 	msr	BASEPRI, r0
 8006bac:	bc09      	pop	{r0, r3}
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	6808      	ldr	r0, [r1, #0]
 8006bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb6:	f01e 0f10 	tst.w	lr, #16
 8006bba:	bf08      	it	eq
 8006bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bc0:	f380 8809 	msr	PSP, r0
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	f3af 8000 	nop.w

08006bd0 <pxCurrentTCBConst>:
 8006bd0:	20001094 	.word	0x20001094

08006bd4 <xPortSysTickHandler>:
{
 8006bd4:	b508      	push	{r3, lr}
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006be6:	f7ff f8c3 	bl	8005d70 <xTaskIncrementTick>
 8006bea:	b128      	cbz	r0, 8006bf8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bd08      	pop	{r3, pc}

08006c00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c00:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006c04:	2300      	movs	r3, #0
 8006c06:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c08:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c0a:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <vPortSetupTimerInterrupt+0x20>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4905      	ldr	r1, [pc, #20]	@ (8006c24 <vPortSetupTimerInterrupt+0x24>)
 8006c10:	fba1 1303 	umull	r1, r3, r1, r3
 8006c14:	099b      	lsrs	r3, r3, #6
 8006c16:	3b01      	subs	r3, #1
 8006c18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c1a:	2307      	movs	r3, #7
 8006c1c:	6113      	str	r3, [r2, #16]
}
 8006c1e:	4770      	bx	lr
 8006c20:	20000000 	.word	0x20000000
 8006c24:	10624dd3 	.word	0x10624dd3

08006c28 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c2c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006c30:	4b3d      	ldr	r3, [pc, #244]	@ (8006d28 <xPortStartScheduler+0x100>)
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d01c      	beq.n	8006c70 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c3a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8006d2c <xPortStartScheduler+0x104>)
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d01e      	beq.n	8006c82 <xPortStartScheduler+0x5a>
{
 8006c44:	b530      	push	{r4, r5, lr}
 8006c46:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c48:	4b39      	ldr	r3, [pc, #228]	@ (8006d30 <xPortStartScheduler+0x108>)
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c50:	22ff      	movs	r2, #255	@ 0xff
 8006c52:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006c60:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c64:	4a33      	ldr	r2, [pc, #204]	@ (8006d34 <xPortStartScheduler+0x10c>)
 8006c66:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c68:	4b33      	ldr	r3, [pc, #204]	@ (8006d38 <xPortStartScheduler+0x110>)
 8006c6a:	2207      	movs	r2, #7
 8006c6c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c6e:	e01b      	b.n	8006ca8 <xPortStartScheduler+0x80>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c80:	e7fe      	b.n	8006c80 <xPortStartScheduler+0x58>
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c92:	e7fe      	b.n	8006c92 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8006c94:	4a28      	ldr	r2, [pc, #160]	@ (8006d38 <xPortStartScheduler+0x110>)
 8006c96:	6813      	ldr	r3, [r2, #0]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006cac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cb0:	d1f0      	bne.n	8006c94 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cb2:	4b21      	ldr	r3, [pc, #132]	@ (8006d38 <xPortStartScheduler+0x110>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d008      	beq.n	8006ccc <xPortStartScheduler+0xa4>
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	e7fe      	b.n	8006cca <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	4a1a      	ldr	r2, [pc, #104]	@ (8006d38 <xPortStartScheduler+0x110>)
 8006cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cd2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cd6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cd8:	9b01      	ldr	r3, [sp, #4]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	4a14      	ldr	r2, [pc, #80]	@ (8006d30 <xPortStartScheduler+0x108>)
 8006cde:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ce0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8006ce4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006cec:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cf0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006cf4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006cf8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006cfc:	f7ff ff80 	bl	8006c00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006d00:	2500      	movs	r5, #0
 8006d02:	4b0e      	ldr	r3, [pc, #56]	@ (8006d3c <xPortStartScheduler+0x114>)
 8006d04:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006d06:	f7ff febf 	bl	8006a88 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d0a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006d0e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d12:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006d16:	f7ff fea3 	bl	8006a60 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006d1a:	f7ff f957 	bl	8005fcc <vTaskSwitchContext>
	prvTaskExitError();
 8006d1e:	f7ff fe7f 	bl	8006a20 <prvTaskExitError>
}
 8006d22:	4628      	mov	r0, r5
 8006d24:	b003      	add	sp, #12
 8006d26:	bd30      	pop	{r4, r5, pc}
 8006d28:	410fc271 	.word	0x410fc271
 8006d2c:	410fc270 	.word	0x410fc270
 8006d30:	e000e400 	.word	0xe000e400
 8006d34:	200011c8 	.word	0x200011c8
 8006d38:	200011c4 	.word	0x200011c4
 8006d3c:	20000010 	.word	0x20000010

08006d40 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d40:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d44:	2b0f      	cmp	r3, #15
 8006d46:	d90f      	bls.n	8006d68 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d48:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <vPortValidateInterruptPriority+0x50>)
 8006d4a:	5c9b      	ldrb	r3, [r3, r2]
 8006d4c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d4e:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <vPortValidateInterruptPriority+0x54>)
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d908      	bls.n	8006d68 <vPortValidateInterruptPriority+0x28>
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	e7fe      	b.n	8006d66 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d6c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d74:	4a08      	ldr	r2, [pc, #32]	@ (8006d98 <vPortValidateInterruptPriority+0x58>)
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d908      	bls.n	8006d8e <vPortValidateInterruptPriority+0x4e>
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	e7fe      	b.n	8006d8c <vPortValidateInterruptPriority+0x4c>
	}
 8006d8e:	4770      	bx	lr
 8006d90:	e000e3f0 	.word	0xe000e3f0
 8006d94:	200011c8 	.word	0x200011c8
 8006d98:	200011c4 	.word	0x200011c4

08006d9c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d9c:	4a12      	ldr	r2, [pc, #72]	@ (8006de8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d9e:	f012 0f07 	tst.w	r2, #7
 8006da2:	d01e      	beq.n	8006de2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006da4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006daa:	f5c1 3380 	rsb	r3, r1, #65536	@ 0x10000
 8006dae:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006db2:	480e      	ldr	r0, [pc, #56]	@ (8006dec <prvHeapInit+0x50>)
 8006db4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006db6:	2100      	movs	r1, #0
 8006db8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006dbc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dbe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006dc2:	480b      	ldr	r0, [pc, #44]	@ (8006df0 <prvHeapInit+0x54>)
 8006dc4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006dc6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dc8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	1a99      	subs	r1, r3, r2
 8006dcc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dce:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd0:	4b08      	ldr	r3, [pc, #32]	@ (8006df4 <prvHeapInit+0x58>)
 8006dd2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <prvHeapInit+0x5c>)
 8006dd6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dd8:	4b08      	ldr	r3, [pc, #32]	@ (8006dfc <prvHeapInit+0x60>)
 8006dda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dde:	601a      	str	r2, [r3, #0]
}
 8006de0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006de2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006de6:	e7e4      	b.n	8006db2 <prvHeapInit+0x16>
 8006de8:	10000000 	.word	0x10000000
 8006dec:	200011e4 	.word	0x200011e4
 8006df0:	200011e0 	.word	0x200011e0
 8006df4:	200011d8 	.word	0x200011d8
 8006df8:	200011dc 	.word	0x200011dc
 8006dfc:	200011cc 	.word	0x200011cc

08006e00 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e00:	4b16      	ldr	r3, [pc, #88]	@ (8006e5c <prvInsertBlockIntoFreeList+0x5c>)
 8006e02:	461a      	mov	r2, r3
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4283      	cmp	r3, r0
 8006e08:	d3fb      	bcc.n	8006e02 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e0a:	6851      	ldr	r1, [r2, #4]
 8006e0c:	eb02 0c01 	add.w	ip, r2, r1
 8006e10:	4584      	cmp	ip, r0
 8006e12:	d009      	beq.n	8006e28 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e14:	6841      	ldr	r1, [r0, #4]
 8006e16:	eb00 0c01 	add.w	ip, r0, r1
 8006e1a:	4563      	cmp	r3, ip
 8006e1c:	d009      	beq.n	8006e32 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e1e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e20:	4290      	cmp	r0, r2
 8006e22:	d019      	beq.n	8006e58 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e24:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006e26:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e28:	6840      	ldr	r0, [r0, #4]
 8006e2a:	4401      	add	r1, r0
 8006e2c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006e2e:	4610      	mov	r0, r2
 8006e30:	e7f0      	b.n	8006e14 <prvInsertBlockIntoFreeList+0x14>
{
 8006e32:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e34:	4c0a      	ldr	r4, [pc, #40]	@ (8006e60 <prvInsertBlockIntoFreeList+0x60>)
 8006e36:	6824      	ldr	r4, [r4, #0]
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d00b      	beq.n	8006e54 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	4419      	add	r1, r3
 8006e40:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006e48:	4290      	cmp	r0, r2
 8006e4a:	d000      	beq.n	8006e4e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e4c:	6010      	str	r0, [r2, #0]
	}
}
 8006e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e52:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e54:	6004      	str	r4, [r0, #0]
 8006e56:	e7f7      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x48>
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	200011e4 	.word	0x200011e4
 8006e60:	200011e0 	.word	0x200011e0

08006e64 <pvPortMalloc>:
{
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006e68:	f7fe ff66 	bl	8005d38 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e6c:	4b38      	ldr	r3, [pc, #224]	@ (8006f50 <pvPortMalloc+0xec>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	b1b3      	cbz	r3, 8006ea0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e72:	4b38      	ldr	r3, [pc, #224]	@ (8006f54 <pvPortMalloc+0xf0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	421c      	tst	r4, r3
 8006e78:	d150      	bne.n	8006f1c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8006e7a:	2c00      	cmp	r4, #0
 8006e7c:	d050      	beq.n	8006f20 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8006e7e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e82:	f014 0f07 	tst.w	r4, #7
 8006e86:	d002      	beq.n	8006e8e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e88:	f022 0207 	bic.w	r2, r2, #7
 8006e8c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	d055      	beq.n	8006f3e <pvPortMalloc+0xda>
 8006e92:	4b31      	ldr	r3, [pc, #196]	@ (8006f58 <pvPortMalloc+0xf4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d353      	bcc.n	8006f42 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8006e9a:	4930      	ldr	r1, [pc, #192]	@ (8006f5c <pvPortMalloc+0xf8>)
 8006e9c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9e:	e004      	b.n	8006eaa <pvPortMalloc+0x46>
			prvHeapInit();
 8006ea0:	f7ff ff7c 	bl	8006d9c <prvHeapInit>
 8006ea4:	e7e5      	b.n	8006e72 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8006ea6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ea8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eaa:	6863      	ldr	r3, [r4, #4]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d202      	bcs.n	8006eb6 <pvPortMalloc+0x52>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f7      	bne.n	8006ea6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8006eb6:	4b26      	ldr	r3, [pc, #152]	@ (8006f50 <pvPortMalloc+0xec>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	d043      	beq.n	8006f46 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ebe:	680d      	ldr	r5, [r1, #0]
 8006ec0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ec6:	6863      	ldr	r3, [r4, #4]
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d910      	bls.n	8006ef0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ece:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed0:	f010 0f07 	tst.w	r0, #7
 8006ed4:	d008      	beq.n	8006ee8 <pvPortMalloc+0x84>
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	e7fe      	b.n	8006ee6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ee8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006eea:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eec:	f7ff ff88 	bl	8006e00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ef0:	6862      	ldr	r2, [r4, #4]
 8006ef2:	4919      	ldr	r1, [pc, #100]	@ (8006f58 <pvPortMalloc+0xf4>)
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006efa:	4919      	ldr	r1, [pc, #100]	@ (8006f60 <pvPortMalloc+0xfc>)
 8006efc:	6809      	ldr	r1, [r1, #0]
 8006efe:	428b      	cmp	r3, r1
 8006f00:	d201      	bcs.n	8006f06 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f02:	4917      	ldr	r1, [pc, #92]	@ (8006f60 <pvPortMalloc+0xfc>)
 8006f04:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <pvPortMalloc+0xf0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8006f12:	4a14      	ldr	r2, [pc, #80]	@ (8006f64 <pvPortMalloc+0x100>)
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	3301      	adds	r3, #1
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e002      	b.n	8006f22 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	e000      	b.n	8006f22 <pvPortMalloc+0xbe>
 8006f20:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8006f22:	f7fe ffb1 	bl	8005e88 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f26:	f015 0f07 	tst.w	r5, #7
 8006f2a:	d00e      	beq.n	8006f4a <pvPortMalloc+0xe6>
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	e7fe      	b.n	8006f3c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8006f3e:	2500      	movs	r5, #0
 8006f40:	e7ef      	b.n	8006f22 <pvPortMalloc+0xbe>
 8006f42:	2500      	movs	r5, #0
 8006f44:	e7ed      	b.n	8006f22 <pvPortMalloc+0xbe>
 8006f46:	2500      	movs	r5, #0
 8006f48:	e7eb      	b.n	8006f22 <pvPortMalloc+0xbe>
}
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	200011e0 	.word	0x200011e0
 8006f54:	200011cc 	.word	0x200011cc
 8006f58:	200011dc 	.word	0x200011dc
 8006f5c:	200011e4 	.word	0x200011e4
 8006f60:	200011d8 	.word	0x200011d8
 8006f64:	200011d4 	.word	0x200011d4

08006f68 <vPortFree>:
	if( pv != NULL )
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d034      	beq.n	8006fd6 <vPortFree+0x6e>
{
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006f70:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f74:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006f78:	4a17      	ldr	r2, [pc, #92]	@ (8006fd8 <vPortFree+0x70>)
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	4213      	tst	r3, r2
 8006f7e:	d108      	bne.n	8006f92 <vPortFree+0x2a>
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	e7fe      	b.n	8006f90 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f92:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006f96:	b141      	cbz	r1, 8006faa <vPortFree+0x42>
 8006f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	e7fe      	b.n	8006fa8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006faa:	ea23 0302 	bic.w	r3, r3, r2
 8006fae:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006fb2:	f7fe fec1 	bl	8005d38 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006fba:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <vPortFree+0x74>)
 8006fbc:	6813      	ldr	r3, [r2, #0]
 8006fbe:	440b      	add	r3, r1
 8006fc0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7ff ff1c 	bl	8006e00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fc8:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <vPortFree+0x78>)
 8006fca:	6813      	ldr	r3, [r2, #0]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006fd0:	f7fe ff5a 	bl	8005e88 <xTaskResumeAll>
}
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	4770      	bx	lr
 8006fd8:	200011cc 	.word	0x200011cc
 8006fdc:	200011dc 	.word	0x200011dc
 8006fe0:	200011d0 	.word	0x200011d0

08006fe4 <__cvt>:
 8006fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	ec57 6b10 	vmov	r6, r7, d0
 8006fec:	2f00      	cmp	r7, #0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	bfbb      	ittet	lt
 8006ff6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ffa:	461f      	movlt	r7, r3
 8006ffc:	2300      	movge	r3, #0
 8006ffe:	232d      	movlt	r3, #45	@ 0x2d
 8007000:	700b      	strb	r3, [r1, #0]
 8007002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007004:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007008:	4691      	mov	r9, r2
 800700a:	f023 0820 	bic.w	r8, r3, #32
 800700e:	bfbc      	itt	lt
 8007010:	4632      	movlt	r2, r6
 8007012:	4616      	movlt	r6, r2
 8007014:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007018:	d005      	beq.n	8007026 <__cvt+0x42>
 800701a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800701e:	d100      	bne.n	8007022 <__cvt+0x3e>
 8007020:	3401      	adds	r4, #1
 8007022:	2102      	movs	r1, #2
 8007024:	e000      	b.n	8007028 <__cvt+0x44>
 8007026:	2103      	movs	r1, #3
 8007028:	ab03      	add	r3, sp, #12
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	ab02      	add	r3, sp, #8
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	ec47 6b10 	vmov	d0, r6, r7
 8007034:	4653      	mov	r3, sl
 8007036:	4622      	mov	r2, r4
 8007038:	f000 ffa2 	bl	8007f80 <_dtoa_r>
 800703c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007040:	4605      	mov	r5, r0
 8007042:	d119      	bne.n	8007078 <__cvt+0x94>
 8007044:	f019 0f01 	tst.w	r9, #1
 8007048:	d00e      	beq.n	8007068 <__cvt+0x84>
 800704a:	eb00 0904 	add.w	r9, r0, r4
 800704e:	2200      	movs	r2, #0
 8007050:	2300      	movs	r3, #0
 8007052:	4630      	mov	r0, r6
 8007054:	4639      	mov	r1, r7
 8007056:	f7f9 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800705a:	b108      	cbz	r0, 8007060 <__cvt+0x7c>
 800705c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007060:	2230      	movs	r2, #48	@ 0x30
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	454b      	cmp	r3, r9
 8007066:	d31e      	bcc.n	80070a6 <__cvt+0xc2>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800706c:	1b5b      	subs	r3, r3, r5
 800706e:	4628      	mov	r0, r5
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	b004      	add	sp, #16
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800707c:	eb00 0904 	add.w	r9, r0, r4
 8007080:	d1e5      	bne.n	800704e <__cvt+0x6a>
 8007082:	7803      	ldrb	r3, [r0, #0]
 8007084:	2b30      	cmp	r3, #48	@ 0x30
 8007086:	d10a      	bne.n	800709e <__cvt+0xba>
 8007088:	2200      	movs	r2, #0
 800708a:	2300      	movs	r3, #0
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007094:	b918      	cbnz	r0, 800709e <__cvt+0xba>
 8007096:	f1c4 0401 	rsb	r4, r4, #1
 800709a:	f8ca 4000 	str.w	r4, [sl]
 800709e:	f8da 3000 	ldr.w	r3, [sl]
 80070a2:	4499      	add	r9, r3
 80070a4:	e7d3      	b.n	800704e <__cvt+0x6a>
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	9103      	str	r1, [sp, #12]
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	e7d9      	b.n	8007062 <__cvt+0x7e>

080070ae <__exponent>:
 80070ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfba      	itte	lt
 80070b4:	4249      	neglt	r1, r1
 80070b6:	232d      	movlt	r3, #45	@ 0x2d
 80070b8:	232b      	movge	r3, #43	@ 0x2b
 80070ba:	2909      	cmp	r1, #9
 80070bc:	7002      	strb	r2, [r0, #0]
 80070be:	7043      	strb	r3, [r0, #1]
 80070c0:	dd29      	ble.n	8007116 <__exponent+0x68>
 80070c2:	f10d 0307 	add.w	r3, sp, #7
 80070c6:	461d      	mov	r5, r3
 80070c8:	270a      	movs	r7, #10
 80070ca:	461a      	mov	r2, r3
 80070cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80070d0:	fb07 1416 	mls	r4, r7, r6, r1
 80070d4:	3430      	adds	r4, #48	@ 0x30
 80070d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070da:	460c      	mov	r4, r1
 80070dc:	2c63      	cmp	r4, #99	@ 0x63
 80070de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80070e2:	4631      	mov	r1, r6
 80070e4:	dcf1      	bgt.n	80070ca <__exponent+0x1c>
 80070e6:	3130      	adds	r1, #48	@ 0x30
 80070e8:	1e94      	subs	r4, r2, #2
 80070ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070ee:	1c41      	adds	r1, r0, #1
 80070f0:	4623      	mov	r3, r4
 80070f2:	42ab      	cmp	r3, r5
 80070f4:	d30a      	bcc.n	800710c <__exponent+0x5e>
 80070f6:	f10d 0309 	add.w	r3, sp, #9
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	42ac      	cmp	r4, r5
 80070fe:	bf88      	it	hi
 8007100:	2300      	movhi	r3, #0
 8007102:	3302      	adds	r3, #2
 8007104:	4403      	add	r3, r0
 8007106:	1a18      	subs	r0, r3, r0
 8007108:	b003      	add	sp, #12
 800710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007110:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007114:	e7ed      	b.n	80070f2 <__exponent+0x44>
 8007116:	2330      	movs	r3, #48	@ 0x30
 8007118:	3130      	adds	r1, #48	@ 0x30
 800711a:	7083      	strb	r3, [r0, #2]
 800711c:	70c1      	strb	r1, [r0, #3]
 800711e:	1d03      	adds	r3, r0, #4
 8007120:	e7f1      	b.n	8007106 <__exponent+0x58>
	...

08007124 <_printf_float>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	b08d      	sub	sp, #52	@ 0x34
 800712a:	460c      	mov	r4, r1
 800712c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007130:	4616      	mov	r6, r2
 8007132:	461f      	mov	r7, r3
 8007134:	4605      	mov	r5, r0
 8007136:	f000 fdbf 	bl	8007cb8 <_localeconv_r>
 800713a:	6803      	ldr	r3, [r0, #0]
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	4618      	mov	r0, r3
 8007140:	f7f9 f896 	bl	8000270 <strlen>
 8007144:	2300      	movs	r3, #0
 8007146:	930a      	str	r3, [sp, #40]	@ 0x28
 8007148:	f8d8 3000 	ldr.w	r3, [r8]
 800714c:	9005      	str	r0, [sp, #20]
 800714e:	3307      	adds	r3, #7
 8007150:	f023 0307 	bic.w	r3, r3, #7
 8007154:	f103 0208 	add.w	r2, r3, #8
 8007158:	f894 a018 	ldrb.w	sl, [r4, #24]
 800715c:	f8d4 b000 	ldr.w	fp, [r4]
 8007160:	f8c8 2000 	str.w	r2, [r8]
 8007164:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007168:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007172:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800717a:	4b9c      	ldr	r3, [pc, #624]	@ (80073ec <_printf_float+0x2c8>)
 800717c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007180:	f7f9 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 8007184:	bb70      	cbnz	r0, 80071e4 <_printf_float+0xc0>
 8007186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718a:	4b98      	ldr	r3, [pc, #608]	@ (80073ec <_printf_float+0x2c8>)
 800718c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007190:	f7f9 fcae 	bl	8000af0 <__aeabi_dcmple>
 8007194:	bb30      	cbnz	r0, 80071e4 <_printf_float+0xc0>
 8007196:	2200      	movs	r2, #0
 8007198:	2300      	movs	r3, #0
 800719a:	4640      	mov	r0, r8
 800719c:	4649      	mov	r1, r9
 800719e:	f7f9 fc9d 	bl	8000adc <__aeabi_dcmplt>
 80071a2:	b110      	cbz	r0, 80071aa <_printf_float+0x86>
 80071a4:	232d      	movs	r3, #45	@ 0x2d
 80071a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071aa:	4a91      	ldr	r2, [pc, #580]	@ (80073f0 <_printf_float+0x2cc>)
 80071ac:	4b91      	ldr	r3, [pc, #580]	@ (80073f4 <_printf_float+0x2d0>)
 80071ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071b2:	bf94      	ite	ls
 80071b4:	4690      	movls	r8, r2
 80071b6:	4698      	movhi	r8, r3
 80071b8:	2303      	movs	r3, #3
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	f02b 0304 	bic.w	r3, fp, #4
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	f04f 0900 	mov.w	r9, #0
 80071c6:	9700      	str	r7, [sp, #0]
 80071c8:	4633      	mov	r3, r6
 80071ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071cc:	4621      	mov	r1, r4
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 f9d2 	bl	8007578 <_printf_common>
 80071d4:	3001      	adds	r0, #1
 80071d6:	f040 808d 	bne.w	80072f4 <_printf_float+0x1d0>
 80071da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071de:	b00d      	add	sp, #52	@ 0x34
 80071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	4640      	mov	r0, r8
 80071ea:	4649      	mov	r1, r9
 80071ec:	f7f9 fc9e 	bl	8000b2c <__aeabi_dcmpun>
 80071f0:	b140      	cbz	r0, 8007204 <_printf_float+0xe0>
 80071f2:	464b      	mov	r3, r9
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfbc      	itt	lt
 80071f8:	232d      	movlt	r3, #45	@ 0x2d
 80071fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80071fe:	4a7e      	ldr	r2, [pc, #504]	@ (80073f8 <_printf_float+0x2d4>)
 8007200:	4b7e      	ldr	r3, [pc, #504]	@ (80073fc <_printf_float+0x2d8>)
 8007202:	e7d4      	b.n	80071ae <_printf_float+0x8a>
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800720a:	9206      	str	r2, [sp, #24]
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	d13b      	bne.n	8007288 <_printf_float+0x164>
 8007210:	2306      	movs	r3, #6
 8007212:	6063      	str	r3, [r4, #4]
 8007214:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007218:	2300      	movs	r3, #0
 800721a:	6022      	str	r2, [r4, #0]
 800721c:	9303      	str	r3, [sp, #12]
 800721e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007220:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007224:	ab09      	add	r3, sp, #36	@ 0x24
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	6861      	ldr	r1, [r4, #4]
 800722a:	ec49 8b10 	vmov	d0, r8, r9
 800722e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007232:	4628      	mov	r0, r5
 8007234:	f7ff fed6 	bl	8006fe4 <__cvt>
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800723c:	2b47      	cmp	r3, #71	@ 0x47
 800723e:	4680      	mov	r8, r0
 8007240:	d129      	bne.n	8007296 <_printf_float+0x172>
 8007242:	1cc8      	adds	r0, r1, #3
 8007244:	db02      	blt.n	800724c <_printf_float+0x128>
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	4299      	cmp	r1, r3
 800724a:	dd41      	ble.n	80072d0 <_printf_float+0x1ac>
 800724c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007250:	fa5f fa8a 	uxtb.w	sl, sl
 8007254:	3901      	subs	r1, #1
 8007256:	4652      	mov	r2, sl
 8007258:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800725c:	9109      	str	r1, [sp, #36]	@ 0x24
 800725e:	f7ff ff26 	bl	80070ae <__exponent>
 8007262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007264:	1813      	adds	r3, r2, r0
 8007266:	2a01      	cmp	r2, #1
 8007268:	4681      	mov	r9, r0
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	dc02      	bgt.n	8007274 <_printf_float+0x150>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	07d2      	lsls	r2, r2, #31
 8007272:	d501      	bpl.n	8007278 <_printf_float+0x154>
 8007274:	3301      	adds	r3, #1
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0a2      	beq.n	80071c6 <_printf_float+0xa2>
 8007280:	232d      	movs	r3, #45	@ 0x2d
 8007282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007286:	e79e      	b.n	80071c6 <_printf_float+0xa2>
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	2a47      	cmp	r2, #71	@ 0x47
 800728c:	d1c2      	bne.n	8007214 <_printf_float+0xf0>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1c0      	bne.n	8007214 <_printf_float+0xf0>
 8007292:	2301      	movs	r3, #1
 8007294:	e7bd      	b.n	8007212 <_printf_float+0xee>
 8007296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800729a:	d9db      	bls.n	8007254 <_printf_float+0x130>
 800729c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072a0:	d118      	bne.n	80072d4 <_printf_float+0x1b0>
 80072a2:	2900      	cmp	r1, #0
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	dd0b      	ble.n	80072c0 <_printf_float+0x19c>
 80072a8:	6121      	str	r1, [r4, #16]
 80072aa:	b913      	cbnz	r3, 80072b2 <_printf_float+0x18e>
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	07d0      	lsls	r0, r2, #31
 80072b0:	d502      	bpl.n	80072b8 <_printf_float+0x194>
 80072b2:	3301      	adds	r3, #1
 80072b4:	440b      	add	r3, r1
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072ba:	f04f 0900 	mov.w	r9, #0
 80072be:	e7db      	b.n	8007278 <_printf_float+0x154>
 80072c0:	b913      	cbnz	r3, 80072c8 <_printf_float+0x1a4>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	07d2      	lsls	r2, r2, #31
 80072c6:	d501      	bpl.n	80072cc <_printf_float+0x1a8>
 80072c8:	3302      	adds	r3, #2
 80072ca:	e7f4      	b.n	80072b6 <_printf_float+0x192>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7f2      	b.n	80072b6 <_printf_float+0x192>
 80072d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072d6:	4299      	cmp	r1, r3
 80072d8:	db05      	blt.n	80072e6 <_printf_float+0x1c2>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	6121      	str	r1, [r4, #16]
 80072de:	07d8      	lsls	r0, r3, #31
 80072e0:	d5ea      	bpl.n	80072b8 <_printf_float+0x194>
 80072e2:	1c4b      	adds	r3, r1, #1
 80072e4:	e7e7      	b.n	80072b6 <_printf_float+0x192>
 80072e6:	2900      	cmp	r1, #0
 80072e8:	bfd4      	ite	le
 80072ea:	f1c1 0202 	rsble	r2, r1, #2
 80072ee:	2201      	movgt	r2, #1
 80072f0:	4413      	add	r3, r2
 80072f2:	e7e0      	b.n	80072b6 <_printf_float+0x192>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	055a      	lsls	r2, r3, #21
 80072f8:	d407      	bmi.n	800730a <_printf_float+0x1e6>
 80072fa:	6923      	ldr	r3, [r4, #16]
 80072fc:	4642      	mov	r2, r8
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	d12b      	bne.n	8007360 <_printf_float+0x23c>
 8007308:	e767      	b.n	80071da <_printf_float+0xb6>
 800730a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800730e:	f240 80dd 	bls.w	80074cc <_printf_float+0x3a8>
 8007312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007316:	2200      	movs	r2, #0
 8007318:	2300      	movs	r3, #0
 800731a:	f7f9 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800731e:	2800      	cmp	r0, #0
 8007320:	d033      	beq.n	800738a <_printf_float+0x266>
 8007322:	4a37      	ldr	r2, [pc, #220]	@ (8007400 <_printf_float+0x2dc>)
 8007324:	2301      	movs	r3, #1
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	f43f af54 	beq.w	80071da <_printf_float+0xb6>
 8007332:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007336:	4543      	cmp	r3, r8
 8007338:	db02      	blt.n	8007340 <_printf_float+0x21c>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	07d8      	lsls	r0, r3, #31
 800733e:	d50f      	bpl.n	8007360 <_printf_float+0x23c>
 8007340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	f43f af45 	beq.w	80071da <_printf_float+0xb6>
 8007350:	f04f 0900 	mov.w	r9, #0
 8007354:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007358:	f104 0a1a 	add.w	sl, r4, #26
 800735c:	45c8      	cmp	r8, r9
 800735e:	dc09      	bgt.n	8007374 <_printf_float+0x250>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	079b      	lsls	r3, r3, #30
 8007364:	f100 8103 	bmi.w	800756e <_printf_float+0x44a>
 8007368:	68e0      	ldr	r0, [r4, #12]
 800736a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800736c:	4298      	cmp	r0, r3
 800736e:	bfb8      	it	lt
 8007370:	4618      	movlt	r0, r3
 8007372:	e734      	b.n	80071de <_printf_float+0xba>
 8007374:	2301      	movs	r3, #1
 8007376:	4652      	mov	r2, sl
 8007378:	4631      	mov	r1, r6
 800737a:	4628      	mov	r0, r5
 800737c:	47b8      	blx	r7
 800737e:	3001      	adds	r0, #1
 8007380:	f43f af2b 	beq.w	80071da <_printf_float+0xb6>
 8007384:	f109 0901 	add.w	r9, r9, #1
 8007388:	e7e8      	b.n	800735c <_printf_float+0x238>
 800738a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	dc39      	bgt.n	8007404 <_printf_float+0x2e0>
 8007390:	4a1b      	ldr	r2, [pc, #108]	@ (8007400 <_printf_float+0x2dc>)
 8007392:	2301      	movs	r3, #1
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f af1d 	beq.w	80071da <_printf_float+0xb6>
 80073a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073a4:	ea59 0303 	orrs.w	r3, r9, r3
 80073a8:	d102      	bne.n	80073b0 <_printf_float+0x28c>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	07d9      	lsls	r1, r3, #31
 80073ae:	d5d7      	bpl.n	8007360 <_printf_float+0x23c>
 80073b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	f43f af0d 	beq.w	80071da <_printf_float+0xb6>
 80073c0:	f04f 0a00 	mov.w	sl, #0
 80073c4:	f104 0b1a 	add.w	fp, r4, #26
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	425b      	negs	r3, r3
 80073cc:	4553      	cmp	r3, sl
 80073ce:	dc01      	bgt.n	80073d4 <_printf_float+0x2b0>
 80073d0:	464b      	mov	r3, r9
 80073d2:	e793      	b.n	80072fc <_printf_float+0x1d8>
 80073d4:	2301      	movs	r3, #1
 80073d6:	465a      	mov	r2, fp
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	f43f aefb 	beq.w	80071da <_printf_float+0xb6>
 80073e4:	f10a 0a01 	add.w	sl, sl, #1
 80073e8:	e7ee      	b.n	80073c8 <_printf_float+0x2a4>
 80073ea:	bf00      	nop
 80073ec:	7fefffff 	.word	0x7fefffff
 80073f0:	08009c6c 	.word	0x08009c6c
 80073f4:	08009c70 	.word	0x08009c70
 80073f8:	08009c74 	.word	0x08009c74
 80073fc:	08009c78 	.word	0x08009c78
 8007400:	08009c7c 	.word	0x08009c7c
 8007404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007406:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800740a:	4553      	cmp	r3, sl
 800740c:	bfa8      	it	ge
 800740e:	4653      	movge	r3, sl
 8007410:	2b00      	cmp	r3, #0
 8007412:	4699      	mov	r9, r3
 8007414:	dc36      	bgt.n	8007484 <_printf_float+0x360>
 8007416:	f04f 0b00 	mov.w	fp, #0
 800741a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800741e:	f104 021a 	add.w	r2, r4, #26
 8007422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007424:	9306      	str	r3, [sp, #24]
 8007426:	eba3 0309 	sub.w	r3, r3, r9
 800742a:	455b      	cmp	r3, fp
 800742c:	dc31      	bgt.n	8007492 <_printf_float+0x36e>
 800742e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007430:	459a      	cmp	sl, r3
 8007432:	dc3a      	bgt.n	80074aa <_printf_float+0x386>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	07da      	lsls	r2, r3, #31
 8007438:	d437      	bmi.n	80074aa <_printf_float+0x386>
 800743a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743c:	ebaa 0903 	sub.w	r9, sl, r3
 8007440:	9b06      	ldr	r3, [sp, #24]
 8007442:	ebaa 0303 	sub.w	r3, sl, r3
 8007446:	4599      	cmp	r9, r3
 8007448:	bfa8      	it	ge
 800744a:	4699      	movge	r9, r3
 800744c:	f1b9 0f00 	cmp.w	r9, #0
 8007450:	dc33      	bgt.n	80074ba <_printf_float+0x396>
 8007452:	f04f 0800 	mov.w	r8, #0
 8007456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800745a:	f104 0b1a 	add.w	fp, r4, #26
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	ebaa 0303 	sub.w	r3, sl, r3
 8007464:	eba3 0309 	sub.w	r3, r3, r9
 8007468:	4543      	cmp	r3, r8
 800746a:	f77f af79 	ble.w	8007360 <_printf_float+0x23c>
 800746e:	2301      	movs	r3, #1
 8007470:	465a      	mov	r2, fp
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	f43f aeae 	beq.w	80071da <_printf_float+0xb6>
 800747e:	f108 0801 	add.w	r8, r8, #1
 8007482:	e7ec      	b.n	800745e <_printf_float+0x33a>
 8007484:	4642      	mov	r2, r8
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	d1c2      	bne.n	8007416 <_printf_float+0x2f2>
 8007490:	e6a3      	b.n	80071da <_printf_float+0xb6>
 8007492:	2301      	movs	r3, #1
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	9206      	str	r2, [sp, #24]
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f ae9c 	beq.w	80071da <_printf_float+0xb6>
 80074a2:	9a06      	ldr	r2, [sp, #24]
 80074a4:	f10b 0b01 	add.w	fp, fp, #1
 80074a8:	e7bb      	b.n	8007422 <_printf_float+0x2fe>
 80074aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d1c0      	bne.n	800743a <_printf_float+0x316>
 80074b8:	e68f      	b.n	80071da <_printf_float+0xb6>
 80074ba:	9a06      	ldr	r2, [sp, #24]
 80074bc:	464b      	mov	r3, r9
 80074be:	4442      	add	r2, r8
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	d1c3      	bne.n	8007452 <_printf_float+0x32e>
 80074ca:	e686      	b.n	80071da <_printf_float+0xb6>
 80074cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074d0:	f1ba 0f01 	cmp.w	sl, #1
 80074d4:	dc01      	bgt.n	80074da <_printf_float+0x3b6>
 80074d6:	07db      	lsls	r3, r3, #31
 80074d8:	d536      	bpl.n	8007548 <_printf_float+0x424>
 80074da:	2301      	movs	r3, #1
 80074dc:	4642      	mov	r2, r8
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f ae78 	beq.w	80071da <_printf_float+0xb6>
 80074ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ee:	4631      	mov	r1, r6
 80074f0:	4628      	mov	r0, r5
 80074f2:	47b8      	blx	r7
 80074f4:	3001      	adds	r0, #1
 80074f6:	f43f ae70 	beq.w	80071da <_printf_float+0xb6>
 80074fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074fe:	2200      	movs	r2, #0
 8007500:	2300      	movs	r3, #0
 8007502:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007506:	f7f9 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800750a:	b9c0      	cbnz	r0, 800753e <_printf_float+0x41a>
 800750c:	4653      	mov	r3, sl
 800750e:	f108 0201 	add.w	r2, r8, #1
 8007512:	4631      	mov	r1, r6
 8007514:	4628      	mov	r0, r5
 8007516:	47b8      	blx	r7
 8007518:	3001      	adds	r0, #1
 800751a:	d10c      	bne.n	8007536 <_printf_float+0x412>
 800751c:	e65d      	b.n	80071da <_printf_float+0xb6>
 800751e:	2301      	movs	r3, #1
 8007520:	465a      	mov	r2, fp
 8007522:	4631      	mov	r1, r6
 8007524:	4628      	mov	r0, r5
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	f43f ae56 	beq.w	80071da <_printf_float+0xb6>
 800752e:	f108 0801 	add.w	r8, r8, #1
 8007532:	45d0      	cmp	r8, sl
 8007534:	dbf3      	blt.n	800751e <_printf_float+0x3fa>
 8007536:	464b      	mov	r3, r9
 8007538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800753c:	e6df      	b.n	80072fe <_printf_float+0x1da>
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	f104 0b1a 	add.w	fp, r4, #26
 8007546:	e7f4      	b.n	8007532 <_printf_float+0x40e>
 8007548:	2301      	movs	r3, #1
 800754a:	4642      	mov	r2, r8
 800754c:	e7e1      	b.n	8007512 <_printf_float+0x3ee>
 800754e:	2301      	movs	r3, #1
 8007550:	464a      	mov	r2, r9
 8007552:	4631      	mov	r1, r6
 8007554:	4628      	mov	r0, r5
 8007556:	47b8      	blx	r7
 8007558:	3001      	adds	r0, #1
 800755a:	f43f ae3e 	beq.w	80071da <_printf_float+0xb6>
 800755e:	f108 0801 	add.w	r8, r8, #1
 8007562:	68e3      	ldr	r3, [r4, #12]
 8007564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007566:	1a5b      	subs	r3, r3, r1
 8007568:	4543      	cmp	r3, r8
 800756a:	dcf0      	bgt.n	800754e <_printf_float+0x42a>
 800756c:	e6fc      	b.n	8007368 <_printf_float+0x244>
 800756e:	f04f 0800 	mov.w	r8, #0
 8007572:	f104 0919 	add.w	r9, r4, #25
 8007576:	e7f4      	b.n	8007562 <_printf_float+0x43e>

08007578 <_printf_common>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	4616      	mov	r6, r2
 800757e:	4698      	mov	r8, r3
 8007580:	688a      	ldr	r2, [r1, #8]
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007588:	4293      	cmp	r3, r2
 800758a:	bfb8      	it	lt
 800758c:	4613      	movlt	r3, r2
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007594:	4607      	mov	r7, r0
 8007596:	460c      	mov	r4, r1
 8007598:	b10a      	cbz	r2, 800759e <_printf_common+0x26>
 800759a:	3301      	adds	r3, #1
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	0699      	lsls	r1, r3, #26
 80075a2:	bf42      	ittt	mi
 80075a4:	6833      	ldrmi	r3, [r6, #0]
 80075a6:	3302      	addmi	r3, #2
 80075a8:	6033      	strmi	r3, [r6, #0]
 80075aa:	6825      	ldr	r5, [r4, #0]
 80075ac:	f015 0506 	ands.w	r5, r5, #6
 80075b0:	d106      	bne.n	80075c0 <_printf_common+0x48>
 80075b2:	f104 0a19 	add.w	sl, r4, #25
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	6832      	ldr	r2, [r6, #0]
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc26      	bgt.n	800760e <_printf_common+0x96>
 80075c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	3b00      	subs	r3, #0
 80075c8:	bf18      	it	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	0692      	lsls	r2, r2, #26
 80075ce:	d42b      	bmi.n	8007628 <_printf_common+0xb0>
 80075d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075d4:	4641      	mov	r1, r8
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c8      	blx	r9
 80075da:	3001      	adds	r0, #1
 80075dc:	d01e      	beq.n	800761c <_printf_common+0xa4>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	f003 0306 	and.w	r3, r3, #6
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	bf02      	ittt	eq
 80075ea:	68e5      	ldreq	r5, [r4, #12]
 80075ec:	6833      	ldreq	r3, [r6, #0]
 80075ee:	1aed      	subeq	r5, r5, r3
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	bf0c      	ite	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	2500      	movne	r5, #0
 80075fa:	4293      	cmp	r3, r2
 80075fc:	bfc4      	itt	gt
 80075fe:	1a9b      	subgt	r3, r3, r2
 8007600:	18ed      	addgt	r5, r5, r3
 8007602:	2600      	movs	r6, #0
 8007604:	341a      	adds	r4, #26
 8007606:	42b5      	cmp	r5, r6
 8007608:	d11a      	bne.n	8007640 <_printf_common+0xc8>
 800760a:	2000      	movs	r0, #0
 800760c:	e008      	b.n	8007620 <_printf_common+0xa8>
 800760e:	2301      	movs	r3, #1
 8007610:	4652      	mov	r2, sl
 8007612:	4641      	mov	r1, r8
 8007614:	4638      	mov	r0, r7
 8007616:	47c8      	blx	r9
 8007618:	3001      	adds	r0, #1
 800761a:	d103      	bne.n	8007624 <_printf_common+0xac>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007624:	3501      	adds	r5, #1
 8007626:	e7c6      	b.n	80075b6 <_printf_common+0x3e>
 8007628:	18e1      	adds	r1, r4, r3
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	2030      	movs	r0, #48	@ 0x30
 800762e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007632:	4422      	add	r2, r4
 8007634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800763c:	3302      	adds	r3, #2
 800763e:	e7c7      	b.n	80075d0 <_printf_common+0x58>
 8007640:	2301      	movs	r3, #1
 8007642:	4622      	mov	r2, r4
 8007644:	4641      	mov	r1, r8
 8007646:	4638      	mov	r0, r7
 8007648:	47c8      	blx	r9
 800764a:	3001      	adds	r0, #1
 800764c:	d0e6      	beq.n	800761c <_printf_common+0xa4>
 800764e:	3601      	adds	r6, #1
 8007650:	e7d9      	b.n	8007606 <_printf_common+0x8e>
	...

08007654 <_printf_i>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	7e0f      	ldrb	r7, [r1, #24]
 800765a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800765c:	2f78      	cmp	r7, #120	@ 0x78
 800765e:	4691      	mov	r9, r2
 8007660:	4680      	mov	r8, r0
 8007662:	460c      	mov	r4, r1
 8007664:	469a      	mov	sl, r3
 8007666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800766a:	d807      	bhi.n	800767c <_printf_i+0x28>
 800766c:	2f62      	cmp	r7, #98	@ 0x62
 800766e:	d80a      	bhi.n	8007686 <_printf_i+0x32>
 8007670:	2f00      	cmp	r7, #0
 8007672:	f000 80d2 	beq.w	800781a <_printf_i+0x1c6>
 8007676:	2f58      	cmp	r7, #88	@ 0x58
 8007678:	f000 80b9 	beq.w	80077ee <_printf_i+0x19a>
 800767c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007684:	e03a      	b.n	80076fc <_printf_i+0xa8>
 8007686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800768a:	2b15      	cmp	r3, #21
 800768c:	d8f6      	bhi.n	800767c <_printf_i+0x28>
 800768e:	a101      	add	r1, pc, #4	@ (adr r1, 8007694 <_printf_i+0x40>)
 8007690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007694:	080076ed 	.word	0x080076ed
 8007698:	08007701 	.word	0x08007701
 800769c:	0800767d 	.word	0x0800767d
 80076a0:	0800767d 	.word	0x0800767d
 80076a4:	0800767d 	.word	0x0800767d
 80076a8:	0800767d 	.word	0x0800767d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800767d 	.word	0x0800767d
 80076b4:	0800767d 	.word	0x0800767d
 80076b8:	0800767d 	.word	0x0800767d
 80076bc:	0800767d 	.word	0x0800767d
 80076c0:	08007801 	.word	0x08007801
 80076c4:	0800772b 	.word	0x0800772b
 80076c8:	080077bb 	.word	0x080077bb
 80076cc:	0800767d 	.word	0x0800767d
 80076d0:	0800767d 	.word	0x0800767d
 80076d4:	08007823 	.word	0x08007823
 80076d8:	0800767d 	.word	0x0800767d
 80076dc:	0800772b 	.word	0x0800772b
 80076e0:	0800767d 	.word	0x0800767d
 80076e4:	0800767d 	.word	0x0800767d
 80076e8:	080077c3 	.word	0x080077c3
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6032      	str	r2, [r6, #0]
 80076f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076fc:	2301      	movs	r3, #1
 80076fe:	e09d      	b.n	800783c <_printf_i+0x1e8>
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6031      	str	r1, [r6, #0]
 8007708:	0606      	lsls	r6, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xbc>
 800770c:	681d      	ldr	r5, [r3, #0]
 800770e:	e003      	b.n	8007718 <_printf_i+0xc4>
 8007710:	0645      	lsls	r5, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xb8>
 8007714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007718:	2d00      	cmp	r5, #0
 800771a:	da03      	bge.n	8007724 <_printf_i+0xd0>
 800771c:	232d      	movs	r3, #45	@ 0x2d
 800771e:	426d      	negs	r5, r5
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007724:	4859      	ldr	r0, [pc, #356]	@ (800788c <_printf_i+0x238>)
 8007726:	230a      	movs	r3, #10
 8007728:	e011      	b.n	800774e <_printf_i+0xfa>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	0608      	lsls	r0, r1, #24
 8007730:	f853 5b04 	ldr.w	r5, [r3], #4
 8007734:	d402      	bmi.n	800773c <_printf_i+0xe8>
 8007736:	0649      	lsls	r1, r1, #25
 8007738:	bf48      	it	mi
 800773a:	b2ad      	uxthmi	r5, r5
 800773c:	2f6f      	cmp	r7, #111	@ 0x6f
 800773e:	4853      	ldr	r0, [pc, #332]	@ (800788c <_printf_i+0x238>)
 8007740:	6033      	str	r3, [r6, #0]
 8007742:	bf14      	ite	ne
 8007744:	230a      	movne	r3, #10
 8007746:	2308      	moveq	r3, #8
 8007748:	2100      	movs	r1, #0
 800774a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800774e:	6866      	ldr	r6, [r4, #4]
 8007750:	60a6      	str	r6, [r4, #8]
 8007752:	2e00      	cmp	r6, #0
 8007754:	bfa2      	ittt	ge
 8007756:	6821      	ldrge	r1, [r4, #0]
 8007758:	f021 0104 	bicge.w	r1, r1, #4
 800775c:	6021      	strge	r1, [r4, #0]
 800775e:	b90d      	cbnz	r5, 8007764 <_printf_i+0x110>
 8007760:	2e00      	cmp	r6, #0
 8007762:	d04b      	beq.n	80077fc <_printf_i+0x1a8>
 8007764:	4616      	mov	r6, r2
 8007766:	fbb5 f1f3 	udiv	r1, r5, r3
 800776a:	fb03 5711 	mls	r7, r3, r1, r5
 800776e:	5dc7      	ldrb	r7, [r0, r7]
 8007770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007774:	462f      	mov	r7, r5
 8007776:	42bb      	cmp	r3, r7
 8007778:	460d      	mov	r5, r1
 800777a:	d9f4      	bls.n	8007766 <_printf_i+0x112>
 800777c:	2b08      	cmp	r3, #8
 800777e:	d10b      	bne.n	8007798 <_printf_i+0x144>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	07df      	lsls	r7, r3, #31
 8007784:	d508      	bpl.n	8007798 <_printf_i+0x144>
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	6861      	ldr	r1, [r4, #4]
 800778a:	4299      	cmp	r1, r3
 800778c:	bfde      	ittt	le
 800778e:	2330      	movle	r3, #48	@ 0x30
 8007790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007794:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007798:	1b92      	subs	r2, r2, r6
 800779a:	6122      	str	r2, [r4, #16]
 800779c:	f8cd a000 	str.w	sl, [sp]
 80077a0:	464b      	mov	r3, r9
 80077a2:	aa03      	add	r2, sp, #12
 80077a4:	4621      	mov	r1, r4
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7ff fee6 	bl	8007578 <_printf_common>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d14a      	bne.n	8007846 <_printf_i+0x1f2>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077b4:	b004      	add	sp, #16
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	4833      	ldr	r0, [pc, #204]	@ (8007890 <_printf_i+0x23c>)
 80077c4:	2778      	movs	r7, #120	@ 0x78
 80077c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	6831      	ldr	r1, [r6, #0]
 80077ce:	061f      	lsls	r7, r3, #24
 80077d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80077d4:	d402      	bmi.n	80077dc <_printf_i+0x188>
 80077d6:	065f      	lsls	r7, r3, #25
 80077d8:	bf48      	it	mi
 80077da:	b2ad      	uxthmi	r5, r5
 80077dc:	6031      	str	r1, [r6, #0]
 80077de:	07d9      	lsls	r1, r3, #31
 80077e0:	bf44      	itt	mi
 80077e2:	f043 0320 	orrmi.w	r3, r3, #32
 80077e6:	6023      	strmi	r3, [r4, #0]
 80077e8:	b11d      	cbz	r5, 80077f2 <_printf_i+0x19e>
 80077ea:	2310      	movs	r3, #16
 80077ec:	e7ac      	b.n	8007748 <_printf_i+0xf4>
 80077ee:	4827      	ldr	r0, [pc, #156]	@ (800788c <_printf_i+0x238>)
 80077f0:	e7e9      	b.n	80077c6 <_printf_i+0x172>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	f023 0320 	bic.w	r3, r3, #32
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	e7f6      	b.n	80077ea <_printf_i+0x196>
 80077fc:	4616      	mov	r6, r2
 80077fe:	e7bd      	b.n	800777c <_printf_i+0x128>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	6825      	ldr	r5, [r4, #0]
 8007804:	6961      	ldr	r1, [r4, #20]
 8007806:	1d18      	adds	r0, r3, #4
 8007808:	6030      	str	r0, [r6, #0]
 800780a:	062e      	lsls	r6, r5, #24
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	d501      	bpl.n	8007814 <_printf_i+0x1c0>
 8007810:	6019      	str	r1, [r3, #0]
 8007812:	e002      	b.n	800781a <_printf_i+0x1c6>
 8007814:	0668      	lsls	r0, r5, #25
 8007816:	d5fb      	bpl.n	8007810 <_printf_i+0x1bc>
 8007818:	8019      	strh	r1, [r3, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	4616      	mov	r6, r2
 8007820:	e7bc      	b.n	800779c <_printf_i+0x148>
 8007822:	6833      	ldr	r3, [r6, #0]
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	6032      	str	r2, [r6, #0]
 8007828:	681e      	ldr	r6, [r3, #0]
 800782a:	6862      	ldr	r2, [r4, #4]
 800782c:	2100      	movs	r1, #0
 800782e:	4630      	mov	r0, r6
 8007830:	f7f8 fcce 	bl	80001d0 <memchr>
 8007834:	b108      	cbz	r0, 800783a <_printf_i+0x1e6>
 8007836:	1b80      	subs	r0, r0, r6
 8007838:	6060      	str	r0, [r4, #4]
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	2300      	movs	r3, #0
 8007840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007844:	e7aa      	b.n	800779c <_printf_i+0x148>
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	4632      	mov	r2, r6
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	47d0      	blx	sl
 8007850:	3001      	adds	r0, #1
 8007852:	d0ad      	beq.n	80077b0 <_printf_i+0x15c>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	079b      	lsls	r3, r3, #30
 8007858:	d413      	bmi.n	8007882 <_printf_i+0x22e>
 800785a:	68e0      	ldr	r0, [r4, #12]
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	4298      	cmp	r0, r3
 8007860:	bfb8      	it	lt
 8007862:	4618      	movlt	r0, r3
 8007864:	e7a6      	b.n	80077b4 <_printf_i+0x160>
 8007866:	2301      	movs	r3, #1
 8007868:	4632      	mov	r2, r6
 800786a:	4649      	mov	r1, r9
 800786c:	4640      	mov	r0, r8
 800786e:	47d0      	blx	sl
 8007870:	3001      	adds	r0, #1
 8007872:	d09d      	beq.n	80077b0 <_printf_i+0x15c>
 8007874:	3501      	adds	r5, #1
 8007876:	68e3      	ldr	r3, [r4, #12]
 8007878:	9903      	ldr	r1, [sp, #12]
 800787a:	1a5b      	subs	r3, r3, r1
 800787c:	42ab      	cmp	r3, r5
 800787e:	dcf2      	bgt.n	8007866 <_printf_i+0x212>
 8007880:	e7eb      	b.n	800785a <_printf_i+0x206>
 8007882:	2500      	movs	r5, #0
 8007884:	f104 0619 	add.w	r6, r4, #25
 8007888:	e7f5      	b.n	8007876 <_printf_i+0x222>
 800788a:	bf00      	nop
 800788c:	08009c7e 	.word	0x08009c7e
 8007890:	08009c8f 	.word	0x08009c8f

08007894 <std>:
 8007894:	2300      	movs	r3, #0
 8007896:	b510      	push	{r4, lr}
 8007898:	4604      	mov	r4, r0
 800789a:	e9c0 3300 	strd	r3, r3, [r0]
 800789e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078a2:	6083      	str	r3, [r0, #8]
 80078a4:	8181      	strh	r1, [r0, #12]
 80078a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078a8:	81c2      	strh	r2, [r0, #14]
 80078aa:	6183      	str	r3, [r0, #24]
 80078ac:	4619      	mov	r1, r3
 80078ae:	2208      	movs	r2, #8
 80078b0:	305c      	adds	r0, #92	@ 0x5c
 80078b2:	f000 f9f9 	bl	8007ca8 <memset>
 80078b6:	4b0d      	ldr	r3, [pc, #52]	@ (80078ec <std+0x58>)
 80078b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80078ba:	4b0d      	ldr	r3, [pc, #52]	@ (80078f0 <std+0x5c>)
 80078bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078be:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <std+0x60>)
 80078c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078c2:	4b0d      	ldr	r3, [pc, #52]	@ (80078f8 <std+0x64>)
 80078c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80078c6:	4b0d      	ldr	r3, [pc, #52]	@ (80078fc <std+0x68>)
 80078c8:	6224      	str	r4, [r4, #32]
 80078ca:	429c      	cmp	r4, r3
 80078cc:	d006      	beq.n	80078dc <std+0x48>
 80078ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078d2:	4294      	cmp	r4, r2
 80078d4:	d002      	beq.n	80078dc <std+0x48>
 80078d6:	33d0      	adds	r3, #208	@ 0xd0
 80078d8:	429c      	cmp	r4, r3
 80078da:	d105      	bne.n	80078e8 <std+0x54>
 80078dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e4:	f000 bab2 	b.w	8007e4c <__retarget_lock_init_recursive>
 80078e8:	bd10      	pop	{r4, pc}
 80078ea:	bf00      	nop
 80078ec:	08007af9 	.word	0x08007af9
 80078f0:	08007b1b 	.word	0x08007b1b
 80078f4:	08007b53 	.word	0x08007b53
 80078f8:	08007b77 	.word	0x08007b77
 80078fc:	200011ec 	.word	0x200011ec

08007900 <stdio_exit_handler>:
 8007900:	4a02      	ldr	r2, [pc, #8]	@ (800790c <stdio_exit_handler+0xc>)
 8007902:	4903      	ldr	r1, [pc, #12]	@ (8007910 <stdio_exit_handler+0x10>)
 8007904:	4803      	ldr	r0, [pc, #12]	@ (8007914 <stdio_exit_handler+0x14>)
 8007906:	f000 b869 	b.w	80079dc <_fwalk_sglue>
 800790a:	bf00      	nop
 800790c:	20000014 	.word	0x20000014
 8007910:	08009799 	.word	0x08009799
 8007914:	20000024 	.word	0x20000024

08007918 <cleanup_stdio>:
 8007918:	6841      	ldr	r1, [r0, #4]
 800791a:	4b0c      	ldr	r3, [pc, #48]	@ (800794c <cleanup_stdio+0x34>)
 800791c:	4299      	cmp	r1, r3
 800791e:	b510      	push	{r4, lr}
 8007920:	4604      	mov	r4, r0
 8007922:	d001      	beq.n	8007928 <cleanup_stdio+0x10>
 8007924:	f001 ff38 	bl	8009798 <_fflush_r>
 8007928:	68a1      	ldr	r1, [r4, #8]
 800792a:	4b09      	ldr	r3, [pc, #36]	@ (8007950 <cleanup_stdio+0x38>)
 800792c:	4299      	cmp	r1, r3
 800792e:	d002      	beq.n	8007936 <cleanup_stdio+0x1e>
 8007930:	4620      	mov	r0, r4
 8007932:	f001 ff31 	bl	8009798 <_fflush_r>
 8007936:	68e1      	ldr	r1, [r4, #12]
 8007938:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <cleanup_stdio+0x3c>)
 800793a:	4299      	cmp	r1, r3
 800793c:	d004      	beq.n	8007948 <cleanup_stdio+0x30>
 800793e:	4620      	mov	r0, r4
 8007940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007944:	f001 bf28 	b.w	8009798 <_fflush_r>
 8007948:	bd10      	pop	{r4, pc}
 800794a:	bf00      	nop
 800794c:	200011ec 	.word	0x200011ec
 8007950:	20001254 	.word	0x20001254
 8007954:	200012bc 	.word	0x200012bc

08007958 <global_stdio_init.part.0>:
 8007958:	b510      	push	{r4, lr}
 800795a:	4b0b      	ldr	r3, [pc, #44]	@ (8007988 <global_stdio_init.part.0+0x30>)
 800795c:	4c0b      	ldr	r4, [pc, #44]	@ (800798c <global_stdio_init.part.0+0x34>)
 800795e:	4a0c      	ldr	r2, [pc, #48]	@ (8007990 <global_stdio_init.part.0+0x38>)
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	4620      	mov	r0, r4
 8007964:	2200      	movs	r2, #0
 8007966:	2104      	movs	r1, #4
 8007968:	f7ff ff94 	bl	8007894 <std>
 800796c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007970:	2201      	movs	r2, #1
 8007972:	2109      	movs	r1, #9
 8007974:	f7ff ff8e 	bl	8007894 <std>
 8007978:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800797c:	2202      	movs	r2, #2
 800797e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007982:	2112      	movs	r1, #18
 8007984:	f7ff bf86 	b.w	8007894 <std>
 8007988:	20001324 	.word	0x20001324
 800798c:	200011ec 	.word	0x200011ec
 8007990:	08007901 	.word	0x08007901

08007994 <__sfp_lock_acquire>:
 8007994:	4801      	ldr	r0, [pc, #4]	@ (800799c <__sfp_lock_acquire+0x8>)
 8007996:	f000 ba5a 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 800799a:	bf00      	nop
 800799c:	2000132d 	.word	0x2000132d

080079a0 <__sfp_lock_release>:
 80079a0:	4801      	ldr	r0, [pc, #4]	@ (80079a8 <__sfp_lock_release+0x8>)
 80079a2:	f000 ba55 	b.w	8007e50 <__retarget_lock_release_recursive>
 80079a6:	bf00      	nop
 80079a8:	2000132d 	.word	0x2000132d

080079ac <__sinit>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4604      	mov	r4, r0
 80079b0:	f7ff fff0 	bl	8007994 <__sfp_lock_acquire>
 80079b4:	6a23      	ldr	r3, [r4, #32]
 80079b6:	b11b      	cbz	r3, 80079c0 <__sinit+0x14>
 80079b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079bc:	f7ff bff0 	b.w	80079a0 <__sfp_lock_release>
 80079c0:	4b04      	ldr	r3, [pc, #16]	@ (80079d4 <__sinit+0x28>)
 80079c2:	6223      	str	r3, [r4, #32]
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <__sinit+0x2c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f5      	bne.n	80079b8 <__sinit+0xc>
 80079cc:	f7ff ffc4 	bl	8007958 <global_stdio_init.part.0>
 80079d0:	e7f2      	b.n	80079b8 <__sinit+0xc>
 80079d2:	bf00      	nop
 80079d4:	08007919 	.word	0x08007919
 80079d8:	20001324 	.word	0x20001324

080079dc <_fwalk_sglue>:
 80079dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e0:	4607      	mov	r7, r0
 80079e2:	4688      	mov	r8, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	2600      	movs	r6, #0
 80079e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079ec:	f1b9 0901 	subs.w	r9, r9, #1
 80079f0:	d505      	bpl.n	80079fe <_fwalk_sglue+0x22>
 80079f2:	6824      	ldr	r4, [r4, #0]
 80079f4:	2c00      	cmp	r4, #0
 80079f6:	d1f7      	bne.n	80079e8 <_fwalk_sglue+0xc>
 80079f8:	4630      	mov	r0, r6
 80079fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fe:	89ab      	ldrh	r3, [r5, #12]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d907      	bls.n	8007a14 <_fwalk_sglue+0x38>
 8007a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	d003      	beq.n	8007a14 <_fwalk_sglue+0x38>
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	4638      	mov	r0, r7
 8007a10:	47c0      	blx	r8
 8007a12:	4306      	orrs	r6, r0
 8007a14:	3568      	adds	r5, #104	@ 0x68
 8007a16:	e7e9      	b.n	80079ec <_fwalk_sglue+0x10>

08007a18 <iprintf>:
 8007a18:	b40f      	push	{r0, r1, r2, r3}
 8007a1a:	b507      	push	{r0, r1, r2, lr}
 8007a1c:	4906      	ldr	r1, [pc, #24]	@ (8007a38 <iprintf+0x20>)
 8007a1e:	ab04      	add	r3, sp, #16
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a26:	6881      	ldr	r1, [r0, #8]
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	f001 fd19 	bl	8009460 <_vfiprintf_r>
 8007a2e:	b003      	add	sp, #12
 8007a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a34:	b004      	add	sp, #16
 8007a36:	4770      	bx	lr
 8007a38:	20000020 	.word	0x20000020

08007a3c <_puts_r>:
 8007a3c:	6a03      	ldr	r3, [r0, #32]
 8007a3e:	b570      	push	{r4, r5, r6, lr}
 8007a40:	6884      	ldr	r4, [r0, #8]
 8007a42:	4605      	mov	r5, r0
 8007a44:	460e      	mov	r6, r1
 8007a46:	b90b      	cbnz	r3, 8007a4c <_puts_r+0x10>
 8007a48:	f7ff ffb0 	bl	80079ac <__sinit>
 8007a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a4e:	07db      	lsls	r3, r3, #31
 8007a50:	d405      	bmi.n	8007a5e <_puts_r+0x22>
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	0598      	lsls	r0, r3, #22
 8007a56:	d402      	bmi.n	8007a5e <_puts_r+0x22>
 8007a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a5a:	f000 f9f8 	bl	8007e4e <__retarget_lock_acquire_recursive>
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	0719      	lsls	r1, r3, #28
 8007a62:	d502      	bpl.n	8007a6a <_puts_r+0x2e>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d135      	bne.n	8007ad6 <_puts_r+0x9a>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f8c5 	bl	8007bfc <__swsetup_r>
 8007a72:	b380      	cbz	r0, 8007ad6 <_puts_r+0x9a>
 8007a74:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a7a:	07da      	lsls	r2, r3, #31
 8007a7c:	d405      	bmi.n	8007a8a <_puts_r+0x4e>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	059b      	lsls	r3, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_puts_r+0x4e>
 8007a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a86:	f000 f9e3 	bl	8007e50 <__retarget_lock_release_recursive>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da04      	bge.n	8007a9c <_puts_r+0x60>
 8007a92:	69a2      	ldr	r2, [r4, #24]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	dc17      	bgt.n	8007ac8 <_puts_r+0x8c>
 8007a98:	290a      	cmp	r1, #10
 8007a9a:	d015      	beq.n	8007ac8 <_puts_r+0x8c>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	7019      	strb	r1, [r3, #0]
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d1ed      	bne.n	8007a8e <_puts_r+0x52>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da11      	bge.n	8007ada <_puts_r+0x9e>
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	210a      	movs	r1, #10
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f85f 	bl	8007b7e <__swbuf_r>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d0d7      	beq.n	8007a74 <_puts_r+0x38>
 8007ac4:	250a      	movs	r5, #10
 8007ac6:	e7d7      	b.n	8007a78 <_puts_r+0x3c>
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 f857 	bl	8007b7e <__swbuf_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d1e7      	bne.n	8007aa4 <_puts_r+0x68>
 8007ad4:	e7ce      	b.n	8007a74 <_puts_r+0x38>
 8007ad6:	3e01      	subs	r6, #1
 8007ad8:	e7e4      	b.n	8007aa4 <_puts_r+0x68>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	6022      	str	r2, [r4, #0]
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e7ee      	b.n	8007ac4 <_puts_r+0x88>
	...

08007ae8 <puts>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	@ (8007af4 <puts+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f7ff bfa5 	b.w	8007a3c <_puts_r>
 8007af2:	bf00      	nop
 8007af4:	20000020 	.word	0x20000020

08007af8 <__sread>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	460c      	mov	r4, r1
 8007afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b00:	f000 f956 	bl	8007db0 <_read_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	bfab      	itete	ge
 8007b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b0c:	181b      	addge	r3, r3, r0
 8007b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b12:	bfac      	ite	ge
 8007b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b16:	81a3      	strhlt	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__swrite>:
 8007b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	461f      	mov	r7, r3
 8007b20:	898b      	ldrh	r3, [r1, #12]
 8007b22:	05db      	lsls	r3, r3, #23
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	4616      	mov	r6, r2
 8007b2a:	d505      	bpl.n	8007b38 <__swrite+0x1e>
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	2302      	movs	r3, #2
 8007b32:	2200      	movs	r2, #0
 8007b34:	f000 f92a 	bl	8007d8c <_lseek_r>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	f000 b941 	b.w	8007dd4 <_write_r>

08007b52 <__sseek>:
 8007b52:	b510      	push	{r4, lr}
 8007b54:	460c      	mov	r4, r1
 8007b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5a:	f000 f917 	bl	8007d8c <_lseek_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	bf15      	itete	ne
 8007b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b6e:	81a3      	strheq	r3, [r4, #12]
 8007b70:	bf18      	it	ne
 8007b72:	81a3      	strhne	r3, [r4, #12]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__sclose>:
 8007b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7a:	f000 b8a1 	b.w	8007cc0 <_close_r>

08007b7e <__swbuf_r>:
 8007b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b80:	460e      	mov	r6, r1
 8007b82:	4614      	mov	r4, r2
 8007b84:	4605      	mov	r5, r0
 8007b86:	b118      	cbz	r0, 8007b90 <__swbuf_r+0x12>
 8007b88:	6a03      	ldr	r3, [r0, #32]
 8007b8a:	b90b      	cbnz	r3, 8007b90 <__swbuf_r+0x12>
 8007b8c:	f7ff ff0e 	bl	80079ac <__sinit>
 8007b90:	69a3      	ldr	r3, [r4, #24]
 8007b92:	60a3      	str	r3, [r4, #8]
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	071a      	lsls	r2, r3, #28
 8007b98:	d501      	bpl.n	8007b9e <__swbuf_r+0x20>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	b943      	cbnz	r3, 8007bb0 <__swbuf_r+0x32>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 f82b 	bl	8007bfc <__swsetup_r>
 8007ba6:	b118      	cbz	r0, 8007bb0 <__swbuf_r+0x32>
 8007ba8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007bac:	4638      	mov	r0, r7
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	1a98      	subs	r0, r3, r2
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	b2f6      	uxtb	r6, r6
 8007bba:	4283      	cmp	r3, r0
 8007bbc:	4637      	mov	r7, r6
 8007bbe:	dc05      	bgt.n	8007bcc <__swbuf_r+0x4e>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f001 fde8 	bl	8009798 <_fflush_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1ed      	bne.n	8007ba8 <__swbuf_r+0x2a>
 8007bcc:	68a3      	ldr	r3, [r4, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	6022      	str	r2, [r4, #0]
 8007bd8:	701e      	strb	r6, [r3, #0]
 8007bda:	6962      	ldr	r2, [r4, #20]
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d004      	beq.n	8007bec <__swbuf_r+0x6e>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	07db      	lsls	r3, r3, #31
 8007be6:	d5e1      	bpl.n	8007bac <__swbuf_r+0x2e>
 8007be8:	2e0a      	cmp	r6, #10
 8007bea:	d1df      	bne.n	8007bac <__swbuf_r+0x2e>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f001 fdd2 	bl	8009798 <_fflush_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0d9      	beq.n	8007bac <__swbuf_r+0x2e>
 8007bf8:	e7d6      	b.n	8007ba8 <__swbuf_r+0x2a>
	...

08007bfc <__swsetup_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4b29      	ldr	r3, [pc, #164]	@ (8007ca4 <__swsetup_r+0xa8>)
 8007c00:	4605      	mov	r5, r0
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	460c      	mov	r4, r1
 8007c06:	b118      	cbz	r0, 8007c10 <__swsetup_r+0x14>
 8007c08:	6a03      	ldr	r3, [r0, #32]
 8007c0a:	b90b      	cbnz	r3, 8007c10 <__swsetup_r+0x14>
 8007c0c:	f7ff fece 	bl	80079ac <__sinit>
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	0719      	lsls	r1, r3, #28
 8007c16:	d422      	bmi.n	8007c5e <__swsetup_r+0x62>
 8007c18:	06da      	lsls	r2, r3, #27
 8007c1a:	d407      	bmi.n	8007c2c <__swsetup_r+0x30>
 8007c1c:	2209      	movs	r2, #9
 8007c1e:	602a      	str	r2, [r5, #0]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c2a:	e033      	b.n	8007c94 <__swsetup_r+0x98>
 8007c2c:	0758      	lsls	r0, r3, #29
 8007c2e:	d512      	bpl.n	8007c56 <__swsetup_r+0x5a>
 8007c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c32:	b141      	cbz	r1, 8007c46 <__swsetup_r+0x4a>
 8007c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__swsetup_r+0x46>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 ff63 	bl	8008b08 <_free_r>
 8007c42:	2300      	movs	r3, #0
 8007c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f043 0308 	orr.w	r3, r3, #8
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	b94b      	cbnz	r3, 8007c76 <__swsetup_r+0x7a>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6c:	d003      	beq.n	8007c76 <__swsetup_r+0x7a>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f001 fddf 	bl	8009834 <__smakebuf_r>
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	f013 0201 	ands.w	r2, r3, #1
 8007c7e:	d00a      	beq.n	8007c96 <__swsetup_r+0x9a>
 8007c80:	2200      	movs	r2, #0
 8007c82:	60a2      	str	r2, [r4, #8]
 8007c84:	6962      	ldr	r2, [r4, #20]
 8007c86:	4252      	negs	r2, r2
 8007c88:	61a2      	str	r2, [r4, #24]
 8007c8a:	6922      	ldr	r2, [r4, #16]
 8007c8c:	b942      	cbnz	r2, 8007ca0 <__swsetup_r+0xa4>
 8007c8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c92:	d1c5      	bne.n	8007c20 <__swsetup_r+0x24>
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	0799      	lsls	r1, r3, #30
 8007c98:	bf58      	it	pl
 8007c9a:	6962      	ldrpl	r2, [r4, #20]
 8007c9c:	60a2      	str	r2, [r4, #8]
 8007c9e:	e7f4      	b.n	8007c8a <__swsetup_r+0x8e>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7f7      	b.n	8007c94 <__swsetup_r+0x98>
 8007ca4:	20000020 	.word	0x20000020

08007ca8 <memset>:
 8007ca8:	4402      	add	r2, r0
 8007caa:	4603      	mov	r3, r0
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d100      	bne.n	8007cb2 <memset+0xa>
 8007cb0:	4770      	bx	lr
 8007cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb6:	e7f9      	b.n	8007cac <memset+0x4>

08007cb8 <_localeconv_r>:
 8007cb8:	4800      	ldr	r0, [pc, #0]	@ (8007cbc <_localeconv_r+0x4>)
 8007cba:	4770      	bx	lr
 8007cbc:	20000160 	.word	0x20000160

08007cc0 <_close_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	@ (8007cdc <_close_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7f9 fcee 	bl	80016ac <_close>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_close_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_close_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20001328 	.word	0x20001328

08007ce0 <_reclaim_reent>:
 8007ce0:	4b29      	ldr	r3, [pc, #164]	@ (8007d88 <_reclaim_reent+0xa8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4283      	cmp	r3, r0
 8007ce6:	b570      	push	{r4, r5, r6, lr}
 8007ce8:	4604      	mov	r4, r0
 8007cea:	d04b      	beq.n	8007d84 <_reclaim_reent+0xa4>
 8007cec:	69c3      	ldr	r3, [r0, #28]
 8007cee:	b1ab      	cbz	r3, 8007d1c <_reclaim_reent+0x3c>
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	b16b      	cbz	r3, 8007d10 <_reclaim_reent+0x30>
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	69e3      	ldr	r3, [r4, #28]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	5959      	ldr	r1, [r3, r5]
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d13b      	bne.n	8007d78 <_reclaim_reent+0x98>
 8007d00:	3504      	adds	r5, #4
 8007d02:	2d80      	cmp	r5, #128	@ 0x80
 8007d04:	d1f7      	bne.n	8007cf6 <_reclaim_reent+0x16>
 8007d06:	69e3      	ldr	r3, [r4, #28]
 8007d08:	4620      	mov	r0, r4
 8007d0a:	68d9      	ldr	r1, [r3, #12]
 8007d0c:	f000 fefc 	bl	8008b08 <_free_r>
 8007d10:	69e3      	ldr	r3, [r4, #28]
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	b111      	cbz	r1, 8007d1c <_reclaim_reent+0x3c>
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fef6 	bl	8008b08 <_free_r>
 8007d1c:	6961      	ldr	r1, [r4, #20]
 8007d1e:	b111      	cbz	r1, 8007d26 <_reclaim_reent+0x46>
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fef1 	bl	8008b08 <_free_r>
 8007d26:	69e1      	ldr	r1, [r4, #28]
 8007d28:	b111      	cbz	r1, 8007d30 <_reclaim_reent+0x50>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 feec 	bl	8008b08 <_free_r>
 8007d30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007d32:	b111      	cbz	r1, 8007d3a <_reclaim_reent+0x5a>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fee7 	bl	8008b08 <_free_r>
 8007d3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d3c:	b111      	cbz	r1, 8007d44 <_reclaim_reent+0x64>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fee2 	bl	8008b08 <_free_r>
 8007d44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007d46:	b111      	cbz	r1, 8007d4e <_reclaim_reent+0x6e>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 fedd 	bl	8008b08 <_free_r>
 8007d4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d50:	b111      	cbz	r1, 8007d58 <_reclaim_reent+0x78>
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fed8 	bl	8008b08 <_free_r>
 8007d58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d5a:	b111      	cbz	r1, 8007d62 <_reclaim_reent+0x82>
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 fed3 	bl	8008b08 <_free_r>
 8007d62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d64:	b111      	cbz	r1, 8007d6c <_reclaim_reent+0x8c>
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 fece 	bl	8008b08 <_free_r>
 8007d6c:	6a23      	ldr	r3, [r4, #32]
 8007d6e:	b14b      	cbz	r3, 8007d84 <_reclaim_reent+0xa4>
 8007d70:	4620      	mov	r0, r4
 8007d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d76:	4718      	bx	r3
 8007d78:	680e      	ldr	r6, [r1, #0]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fec4 	bl	8008b08 <_free_r>
 8007d80:	4631      	mov	r1, r6
 8007d82:	e7bb      	b.n	8007cfc <_reclaim_reent+0x1c>
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	bf00      	nop
 8007d88:	20000020 	.word	0x20000020

08007d8c <_lseek_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d07      	ldr	r5, [pc, #28]	@ (8007dac <_lseek_r+0x20>)
 8007d90:	4604      	mov	r4, r0
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f7f9 fc90 	bl	80016c0 <_lseek>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_lseek_r+0x1e>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_lseek_r+0x1e>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20001328 	.word	0x20001328

08007db0 <_read_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	@ (8007dd0 <_read_r+0x20>)
 8007db4:	4604      	mov	r4, r0
 8007db6:	4608      	mov	r0, r1
 8007db8:	4611      	mov	r1, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7f9 fc64 	bl	800168c <_read>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_read_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_read_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20001328 	.word	0x20001328

08007dd4 <_write_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d07      	ldr	r5, [pc, #28]	@ (8007df4 <_write_r+0x20>)
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	602a      	str	r2, [r5, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f7f9 f99c 	bl	8001120 <_write>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_write_r+0x1e>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_write_r+0x1e>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20001328 	.word	0x20001328

08007df8 <__errno>:
 8007df8:	4b01      	ldr	r3, [pc, #4]	@ (8007e00 <__errno+0x8>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000020 	.word	0x20000020

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	@ (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	@ (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	@ (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	@ (8007e48 <__libc_init_array+0x44>)
 8007e18:	f001 fe2a 	bl	8009a70 <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08009fe8 	.word	0x08009fe8
 8007e40:	08009fe8 	.word	0x08009fe8
 8007e44:	08009fe8 	.word	0x08009fe8
 8007e48:	08009fec 	.word	0x08009fec

08007e4c <__retarget_lock_init_recursive>:
 8007e4c:	4770      	bx	lr

08007e4e <__retarget_lock_acquire_recursive>:
 8007e4e:	4770      	bx	lr

08007e50 <__retarget_lock_release_recursive>:
 8007e50:	4770      	bx	lr

08007e52 <memcpy>:
 8007e52:	440a      	add	r2, r1
 8007e54:	4291      	cmp	r1, r2
 8007e56:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e5a:	d100      	bne.n	8007e5e <memcpy+0xc>
 8007e5c:	4770      	bx	lr
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e68:	4291      	cmp	r1, r2
 8007e6a:	d1f9      	bne.n	8007e60 <memcpy+0xe>
 8007e6c:	bd10      	pop	{r4, pc}

08007e6e <quorem>:
 8007e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e72:	6903      	ldr	r3, [r0, #16]
 8007e74:	690c      	ldr	r4, [r1, #16]
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	4607      	mov	r7, r0
 8007e7a:	db7e      	blt.n	8007f7a <quorem+0x10c>
 8007e7c:	3c01      	subs	r4, #1
 8007e7e:	f101 0814 	add.w	r8, r1, #20
 8007e82:	00a3      	lsls	r3, r4, #2
 8007e84:	f100 0514 	add.w	r5, r0, #20
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea4:	d32e      	bcc.n	8007f04 <quorem+0x96>
 8007ea6:	f04f 0a00 	mov.w	sl, #0
 8007eaa:	46c4      	mov	ip, r8
 8007eac:	46ae      	mov	lr, r5
 8007eae:	46d3      	mov	fp, sl
 8007eb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007eb4:	b298      	uxth	r0, r3
 8007eb6:	fb06 a000 	mla	r0, r6, r0, sl
 8007eba:	0c02      	lsrs	r2, r0, #16
 8007ebc:	0c1b      	lsrs	r3, r3, #16
 8007ebe:	fb06 2303 	mla	r3, r6, r3, r2
 8007ec2:	f8de 2000 	ldr.w	r2, [lr]
 8007ec6:	b280      	uxth	r0, r0
 8007ec8:	b292      	uxth	r2, r2
 8007eca:	1a12      	subs	r2, r2, r0
 8007ecc:	445a      	add	r2, fp
 8007ece:	f8de 0000 	ldr.w	r0, [lr]
 8007ed2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007edc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ee6:	45e1      	cmp	r9, ip
 8007ee8:	f84e 2b04 	str.w	r2, [lr], #4
 8007eec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ef0:	d2de      	bcs.n	8007eb0 <quorem+0x42>
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	58eb      	ldr	r3, [r5, r3]
 8007ef6:	b92b      	cbnz	r3, 8007f04 <quorem+0x96>
 8007ef8:	9b01      	ldr	r3, [sp, #4]
 8007efa:	3b04      	subs	r3, #4
 8007efc:	429d      	cmp	r5, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	d32f      	bcc.n	8007f62 <quorem+0xf4>
 8007f02:	613c      	str	r4, [r7, #16]
 8007f04:	4638      	mov	r0, r7
 8007f06:	f001 f979 	bl	80091fc <__mcmp>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	db25      	blt.n	8007f5a <quorem+0xec>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	2000      	movs	r0, #0
 8007f12:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f16:	f8d1 c000 	ldr.w	ip, [r1]
 8007f1a:	fa1f fe82 	uxth.w	lr, r2
 8007f1e:	fa1f f38c 	uxth.w	r3, ip
 8007f22:	eba3 030e 	sub.w	r3, r3, lr
 8007f26:	4403      	add	r3, r0
 8007f28:	0c12      	lsrs	r2, r2, #16
 8007f2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f38:	45c1      	cmp	r9, r8
 8007f3a:	f841 3b04 	str.w	r3, [r1], #4
 8007f3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f42:	d2e6      	bcs.n	8007f12 <quorem+0xa4>
 8007f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f4c:	b922      	cbnz	r2, 8007f58 <quorem+0xea>
 8007f4e:	3b04      	subs	r3, #4
 8007f50:	429d      	cmp	r5, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	d30b      	bcc.n	8007f6e <quorem+0x100>
 8007f56:	613c      	str	r4, [r7, #16]
 8007f58:	3601      	adds	r6, #1
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	b003      	add	sp, #12
 8007f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1cb      	bne.n	8007f02 <quorem+0x94>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7c6      	b.n	8007efc <quorem+0x8e>
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	3b04      	subs	r3, #4
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d1ef      	bne.n	8007f56 <quorem+0xe8>
 8007f76:	3c01      	subs	r4, #1
 8007f78:	e7ea      	b.n	8007f50 <quorem+0xe2>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	e7ee      	b.n	8007f5c <quorem+0xee>
	...

08007f80 <_dtoa_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	69c7      	ldr	r7, [r0, #28]
 8007f86:	b099      	sub	sp, #100	@ 0x64
 8007f88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f8c:	ec55 4b10 	vmov	r4, r5, d0
 8007f90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007f92:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f94:	4683      	mov	fp, r0
 8007f96:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f9a:	b97f      	cbnz	r7, 8007fbc <_dtoa_r+0x3c>
 8007f9c:	2010      	movs	r0, #16
 8007f9e:	f000 fdfd 	bl	8008b9c <malloc>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007fa8:	b920      	cbnz	r0, 8007fb4 <_dtoa_r+0x34>
 8007faa:	4ba7      	ldr	r3, [pc, #668]	@ (8008248 <_dtoa_r+0x2c8>)
 8007fac:	21ef      	movs	r1, #239	@ 0xef
 8007fae:	48a7      	ldr	r0, [pc, #668]	@ (800824c <_dtoa_r+0x2cc>)
 8007fb0:	f001 fcae 	bl	8009910 <__assert_func>
 8007fb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fb8:	6007      	str	r7, [r0, #0]
 8007fba:	60c7      	str	r7, [r0, #12]
 8007fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	b159      	cbz	r1, 8007fdc <_dtoa_r+0x5c>
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	604a      	str	r2, [r1, #4]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4093      	lsls	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f000 feda 	bl	8008d88 <_Bfree>
 8007fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	1e2b      	subs	r3, r5, #0
 8007fde:	bfb9      	ittee	lt
 8007fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007fe4:	9303      	strlt	r3, [sp, #12]
 8007fe6:	2300      	movge	r3, #0
 8007fe8:	6033      	strge	r3, [r6, #0]
 8007fea:	9f03      	ldr	r7, [sp, #12]
 8007fec:	4b98      	ldr	r3, [pc, #608]	@ (8008250 <_dtoa_r+0x2d0>)
 8007fee:	bfbc      	itt	lt
 8007ff0:	2201      	movlt	r2, #1
 8007ff2:	6032      	strlt	r2, [r6, #0]
 8007ff4:	43bb      	bics	r3, r7
 8007ff6:	d112      	bne.n	800801e <_dtoa_r+0x9e>
 8007ff8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ffa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008004:	4323      	orrs	r3, r4
 8008006:	f000 854d 	beq.w	8008aa4 <_dtoa_r+0xb24>
 800800a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800800c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008264 <_dtoa_r+0x2e4>
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 854f 	beq.w	8008ab4 <_dtoa_r+0xb34>
 8008016:	f10a 0303 	add.w	r3, sl, #3
 800801a:	f000 bd49 	b.w	8008ab0 <_dtoa_r+0xb30>
 800801e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	ec51 0b17 	vmov	r0, r1, d7
 8008028:	2300      	movs	r3, #0
 800802a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800802e:	f7f8 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008032:	4680      	mov	r8, r0
 8008034:	b158      	cbz	r0, 800804e <_dtoa_r+0xce>
 8008036:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008038:	2301      	movs	r3, #1
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800803e:	b113      	cbz	r3, 8008046 <_dtoa_r+0xc6>
 8008040:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008042:	4b84      	ldr	r3, [pc, #528]	@ (8008254 <_dtoa_r+0x2d4>)
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008268 <_dtoa_r+0x2e8>
 800804a:	f000 bd33 	b.w	8008ab4 <_dtoa_r+0xb34>
 800804e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008052:	aa16      	add	r2, sp, #88	@ 0x58
 8008054:	a917      	add	r1, sp, #92	@ 0x5c
 8008056:	4658      	mov	r0, fp
 8008058:	f001 f980 	bl	800935c <__d2b>
 800805c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008060:	4681      	mov	r9, r0
 8008062:	2e00      	cmp	r6, #0
 8008064:	d077      	beq.n	8008156 <_dtoa_r+0x1d6>
 8008066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008068:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800806c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800807c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008080:	4619      	mov	r1, r3
 8008082:	2200      	movs	r2, #0
 8008084:	4b74      	ldr	r3, [pc, #464]	@ (8008258 <_dtoa_r+0x2d8>)
 8008086:	f7f8 f8ff 	bl	8000288 <__aeabi_dsub>
 800808a:	a369      	add	r3, pc, #420	@ (adr r3, 8008230 <_dtoa_r+0x2b0>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	a368      	add	r3, pc, #416	@ (adr r3, 8008238 <_dtoa_r+0x2b8>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f8f7 	bl	800028c <__adddf3>
 800809e:	4604      	mov	r4, r0
 80080a0:	4630      	mov	r0, r6
 80080a2:	460d      	mov	r5, r1
 80080a4:	f7f8 fa3e 	bl	8000524 <__aeabi_i2d>
 80080a8:	a365      	add	r3, pc, #404	@ (adr r3, 8008240 <_dtoa_r+0x2c0>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 faa3 	bl	80005f8 <__aeabi_dmul>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 f8e7 	bl	800028c <__adddf3>
 80080be:	4604      	mov	r4, r0
 80080c0:	460d      	mov	r5, r1
 80080c2:	f7f8 fd49 	bl	8000b58 <__aeabi_d2iz>
 80080c6:	2200      	movs	r2, #0
 80080c8:	4607      	mov	r7, r0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 fd04 	bl	8000adc <__aeabi_dcmplt>
 80080d4:	b140      	cbz	r0, 80080e8 <_dtoa_r+0x168>
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7f8 fa24 	bl	8000524 <__aeabi_i2d>
 80080dc:	4622      	mov	r2, r4
 80080de:	462b      	mov	r3, r5
 80080e0:	f7f8 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e4:	b900      	cbnz	r0, 80080e8 <_dtoa_r+0x168>
 80080e6:	3f01      	subs	r7, #1
 80080e8:	2f16      	cmp	r7, #22
 80080ea:	d851      	bhi.n	8008190 <_dtoa_r+0x210>
 80080ec:	4b5b      	ldr	r3, [pc, #364]	@ (800825c <_dtoa_r+0x2dc>)
 80080ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080fa:	f7f8 fcef 	bl	8000adc <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d048      	beq.n	8008194 <_dtoa_r+0x214>
 8008102:	3f01      	subs	r7, #1
 8008104:	2300      	movs	r3, #0
 8008106:	9312      	str	r3, [sp, #72]	@ 0x48
 8008108:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800810a:	1b9b      	subs	r3, r3, r6
 800810c:	1e5a      	subs	r2, r3, #1
 800810e:	bf44      	itt	mi
 8008110:	f1c3 0801 	rsbmi	r8, r3, #1
 8008114:	2300      	movmi	r3, #0
 8008116:	9208      	str	r2, [sp, #32]
 8008118:	bf54      	ite	pl
 800811a:	f04f 0800 	movpl.w	r8, #0
 800811e:	9308      	strmi	r3, [sp, #32]
 8008120:	2f00      	cmp	r7, #0
 8008122:	db39      	blt.n	8008198 <_dtoa_r+0x218>
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008128:	443b      	add	r3, r7
 800812a:	9308      	str	r3, [sp, #32]
 800812c:	2300      	movs	r3, #0
 800812e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	2b09      	cmp	r3, #9
 8008134:	d864      	bhi.n	8008200 <_dtoa_r+0x280>
 8008136:	2b05      	cmp	r3, #5
 8008138:	bfc4      	itt	gt
 800813a:	3b04      	subgt	r3, #4
 800813c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800813e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008140:	f1a3 0302 	sub.w	r3, r3, #2
 8008144:	bfcc      	ite	gt
 8008146:	2400      	movgt	r4, #0
 8008148:	2401      	movle	r4, #1
 800814a:	2b03      	cmp	r3, #3
 800814c:	d863      	bhi.n	8008216 <_dtoa_r+0x296>
 800814e:	e8df f003 	tbb	[pc, r3]
 8008152:	372a      	.short	0x372a
 8008154:	5535      	.short	0x5535
 8008156:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800815a:	441e      	add	r6, r3
 800815c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008160:	2b20      	cmp	r3, #32
 8008162:	bfc1      	itttt	gt
 8008164:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008168:	409f      	lslgt	r7, r3
 800816a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800816e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008172:	bfd6      	itet	le
 8008174:	f1c3 0320 	rsble	r3, r3, #32
 8008178:	ea47 0003 	orrgt.w	r0, r7, r3
 800817c:	fa04 f003 	lslle.w	r0, r4, r3
 8008180:	f7f8 f9c0 	bl	8000504 <__aeabi_ui2d>
 8008184:	2201      	movs	r2, #1
 8008186:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800818a:	3e01      	subs	r6, #1
 800818c:	9214      	str	r2, [sp, #80]	@ 0x50
 800818e:	e777      	b.n	8008080 <_dtoa_r+0x100>
 8008190:	2301      	movs	r3, #1
 8008192:	e7b8      	b.n	8008106 <_dtoa_r+0x186>
 8008194:	9012      	str	r0, [sp, #72]	@ 0x48
 8008196:	e7b7      	b.n	8008108 <_dtoa_r+0x188>
 8008198:	427b      	negs	r3, r7
 800819a:	930a      	str	r3, [sp, #40]	@ 0x28
 800819c:	2300      	movs	r3, #0
 800819e:	eba8 0807 	sub.w	r8, r8, r7
 80081a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081a4:	e7c4      	b.n	8008130 <_dtoa_r+0x1b0>
 80081a6:	2300      	movs	r3, #0
 80081a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc35      	bgt.n	800821c <_dtoa_r+0x29c>
 80081b0:	2301      	movs	r3, #1
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	9307      	str	r3, [sp, #28]
 80081b6:	461a      	mov	r2, r3
 80081b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80081ba:	e00b      	b.n	80081d4 <_dtoa_r+0x254>
 80081bc:	2301      	movs	r3, #1
 80081be:	e7f3      	b.n	80081a8 <_dtoa_r+0x228>
 80081c0:	2300      	movs	r3, #0
 80081c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	bfb8      	it	lt
 80081d2:	2301      	movlt	r3, #1
 80081d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80081d8:	2100      	movs	r1, #0
 80081da:	2204      	movs	r2, #4
 80081dc:	f102 0514 	add.w	r5, r2, #20
 80081e0:	429d      	cmp	r5, r3
 80081e2:	d91f      	bls.n	8008224 <_dtoa_r+0x2a4>
 80081e4:	6041      	str	r1, [r0, #4]
 80081e6:	4658      	mov	r0, fp
 80081e8:	f000 fd8e 	bl	8008d08 <_Balloc>
 80081ec:	4682      	mov	sl, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d13c      	bne.n	800826c <_dtoa_r+0x2ec>
 80081f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008260 <_dtoa_r+0x2e0>)
 80081f4:	4602      	mov	r2, r0
 80081f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80081fa:	e6d8      	b.n	8007fae <_dtoa_r+0x2e>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e7e0      	b.n	80081c2 <_dtoa_r+0x242>
 8008200:	2401      	movs	r4, #1
 8008202:	2300      	movs	r3, #0
 8008204:	9309      	str	r3, [sp, #36]	@ 0x24
 8008206:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	2200      	movs	r2, #0
 8008212:	2312      	movs	r3, #18
 8008214:	e7d0      	b.n	80081b8 <_dtoa_r+0x238>
 8008216:	2301      	movs	r3, #1
 8008218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800821a:	e7f5      	b.n	8008208 <_dtoa_r+0x288>
 800821c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	e7d7      	b.n	80081d4 <_dtoa_r+0x254>
 8008224:	3101      	adds	r1, #1
 8008226:	0052      	lsls	r2, r2, #1
 8008228:	e7d8      	b.n	80081dc <_dtoa_r+0x25c>
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w
 8008230:	636f4361 	.word	0x636f4361
 8008234:	3fd287a7 	.word	0x3fd287a7
 8008238:	8b60c8b3 	.word	0x8b60c8b3
 800823c:	3fc68a28 	.word	0x3fc68a28
 8008240:	509f79fb 	.word	0x509f79fb
 8008244:	3fd34413 	.word	0x3fd34413
 8008248:	08009cad 	.word	0x08009cad
 800824c:	08009cc4 	.word	0x08009cc4
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	08009c7d 	.word	0x08009c7d
 8008258:	3ff80000 	.word	0x3ff80000
 800825c:	08009dc0 	.word	0x08009dc0
 8008260:	08009d1c 	.word	0x08009d1c
 8008264:	08009ca9 	.word	0x08009ca9
 8008268:	08009c7c 	.word	0x08009c7c
 800826c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008270:	6018      	str	r0, [r3, #0]
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	2b0e      	cmp	r3, #14
 8008276:	f200 80a4 	bhi.w	80083c2 <_dtoa_r+0x442>
 800827a:	2c00      	cmp	r4, #0
 800827c:	f000 80a1 	beq.w	80083c2 <_dtoa_r+0x442>
 8008280:	2f00      	cmp	r7, #0
 8008282:	dd33      	ble.n	80082ec <_dtoa_r+0x36c>
 8008284:	4bad      	ldr	r3, [pc, #692]	@ (800853c <_dtoa_r+0x5bc>)
 8008286:	f007 020f 	and.w	r2, r7, #15
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	ed93 7b00 	vldr	d7, [r3]
 8008292:	05f8      	lsls	r0, r7, #23
 8008294:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008298:	ea4f 1427 	mov.w	r4, r7, asr #4
 800829c:	d516      	bpl.n	80082cc <_dtoa_r+0x34c>
 800829e:	4ba8      	ldr	r3, [pc, #672]	@ (8008540 <_dtoa_r+0x5c0>)
 80082a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082a8:	f7f8 fad0 	bl	800084c <__aeabi_ddiv>
 80082ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b0:	f004 040f 	and.w	r4, r4, #15
 80082b4:	2603      	movs	r6, #3
 80082b6:	4da2      	ldr	r5, [pc, #648]	@ (8008540 <_dtoa_r+0x5c0>)
 80082b8:	b954      	cbnz	r4, 80082d0 <_dtoa_r+0x350>
 80082ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c2:	f7f8 fac3 	bl	800084c <__aeabi_ddiv>
 80082c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ca:	e028      	b.n	800831e <_dtoa_r+0x39e>
 80082cc:	2602      	movs	r6, #2
 80082ce:	e7f2      	b.n	80082b6 <_dtoa_r+0x336>
 80082d0:	07e1      	lsls	r1, r4, #31
 80082d2:	d508      	bpl.n	80082e6 <_dtoa_r+0x366>
 80082d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082e4:	3601      	adds	r6, #1
 80082e6:	1064      	asrs	r4, r4, #1
 80082e8:	3508      	adds	r5, #8
 80082ea:	e7e5      	b.n	80082b8 <_dtoa_r+0x338>
 80082ec:	f000 80d2 	beq.w	8008494 <_dtoa_r+0x514>
 80082f0:	427c      	negs	r4, r7
 80082f2:	4b92      	ldr	r3, [pc, #584]	@ (800853c <_dtoa_r+0x5bc>)
 80082f4:	4d92      	ldr	r5, [pc, #584]	@ (8008540 <_dtoa_r+0x5c0>)
 80082f6:	f004 020f 	and.w	r2, r4, #15
 80082fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800830e:	1124      	asrs	r4, r4, #4
 8008310:	2300      	movs	r3, #0
 8008312:	2602      	movs	r6, #2
 8008314:	2c00      	cmp	r4, #0
 8008316:	f040 80b2 	bne.w	800847e <_dtoa_r+0x4fe>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1d3      	bne.n	80082c6 <_dtoa_r+0x346>
 800831e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008320:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80b7 	beq.w	8008498 <_dtoa_r+0x518>
 800832a:	4b86      	ldr	r3, [pc, #536]	@ (8008544 <_dtoa_r+0x5c4>)
 800832c:	2200      	movs	r2, #0
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f8 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f000 80ae 	beq.w	8008498 <_dtoa_r+0x518>
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80aa 	beq.w	8008498 <_dtoa_r+0x518>
 8008344:	9b00      	ldr	r3, [sp, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dd37      	ble.n	80083ba <_dtoa_r+0x43a>
 800834a:	1e7b      	subs	r3, r7, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	4620      	mov	r0, r4
 8008350:	4b7d      	ldr	r3, [pc, #500]	@ (8008548 <_dtoa_r+0x5c8>)
 8008352:	2200      	movs	r2, #0
 8008354:	4629      	mov	r1, r5
 8008356:	f7f8 f94f 	bl	80005f8 <__aeabi_dmul>
 800835a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800835e:	9c00      	ldr	r4, [sp, #0]
 8008360:	3601      	adds	r6, #1
 8008362:	4630      	mov	r0, r6
 8008364:	f7f8 f8de 	bl	8000524 <__aeabi_i2d>
 8008368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836c:	f7f8 f944 	bl	80005f8 <__aeabi_dmul>
 8008370:	4b76      	ldr	r3, [pc, #472]	@ (800854c <_dtoa_r+0x5cc>)
 8008372:	2200      	movs	r2, #0
 8008374:	f7f7 ff8a 	bl	800028c <__adddf3>
 8008378:	4605      	mov	r5, r0
 800837a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800837e:	2c00      	cmp	r4, #0
 8008380:	f040 808d 	bne.w	800849e <_dtoa_r+0x51e>
 8008384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008388:	4b71      	ldr	r3, [pc, #452]	@ (8008550 <_dtoa_r+0x5d0>)
 800838a:	2200      	movs	r2, #0
 800838c:	f7f7 ff7c 	bl	8000288 <__aeabi_dsub>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008398:	462a      	mov	r2, r5
 800839a:	4633      	mov	r3, r6
 800839c:	f7f8 fbbc 	bl	8000b18 <__aeabi_dcmpgt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f040 828b 	bne.w	80088bc <_dtoa_r+0x93c>
 80083a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083aa:	462a      	mov	r2, r5
 80083ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083b0:	f7f8 fb94 	bl	8000adc <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f040 8128 	bne.w	800860a <_dtoa_r+0x68a>
 80083ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80083be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80083c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f2c0 815a 	blt.w	800867e <_dtoa_r+0x6fe>
 80083ca:	2f0e      	cmp	r7, #14
 80083cc:	f300 8157 	bgt.w	800867e <_dtoa_r+0x6fe>
 80083d0:	4b5a      	ldr	r3, [pc, #360]	@ (800853c <_dtoa_r+0x5bc>)
 80083d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083d6:	ed93 7b00 	vldr	d7, [r3]
 80083da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083dc:	2b00      	cmp	r3, #0
 80083de:	ed8d 7b00 	vstr	d7, [sp]
 80083e2:	da03      	bge.n	80083ec <_dtoa_r+0x46c>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f340 8101 	ble.w	80085ee <_dtoa_r+0x66e>
 80083ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083f0:	4656      	mov	r6, sl
 80083f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 fa27 	bl	800084c <__aeabi_ddiv>
 80083fe:	f7f8 fbab 	bl	8000b58 <__aeabi_d2iz>
 8008402:	4680      	mov	r8, r0
 8008404:	f7f8 f88e 	bl	8000524 <__aeabi_i2d>
 8008408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800840c:	f7f8 f8f4 	bl	80005f8 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800841c:	f7f7 ff34 	bl	8000288 <__aeabi_dsub>
 8008420:	f806 4b01 	strb.w	r4, [r6], #1
 8008424:	9d07      	ldr	r5, [sp, #28]
 8008426:	eba6 040a 	sub.w	r4, r6, sl
 800842a:	42a5      	cmp	r5, r4
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	f040 8117 	bne.w	8008662 <_dtoa_r+0x6e2>
 8008434:	f7f7 ff2a 	bl	800028c <__adddf3>
 8008438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800843c:	4604      	mov	r4, r0
 800843e:	460d      	mov	r5, r1
 8008440:	f7f8 fb6a 	bl	8000b18 <__aeabi_dcmpgt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 80f9 	bne.w	800863c <_dtoa_r+0x6bc>
 800844a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f8 fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 8008456:	b118      	cbz	r0, 8008460 <_dtoa_r+0x4e0>
 8008458:	f018 0f01 	tst.w	r8, #1
 800845c:	f040 80ee 	bne.w	800863c <_dtoa_r+0x6bc>
 8008460:	4649      	mov	r1, r9
 8008462:	4658      	mov	r0, fp
 8008464:	f000 fc90 	bl	8008d88 <_Bfree>
 8008468:	2300      	movs	r3, #0
 800846a:	7033      	strb	r3, [r6, #0]
 800846c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800846e:	3701      	adds	r7, #1
 8008470:	601f      	str	r7, [r3, #0]
 8008472:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 831d 	beq.w	8008ab4 <_dtoa_r+0xb34>
 800847a:	601e      	str	r6, [r3, #0]
 800847c:	e31a      	b.n	8008ab4 <_dtoa_r+0xb34>
 800847e:	07e2      	lsls	r2, r4, #31
 8008480:	d505      	bpl.n	800848e <_dtoa_r+0x50e>
 8008482:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008486:	f7f8 f8b7 	bl	80005f8 <__aeabi_dmul>
 800848a:	3601      	adds	r6, #1
 800848c:	2301      	movs	r3, #1
 800848e:	1064      	asrs	r4, r4, #1
 8008490:	3508      	adds	r5, #8
 8008492:	e73f      	b.n	8008314 <_dtoa_r+0x394>
 8008494:	2602      	movs	r6, #2
 8008496:	e742      	b.n	800831e <_dtoa_r+0x39e>
 8008498:	9c07      	ldr	r4, [sp, #28]
 800849a:	9704      	str	r7, [sp, #16]
 800849c:	e761      	b.n	8008362 <_dtoa_r+0x3e2>
 800849e:	4b27      	ldr	r3, [pc, #156]	@ (800853c <_dtoa_r+0x5bc>)
 80084a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084aa:	4454      	add	r4, sl
 80084ac:	2900      	cmp	r1, #0
 80084ae:	d053      	beq.n	8008558 <_dtoa_r+0x5d8>
 80084b0:	4928      	ldr	r1, [pc, #160]	@ (8008554 <_dtoa_r+0x5d4>)
 80084b2:	2000      	movs	r0, #0
 80084b4:	f7f8 f9ca 	bl	800084c <__aeabi_ddiv>
 80084b8:	4633      	mov	r3, r6
 80084ba:	462a      	mov	r2, r5
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084c4:	4656      	mov	r6, sl
 80084c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ca:	f7f8 fb45 	bl	8000b58 <__aeabi_d2iz>
 80084ce:	4605      	mov	r5, r0
 80084d0:	f7f8 f828 	bl	8000524 <__aeabi_i2d>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084dc:	f7f7 fed4 	bl	8000288 <__aeabi_dsub>
 80084e0:	3530      	adds	r5, #48	@ 0x30
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084ea:	f806 5b01 	strb.w	r5, [r6], #1
 80084ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084f2:	f7f8 faf3 	bl	8000adc <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d171      	bne.n	80085de <_dtoa_r+0x65e>
 80084fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084fe:	4911      	ldr	r1, [pc, #68]	@ (8008544 <_dtoa_r+0x5c4>)
 8008500:	2000      	movs	r0, #0
 8008502:	f7f7 fec1 	bl	8000288 <__aeabi_dsub>
 8008506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800850a:	f7f8 fae7 	bl	8000adc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8095 	bne.w	800863e <_dtoa_r+0x6be>
 8008514:	42a6      	cmp	r6, r4
 8008516:	f43f af50 	beq.w	80083ba <_dtoa_r+0x43a>
 800851a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800851e:	4b0a      	ldr	r3, [pc, #40]	@ (8008548 <_dtoa_r+0x5c8>)
 8008520:	2200      	movs	r2, #0
 8008522:	f7f8 f869 	bl	80005f8 <__aeabi_dmul>
 8008526:	4b08      	ldr	r3, [pc, #32]	@ (8008548 <_dtoa_r+0x5c8>)
 8008528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800852c:	2200      	movs	r2, #0
 800852e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008532:	f7f8 f861 	bl	80005f8 <__aeabi_dmul>
 8008536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800853a:	e7c4      	b.n	80084c6 <_dtoa_r+0x546>
 800853c:	08009dc0 	.word	0x08009dc0
 8008540:	08009d98 	.word	0x08009d98
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	40240000 	.word	0x40240000
 800854c:	401c0000 	.word	0x401c0000
 8008550:	40140000 	.word	0x40140000
 8008554:	3fe00000 	.word	0x3fe00000
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	f7f8 f84c 	bl	80005f8 <__aeabi_dmul>
 8008560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008564:	9415      	str	r4, [sp, #84]	@ 0x54
 8008566:	4656      	mov	r6, sl
 8008568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856c:	f7f8 faf4 	bl	8000b58 <__aeabi_d2iz>
 8008570:	4605      	mov	r5, r0
 8008572:	f7f7 ffd7 	bl	8000524 <__aeabi_i2d>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800857e:	f7f7 fe83 	bl	8000288 <__aeabi_dsub>
 8008582:	3530      	adds	r5, #48	@ 0x30
 8008584:	f806 5b01 	strb.w	r5, [r6], #1
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	42a6      	cmp	r6, r4
 800858e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008592:	f04f 0200 	mov.w	r2, #0
 8008596:	d124      	bne.n	80085e2 <_dtoa_r+0x662>
 8008598:	4bac      	ldr	r3, [pc, #688]	@ (800884c <_dtoa_r+0x8cc>)
 800859a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800859e:	f7f7 fe75 	bl	800028c <__adddf3>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085aa:	f7f8 fab5 	bl	8000b18 <__aeabi_dcmpgt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d145      	bne.n	800863e <_dtoa_r+0x6be>
 80085b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085b6:	49a5      	ldr	r1, [pc, #660]	@ (800884c <_dtoa_r+0x8cc>)
 80085b8:	2000      	movs	r0, #0
 80085ba:	f7f7 fe65 	bl	8000288 <__aeabi_dsub>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c6:	f7f8 fa89 	bl	8000adc <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f43f aef5 	beq.w	80083ba <_dtoa_r+0x43a>
 80085d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80085d2:	1e73      	subs	r3, r6, #1
 80085d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80085d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085da:	2b30      	cmp	r3, #48	@ 0x30
 80085dc:	d0f8      	beq.n	80085d0 <_dtoa_r+0x650>
 80085de:	9f04      	ldr	r7, [sp, #16]
 80085e0:	e73e      	b.n	8008460 <_dtoa_r+0x4e0>
 80085e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008850 <_dtoa_r+0x8d0>)
 80085e4:	f7f8 f808 	bl	80005f8 <__aeabi_dmul>
 80085e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ec:	e7bc      	b.n	8008568 <_dtoa_r+0x5e8>
 80085ee:	d10c      	bne.n	800860a <_dtoa_r+0x68a>
 80085f0:	4b98      	ldr	r3, [pc, #608]	@ (8008854 <_dtoa_r+0x8d4>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f8:	f7f7 fffe 	bl	80005f8 <__aeabi_dmul>
 80085fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008600:	f7f8 fa80 	bl	8000b04 <__aeabi_dcmpge>
 8008604:	2800      	cmp	r0, #0
 8008606:	f000 8157 	beq.w	80088b8 <_dtoa_r+0x938>
 800860a:	2400      	movs	r4, #0
 800860c:	4625      	mov	r5, r4
 800860e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008610:	43db      	mvns	r3, r3
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	4656      	mov	r6, sl
 8008616:	2700      	movs	r7, #0
 8008618:	4621      	mov	r1, r4
 800861a:	4658      	mov	r0, fp
 800861c:	f000 fbb4 	bl	8008d88 <_Bfree>
 8008620:	2d00      	cmp	r5, #0
 8008622:	d0dc      	beq.n	80085de <_dtoa_r+0x65e>
 8008624:	b12f      	cbz	r7, 8008632 <_dtoa_r+0x6b2>
 8008626:	42af      	cmp	r7, r5
 8008628:	d003      	beq.n	8008632 <_dtoa_r+0x6b2>
 800862a:	4639      	mov	r1, r7
 800862c:	4658      	mov	r0, fp
 800862e:	f000 fbab 	bl	8008d88 <_Bfree>
 8008632:	4629      	mov	r1, r5
 8008634:	4658      	mov	r0, fp
 8008636:	f000 fba7 	bl	8008d88 <_Bfree>
 800863a:	e7d0      	b.n	80085de <_dtoa_r+0x65e>
 800863c:	9704      	str	r7, [sp, #16]
 800863e:	4633      	mov	r3, r6
 8008640:	461e      	mov	r6, r3
 8008642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008646:	2a39      	cmp	r2, #57	@ 0x39
 8008648:	d107      	bne.n	800865a <_dtoa_r+0x6da>
 800864a:	459a      	cmp	sl, r3
 800864c:	d1f8      	bne.n	8008640 <_dtoa_r+0x6c0>
 800864e:	9a04      	ldr	r2, [sp, #16]
 8008650:	3201      	adds	r2, #1
 8008652:	9204      	str	r2, [sp, #16]
 8008654:	2230      	movs	r2, #48	@ 0x30
 8008656:	f88a 2000 	strb.w	r2, [sl]
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	3201      	adds	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e7bd      	b.n	80085de <_dtoa_r+0x65e>
 8008662:	4b7b      	ldr	r3, [pc, #492]	@ (8008850 <_dtoa_r+0x8d0>)
 8008664:	2200      	movs	r2, #0
 8008666:	f7f7 ffc7 	bl	80005f8 <__aeabi_dmul>
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	460d      	mov	r5, r1
 8008672:	f7f8 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aebb 	beq.w	80083f2 <_dtoa_r+0x472>
 800867c:	e6f0      	b.n	8008460 <_dtoa_r+0x4e0>
 800867e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008680:	2a00      	cmp	r2, #0
 8008682:	f000 80db 	beq.w	800883c <_dtoa_r+0x8bc>
 8008686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008688:	2a01      	cmp	r2, #1
 800868a:	f300 80bf 	bgt.w	800880c <_dtoa_r+0x88c>
 800868e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008690:	2a00      	cmp	r2, #0
 8008692:	f000 80b7 	beq.w	8008804 <_dtoa_r+0x884>
 8008696:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800869a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800869c:	4646      	mov	r6, r8
 800869e:	9a08      	ldr	r2, [sp, #32]
 80086a0:	2101      	movs	r1, #1
 80086a2:	441a      	add	r2, r3
 80086a4:	4658      	mov	r0, fp
 80086a6:	4498      	add	r8, r3
 80086a8:	9208      	str	r2, [sp, #32]
 80086aa:	f000 fc21 	bl	8008ef0 <__i2b>
 80086ae:	4605      	mov	r5, r0
 80086b0:	b15e      	cbz	r6, 80086ca <_dtoa_r+0x74a>
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd08      	ble.n	80086ca <_dtoa_r+0x74a>
 80086b8:	42b3      	cmp	r3, r6
 80086ba:	9a08      	ldr	r2, [sp, #32]
 80086bc:	bfa8      	it	ge
 80086be:	4633      	movge	r3, r6
 80086c0:	eba8 0803 	sub.w	r8, r8, r3
 80086c4:	1af6      	subs	r6, r6, r3
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	9308      	str	r3, [sp, #32]
 80086ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086cc:	b1f3      	cbz	r3, 800870c <_dtoa_r+0x78c>
 80086ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 80b7 	beq.w	8008844 <_dtoa_r+0x8c4>
 80086d6:	b18c      	cbz	r4, 80086fc <_dtoa_r+0x77c>
 80086d8:	4629      	mov	r1, r5
 80086da:	4622      	mov	r2, r4
 80086dc:	4658      	mov	r0, fp
 80086de:	f000 fcc7 	bl	8009070 <__pow5mult>
 80086e2:	464a      	mov	r2, r9
 80086e4:	4601      	mov	r1, r0
 80086e6:	4605      	mov	r5, r0
 80086e8:	4658      	mov	r0, fp
 80086ea:	f000 fc17 	bl	8008f1c <__multiply>
 80086ee:	4649      	mov	r1, r9
 80086f0:	9004      	str	r0, [sp, #16]
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 fb48 	bl	8008d88 <_Bfree>
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	4699      	mov	r9, r3
 80086fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fe:	1b1a      	subs	r2, r3, r4
 8008700:	d004      	beq.n	800870c <_dtoa_r+0x78c>
 8008702:	4649      	mov	r1, r9
 8008704:	4658      	mov	r0, fp
 8008706:	f000 fcb3 	bl	8009070 <__pow5mult>
 800870a:	4681      	mov	r9, r0
 800870c:	2101      	movs	r1, #1
 800870e:	4658      	mov	r0, fp
 8008710:	f000 fbee 	bl	8008ef0 <__i2b>
 8008714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008716:	4604      	mov	r4, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 81cf 	beq.w	8008abc <_dtoa_r+0xb3c>
 800871e:	461a      	mov	r2, r3
 8008720:	4601      	mov	r1, r0
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fca4 	bl	8009070 <__pow5mult>
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	2b01      	cmp	r3, #1
 800872c:	4604      	mov	r4, r0
 800872e:	f300 8095 	bgt.w	800885c <_dtoa_r+0x8dc>
 8008732:	9b02      	ldr	r3, [sp, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f040 8087 	bne.w	8008848 <_dtoa_r+0x8c8>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8089 	bne.w	8008858 <_dtoa_r+0x8d8>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800874c:	0d1b      	lsrs	r3, r3, #20
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	b12b      	cbz	r3, 800875e <_dtoa_r+0x7de>
 8008752:	9b08      	ldr	r3, [sp, #32]
 8008754:	3301      	adds	r3, #1
 8008756:	9308      	str	r3, [sp, #32]
 8008758:	f108 0801 	add.w	r8, r8, #1
 800875c:	2301      	movs	r3, #1
 800875e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 81b0 	beq.w	8008ac8 <_dtoa_r+0xb48>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800876e:	6918      	ldr	r0, [r3, #16]
 8008770:	f000 fb72 	bl	8008e58 <__hi0bits>
 8008774:	f1c0 0020 	rsb	r0, r0, #32
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	4418      	add	r0, r3
 800877c:	f010 001f 	ands.w	r0, r0, #31
 8008780:	d077      	beq.n	8008872 <_dtoa_r+0x8f2>
 8008782:	f1c0 0320 	rsb	r3, r0, #32
 8008786:	2b04      	cmp	r3, #4
 8008788:	dd6b      	ble.n	8008862 <_dtoa_r+0x8e2>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	f1c0 001c 	rsb	r0, r0, #28
 8008790:	4403      	add	r3, r0
 8008792:	4480      	add	r8, r0
 8008794:	4406      	add	r6, r0
 8008796:	9308      	str	r3, [sp, #32]
 8008798:	f1b8 0f00 	cmp.w	r8, #0
 800879c:	dd05      	ble.n	80087aa <_dtoa_r+0x82a>
 800879e:	4649      	mov	r1, r9
 80087a0:	4642      	mov	r2, r8
 80087a2:	4658      	mov	r0, fp
 80087a4:	f000 fcbe 	bl	8009124 <__lshift>
 80087a8:	4681      	mov	r9, r0
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd05      	ble.n	80087bc <_dtoa_r+0x83c>
 80087b0:	4621      	mov	r1, r4
 80087b2:	461a      	mov	r2, r3
 80087b4:	4658      	mov	r0, fp
 80087b6:	f000 fcb5 	bl	8009124 <__lshift>
 80087ba:	4604      	mov	r4, r0
 80087bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d059      	beq.n	8008876 <_dtoa_r+0x8f6>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4648      	mov	r0, r9
 80087c6:	f000 fd19 	bl	80091fc <__mcmp>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	da53      	bge.n	8008876 <_dtoa_r+0x8f6>
 80087ce:	1e7b      	subs	r3, r7, #1
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	4649      	mov	r1, r9
 80087d4:	2300      	movs	r3, #0
 80087d6:	220a      	movs	r2, #10
 80087d8:	4658      	mov	r0, fp
 80087da:	f000 faf7 	bl	8008dcc <__multadd>
 80087de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087e0:	4681      	mov	r9, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 8172 	beq.w	8008acc <_dtoa_r+0xb4c>
 80087e8:	2300      	movs	r3, #0
 80087ea:	4629      	mov	r1, r5
 80087ec:	220a      	movs	r2, #10
 80087ee:	4658      	mov	r0, fp
 80087f0:	f000 faec 	bl	8008dcc <__multadd>
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	4605      	mov	r5, r0
 80087fa:	dc67      	bgt.n	80088cc <_dtoa_r+0x94c>
 80087fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fe:	2b02      	cmp	r3, #2
 8008800:	dc41      	bgt.n	8008886 <_dtoa_r+0x906>
 8008802:	e063      	b.n	80088cc <_dtoa_r+0x94c>
 8008804:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800880a:	e746      	b.n	800869a <_dtoa_r+0x71a>
 800880c:	9b07      	ldr	r3, [sp, #28]
 800880e:	1e5c      	subs	r4, r3, #1
 8008810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008812:	42a3      	cmp	r3, r4
 8008814:	bfbf      	itttt	lt
 8008816:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008818:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800881a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800881c:	1ae3      	sublt	r3, r4, r3
 800881e:	bfb4      	ite	lt
 8008820:	18d2      	addlt	r2, r2, r3
 8008822:	1b1c      	subge	r4, r3, r4
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	bfbc      	itt	lt
 8008828:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800882a:	2400      	movlt	r4, #0
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfb5      	itete	lt
 8008830:	eba8 0603 	sublt.w	r6, r8, r3
 8008834:	9b07      	ldrge	r3, [sp, #28]
 8008836:	2300      	movlt	r3, #0
 8008838:	4646      	movge	r6, r8
 800883a:	e730      	b.n	800869e <_dtoa_r+0x71e>
 800883c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800883e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008840:	4646      	mov	r6, r8
 8008842:	e735      	b.n	80086b0 <_dtoa_r+0x730>
 8008844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008846:	e75c      	b.n	8008702 <_dtoa_r+0x782>
 8008848:	2300      	movs	r3, #0
 800884a:	e788      	b.n	800875e <_dtoa_r+0x7de>
 800884c:	3fe00000 	.word	0x3fe00000
 8008850:	40240000 	.word	0x40240000
 8008854:	40140000 	.word	0x40140000
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	e780      	b.n	800875e <_dtoa_r+0x7de>
 800885c:	2300      	movs	r3, #0
 800885e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008860:	e782      	b.n	8008768 <_dtoa_r+0x7e8>
 8008862:	d099      	beq.n	8008798 <_dtoa_r+0x818>
 8008864:	9a08      	ldr	r2, [sp, #32]
 8008866:	331c      	adds	r3, #28
 8008868:	441a      	add	r2, r3
 800886a:	4498      	add	r8, r3
 800886c:	441e      	add	r6, r3
 800886e:	9208      	str	r2, [sp, #32]
 8008870:	e792      	b.n	8008798 <_dtoa_r+0x818>
 8008872:	4603      	mov	r3, r0
 8008874:	e7f6      	b.n	8008864 <_dtoa_r+0x8e4>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	9704      	str	r7, [sp, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dc20      	bgt.n	80088c0 <_dtoa_r+0x940>
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008882:	2b02      	cmp	r3, #2
 8008884:	dd1e      	ble.n	80088c4 <_dtoa_r+0x944>
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f47f aec0 	bne.w	800860e <_dtoa_r+0x68e>
 800888e:	4621      	mov	r1, r4
 8008890:	2205      	movs	r2, #5
 8008892:	4658      	mov	r0, fp
 8008894:	f000 fa9a 	bl	8008dcc <__multadd>
 8008898:	4601      	mov	r1, r0
 800889a:	4604      	mov	r4, r0
 800889c:	4648      	mov	r0, r9
 800889e:	f000 fcad 	bl	80091fc <__mcmp>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f77f aeb3 	ble.w	800860e <_dtoa_r+0x68e>
 80088a8:	4656      	mov	r6, sl
 80088aa:	2331      	movs	r3, #49	@ 0x31
 80088ac:	f806 3b01 	strb.w	r3, [r6], #1
 80088b0:	9b04      	ldr	r3, [sp, #16]
 80088b2:	3301      	adds	r3, #1
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	e6ae      	b.n	8008616 <_dtoa_r+0x696>
 80088b8:	9c07      	ldr	r4, [sp, #28]
 80088ba:	9704      	str	r7, [sp, #16]
 80088bc:	4625      	mov	r5, r4
 80088be:	e7f3      	b.n	80088a8 <_dtoa_r+0x928>
 80088c0:	9b07      	ldr	r3, [sp, #28]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8104 	beq.w	8008ad4 <_dtoa_r+0xb54>
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	dd05      	ble.n	80088dc <_dtoa_r+0x95c>
 80088d0:	4629      	mov	r1, r5
 80088d2:	4632      	mov	r2, r6
 80088d4:	4658      	mov	r0, fp
 80088d6:	f000 fc25 	bl	8009124 <__lshift>
 80088da:	4605      	mov	r5, r0
 80088dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d05a      	beq.n	8008998 <_dtoa_r+0xa18>
 80088e2:	6869      	ldr	r1, [r5, #4]
 80088e4:	4658      	mov	r0, fp
 80088e6:	f000 fa0f 	bl	8008d08 <_Balloc>
 80088ea:	4606      	mov	r6, r0
 80088ec:	b928      	cbnz	r0, 80088fa <_dtoa_r+0x97a>
 80088ee:	4b84      	ldr	r3, [pc, #528]	@ (8008b00 <_dtoa_r+0xb80>)
 80088f0:	4602      	mov	r2, r0
 80088f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088f6:	f7ff bb5a 	b.w	8007fae <_dtoa_r+0x2e>
 80088fa:	692a      	ldr	r2, [r5, #16]
 80088fc:	3202      	adds	r2, #2
 80088fe:	0092      	lsls	r2, r2, #2
 8008900:	f105 010c 	add.w	r1, r5, #12
 8008904:	300c      	adds	r0, #12
 8008906:	f7ff faa4 	bl	8007e52 <memcpy>
 800890a:	2201      	movs	r2, #1
 800890c:	4631      	mov	r1, r6
 800890e:	4658      	mov	r0, fp
 8008910:	f000 fc08 	bl	8009124 <__lshift>
 8008914:	f10a 0301 	add.w	r3, sl, #1
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	9b00      	ldr	r3, [sp, #0]
 800891c:	4453      	add	r3, sl
 800891e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	462f      	mov	r7, r5
 8008928:	930a      	str	r3, [sp, #40]	@ 0x28
 800892a:	4605      	mov	r5, r0
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	4621      	mov	r1, r4
 8008930:	3b01      	subs	r3, #1
 8008932:	4648      	mov	r0, r9
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	f7ff fa9a 	bl	8007e6e <quorem>
 800893a:	4639      	mov	r1, r7
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fc5a 	bl	80091fc <__mcmp>
 8008948:	462a      	mov	r2, r5
 800894a:	9008      	str	r0, [sp, #32]
 800894c:	4621      	mov	r1, r4
 800894e:	4658      	mov	r0, fp
 8008950:	f000 fc70 	bl	8009234 <__mdiff>
 8008954:	68c2      	ldr	r2, [r0, #12]
 8008956:	4606      	mov	r6, r0
 8008958:	bb02      	cbnz	r2, 800899c <_dtoa_r+0xa1c>
 800895a:	4601      	mov	r1, r0
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fc4d 	bl	80091fc <__mcmp>
 8008962:	4602      	mov	r2, r0
 8008964:	4631      	mov	r1, r6
 8008966:	4658      	mov	r0, fp
 8008968:	920e      	str	r2, [sp, #56]	@ 0x38
 800896a:	f000 fa0d 	bl	8008d88 <_Bfree>
 800896e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008972:	9e07      	ldr	r6, [sp, #28]
 8008974:	ea43 0102 	orr.w	r1, r3, r2
 8008978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897a:	4319      	orrs	r1, r3
 800897c:	d110      	bne.n	80089a0 <_dtoa_r+0xa20>
 800897e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008982:	d029      	beq.n	80089d8 <_dtoa_r+0xa58>
 8008984:	9b08      	ldr	r3, [sp, #32]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dd02      	ble.n	8008990 <_dtoa_r+0xa10>
 800898a:	9b02      	ldr	r3, [sp, #8]
 800898c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008990:	9b00      	ldr	r3, [sp, #0]
 8008992:	f883 8000 	strb.w	r8, [r3]
 8008996:	e63f      	b.n	8008618 <_dtoa_r+0x698>
 8008998:	4628      	mov	r0, r5
 800899a:	e7bb      	b.n	8008914 <_dtoa_r+0x994>
 800899c:	2201      	movs	r2, #1
 800899e:	e7e1      	b.n	8008964 <_dtoa_r+0x9e4>
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	db04      	blt.n	80089b0 <_dtoa_r+0xa30>
 80089a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089a8:	430b      	orrs	r3, r1
 80089aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089ac:	430b      	orrs	r3, r1
 80089ae:	d120      	bne.n	80089f2 <_dtoa_r+0xa72>
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	dded      	ble.n	8008990 <_dtoa_r+0xa10>
 80089b4:	4649      	mov	r1, r9
 80089b6:	2201      	movs	r2, #1
 80089b8:	4658      	mov	r0, fp
 80089ba:	f000 fbb3 	bl	8009124 <__lshift>
 80089be:	4621      	mov	r1, r4
 80089c0:	4681      	mov	r9, r0
 80089c2:	f000 fc1b 	bl	80091fc <__mcmp>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	dc03      	bgt.n	80089d2 <_dtoa_r+0xa52>
 80089ca:	d1e1      	bne.n	8008990 <_dtoa_r+0xa10>
 80089cc:	f018 0f01 	tst.w	r8, #1
 80089d0:	d0de      	beq.n	8008990 <_dtoa_r+0xa10>
 80089d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089d6:	d1d8      	bne.n	800898a <_dtoa_r+0xa0a>
 80089d8:	9a00      	ldr	r2, [sp, #0]
 80089da:	2339      	movs	r3, #57	@ 0x39
 80089dc:	7013      	strb	r3, [r2, #0]
 80089de:	4633      	mov	r3, r6
 80089e0:	461e      	mov	r6, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089e8:	2a39      	cmp	r2, #57	@ 0x39
 80089ea:	d052      	beq.n	8008a92 <_dtoa_r+0xb12>
 80089ec:	3201      	adds	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
 80089f0:	e612      	b.n	8008618 <_dtoa_r+0x698>
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	dd07      	ble.n	8008a06 <_dtoa_r+0xa86>
 80089f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089fa:	d0ed      	beq.n	80089d8 <_dtoa_r+0xa58>
 80089fc:	9a00      	ldr	r2, [sp, #0]
 80089fe:	f108 0301 	add.w	r3, r8, #1
 8008a02:	7013      	strb	r3, [r2, #0]
 8008a04:	e608      	b.n	8008618 <_dtoa_r+0x698>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	9a07      	ldr	r2, [sp, #28]
 8008a0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d028      	beq.n	8008a66 <_dtoa_r+0xae6>
 8008a14:	4649      	mov	r1, r9
 8008a16:	2300      	movs	r3, #0
 8008a18:	220a      	movs	r2, #10
 8008a1a:	4658      	mov	r0, fp
 8008a1c:	f000 f9d6 	bl	8008dcc <__multadd>
 8008a20:	42af      	cmp	r7, r5
 8008a22:	4681      	mov	r9, r0
 8008a24:	f04f 0300 	mov.w	r3, #0
 8008a28:	f04f 020a 	mov.w	r2, #10
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4658      	mov	r0, fp
 8008a30:	d107      	bne.n	8008a42 <_dtoa_r+0xac2>
 8008a32:	f000 f9cb 	bl	8008dcc <__multadd>
 8008a36:	4607      	mov	r7, r0
 8008a38:	4605      	mov	r5, r0
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	e774      	b.n	800892c <_dtoa_r+0x9ac>
 8008a42:	f000 f9c3 	bl	8008dcc <__multadd>
 8008a46:	4629      	mov	r1, r5
 8008a48:	4607      	mov	r7, r0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f000 f9bc 	bl	8008dcc <__multadd>
 8008a54:	4605      	mov	r5, r0
 8008a56:	e7f0      	b.n	8008a3a <_dtoa_r+0xaba>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfcc      	ite	gt
 8008a5e:	461e      	movgt	r6, r3
 8008a60:	2601      	movle	r6, #1
 8008a62:	4456      	add	r6, sl
 8008a64:	2700      	movs	r7, #0
 8008a66:	4649      	mov	r1, r9
 8008a68:	2201      	movs	r2, #1
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f000 fb5a 	bl	8009124 <__lshift>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4681      	mov	r9, r0
 8008a74:	f000 fbc2 	bl	80091fc <__mcmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	dcb0      	bgt.n	80089de <_dtoa_r+0xa5e>
 8008a7c:	d102      	bne.n	8008a84 <_dtoa_r+0xb04>
 8008a7e:	f018 0f01 	tst.w	r8, #1
 8008a82:	d1ac      	bne.n	80089de <_dtoa_r+0xa5e>
 8008a84:	4633      	mov	r3, r6
 8008a86:	461e      	mov	r6, r3
 8008a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a8c:	2a30      	cmp	r2, #48	@ 0x30
 8008a8e:	d0fa      	beq.n	8008a86 <_dtoa_r+0xb06>
 8008a90:	e5c2      	b.n	8008618 <_dtoa_r+0x698>
 8008a92:	459a      	cmp	sl, r3
 8008a94:	d1a4      	bne.n	80089e0 <_dtoa_r+0xa60>
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	2331      	movs	r3, #49	@ 0x31
 8008a9e:	f88a 3000 	strb.w	r3, [sl]
 8008aa2:	e5b9      	b.n	8008618 <_dtoa_r+0x698>
 8008aa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008aa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b04 <_dtoa_r+0xb84>
 8008aaa:	b11b      	cbz	r3, 8008ab4 <_dtoa_r+0xb34>
 8008aac:	f10a 0308 	add.w	r3, sl, #8
 8008ab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	b019      	add	sp, #100	@ 0x64
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	f77f ae37 	ble.w	8008732 <_dtoa_r+0x7b2>
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ac8:	2001      	movs	r0, #1
 8008aca:	e655      	b.n	8008778 <_dtoa_r+0x7f8>
 8008acc:	9b00      	ldr	r3, [sp, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f77f aed6 	ble.w	8008880 <_dtoa_r+0x900>
 8008ad4:	4656      	mov	r6, sl
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f7ff f9c8 	bl	8007e6e <quorem>
 8008ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ae2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ae6:	9b00      	ldr	r3, [sp, #0]
 8008ae8:	eba6 020a 	sub.w	r2, r6, sl
 8008aec:	4293      	cmp	r3, r2
 8008aee:	ddb3      	ble.n	8008a58 <_dtoa_r+0xad8>
 8008af0:	4649      	mov	r1, r9
 8008af2:	2300      	movs	r3, #0
 8008af4:	220a      	movs	r2, #10
 8008af6:	4658      	mov	r0, fp
 8008af8:	f000 f968 	bl	8008dcc <__multadd>
 8008afc:	4681      	mov	r9, r0
 8008afe:	e7ea      	b.n	8008ad6 <_dtoa_r+0xb56>
 8008b00:	08009d1c 	.word	0x08009d1c
 8008b04:	08009ca0 	.word	0x08009ca0

08008b08 <_free_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d041      	beq.n	8008b94 <_free_r+0x8c>
 8008b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b14:	1f0c      	subs	r4, r1, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfb8      	it	lt
 8008b1a:	18e4      	addlt	r4, r4, r3
 8008b1c:	f000 f8e8 	bl	8008cf0 <__malloc_lock>
 8008b20:	4a1d      	ldr	r2, [pc, #116]	@ (8008b98 <_free_r+0x90>)
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	b933      	cbnz	r3, 8008b34 <_free_r+0x2c>
 8008b26:	6063      	str	r3, [r4, #4]
 8008b28:	6014      	str	r4, [r2, #0]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b30:	f000 b8e4 	b.w	8008cfc <__malloc_unlock>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d908      	bls.n	8008b4a <_free_r+0x42>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	1821      	adds	r1, r4, r0
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	bf01      	itttt	eq
 8008b40:	6819      	ldreq	r1, [r3, #0]
 8008b42:	685b      	ldreq	r3, [r3, #4]
 8008b44:	1809      	addeq	r1, r1, r0
 8008b46:	6021      	streq	r1, [r4, #0]
 8008b48:	e7ed      	b.n	8008b26 <_free_r+0x1e>
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	b10b      	cbz	r3, 8008b54 <_free_r+0x4c>
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d9fa      	bls.n	8008b4a <_free_r+0x42>
 8008b54:	6811      	ldr	r1, [r2, #0]
 8008b56:	1850      	adds	r0, r2, r1
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d10b      	bne.n	8008b74 <_free_r+0x6c>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	4401      	add	r1, r0
 8008b60:	1850      	adds	r0, r2, r1
 8008b62:	4283      	cmp	r3, r0
 8008b64:	6011      	str	r1, [r2, #0]
 8008b66:	d1e0      	bne.n	8008b2a <_free_r+0x22>
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	6053      	str	r3, [r2, #4]
 8008b6e:	4408      	add	r0, r1
 8008b70:	6010      	str	r0, [r2, #0]
 8008b72:	e7da      	b.n	8008b2a <_free_r+0x22>
 8008b74:	d902      	bls.n	8008b7c <_free_r+0x74>
 8008b76:	230c      	movs	r3, #12
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	e7d6      	b.n	8008b2a <_free_r+0x22>
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	1821      	adds	r1, r4, r0
 8008b80:	428b      	cmp	r3, r1
 8008b82:	bf04      	itt	eq
 8008b84:	6819      	ldreq	r1, [r3, #0]
 8008b86:	685b      	ldreq	r3, [r3, #4]
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	bf04      	itt	eq
 8008b8c:	1809      	addeq	r1, r1, r0
 8008b8e:	6021      	streq	r1, [r4, #0]
 8008b90:	6054      	str	r4, [r2, #4]
 8008b92:	e7ca      	b.n	8008b2a <_free_r+0x22>
 8008b94:	bd38      	pop	{r3, r4, r5, pc}
 8008b96:	bf00      	nop
 8008b98:	20001334 	.word	0x20001334

08008b9c <malloc>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <malloc+0xc>)
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	f000 b825 	b.w	8008bf0 <_malloc_r>
 8008ba6:	bf00      	nop
 8008ba8:	20000020 	.word	0x20000020

08008bac <sbrk_aligned>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4e0f      	ldr	r6, [pc, #60]	@ (8008bec <sbrk_aligned+0x40>)
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	6831      	ldr	r1, [r6, #0]
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	b911      	cbnz	r1, 8008bbe <sbrk_aligned+0x12>
 8008bb8:	f000 fe9a 	bl	80098f0 <_sbrk_r>
 8008bbc:	6030      	str	r0, [r6, #0]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fe95 	bl	80098f0 <_sbrk_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d103      	bne.n	8008bd2 <sbrk_aligned+0x26>
 8008bca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008bce:	4620      	mov	r0, r4
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
 8008bd2:	1cc4      	adds	r4, r0, #3
 8008bd4:	f024 0403 	bic.w	r4, r4, #3
 8008bd8:	42a0      	cmp	r0, r4
 8008bda:	d0f8      	beq.n	8008bce <sbrk_aligned+0x22>
 8008bdc:	1a21      	subs	r1, r4, r0
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fe86 	bl	80098f0 <_sbrk_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d1f2      	bne.n	8008bce <sbrk_aligned+0x22>
 8008be8:	e7ef      	b.n	8008bca <sbrk_aligned+0x1e>
 8008bea:	bf00      	nop
 8008bec:	20001330 	.word	0x20001330

08008bf0 <_malloc_r>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	1ccd      	adds	r5, r1, #3
 8008bf6:	f025 0503 	bic.w	r5, r5, #3
 8008bfa:	3508      	adds	r5, #8
 8008bfc:	2d0c      	cmp	r5, #12
 8008bfe:	bf38      	it	cc
 8008c00:	250c      	movcc	r5, #12
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	4606      	mov	r6, r0
 8008c06:	db01      	blt.n	8008c0c <_malloc_r+0x1c>
 8008c08:	42a9      	cmp	r1, r5
 8008c0a:	d904      	bls.n	8008c16 <_malloc_r+0x26>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	2000      	movs	r0, #0
 8008c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cec <_malloc_r+0xfc>
 8008c1a:	f000 f869 	bl	8008cf0 <__malloc_lock>
 8008c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c22:	461c      	mov	r4, r3
 8008c24:	bb44      	cbnz	r4, 8008c78 <_malloc_r+0x88>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff ffbf 	bl	8008bac <sbrk_aligned>
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	4604      	mov	r4, r0
 8008c32:	d158      	bne.n	8008ce6 <_malloc_r+0xf6>
 8008c34:	f8d8 4000 	ldr.w	r4, [r8]
 8008c38:	4627      	mov	r7, r4
 8008c3a:	2f00      	cmp	r7, #0
 8008c3c:	d143      	bne.n	8008cc6 <_malloc_r+0xd6>
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d04b      	beq.n	8008cda <_malloc_r+0xea>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	4639      	mov	r1, r7
 8008c46:	4630      	mov	r0, r6
 8008c48:	eb04 0903 	add.w	r9, r4, r3
 8008c4c:	f000 fe50 	bl	80098f0 <_sbrk_r>
 8008c50:	4581      	cmp	r9, r0
 8008c52:	d142      	bne.n	8008cda <_malloc_r+0xea>
 8008c54:	6821      	ldr	r1, [r4, #0]
 8008c56:	1a6d      	subs	r5, r5, r1
 8008c58:	4629      	mov	r1, r5
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff ffa6 	bl	8008bac <sbrk_aligned>
 8008c60:	3001      	adds	r0, #1
 8008c62:	d03a      	beq.n	8008cda <_malloc_r+0xea>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	442b      	add	r3, r5
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	bb62      	cbnz	r2, 8008ccc <_malloc_r+0xdc>
 8008c72:	f8c8 7000 	str.w	r7, [r8]
 8008c76:	e00f      	b.n	8008c98 <_malloc_r+0xa8>
 8008c78:	6822      	ldr	r2, [r4, #0]
 8008c7a:	1b52      	subs	r2, r2, r5
 8008c7c:	d420      	bmi.n	8008cc0 <_malloc_r+0xd0>
 8008c7e:	2a0b      	cmp	r2, #11
 8008c80:	d917      	bls.n	8008cb2 <_malloc_r+0xc2>
 8008c82:	1961      	adds	r1, r4, r5
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	6025      	str	r5, [r4, #0]
 8008c88:	bf18      	it	ne
 8008c8a:	6059      	strne	r1, [r3, #4]
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	bf08      	it	eq
 8008c90:	f8c8 1000 	streq.w	r1, [r8]
 8008c94:	5162      	str	r2, [r4, r5]
 8008c96:	604b      	str	r3, [r1, #4]
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f82f 	bl	8008cfc <__malloc_unlock>
 8008c9e:	f104 000b 	add.w	r0, r4, #11
 8008ca2:	1d23      	adds	r3, r4, #4
 8008ca4:	f020 0007 	bic.w	r0, r0, #7
 8008ca8:	1ac2      	subs	r2, r0, r3
 8008caa:	bf1c      	itt	ne
 8008cac:	1a1b      	subne	r3, r3, r0
 8008cae:	50a3      	strne	r3, [r4, r2]
 8008cb0:	e7af      	b.n	8008c12 <_malloc_r+0x22>
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	bf0c      	ite	eq
 8008cb8:	f8c8 2000 	streq.w	r2, [r8]
 8008cbc:	605a      	strne	r2, [r3, #4]
 8008cbe:	e7eb      	b.n	8008c98 <_malloc_r+0xa8>
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	6864      	ldr	r4, [r4, #4]
 8008cc4:	e7ae      	b.n	8008c24 <_malloc_r+0x34>
 8008cc6:	463c      	mov	r4, r7
 8008cc8:	687f      	ldr	r7, [r7, #4]
 8008cca:	e7b6      	b.n	8008c3a <_malloc_r+0x4a>
 8008ccc:	461a      	mov	r2, r3
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d1fb      	bne.n	8008ccc <_malloc_r+0xdc>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6053      	str	r3, [r2, #4]
 8008cd8:	e7de      	b.n	8008c98 <_malloc_r+0xa8>
 8008cda:	230c      	movs	r3, #12
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f000 f80c 	bl	8008cfc <__malloc_unlock>
 8008ce4:	e794      	b.n	8008c10 <_malloc_r+0x20>
 8008ce6:	6005      	str	r5, [r0, #0]
 8008ce8:	e7d6      	b.n	8008c98 <_malloc_r+0xa8>
 8008cea:	bf00      	nop
 8008cec:	20001334 	.word	0x20001334

08008cf0 <__malloc_lock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	@ (8008cf8 <__malloc_lock+0x8>)
 8008cf2:	f7ff b8ac 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	2000132c 	.word	0x2000132c

08008cfc <__malloc_unlock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	@ (8008d04 <__malloc_unlock+0x8>)
 8008cfe:	f7ff b8a7 	b.w	8007e50 <__retarget_lock_release_recursive>
 8008d02:	bf00      	nop
 8008d04:	2000132c 	.word	0x2000132c

08008d08 <_Balloc>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	69c6      	ldr	r6, [r0, #28]
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	b976      	cbnz	r6, 8008d30 <_Balloc+0x28>
 8008d12:	2010      	movs	r0, #16
 8008d14:	f7ff ff42 	bl	8008b9c <malloc>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	61e0      	str	r0, [r4, #28]
 8008d1c:	b920      	cbnz	r0, 8008d28 <_Balloc+0x20>
 8008d1e:	4b18      	ldr	r3, [pc, #96]	@ (8008d80 <_Balloc+0x78>)
 8008d20:	4818      	ldr	r0, [pc, #96]	@ (8008d84 <_Balloc+0x7c>)
 8008d22:	216b      	movs	r1, #107	@ 0x6b
 8008d24:	f000 fdf4 	bl	8009910 <__assert_func>
 8008d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d2c:	6006      	str	r6, [r0, #0]
 8008d2e:	60c6      	str	r6, [r0, #12]
 8008d30:	69e6      	ldr	r6, [r4, #28]
 8008d32:	68f3      	ldr	r3, [r6, #12]
 8008d34:	b183      	cbz	r3, 8008d58 <_Balloc+0x50>
 8008d36:	69e3      	ldr	r3, [r4, #28]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d3e:	b9b8      	cbnz	r0, 8008d70 <_Balloc+0x68>
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f605 	lsl.w	r6, r1, r5
 8008d46:	1d72      	adds	r2, r6, #5
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fdfe 	bl	800994c <_calloc_r>
 8008d50:	b160      	cbz	r0, 8008d6c <_Balloc+0x64>
 8008d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d56:	e00e      	b.n	8008d76 <_Balloc+0x6e>
 8008d58:	2221      	movs	r2, #33	@ 0x21
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fdf5 	bl	800994c <_calloc_r>
 8008d62:	69e3      	ldr	r3, [r4, #28]
 8008d64:	60f0      	str	r0, [r6, #12]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e4      	bne.n	8008d36 <_Balloc+0x2e>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	6802      	ldr	r2, [r0, #0]
 8008d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d76:	2300      	movs	r3, #0
 8008d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d7c:	e7f7      	b.n	8008d6e <_Balloc+0x66>
 8008d7e:	bf00      	nop
 8008d80:	08009cad 	.word	0x08009cad
 8008d84:	08009d2d 	.word	0x08009d2d

08008d88 <_Bfree>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	69c6      	ldr	r6, [r0, #28]
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b976      	cbnz	r6, 8008db0 <_Bfree+0x28>
 8008d92:	2010      	movs	r0, #16
 8008d94:	f7ff ff02 	bl	8008b9c <malloc>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	61e8      	str	r0, [r5, #28]
 8008d9c:	b920      	cbnz	r0, 8008da8 <_Bfree+0x20>
 8008d9e:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <_Bfree+0x3c>)
 8008da0:	4809      	ldr	r0, [pc, #36]	@ (8008dc8 <_Bfree+0x40>)
 8008da2:	218f      	movs	r1, #143	@ 0x8f
 8008da4:	f000 fdb4 	bl	8009910 <__assert_func>
 8008da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dac:	6006      	str	r6, [r0, #0]
 8008dae:	60c6      	str	r6, [r0, #12]
 8008db0:	b13c      	cbz	r4, 8008dc2 <_Bfree+0x3a>
 8008db2:	69eb      	ldr	r3, [r5, #28]
 8008db4:	6862      	ldr	r2, [r4, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dbc:	6021      	str	r1, [r4, #0]
 8008dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	08009cad 	.word	0x08009cad
 8008dc8:	08009d2d 	.word	0x08009d2d

08008dcc <__multadd>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	461e      	mov	r6, r3
 8008dd8:	f101 0c14 	add.w	ip, r1, #20
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f8dc 3000 	ldr.w	r3, [ip]
 8008de2:	b299      	uxth	r1, r3
 8008de4:	fb02 6101 	mla	r1, r2, r1, r6
 8008de8:	0c1e      	lsrs	r6, r3, #16
 8008dea:	0c0b      	lsrs	r3, r1, #16
 8008dec:	fb02 3306 	mla	r3, r2, r6, r3
 8008df0:	b289      	uxth	r1, r1
 8008df2:	3001      	adds	r0, #1
 8008df4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008df8:	4285      	cmp	r5, r0
 8008dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e02:	dcec      	bgt.n	8008dde <__multadd+0x12>
 8008e04:	b30e      	cbz	r6, 8008e4a <__multadd+0x7e>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	42ab      	cmp	r3, r5
 8008e0a:	dc19      	bgt.n	8008e40 <__multadd+0x74>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4638      	mov	r0, r7
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff79 	bl	8008d08 <_Balloc>
 8008e16:	4680      	mov	r8, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__multadd+0x5a>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e50 <__multadd+0x84>)
 8008e1e:	480d      	ldr	r0, [pc, #52]	@ (8008e54 <__multadd+0x88>)
 8008e20:	21ba      	movs	r1, #186	@ 0xba
 8008e22:	f000 fd75 	bl	8009910 <__assert_func>
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	3202      	adds	r2, #2
 8008e2a:	f104 010c 	add.w	r1, r4, #12
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	300c      	adds	r0, #12
 8008e32:	f7ff f80e 	bl	8007e52 <memcpy>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff ffa5 	bl	8008d88 <_Bfree>
 8008e3e:	4644      	mov	r4, r8
 8008e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e44:	3501      	adds	r5, #1
 8008e46:	615e      	str	r6, [r3, #20]
 8008e48:	6125      	str	r5, [r4, #16]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e50:	08009d1c 	.word	0x08009d1c
 8008e54:	08009d2d 	.word	0x08009d2d

08008e58 <__hi0bits>:
 8008e58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	bf36      	itet	cc
 8008e60:	0403      	lslcc	r3, r0, #16
 8008e62:	2000      	movcs	r0, #0
 8008e64:	2010      	movcc	r0, #16
 8008e66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e6a:	bf3c      	itt	cc
 8008e6c:	021b      	lslcc	r3, r3, #8
 8008e6e:	3008      	addcc	r0, #8
 8008e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e74:	bf3c      	itt	cc
 8008e76:	011b      	lslcc	r3, r3, #4
 8008e78:	3004      	addcc	r0, #4
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7e:	bf3c      	itt	cc
 8008e80:	009b      	lslcc	r3, r3, #2
 8008e82:	3002      	addcc	r0, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	db05      	blt.n	8008e94 <__hi0bits+0x3c>
 8008e88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e8c:	f100 0001 	add.w	r0, r0, #1
 8008e90:	bf08      	it	eq
 8008e92:	2020      	moveq	r0, #32
 8008e94:	4770      	bx	lr

08008e96 <__lo0bits>:
 8008e96:	6803      	ldr	r3, [r0, #0]
 8008e98:	4602      	mov	r2, r0
 8008e9a:	f013 0007 	ands.w	r0, r3, #7
 8008e9e:	d00b      	beq.n	8008eb8 <__lo0bits+0x22>
 8008ea0:	07d9      	lsls	r1, r3, #31
 8008ea2:	d421      	bmi.n	8008ee8 <__lo0bits+0x52>
 8008ea4:	0798      	lsls	r0, r3, #30
 8008ea6:	bf49      	itett	mi
 8008ea8:	085b      	lsrmi	r3, r3, #1
 8008eaa:	089b      	lsrpl	r3, r3, #2
 8008eac:	2001      	movmi	r0, #1
 8008eae:	6013      	strmi	r3, [r2, #0]
 8008eb0:	bf5c      	itt	pl
 8008eb2:	6013      	strpl	r3, [r2, #0]
 8008eb4:	2002      	movpl	r0, #2
 8008eb6:	4770      	bx	lr
 8008eb8:	b299      	uxth	r1, r3
 8008eba:	b909      	cbnz	r1, 8008ec0 <__lo0bits+0x2a>
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	2010      	movs	r0, #16
 8008ec0:	b2d9      	uxtb	r1, r3
 8008ec2:	b909      	cbnz	r1, 8008ec8 <__lo0bits+0x32>
 8008ec4:	3008      	adds	r0, #8
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	0719      	lsls	r1, r3, #28
 8008eca:	bf04      	itt	eq
 8008ecc:	091b      	lsreq	r3, r3, #4
 8008ece:	3004      	addeq	r0, #4
 8008ed0:	0799      	lsls	r1, r3, #30
 8008ed2:	bf04      	itt	eq
 8008ed4:	089b      	lsreq	r3, r3, #2
 8008ed6:	3002      	addeq	r0, #2
 8008ed8:	07d9      	lsls	r1, r3, #31
 8008eda:	d403      	bmi.n	8008ee4 <__lo0bits+0x4e>
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	f100 0001 	add.w	r0, r0, #1
 8008ee2:	d003      	beq.n	8008eec <__lo0bits+0x56>
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	4770      	bx	lr
 8008ee8:	2000      	movs	r0, #0
 8008eea:	4770      	bx	lr
 8008eec:	2020      	movs	r0, #32
 8008eee:	4770      	bx	lr

08008ef0 <__i2b>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	f7ff ff07 	bl	8008d08 <_Balloc>
 8008efa:	4602      	mov	r2, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <__i2b+0x1a>
 8008efe:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <__i2b+0x24>)
 8008f00:	4805      	ldr	r0, [pc, #20]	@ (8008f18 <__i2b+0x28>)
 8008f02:	f240 1145 	movw	r1, #325	@ 0x145
 8008f06:	f000 fd03 	bl	8009910 <__assert_func>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	6144      	str	r4, [r0, #20]
 8008f0e:	6103      	str	r3, [r0, #16]
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	bf00      	nop
 8008f14:	08009d1c 	.word	0x08009d1c
 8008f18:	08009d2d 	.word	0x08009d2d

08008f1c <__multiply>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4614      	mov	r4, r2
 8008f22:	690a      	ldr	r2, [r1, #16]
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	bfa8      	it	ge
 8008f2a:	4623      	movge	r3, r4
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	bfa4      	itt	ge
 8008f30:	460c      	movge	r4, r1
 8008f32:	461f      	movge	r7, r3
 8008f34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f3c:	68a3      	ldr	r3, [r4, #8]
 8008f3e:	6861      	ldr	r1, [r4, #4]
 8008f40:	eb0a 0609 	add.w	r6, sl, r9
 8008f44:	42b3      	cmp	r3, r6
 8008f46:	b085      	sub	sp, #20
 8008f48:	bfb8      	it	lt
 8008f4a:	3101      	addlt	r1, #1
 8008f4c:	f7ff fedc 	bl	8008d08 <_Balloc>
 8008f50:	b930      	cbnz	r0, 8008f60 <__multiply+0x44>
 8008f52:	4602      	mov	r2, r0
 8008f54:	4b44      	ldr	r3, [pc, #272]	@ (8009068 <__multiply+0x14c>)
 8008f56:	4845      	ldr	r0, [pc, #276]	@ (800906c <__multiply+0x150>)
 8008f58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f5c:	f000 fcd8 	bl	8009910 <__assert_func>
 8008f60:	f100 0514 	add.w	r5, r0, #20
 8008f64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f68:	462b      	mov	r3, r5
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4543      	cmp	r3, r8
 8008f6e:	d321      	bcc.n	8008fb4 <__multiply+0x98>
 8008f70:	f107 0114 	add.w	r1, r7, #20
 8008f74:	f104 0214 	add.w	r2, r4, #20
 8008f78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f80:	9302      	str	r3, [sp, #8]
 8008f82:	1b13      	subs	r3, r2, r4
 8008f84:	3b15      	subs	r3, #21
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	f104 0715 	add.w	r7, r4, #21
 8008f90:	42ba      	cmp	r2, r7
 8008f92:	bf38      	it	cc
 8008f94:	2304      	movcc	r3, #4
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	9103      	str	r1, [sp, #12]
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	d80c      	bhi.n	8008fba <__multiply+0x9e>
 8008fa0:	2e00      	cmp	r6, #0
 8008fa2:	dd03      	ble.n	8008fac <__multiply+0x90>
 8008fa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d05b      	beq.n	8009064 <__multiply+0x148>
 8008fac:	6106      	str	r6, [r0, #16]
 8008fae:	b005      	add	sp, #20
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb4:	f843 2b04 	str.w	r2, [r3], #4
 8008fb8:	e7d8      	b.n	8008f6c <__multiply+0x50>
 8008fba:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fbe:	f1ba 0f00 	cmp.w	sl, #0
 8008fc2:	d024      	beq.n	800900e <__multiply+0xf2>
 8008fc4:	f104 0e14 	add.w	lr, r4, #20
 8008fc8:	46a9      	mov	r9, r5
 8008fca:	f04f 0c00 	mov.w	ip, #0
 8008fce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8008fd6:	fa1f fb87 	uxth.w	fp, r7
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008fe0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008fe4:	f8d9 7000 	ldr.w	r7, [r9]
 8008fe8:	4463      	add	r3, ip
 8008fea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008fee:	fb0a c70b 	mla	r7, sl, fp, ip
 8008ff2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ffc:	4572      	cmp	r2, lr
 8008ffe:	f849 3b04 	str.w	r3, [r9], #4
 8009002:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009006:	d8e2      	bhi.n	8008fce <__multiply+0xb2>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	f845 c003 	str.w	ip, [r5, r3]
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009014:	3104      	adds	r1, #4
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	d021      	beq.n	8009060 <__multiply+0x144>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	f104 0c14 	add.w	ip, r4, #20
 8009022:	46ae      	mov	lr, r5
 8009024:	f04f 0a00 	mov.w	sl, #0
 8009028:	f8bc b000 	ldrh.w	fp, [ip]
 800902c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009030:	fb09 770b 	mla	r7, r9, fp, r7
 8009034:	4457      	add	r7, sl
 8009036:	b29b      	uxth	r3, r3
 8009038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800903c:	f84e 3b04 	str.w	r3, [lr], #4
 8009040:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009048:	f8be 3000 	ldrh.w	r3, [lr]
 800904c:	fb09 330a 	mla	r3, r9, sl, r3
 8009050:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009054:	4562      	cmp	r2, ip
 8009056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800905a:	d8e5      	bhi.n	8009028 <__multiply+0x10c>
 800905c:	9f01      	ldr	r7, [sp, #4]
 800905e:	51eb      	str	r3, [r5, r7]
 8009060:	3504      	adds	r5, #4
 8009062:	e799      	b.n	8008f98 <__multiply+0x7c>
 8009064:	3e01      	subs	r6, #1
 8009066:	e79b      	b.n	8008fa0 <__multiply+0x84>
 8009068:	08009d1c 	.word	0x08009d1c
 800906c:	08009d2d 	.word	0x08009d2d

08009070 <__pow5mult>:
 8009070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009074:	4615      	mov	r5, r2
 8009076:	f012 0203 	ands.w	r2, r2, #3
 800907a:	4607      	mov	r7, r0
 800907c:	460e      	mov	r6, r1
 800907e:	d007      	beq.n	8009090 <__pow5mult+0x20>
 8009080:	4c25      	ldr	r4, [pc, #148]	@ (8009118 <__pow5mult+0xa8>)
 8009082:	3a01      	subs	r2, #1
 8009084:	2300      	movs	r3, #0
 8009086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800908a:	f7ff fe9f 	bl	8008dcc <__multadd>
 800908e:	4606      	mov	r6, r0
 8009090:	10ad      	asrs	r5, r5, #2
 8009092:	d03d      	beq.n	8009110 <__pow5mult+0xa0>
 8009094:	69fc      	ldr	r4, [r7, #28]
 8009096:	b97c      	cbnz	r4, 80090b8 <__pow5mult+0x48>
 8009098:	2010      	movs	r0, #16
 800909a:	f7ff fd7f 	bl	8008b9c <malloc>
 800909e:	4602      	mov	r2, r0
 80090a0:	61f8      	str	r0, [r7, #28]
 80090a2:	b928      	cbnz	r0, 80090b0 <__pow5mult+0x40>
 80090a4:	4b1d      	ldr	r3, [pc, #116]	@ (800911c <__pow5mult+0xac>)
 80090a6:	481e      	ldr	r0, [pc, #120]	@ (8009120 <__pow5mult+0xb0>)
 80090a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090ac:	f000 fc30 	bl	8009910 <__assert_func>
 80090b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b4:	6004      	str	r4, [r0, #0]
 80090b6:	60c4      	str	r4, [r0, #12]
 80090b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090c0:	b94c      	cbnz	r4, 80090d6 <__pow5mult+0x66>
 80090c2:	f240 2171 	movw	r1, #625	@ 0x271
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7ff ff12 	bl	8008ef0 <__i2b>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80090d2:	4604      	mov	r4, r0
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	f04f 0900 	mov.w	r9, #0
 80090da:	07eb      	lsls	r3, r5, #31
 80090dc:	d50a      	bpl.n	80090f4 <__pow5mult+0x84>
 80090de:	4631      	mov	r1, r6
 80090e0:	4622      	mov	r2, r4
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7ff ff1a 	bl	8008f1c <__multiply>
 80090e8:	4631      	mov	r1, r6
 80090ea:	4680      	mov	r8, r0
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff fe4b 	bl	8008d88 <_Bfree>
 80090f2:	4646      	mov	r6, r8
 80090f4:	106d      	asrs	r5, r5, #1
 80090f6:	d00b      	beq.n	8009110 <__pow5mult+0xa0>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	b938      	cbnz	r0, 800910c <__pow5mult+0x9c>
 80090fc:	4622      	mov	r2, r4
 80090fe:	4621      	mov	r1, r4
 8009100:	4638      	mov	r0, r7
 8009102:	f7ff ff0b 	bl	8008f1c <__multiply>
 8009106:	6020      	str	r0, [r4, #0]
 8009108:	f8c0 9000 	str.w	r9, [r0]
 800910c:	4604      	mov	r4, r0
 800910e:	e7e4      	b.n	80090da <__pow5mult+0x6a>
 8009110:	4630      	mov	r0, r6
 8009112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009116:	bf00      	nop
 8009118:	08009d88 	.word	0x08009d88
 800911c:	08009cad 	.word	0x08009cad
 8009120:	08009d2d 	.word	0x08009d2d

08009124 <__lshift>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	6849      	ldr	r1, [r1, #4]
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	4607      	mov	r7, r0
 8009136:	4691      	mov	r9, r2
 8009138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800913c:	f108 0601 	add.w	r6, r8, #1
 8009140:	42b3      	cmp	r3, r6
 8009142:	db0b      	blt.n	800915c <__lshift+0x38>
 8009144:	4638      	mov	r0, r7
 8009146:	f7ff fddf 	bl	8008d08 <_Balloc>
 800914a:	4605      	mov	r5, r0
 800914c:	b948      	cbnz	r0, 8009162 <__lshift+0x3e>
 800914e:	4602      	mov	r2, r0
 8009150:	4b28      	ldr	r3, [pc, #160]	@ (80091f4 <__lshift+0xd0>)
 8009152:	4829      	ldr	r0, [pc, #164]	@ (80091f8 <__lshift+0xd4>)
 8009154:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009158:	f000 fbda 	bl	8009910 <__assert_func>
 800915c:	3101      	adds	r1, #1
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	e7ee      	b.n	8009140 <__lshift+0x1c>
 8009162:	2300      	movs	r3, #0
 8009164:	f100 0114 	add.w	r1, r0, #20
 8009168:	f100 0210 	add.w	r2, r0, #16
 800916c:	4618      	mov	r0, r3
 800916e:	4553      	cmp	r3, sl
 8009170:	db33      	blt.n	80091da <__lshift+0xb6>
 8009172:	6920      	ldr	r0, [r4, #16]
 8009174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009178:	f104 0314 	add.w	r3, r4, #20
 800917c:	f019 091f 	ands.w	r9, r9, #31
 8009180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009188:	d02b      	beq.n	80091e2 <__lshift+0xbe>
 800918a:	f1c9 0e20 	rsb	lr, r9, #32
 800918e:	468a      	mov	sl, r1
 8009190:	2200      	movs	r2, #0
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	fa00 f009 	lsl.w	r0, r0, r9
 8009198:	4310      	orrs	r0, r2
 800919a:	f84a 0b04 	str.w	r0, [sl], #4
 800919e:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a2:	459c      	cmp	ip, r3
 80091a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091a8:	d8f3      	bhi.n	8009192 <__lshift+0x6e>
 80091aa:	ebac 0304 	sub.w	r3, ip, r4
 80091ae:	3b15      	subs	r3, #21
 80091b0:	f023 0303 	bic.w	r3, r3, #3
 80091b4:	3304      	adds	r3, #4
 80091b6:	f104 0015 	add.w	r0, r4, #21
 80091ba:	4584      	cmp	ip, r0
 80091bc:	bf38      	it	cc
 80091be:	2304      	movcc	r3, #4
 80091c0:	50ca      	str	r2, [r1, r3]
 80091c2:	b10a      	cbz	r2, 80091c8 <__lshift+0xa4>
 80091c4:	f108 0602 	add.w	r6, r8, #2
 80091c8:	3e01      	subs	r6, #1
 80091ca:	4638      	mov	r0, r7
 80091cc:	612e      	str	r6, [r5, #16]
 80091ce:	4621      	mov	r1, r4
 80091d0:	f7ff fdda 	bl	8008d88 <_Bfree>
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	f842 0f04 	str.w	r0, [r2, #4]!
 80091de:	3301      	adds	r3, #1
 80091e0:	e7c5      	b.n	800916e <__lshift+0x4a>
 80091e2:	3904      	subs	r1, #4
 80091e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80091ec:	459c      	cmp	ip, r3
 80091ee:	d8f9      	bhi.n	80091e4 <__lshift+0xc0>
 80091f0:	e7ea      	b.n	80091c8 <__lshift+0xa4>
 80091f2:	bf00      	nop
 80091f4:	08009d1c 	.word	0x08009d1c
 80091f8:	08009d2d 	.word	0x08009d2d

080091fc <__mcmp>:
 80091fc:	690a      	ldr	r2, [r1, #16]
 80091fe:	4603      	mov	r3, r0
 8009200:	6900      	ldr	r0, [r0, #16]
 8009202:	1a80      	subs	r0, r0, r2
 8009204:	b530      	push	{r4, r5, lr}
 8009206:	d10e      	bne.n	8009226 <__mcmp+0x2a>
 8009208:	3314      	adds	r3, #20
 800920a:	3114      	adds	r1, #20
 800920c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800921c:	4295      	cmp	r5, r2
 800921e:	d003      	beq.n	8009228 <__mcmp+0x2c>
 8009220:	d205      	bcs.n	800922e <__mcmp+0x32>
 8009222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009226:	bd30      	pop	{r4, r5, pc}
 8009228:	42a3      	cmp	r3, r4
 800922a:	d3f3      	bcc.n	8009214 <__mcmp+0x18>
 800922c:	e7fb      	b.n	8009226 <__mcmp+0x2a>
 800922e:	2001      	movs	r0, #1
 8009230:	e7f9      	b.n	8009226 <__mcmp+0x2a>
	...

08009234 <__mdiff>:
 8009234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	4689      	mov	r9, r1
 800923a:	4606      	mov	r6, r0
 800923c:	4611      	mov	r1, r2
 800923e:	4648      	mov	r0, r9
 8009240:	4614      	mov	r4, r2
 8009242:	f7ff ffdb 	bl	80091fc <__mcmp>
 8009246:	1e05      	subs	r5, r0, #0
 8009248:	d112      	bne.n	8009270 <__mdiff+0x3c>
 800924a:	4629      	mov	r1, r5
 800924c:	4630      	mov	r0, r6
 800924e:	f7ff fd5b 	bl	8008d08 <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__mdiff+0x2e>
 8009256:	4b3f      	ldr	r3, [pc, #252]	@ (8009354 <__mdiff+0x120>)
 8009258:	f240 2137 	movw	r1, #567	@ 0x237
 800925c:	483e      	ldr	r0, [pc, #248]	@ (8009358 <__mdiff+0x124>)
 800925e:	f000 fb57 	bl	8009910 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009268:	4610      	mov	r0, r2
 800926a:	b003      	add	sp, #12
 800926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009270:	bfbc      	itt	lt
 8009272:	464b      	movlt	r3, r9
 8009274:	46a1      	movlt	r9, r4
 8009276:	4630      	mov	r0, r6
 8009278:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800927c:	bfba      	itte	lt
 800927e:	461c      	movlt	r4, r3
 8009280:	2501      	movlt	r5, #1
 8009282:	2500      	movge	r5, #0
 8009284:	f7ff fd40 	bl	8008d08 <_Balloc>
 8009288:	4602      	mov	r2, r0
 800928a:	b918      	cbnz	r0, 8009294 <__mdiff+0x60>
 800928c:	4b31      	ldr	r3, [pc, #196]	@ (8009354 <__mdiff+0x120>)
 800928e:	f240 2145 	movw	r1, #581	@ 0x245
 8009292:	e7e3      	b.n	800925c <__mdiff+0x28>
 8009294:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009298:	6926      	ldr	r6, [r4, #16]
 800929a:	60c5      	str	r5, [r0, #12]
 800929c:	f109 0310 	add.w	r3, r9, #16
 80092a0:	f109 0514 	add.w	r5, r9, #20
 80092a4:	f104 0e14 	add.w	lr, r4, #20
 80092a8:	f100 0b14 	add.w	fp, r0, #20
 80092ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	46d9      	mov	r9, fp
 80092b8:	f04f 0c00 	mov.w	ip, #0
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	fa1f f38a 	uxth.w	r3, sl
 80092cc:	4619      	mov	r1, r3
 80092ce:	b283      	uxth	r3, r0
 80092d0:	1acb      	subs	r3, r1, r3
 80092d2:	0c00      	lsrs	r0, r0, #16
 80092d4:	4463      	add	r3, ip
 80092d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092e4:	4576      	cmp	r6, lr
 80092e6:	f849 3b04 	str.w	r3, [r9], #4
 80092ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092ee:	d8e5      	bhi.n	80092bc <__mdiff+0x88>
 80092f0:	1b33      	subs	r3, r6, r4
 80092f2:	3b15      	subs	r3, #21
 80092f4:	f023 0303 	bic.w	r3, r3, #3
 80092f8:	3415      	adds	r4, #21
 80092fa:	3304      	adds	r3, #4
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	bf38      	it	cc
 8009300:	2304      	movcc	r3, #4
 8009302:	441d      	add	r5, r3
 8009304:	445b      	add	r3, fp
 8009306:	461e      	mov	r6, r3
 8009308:	462c      	mov	r4, r5
 800930a:	4544      	cmp	r4, r8
 800930c:	d30e      	bcc.n	800932c <__mdiff+0xf8>
 800930e:	f108 0103 	add.w	r1, r8, #3
 8009312:	1b49      	subs	r1, r1, r5
 8009314:	f021 0103 	bic.w	r1, r1, #3
 8009318:	3d03      	subs	r5, #3
 800931a:	45a8      	cmp	r8, r5
 800931c:	bf38      	it	cc
 800931e:	2100      	movcc	r1, #0
 8009320:	440b      	add	r3, r1
 8009322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009326:	b191      	cbz	r1, 800934e <__mdiff+0x11a>
 8009328:	6117      	str	r7, [r2, #16]
 800932a:	e79d      	b.n	8009268 <__mdiff+0x34>
 800932c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009330:	46e6      	mov	lr, ip
 8009332:	0c08      	lsrs	r0, r1, #16
 8009334:	fa1c fc81 	uxtah	ip, ip, r1
 8009338:	4471      	add	r1, lr
 800933a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800933e:	b289      	uxth	r1, r1
 8009340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009344:	f846 1b04 	str.w	r1, [r6], #4
 8009348:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800934c:	e7dd      	b.n	800930a <__mdiff+0xd6>
 800934e:	3f01      	subs	r7, #1
 8009350:	e7e7      	b.n	8009322 <__mdiff+0xee>
 8009352:	bf00      	nop
 8009354:	08009d1c 	.word	0x08009d1c
 8009358:	08009d2d 	.word	0x08009d2d

0800935c <__d2b>:
 800935c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009360:	460f      	mov	r7, r1
 8009362:	2101      	movs	r1, #1
 8009364:	ec59 8b10 	vmov	r8, r9, d0
 8009368:	4616      	mov	r6, r2
 800936a:	f7ff fccd 	bl	8008d08 <_Balloc>
 800936e:	4604      	mov	r4, r0
 8009370:	b930      	cbnz	r0, 8009380 <__d2b+0x24>
 8009372:	4602      	mov	r2, r0
 8009374:	4b23      	ldr	r3, [pc, #140]	@ (8009404 <__d2b+0xa8>)
 8009376:	4824      	ldr	r0, [pc, #144]	@ (8009408 <__d2b+0xac>)
 8009378:	f240 310f 	movw	r1, #783	@ 0x30f
 800937c:	f000 fac8 	bl	8009910 <__assert_func>
 8009380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009388:	b10d      	cbz	r5, 800938e <__d2b+0x32>
 800938a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	f1b8 0300 	subs.w	r3, r8, #0
 8009394:	d023      	beq.n	80093de <__d2b+0x82>
 8009396:	4668      	mov	r0, sp
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	f7ff fd7c 	bl	8008e96 <__lo0bits>
 800939e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093a2:	b1d0      	cbz	r0, 80093da <__d2b+0x7e>
 80093a4:	f1c0 0320 	rsb	r3, r0, #32
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	430b      	orrs	r3, r1
 80093ae:	40c2      	lsrs	r2, r0
 80093b0:	6163      	str	r3, [r4, #20]
 80093b2:	9201      	str	r2, [sp, #4]
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	61a3      	str	r3, [r4, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	bf0c      	ite	eq
 80093bc:	2201      	moveq	r2, #1
 80093be:	2202      	movne	r2, #2
 80093c0:	6122      	str	r2, [r4, #16]
 80093c2:	b1a5      	cbz	r5, 80093ee <__d2b+0x92>
 80093c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093c8:	4405      	add	r5, r0
 80093ca:	603d      	str	r5, [r7, #0]
 80093cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093d0:	6030      	str	r0, [r6, #0]
 80093d2:	4620      	mov	r0, r4
 80093d4:	b003      	add	sp, #12
 80093d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093da:	6161      	str	r1, [r4, #20]
 80093dc:	e7ea      	b.n	80093b4 <__d2b+0x58>
 80093de:	a801      	add	r0, sp, #4
 80093e0:	f7ff fd59 	bl	8008e96 <__lo0bits>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	3020      	adds	r0, #32
 80093ea:	2201      	movs	r2, #1
 80093ec:	e7e8      	b.n	80093c0 <__d2b+0x64>
 80093ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093f6:	6038      	str	r0, [r7, #0]
 80093f8:	6918      	ldr	r0, [r3, #16]
 80093fa:	f7ff fd2d 	bl	8008e58 <__hi0bits>
 80093fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009402:	e7e5      	b.n	80093d0 <__d2b+0x74>
 8009404:	08009d1c 	.word	0x08009d1c
 8009408:	08009d2d 	.word	0x08009d2d

0800940c <__sfputc_r>:
 800940c:	6893      	ldr	r3, [r2, #8]
 800940e:	3b01      	subs	r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	b410      	push	{r4}
 8009414:	6093      	str	r3, [r2, #8]
 8009416:	da08      	bge.n	800942a <__sfputc_r+0x1e>
 8009418:	6994      	ldr	r4, [r2, #24]
 800941a:	42a3      	cmp	r3, r4
 800941c:	db01      	blt.n	8009422 <__sfputc_r+0x16>
 800941e:	290a      	cmp	r1, #10
 8009420:	d103      	bne.n	800942a <__sfputc_r+0x1e>
 8009422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009426:	f7fe bbaa 	b.w	8007b7e <__swbuf_r>
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	1c58      	adds	r0, r3, #1
 800942e:	6010      	str	r0, [r2, #0]
 8009430:	7019      	strb	r1, [r3, #0]
 8009432:	4608      	mov	r0, r1
 8009434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009438:	4770      	bx	lr

0800943a <__sfputs_r>:
 800943a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943c:	4606      	mov	r6, r0
 800943e:	460f      	mov	r7, r1
 8009440:	4614      	mov	r4, r2
 8009442:	18d5      	adds	r5, r2, r3
 8009444:	42ac      	cmp	r4, r5
 8009446:	d101      	bne.n	800944c <__sfputs_r+0x12>
 8009448:	2000      	movs	r0, #0
 800944a:	e007      	b.n	800945c <__sfputs_r+0x22>
 800944c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009450:	463a      	mov	r2, r7
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff ffda 	bl	800940c <__sfputc_r>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d1f3      	bne.n	8009444 <__sfputs_r+0xa>
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009460 <_vfiprintf_r>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	460d      	mov	r5, r1
 8009466:	b09d      	sub	sp, #116	@ 0x74
 8009468:	4614      	mov	r4, r2
 800946a:	4698      	mov	r8, r3
 800946c:	4606      	mov	r6, r0
 800946e:	b118      	cbz	r0, 8009478 <_vfiprintf_r+0x18>
 8009470:	6a03      	ldr	r3, [r0, #32]
 8009472:	b90b      	cbnz	r3, 8009478 <_vfiprintf_r+0x18>
 8009474:	f7fe fa9a 	bl	80079ac <__sinit>
 8009478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d405      	bmi.n	800948a <_vfiprintf_r+0x2a>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d402      	bmi.n	800948a <_vfiprintf_r+0x2a>
 8009484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009486:	f7fe fce2 	bl	8007e4e <__retarget_lock_acquire_recursive>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	071b      	lsls	r3, r3, #28
 800948e:	d501      	bpl.n	8009494 <_vfiprintf_r+0x34>
 8009490:	692b      	ldr	r3, [r5, #16]
 8009492:	b99b      	cbnz	r3, 80094bc <_vfiprintf_r+0x5c>
 8009494:	4629      	mov	r1, r5
 8009496:	4630      	mov	r0, r6
 8009498:	f7fe fbb0 	bl	8007bfc <__swsetup_r>
 800949c:	b170      	cbz	r0, 80094bc <_vfiprintf_r+0x5c>
 800949e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094a0:	07dc      	lsls	r4, r3, #31
 80094a2:	d504      	bpl.n	80094ae <_vfiprintf_r+0x4e>
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094a8:	b01d      	add	sp, #116	@ 0x74
 80094aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	0598      	lsls	r0, r3, #22
 80094b2:	d4f7      	bmi.n	80094a4 <_vfiprintf_r+0x44>
 80094b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094b6:	f7fe fccb 	bl	8007e50 <__retarget_lock_release_recursive>
 80094ba:	e7f3      	b.n	80094a4 <_vfiprintf_r+0x44>
 80094bc:	2300      	movs	r3, #0
 80094be:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c0:	2320      	movs	r3, #32
 80094c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ca:	2330      	movs	r3, #48	@ 0x30
 80094cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800967c <_vfiprintf_r+0x21c>
 80094d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094d4:	f04f 0901 	mov.w	r9, #1
 80094d8:	4623      	mov	r3, r4
 80094da:	469a      	mov	sl, r3
 80094dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e0:	b10a      	cbz	r2, 80094e6 <_vfiprintf_r+0x86>
 80094e2:	2a25      	cmp	r2, #37	@ 0x25
 80094e4:	d1f9      	bne.n	80094da <_vfiprintf_r+0x7a>
 80094e6:	ebba 0b04 	subs.w	fp, sl, r4
 80094ea:	d00b      	beq.n	8009504 <_vfiprintf_r+0xa4>
 80094ec:	465b      	mov	r3, fp
 80094ee:	4622      	mov	r2, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff ffa1 	bl	800943a <__sfputs_r>
 80094f8:	3001      	adds	r0, #1
 80094fa:	f000 80a7 	beq.w	800964c <_vfiprintf_r+0x1ec>
 80094fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009500:	445a      	add	r2, fp
 8009502:	9209      	str	r2, [sp, #36]	@ 0x24
 8009504:	f89a 3000 	ldrb.w	r3, [sl]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 809f 	beq.w	800964c <_vfiprintf_r+0x1ec>
 800950e:	2300      	movs	r3, #0
 8009510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009518:	f10a 0a01 	add.w	sl, sl, #1
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	9307      	str	r3, [sp, #28]
 8009520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009524:	931a      	str	r3, [sp, #104]	@ 0x68
 8009526:	4654      	mov	r4, sl
 8009528:	2205      	movs	r2, #5
 800952a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952e:	4853      	ldr	r0, [pc, #332]	@ (800967c <_vfiprintf_r+0x21c>)
 8009530:	f7f6 fe4e 	bl	80001d0 <memchr>
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	b9d8      	cbnz	r0, 8009570 <_vfiprintf_r+0x110>
 8009538:	06d1      	lsls	r1, r2, #27
 800953a:	bf44      	itt	mi
 800953c:	2320      	movmi	r3, #32
 800953e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009542:	0713      	lsls	r3, r2, #28
 8009544:	bf44      	itt	mi
 8009546:	232b      	movmi	r3, #43	@ 0x2b
 8009548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800954c:	f89a 3000 	ldrb.w	r3, [sl]
 8009550:	2b2a      	cmp	r3, #42	@ 0x2a
 8009552:	d015      	beq.n	8009580 <_vfiprintf_r+0x120>
 8009554:	9a07      	ldr	r2, [sp, #28]
 8009556:	4654      	mov	r4, sl
 8009558:	2000      	movs	r0, #0
 800955a:	f04f 0c0a 	mov.w	ip, #10
 800955e:	4621      	mov	r1, r4
 8009560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009564:	3b30      	subs	r3, #48	@ 0x30
 8009566:	2b09      	cmp	r3, #9
 8009568:	d94b      	bls.n	8009602 <_vfiprintf_r+0x1a2>
 800956a:	b1b0      	cbz	r0, 800959a <_vfiprintf_r+0x13a>
 800956c:	9207      	str	r2, [sp, #28]
 800956e:	e014      	b.n	800959a <_vfiprintf_r+0x13a>
 8009570:	eba0 0308 	sub.w	r3, r0, r8
 8009574:	fa09 f303 	lsl.w	r3, r9, r3
 8009578:	4313      	orrs	r3, r2
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	46a2      	mov	sl, r4
 800957e:	e7d2      	b.n	8009526 <_vfiprintf_r+0xc6>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	1d19      	adds	r1, r3, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	9103      	str	r1, [sp, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	bfbb      	ittet	lt
 800958c:	425b      	neglt	r3, r3
 800958e:	f042 0202 	orrlt.w	r2, r2, #2
 8009592:	9307      	strge	r3, [sp, #28]
 8009594:	9307      	strlt	r3, [sp, #28]
 8009596:	bfb8      	it	lt
 8009598:	9204      	strlt	r2, [sp, #16]
 800959a:	7823      	ldrb	r3, [r4, #0]
 800959c:	2b2e      	cmp	r3, #46	@ 0x2e
 800959e:	d10a      	bne.n	80095b6 <_vfiprintf_r+0x156>
 80095a0:	7863      	ldrb	r3, [r4, #1]
 80095a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80095a4:	d132      	bne.n	800960c <_vfiprintf_r+0x1ac>
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	1d1a      	adds	r2, r3, #4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	9203      	str	r2, [sp, #12]
 80095ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095b2:	3402      	adds	r4, #2
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800968c <_vfiprintf_r+0x22c>
 80095ba:	7821      	ldrb	r1, [r4, #0]
 80095bc:	2203      	movs	r2, #3
 80095be:	4650      	mov	r0, sl
 80095c0:	f7f6 fe06 	bl	80001d0 <memchr>
 80095c4:	b138      	cbz	r0, 80095d6 <_vfiprintf_r+0x176>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	eba0 000a 	sub.w	r0, r0, sl
 80095cc:	2240      	movs	r2, #64	@ 0x40
 80095ce:	4082      	lsls	r2, r0
 80095d0:	4313      	orrs	r3, r2
 80095d2:	3401      	adds	r4, #1
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095da:	4829      	ldr	r0, [pc, #164]	@ (8009680 <_vfiprintf_r+0x220>)
 80095dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095e0:	2206      	movs	r2, #6
 80095e2:	f7f6 fdf5 	bl	80001d0 <memchr>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d03f      	beq.n	800966a <_vfiprintf_r+0x20a>
 80095ea:	4b26      	ldr	r3, [pc, #152]	@ (8009684 <_vfiprintf_r+0x224>)
 80095ec:	bb1b      	cbnz	r3, 8009636 <_vfiprintf_r+0x1d6>
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	3307      	adds	r3, #7
 80095f2:	f023 0307 	bic.w	r3, r3, #7
 80095f6:	3308      	adds	r3, #8
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095fc:	443b      	add	r3, r7
 80095fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009600:	e76a      	b.n	80094d8 <_vfiprintf_r+0x78>
 8009602:	fb0c 3202 	mla	r2, ip, r2, r3
 8009606:	460c      	mov	r4, r1
 8009608:	2001      	movs	r0, #1
 800960a:	e7a8      	b.n	800955e <_vfiprintf_r+0xfe>
 800960c:	2300      	movs	r3, #0
 800960e:	3401      	adds	r4, #1
 8009610:	9305      	str	r3, [sp, #20]
 8009612:	4619      	mov	r1, r3
 8009614:	f04f 0c0a 	mov.w	ip, #10
 8009618:	4620      	mov	r0, r4
 800961a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800961e:	3a30      	subs	r2, #48	@ 0x30
 8009620:	2a09      	cmp	r2, #9
 8009622:	d903      	bls.n	800962c <_vfiprintf_r+0x1cc>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0c6      	beq.n	80095b6 <_vfiprintf_r+0x156>
 8009628:	9105      	str	r1, [sp, #20]
 800962a:	e7c4      	b.n	80095b6 <_vfiprintf_r+0x156>
 800962c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009630:	4604      	mov	r4, r0
 8009632:	2301      	movs	r3, #1
 8009634:	e7f0      	b.n	8009618 <_vfiprintf_r+0x1b8>
 8009636:	ab03      	add	r3, sp, #12
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	462a      	mov	r2, r5
 800963c:	4b12      	ldr	r3, [pc, #72]	@ (8009688 <_vfiprintf_r+0x228>)
 800963e:	a904      	add	r1, sp, #16
 8009640:	4630      	mov	r0, r6
 8009642:	f7fd fd6f 	bl	8007124 <_printf_float>
 8009646:	4607      	mov	r7, r0
 8009648:	1c78      	adds	r0, r7, #1
 800964a:	d1d6      	bne.n	80095fa <_vfiprintf_r+0x19a>
 800964c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800964e:	07d9      	lsls	r1, r3, #31
 8009650:	d405      	bmi.n	800965e <_vfiprintf_r+0x1fe>
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	059a      	lsls	r2, r3, #22
 8009656:	d402      	bmi.n	800965e <_vfiprintf_r+0x1fe>
 8009658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800965a:	f7fe fbf9 	bl	8007e50 <__retarget_lock_release_recursive>
 800965e:	89ab      	ldrh	r3, [r5, #12]
 8009660:	065b      	lsls	r3, r3, #25
 8009662:	f53f af1f 	bmi.w	80094a4 <_vfiprintf_r+0x44>
 8009666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009668:	e71e      	b.n	80094a8 <_vfiprintf_r+0x48>
 800966a:	ab03      	add	r3, sp, #12
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	462a      	mov	r2, r5
 8009670:	4b05      	ldr	r3, [pc, #20]	@ (8009688 <_vfiprintf_r+0x228>)
 8009672:	a904      	add	r1, sp, #16
 8009674:	4630      	mov	r0, r6
 8009676:	f7fd ffed 	bl	8007654 <_printf_i>
 800967a:	e7e4      	b.n	8009646 <_vfiprintf_r+0x1e6>
 800967c:	08009e88 	.word	0x08009e88
 8009680:	08009e92 	.word	0x08009e92
 8009684:	08007125 	.word	0x08007125
 8009688:	0800943b 	.word	0x0800943b
 800968c:	08009e8e 	.word	0x08009e8e

08009690 <__sflush_r>:
 8009690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	0716      	lsls	r6, r2, #28
 800969a:	4605      	mov	r5, r0
 800969c:	460c      	mov	r4, r1
 800969e:	d454      	bmi.n	800974a <__sflush_r+0xba>
 80096a0:	684b      	ldr	r3, [r1, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dc02      	bgt.n	80096ac <__sflush_r+0x1c>
 80096a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dd48      	ble.n	800973e <__sflush_r+0xae>
 80096ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	d045      	beq.n	800973e <__sflush_r+0xae>
 80096b2:	2300      	movs	r3, #0
 80096b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096b8:	682f      	ldr	r7, [r5, #0]
 80096ba:	6a21      	ldr	r1, [r4, #32]
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	d030      	beq.n	8009722 <__sflush_r+0x92>
 80096c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	0759      	lsls	r1, r3, #29
 80096c6:	d505      	bpl.n	80096d4 <__sflush_r+0x44>
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096ce:	b10b      	cbz	r3, 80096d4 <__sflush_r+0x44>
 80096d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096d2:	1ad2      	subs	r2, r2, r3
 80096d4:	2300      	movs	r3, #0
 80096d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096d8:	6a21      	ldr	r1, [r4, #32]
 80096da:	4628      	mov	r0, r5
 80096dc:	47b0      	blx	r6
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	d106      	bne.n	80096f2 <__sflush_r+0x62>
 80096e4:	6829      	ldr	r1, [r5, #0]
 80096e6:	291d      	cmp	r1, #29
 80096e8:	d82b      	bhi.n	8009742 <__sflush_r+0xb2>
 80096ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009794 <__sflush_r+0x104>)
 80096ec:	410a      	asrs	r2, r1
 80096ee:	07d6      	lsls	r6, r2, #31
 80096f0:	d427      	bmi.n	8009742 <__sflush_r+0xb2>
 80096f2:	2200      	movs	r2, #0
 80096f4:	6062      	str	r2, [r4, #4]
 80096f6:	04d9      	lsls	r1, r3, #19
 80096f8:	6922      	ldr	r2, [r4, #16]
 80096fa:	6022      	str	r2, [r4, #0]
 80096fc:	d504      	bpl.n	8009708 <__sflush_r+0x78>
 80096fe:	1c42      	adds	r2, r0, #1
 8009700:	d101      	bne.n	8009706 <__sflush_r+0x76>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	b903      	cbnz	r3, 8009708 <__sflush_r+0x78>
 8009706:	6560      	str	r0, [r4, #84]	@ 0x54
 8009708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800970a:	602f      	str	r7, [r5, #0]
 800970c:	b1b9      	cbz	r1, 800973e <__sflush_r+0xae>
 800970e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009712:	4299      	cmp	r1, r3
 8009714:	d002      	beq.n	800971c <__sflush_r+0x8c>
 8009716:	4628      	mov	r0, r5
 8009718:	f7ff f9f6 	bl	8008b08 <_free_r>
 800971c:	2300      	movs	r3, #0
 800971e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009720:	e00d      	b.n	800973e <__sflush_r+0xae>
 8009722:	2301      	movs	r3, #1
 8009724:	4628      	mov	r0, r5
 8009726:	47b0      	blx	r6
 8009728:	4602      	mov	r2, r0
 800972a:	1c50      	adds	r0, r2, #1
 800972c:	d1c9      	bne.n	80096c2 <__sflush_r+0x32>
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0c6      	beq.n	80096c2 <__sflush_r+0x32>
 8009734:	2b1d      	cmp	r3, #29
 8009736:	d001      	beq.n	800973c <__sflush_r+0xac>
 8009738:	2b16      	cmp	r3, #22
 800973a:	d11e      	bne.n	800977a <__sflush_r+0xea>
 800973c:	602f      	str	r7, [r5, #0]
 800973e:	2000      	movs	r0, #0
 8009740:	e022      	b.n	8009788 <__sflush_r+0xf8>
 8009742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009746:	b21b      	sxth	r3, r3
 8009748:	e01b      	b.n	8009782 <__sflush_r+0xf2>
 800974a:	690f      	ldr	r7, [r1, #16]
 800974c:	2f00      	cmp	r7, #0
 800974e:	d0f6      	beq.n	800973e <__sflush_r+0xae>
 8009750:	0793      	lsls	r3, r2, #30
 8009752:	680e      	ldr	r6, [r1, #0]
 8009754:	bf08      	it	eq
 8009756:	694b      	ldreq	r3, [r1, #20]
 8009758:	600f      	str	r7, [r1, #0]
 800975a:	bf18      	it	ne
 800975c:	2300      	movne	r3, #0
 800975e:	eba6 0807 	sub.w	r8, r6, r7
 8009762:	608b      	str	r3, [r1, #8]
 8009764:	f1b8 0f00 	cmp.w	r8, #0
 8009768:	dde9      	ble.n	800973e <__sflush_r+0xae>
 800976a:	6a21      	ldr	r1, [r4, #32]
 800976c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800976e:	4643      	mov	r3, r8
 8009770:	463a      	mov	r2, r7
 8009772:	4628      	mov	r0, r5
 8009774:	47b0      	blx	r6
 8009776:	2800      	cmp	r0, #0
 8009778:	dc08      	bgt.n	800978c <__sflush_r+0xfc>
 800977a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	4407      	add	r7, r0
 800978e:	eba8 0800 	sub.w	r8, r8, r0
 8009792:	e7e7      	b.n	8009764 <__sflush_r+0xd4>
 8009794:	dfbffffe 	.word	0xdfbffffe

08009798 <_fflush_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	690b      	ldr	r3, [r1, #16]
 800979c:	4605      	mov	r5, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	b913      	cbnz	r3, 80097a8 <_fflush_r+0x10>
 80097a2:	2500      	movs	r5, #0
 80097a4:	4628      	mov	r0, r5
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	b118      	cbz	r0, 80097b2 <_fflush_r+0x1a>
 80097aa:	6a03      	ldr	r3, [r0, #32]
 80097ac:	b90b      	cbnz	r3, 80097b2 <_fflush_r+0x1a>
 80097ae:	f7fe f8fd 	bl	80079ac <__sinit>
 80097b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0f3      	beq.n	80097a2 <_fflush_r+0xa>
 80097ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097bc:	07d0      	lsls	r0, r2, #31
 80097be:	d404      	bmi.n	80097ca <_fflush_r+0x32>
 80097c0:	0599      	lsls	r1, r3, #22
 80097c2:	d402      	bmi.n	80097ca <_fflush_r+0x32>
 80097c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097c6:	f7fe fb42 	bl	8007e4e <__retarget_lock_acquire_recursive>
 80097ca:	4628      	mov	r0, r5
 80097cc:	4621      	mov	r1, r4
 80097ce:	f7ff ff5f 	bl	8009690 <__sflush_r>
 80097d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097d4:	07da      	lsls	r2, r3, #31
 80097d6:	4605      	mov	r5, r0
 80097d8:	d4e4      	bmi.n	80097a4 <_fflush_r+0xc>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	059b      	lsls	r3, r3, #22
 80097de:	d4e1      	bmi.n	80097a4 <_fflush_r+0xc>
 80097e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097e2:	f7fe fb35 	bl	8007e50 <__retarget_lock_release_recursive>
 80097e6:	e7dd      	b.n	80097a4 <_fflush_r+0xc>

080097e8 <__swhatbuf_r>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	460c      	mov	r4, r1
 80097ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f0:	2900      	cmp	r1, #0
 80097f2:	b096      	sub	sp, #88	@ 0x58
 80097f4:	4615      	mov	r5, r2
 80097f6:	461e      	mov	r6, r3
 80097f8:	da0d      	bge.n	8009816 <__swhatbuf_r+0x2e>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009800:	f04f 0100 	mov.w	r1, #0
 8009804:	bf14      	ite	ne
 8009806:	2340      	movne	r3, #64	@ 0x40
 8009808:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800980c:	2000      	movs	r0, #0
 800980e:	6031      	str	r1, [r6, #0]
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	b016      	add	sp, #88	@ 0x58
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	466a      	mov	r2, sp
 8009818:	f000 f848 	bl	80098ac <_fstat_r>
 800981c:	2800      	cmp	r0, #0
 800981e:	dbec      	blt.n	80097fa <__swhatbuf_r+0x12>
 8009820:	9901      	ldr	r1, [sp, #4]
 8009822:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009826:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800982a:	4259      	negs	r1, r3
 800982c:	4159      	adcs	r1, r3
 800982e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009832:	e7eb      	b.n	800980c <__swhatbuf_r+0x24>

08009834 <__smakebuf_r>:
 8009834:	898b      	ldrh	r3, [r1, #12]
 8009836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009838:	079d      	lsls	r5, r3, #30
 800983a:	4606      	mov	r6, r0
 800983c:	460c      	mov	r4, r1
 800983e:	d507      	bpl.n	8009850 <__smakebuf_r+0x1c>
 8009840:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	2301      	movs	r3, #1
 800984a:	6163      	str	r3, [r4, #20]
 800984c:	b003      	add	sp, #12
 800984e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009850:	ab01      	add	r3, sp, #4
 8009852:	466a      	mov	r2, sp
 8009854:	f7ff ffc8 	bl	80097e8 <__swhatbuf_r>
 8009858:	9f00      	ldr	r7, [sp, #0]
 800985a:	4605      	mov	r5, r0
 800985c:	4639      	mov	r1, r7
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff f9c6 	bl	8008bf0 <_malloc_r>
 8009864:	b948      	cbnz	r0, 800987a <__smakebuf_r+0x46>
 8009866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986a:	059a      	lsls	r2, r3, #22
 800986c:	d4ee      	bmi.n	800984c <__smakebuf_r+0x18>
 800986e:	f023 0303 	bic.w	r3, r3, #3
 8009872:	f043 0302 	orr.w	r3, r3, #2
 8009876:	81a3      	strh	r3, [r4, #12]
 8009878:	e7e2      	b.n	8009840 <__smakebuf_r+0xc>
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	6020      	str	r0, [r4, #0]
 800987e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800988a:	b15b      	cbz	r3, 80098a4 <__smakebuf_r+0x70>
 800988c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009890:	4630      	mov	r0, r6
 8009892:	f000 f81d 	bl	80098d0 <_isatty_r>
 8009896:	b128      	cbz	r0, 80098a4 <__smakebuf_r+0x70>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f023 0303 	bic.w	r3, r3, #3
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	431d      	orrs	r5, r3
 80098a8:	81a5      	strh	r5, [r4, #12]
 80098aa:	e7cf      	b.n	800984c <__smakebuf_r+0x18>

080098ac <_fstat_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d07      	ldr	r5, [pc, #28]	@ (80098cc <_fstat_r+0x20>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	602b      	str	r3, [r5, #0]
 80098ba:	f7f7 fefa 	bl	80016b2 <_fstat>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	d102      	bne.n	80098c8 <_fstat_r+0x1c>
 80098c2:	682b      	ldr	r3, [r5, #0]
 80098c4:	b103      	cbz	r3, 80098c8 <_fstat_r+0x1c>
 80098c6:	6023      	str	r3, [r4, #0]
 80098c8:	bd38      	pop	{r3, r4, r5, pc}
 80098ca:	bf00      	nop
 80098cc:	20001328 	.word	0x20001328

080098d0 <_isatty_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d06      	ldr	r5, [pc, #24]	@ (80098ec <_isatty_r+0x1c>)
 80098d4:	2300      	movs	r3, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	602b      	str	r3, [r5, #0]
 80098dc:	f7f7 feee 	bl	80016bc <_isatty>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_isatty_r+0x1a>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_isatty_r+0x1a>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	20001328 	.word	0x20001328

080098f0 <_sbrk_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4d06      	ldr	r5, [pc, #24]	@ (800990c <_sbrk_r+0x1c>)
 80098f4:	2300      	movs	r3, #0
 80098f6:	4604      	mov	r4, r0
 80098f8:	4608      	mov	r0, r1
 80098fa:	602b      	str	r3, [r5, #0]
 80098fc:	f7f7 fee2 	bl	80016c4 <_sbrk>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_sbrk_r+0x1a>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_sbrk_r+0x1a>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20001328 	.word	0x20001328

08009910 <__assert_func>:
 8009910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009912:	4614      	mov	r4, r2
 8009914:	461a      	mov	r2, r3
 8009916:	4b09      	ldr	r3, [pc, #36]	@ (800993c <__assert_func+0x2c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4605      	mov	r5, r0
 800991c:	68d8      	ldr	r0, [r3, #12]
 800991e:	b954      	cbnz	r4, 8009936 <__assert_func+0x26>
 8009920:	4b07      	ldr	r3, [pc, #28]	@ (8009940 <__assert_func+0x30>)
 8009922:	461c      	mov	r4, r3
 8009924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009928:	9100      	str	r1, [sp, #0]
 800992a:	462b      	mov	r3, r5
 800992c:	4905      	ldr	r1, [pc, #20]	@ (8009944 <__assert_func+0x34>)
 800992e:	f000 f841 	bl	80099b4 <fiprintf>
 8009932:	f000 f851 	bl	80099d8 <abort>
 8009936:	4b04      	ldr	r3, [pc, #16]	@ (8009948 <__assert_func+0x38>)
 8009938:	e7f4      	b.n	8009924 <__assert_func+0x14>
 800993a:	bf00      	nop
 800993c:	20000020 	.word	0x20000020
 8009940:	08009ede 	.word	0x08009ede
 8009944:	08009eb0 	.word	0x08009eb0
 8009948:	08009ea3 	.word	0x08009ea3

0800994c <_calloc_r>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	fba1 5402 	umull	r5, r4, r1, r2
 8009952:	b93c      	cbnz	r4, 8009964 <_calloc_r+0x18>
 8009954:	4629      	mov	r1, r5
 8009956:	f7ff f94b 	bl	8008bf0 <_malloc_r>
 800995a:	4606      	mov	r6, r0
 800995c:	b928      	cbnz	r0, 800996a <_calloc_r+0x1e>
 800995e:	2600      	movs	r6, #0
 8009960:	4630      	mov	r0, r6
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	220c      	movs	r2, #12
 8009966:	6002      	str	r2, [r0, #0]
 8009968:	e7f9      	b.n	800995e <_calloc_r+0x12>
 800996a:	462a      	mov	r2, r5
 800996c:	4621      	mov	r1, r4
 800996e:	f7fe f99b 	bl	8007ca8 <memset>
 8009972:	e7f5      	b.n	8009960 <_calloc_r+0x14>

08009974 <__ascii_mbtowc>:
 8009974:	b082      	sub	sp, #8
 8009976:	b901      	cbnz	r1, 800997a <__ascii_mbtowc+0x6>
 8009978:	a901      	add	r1, sp, #4
 800997a:	b142      	cbz	r2, 800998e <__ascii_mbtowc+0x1a>
 800997c:	b14b      	cbz	r3, 8009992 <__ascii_mbtowc+0x1e>
 800997e:	7813      	ldrb	r3, [r2, #0]
 8009980:	600b      	str	r3, [r1, #0]
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	1e10      	subs	r0, r2, #0
 8009986:	bf18      	it	ne
 8009988:	2001      	movne	r0, #1
 800998a:	b002      	add	sp, #8
 800998c:	4770      	bx	lr
 800998e:	4610      	mov	r0, r2
 8009990:	e7fb      	b.n	800998a <__ascii_mbtowc+0x16>
 8009992:	f06f 0001 	mvn.w	r0, #1
 8009996:	e7f8      	b.n	800998a <__ascii_mbtowc+0x16>

08009998 <__ascii_wctomb>:
 8009998:	4603      	mov	r3, r0
 800999a:	4608      	mov	r0, r1
 800999c:	b141      	cbz	r1, 80099b0 <__ascii_wctomb+0x18>
 800999e:	2aff      	cmp	r2, #255	@ 0xff
 80099a0:	d904      	bls.n	80099ac <__ascii_wctomb+0x14>
 80099a2:	228a      	movs	r2, #138	@ 0x8a
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099aa:	4770      	bx	lr
 80099ac:	700a      	strb	r2, [r1, #0]
 80099ae:	2001      	movs	r0, #1
 80099b0:	4770      	bx	lr
	...

080099b4 <fiprintf>:
 80099b4:	b40e      	push	{r1, r2, r3}
 80099b6:	b503      	push	{r0, r1, lr}
 80099b8:	4601      	mov	r1, r0
 80099ba:	ab03      	add	r3, sp, #12
 80099bc:	4805      	ldr	r0, [pc, #20]	@ (80099d4 <fiprintf+0x20>)
 80099be:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c2:	6800      	ldr	r0, [r0, #0]
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	f7ff fd4b 	bl	8009460 <_vfiprintf_r>
 80099ca:	b002      	add	sp, #8
 80099cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d0:	b003      	add	sp, #12
 80099d2:	4770      	bx	lr
 80099d4:	20000020 	.word	0x20000020

080099d8 <abort>:
 80099d8:	b508      	push	{r3, lr}
 80099da:	2006      	movs	r0, #6
 80099dc:	f000 f82c 	bl	8009a38 <raise>
 80099e0:	2001      	movs	r0, #1
 80099e2:	f7f7 fe4d 	bl	8001680 <_exit>

080099e6 <_raise_r>:
 80099e6:	291f      	cmp	r1, #31
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	d904      	bls.n	80099fa <_raise_r+0x14>
 80099f0:	2316      	movs	r3, #22
 80099f2:	6003      	str	r3, [r0, #0]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099fc:	b112      	cbz	r2, 8009a04 <_raise_r+0x1e>
 80099fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a02:	b94b      	cbnz	r3, 8009a18 <_raise_r+0x32>
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 f831 	bl	8009a6c <_getpid_r>
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	4628      	mov	r0, r5
 8009a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a14:	f000 b818 	b.w	8009a48 <_kill_r>
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d00a      	beq.n	8009a32 <_raise_r+0x4c>
 8009a1c:	1c59      	adds	r1, r3, #1
 8009a1e:	d103      	bne.n	8009a28 <_raise_r+0x42>
 8009a20:	2316      	movs	r3, #22
 8009a22:	6003      	str	r3, [r0, #0]
 8009a24:	2001      	movs	r0, #1
 8009a26:	e7e7      	b.n	80099f8 <_raise_r+0x12>
 8009a28:	2100      	movs	r1, #0
 8009a2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4798      	blx	r3
 8009a32:	2000      	movs	r0, #0
 8009a34:	e7e0      	b.n	80099f8 <_raise_r+0x12>
	...

08009a38 <raise>:
 8009a38:	4b02      	ldr	r3, [pc, #8]	@ (8009a44 <raise+0xc>)
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	f7ff bfd2 	b.w	80099e6 <_raise_r>
 8009a42:	bf00      	nop
 8009a44:	20000020 	.word	0x20000020

08009a48 <_kill_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d07      	ldr	r5, [pc, #28]	@ (8009a68 <_kill_r+0x20>)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f7f7 fe0b 	bl	8001670 <_kill>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	d102      	bne.n	8009a64 <_kill_r+0x1c>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	b103      	cbz	r3, 8009a64 <_kill_r+0x1c>
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	bd38      	pop	{r3, r4, r5, pc}
 8009a66:	bf00      	nop
 8009a68:	20001328 	.word	0x20001328

08009a6c <_getpid_r>:
 8009a6c:	f7f7 bdfe 	b.w	800166c <_getpid>

08009a70 <_init>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	bf00      	nop
 8009a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a76:	bc08      	pop	{r3}
 8009a78:	469e      	mov	lr, r3
 8009a7a:	4770      	bx	lr

08009a7c <_fini>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	bf00      	nop
 8009a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a82:	bc08      	pop	{r3}
 8009a84:	469e      	mov	lr, r3
 8009a86:	4770      	bx	lr
