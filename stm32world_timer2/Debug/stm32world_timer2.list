
stm32world_timer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080026b0  080026b0  000036b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e8  080026e8  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  080026e8  080026e8  000036e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026f0  080026f0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000036f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026f4  080026f4  000036f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080026f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f050  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c28  00000000  00000000  000130e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00008055  00000000  00000000  00014d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c08  00000000  00000000  0001cd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000936  00000000  00000000  0001d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd28  00000000  00000000  0001e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011a5a  00000000  00000000  0003dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1dce  00000000  00000000  0004fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001117f6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000261c  00000000  00000000  0011183c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  00113e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002698 	.word	0x08002698

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002698 	.word	0x08002698

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b084      	sub	sp, #16
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	2200      	movs	r2, #0
 80004bc:	9201      	str	r2, [sp, #4]
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80004c2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80004c6:	6319      	str	r1, [r3, #48]	@ 0x30
 80004c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80004ca:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80004ce:	9101      	str	r1, [sp, #4]
 80004d0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	9202      	str	r2, [sp, #8]
 80004d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80004d6:	f041 0101 	orr.w	r1, r1, #1
 80004da:	6319      	str	r1, [r3, #48]	@ 0x30
 80004dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80004de:	f001 0101 	and.w	r1, r1, #1
 80004e2:	9102      	str	r1, [sp, #8]
 80004e4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	9203      	str	r2, [sp, #12]
 80004e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ea:	f042 0202 	orr.w	r2, r2, #2
 80004ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	9303      	str	r3, [sp, #12]
 80004f8:	9b03      	ldr	r3, [sp, #12]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	b004      	add	sp, #16
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <_write>:
    if (fd == 1 || fd == 2) {
 8000504:	3801      	subs	r0, #1
 8000506:	2801      	cmp	r0, #1
 8000508:	d80a      	bhi.n	8000520 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800050a:	b510      	push	{r4, lr}
 800050c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800050e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000512:	b292      	uxth	r2, r2
 8000514:	4805      	ldr	r0, [pc, #20]	@ (800052c <_write+0x28>)
 8000516:	f001 fbac 	bl	8001c72 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800051a:	b920      	cbnz	r0, 8000526 <_write+0x22>
            return len;
 800051c:	4620      	mov	r0, r4
}
 800051e:	bd10      	pop	{r4, pc}
    return -1;
 8000520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000524:	4770      	bx	lr
            return -1;
 8000526:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800052a:	e7f8      	b.n	800051e <_write+0x1a>
 800052c:	20000084 	.word	0x20000084

08000530 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000532:	e7fe      	b.n	8000532 <Error_Handler+0x2>

08000534 <MX_USART1_UART_Init>:
{
 8000534:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000536:	480a      	ldr	r0, [pc, #40]	@ (8000560 <MX_USART1_UART_Init+0x2c>)
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <MX_USART1_UART_Init+0x30>)
 800053a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800053c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000540:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	2300      	movs	r3, #0
 8000544:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000546:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000548:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800054a:	220c      	movs	r2, #12
 800054c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000552:	f001 fb5e 	bl	8001c12 <HAL_UART_Init>
 8000556:	b900      	cbnz	r0, 800055a <MX_USART1_UART_Init+0x26>
}
 8000558:	bd08      	pop	{r3, pc}
    Error_Handler();
 800055a:	f7ff ffe9 	bl	8000530 <Error_Handler>
 800055e:	bf00      	nop
 8000560:	20000084 	.word	0x20000084
 8000564:	40011000 	.word	0x40011000

08000568 <MX_TIM4_Init>:
{
 8000568:	b500      	push	{lr}
 800056a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056c:	2300      	movs	r3, #0
 800056e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000572:	930c      	str	r3, [sp, #48]	@ 0x30
 8000574:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000576:	9308      	str	r3, [sp, #32]
 8000578:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	9303      	str	r3, [sp, #12]
 8000580:	9304      	str	r3, [sp, #16]
 8000582:	9305      	str	r3, [sp, #20]
 8000584:	9306      	str	r3, [sp, #24]
 8000586:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000588:	481f      	ldr	r0, [pc, #124]	@ (8000608 <MX_TIM4_Init+0xa0>)
 800058a:	4a20      	ldr	r2, [pc, #128]	@ (800060c <MX_TIM4_Init+0xa4>)
 800058c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 59999;
 800058e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000592:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000594:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1399;
 8000596:	f240 5277 	movw	r2, #1399	@ 0x577
 800059a:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005a0:	f000 ffdc 	bl	800155c <HAL_TIM_Base_Init>
 80005a4:	bb30      	cbnz	r0, 80005f4 <MX_TIM4_Init+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005aa:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80005ac:	a90a      	add	r1, sp, #40	@ 0x28
 80005ae:	4816      	ldr	r0, [pc, #88]	@ (8000608 <MX_TIM4_Init+0xa0>)
 80005b0:	f001 f8df 	bl	8001772 <HAL_TIM_ConfigClockSource>
 80005b4:	bb00      	cbnz	r0, 80005f8 <MX_TIM4_Init+0x90>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80005b6:	4814      	ldr	r0, [pc, #80]	@ (8000608 <MX_TIM4_Init+0xa0>)
 80005b8:	f000 fffc 	bl	80015b4 <HAL_TIM_PWM_Init>
 80005bc:	b9f0      	cbnz	r0, 80005fc <MX_TIM4_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005be:	2300      	movs	r3, #0
 80005c0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005c4:	a908      	add	r1, sp, #32
 80005c6:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_TIM4_Init+0xa0>)
 80005c8:	f001 f9e4 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	b9c0      	cbnz	r0, 8000600 <MX_TIM4_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ce:	2360      	movs	r3, #96	@ 0x60
 80005d0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 1000;
 80005d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d6:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d8:	2200      	movs	r2, #0
 80005da:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005dc:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005de:	a901      	add	r1, sp, #4
 80005e0:	4809      	ldr	r0, [pc, #36]	@ (8000608 <MX_TIM4_Init+0xa0>)
 80005e2:	f001 f84b 	bl	800167c <HAL_TIM_PWM_ConfigChannel>
 80005e6:	b968      	cbnz	r0, 8000604 <MX_TIM4_Init+0x9c>
  HAL_TIM_MspPostInit(&htim4);
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_TIM4_Init+0xa0>)
 80005ea:	f000 f8b1 	bl	8000750 <HAL_TIM_MspPostInit>
}
 80005ee:	b00f      	add	sp, #60	@ 0x3c
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005f4:	f7ff ff9c 	bl	8000530 <Error_Handler>
    Error_Handler();
 80005f8:	f7ff ff9a 	bl	8000530 <Error_Handler>
    Error_Handler();
 80005fc:	f7ff ff98 	bl	8000530 <Error_Handler>
    Error_Handler();
 8000600:	f7ff ff96 	bl	8000530 <Error_Handler>
    Error_Handler();
 8000604:	f7ff ff94 	bl	8000530 <Error_Handler>
 8000608:	200000cc 	.word	0x200000cc
 800060c:	40000800 	.word	0x40000800

08000610 <SystemClock_Config>:
{
 8000610:	b500      	push	{lr}
 8000612:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000614:	2230      	movs	r2, #48	@ 0x30
 8000616:	2100      	movs	r1, #0
 8000618:	a808      	add	r0, sp, #32
 800061a:	f001 fd89 	bl	8002130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	2300      	movs	r3, #0
 8000620:	9303      	str	r3, [sp, #12]
 8000622:	9304      	str	r3, [sp, #16]
 8000624:	9305      	str	r3, [sp, #20]
 8000626:	9306      	str	r3, [sp, #24]
 8000628:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4a20      	ldr	r2, [pc, #128]	@ (80006b0 <SystemClock_Config+0xa0>)
 800062e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000630:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000634:	6411      	str	r1, [r2, #64]	@ 0x40
 8000636:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000638:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <SystemClock_Config+0xa4>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000656:	2301      	movs	r3, #1
 8000658:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000664:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000668:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066a:	2208      	movs	r2, #8
 800066c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066e:	22a8      	movs	r2, #168	@ 0xa8
 8000670:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	a808      	add	r0, sp, #32
 800067a:	f000 fb01 	bl	8000c80 <HAL_RCC_OscConfig>
 800067e:	b998      	cbnz	r0, 80006a8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000690:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	2105      	movs	r1, #5
 800069a:	a803      	add	r0, sp, #12
 800069c:	f000 fd54 	bl	8001148 <HAL_RCC_ClockConfig>
 80006a0:	b920      	cbnz	r0, 80006ac <SystemClock_Config+0x9c>
}
 80006a2:	b015      	add	sp, #84	@ 0x54
 80006a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006a8:	f7ff ff42 	bl	8000530 <Error_Handler>
    Error_Handler();
 80006ac:	f7ff ff40 	bl	8000530 <Error_Handler>
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <main>:
{
 80006b8:	b508      	push	{r3, lr}
  HAL_Init();
 80006ba:	f000 f955 	bl	8000968 <HAL_Init>
  SystemClock_Config();
 80006be:	f7ff ffa7 	bl	8000610 <SystemClock_Config>
  MX_GPIO_Init();
 80006c2:	f7ff fef9 	bl	80004b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c6:	f7ff ff35 	bl	8000534 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80006ca:	f7ff ff4d 	bl	8000568 <MX_TIM4_Init>
  printf("\n\n\n\nStarting stm32world_timer2\n");
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <main+0x28>)
 80006d0:	f001 fc4e 	bl	8001f70 <puts>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006d4:	2100      	movs	r1, #0
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <main+0x2c>)
 80006d8:	f001 f8da 	bl	8001890 <HAL_TIM_PWM_Start>
  while (1) {
 80006dc:	e7fe      	b.n	80006dc <main+0x24>
 80006de:	bf00      	nop
 80006e0:	080026b0 	.word	0x080026b0
 80006e4:	200000cc 	.word	0x200000cc

080006e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2100      	movs	r1, #0
 80006ec:	9100      	str	r1, [sp, #0]
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <HAL_MspInit+0x34>)
 80006f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80006f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80006f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80006fa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	9101      	str	r1, [sp, #4]
 8000704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000706:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800070a:	641a      	str	r2, [r3, #64]	@ 0x40
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	b002      	add	sp, #8
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8000720:	6802      	ldr	r2, [r0, #0]
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_TIM_Base_MspInit+0x28>)
 8000724:	429a      	cmp	r2, r3
 8000726:	d000      	beq.n	800072a <HAL_TIM_Base_MspInit+0xa>
 8000728:	4770      	bx	lr
{
 800072a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_TIM_Base_MspInit+0x2c>)
 8000732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000734:	f042 0204 	orr.w	r2, r2, #4
 8000738:	641a      	str	r2, [r3, #64]	@ 0x40
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000744:	b002      	add	sp, #8
 8000746:	4770      	bx	lr
 8000748:	40000800 	.word	0x40000800
 800074c:	40023800 	.word	0x40023800

08000750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000750:	b500      	push	{lr}
 8000752:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	2300      	movs	r3, #0
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	9303      	str	r3, [sp, #12]
 800075c:	9304      	str	r3, [sp, #16]
 800075e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8000760:	6802      	ldr	r2, [r0, #0]
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <HAL_TIM_MspPostInit+0x4c>)
 8000764:	429a      	cmp	r2, r3
 8000766:	d002      	beq.n	800076e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000768:	b007      	add	sp, #28
 800076a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <HAL_TIM_MspPostInit+0x50>)
 8000774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000776:	f042 0202 	orr.w	r2, r2, #2
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800078e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	a901      	add	r1, sp, #4
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <HAL_TIM_MspPostInit+0x54>)
 8000794:	f000 f97e 	bl	8000a94 <HAL_GPIO_Init>
}
 8000798:	e7e6      	b.n	8000768 <HAL_TIM_MspPostInit+0x18>
 800079a:	bf00      	nop
 800079c:	40000800 	.word	0x40000800
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b500      	push	{lr}
 80007aa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2300      	movs	r3, #0
 80007ae:	9303      	str	r3, [sp, #12]
 80007b0:	9304      	str	r3, [sp, #16]
 80007b2:	9305      	str	r3, [sp, #20]
 80007b4:	9306      	str	r3, [sp, #24]
 80007b6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80007b8:	6802      	ldr	r2, [r0, #0]
 80007ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80007be:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d002      	beq.n	80007cc <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80007c6:	b009      	add	sp, #36	@ 0x24
 80007c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	2100      	movs	r1, #0
 80007ce:	9101      	str	r1, [sp, #4]
 80007d0:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80007d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007d6:	f042 0210 	orr.w	r2, r2, #16
 80007da:	645a      	str	r2, [r3, #68]	@ 0x44
 80007dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007de:	f002 0210 	and.w	r2, r2, #16
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	9102      	str	r1, [sp, #8]
 80007e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000808:	2307      	movs	r3, #7
 800080a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	a903      	add	r1, sp, #12
 800080e:	4802      	ldr	r0, [pc, #8]	@ (8000818 <HAL_UART_MspInit+0x70>)
 8000810:	f000 f940 	bl	8000a94 <HAL_GPIO_Init>
}
 8000814:	e7d7      	b.n	80007c6 <HAL_UART_MspInit+0x1e>
 8000816:	bf00      	nop
 8000818:	40020000 	.word	0x40020000

0800081c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler>

0800081e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler>

08000820 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler>

08000822 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler>

08000824 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler>

08000826 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f8b5 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bd08      	pop	{r3, pc}

08000834 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	460c      	mov	r4, r1
 8000838:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	2500      	movs	r5, #0
 800083c:	e006      	b.n	800084c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4621      	mov	r1, r4
 8000844:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800084a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084c:	42b5      	cmp	r5, r6
 800084e:	dbf6      	blt.n	800083e <_read+0xa>
  }

  return len;
}
 8000850:	4630      	mov	r0, r6
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000858:	4770      	bx	lr

0800085a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800085a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000860:	2000      	movs	r0, #0
 8000862:	4770      	bx	lr

08000864 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000864:	2001      	movs	r0, #1
 8000866:	4770      	bx	lr

08000868 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000868:	2000      	movs	r0, #0
 800086a:	4770      	bx	lr

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b510      	push	{r4, lr}
 800086e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <_sbrk+0x38>)
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <_sbrk+0x40>)
 8000876:	6800      	ldr	r0, [r0, #0]
 8000878:	b140      	cbz	r0, 800088c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <_sbrk+0x40>)
 800087c:	6800      	ldr	r0, [r0, #0]
 800087e:	4403      	add	r3, r0
 8000880:	1a52      	subs	r2, r2, r1
 8000882:	4293      	cmp	r3, r2
 8000884:	d806      	bhi.n	8000894 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <_sbrk+0x40>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800088a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <_sbrk+0x40>)
 800088e:	4c08      	ldr	r4, [pc, #32]	@ (80008b0 <_sbrk+0x44>)
 8000890:	6004      	str	r4, [r0, #0]
 8000892:	e7f2      	b.n	800087a <_sbrk+0xe>
    errno = ENOMEM;
 8000894:	f001 fc9a 	bl	80021cc <__errno>
 8000898:	230c      	movs	r3, #12
 800089a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800089c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a0:	e7f3      	b.n	800088a <_sbrk+0x1e>
 80008a2:	bf00      	nop
 80008a4:	20020000 	.word	0x20020000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	20000114 	.word	0x20000114
 80008b0:	20000268 	.word	0x20000268

080008b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4a03      	ldr	r2, [pc, #12]	@ (80008c4 <SystemInit+0x10>)
 80008b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80008ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008cc:	f7ff fff2 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	@ (8000908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f001 fc6f 	bl	80021d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fedd 	bl	80006b8 <main>
  bx  lr    
 80008fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800090c:	080026f8 	.word	0x080026f8
  ldr r2, =_sbss
 8000910:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000914:	20000268 	.word	0x20000268

08000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b510      	push	{r4, lr}
 800091e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_InitTick+0x40>)
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000928:	fbb3 f3f2 	udiv	r3, r3, r2
 800092c:	4a0c      	ldr	r2, [pc, #48]	@ (8000960 <HAL_InitTick+0x44>)
 800092e:	6810      	ldr	r0, [r2, #0]
 8000930:	fbb0 f0f3 	udiv	r0, r0, r3
 8000934:	f000 f89a 	bl	8000a6c <HAL_SYSTICK_Config>
 8000938:	b968      	cbnz	r0, 8000956 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	2c0f      	cmp	r4, #15
 800093c:	d901      	bls.n	8000942 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e00a      	b.n	8000958 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000942:	2200      	movs	r2, #0
 8000944:	4621      	mov	r1, r4
 8000946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800094a:	f000 f87f 	bl	8000a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_InitTick+0x48>)
 8000950:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2000      	movs	r0, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000956:	2001      	movs	r0, #1
}
 8000958:	bd10      	pop	{r4, pc}
 800095a:	bf00      	nop
 800095c:	20000004 	.word	0x20000004
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_Init>:
{
 8000968:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_Init+0x30>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000972:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800097a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000982:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f84f 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f7ff ffc6 	bl	800091c <HAL_InitTick>
  HAL_MspInit();
 8000990:	f7ff feaa 	bl	80006e8 <HAL_MspInit>
}
 8000994:	2000      	movs	r0, #0
 8000996:	bd08      	pop	{r3, pc}
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800099c:	4a03      	ldr	r2, [pc, #12]	@ (80009ac <HAL_IncTick+0x10>)
 800099e:	6811      	ldr	r1, [r2, #0]
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_IncTick+0x14>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	440b      	add	r3, r1
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000118 	.word	0x20000118
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b4:	4b01      	ldr	r3, [pc, #4]	@ (80009bc <HAL_GetTick+0x8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000118 	.word	0x20000118

080009c0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80009c0:	2800      	cmp	r0, #0
 80009c2:	db08      	blt.n	80009d6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	0109      	lsls	r1, r1, #4
 80009c6:	b2c9      	uxtb	r1, r1
 80009c8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80009cc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80009d0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80009d4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	f000 000f 	and.w	r0, r0, #15
 80009da:	0109      	lsls	r1, r1, #4
 80009dc:	b2c9      	uxtb	r1, r1
 80009de:	4b01      	ldr	r3, [pc, #4]	@ (80009e4 <__NVIC_SetPriority+0x24>)
 80009e0:	5419      	strb	r1, [r3, r0]
  }
}
 80009e2:	4770      	bx	lr
 80009e4:	e000ed14 	.word	0xe000ed14

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ea:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ee:	f1c0 0c07 	rsb	ip, r0, #7
 80009f2:	f1bc 0f04 	cmp.w	ip, #4
 80009f6:	bf28      	it	cs
 80009f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fc:	1d03      	adds	r3, r0, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d90f      	bls.n	8000a22 <NVIC_EncodePriority+0x3a>
 8000a02:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000a08:	fa0e f00c 	lsl.w	r0, lr, ip
 8000a0c:	ea21 0100 	bic.w	r1, r1, r0
 8000a10:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a12:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a16:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000a1a:	ea41 0002 	orr.w	r0, r1, r2
 8000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	2300      	movs	r3, #0
 8000a24:	e7ee      	b.n	8000a04 <NVIC_EncodePriority+0x1c>
	...

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	0200      	lsls	r0, r0, #8
 8000a36:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a44:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_NVIC_SetPriority+0x1c>)
 8000a52:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a54:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000a58:	f7ff ffc6 	bl	80009e8 <NVIC_EncodePriority>
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff ffae 	bl	80009c0 <__NVIC_SetPriority>
}
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a72:	d20b      	bcs.n	8000a8c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000a78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <HAL_SYSTICK_Config+0x24>)
 8000a7c:	21f0      	movs	r1, #240	@ 0xf0
 8000a7e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a82:	2000      	movs	r0, #0
 8000a84:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	2207      	movs	r2, #7
 8000a88:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a8c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f200 80e9 	bhi.w	8000c6e <HAL_GPIO_Init+0x1da>
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	e065      	b.n	8000b6e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aa2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000aa8:	2403      	movs	r4, #3
 8000aaa:	fa04 f40e 	lsl.w	r4, r4, lr
 8000aae:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ab2:	68cc      	ldr	r4, [r1, #12]
 8000ab4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ab8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000aba:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000abe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac2:	684a      	ldr	r2, [r1, #4]
 8000ac4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000acc:	6042      	str	r2, [r0, #4]
 8000ace:	e05c      	b.n	8000b8a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ad0:	08dc      	lsrs	r4, r3, #3
 8000ad2:	3408      	adds	r4, #8
 8000ad4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad8:	f003 0507 	and.w	r5, r3, #7
 8000adc:	00ad      	lsls	r5, r5, #2
 8000ade:	f04f 0e0f 	mov.w	lr, #15
 8000ae2:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ae6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aea:	690a      	ldr	r2, [r1, #16]
 8000aec:	40aa      	lsls	r2, r5
 8000aee:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000af2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000af6:	e05c      	b.n	8000bb2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af8:	2207      	movs	r2, #7
 8000afa:	e000      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000afc:	2200      	movs	r2, #0
 8000afe:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b02:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b04:	3402      	adds	r4, #2
 8000b06:	4d5a      	ldr	r5, [pc, #360]	@ (8000c70 <HAL_GPIO_Init+0x1dc>)
 8000b08:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0c:	4a59      	ldr	r2, [pc, #356]	@ (8000c74 <HAL_GPIO_Init+0x1e0>)
 8000b0e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b10:	ea6f 020c 	mvn.w	r2, ip
 8000b14:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b18:	684e      	ldr	r6, [r1, #4]
 8000b1a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000b1e:	d001      	beq.n	8000b24 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000b20:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000b24:	4c53      	ldr	r4, [pc, #332]	@ (8000c74 <HAL_GPIO_Init+0x1e0>)
 8000b26:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000b28:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b2a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b2e:	684e      	ldr	r6, [r1, #4]
 8000b30:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000b34:	d001      	beq.n	8000b3a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000b36:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000b3a:	4c4e      	ldr	r4, [pc, #312]	@ (8000c74 <HAL_GPIO_Init+0x1e0>)
 8000b3c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000b3e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b40:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b44:	684e      	ldr	r6, [r1, #4]
 8000b46:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000b4a:	d001      	beq.n	8000b50 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000b4c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000b50:	4c48      	ldr	r4, [pc, #288]	@ (8000c74 <HAL_GPIO_Init+0x1e0>)
 8000b52:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b54:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b56:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b58:	684d      	ldr	r5, [r1, #4]
 8000b5a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000b5e:	d001      	beq.n	8000b64 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000b60:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000b64:	4c43      	ldr	r4, [pc, #268]	@ (8000c74 <HAL_GPIO_Init+0x1e0>)
 8000b66:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b68:	3301      	adds	r3, #1
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d87d      	bhi.n	8000c6a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	680c      	ldr	r4, [r1, #0]
 8000b74:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000b78:	ea32 0404 	bics.w	r4, r2, r4
 8000b7c:	d1f4      	bne.n	8000b68 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	684c      	ldr	r4, [r1, #4]
 8000b80:	f004 0403 	and.w	r4, r4, #3
 8000b84:	3c01      	subs	r4, #1
 8000b86:	2c01      	cmp	r4, #1
 8000b88:	d98b      	bls.n	8000aa2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8a:	684a      	ldr	r2, [r1, #4]
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	2a03      	cmp	r2, #3
 8000b92:	d009      	beq.n	8000ba8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000b94:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b96:	005d      	lsls	r5, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	40aa      	lsls	r2, r5
 8000b9c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba0:	688a      	ldr	r2, [r1, #8]
 8000ba2:	40aa      	lsls	r2, r5
 8000ba4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000ba6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba8:	684a      	ldr	r2, [r1, #4]
 8000baa:	f002 0203 	and.w	r2, r2, #3
 8000bae:	2a02      	cmp	r2, #2
 8000bb0:	d08e      	beq.n	8000ad0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000bb2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bbe:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bc2:	684a      	ldr	r2, [r1, #4]
 8000bc4:	f002 0203 	and.w	r2, r2, #3
 8000bc8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bcc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000bce:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bd0:	684a      	ldr	r2, [r1, #4]
 8000bd2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000bd6:	d0c7      	beq.n	8000b68 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	2200      	movs	r2, #0
 8000bda:	9201      	str	r2, [sp, #4]
 8000bdc:	4a26      	ldr	r2, [pc, #152]	@ (8000c78 <HAL_GPIO_Init+0x1e4>)
 8000bde:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000be0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000be4:	6454      	str	r4, [r2, #68]	@ 0x44
 8000be6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000be8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000bec:	9201      	str	r2, [sp, #4]
 8000bee:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf0:	089c      	lsrs	r4, r3, #2
 8000bf2:	1ca5      	adds	r5, r4, #2
 8000bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c70 <HAL_GPIO_Init+0x1dc>)
 8000bf6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bfa:	f003 0e03 	and.w	lr, r3, #3
 8000bfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c08:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <HAL_GPIO_Init+0x1e8>)
 8000c0e:	4290      	cmp	r0, r2
 8000c10:	f43f af74 	beq.w	8000afc <HAL_GPIO_Init+0x68>
 8000c14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	d01a      	beq.n	8000c52 <HAL_GPIO_Init+0x1be>
 8000c1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d018      	beq.n	8000c56 <HAL_GPIO_Init+0x1c2>
 8000c24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	d016      	beq.n	8000c5a <HAL_GPIO_Init+0x1c6>
 8000c2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d014      	beq.n	8000c5e <HAL_GPIO_Init+0x1ca>
 8000c34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	d012      	beq.n	8000c62 <HAL_GPIO_Init+0x1ce>
 8000c3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d010      	beq.n	8000c66 <HAL_GPIO_Init+0x1d2>
 8000c44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f43f af55 	beq.w	8000af8 <HAL_GPIO_Init+0x64>
 8000c4e:	2208      	movs	r2, #8
 8000c50:	e755      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c52:	2201      	movs	r2, #1
 8000c54:	e753      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c56:	2202      	movs	r2, #2
 8000c58:	e751      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	e74f      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c5e:	2204      	movs	r2, #4
 8000c60:	e74d      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c62:	2205      	movs	r2, #5
 8000c64:	e74b      	b.n	8000afe <HAL_GPIO_Init+0x6a>
 8000c66:	2206      	movs	r2, #6
 8000c68:	e749      	b.n	8000afe <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd70      	pop	{r4, r5, r6, pc}
 8000c6e:	4770      	bx	lr
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40013c00 	.word	0x40013c00
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c80:	2800      	cmp	r0, #0
 8000c82:	f000 81e0 	beq.w	8001046 <HAL_RCC_OscConfig+0x3c6>
{
 8000c86:	b570      	push	{r4, r5, r6, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8c:	6803      	ldr	r3, [r0, #0]
 8000c8e:	f013 0f01 	tst.w	r3, #1
 8000c92:	d03b      	beq.n	8000d0c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c94:	4b9f      	ldr	r3, [pc, #636]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d02c      	beq.n	8000cfa <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca0:	4b9c      	ldr	r3, [pc, #624]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d021      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cac:	6863      	ldr	r3, [r4, #4]
 8000cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb2:	d04f      	beq.n	8000d54 <HAL_RCC_OscConfig+0xd4>
 8000cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cb8:	d052      	beq.n	8000d60 <HAL_RCC_OscConfig+0xe0>
 8000cba:	4b96      	ldr	r3, [pc, #600]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000cca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d050      	beq.n	8000d74 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fe6f 	bl	80009b4 <HAL_GetTick>
 8000cd6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	4b8e      	ldr	r3, [pc, #568]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ce0:	d114      	bne.n	8000d0c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fe67 	bl	80009b4 <HAL_GetTick>
 8000ce6:	1b40      	subs	r0, r0, r5
 8000ce8:	2864      	cmp	r0, #100	@ 0x64
 8000cea:	d9f5      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
 8000cee:	e1b1      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cf0:	4b88      	ldr	r3, [pc, #544]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000cf8:	d0d8      	beq.n	8000cac <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfa:	4b86      	ldr	r3, [pc, #536]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d02:	d003      	beq.n	8000d0c <HAL_RCC_OscConfig+0x8c>
 8000d04:	6863      	ldr	r3, [r4, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 819f 	beq.w	800104a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	f013 0f02 	tst.w	r3, #2
 8000d12:	d054      	beq.n	8000dbe <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d14:	4b7f      	ldr	r3, [pc, #508]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f013 0f0c 	tst.w	r3, #12
 8000d1c:	d03e      	beq.n	8000d9c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d033      	beq.n	8000d92 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d2a:	68e3      	ldr	r3, [r4, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d068      	beq.n	8000e02 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d30:	4b79      	ldr	r3, [pc, #484]	@ (8000f18 <HAL_RCC_OscConfig+0x298>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d36:	f7ff fe3d 	bl	80009b4 <HAL_GetTick>
 8000d3a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4b75      	ldr	r3, [pc, #468]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f013 0f02 	tst.w	r3, #2
 8000d44:	d154      	bne.n	8000df0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d46:	f7ff fe35 	bl	80009b4 <HAL_GetTick>
 8000d4a:	1b40      	subs	r0, r0, r5
 8000d4c:	2802      	cmp	r0, #2
 8000d4e:	d9f5      	bls.n	8000d3c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d50:	2003      	movs	r0, #3
 8000d52:	e17f      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d54:	4a6f      	ldr	r2, [pc, #444]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e7b5      	b.n	8000ccc <HAL_RCC_OscConfig+0x4c>
 8000d60:	4b6c      	ldr	r3, [pc, #432]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e7ab      	b.n	8000ccc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000d74:	f7ff fe1e 	bl	80009b4 <HAL_GetTick>
 8000d78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	4b66      	ldr	r3, [pc, #408]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d82:	d0c3      	beq.n	8000d0c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fe16 	bl	80009b4 <HAL_GetTick>
 8000d88:	1b40      	subs	r0, r0, r5
 8000d8a:	2864      	cmp	r0, #100	@ 0x64
 8000d8c:	d9f5      	bls.n	8000d7a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000d8e:	2003      	movs	r0, #3
 8000d90:	e160      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d92:	4b60      	ldr	r3, [pc, #384]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000d9a:	d1c6      	bne.n	8000d2a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f013 0f02 	tst.w	r3, #2
 8000da4:	d003      	beq.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000da6:	68e3      	ldr	r3, [r4, #12]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	f040 8150 	bne.w	800104e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dae:	4a59      	ldr	r2, [pc, #356]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000db6:	6921      	ldr	r1, [r4, #16]
 8000db8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dbc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	f013 0f08 	tst.w	r3, #8
 8000dc4:	d042      	beq.n	8000e4c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dc6:	6963      	ldr	r3, [r4, #20]
 8000dc8:	b36b      	cbz	r3, 8000e26 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dca:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <HAL_RCC_OscConfig+0x298>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fdef 	bl	80009b4 <HAL_GetTick>
 8000dd6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ddc:	f013 0f02 	tst.w	r3, #2
 8000de0:	d134      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de2:	f7ff fde7 	bl	80009b4 <HAL_GetTick>
 8000de6:	1b40      	subs	r0, r0, r5
 8000de8:	2802      	cmp	r0, #2
 8000dea:	d9f5      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000dec:	2003      	movs	r0, #3
 8000dee:	e131      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4a48      	ldr	r2, [pc, #288]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000df2:	6813      	ldr	r3, [r2, #0]
 8000df4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000df8:	6921      	ldr	r1, [r4, #16]
 8000dfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e7dd      	b.n	8000dbe <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000e02:	4b45      	ldr	r3, [pc, #276]	@ (8000f18 <HAL_RCC_OscConfig+0x298>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e08:	f7ff fdd4 	bl	80009b4 <HAL_GetTick>
 8000e0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f013 0f02 	tst.w	r3, #2
 8000e16:	d0d2      	beq.n	8000dbe <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e18:	f7ff fdcc 	bl	80009b4 <HAL_GetTick>
 8000e1c:	1b40      	subs	r0, r0, r5
 8000e1e:	2802      	cmp	r0, #2
 8000e20:	d9f5      	bls.n	8000e0e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000e22:	2003      	movs	r0, #3
 8000e24:	e116      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <HAL_RCC_OscConfig+0x298>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fdc1 	bl	80009b4 <HAL_GetTick>
 8000e32:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e38:	f013 0f02 	tst.w	r3, #2
 8000e3c:	d006      	beq.n	8000e4c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fdb9 	bl	80009b4 <HAL_GetTick>
 8000e42:	1b40      	subs	r0, r0, r5
 8000e44:	2802      	cmp	r0, #2
 8000e46:	d9f5      	bls.n	8000e34 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000e48:	2003      	movs	r0, #3
 8000e4a:	e103      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	f013 0f04 	tst.w	r3, #4
 8000e52:	d077      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000e5c:	d133      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e76:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <HAL_RCC_OscConfig+0x29c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000e80:	d023      	beq.n	8000eca <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e82:	68a3      	ldr	r3, [r4, #8]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d034      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x272>
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d038      	beq.n	8000efe <HAL_RCC_OscConfig+0x27e>
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000e8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e98:	f022 0204 	bic.w	r2, r2, #4
 8000e9c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e9e:	68a3      	ldr	r3, [r4, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d03d      	beq.n	8000f20 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fd86 	bl	80009b4 <HAL_GetTick>
 8000ea8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eae:	f013 0f02 	tst.w	r3, #2
 8000eb2:	d146      	bne.n	8000f42 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fd7e 	bl	80009b4 <HAL_GetTick>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d9f3      	bls.n	8000eaa <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	e0c6      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	e7d6      	b.n	8000e78 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eca:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <HAL_RCC_OscConfig+0x29c>)
 8000ecc:	6813      	ldr	r3, [r2, #0]
 8000ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fd6e 	bl	80009b4 <HAL_GetTick>
 8000ed8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_RCC_OscConfig+0x29c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000ee2:	d1ce      	bne.n	8000e82 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee4:	f7ff fd66 	bl	80009b4 <HAL_GetTick>
 8000ee8:	1b80      	subs	r0, r0, r6
 8000eea:	2802      	cmp	r0, #2
 8000eec:	d9f5      	bls.n	8000eda <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000eee:	2003      	movs	r0, #3
 8000ef0:	e0b0      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef2:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000ef4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8000efc:	e7cf      	b.n	8000e9e <HAL_RCC_OscConfig+0x21e>
 8000efe:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_RCC_OscConfig+0x294>)
 8000f00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f02:	f042 0204 	orr.w	r2, r2, #4
 8000f06:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f0a:	f042 0201 	orr.w	r2, r2, #1
 8000f0e:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f10:	e7c5      	b.n	8000e9e <HAL_RCC_OscConfig+0x21e>
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	42470000 	.word	0x42470000
 8000f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fd48 	bl	80009b4 <HAL_GetTick>
 8000f24:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f26:	4b52      	ldr	r3, [pc, #328]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f2a:	f013 0f02 	tst.w	r3, #2
 8000f2e:	d008      	beq.n	8000f42 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f30:	f7ff fd40 	bl	80009b4 <HAL_GetTick>
 8000f34:	1b80      	subs	r0, r0, r6
 8000f36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f3a:	4298      	cmp	r0, r3
 8000f3c:	d9f3      	bls.n	8000f26 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
 8000f40:	e088      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f42:	b9ed      	cbnz	r5, 8000f80 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f44:	69a3      	ldr	r3, [r4, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8083 	beq.w	8001052 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f4c:	4a48      	ldr	r2, [pc, #288]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000f4e:	6892      	ldr	r2, [r2, #8]
 8000f50:	f002 020c 	and.w	r2, r2, #12
 8000f54:	2a08      	cmp	r2, #8
 8000f56:	d051      	beq.n	8000ffc <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d017      	beq.n	8000f8c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <HAL_RCC_OscConfig+0x3f4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fd27 	bl	80009b4 <HAL_GetTick>
 8000f66:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f68:	4b41      	ldr	r3, [pc, #260]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000f70:	d042      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fd1f 	bl	80009b4 <HAL_GetTick>
 8000f76:	1b00      	subs	r0, r0, r4
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9f5      	bls.n	8000f68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	e069      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f80:	4a3b      	ldr	r2, [pc, #236]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000f82:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	e7db      	b.n	8000f44 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000f8c:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <HAL_RCC_OscConfig+0x3f4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000f92:	f7ff fd0f 	bl	80009b4 <HAL_GetTick>
 8000f96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f98:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000fa0:	d006      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fd07 	bl	80009b4 <HAL_GetTick>
 8000fa6:	1b40      	subs	r0, r0, r5
 8000fa8:	2802      	cmp	r0, #2
 8000faa:	d9f5      	bls.n	8000f98 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000fac:	2003      	movs	r0, #3
 8000fae:	e051      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fb0:	69e3      	ldr	r3, [r4, #28]
 8000fb2:	6a22      	ldr	r2, [r4, #32]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000fb8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fbc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000fbe:	0852      	lsrs	r2, r2, #1
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fc6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000fc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fcc:	4a28      	ldr	r2, [pc, #160]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000fce:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <HAL_RCC_OscConfig+0x3f4>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fced 	bl	80009b4 <HAL_GetTick>
 8000fda:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fdc:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000fe4:	d106      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fce5 	bl	80009b4 <HAL_GetTick>
 8000fea:	1b00      	subs	r0, r0, r4
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f5      	bls.n	8000fdc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	e02f      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	e02d      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	e02b      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d02b      	beq.n	8001058 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_RCC_OscConfig+0x3f0>)
 8001002:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001004:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001008:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800100a:	4291      	cmp	r1, r2
 800100c:	d126      	bne.n	800105c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800100e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001012:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001014:	428a      	cmp	r2, r1
 8001016:	d123      	bne.n	8001060 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001018:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800101a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800101e:	401a      	ands	r2, r3
 8001020:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001024:	d11e      	bne.n	8001064 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001026:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800102a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800102c:	0852      	lsrs	r2, r2, #1
 800102e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001030:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001034:	d118      	bne.n	8001068 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001036:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800103a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800103c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001040:	d114      	bne.n	800106c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001042:	2000      	movs	r0, #0
 8001044:	e006      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001046:	2001      	movs	r0, #1
}
 8001048:	4770      	bx	lr
        return HAL_ERROR;
 800104a:	2001      	movs	r0, #1
 800104c:	e002      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001052:	2000      	movs	r0, #0
}
 8001054:	b002      	add	sp, #8
 8001056:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	e7fb      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
 800105e:	e7f9      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
 8001060:	2001      	movs	r0, #1
 8001062:	e7f7      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
 8001064:	2001      	movs	r0, #1
 8001066:	e7f5      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
 8001068:	2001      	movs	r0, #1
 800106a:	e7f3      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
 800106c:	2001      	movs	r0, #1
 800106e:	e7f1      	b.n	8001054 <HAL_RCC_OscConfig+0x3d4>
 8001070:	40023800 	.word	0x40023800
 8001074:	42470000 	.word	0x42470000

08001078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001078:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <HAL_RCC_GetSysClockFreq+0xc8>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d001      	beq.n	800108a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001086:	482f      	ldr	r0, [pc, #188]	@ (8001144 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001088:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800108a:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <HAL_RCC_GetSysClockFreq+0xc8>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001098:	d02c      	beq.n	80010f4 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_RCC_GetSysClockFreq+0xc8>)
 800109c:	6858      	ldr	r0, [r3, #4]
 800109e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010a2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80010a6:	ebbc 0c00 	subs.w	ip, ip, r0
 80010aa:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80010ae:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80010b2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80010b6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80010ba:	ebb1 010c 	subs.w	r1, r1, ip
 80010be:	eb63 030e 	sbc.w	r3, r3, lr
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010c8:	00c9      	lsls	r1, r1, #3
 80010ca:	eb11 0c00 	adds.w	ip, r1, r0
 80010ce:	f143 0300 	adc.w	r3, r3, #0
 80010d2:	0299      	lsls	r1, r3, #10
 80010d4:	2300      	movs	r3, #0
 80010d6:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80010da:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80010de:	f7ff f873 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010ea:	3301      	adds	r3, #1
 80010ec:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80010f2:	e7c9      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010fc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001100:	ebbc 0c00 	subs.w	ip, ip, r0
 8001104:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001108:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800110c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001110:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001114:	ebb1 010c 	subs.w	r1, r1, ip
 8001118:	eb63 030e 	sbc.w	r3, r3, lr
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001122:	00c9      	lsls	r1, r1, #3
 8001124:	eb11 0c00 	adds.w	ip, r1, r0
 8001128:	f143 0300 	adc.w	r3, r3, #0
 800112c:	0299      	lsls	r1, r3, #10
 800112e:	2300      	movs	r3, #0
 8001130:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001134:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001138:	f7ff f846 	bl	80001c8 <__aeabi_uldivmod>
 800113c:	e7d1      	b.n	80010e2 <HAL_RCC_GetSysClockFreq+0x6a>
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	00f42400 	.word	0x00f42400

08001148 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001148:	2800      	cmp	r0, #0
 800114a:	f000 809b 	beq.w	8001284 <HAL_RCC_ClockConfig+0x13c>
{
 800114e:	b570      	push	{r4, r5, r6, lr}
 8001150:	460d      	mov	r5, r1
 8001152:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b4f      	ldr	r3, [pc, #316]	@ (8001294 <HAL_RCC_ClockConfig+0x14c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	428b      	cmp	r3, r1
 800115e:	d208      	bcs.n	8001172 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001160:	b2cb      	uxtb	r3, r1
 8001162:	4a4c      	ldr	r2, [pc, #304]	@ (8001294 <HAL_RCC_ClockConfig+0x14c>)
 8001164:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	428b      	cmp	r3, r1
 800116e:	f040 808b 	bne.w	8001288 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	f013 0f02 	tst.w	r3, #2
 8001178:	d017      	beq.n	80011aa <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117a:	f013 0f04 	tst.w	r3, #4
 800117e:	d004      	beq.n	800118a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001180:	4a45      	ldr	r2, [pc, #276]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 8001182:	6893      	ldr	r3, [r2, #8]
 8001184:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001188:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	f013 0f08 	tst.w	r3, #8
 8001190:	d004      	beq.n	800119c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001192:	4a41      	ldr	r2, [pc, #260]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 8001194:	6893      	ldr	r3, [r2, #8]
 8001196:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800119a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800119c:	4a3e      	ldr	r2, [pc, #248]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 800119e:	6893      	ldr	r3, [r2, #8]
 80011a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80011a4:	68a1      	ldr	r1, [r4, #8]
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	f013 0f01 	tst.w	r3, #1
 80011b0:	d032      	beq.n	8001218 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	6863      	ldr	r3, [r4, #4]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d021      	beq.n	80011fc <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b8:	1e9a      	subs	r2, r3, #2
 80011ba:	2a01      	cmp	r2, #1
 80011bc:	d925      	bls.n	800120a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	4a36      	ldr	r2, [pc, #216]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	f012 0f02 	tst.w	r2, #2
 80011c6:	d061      	beq.n	800128c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c8:	4933      	ldr	r1, [pc, #204]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 80011ca:	688a      	ldr	r2, [r1, #8]
 80011cc:	f022 0203 	bic.w	r2, r2, #3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80011d4:	f7ff fbee 	bl	80009b4 <HAL_GetTick>
 80011d8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	6862      	ldr	r2, [r4, #4]
 80011e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011e8:	d016      	beq.n	8001218 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ea:	f7ff fbe3 	bl	80009b4 <HAL_GetTick>
 80011ee:	1b80      	subs	r0, r0, r6
 80011f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d9f0      	bls.n	80011da <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80011f8:	2003      	movs	r0, #3
 80011fa:	e042      	b.n	8001282 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001204:	d1e0      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	e03b      	b.n	8001282 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001212:	d1d9      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	e034      	b.n	8001282 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <HAL_RCC_ClockConfig+0x14c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	42ab      	cmp	r3, r5
 8001222:	d907      	bls.n	8001234 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001224:	b2ea      	uxtb	r2, r5
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_RCC_ClockConfig+0x14c>)
 8001228:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	42ab      	cmp	r3, r5
 8001232:	d12d      	bne.n	8001290 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	f013 0f04 	tst.w	r3, #4
 800123a:	d006      	beq.n	800124a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 800123e:	6893      	ldr	r3, [r2, #8]
 8001240:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001244:	68e1      	ldr	r1, [r4, #12]
 8001246:	430b      	orrs	r3, r1
 8001248:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f013 0f08 	tst.w	r3, #8
 8001250:	d007      	beq.n	8001262 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001252:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 8001254:	6893      	ldr	r3, [r2, #8]
 8001256:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800125a:	6921      	ldr	r1, [r4, #16]
 800125c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001260:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001262:	f7ff ff09 	bl	8001078 <HAL_RCC_GetSysClockFreq>
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_RCC_ClockConfig+0x150>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800126e:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_RCC_ClockConfig+0x154>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	40d8      	lsrs	r0, r3
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_RCC_ClockConfig+0x158>)
 8001276:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_RCC_ClockConfig+0x15c>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f7ff fb4e 	bl	800091c <HAL_InitTick>
  return HAL_OK;
 8001280:	2000      	movs	r0, #0
}
 8001282:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001284:	2001      	movs	r0, #1
}
 8001286:	4770      	bx	lr
      return HAL_ERROR;
 8001288:	2001      	movs	r0, #1
 800128a:	e7fa      	b.n	8001282 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	e7f8      	b.n	8001282 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001290:	2001      	movs	r0, #1
 8001292:	e7f6      	b.n	8001282 <HAL_RCC_ClockConfig+0x13a>
 8001294:	40023c00 	.word	0x40023c00
 8001298:	40023800 	.word	0x40023800
 800129c:	080026d8 	.word	0x080026d8
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012a8:	4b01      	ldr	r3, [pc, #4]	@ (80012b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012b6:	f7ff fff7 	bl	80012a8 <HAL_RCC_GetHCLKFreq>
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80012c2:	4a03      	ldr	r2, [pc, #12]	@ (80012d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
}
 80012c6:	40d8      	lsrs	r0, r3
 80012c8:	bd08      	pop	{r3, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	080026d0 	.word	0x080026d0

080012d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012d6:	f7ff ffe7 	bl	80012a8 <HAL_RCC_GetHCLKFreq>
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80012e2:	4a03      	ldr	r2, [pc, #12]	@ (80012f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
}
 80012e6:	40d8      	lsrs	r0, r3
 80012e8:	bd08      	pop	{r3, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	080026d0 	.word	0x080026d0

080012f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80012f4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012f6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012f8:	6a02      	ldr	r2, [r0, #32]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001300:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001302:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001304:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001308:	680c      	ldr	r4, [r1, #0]
 800130a:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800130e:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001312:	688b      	ldr	r3, [r1, #8]
 8001314:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001318:	4d11      	ldr	r5, [pc, #68]	@ (8001360 <TIM_OC1_SetConfig+0x6c>)
 800131a:	42a8      	cmp	r0, r5
 800131c:	d003      	beq.n	8001326 <TIM_OC1_SetConfig+0x32>
 800131e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001322:	42a8      	cmp	r0, r5
 8001324:	d105      	bne.n	8001332 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001326:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800132a:	68cd      	ldr	r5, [r1, #12]
 800132c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800132e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001332:	4d0b      	ldr	r5, [pc, #44]	@ (8001360 <TIM_OC1_SetConfig+0x6c>)
 8001334:	42a8      	cmp	r0, r5
 8001336:	d003      	beq.n	8001340 <TIM_OC1_SetConfig+0x4c>
 8001338:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800133c:	42a8      	cmp	r0, r5
 800133e:	d107      	bne.n	8001350 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001340:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001344:	694d      	ldr	r5, [r1, #20]
 8001346:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800134a:	698a      	ldr	r2, [r1, #24]
 800134c:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001350:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001352:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001354:	684a      	ldr	r2, [r1, #4]
 8001356:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001358:	6203      	str	r3, [r0, #32]
}
 800135a:	bc30      	pop	{r4, r5}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40010000 	.word	0x40010000

08001364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001364:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001366:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001368:	6a02      	ldr	r2, [r0, #32]
 800136a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800136e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001370:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001372:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001374:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001378:	680c      	ldr	r4, [r1, #0]
 800137a:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800137e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001382:	688c      	ldr	r4, [r1, #8]
 8001384:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001388:	4c11      	ldr	r4, [pc, #68]	@ (80013d0 <TIM_OC3_SetConfig+0x6c>)
 800138a:	42a0      	cmp	r0, r4
 800138c:	d003      	beq.n	8001396 <TIM_OC3_SetConfig+0x32>
 800138e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001392:	42a0      	cmp	r0, r4
 8001394:	d106      	bne.n	80013a4 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800139a:	68cc      	ldr	r4, [r1, #12]
 800139c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80013a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <TIM_OC3_SetConfig+0x6c>)
 80013a6:	42a0      	cmp	r0, r4
 80013a8:	d003      	beq.n	80013b2 <TIM_OC3_SetConfig+0x4e>
 80013aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80013ae:	42a0      	cmp	r0, r4
 80013b0:	d107      	bne.n	80013c2 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013b2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80013b6:	694c      	ldr	r4, [r1, #20]
 80013b8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013bc:	698c      	ldr	r4, [r1, #24]
 80013be:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013c2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80013c4:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80013c6:	684a      	ldr	r2, [r1, #4]
 80013c8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013ca:	6203      	str	r3, [r0, #32]
}
 80013cc:	bc30      	pop	{r4, r5}
 80013ce:	4770      	bx	lr
 80013d0:	40010000 	.word	0x40010000

080013d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80013d4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013d6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013d8:	6a02      	ldr	r2, [r0, #32]
 80013da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80013de:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013e2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80013e4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013e8:	680d      	ldr	r5, [r1, #0]
 80013ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80013ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013f2:	688d      	ldr	r5, [r1, #8]
 80013f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013f8:	4d09      	ldr	r5, [pc, #36]	@ (8001420 <TIM_OC4_SetConfig+0x4c>)
 80013fa:	42a8      	cmp	r0, r5
 80013fc:	d003      	beq.n	8001406 <TIM_OC4_SetConfig+0x32>
 80013fe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001402:	42a8      	cmp	r0, r5
 8001404:	d104      	bne.n	8001410 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001406:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800140a:	694d      	ldr	r5, [r1, #20]
 800140c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001410:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001412:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001414:	684a      	ldr	r2, [r1, #4]
 8001416:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001418:	6203      	str	r3, [r0, #32]
}
 800141a:	bc30      	pop	{r4, r5}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40010000 	.word	0x40010000

08001424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001424:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001426:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001428:	6a04      	ldr	r4, [r0, #32]
 800142a:	f024 0401 	bic.w	r4, r4, #1
 800142e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001430:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001432:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001436:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800143a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800143e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001440:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001442:	6203      	str	r3, [r0, #32]
}
 8001444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001448:	4770      	bx	lr

0800144a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800144a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800144c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800144e:	6a04      	ldr	r4, [r0, #32]
 8001450:	f024 0410 	bic.w	r4, r4, #16
 8001454:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001456:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001458:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800145c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001460:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001464:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001468:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800146a:	6203      	str	r3, [r0, #32]
}
 800146c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001470:	4770      	bx	lr

08001472 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001472:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001478:	430b      	orrs	r3, r1
 800147a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800147e:	6083      	str	r3, [r0, #8]
}
 8001480:	4770      	bx	lr

08001482 <HAL_TIM_PWM_MspInit>:
}
 8001482:	4770      	bx	lr

08001484 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001484:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001486:	4a34      	ldr	r2, [pc, #208]	@ (8001558 <TIM_Base_SetConfig+0xd4>)
 8001488:	4290      	cmp	r0, r2
 800148a:	d012      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 800148c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001490:	d00f      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 8001492:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001496:	4290      	cmp	r0, r2
 8001498:	d00b      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 800149a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800149e:	4290      	cmp	r0, r2
 80014a0:	d007      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d003      	beq.n	80014b2 <TIM_Base_SetConfig+0x2e>
 80014aa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d103      	bne.n	80014ba <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80014b6:	684a      	ldr	r2, [r1, #4]
 80014b8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014ba:	4a27      	ldr	r2, [pc, #156]	@ (8001558 <TIM_Base_SetConfig+0xd4>)
 80014bc:	4290      	cmp	r0, r2
 80014be:	d02a      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80014c4:	d027      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014c6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80014ca:	4290      	cmp	r0, r2
 80014cc:	d023      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014d2:	4290      	cmp	r0, r2
 80014d4:	d01f      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014da:	4290      	cmp	r0, r2
 80014dc:	d01b      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014de:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80014e2:	4290      	cmp	r0, r2
 80014e4:	d017      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014e6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d013      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014f2:	4290      	cmp	r0, r2
 80014f4:	d00f      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014fa:	4290      	cmp	r0, r2
 80014fc:	d00b      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 80014fe:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001502:	4290      	cmp	r0, r2
 8001504:	d007      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 8001506:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800150a:	4290      	cmp	r0, r2
 800150c:	d003      	beq.n	8001516 <TIM_Base_SetConfig+0x92>
 800150e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001512:	4290      	cmp	r0, r2
 8001514:	d103      	bne.n	800151e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800151a:	68ca      	ldr	r2, [r1, #12]
 800151c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800151e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001522:	694a      	ldr	r2, [r1, #20]
 8001524:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001526:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001528:	688b      	ldr	r3, [r1, #8]
 800152a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800152c:	680b      	ldr	r3, [r1, #0]
 800152e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <TIM_Base_SetConfig+0xd4>)
 8001532:	4298      	cmp	r0, r3
 8001534:	d003      	beq.n	800153e <TIM_Base_SetConfig+0xba>
 8001536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800153a:	4298      	cmp	r0, r3
 800153c:	d101      	bne.n	8001542 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800153e:	690b      	ldr	r3, [r1, #16]
 8001540:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001542:	2301      	movs	r3, #1
 8001544:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001546:	6903      	ldr	r3, [r0, #16]
 8001548:	f013 0f01 	tst.w	r3, #1
 800154c:	d003      	beq.n	8001556 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800154e:	6903      	ldr	r3, [r0, #16]
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6103      	str	r3, [r0, #16]
}
 8001556:	4770      	bx	lr
 8001558:	40010000 	.word	0x40010000

0800155c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800155c:	b340      	cbz	r0, 80015b0 <HAL_TIM_Base_Init+0x54>
{
 800155e:	b510      	push	{r4, lr}
 8001560:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001562:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001566:	b1f3      	cbz	r3, 80015a6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800156e:	4621      	mov	r1, r4
 8001570:	f851 0b04 	ldr.w	r0, [r1], #4
 8001574:	f7ff ff86 	bl	8001484 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001578:	2301      	movs	r3, #1
 800157a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800157e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001582:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001586:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800158a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001596:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800159a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800159e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80015a2:	2000      	movs	r0, #0
}
 80015a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80015a6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80015aa:	f7ff f8b9 	bl	8000720 <HAL_TIM_Base_MspInit>
 80015ae:	e7db      	b.n	8001568 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
}
 80015b2:	4770      	bx	lr

080015b4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80015b4:	b340      	cbz	r0, 8001608 <HAL_TIM_PWM_Init+0x54>
{
 80015b6:	b510      	push	{r4, lr}
 80015b8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80015ba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80015be:	b1f3      	cbz	r3, 80015fe <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c6:	4621      	mov	r1, r4
 80015c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80015cc:	f7ff ff5a 	bl	8001484 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80015da:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80015de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80015e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80015ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80015f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
}
 80015fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80015fe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001602:	f7ff ff3e 	bl	8001482 <HAL_TIM_PWM_MspInit>
 8001606:	e7db      	b.n	80015c0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001608:	2001      	movs	r0, #1
}
 800160a:	4770      	bx	lr

0800160c <TIM_OC2_SetConfig>:
{
 800160c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800160e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001610:	6a02      	ldr	r2, [r0, #32]
 8001612:	f022 0210 	bic.w	r2, r2, #16
 8001616:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001618:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800161a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800161c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001620:	680d      	ldr	r5, [r1, #0]
 8001622:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001626:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800162a:	688d      	ldr	r5, [r1, #8]
 800162c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001630:	4d11      	ldr	r5, [pc, #68]	@ (8001678 <TIM_OC2_SetConfig+0x6c>)
 8001632:	42a8      	cmp	r0, r5
 8001634:	d003      	beq.n	800163e <TIM_OC2_SetConfig+0x32>
 8001636:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800163a:	42a8      	cmp	r0, r5
 800163c:	d106      	bne.n	800164c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800163e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001642:	68cd      	ldr	r5, [r1, #12]
 8001644:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800164c:	4d0a      	ldr	r5, [pc, #40]	@ (8001678 <TIM_OC2_SetConfig+0x6c>)
 800164e:	42a8      	cmp	r0, r5
 8001650:	d003      	beq.n	800165a <TIM_OC2_SetConfig+0x4e>
 8001652:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001656:	42a8      	cmp	r0, r5
 8001658:	d107      	bne.n	800166a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800165a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800165e:	694d      	ldr	r5, [r1, #20]
 8001660:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001664:	698d      	ldr	r5, [r1, #24]
 8001666:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800166a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800166c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800166e:	684a      	ldr	r2, [r1, #4]
 8001670:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001672:	6203      	str	r3, [r0, #32]
}
 8001674:	bc30      	pop	{r4, r5}
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000

0800167c <HAL_TIM_PWM_ConfigChannel>:
{
 800167c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800167e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d066      	beq.n	8001754 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	2301      	movs	r3, #1
 800168c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001690:	2a0c      	cmp	r2, #12
 8001692:	d85a      	bhi.n	800174a <HAL_TIM_PWM_ConfigChannel+0xce>
 8001694:	e8df f002 	tbb	[pc, r2]
 8001698:	59595907 	.word	0x59595907
 800169c:	5959591b 	.word	0x5959591b
 80016a0:	59595930 	.word	0x59595930
 80016a4:	44          	.byte	0x44
 80016a5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80016a6:	6800      	ldr	r0, [r0, #0]
 80016a8:	f7ff fe24 	bl	80012f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80016ac:	6822      	ldr	r2, [r4, #0]
 80016ae:	6993      	ldr	r3, [r2, #24]
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	6993      	ldr	r3, [r2, #24]
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80016c0:	6822      	ldr	r2, [r4, #0]
 80016c2:	6993      	ldr	r3, [r2, #24]
 80016c4:	6929      	ldr	r1, [r5, #16]
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2000      	movs	r0, #0
      break;
 80016cc:	e03e      	b.n	800174c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80016ce:	6800      	ldr	r0, [r0, #0]
 80016d0:	f7ff ff9c 	bl	800160c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	6993      	ldr	r3, [r2, #24]
 80016d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016de:	6822      	ldr	r2, [r4, #0]
 80016e0:	6993      	ldr	r3, [r2, #24]
 80016e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016e8:	6822      	ldr	r2, [r4, #0]
 80016ea:	6993      	ldr	r3, [r2, #24]
 80016ec:	6929      	ldr	r1, [r5, #16]
 80016ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80016f2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80016f4:	2000      	movs	r0, #0
      break;
 80016f6:	e029      	b.n	800174c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016f8:	6800      	ldr	r0, [r0, #0]
 80016fa:	f7ff fe33 	bl	8001364 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	69d3      	ldr	r3, [r2, #28]
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	69d3      	ldr	r3, [r2, #28]
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	69d3      	ldr	r3, [r2, #28]
 8001716:	6929      	ldr	r1, [r5, #16]
 8001718:	430b      	orrs	r3, r1
 800171a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2000      	movs	r0, #0
      break;
 800171e:	e015      	b.n	800174c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001720:	6800      	ldr	r0, [r0, #0]
 8001722:	f7ff fe57 	bl	80013d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	69d3      	ldr	r3, [r2, #28]
 800172a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800172e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001730:	6822      	ldr	r2, [r4, #0]
 8001732:	69d3      	ldr	r3, [r2, #28]
 8001734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001738:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	69d3      	ldr	r3, [r2, #28]
 800173e:	6929      	ldr	r1, [r5, #16]
 8001740:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001744:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2000      	movs	r0, #0
      break;
 8001748:	e000      	b.n	800174c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800174a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800174c:	2300      	movs	r3, #0
 800174e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001752:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001754:	2002      	movs	r0, #2
 8001756:	e7fc      	b.n	8001752 <HAL_TIM_PWM_ConfigChannel+0xd6>

08001758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001758:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800175a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800175c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001760:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001764:	430a      	orrs	r2, r1
 8001766:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800176a:	6082      	str	r2, [r0, #8]
}
 800176c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001772:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001776:	2b01      	cmp	r3, #1
 8001778:	d078      	beq.n	800186c <HAL_TIM_ConfigClockSource+0xfa>
{
 800177a:	b510      	push	{r4, lr}
 800177c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800177e:	2301      	movs	r3, #1
 8001780:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001784:	2302      	movs	r3, #2
 8001786:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800178a:	6802      	ldr	r2, [r0, #0]
 800178c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800178e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001792:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001796:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001798:	680b      	ldr	r3, [r1, #0]
 800179a:	2b60      	cmp	r3, #96	@ 0x60
 800179c:	d04c      	beq.n	8001838 <HAL_TIM_ConfigClockSource+0xc6>
 800179e:	d829      	bhi.n	80017f4 <HAL_TIM_ConfigClockSource+0x82>
 80017a0:	2b40      	cmp	r3, #64	@ 0x40
 80017a2:	d054      	beq.n	800184e <HAL_TIM_ConfigClockSource+0xdc>
 80017a4:	d90c      	bls.n	80017c0 <HAL_TIM_ConfigClockSource+0x4e>
 80017a6:	2b50      	cmp	r3, #80	@ 0x50
 80017a8:	d122      	bne.n	80017f0 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017aa:	68ca      	ldr	r2, [r1, #12]
 80017ac:	6849      	ldr	r1, [r1, #4]
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	f7ff fe38 	bl	8001424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017b4:	2150      	movs	r1, #80	@ 0x50
 80017b6:	6820      	ldr	r0, [r4, #0]
 80017b8:	f7ff fe5b 	bl	8001472 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2000      	movs	r0, #0
      break;
 80017be:	e005      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d00d      	beq.n	80017e0 <HAL_TIM_ConfigClockSource+0x6e>
 80017c4:	d909      	bls.n	80017da <HAL_TIM_ConfigClockSource+0x68>
 80017c6:	2b30      	cmp	r3, #48	@ 0x30
 80017c8:	d00a      	beq.n	80017e0 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80017d2:	2300      	movs	r3, #0
 80017d4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80017d8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80017da:	b10b      	cbz	r3, 80017e0 <HAL_TIM_ConfigClockSource+0x6e>
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d105      	bne.n	80017ec <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80017e0:	4619      	mov	r1, r3
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f7ff fe45 	bl	8001472 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2000      	movs	r0, #0
      break;
 80017ea:	e7ef      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
 80017ee:	e7ed      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
 80017f0:	2001      	movs	r0, #1
 80017f2:	e7eb      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80017f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f8:	d034      	beq.n	8001864 <HAL_TIM_ConfigClockSource+0xf2>
 80017fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017fe:	d10c      	bne.n	800181a <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8001800:	68cb      	ldr	r3, [r1, #12]
 8001802:	684a      	ldr	r2, [r1, #4]
 8001804:	6889      	ldr	r1, [r1, #8]
 8001806:	6800      	ldr	r0, [r0, #0]
 8001808:	f7ff ffa6 	bl	8001758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800180c:	6822      	ldr	r2, [r4, #0]
 800180e:	6893      	ldr	r3, [r2, #8]
 8001810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001814:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001816:	2000      	movs	r0, #0
      break;
 8001818:	e7d8      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800181a:	2b70      	cmp	r3, #112	@ 0x70
 800181c:	d124      	bne.n	8001868 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800181e:	68cb      	ldr	r3, [r1, #12]
 8001820:	684a      	ldr	r2, [r1, #4]
 8001822:	6889      	ldr	r1, [r1, #8]
 8001824:	6800      	ldr	r0, [r0, #0]
 8001826:	f7ff ff97 	bl	8001758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800182e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001832:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001834:	2000      	movs	r0, #0
      break;
 8001836:	e7c9      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001838:	68ca      	ldr	r2, [r1, #12]
 800183a:	6849      	ldr	r1, [r1, #4]
 800183c:	6800      	ldr	r0, [r0, #0]
 800183e:	f7ff fe04 	bl	800144a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001842:	2160      	movs	r1, #96	@ 0x60
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	f7ff fe14 	bl	8001472 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2000      	movs	r0, #0
      break;
 800184c:	e7be      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800184e:	68ca      	ldr	r2, [r1, #12]
 8001850:	6849      	ldr	r1, [r1, #4]
 8001852:	6800      	ldr	r0, [r0, #0]
 8001854:	f7ff fde6 	bl	8001424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001858:	2140      	movs	r1, #64	@ 0x40
 800185a:	6820      	ldr	r0, [r4, #0]
 800185c:	f7ff fe09 	bl	8001472 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2000      	movs	r0, #0
      break;
 8001862:	e7b3      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001864:	2000      	movs	r0, #0
 8001866:	e7b1      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e7af      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800186c:	2002      	movs	r0, #2
}
 800186e:	4770      	bx	lr

08001870 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001870:	f001 011f 	and.w	r1, r1, #31
 8001874:	f04f 0c01 	mov.w	ip, #1
 8001878:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800187c:	6a03      	ldr	r3, [r0, #32]
 800187e:	ea23 030c 	bic.w	r3, r3, ip
 8001882:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001884:	6a03      	ldr	r3, [r0, #32]
 8001886:	408a      	lsls	r2, r1
 8001888:	4313      	orrs	r3, r2
 800188a:	6203      	str	r3, [r0, #32]
}
 800188c:	4770      	bx	lr
	...

08001890 <HAL_TIM_PWM_Start>:
{
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001894:	4608      	mov	r0, r1
 8001896:	2900      	cmp	r1, #0
 8001898:	d142      	bne.n	8001920 <HAL_TIM_PWM_Start+0x90>
 800189a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	bf18      	it	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d16e      	bne.n	8001988 <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d151      	bne.n	8001952 <HAL_TIM_PWM_Start+0xc2>
 80018ae:	2302      	movs	r3, #2
 80018b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018b4:	2201      	movs	r2, #1
 80018b6:	4601      	mov	r1, r0
 80018b8:	6820      	ldr	r0, [r4, #0]
 80018ba:	f7ff ffd9 	bl	8001870 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	4a33      	ldr	r2, [pc, #204]	@ (8001990 <HAL_TIM_PWM_Start+0x100>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_PWM_Start+0x3e>
 80018c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d103      	bne.n	80018d6 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 80018ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018d4:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <HAL_TIM_PWM_Start+0x100>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d049      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 80018de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e2:	d046      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 80018e4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d042      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 80018ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d03e      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 80018f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d03a      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 80018fc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001900:	4293      	cmp	r3, r2
 8001902:	d036      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 8001904:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001908:	4293      	cmp	r3, r2
 800190a:	d032      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
 800190c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001910:	4293      	cmp	r3, r2
 8001912:	d02e      	beq.n	8001972 <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800191c:	2000      	movs	r0, #0
 800191e:	e032      	b.n	8001986 <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001920:	2904      	cmp	r1, #4
 8001922:	d008      	beq.n	8001936 <HAL_TIM_PWM_Start+0xa6>
 8001924:	2908      	cmp	r1, #8
 8001926:	d00d      	beq.n	8001944 <HAL_TIM_PWM_Start+0xb4>
 8001928:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	bf18      	it	ne
 8001932:	2301      	movne	r3, #1
 8001934:	e7b7      	b.n	80018a6 <HAL_TIM_PWM_Start+0x16>
 8001936:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	bf18      	it	ne
 8001940:	2301      	movne	r3, #1
 8001942:	e7b0      	b.n	80018a6 <HAL_TIM_PWM_Start+0x16>
 8001944:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	bf18      	it	ne
 800194e:	2301      	movne	r3, #1
 8001950:	e7a9      	b.n	80018a6 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001952:	2804      	cmp	r0, #4
 8001954:	d005      	beq.n	8001962 <HAL_TIM_PWM_Start+0xd2>
 8001956:	2808      	cmp	r0, #8
 8001958:	d007      	beq.n	800196a <HAL_TIM_PWM_Start+0xda>
 800195a:	2302      	movs	r3, #2
 800195c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8001960:	e7a8      	b.n	80018b4 <HAL_TIM_PWM_Start+0x24>
 8001962:	2302      	movs	r3, #2
 8001964:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001968:	e7a4      	b.n	80018b4 <HAL_TIM_PWM_Start+0x24>
 800196a:	2302      	movs	r3, #2
 800196c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001970:	e7a0      	b.n	80018b4 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001978:	2a06      	cmp	r2, #6
 800197a:	d007      	beq.n	800198c <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001984:	2000      	movs	r0, #0
}
 8001986:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
 800198a:	e7fc      	b.n	8001986 <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 800198c:	2000      	movs	r0, #0
 800198e:	e7fa      	b.n	8001986 <HAL_TIM_PWM_Start+0xf6>
 8001990:	40010000 	.word	0x40010000

08001994 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001994:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001998:	2a01      	cmp	r2, #1
 800199a:	d03d      	beq.n	8001a18 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 800199c:	b410      	push	{r4}
 800199e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a6:	2202      	movs	r2, #2
 80019a8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019ac:	6802      	ldr	r2, [r0, #0]
 80019ae:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019b0:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019b2:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019b6:	6808      	ldr	r0, [r1, #0]
 80019b8:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019bc:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4816      	ldr	r0, [pc, #88]	@ (8001a1c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80019c2:	4282      	cmp	r2, r0
 80019c4:	d01a      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019c6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80019ca:	d017      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019cc:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80019d0:	4282      	cmp	r2, r0
 80019d2:	d013      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019d4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80019d8:	4282      	cmp	r2, r0
 80019da:	d00f      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019dc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80019e0:	4282      	cmp	r2, r0
 80019e2:	d00b      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019e4:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80019e8:	4282      	cmp	r2, r0
 80019ea:	d007      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019ec:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80019f0:	4282      	cmp	r2, r0
 80019f2:	d003      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80019f4:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80019f8:	4282      	cmp	r2, r0
 80019fa:	d104      	bne.n	8001a06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019fc:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a00:	6849      	ldr	r1, [r1, #4]
 8001a02:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a04:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a16:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a18:	2002      	movs	r0, #2
}
 8001a1a:	4770      	bx	lr
 8001a1c:	40010000 	.word	0x40010000

08001a20 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a22:	f102 030c 	add.w	r3, r2, #12
 8001a26:	e853 3f00 	ldrex	r3, [r3]
 8001a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a2e:	320c      	adds	r2, #12
 8001a30:	e842 3100 	strex	r1, r3, [r2]
 8001a34:	2900      	cmp	r1, #0
 8001a36:	d1f3      	bne.n	8001a20 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a3a:	f102 0314 	add.w	r3, r2, #20
 8001a3e:	e853 3f00 	ldrex	r3, [r3]
 8001a42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a46:	3214      	adds	r2, #20
 8001a48:	e842 3100 	strex	r1, r3, [r2]
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	d1f3      	bne.n	8001a38 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a56:	2320      	movs	r3, #32
 8001a58:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001a60:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a62:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a64:	f102 030c 	add.w	r3, r2, #12
 8001a68:	e853 3f00 	ldrex	r3, [r3]
 8001a6c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a70:	320c      	adds	r2, #12
 8001a72:	e842 3100 	strex	r1, r3, [r2]
 8001a76:	2900      	cmp	r1, #0
 8001a78:	d1f3      	bne.n	8001a62 <UART_EndRxTransfer+0x42>
 8001a7a:	e7ec      	b.n	8001a56 <UART_EndRxTransfer+0x36>

08001a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a80:	6802      	ldr	r2, [r0, #0]
 8001a82:	6913      	ldr	r3, [r2, #16]
 8001a84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a88:	68c1      	ldr	r1, [r0, #12]
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a8e:	6883      	ldr	r3, [r0, #8]
 8001a90:	6902      	ldr	r2, [r0, #16]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	6943      	ldr	r3, [r0, #20]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	69c3      	ldr	r3, [r0, #28]
 8001a9a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001a9c:	6801      	ldr	r1, [r0, #0]
 8001a9e:	68cb      	ldr	r3, [r1, #12]
 8001aa0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001aa4:	f023 030c 	bic.w	r3, r3, #12
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aac:	6802      	ldr	r2, [r0, #0]
 8001aae:	6953      	ldr	r3, [r2, #20]
 8001ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ab4:	6981      	ldr	r1, [r0, #24]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001aba:	6803      	ldr	r3, [r0, #0]
 8001abc:	4a31      	ldr	r2, [pc, #196]	@ (8001b84 <UART_SetConfig+0x108>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d006      	beq.n	8001ad0 <UART_SetConfig+0x54>
 8001ac2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d002      	beq.n	8001ad0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aca:	f7ff fbf3 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001ace:	e001      	b.n	8001ad4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ad0:	f7ff fc00 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ad4:	69e3      	ldr	r3, [r4, #28]
 8001ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ada:	d029      	beq.n	8001b30 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001adc:	2100      	movs	r1, #0
 8001ade:	1803      	adds	r3, r0, r0
 8001ae0:	4149      	adcs	r1, r1
 8001ae2:	181b      	adds	r3, r3, r0
 8001ae4:	f141 0100 	adc.w	r1, r1, #0
 8001ae8:	00c9      	lsls	r1, r1, #3
 8001aea:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1818      	adds	r0, r3, r0
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001af8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001afc:	f141 0100 	adc.w	r1, r1, #0
 8001b00:	f7fe fb62 	bl	80001c8 <__aeabi_uldivmod>
 8001b04:	4a20      	ldr	r2, [pc, #128]	@ (8001b88 <UART_SetConfig+0x10c>)
 8001b06:	fba2 3100 	umull	r3, r1, r2, r0
 8001b0a:	0949      	lsrs	r1, r1, #5
 8001b0c:	2364      	movs	r3, #100	@ 0x64
 8001b0e:	fb03 0311 	mls	r3, r3, r1, r0
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	3332      	adds	r3, #50	@ 0x32
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b20:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	6821      	ldr	r1, [r4, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }
}
 8001b2e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b30:	2300      	movs	r3, #0
 8001b32:	1802      	adds	r2, r0, r0
 8001b34:	eb43 0103 	adc.w	r1, r3, r3
 8001b38:	1812      	adds	r2, r2, r0
 8001b3a:	f141 0100 	adc.w	r1, r1, #0
 8001b3e:	00c9      	lsls	r1, r1, #3
 8001b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b44:	00d2      	lsls	r2, r2, #3
 8001b46:	1810      	adds	r0, r2, r0
 8001b48:	f141 0100 	adc.w	r1, r1, #0
 8001b4c:	6862      	ldr	r2, [r4, #4]
 8001b4e:	1892      	adds	r2, r2, r2
 8001b50:	415b      	adcs	r3, r3
 8001b52:	f7fe fb39 	bl	80001c8 <__aeabi_uldivmod>
 8001b56:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <UART_SetConfig+0x10c>)
 8001b58:	fba2 3100 	umull	r3, r1, r2, r0
 8001b5c:	0949      	lsrs	r1, r1, #5
 8001b5e:	2364      	movs	r3, #100	@ 0x64
 8001b60:	fb03 0311 	mls	r3, r3, r1, r0
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	3332      	adds	r3, #50	@ 0x32
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	005a      	lsls	r2, r3, #1
 8001b70:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001b74:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	6821      	ldr	r1, [r4, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
 8001b82:	e7d4      	b.n	8001b2e <UART_SetConfig+0xb2>
 8001b84:	40011000 	.word	0x40011000
 8001b88:	51eb851f 	.word	0x51eb851f

08001b8c <UART_WaitOnFlagUntilTimeout>:
{
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	b083      	sub	sp, #12
 8001b92:	4605      	mov	r5, r0
 8001b94:	460e      	mov	r6, r1
 8001b96:	4617      	mov	r7, r2
 8001b98:	4699      	mov	r9, r3
 8001b9a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	681c      	ldr	r4, [r3, #0]
 8001ba2:	ea36 0404 	bics.w	r4, r6, r4
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2401      	moveq	r4, #1
 8001baa:	2400      	movne	r4, #0
 8001bac:	42bc      	cmp	r4, r7
 8001bae:	d128      	bne.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001bb0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001bb4:	d0f3      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7fe fefd 	bl	80009b4 <HAL_GetTick>
 8001bba:	eba0 0009 	sub.w	r0, r0, r9
 8001bbe:	4540      	cmp	r0, r8
 8001bc0:	d823      	bhi.n	8001c0a <UART_WaitOnFlagUntilTimeout+0x7e>
 8001bc2:	f1b8 0f00 	cmp.w	r8, #0
 8001bc6:	d022      	beq.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	f012 0f04 	tst.w	r2, #4
 8001bd0:	d0e5      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x12>
 8001bd2:	2e80      	cmp	r6, #128	@ 0x80
 8001bd4:	d0e3      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x12>
 8001bd6:	2e40      	cmp	r6, #64	@ 0x40
 8001bd8:	d0e1      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f012 0f08 	tst.w	r2, #8
 8001be0:	d0dd      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001be2:	2400      	movs	r4, #0
 8001be4:	9401      	str	r4, [sp, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	9201      	str	r2, [sp, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	f7ff ff15 	bl	8001a20 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001bfa:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001bfe:	2001      	movs	r0, #1
 8001c00:	e000      	b.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001c02:	2000      	movs	r0, #0
}
 8001c04:	b003      	add	sp, #12
 8001c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	e7fa      	b.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x78>
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e7f8      	b.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x78>

08001c12 <HAL_UART_Init>:
  if (huart == NULL)
 8001c12:	b360      	cbz	r0, 8001c6e <HAL_UART_Init+0x5c>
{
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c18:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001c1c:	b313      	cbz	r3, 8001c64 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c1e:	2324      	movs	r3, #36	@ 0x24
 8001c20:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	68d3      	ldr	r3, [r2, #12]
 8001c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c2c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ff24 	bl	8001a7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	6913      	ldr	r3, [r2, #16]
 8001c38:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001c3c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	6953      	ldr	r3, [r2, #20]
 8001c42:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001c46:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	68d3      	ldr	r3, [r2, #12]
 8001c4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c50:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c52:	2000      	movs	r0, #0
 8001c54:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c56:	2320      	movs	r3, #32
 8001c58:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c60:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001c62:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c64:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001c68:	f7fe fd9e 	bl	80007a8 <HAL_UART_MspInit>
 8001c6c:	e7d7      	b.n	8001c1e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
}
 8001c70:	4770      	bx	lr

08001c72 <HAL_UART_Transmit>:
{
 8001c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c7a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d156      	bne.n	8001d32 <HAL_UART_Transmit+0xc0>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001c8a:	2900      	cmp	r1, #0
 8001c8c:	d055      	beq.n	8001d3a <HAL_UART_Transmit+0xc8>
 8001c8e:	b90a      	cbnz	r2, 8001c94 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001c90:	2001      	movs	r0, #1
 8001c92:	e04f      	b.n	8001d34 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c98:	2321      	movs	r3, #33	@ 0x21
 8001c9a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001c9e:	f7fe fe89 	bl	80009b4 <HAL_GetTick>
 8001ca2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001ca4:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ca8:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cac:	68a3      	ldr	r3, [r4, #8]
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cb2:	d002      	beq.n	8001cba <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001cb4:	f04f 0800 	mov.w	r8, #0
 8001cb8:	e014      	b.n	8001ce4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cba:	6923      	ldr	r3, [r4, #16]
 8001cbc:	b32b      	cbz	r3, 8001d0a <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001cbe:	f04f 0800 	mov.w	r8, #0
 8001cc2:	e00f      	b.n	8001ce4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001cca:	2003      	movs	r0, #3
 8001ccc:	e032      	b.n	8001d34 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cce:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001cda:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	3a01      	subs	r2, #1
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ce4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b193      	cbz	r3, 8001d10 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cea:	9600      	str	r6, [sp, #0]
 8001cec:	463b      	mov	r3, r7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff ff4a 	bl	8001b8c <UART_WaitOnFlagUntilTimeout>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d1e3      	bne.n	8001cc4 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001cfc:	2d00      	cmp	r5, #0
 8001cfe:	d0e6      	beq.n	8001cce <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d00:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d08:	e7e7      	b.n	8001cda <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001d0a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	e7e9      	b.n	8001ce4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d10:	9600      	str	r6, [sp, #0]
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	2140      	movs	r1, #64	@ 0x40
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff ff37 	bl	8001b8c <UART_WaitOnFlagUntilTimeout>
 8001d1e:	b918      	cbnz	r0, 8001d28 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001d20:	2320      	movs	r3, #32
 8001d22:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001d26:	e005      	b.n	8001d34 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001d2e:	2003      	movs	r0, #3
 8001d30:	e000      	b.n	8001d34 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001d32:	2002      	movs	r0, #2
}
 8001d34:	b002      	add	sp, #8
 8001d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	e7fa      	b.n	8001d34 <HAL_UART_Transmit+0xc2>
	...

08001d40 <std>:
 8001d40:	2300      	movs	r3, #0
 8001d42:	b510      	push	{r4, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	e9c0 3300 	strd	r3, r3, [r0]
 8001d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d4e:	6083      	str	r3, [r0, #8]
 8001d50:	8181      	strh	r1, [r0, #12]
 8001d52:	6643      	str	r3, [r0, #100]	@ 0x64
 8001d54:	81c2      	strh	r2, [r0, #14]
 8001d56:	6183      	str	r3, [r0, #24]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	305c      	adds	r0, #92	@ 0x5c
 8001d5e:	f000 f9e7 	bl	8002130 <memset>
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <std+0x58>)
 8001d64:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <std+0x5c>)
 8001d68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <std+0x60>)
 8001d6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <std+0x64>)
 8001d70:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <std+0x68>)
 8001d74:	6224      	str	r4, [r4, #32]
 8001d76:	429c      	cmp	r4, r3
 8001d78:	d006      	beq.n	8001d88 <std+0x48>
 8001d7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001d7e:	4294      	cmp	r4, r2
 8001d80:	d002      	beq.n	8001d88 <std+0x48>
 8001d82:	33d0      	adds	r3, #208	@ 0xd0
 8001d84:	429c      	cmp	r4, r3
 8001d86:	d105      	bne.n	8001d94 <std+0x54>
 8001d88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d90:	f000 ba46 	b.w	8002220 <__retarget_lock_init_recursive>
 8001d94:	bd10      	pop	{r4, pc}
 8001d96:	bf00      	nop
 8001d98:	08001f81 	.word	0x08001f81
 8001d9c:	08001fa3 	.word	0x08001fa3
 8001da0:	08001fdb 	.word	0x08001fdb
 8001da4:	08001fff 	.word	0x08001fff
 8001da8:	2000011c 	.word	0x2000011c

08001dac <stdio_exit_handler>:
 8001dac:	4a02      	ldr	r2, [pc, #8]	@ (8001db8 <stdio_exit_handler+0xc>)
 8001dae:	4903      	ldr	r1, [pc, #12]	@ (8001dbc <stdio_exit_handler+0x10>)
 8001db0:	4803      	ldr	r0, [pc, #12]	@ (8001dc0 <stdio_exit_handler+0x14>)
 8001db2:	f000 b869 	b.w	8001e88 <_fwalk_sglue>
 8001db6:	bf00      	nop
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	08002521 	.word	0x08002521
 8001dc0:	2000001c 	.word	0x2000001c

08001dc4 <cleanup_stdio>:
 8001dc4:	6841      	ldr	r1, [r0, #4]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <cleanup_stdio+0x34>)
 8001dc8:	4299      	cmp	r1, r3
 8001dca:	b510      	push	{r4, lr}
 8001dcc:	4604      	mov	r4, r0
 8001dce:	d001      	beq.n	8001dd4 <cleanup_stdio+0x10>
 8001dd0:	f000 fba6 	bl	8002520 <_fflush_r>
 8001dd4:	68a1      	ldr	r1, [r4, #8]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <cleanup_stdio+0x38>)
 8001dd8:	4299      	cmp	r1, r3
 8001dda:	d002      	beq.n	8001de2 <cleanup_stdio+0x1e>
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f000 fb9f 	bl	8002520 <_fflush_r>
 8001de2:	68e1      	ldr	r1, [r4, #12]
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <cleanup_stdio+0x3c>)
 8001de6:	4299      	cmp	r1, r3
 8001de8:	d004      	beq.n	8001df4 <cleanup_stdio+0x30>
 8001dea:	4620      	mov	r0, r4
 8001dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001df0:	f000 bb96 	b.w	8002520 <_fflush_r>
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	bf00      	nop
 8001df8:	2000011c 	.word	0x2000011c
 8001dfc:	20000184 	.word	0x20000184
 8001e00:	200001ec 	.word	0x200001ec

08001e04 <global_stdio_init.part.0>:
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <global_stdio_init.part.0+0x30>)
 8001e08:	4c0b      	ldr	r4, [pc, #44]	@ (8001e38 <global_stdio_init.part.0+0x34>)
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <global_stdio_init.part.0+0x38>)
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	2200      	movs	r2, #0
 8001e12:	2104      	movs	r1, #4
 8001e14:	f7ff ff94 	bl	8001d40 <std>
 8001e18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2109      	movs	r1, #9
 8001e20:	f7ff ff8e 	bl	8001d40 <std>
 8001e24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001e28:	2202      	movs	r2, #2
 8001e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e2e:	2112      	movs	r1, #18
 8001e30:	f7ff bf86 	b.w	8001d40 <std>
 8001e34:	20000254 	.word	0x20000254
 8001e38:	2000011c 	.word	0x2000011c
 8001e3c:	08001dad 	.word	0x08001dad

08001e40 <__sfp_lock_acquire>:
 8001e40:	4801      	ldr	r0, [pc, #4]	@ (8001e48 <__sfp_lock_acquire+0x8>)
 8001e42:	f000 b9ee 	b.w	8002222 <__retarget_lock_acquire_recursive>
 8001e46:	bf00      	nop
 8001e48:	2000025d 	.word	0x2000025d

08001e4c <__sfp_lock_release>:
 8001e4c:	4801      	ldr	r0, [pc, #4]	@ (8001e54 <__sfp_lock_release+0x8>)
 8001e4e:	f000 b9e9 	b.w	8002224 <__retarget_lock_release_recursive>
 8001e52:	bf00      	nop
 8001e54:	2000025d 	.word	0x2000025d

08001e58 <__sinit>:
 8001e58:	b510      	push	{r4, lr}
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	f7ff fff0 	bl	8001e40 <__sfp_lock_acquire>
 8001e60:	6a23      	ldr	r3, [r4, #32]
 8001e62:	b11b      	cbz	r3, 8001e6c <__sinit+0x14>
 8001e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e68:	f7ff bff0 	b.w	8001e4c <__sfp_lock_release>
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <__sinit+0x28>)
 8001e6e:	6223      	str	r3, [r4, #32]
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <__sinit+0x2c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f5      	bne.n	8001e64 <__sinit+0xc>
 8001e78:	f7ff ffc4 	bl	8001e04 <global_stdio_init.part.0>
 8001e7c:	e7f2      	b.n	8001e64 <__sinit+0xc>
 8001e7e:	bf00      	nop
 8001e80:	08001dc5 	.word	0x08001dc5
 8001e84:	20000254 	.word	0x20000254

08001e88 <_fwalk_sglue>:
 8001e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e8c:	4607      	mov	r7, r0
 8001e8e:	4688      	mov	r8, r1
 8001e90:	4614      	mov	r4, r2
 8001e92:	2600      	movs	r6, #0
 8001e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e98:	f1b9 0901 	subs.w	r9, r9, #1
 8001e9c:	d505      	bpl.n	8001eaa <_fwalk_sglue+0x22>
 8001e9e:	6824      	ldr	r4, [r4, #0]
 8001ea0:	2c00      	cmp	r4, #0
 8001ea2:	d1f7      	bne.n	8001e94 <_fwalk_sglue+0xc>
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001eaa:	89ab      	ldrh	r3, [r5, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d907      	bls.n	8001ec0 <_fwalk_sglue+0x38>
 8001eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	d003      	beq.n	8001ec0 <_fwalk_sglue+0x38>
 8001eb8:	4629      	mov	r1, r5
 8001eba:	4638      	mov	r0, r7
 8001ebc:	47c0      	blx	r8
 8001ebe:	4306      	orrs	r6, r0
 8001ec0:	3568      	adds	r5, #104	@ 0x68
 8001ec2:	e7e9      	b.n	8001e98 <_fwalk_sglue+0x10>

08001ec4 <_puts_r>:
 8001ec4:	6a03      	ldr	r3, [r0, #32]
 8001ec6:	b570      	push	{r4, r5, r6, lr}
 8001ec8:	6884      	ldr	r4, [r0, #8]
 8001eca:	4605      	mov	r5, r0
 8001ecc:	460e      	mov	r6, r1
 8001ece:	b90b      	cbnz	r3, 8001ed4 <_puts_r+0x10>
 8001ed0:	f7ff ffc2 	bl	8001e58 <__sinit>
 8001ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ed6:	07db      	lsls	r3, r3, #31
 8001ed8:	d405      	bmi.n	8001ee6 <_puts_r+0x22>
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	0598      	lsls	r0, r3, #22
 8001ede:	d402      	bmi.n	8001ee6 <_puts_r+0x22>
 8001ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ee2:	f000 f99e 	bl	8002222 <__retarget_lock_acquire_recursive>
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	0719      	lsls	r1, r3, #28
 8001eea:	d502      	bpl.n	8001ef2 <_puts_r+0x2e>
 8001eec:	6923      	ldr	r3, [r4, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d135      	bne.n	8001f5e <_puts_r+0x9a>
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f000 f8c5 	bl	8002084 <__swsetup_r>
 8001efa:	b380      	cbz	r0, 8001f5e <_puts_r+0x9a>
 8001efc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001f00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f02:	07da      	lsls	r2, r3, #31
 8001f04:	d405      	bmi.n	8001f12 <_puts_r+0x4e>
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	059b      	lsls	r3, r3, #22
 8001f0a:	d402      	bmi.n	8001f12 <_puts_r+0x4e>
 8001f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f0e:	f000 f989 	bl	8002224 <__retarget_lock_release_recursive>
 8001f12:	4628      	mov	r0, r5
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da04      	bge.n	8001f24 <_puts_r+0x60>
 8001f1a:	69a2      	ldr	r2, [r4, #24]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dc17      	bgt.n	8001f50 <_puts_r+0x8c>
 8001f20:	290a      	cmp	r1, #10
 8001f22:	d015      	beq.n	8001f50 <_puts_r+0x8c>
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	6022      	str	r2, [r4, #0]
 8001f2a:	7019      	strb	r1, [r3, #0]
 8001f2c:	68a3      	ldr	r3, [r4, #8]
 8001f2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f32:	3b01      	subs	r3, #1
 8001f34:	60a3      	str	r3, [r4, #8]
 8001f36:	2900      	cmp	r1, #0
 8001f38:	d1ed      	bne.n	8001f16 <_puts_r+0x52>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da11      	bge.n	8001f62 <_puts_r+0x9e>
 8001f3e:	4622      	mov	r2, r4
 8001f40:	210a      	movs	r1, #10
 8001f42:	4628      	mov	r0, r5
 8001f44:	f000 f85f 	bl	8002006 <__swbuf_r>
 8001f48:	3001      	adds	r0, #1
 8001f4a:	d0d7      	beq.n	8001efc <_puts_r+0x38>
 8001f4c:	250a      	movs	r5, #10
 8001f4e:	e7d7      	b.n	8001f00 <_puts_r+0x3c>
 8001f50:	4622      	mov	r2, r4
 8001f52:	4628      	mov	r0, r5
 8001f54:	f000 f857 	bl	8002006 <__swbuf_r>
 8001f58:	3001      	adds	r0, #1
 8001f5a:	d1e7      	bne.n	8001f2c <_puts_r+0x68>
 8001f5c:	e7ce      	b.n	8001efc <_puts_r+0x38>
 8001f5e:	3e01      	subs	r6, #1
 8001f60:	e7e4      	b.n	8001f2c <_puts_r+0x68>
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	6022      	str	r2, [r4, #0]
 8001f68:	220a      	movs	r2, #10
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e7ee      	b.n	8001f4c <_puts_r+0x88>
	...

08001f70 <puts>:
 8001f70:	4b02      	ldr	r3, [pc, #8]	@ (8001f7c <puts+0xc>)
 8001f72:	4601      	mov	r1, r0
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f7ff bfa5 	b.w	8001ec4 <_puts_r>
 8001f7a:	bf00      	nop
 8001f7c:	20000018 	.word	0x20000018

08001f80 <__sread>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	460c      	mov	r4, r1
 8001f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f88:	f000 f8fc 	bl	8002184 <_read_r>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	bfab      	itete	ge
 8001f90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001f92:	89a3      	ldrhlt	r3, [r4, #12]
 8001f94:	181b      	addge	r3, r3, r0
 8001f96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001f9a:	bfac      	ite	ge
 8001f9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001f9e:	81a3      	strhlt	r3, [r4, #12]
 8001fa0:	bd10      	pop	{r4, pc}

08001fa2 <__swrite>:
 8001fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa6:	461f      	mov	r7, r3
 8001fa8:	898b      	ldrh	r3, [r1, #12]
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	4605      	mov	r5, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4616      	mov	r6, r2
 8001fb2:	d505      	bpl.n	8001fc0 <__swrite+0x1e>
 8001fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f000 f8d0 	bl	8002160 <_lseek_r>
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fca:	81a3      	strh	r3, [r4, #12]
 8001fcc:	4632      	mov	r2, r6
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd6:	f000 b8e7 	b.w	80021a8 <_write_r>

08001fda <__sseek>:
 8001fda:	b510      	push	{r4, lr}
 8001fdc:	460c      	mov	r4, r1
 8001fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe2:	f000 f8bd 	bl	8002160 <_lseek_r>
 8001fe6:	1c43      	adds	r3, r0, #1
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	bf15      	itete	ne
 8001fec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001fee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001ff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001ff6:	81a3      	strheq	r3, [r4, #12]
 8001ff8:	bf18      	it	ne
 8001ffa:	81a3      	strhne	r3, [r4, #12]
 8001ffc:	bd10      	pop	{r4, pc}

08001ffe <__sclose>:
 8001ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002002:	f000 b89d 	b.w	8002140 <_close_r>

08002006 <__swbuf_r>:
 8002006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002008:	460e      	mov	r6, r1
 800200a:	4614      	mov	r4, r2
 800200c:	4605      	mov	r5, r0
 800200e:	b118      	cbz	r0, 8002018 <__swbuf_r+0x12>
 8002010:	6a03      	ldr	r3, [r0, #32]
 8002012:	b90b      	cbnz	r3, 8002018 <__swbuf_r+0x12>
 8002014:	f7ff ff20 	bl	8001e58 <__sinit>
 8002018:	69a3      	ldr	r3, [r4, #24]
 800201a:	60a3      	str	r3, [r4, #8]
 800201c:	89a3      	ldrh	r3, [r4, #12]
 800201e:	071a      	lsls	r2, r3, #28
 8002020:	d501      	bpl.n	8002026 <__swbuf_r+0x20>
 8002022:	6923      	ldr	r3, [r4, #16]
 8002024:	b943      	cbnz	r3, 8002038 <__swbuf_r+0x32>
 8002026:	4621      	mov	r1, r4
 8002028:	4628      	mov	r0, r5
 800202a:	f000 f82b 	bl	8002084 <__swsetup_r>
 800202e:	b118      	cbz	r0, 8002038 <__swbuf_r+0x32>
 8002030:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002034:	4638      	mov	r0, r7
 8002036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	6922      	ldr	r2, [r4, #16]
 800203c:	1a98      	subs	r0, r3, r2
 800203e:	6963      	ldr	r3, [r4, #20]
 8002040:	b2f6      	uxtb	r6, r6
 8002042:	4283      	cmp	r3, r0
 8002044:	4637      	mov	r7, r6
 8002046:	dc05      	bgt.n	8002054 <__swbuf_r+0x4e>
 8002048:	4621      	mov	r1, r4
 800204a:	4628      	mov	r0, r5
 800204c:	f000 fa68 	bl	8002520 <_fflush_r>
 8002050:	2800      	cmp	r0, #0
 8002052:	d1ed      	bne.n	8002030 <__swbuf_r+0x2a>
 8002054:	68a3      	ldr	r3, [r4, #8]
 8002056:	3b01      	subs	r3, #1
 8002058:	60a3      	str	r3, [r4, #8]
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	6022      	str	r2, [r4, #0]
 8002060:	701e      	strb	r6, [r3, #0]
 8002062:	6962      	ldr	r2, [r4, #20]
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	429a      	cmp	r2, r3
 8002068:	d004      	beq.n	8002074 <__swbuf_r+0x6e>
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	07db      	lsls	r3, r3, #31
 800206e:	d5e1      	bpl.n	8002034 <__swbuf_r+0x2e>
 8002070:	2e0a      	cmp	r6, #10
 8002072:	d1df      	bne.n	8002034 <__swbuf_r+0x2e>
 8002074:	4621      	mov	r1, r4
 8002076:	4628      	mov	r0, r5
 8002078:	f000 fa52 	bl	8002520 <_fflush_r>
 800207c:	2800      	cmp	r0, #0
 800207e:	d0d9      	beq.n	8002034 <__swbuf_r+0x2e>
 8002080:	e7d6      	b.n	8002030 <__swbuf_r+0x2a>
	...

08002084 <__swsetup_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4b29      	ldr	r3, [pc, #164]	@ (800212c <__swsetup_r+0xa8>)
 8002088:	4605      	mov	r5, r0
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	460c      	mov	r4, r1
 800208e:	b118      	cbz	r0, 8002098 <__swsetup_r+0x14>
 8002090:	6a03      	ldr	r3, [r0, #32]
 8002092:	b90b      	cbnz	r3, 8002098 <__swsetup_r+0x14>
 8002094:	f7ff fee0 	bl	8001e58 <__sinit>
 8002098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800209c:	0719      	lsls	r1, r3, #28
 800209e:	d422      	bmi.n	80020e6 <__swsetup_r+0x62>
 80020a0:	06da      	lsls	r2, r3, #27
 80020a2:	d407      	bmi.n	80020b4 <__swsetup_r+0x30>
 80020a4:	2209      	movs	r2, #9
 80020a6:	602a      	str	r2, [r5, #0]
 80020a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020ac:	81a3      	strh	r3, [r4, #12]
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020b2:	e033      	b.n	800211c <__swsetup_r+0x98>
 80020b4:	0758      	lsls	r0, r3, #29
 80020b6:	d512      	bpl.n	80020de <__swsetup_r+0x5a>
 80020b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020ba:	b141      	cbz	r1, 80020ce <__swsetup_r+0x4a>
 80020bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80020c0:	4299      	cmp	r1, r3
 80020c2:	d002      	beq.n	80020ca <__swsetup_r+0x46>
 80020c4:	4628      	mov	r0, r5
 80020c6:	f000 f8af 	bl	8002228 <_free_r>
 80020ca:	2300      	movs	r3, #0
 80020cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80020d4:	81a3      	strh	r3, [r4, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	6063      	str	r3, [r4, #4]
 80020da:	6923      	ldr	r3, [r4, #16]
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	89a3      	ldrh	r3, [r4, #12]
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	81a3      	strh	r3, [r4, #12]
 80020e6:	6923      	ldr	r3, [r4, #16]
 80020e8:	b94b      	cbnz	r3, 80020fe <__swsetup_r+0x7a>
 80020ea:	89a3      	ldrh	r3, [r4, #12]
 80020ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f4:	d003      	beq.n	80020fe <__swsetup_r+0x7a>
 80020f6:	4621      	mov	r1, r4
 80020f8:	4628      	mov	r0, r5
 80020fa:	f000 fa5f 	bl	80025bc <__smakebuf_r>
 80020fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002102:	f013 0201 	ands.w	r2, r3, #1
 8002106:	d00a      	beq.n	800211e <__swsetup_r+0x9a>
 8002108:	2200      	movs	r2, #0
 800210a:	60a2      	str	r2, [r4, #8]
 800210c:	6962      	ldr	r2, [r4, #20]
 800210e:	4252      	negs	r2, r2
 8002110:	61a2      	str	r2, [r4, #24]
 8002112:	6922      	ldr	r2, [r4, #16]
 8002114:	b942      	cbnz	r2, 8002128 <__swsetup_r+0xa4>
 8002116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800211a:	d1c5      	bne.n	80020a8 <__swsetup_r+0x24>
 800211c:	bd38      	pop	{r3, r4, r5, pc}
 800211e:	0799      	lsls	r1, r3, #30
 8002120:	bf58      	it	pl
 8002122:	6962      	ldrpl	r2, [r4, #20]
 8002124:	60a2      	str	r2, [r4, #8]
 8002126:	e7f4      	b.n	8002112 <__swsetup_r+0x8e>
 8002128:	2000      	movs	r0, #0
 800212a:	e7f7      	b.n	800211c <__swsetup_r+0x98>
 800212c:	20000018 	.word	0x20000018

08002130 <memset>:
 8002130:	4402      	add	r2, r0
 8002132:	4603      	mov	r3, r0
 8002134:	4293      	cmp	r3, r2
 8002136:	d100      	bne.n	800213a <memset+0xa>
 8002138:	4770      	bx	lr
 800213a:	f803 1b01 	strb.w	r1, [r3], #1
 800213e:	e7f9      	b.n	8002134 <memset+0x4>

08002140 <_close_r>:
 8002140:	b538      	push	{r3, r4, r5, lr}
 8002142:	4d06      	ldr	r5, [pc, #24]	@ (800215c <_close_r+0x1c>)
 8002144:	2300      	movs	r3, #0
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	602b      	str	r3, [r5, #0]
 800214c:	f7fe fb82 	bl	8000854 <_close>
 8002150:	1c43      	adds	r3, r0, #1
 8002152:	d102      	bne.n	800215a <_close_r+0x1a>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	b103      	cbz	r3, 800215a <_close_r+0x1a>
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	20000258 	.word	0x20000258

08002160 <_lseek_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4d07      	ldr	r5, [pc, #28]	@ (8002180 <_lseek_r+0x20>)
 8002164:	4604      	mov	r4, r0
 8002166:	4608      	mov	r0, r1
 8002168:	4611      	mov	r1, r2
 800216a:	2200      	movs	r2, #0
 800216c:	602a      	str	r2, [r5, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	f7fe fb7a 	bl	8000868 <_lseek>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_lseek_r+0x1e>
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	b103      	cbz	r3, 800217e <_lseek_r+0x1e>
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	20000258 	.word	0x20000258

08002184 <_read_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d07      	ldr	r5, [pc, #28]	@ (80021a4 <_read_r+0x20>)
 8002188:	4604      	mov	r4, r0
 800218a:	4608      	mov	r0, r1
 800218c:	4611      	mov	r1, r2
 800218e:	2200      	movs	r2, #0
 8002190:	602a      	str	r2, [r5, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f7fe fb4e 	bl	8000834 <_read>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_read_r+0x1e>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_read_r+0x1e>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20000258 	.word	0x20000258

080021a8 <_write_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4d07      	ldr	r5, [pc, #28]	@ (80021c8 <_write_r+0x20>)
 80021ac:	4604      	mov	r4, r0
 80021ae:	4608      	mov	r0, r1
 80021b0:	4611      	mov	r1, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	602a      	str	r2, [r5, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f7fe f9a4 	bl	8000504 <_write>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d102      	bne.n	80021c6 <_write_r+0x1e>
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	b103      	cbz	r3, 80021c6 <_write_r+0x1e>
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	20000258 	.word	0x20000258

080021cc <__errno>:
 80021cc:	4b01      	ldr	r3, [pc, #4]	@ (80021d4 <__errno+0x8>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000018 	.word	0x20000018

080021d8 <__libc_init_array>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	4d0d      	ldr	r5, [pc, #52]	@ (8002210 <__libc_init_array+0x38>)
 80021dc:	4c0d      	ldr	r4, [pc, #52]	@ (8002214 <__libc_init_array+0x3c>)
 80021de:	1b64      	subs	r4, r4, r5
 80021e0:	10a4      	asrs	r4, r4, #2
 80021e2:	2600      	movs	r6, #0
 80021e4:	42a6      	cmp	r6, r4
 80021e6:	d109      	bne.n	80021fc <__libc_init_array+0x24>
 80021e8:	4d0b      	ldr	r5, [pc, #44]	@ (8002218 <__libc_init_array+0x40>)
 80021ea:	4c0c      	ldr	r4, [pc, #48]	@ (800221c <__libc_init_array+0x44>)
 80021ec:	f000 fa54 	bl	8002698 <_init>
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	2600      	movs	r6, #0
 80021f6:	42a6      	cmp	r6, r4
 80021f8:	d105      	bne.n	8002206 <__libc_init_array+0x2e>
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002200:	4798      	blx	r3
 8002202:	3601      	adds	r6, #1
 8002204:	e7ee      	b.n	80021e4 <__libc_init_array+0xc>
 8002206:	f855 3b04 	ldr.w	r3, [r5], #4
 800220a:	4798      	blx	r3
 800220c:	3601      	adds	r6, #1
 800220e:	e7f2      	b.n	80021f6 <__libc_init_array+0x1e>
 8002210:	080026f0 	.word	0x080026f0
 8002214:	080026f0 	.word	0x080026f0
 8002218:	080026f0 	.word	0x080026f0
 800221c:	080026f4 	.word	0x080026f4

08002220 <__retarget_lock_init_recursive>:
 8002220:	4770      	bx	lr

08002222 <__retarget_lock_acquire_recursive>:
 8002222:	4770      	bx	lr

08002224 <__retarget_lock_release_recursive>:
 8002224:	4770      	bx	lr
	...

08002228 <_free_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4605      	mov	r5, r0
 800222c:	2900      	cmp	r1, #0
 800222e:	d041      	beq.n	80022b4 <_free_r+0x8c>
 8002230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002234:	1f0c      	subs	r4, r1, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	bfb8      	it	lt
 800223a:	18e4      	addlt	r4, r4, r3
 800223c:	f000 f8e0 	bl	8002400 <__malloc_lock>
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <_free_r+0x90>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	b933      	cbnz	r3, 8002254 <_free_r+0x2c>
 8002246:	6063      	str	r3, [r4, #4]
 8002248:	6014      	str	r4, [r2, #0]
 800224a:	4628      	mov	r0, r5
 800224c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002250:	f000 b8dc 	b.w	800240c <__malloc_unlock>
 8002254:	42a3      	cmp	r3, r4
 8002256:	d908      	bls.n	800226a <_free_r+0x42>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	1821      	adds	r1, r4, r0
 800225c:	428b      	cmp	r3, r1
 800225e:	bf01      	itttt	eq
 8002260:	6819      	ldreq	r1, [r3, #0]
 8002262:	685b      	ldreq	r3, [r3, #4]
 8002264:	1809      	addeq	r1, r1, r0
 8002266:	6021      	streq	r1, [r4, #0]
 8002268:	e7ed      	b.n	8002246 <_free_r+0x1e>
 800226a:	461a      	mov	r2, r3
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	b10b      	cbz	r3, 8002274 <_free_r+0x4c>
 8002270:	42a3      	cmp	r3, r4
 8002272:	d9fa      	bls.n	800226a <_free_r+0x42>
 8002274:	6811      	ldr	r1, [r2, #0]
 8002276:	1850      	adds	r0, r2, r1
 8002278:	42a0      	cmp	r0, r4
 800227a:	d10b      	bne.n	8002294 <_free_r+0x6c>
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	4401      	add	r1, r0
 8002280:	1850      	adds	r0, r2, r1
 8002282:	4283      	cmp	r3, r0
 8002284:	6011      	str	r1, [r2, #0]
 8002286:	d1e0      	bne.n	800224a <_free_r+0x22>
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	6053      	str	r3, [r2, #4]
 800228e:	4408      	add	r0, r1
 8002290:	6010      	str	r0, [r2, #0]
 8002292:	e7da      	b.n	800224a <_free_r+0x22>
 8002294:	d902      	bls.n	800229c <_free_r+0x74>
 8002296:	230c      	movs	r3, #12
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	e7d6      	b.n	800224a <_free_r+0x22>
 800229c:	6820      	ldr	r0, [r4, #0]
 800229e:	1821      	adds	r1, r4, r0
 80022a0:	428b      	cmp	r3, r1
 80022a2:	bf04      	itt	eq
 80022a4:	6819      	ldreq	r1, [r3, #0]
 80022a6:	685b      	ldreq	r3, [r3, #4]
 80022a8:	6063      	str	r3, [r4, #4]
 80022aa:	bf04      	itt	eq
 80022ac:	1809      	addeq	r1, r1, r0
 80022ae:	6021      	streq	r1, [r4, #0]
 80022b0:	6054      	str	r4, [r2, #4]
 80022b2:	e7ca      	b.n	800224a <_free_r+0x22>
 80022b4:	bd38      	pop	{r3, r4, r5, pc}
 80022b6:	bf00      	nop
 80022b8:	20000264 	.word	0x20000264

080022bc <sbrk_aligned>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	4e0f      	ldr	r6, [pc, #60]	@ (80022fc <sbrk_aligned+0x40>)
 80022c0:	460c      	mov	r4, r1
 80022c2:	6831      	ldr	r1, [r6, #0]
 80022c4:	4605      	mov	r5, r0
 80022c6:	b911      	cbnz	r1, 80022ce <sbrk_aligned+0x12>
 80022c8:	f000 f9d6 	bl	8002678 <_sbrk_r>
 80022cc:	6030      	str	r0, [r6, #0]
 80022ce:	4621      	mov	r1, r4
 80022d0:	4628      	mov	r0, r5
 80022d2:	f000 f9d1 	bl	8002678 <_sbrk_r>
 80022d6:	1c43      	adds	r3, r0, #1
 80022d8:	d103      	bne.n	80022e2 <sbrk_aligned+0x26>
 80022da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80022de:	4620      	mov	r0, r4
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
 80022e2:	1cc4      	adds	r4, r0, #3
 80022e4:	f024 0403 	bic.w	r4, r4, #3
 80022e8:	42a0      	cmp	r0, r4
 80022ea:	d0f8      	beq.n	80022de <sbrk_aligned+0x22>
 80022ec:	1a21      	subs	r1, r4, r0
 80022ee:	4628      	mov	r0, r5
 80022f0:	f000 f9c2 	bl	8002678 <_sbrk_r>
 80022f4:	3001      	adds	r0, #1
 80022f6:	d1f2      	bne.n	80022de <sbrk_aligned+0x22>
 80022f8:	e7ef      	b.n	80022da <sbrk_aligned+0x1e>
 80022fa:	bf00      	nop
 80022fc:	20000260 	.word	0x20000260

08002300 <_malloc_r>:
 8002300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002304:	1ccd      	adds	r5, r1, #3
 8002306:	f025 0503 	bic.w	r5, r5, #3
 800230a:	3508      	adds	r5, #8
 800230c:	2d0c      	cmp	r5, #12
 800230e:	bf38      	it	cc
 8002310:	250c      	movcc	r5, #12
 8002312:	2d00      	cmp	r5, #0
 8002314:	4606      	mov	r6, r0
 8002316:	db01      	blt.n	800231c <_malloc_r+0x1c>
 8002318:	42a9      	cmp	r1, r5
 800231a:	d904      	bls.n	8002326 <_malloc_r+0x26>
 800231c:	230c      	movs	r3, #12
 800231e:	6033      	str	r3, [r6, #0]
 8002320:	2000      	movs	r0, #0
 8002322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023fc <_malloc_r+0xfc>
 800232a:	f000 f869 	bl	8002400 <__malloc_lock>
 800232e:	f8d8 3000 	ldr.w	r3, [r8]
 8002332:	461c      	mov	r4, r3
 8002334:	bb44      	cbnz	r4, 8002388 <_malloc_r+0x88>
 8002336:	4629      	mov	r1, r5
 8002338:	4630      	mov	r0, r6
 800233a:	f7ff ffbf 	bl	80022bc <sbrk_aligned>
 800233e:	1c43      	adds	r3, r0, #1
 8002340:	4604      	mov	r4, r0
 8002342:	d158      	bne.n	80023f6 <_malloc_r+0xf6>
 8002344:	f8d8 4000 	ldr.w	r4, [r8]
 8002348:	4627      	mov	r7, r4
 800234a:	2f00      	cmp	r7, #0
 800234c:	d143      	bne.n	80023d6 <_malloc_r+0xd6>
 800234e:	2c00      	cmp	r4, #0
 8002350:	d04b      	beq.n	80023ea <_malloc_r+0xea>
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	4639      	mov	r1, r7
 8002356:	4630      	mov	r0, r6
 8002358:	eb04 0903 	add.w	r9, r4, r3
 800235c:	f000 f98c 	bl	8002678 <_sbrk_r>
 8002360:	4581      	cmp	r9, r0
 8002362:	d142      	bne.n	80023ea <_malloc_r+0xea>
 8002364:	6821      	ldr	r1, [r4, #0]
 8002366:	1a6d      	subs	r5, r5, r1
 8002368:	4629      	mov	r1, r5
 800236a:	4630      	mov	r0, r6
 800236c:	f7ff ffa6 	bl	80022bc <sbrk_aligned>
 8002370:	3001      	adds	r0, #1
 8002372:	d03a      	beq.n	80023ea <_malloc_r+0xea>
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	442b      	add	r3, r5
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	f8d8 3000 	ldr.w	r3, [r8]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	bb62      	cbnz	r2, 80023dc <_malloc_r+0xdc>
 8002382:	f8c8 7000 	str.w	r7, [r8]
 8002386:	e00f      	b.n	80023a8 <_malloc_r+0xa8>
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	1b52      	subs	r2, r2, r5
 800238c:	d420      	bmi.n	80023d0 <_malloc_r+0xd0>
 800238e:	2a0b      	cmp	r2, #11
 8002390:	d917      	bls.n	80023c2 <_malloc_r+0xc2>
 8002392:	1961      	adds	r1, r4, r5
 8002394:	42a3      	cmp	r3, r4
 8002396:	6025      	str	r5, [r4, #0]
 8002398:	bf18      	it	ne
 800239a:	6059      	strne	r1, [r3, #4]
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	bf08      	it	eq
 80023a0:	f8c8 1000 	streq.w	r1, [r8]
 80023a4:	5162      	str	r2, [r4, r5]
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 f82f 	bl	800240c <__malloc_unlock>
 80023ae:	f104 000b 	add.w	r0, r4, #11
 80023b2:	1d23      	adds	r3, r4, #4
 80023b4:	f020 0007 	bic.w	r0, r0, #7
 80023b8:	1ac2      	subs	r2, r0, r3
 80023ba:	bf1c      	itt	ne
 80023bc:	1a1b      	subne	r3, r3, r0
 80023be:	50a3      	strne	r3, [r4, r2]
 80023c0:	e7af      	b.n	8002322 <_malloc_r+0x22>
 80023c2:	6862      	ldr	r2, [r4, #4]
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	bf0c      	ite	eq
 80023c8:	f8c8 2000 	streq.w	r2, [r8]
 80023cc:	605a      	strne	r2, [r3, #4]
 80023ce:	e7eb      	b.n	80023a8 <_malloc_r+0xa8>
 80023d0:	4623      	mov	r3, r4
 80023d2:	6864      	ldr	r4, [r4, #4]
 80023d4:	e7ae      	b.n	8002334 <_malloc_r+0x34>
 80023d6:	463c      	mov	r4, r7
 80023d8:	687f      	ldr	r7, [r7, #4]
 80023da:	e7b6      	b.n	800234a <_malloc_r+0x4a>
 80023dc:	461a      	mov	r2, r3
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	42a3      	cmp	r3, r4
 80023e2:	d1fb      	bne.n	80023dc <_malloc_r+0xdc>
 80023e4:	2300      	movs	r3, #0
 80023e6:	6053      	str	r3, [r2, #4]
 80023e8:	e7de      	b.n	80023a8 <_malloc_r+0xa8>
 80023ea:	230c      	movs	r3, #12
 80023ec:	6033      	str	r3, [r6, #0]
 80023ee:	4630      	mov	r0, r6
 80023f0:	f000 f80c 	bl	800240c <__malloc_unlock>
 80023f4:	e794      	b.n	8002320 <_malloc_r+0x20>
 80023f6:	6005      	str	r5, [r0, #0]
 80023f8:	e7d6      	b.n	80023a8 <_malloc_r+0xa8>
 80023fa:	bf00      	nop
 80023fc:	20000264 	.word	0x20000264

08002400 <__malloc_lock>:
 8002400:	4801      	ldr	r0, [pc, #4]	@ (8002408 <__malloc_lock+0x8>)
 8002402:	f7ff bf0e 	b.w	8002222 <__retarget_lock_acquire_recursive>
 8002406:	bf00      	nop
 8002408:	2000025c 	.word	0x2000025c

0800240c <__malloc_unlock>:
 800240c:	4801      	ldr	r0, [pc, #4]	@ (8002414 <__malloc_unlock+0x8>)
 800240e:	f7ff bf09 	b.w	8002224 <__retarget_lock_release_recursive>
 8002412:	bf00      	nop
 8002414:	2000025c 	.word	0x2000025c

08002418 <__sflush_r>:
 8002418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002420:	0716      	lsls	r6, r2, #28
 8002422:	4605      	mov	r5, r0
 8002424:	460c      	mov	r4, r1
 8002426:	d454      	bmi.n	80024d2 <__sflush_r+0xba>
 8002428:	684b      	ldr	r3, [r1, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	dc02      	bgt.n	8002434 <__sflush_r+0x1c>
 800242e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	dd48      	ble.n	80024c6 <__sflush_r+0xae>
 8002434:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002436:	2e00      	cmp	r6, #0
 8002438:	d045      	beq.n	80024c6 <__sflush_r+0xae>
 800243a:	2300      	movs	r3, #0
 800243c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002440:	682f      	ldr	r7, [r5, #0]
 8002442:	6a21      	ldr	r1, [r4, #32]
 8002444:	602b      	str	r3, [r5, #0]
 8002446:	d030      	beq.n	80024aa <__sflush_r+0x92>
 8002448:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	0759      	lsls	r1, r3, #29
 800244e:	d505      	bpl.n	800245c <__sflush_r+0x44>
 8002450:	6863      	ldr	r3, [r4, #4]
 8002452:	1ad2      	subs	r2, r2, r3
 8002454:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002456:	b10b      	cbz	r3, 800245c <__sflush_r+0x44>
 8002458:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	2300      	movs	r3, #0
 800245e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002460:	6a21      	ldr	r1, [r4, #32]
 8002462:	4628      	mov	r0, r5
 8002464:	47b0      	blx	r6
 8002466:	1c43      	adds	r3, r0, #1
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	d106      	bne.n	800247a <__sflush_r+0x62>
 800246c:	6829      	ldr	r1, [r5, #0]
 800246e:	291d      	cmp	r1, #29
 8002470:	d82b      	bhi.n	80024ca <__sflush_r+0xb2>
 8002472:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <__sflush_r+0x104>)
 8002474:	410a      	asrs	r2, r1
 8002476:	07d6      	lsls	r6, r2, #31
 8002478:	d427      	bmi.n	80024ca <__sflush_r+0xb2>
 800247a:	2200      	movs	r2, #0
 800247c:	6062      	str	r2, [r4, #4]
 800247e:	04d9      	lsls	r1, r3, #19
 8002480:	6922      	ldr	r2, [r4, #16]
 8002482:	6022      	str	r2, [r4, #0]
 8002484:	d504      	bpl.n	8002490 <__sflush_r+0x78>
 8002486:	1c42      	adds	r2, r0, #1
 8002488:	d101      	bne.n	800248e <__sflush_r+0x76>
 800248a:	682b      	ldr	r3, [r5, #0]
 800248c:	b903      	cbnz	r3, 8002490 <__sflush_r+0x78>
 800248e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002492:	602f      	str	r7, [r5, #0]
 8002494:	b1b9      	cbz	r1, 80024c6 <__sflush_r+0xae>
 8002496:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800249a:	4299      	cmp	r1, r3
 800249c:	d002      	beq.n	80024a4 <__sflush_r+0x8c>
 800249e:	4628      	mov	r0, r5
 80024a0:	f7ff fec2 	bl	8002228 <_free_r>
 80024a4:	2300      	movs	r3, #0
 80024a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80024a8:	e00d      	b.n	80024c6 <__sflush_r+0xae>
 80024aa:	2301      	movs	r3, #1
 80024ac:	4628      	mov	r0, r5
 80024ae:	47b0      	blx	r6
 80024b0:	4602      	mov	r2, r0
 80024b2:	1c50      	adds	r0, r2, #1
 80024b4:	d1c9      	bne.n	800244a <__sflush_r+0x32>
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0c6      	beq.n	800244a <__sflush_r+0x32>
 80024bc:	2b1d      	cmp	r3, #29
 80024be:	d001      	beq.n	80024c4 <__sflush_r+0xac>
 80024c0:	2b16      	cmp	r3, #22
 80024c2:	d11e      	bne.n	8002502 <__sflush_r+0xea>
 80024c4:	602f      	str	r7, [r5, #0]
 80024c6:	2000      	movs	r0, #0
 80024c8:	e022      	b.n	8002510 <__sflush_r+0xf8>
 80024ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	e01b      	b.n	800250a <__sflush_r+0xf2>
 80024d2:	690f      	ldr	r7, [r1, #16]
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	d0f6      	beq.n	80024c6 <__sflush_r+0xae>
 80024d8:	0793      	lsls	r3, r2, #30
 80024da:	680e      	ldr	r6, [r1, #0]
 80024dc:	bf08      	it	eq
 80024de:	694b      	ldreq	r3, [r1, #20]
 80024e0:	600f      	str	r7, [r1, #0]
 80024e2:	bf18      	it	ne
 80024e4:	2300      	movne	r3, #0
 80024e6:	eba6 0807 	sub.w	r8, r6, r7
 80024ea:	608b      	str	r3, [r1, #8]
 80024ec:	f1b8 0f00 	cmp.w	r8, #0
 80024f0:	dde9      	ble.n	80024c6 <__sflush_r+0xae>
 80024f2:	6a21      	ldr	r1, [r4, #32]
 80024f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80024f6:	4643      	mov	r3, r8
 80024f8:	463a      	mov	r2, r7
 80024fa:	4628      	mov	r0, r5
 80024fc:	47b0      	blx	r6
 80024fe:	2800      	cmp	r0, #0
 8002500:	dc08      	bgt.n	8002514 <__sflush_r+0xfc>
 8002502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800250a:	81a3      	strh	r3, [r4, #12]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	4407      	add	r7, r0
 8002516:	eba8 0800 	sub.w	r8, r8, r0
 800251a:	e7e7      	b.n	80024ec <__sflush_r+0xd4>
 800251c:	dfbffffe 	.word	0xdfbffffe

08002520 <_fflush_r>:
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	690b      	ldr	r3, [r1, #16]
 8002524:	4605      	mov	r5, r0
 8002526:	460c      	mov	r4, r1
 8002528:	b913      	cbnz	r3, 8002530 <_fflush_r+0x10>
 800252a:	2500      	movs	r5, #0
 800252c:	4628      	mov	r0, r5
 800252e:	bd38      	pop	{r3, r4, r5, pc}
 8002530:	b118      	cbz	r0, 800253a <_fflush_r+0x1a>
 8002532:	6a03      	ldr	r3, [r0, #32]
 8002534:	b90b      	cbnz	r3, 800253a <_fflush_r+0x1a>
 8002536:	f7ff fc8f 	bl	8001e58 <__sinit>
 800253a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f3      	beq.n	800252a <_fflush_r+0xa>
 8002542:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002544:	07d0      	lsls	r0, r2, #31
 8002546:	d404      	bmi.n	8002552 <_fflush_r+0x32>
 8002548:	0599      	lsls	r1, r3, #22
 800254a:	d402      	bmi.n	8002552 <_fflush_r+0x32>
 800254c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800254e:	f7ff fe68 	bl	8002222 <__retarget_lock_acquire_recursive>
 8002552:	4628      	mov	r0, r5
 8002554:	4621      	mov	r1, r4
 8002556:	f7ff ff5f 	bl	8002418 <__sflush_r>
 800255a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800255c:	07da      	lsls	r2, r3, #31
 800255e:	4605      	mov	r5, r0
 8002560:	d4e4      	bmi.n	800252c <_fflush_r+0xc>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	059b      	lsls	r3, r3, #22
 8002566:	d4e1      	bmi.n	800252c <_fflush_r+0xc>
 8002568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800256a:	f7ff fe5b 	bl	8002224 <__retarget_lock_release_recursive>
 800256e:	e7dd      	b.n	800252c <_fflush_r+0xc>

08002570 <__swhatbuf_r>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	460c      	mov	r4, r1
 8002574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002578:	2900      	cmp	r1, #0
 800257a:	b096      	sub	sp, #88	@ 0x58
 800257c:	4615      	mov	r5, r2
 800257e:	461e      	mov	r6, r3
 8002580:	da0d      	bge.n	800259e <__swhatbuf_r+0x2e>
 8002582:	89a3      	ldrh	r3, [r4, #12]
 8002584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	bf14      	ite	ne
 800258e:	2340      	movne	r3, #64	@ 0x40
 8002590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002594:	2000      	movs	r0, #0
 8002596:	6031      	str	r1, [r6, #0]
 8002598:	602b      	str	r3, [r5, #0]
 800259a:	b016      	add	sp, #88	@ 0x58
 800259c:	bd70      	pop	{r4, r5, r6, pc}
 800259e:	466a      	mov	r2, sp
 80025a0:	f000 f848 	bl	8002634 <_fstat_r>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	dbec      	blt.n	8002582 <__swhatbuf_r+0x12>
 80025a8:	9901      	ldr	r1, [sp, #4]
 80025aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80025ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025b2:	4259      	negs	r1, r3
 80025b4:	4159      	adcs	r1, r3
 80025b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ba:	e7eb      	b.n	8002594 <__swhatbuf_r+0x24>

080025bc <__smakebuf_r>:
 80025bc:	898b      	ldrh	r3, [r1, #12]
 80025be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025c0:	079d      	lsls	r5, r3, #30
 80025c2:	4606      	mov	r6, r0
 80025c4:	460c      	mov	r4, r1
 80025c6:	d507      	bpl.n	80025d8 <__smakebuf_r+0x1c>
 80025c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80025cc:	6023      	str	r3, [r4, #0]
 80025ce:	6123      	str	r3, [r4, #16]
 80025d0:	2301      	movs	r3, #1
 80025d2:	6163      	str	r3, [r4, #20]
 80025d4:	b003      	add	sp, #12
 80025d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d8:	ab01      	add	r3, sp, #4
 80025da:	466a      	mov	r2, sp
 80025dc:	f7ff ffc8 	bl	8002570 <__swhatbuf_r>
 80025e0:	9f00      	ldr	r7, [sp, #0]
 80025e2:	4605      	mov	r5, r0
 80025e4:	4639      	mov	r1, r7
 80025e6:	4630      	mov	r0, r6
 80025e8:	f7ff fe8a 	bl	8002300 <_malloc_r>
 80025ec:	b948      	cbnz	r0, 8002602 <__smakebuf_r+0x46>
 80025ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025f2:	059a      	lsls	r2, r3, #22
 80025f4:	d4ee      	bmi.n	80025d4 <__smakebuf_r+0x18>
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	81a3      	strh	r3, [r4, #12]
 8002600:	e7e2      	b.n	80025c8 <__smakebuf_r+0xc>
 8002602:	89a3      	ldrh	r3, [r4, #12]
 8002604:	6020      	str	r0, [r4, #0]
 8002606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800260a:	81a3      	strh	r3, [r4, #12]
 800260c:	9b01      	ldr	r3, [sp, #4]
 800260e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002612:	b15b      	cbz	r3, 800262c <__smakebuf_r+0x70>
 8002614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002618:	4630      	mov	r0, r6
 800261a:	f000 f81d 	bl	8002658 <_isatty_r>
 800261e:	b128      	cbz	r0, 800262c <__smakebuf_r+0x70>
 8002620:	89a3      	ldrh	r3, [r4, #12]
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	81a3      	strh	r3, [r4, #12]
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	431d      	orrs	r5, r3
 8002630:	81a5      	strh	r5, [r4, #12]
 8002632:	e7cf      	b.n	80025d4 <__smakebuf_r+0x18>

08002634 <_fstat_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4d07      	ldr	r5, [pc, #28]	@ (8002654 <_fstat_r+0x20>)
 8002638:	2300      	movs	r3, #0
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	602b      	str	r3, [r5, #0]
 8002642:	f7fe f90a 	bl	800085a <_fstat>
 8002646:	1c43      	adds	r3, r0, #1
 8002648:	d102      	bne.n	8002650 <_fstat_r+0x1c>
 800264a:	682b      	ldr	r3, [r5, #0]
 800264c:	b103      	cbz	r3, 8002650 <_fstat_r+0x1c>
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	bd38      	pop	{r3, r4, r5, pc}
 8002652:	bf00      	nop
 8002654:	20000258 	.word	0x20000258

08002658 <_isatty_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	4d06      	ldr	r5, [pc, #24]	@ (8002674 <_isatty_r+0x1c>)
 800265c:	2300      	movs	r3, #0
 800265e:	4604      	mov	r4, r0
 8002660:	4608      	mov	r0, r1
 8002662:	602b      	str	r3, [r5, #0]
 8002664:	f7fe f8fe 	bl	8000864 <_isatty>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	d102      	bne.n	8002672 <_isatty_r+0x1a>
 800266c:	682b      	ldr	r3, [r5, #0]
 800266e:	b103      	cbz	r3, 8002672 <_isatty_r+0x1a>
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	bd38      	pop	{r3, r4, r5, pc}
 8002674:	20000258 	.word	0x20000258

08002678 <_sbrk_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4d06      	ldr	r5, [pc, #24]	@ (8002694 <_sbrk_r+0x1c>)
 800267c:	2300      	movs	r3, #0
 800267e:	4604      	mov	r4, r0
 8002680:	4608      	mov	r0, r1
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	f7fe f8f2 	bl	800086c <_sbrk>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	d102      	bne.n	8002692 <_sbrk_r+0x1a>
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	b103      	cbz	r3, 8002692 <_sbrk_r+0x1a>
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	bd38      	pop	{r3, r4, r5, pc}
 8002694:	20000258 	.word	0x20000258

08002698 <_init>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr

080026a4 <_fini>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr
