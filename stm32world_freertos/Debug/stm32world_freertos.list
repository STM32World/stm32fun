
stm32world_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008328  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080084b8  080084b8  000094b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad8  08008ad8  0001b000  2**0
                  CONTENTS
  4 .ARM          00000008  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae0  08008ae0  0001b000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae0  08008ae0  00009ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ae4  08008ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008ae8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00010000  10000000  08008cc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000011d8  200001d8  200001d8  0001b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013b0  200013b0  0001b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001b000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c56  00000000  00000000  0001b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d3b  00000000  00000000  0003cc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f5f0  00000000  00000000  000409c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001648  00000000  00000000  0004ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001224  00000000  00000000  00051600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004ec3  00000000  00000000  00052824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000203f0  00000000  00000000  000576e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf8f0  00000000  00000000  00077ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001473c7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ff0  00000000  00000000  0014740c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0014c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084a0 	.word	0x080084a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080084a0 	.word	0x080084a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	9405      	str	r4, [sp, #20]
 8000ea0:	9406      	str	r4, [sp, #24]
 8000ea2:	9407      	str	r4, [sp, #28]
 8000ea4:	9408      	str	r4, [sp, #32]
 8000ea6:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	9401      	str	r4, [sp, #4]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_GPIO_Init+0x98>)
 8000eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eae:	f042 0204 	orr.w	r2, r2, #4
 8000eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb6:	f002 0204 	and.w	r2, r2, #4
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	9402      	str	r4, [sp, #8]
 8000ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ece:	9202      	str	r2, [sp, #8]
 8000ed0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	9403      	str	r4, [sp, #12]
 8000ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8000edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ede:	f002 0201 	and.w	r2, r2, #1
 8000ee2:	9203      	str	r2, [sp, #12]
 8000ee4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	9404      	str	r4, [sp, #16]
 8000ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eea:	f042 0202 	orr.w	r2, r2, #2
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	9304      	str	r3, [sp, #16]
 8000ef8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000efa:	4d0e      	ldr	r5, [pc, #56]	@ (8000f34 <MX_GPIO_Init+0x9c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f02:	4628      	mov	r0, r5
 8000f04:	f001 f8e0 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSE_GPIO_Port, PULSE_Pin, GPIO_PIN_RESET);
 8000f08:	4622      	mov	r2, r4
 8000f0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f001 f8da 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PULSE_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PULSE_Pin;
 8000f14:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	a905      	add	r1, sp, #20
 8000f24:	4628      	mov	r0, r5
 8000f26:	f000 ffd9 	bl	8001edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2a:	b00b      	add	sp, #44	@ 0x2c
 8000f2c:	bd30      	pop	{r4, r5, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800

08000f38 <MX_DMA_Init>:
{
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	9401      	str	r4, [sp, #4]
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <MX_DMA_Init+0x40>)
 8000f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f44:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f54:	4622      	mov	r2, r4
 8000f56:	2105      	movs	r1, #5
 8000f58:	2010      	movs	r0, #16
 8000f5a:	f000 fda9 	bl	8001ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f5e:	2010      	movs	r0, #16
 8000f60:	f000 fdb6 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f64:	4622      	mov	r2, r4
 8000f66:	2105      	movs	r1, #5
 8000f68:	2011      	movs	r0, #17
 8000f6a:	f000 fda1 	bl	8001ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f000 fdae 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8000f74:	b002      	add	sp, #8
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	40023800 	.word	0x40023800

08000f7c <StartSineTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSineTask */
void StartSineTask(void *argument)
{
 8000f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartSineTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f002 f8d0 	bl	8003124 <osDelay>
  for(;;)
 8000f84:	e7fb      	b.n	8000f7e <StartSineTask+0x2>
	...

08000f88 <StartDefaultTask>:
{
 8000f88:	b530      	push	{r4, r5, lr}
 8000f8a:	b083      	sub	sp, #12
    uint8_t toggle = 0;
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	e008      	b.n	8000fa2 <StartDefaultTask+0x1a>
            osMessageQueuePut(tickQueueHandle, &tick, 0, osWaitForever);
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f94:	2200      	movs	r2, #0
 8000f96:	a901      	add	r1, sp, #4
 8000f98:	480a      	ldr	r0, [pc, #40]	@ (8000fc4 <StartDefaultTask+0x3c>)
 8000f9a:	6800      	ldr	r0, [r0, #0]
 8000f9c:	f002 fa76 	bl	800348c <osMessageQueuePut>
        toggle = !toggle;
 8000fa0:	462c      	mov	r4, r5
        osDelay(500);
 8000fa2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa6:	f002 f8bd 	bl	8003124 <osDelay>
        toggle = !toggle;
 8000faa:	f084 0501 	eor.w	r5, r4, #1
        osSemaphoreRelease(ledSemaphoreHandle);
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <StartDefaultTask+0x40>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f002 f9f1 	bl	8003398 <osSemaphoreRelease>
        uint32_t tick = osKernelGetTickCount();
 8000fb6:	f002 f84d 	bl	8003054 <osKernelGetTickCount>
 8000fba:	9001      	str	r0, [sp, #4]
        if (!toggle) { // Only every second time
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	d0ef      	beq.n	8000fa0 <StartDefaultTask+0x18>
 8000fc0:	e7e6      	b.n	8000f90 <StartDefaultTask+0x8>
 8000fc2:	bf00      	nop
 8000fc4:	2000020c 	.word	0x2000020c
 8000fc8:	200001fc 	.word	0x200001fc

08000fcc <StartPulseTask>:
{
 8000fcc:	b508      	push	{r3, lr}
        ret = osSemaphoreAcquire(pulseSemaphoreHandle, osWaitForever);
 8000fce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <StartPulseTask+0x24>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	f002 f9ab 	bl	8003330 <osSemaphoreAcquire>
        if (!ret) {
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d1f7      	bne.n	8000fce <StartPulseTask+0x2>
            HAL_GPIO_TogglePin(PULSE_GPIO_Port, PULSE_Pin);
 8000fde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe2:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8000fe6:	f500 3002 	add.w	r0, r0, #133120	@ 0x20800
 8000fea:	f001 f873 	bl	80020d4 <HAL_GPIO_TogglePin>
 8000fee:	e7ee      	b.n	8000fce <StartPulseTask+0x2>
 8000ff0:	200001f8 	.word	0x200001f8

08000ff4 <StartLedTask>:
{
 8000ff4:	b510      	push	{r4, lr}
        ret = osSemaphoreAcquire(ledSemaphoreHandle, osWaitForever);
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <StartLedTask+0x30>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f002 f997 	bl	8003330 <osSemaphoreAcquire>
        if (!ret) {
 8001002:	2800      	cmp	r0, #0
 8001004:	d1f7      	bne.n	8000ff6 <StartLedTask+0x2>
            osMutexWait(ledMutexHandle, osWaitForever);
 8001006:	4c08      	ldr	r4, [pc, #32]	@ (8001028 <StartLedTask+0x34>)
 8001008:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	f002 f8e0 	bl	80031d2 <osMutexAcquire>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001012:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <StartLedTask+0x38>)
 8001018:	f001 f85c 	bl	80020d4 <HAL_GPIO_TogglePin>
            osMutexRelease(ledMutexHandle);
 800101c:	6820      	ldr	r0, [r4, #0]
 800101e:	f002 f907 	bl	8003230 <osMutexRelease>
 8001022:	e7e8      	b.n	8000ff6 <StartLedTask+0x2>
 8001024:	200001fc 	.word	0x200001fc
 8001028:	20000200 	.word	0x20000200
 800102c:	40020800 	.word	0x40020800

08001030 <StartTickTask>:
{
 8001030:	b510      	push	{r4, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	e010      	b.n	8001058 <StartTickTask+0x28>
            osMutexWait(printMutexHandle, osWaitForever);
 8001036:	4c0e      	ldr	r4, [pc, #56]	@ (8001070 <StartTickTask+0x40>)
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	f002 f8c8 	bl	80031d2 <osMutexAcquire>
            printf("Tick %lu\n", tick / 1000);
 8001042:	9901      	ldr	r1, [sp, #4]
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <StartTickTask+0x44>)
 8001046:	fba3 3101 	umull	r3, r1, r3, r1
 800104a:	0989      	lsrs	r1, r1, #6
 800104c:	480a      	ldr	r0, [pc, #40]	@ (8001078 <StartTickTask+0x48>)
 800104e:	f005 f9fb 	bl	8006448 <iprintf>
            osMutexRelease(printMutexHandle);
 8001052:	6820      	ldr	r0, [r4, #0]
 8001054:	f002 f8ec 	bl	8003230 <osMutexRelease>
        ret = osMessageQueueGet(tickQueueHandle, &tick, NULL, osWaitForever);
 8001058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105c:	2200      	movs	r2, #0
 800105e:	a901      	add	r1, sp, #4
 8001060:	4806      	ldr	r0, [pc, #24]	@ (800107c <StartTickTask+0x4c>)
 8001062:	6800      	ldr	r0, [r0, #0]
 8001064:	f002 fa54 	bl	8003510 <osMessageQueueGet>
        if (ret == osOK) {
 8001068:	2800      	cmp	r0, #0
 800106a:	d1f5      	bne.n	8001058 <StartTickTask+0x28>
 800106c:	e7e3      	b.n	8001036 <StartTickTask+0x6>
 800106e:	bf00      	nop
 8001070:	20000204 	.word	0x20000204
 8001074:	10624dd3 	.word	0x10624dd3
 8001078:	080084b8 	.word	0x080084b8
 800107c:	2000020c 	.word	0x2000020c

08001080 <StartStatusTask>:
{
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	e040      	b.n	8001108 <StartStatusTask+0x88>
                        * (float) pxTaskStatusArray[x].ulRunTimeCounter
 8001086:	9b06      	ldr	r3, [sp, #24]
 8001088:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800108c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001090:	edd3 7a06 	vldr	s15, [r3, #24]
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800115c <StartStatusTask+0xdc>
 800109c:	ee67 7a87 	vmul.f32	s15, s15, s14
                        / (float) ulTotalRunTime);
 80010a0:	ed9d 7a05 	vldr	s14, [sp, #20]
 80010a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                printf("Task %lu: %-12s %2d %8.4f %4i\n", x,
 80010a8:	9d06      	ldr	r5, [sp, #24]
                        pxTaskStatusArray[x].pcTaskName,
 80010aa:	9b06      	ldr	r3, [sp, #24]
 80010ac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80010b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                        pxTaskStatusArray[x].eCurrentState, runtime_percent,
 80010b4:	9a06      	ldr	r2, [sp, #24]
 80010b6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80010ba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80010be:	7b17      	ldrb	r7, [r2, #12]
                        pxTaskStatusArray[x].usStackHighWaterMark);
 80010c0:	9a06      	ldr	r2, [sp, #24]
 80010c2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80010c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80010ca:	8c12      	ldrh	r2, [r2, #32]
                printf("Task %lu: %-12s %2d %8.4f %4i\n", x,
 80010cc:	685e      	ldr	r6, [r3, #4]
 80010ce:	9202      	str	r2, [sp, #8]
 80010d0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	e9cd 0100 	strd	r0, r1, [sp]
 80010e0:	463b      	mov	r3, r7
 80010e2:	4632      	mov	r2, r6
 80010e4:	4629      	mov	r1, r5
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <StartStatusTask+0xe0>)
 80010e8:	f005 f9ae 	bl	8006448 <iprintf>
            for (x = 0; x < uxArraySize; x++) {
 80010ec:	9b06      	ldr	r3, [sp, #24]
 80010ee:	3301      	adds	r3, #1
 80010f0:	9306      	str	r3, [sp, #24]
 80010f2:	9a06      	ldr	r2, [sp, #24]
 80010f4:	9b07      	ldr	r3, [sp, #28]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3c5      	bcc.n	8001086 <StartStatusTask+0x6>
            vPortFree(pxTaskStatusArray);
 80010fa:	4620      	mov	r0, r4
 80010fc:	f004 fc4c 	bl	8005998 <vPortFree>
        osMutexRelease(printMutexHandle);
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <StartStatusTask+0xe4>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	f002 f894 	bl	8003230 <osMutexRelease>
        osDelay(10000);
 8001108:	f242 7010 	movw	r0, #10000	@ 0x2710
 800110c:	f002 f80a 	bl	8003124 <osDelay>
        uxArraySize = uxTaskGetNumberOfTasks();
 8001110:	f003 fb3e 	bl	8004790 <uxTaskGetNumberOfTasks>
 8001114:	9007      	str	r0, [sp, #28]
        pxTaskStatusArray = pvPortMalloc(uxArraySize * sizeof(TaskStatus_t)); // a little bit scary!
 8001116:	9807      	ldr	r0, [sp, #28]
 8001118:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800111c:	0080      	lsls	r0, r0, #2
 800111e:	f004 fbb9 	bl	8005894 <pvPortMalloc>
 8001122:	4604      	mov	r4, r0
        osMutexWait(printMutexHandle, osWaitForever);
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <StartStatusTask+0xe4>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f002 f851 	bl	80031d2 <osMutexAcquire>
        if (pxTaskStatusArray != NULL) {
 8001130:	b17c      	cbz	r4, 8001152 <StartStatusTask+0xd2>
            uxArraySize = uxTaskGetSystemState(pxTaskStatusArray, uxArraySize,
 8001132:	9907      	ldr	r1, [sp, #28]
 8001134:	aa05      	add	r2, sp, #20
 8001136:	4620      	mov	r0, r4
 8001138:	f003 fdfe 	bl	8004d38 <uxTaskGetSystemState>
 800113c:	9007      	str	r0, [sp, #28]
            printf("Task count = %lu\n", uxArraySize);
 800113e:	9907      	ldr	r1, [sp, #28]
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <StartStatusTask+0xe8>)
 8001142:	f005 f981 	bl	8006448 <iprintf>
            printf("No      Name          S  Usage   HW\n");
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <StartStatusTask+0xec>)
 8001148:	f005 f9e6 	bl	8006518 <puts>
            for (x = 0; x < uxArraySize; x++) {
 800114c:	2300      	movs	r3, #0
 800114e:	9306      	str	r3, [sp, #24]
 8001150:	e7cf      	b.n	80010f2 <StartStatusTask+0x72>
            printf("Unable to allocate stack space\n");
 8001152:	4807      	ldr	r0, [pc, #28]	@ (8001170 <StartStatusTask+0xf0>)
 8001154:	f005 f9e0 	bl	8006518 <puts>
 8001158:	e7d2      	b.n	8001100 <StartStatusTask+0x80>
 800115a:	bf00      	nop
 800115c:	42c80000 	.word	0x42c80000
 8001160:	080084fc 	.word	0x080084fc
 8001164:	20000204 	.word	0x20000204
 8001168:	080084c4 	.word	0x080084c4
 800116c:	080084d8 	.word	0x080084d8
 8001170:	0800851c 	.word	0x0800851c

08001174 <_write>:
    if (fd == 1 || fd == 2) {
 8001174:	3801      	subs	r0, #1
 8001176:	2801      	cmp	r0, #1
 8001178:	d80a      	bhi.n	8001190 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800117a:	b510      	push	{r4, lr}
 800117c:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001182:	b292      	uxth	r2, r2
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <_write+0x28>)
 8001186:	f001 fec4 	bl	8002f12 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800118a:	b920      	cbnz	r0, 8001196 <_write+0x22>
            return len;
 800118c:	4620      	mov	r0, r4
}
 800118e:	bd10      	pop	{r4, pc}
    return -1;
 8001190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001194:	4770      	bx	lr
            return -1;
 8001196:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800119a:	e7f8      	b.n	800118e <_write+0x1a>
 800119c:	20000228 	.word	0x20000228

080011a0 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void) {
 80011a0:	b508      	push	{r3, lr}
    ulHighFrequencyTimerTicks = 0;
 80011a2:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <configureTimerForRunTimeStats+0x10>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim13);
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <configureTimerForRunTimeStats+0x14>)
 80011aa:	f001 fb25 	bl	80027f8 <HAL_TIM_Base_Start_IT>
}
 80011ae:	bd08      	pop	{r3, pc}
 80011b0:	200001f4 	.word	0x200001f4
 80011b4:	20000270 	.word	0x20000270

080011b8 <getRunTimeCounterValue>:
    return ulHighFrequencyTimerTicks;
 80011b8:	4b01      	ldr	r3, [pc, #4]	@ (80011c0 <getRunTimeCounterValue+0x8>)
 80011ba:	6818      	ldr	r0, [r3, #0]
}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	200001f4 	.word	0x200001f4

080011c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b510      	push	{r4, lr}
 80011c6:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

    if (htim->Instance == TIM4) {
 80011c8:	6802      	ldr	r2, [r0, #0]
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d004      	beq.n	80011da <HAL_TIM_PeriodElapsedCallback+0x16>
        osSemaphoreRelease(pulseSemaphoreHandle);
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d005      	beq.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d8:	bd10      	pop	{r4, pc}
        osSemaphoreRelease(pulseSemaphoreHandle);
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	f002 f8db 	bl	8003398 <osSemaphoreRelease>
 80011e2:	e7f5      	b.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80011e4:	f000 fbfe 	bl	80019e4 <HAL_IncTick>
}
 80011e8:	e7f6      	b.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x14>
 80011ea:	bf00      	nop
 80011ec:	40000800 	.word	0x40000800
 80011f0:	40002000 	.word	0x40002000
 80011f4:	200001f8 	.word	0x200001f8

080011f8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80011fa:	e7fe      	b.n	80011fa <Error_Handler+0x2>

080011fc <MX_USART1_UART_Init>:
{
 80011fc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80011fe:	480a      	ldr	r0, [pc, #40]	@ (8001228 <MX_USART1_UART_Init+0x2c>)
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <MX_USART1_UART_Init+0x30>)
 8001202:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8001204:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001208:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	2300      	movs	r3, #0
 800120c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800120e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001210:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001212:	220c      	movs	r2, #12
 8001214:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121a:	f001 fe4a 	bl	8002eb2 <HAL_UART_Init>
 800121e:	b900      	cbnz	r0, 8001222 <MX_USART1_UART_Init+0x26>
}
 8001220:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001222:	f7ff ffe9 	bl	80011f8 <Error_Handler>
 8001226:	bf00      	nop
 8001228:	20000228 	.word	0x20000228
 800122c:	40011000 	.word	0x40011000

08001230 <MX_TIM13_Init>:
{
 8001230:	b508      	push	{r3, lr}
  htim13.Instance = TIM13;
 8001232:	4808      	ldr	r0, [pc, #32]	@ (8001254 <MX_TIM13_Init+0x24>)
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_TIM13_Init+0x28>)
 8001236:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 840-1;
 800123e:	f240 3247 	movw	r2, #839	@ 0x347
 8001242:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001248:	f001 fc3a 	bl	8002ac0 <HAL_TIM_Base_Init>
 800124c:	b900      	cbnz	r0, 8001250 <MX_TIM13_Init+0x20>
}
 800124e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001250:	f7ff ffd2 	bl	80011f8 <Error_Handler>
 8001254:	20000270 	.word	0x20000270
 8001258:	40001c00 	.word	0x40001c00

0800125c <MX_TIM4_Init>:
{
 800125c:	b500      	push	{lr}
 800125e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	9304      	str	r3, [sp, #16]
 8001268:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	9301      	str	r3, [sp, #4]
  htim4.Instance = TIM4;
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <MX_TIM4_Init+0x60>)
 8001270:	4a13      	ldr	r2, [pc, #76]	@ (80012c0 <MX_TIM4_Init+0x64>)
 8001272:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 84 - 1;
 8001274:	2253      	movs	r2, #83	@ 0x53
 8001276:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 25 - 1;
 800127a:	2218      	movs	r2, #24
 800127c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001282:	f001 fc1d 	bl	8002ac0 <HAL_TIM_Base_Init>
 8001286:	b990      	cbnz	r0, 80012ae <MX_TIM4_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800128e:	a902      	add	r1, sp, #8
 8001290:	480a      	ldr	r0, [pc, #40]	@ (80012bc <MX_TIM4_Init+0x60>)
 8001292:	f001 fc4e 	bl	8002b32 <HAL_TIM_ConfigClockSource>
 8001296:	b960      	cbnz	r0, 80012b2 <MX_TIM4_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800129e:	4669      	mov	r1, sp
 80012a0:	4806      	ldr	r0, [pc, #24]	@ (80012bc <MX_TIM4_Init+0x60>)
 80012a2:	f001 fcc5 	bl	8002c30 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	b930      	cbnz	r0, 80012b6 <MX_TIM4_Init+0x5a>
}
 80012a8:	b007      	add	sp, #28
 80012aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012ae:	f7ff ffa3 	bl	80011f8 <Error_Handler>
    Error_Handler();
 80012b2:	f7ff ffa1 	bl	80011f8 <Error_Handler>
    Error_Handler();
 80012b6:	f7ff ff9f 	bl	80011f8 <Error_Handler>
 80012ba:	bf00      	nop
 80012bc:	20000300 	.word	0x20000300
 80012c0:	40000800 	.word	0x40000800

080012c4 <MX_DAC_Init>:
{
 80012c4:	b500      	push	{lr}
 80012c6:	b083      	sub	sp, #12
  DAC_ChannelConfTypeDef sConfig = {0};
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	9301      	str	r3, [sp, #4]
  hdac.Instance = DAC;
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <MX_DAC_Init+0x48>)
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_DAC_Init+0x4c>)
 80012d2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012d4:	f000 fc00 	bl	8001ad8 <HAL_DAC_Init>
 80012d8:	b988      	cbnz	r0, 80012fe <MX_DAC_Init+0x3a>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80012da:	2304      	movs	r3, #4
 80012dc:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012de:	2200      	movs	r2, #0
 80012e0:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012e2:	4669      	mov	r1, sp
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <MX_DAC_Init+0x48>)
 80012e6:	f000 fc09 	bl	8001afc <HAL_DAC_ConfigChannel>
 80012ea:	b950      	cbnz	r0, 8001302 <MX_DAC_Init+0x3e>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012ec:	2210      	movs	r2, #16
 80012ee:	4669      	mov	r1, sp
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <MX_DAC_Init+0x48>)
 80012f2:	f000 fc03 	bl	8001afc <HAL_DAC_ConfigChannel>
 80012f6:	b930      	cbnz	r0, 8001306 <MX_DAC_Init+0x42>
}
 80012f8:	b003      	add	sp, #12
 80012fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012fe:	f7ff ff7b 	bl	80011f8 <Error_Handler>
    Error_Handler();
 8001302:	f7ff ff79 	bl	80011f8 <Error_Handler>
    Error_Handler();
 8001306:	f7ff ff77 	bl	80011f8 <Error_Handler>
 800130a:	bf00      	nop
 800130c:	20000408 	.word	0x20000408
 8001310:	40007400 	.word	0x40007400

08001314 <MX_TIM6_Init>:
{
 8001314:	b500      	push	{lr}
 8001316:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	9301      	str	r3, [sp, #4]
  htim6.Instance = TIM6;
 800131e:	480e      	ldr	r0, [pc, #56]	@ (8001358 <MX_TIM6_Init+0x44>)
 8001320:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <MX_TIM6_Init+0x48>)
 8001322:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 84 - 1;
 8001324:	2253      	movs	r2, #83	@ 0x53
 8001326:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 10 - 1;
 800132a:	2209      	movs	r2, #9
 800132c:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001330:	f001 fbc6 	bl	8002ac0 <HAL_TIM_Base_Init>
 8001334:	b958      	cbnz	r0, 800134e <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001336:	2320      	movs	r3, #32
 8001338:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800133e:	4669      	mov	r1, sp
 8001340:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_TIM6_Init+0x44>)
 8001342:	f001 fc75 	bl	8002c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	b920      	cbnz	r0, 8001352 <MX_TIM6_Init+0x3e>
}
 8001348:	b003      	add	sp, #12
 800134a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800134e:	f7ff ff53 	bl	80011f8 <Error_Handler>
    Error_Handler();
 8001352:	f7ff ff51 	bl	80011f8 <Error_Handler>
 8001356:	bf00      	nop
 8001358:	200002b8 	.word	0x200002b8
 800135c:	40001000 	.word	0x40001000

08001360 <SystemClock_Config>:
{
 8001360:	b500      	push	{lr}
 8001362:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001364:	2230      	movs	r2, #48	@ 0x30
 8001366:	2100      	movs	r1, #0
 8001368:	a808      	add	r0, sp, #32
 800136a:	f005 f9b5 	bl	80066d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136e:	2300      	movs	r3, #0
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	9304      	str	r3, [sp, #16]
 8001374:	9305      	str	r3, [sp, #20]
 8001376:	9306      	str	r3, [sp, #24]
 8001378:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4a20      	ldr	r2, [pc, #128]	@ (8001400 <SystemClock_Config+0xa0>)
 800137e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001380:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001384:	6411      	str	r1, [r2, #64]	@ 0x40
 8001386:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001388:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800138c:	9201      	str	r2, [sp, #4]
 800138e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <SystemClock_Config+0xa4>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ae:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013b8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013ba:	2208      	movs	r2, #8
 80013bc:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013be:	22a8      	movs	r2, #168	@ 0xa8
 80013c0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c4:	2304      	movs	r3, #4
 80013c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	a808      	add	r0, sp, #32
 80013ca:	f000 fe8d 	bl	80020e8 <HAL_RCC_OscConfig>
 80013ce:	b998      	cbnz	r0, 80013f8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013e0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e8:	2105      	movs	r1, #5
 80013ea:	a803      	add	r0, sp, #12
 80013ec:	f001 f8e0 	bl	80025b0 <HAL_RCC_ClockConfig>
 80013f0:	b920      	cbnz	r0, 80013fc <SystemClock_Config+0x9c>
}
 80013f2:	b015      	add	sp, #84	@ 0x54
 80013f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013f8:	f7ff fefe 	bl	80011f8 <Error_Handler>
    Error_Handler();
 80013fc:	f7ff fefc 	bl	80011f8 <Error_Handler>
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <main>:
{
 8001408:	b508      	push	{r3, lr}
  HAL_Init();
 800140a:	f000 fad1 	bl	80019b0 <HAL_Init>
  SystemClock_Config();
 800140e:	f7ff ffa7 	bl	8001360 <SystemClock_Config>
  MX_GPIO_Init();
 8001412:	f7ff fd41 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001416:	f7ff fd8f 	bl	8000f38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800141a:	f7ff feef 	bl	80011fc <MX_USART1_UART_Init>
  MX_TIM13_Init();
 800141e:	f7ff ff07 	bl	8001230 <MX_TIM13_Init>
  MX_TIM4_Init();
 8001422:	f7ff ff1b 	bl	800125c <MX_TIM4_Init>
  MX_DAC_Init();
 8001426:	f7ff ff4d 	bl	80012c4 <MX_DAC_Init>
  MX_TIM6_Init();
 800142a:	f7ff ff73 	bl	8001314 <MX_TIM6_Init>
    printf("\n\n\n--------\nStarting\n");
 800142e:	482f      	ldr	r0, [pc, #188]	@ (80014ec <main+0xe4>)
 8001430:	f005 f872 	bl	8006518 <puts>
    HAL_TIM_Base_Start_IT(&htim4);
 8001434:	482e      	ldr	r0, [pc, #184]	@ (80014f0 <main+0xe8>)
 8001436:	f001 f9df 	bl	80027f8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 800143a:	482e      	ldr	r0, [pc, #184]	@ (80014f4 <main+0xec>)
 800143c:	f001 f9dc 	bl	80027f8 <HAL_TIM_Base_Start_IT>
  osKernelInitialize();
 8001440:	f001 fdda 	bl	8002ff8 <osKernelInitialize>
  printMutexHandle = osMutexNew(&printMutex_attributes);
 8001444:	482c      	ldr	r0, [pc, #176]	@ (80014f8 <main+0xf0>)
 8001446:	f001 fe7b 	bl	8003140 <osMutexNew>
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <main+0xf4>)
 800144c:	6018      	str	r0, [r3, #0]
  ledMutexHandle = osMutexNew(&ledMutex_attributes);
 800144e:	482c      	ldr	r0, [pc, #176]	@ (8001500 <main+0xf8>)
 8001450:	f001 fe76 	bl	8003140 <osMutexNew>
 8001454:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <main+0xfc>)
 8001456:	6018      	str	r0, [r3, #0]
  ledSemaphoreHandle = osSemaphoreNew(1, 1, &ledSemaphore_attributes);
 8001458:	4a2b      	ldr	r2, [pc, #172]	@ (8001508 <main+0x100>)
 800145a:	2101      	movs	r1, #1
 800145c:	4608      	mov	r0, r1
 800145e:	f001 ff0e 	bl	800327e <osSemaphoreNew>
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <main+0x104>)
 8001464:	6018      	str	r0, [r3, #0]
  pulseSemaphoreHandle = osSemaphoreNew(1, 1, &pulseSemaphore_attributes);
 8001466:	4a2a      	ldr	r2, [pc, #168]	@ (8001510 <main+0x108>)
 8001468:	2101      	movs	r1, #1
 800146a:	4608      	mov	r0, r1
 800146c:	f001 ff07 	bl	800327e <osSemaphoreNew>
 8001470:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <main+0x10c>)
 8001472:	6018      	str	r0, [r3, #0]
  tickQueueHandle = osMessageQueueNew (16, 4, &tickQueue_attributes);
 8001474:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <main+0x110>)
 8001476:	2104      	movs	r1, #4
 8001478:	2010      	movs	r0, #16
 800147a:	f001 ffbc 	bl	80033f6 <osMessageQueueNew>
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <main+0x114>)
 8001480:	6018      	str	r0, [r3, #0]
  sineQueueHandle = osMessageQueueNew (16, 6, &sineQueue_attributes);
 8001482:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <main+0x118>)
 8001484:	2106      	movs	r1, #6
 8001486:	2010      	movs	r0, #16
 8001488:	f001 ffb5 	bl	80033f6 <osMessageQueueNew>
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <main+0x11c>)
 800148e:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001490:	4a25      	ldr	r2, [pc, #148]	@ (8001528 <main+0x120>)
 8001492:	2100      	movs	r1, #0
 8001494:	4825      	ldr	r0, [pc, #148]	@ (800152c <main+0x124>)
 8001496:	f001 fde7 	bl	8003068 <osThreadNew>
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <main+0x128>)
 800149c:	6018      	str	r0, [r3, #0]
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 800149e:	4a25      	ldr	r2, [pc, #148]	@ (8001534 <main+0x12c>)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4825      	ldr	r0, [pc, #148]	@ (8001538 <main+0x130>)
 80014a4:	f001 fde0 	bl	8003068 <osThreadNew>
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <main+0x134>)
 80014aa:	6018      	str	r0, [r3, #0]
  tickTaskHandle = osThreadNew(StartTickTask, NULL, &tickTask_attributes);
 80014ac:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <main+0x138>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4824      	ldr	r0, [pc, #144]	@ (8001544 <main+0x13c>)
 80014b2:	f001 fdd9 	bl	8003068 <osThreadNew>
 80014b6:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <main+0x140>)
 80014b8:	6018      	str	r0, [r3, #0]
  statusTaskHandle = osThreadNew(StartStatusTask, NULL, &statusTask_attributes);
 80014ba:	4a24      	ldr	r2, [pc, #144]	@ (800154c <main+0x144>)
 80014bc:	2100      	movs	r1, #0
 80014be:	4824      	ldr	r0, [pc, #144]	@ (8001550 <main+0x148>)
 80014c0:	f001 fdd2 	bl	8003068 <osThreadNew>
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <main+0x14c>)
 80014c6:	6018      	str	r0, [r3, #0]
  pulseTaskHandle = osThreadNew(StartPulseTask, NULL, &pulseTask_attributes);
 80014c8:	4a23      	ldr	r2, [pc, #140]	@ (8001558 <main+0x150>)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4823      	ldr	r0, [pc, #140]	@ (800155c <main+0x154>)
 80014ce:	f001 fdcb 	bl	8003068 <osThreadNew>
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <main+0x158>)
 80014d4:	6018      	str	r0, [r3, #0]
  sineTaskHandle = osThreadNew(StartSineTask, NULL, &sineTask_attributes);
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <main+0x15c>)
 80014d8:	2100      	movs	r1, #0
 80014da:	4823      	ldr	r0, [pc, #140]	@ (8001568 <main+0x160>)
 80014dc:	f001 fdc4 	bl	8003068 <osThreadNew>
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <main+0x164>)
 80014e2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80014e4:	f001 fd9a 	bl	800301c <osKernelStart>
    Error_Handler();
 80014e8:	f7ff fe86 	bl	80011f8 <Error_Handler>
 80014ec:	0800853c 	.word	0x0800853c
 80014f0:	20000300 	.word	0x20000300
 80014f4:	200002b8 	.word	0x200002b8
 80014f8:	08008618 	.word	0x08008618
 80014fc:	20000204 	.word	0x20000204
 8001500:	08008608 	.word	0x08008608
 8001504:	20000200 	.word	0x20000200
 8001508:	080085f8 	.word	0x080085f8
 800150c:	200001fc 	.word	0x200001fc
 8001510:	080085e8 	.word	0x080085e8
 8001514:	200001f8 	.word	0x200001f8
 8001518:	08008640 	.word	0x08008640
 800151c:	2000020c 	.word	0x2000020c
 8001520:	08008628 	.word	0x08008628
 8001524:	20000208 	.word	0x20000208
 8001528:	0800870c 	.word	0x0800870c
 800152c:	08000f89 	.word	0x08000f89
 8001530:	20000224 	.word	0x20000224
 8001534:	080086e8 	.word	0x080086e8
 8001538:	08000ff5 	.word	0x08000ff5
 800153c:	20000220 	.word	0x20000220
 8001540:	080086c4 	.word	0x080086c4
 8001544:	08001031 	.word	0x08001031
 8001548:	2000021c 	.word	0x2000021c
 800154c:	080086a0 	.word	0x080086a0
 8001550:	08001081 	.word	0x08001081
 8001554:	20000218 	.word	0x20000218
 8001558:	0800867c 	.word	0x0800867c
 800155c:	08000fcd 	.word	0x08000fcd
 8001560:	20000214 	.word	0x20000214
 8001564:	08008658 	.word	0x08008658
 8001568:	08000f7d 	.word	0x08000f7d
 800156c:	20000210 	.word	0x20000210

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b500      	push	{lr}
 8001572:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	2200      	movs	r2, #0
 8001576:	9200      	str	r2, [sp, #0]
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_MspInit+0x40>)
 800157a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800157c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001580:	6459      	str	r1, [r3, #68]	@ 0x44
 8001582:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001584:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001588:	9100      	str	r1, [sp, #0]
 800158a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	9201      	str	r2, [sp, #4]
 800158e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001590:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001594:	6419      	str	r1, [r3, #64]	@ 0x40
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a0:	210f      	movs	r1, #15
 80015a2:	f06f 0001 	mvn.w	r0, #1
 80015a6:	f000 fa83 	bl	8001ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	b003      	add	sp, #12
 80015ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015b4:	b530      	push	{r4, r5, lr}
 80015b6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	9303      	str	r3, [sp, #12]
 80015bc:	9304      	str	r3, [sp, #16]
 80015be:	9305      	str	r3, [sp, #20]
 80015c0:	9306      	str	r3, [sp, #24]
 80015c2:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <HAL_DAC_MspInit+0xe0>)
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80015cc:	b009      	add	sp, #36	@ 0x24
 80015ce:	bd30      	pop	{r4, r5, pc}
 80015d0:	4604      	mov	r4, r0
    __HAL_RCC_DAC_CLK_ENABLE();
 80015d2:	2500      	movs	r5, #0
 80015d4:	9501      	str	r5, [sp, #4]
 80015d6:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 80015da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015dc:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015e4:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80015e8:	9201      	str	r2, [sp, #4]
 80015ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	9502      	str	r5, [sp, #8]
 80015ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001600:	2330      	movs	r3, #48	@ 0x30
 8001602:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	a903      	add	r1, sp, #12
 800160a:	4823      	ldr	r0, [pc, #140]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 800160c:	f000 fc66 	bl	8001edc <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8001610:	4822      	ldr	r0, [pc, #136]	@ (800169c <HAL_DAC_MspInit+0xe8>)
 8001612:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001614:	6003      	str	r3, [r0, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001616:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 800161a:	6043      	str	r3, [r0, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161c:	2340      	movs	r3, #64	@ 0x40
 800161e:	6083      	str	r3, [r0, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	60c5      	str	r5, [r0, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001626:	6103      	str	r3, [r0, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001628:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800162c:	6143      	str	r3, [r0, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800162e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001632:	6183      	str	r3, [r0, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001638:	61c3      	str	r3, [r0, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	6205      	str	r5, [r0, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800163e:	f000 faf9 	bl	8001c34 <HAL_DMA_Init>
 8001642:	bb08      	cbnz	r0, 8001688 <HAL_DAC_MspInit+0xd4>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_DAC_MspInit+0xe8>)
 8001646:	60a3      	str	r3, [r4, #8]
 8001648:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_dac2.Instance = DMA1_Stream6;
 800164a:	4816      	ldr	r0, [pc, #88]	@ (80016a4 <HAL_DAC_MspInit+0xf0>)
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_DAC_MspInit+0xf4>)
 800164e:	6003      	str	r3, [r0, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001650:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8001654:	6043      	str	r3, [r0, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001656:	2340      	movs	r3, #64	@ 0x40
 8001658:	6083      	str	r3, [r0, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	60c3      	str	r3, [r0, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800165e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001662:	6102      	str	r2, [r0, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001664:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001668:	6142      	str	r2, [r0, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800166a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800166e:	6182      	str	r2, [r0, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001674:	61c2      	str	r2, [r0, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001676:	6203      	str	r3, [r0, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800167a:	f000 fadb 	bl	8001c34 <HAL_DMA_Init>
 800167e:	b930      	cbnz	r0, 800168e <HAL_DAC_MspInit+0xda>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_DAC_MspInit+0xf0>)
 8001682:	60e3      	str	r3, [r4, #12]
 8001684:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8001686:	e7a1      	b.n	80015cc <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8001688:	f7ff fdb6 	bl	80011f8 <Error_Handler>
 800168c:	e7da      	b.n	8001644 <HAL_DAC_MspInit+0x90>
      Error_Handler();
 800168e:	f7ff fdb3 	bl	80011f8 <Error_Handler>
 8001692:	e7f5      	b.n	8001680 <HAL_DAC_MspInit+0xcc>
 8001694:	40007400 	.word	0x40007400
 8001698:	40020000 	.word	0x40020000
 800169c:	200003a8 	.word	0x200003a8
 80016a0:	40026088 	.word	0x40026088
 80016a4:	20000348 	.word	0x20000348
 80016a8:	400260a0 	.word	0x400260a0

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b500      	push	{lr}
 80016ae:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM4)
 80016b0:	6803      	ldr	r3, [r0, #0]
 80016b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <HAL_TIM_Base_MspInit+0x7c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d008      	beq.n	80016ca <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80016b8:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <HAL_TIM_Base_MspInit+0x80>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM13)
 80016be:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_TIM_Base_MspInit+0x84>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d023      	beq.n	800170c <HAL_TIM_Base_MspInit+0x60>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80016c4:	b005      	add	sp, #20
 80016c6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ca:	2200      	movs	r2, #0
 80016cc:	9201      	str	r2, [sp, #4]
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_TIM_Base_MspInit+0x88>)
 80016d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80016d2:	f041 0104 	orr.w	r1, r1, #4
 80016d6:	6419      	str	r1, [r3, #64]	@ 0x40
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016e2:	2105      	movs	r1, #5
 80016e4:	201e      	movs	r0, #30
 80016e6:	f000 f9e3 	bl	8001ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016ea:	201e      	movs	r0, #30
 80016ec:	f000 f9f0 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
 80016f0:	e7e8      	b.n	80016c4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_TIM_Base_MspInit+0x88>)
 80016f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016fa:	f042 0210 	orr.w	r2, r2, #16
 80016fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	9b02      	ldr	r3, [sp, #8]
 800170a:	e7db      	b.n	80016c4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	9303      	str	r3, [sp, #12]
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_TIM_Base_MspInit+0x88>)
 8001712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001714:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	9b03      	ldr	r3, [sp, #12]
}
 8001724:	e7ce      	b.n	80016c4 <HAL_TIM_Base_MspInit+0x18>
 8001726:	bf00      	nop
 8001728:	40000800 	.word	0x40000800
 800172c:	40001000 	.word	0x40001000
 8001730:	40001c00 	.word	0x40001c00
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b500      	push	{lr}
 800173a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	2300      	movs	r3, #0
 800173e:	9303      	str	r3, [sp, #12]
 8001740:	9304      	str	r3, [sp, #16]
 8001742:	9305      	str	r3, [sp, #20]
 8001744:	9306      	str	r3, [sp, #24]
 8001746:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001748:	6802      	ldr	r2, [r0, #0]
 800174a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800174e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8001752:	429a      	cmp	r2, r3
 8001754:	d002      	beq.n	800175c <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001756:	b009      	add	sp, #36	@ 0x24
 8001758:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800175c:	2100      	movs	r1, #0
 800175e:	9101      	str	r1, [sp, #4]
 8001760:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001766:	f042 0210 	orr.w	r2, r2, #16
 800176a:	645a      	str	r2, [r3, #68]	@ 0x44
 800176c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800176e:	f002 0210 	and.w	r2, r2, #16
 8001772:	9201      	str	r2, [sp, #4]
 8001774:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	9102      	str	r1, [sp, #8]
 8001778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800178a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800178e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001798:	2307      	movs	r3, #7
 800179a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	a903      	add	r1, sp, #12
 800179e:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <HAL_UART_MspInit+0x70>)
 80017a0:	f000 fb9c 	bl	8001edc <HAL_GPIO_Init>
}
 80017a4:	e7d7      	b.n	8001756 <HAL_UART_MspInit+0x1e>
 80017a6:	bf00      	nop
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b530      	push	{r4, r5, lr}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <HAL_InitTick+0x90>)
 80017b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ca:	a902      	add	r1, sp, #8
 80017cc:	a803      	add	r0, sp, #12
 80017ce:	f000 ffc5 	bl	800275c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017d2:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d4:	b9cb      	cbnz	r3, 800180a <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d6:	f000 ffa1 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80017da:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017dc:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <HAL_InitTick+0x94>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	3b01      	subs	r3, #1

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80017e6:	4817      	ldr	r0, [pc, #92]	@ (8001844 <HAL_InitTick+0x98>)
 80017e8:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_InitTick+0x9c>)
 80017ea:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80017ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017f0:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80017f2:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	6083      	str	r3, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80017fc:	f001 f960 	bl	8002ac0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001800:	4605      	mov	r5, r0
 8001802:	b130      	cbz	r0, 8001812 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8001804:	4628      	mov	r0, r5
 8001806:	b009      	add	sp, #36	@ 0x24
 8001808:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800180a:	f000 ff87 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 800180e:	0043      	lsls	r3, r0, #1
 8001810:	e7e4      	b.n	80017dc <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001812:	480c      	ldr	r0, [pc, #48]	@ (8001844 <HAL_InitTick+0x98>)
 8001814:	f000 fff0 	bl	80027f8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001818:	4605      	mov	r5, r0
 800181a:	2800      	cmp	r0, #0
 800181c:	d1f2      	bne.n	8001804 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800181e:	202d      	movs	r0, #45	@ 0x2d
 8001820:	f000 f956 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001824:	2c0f      	cmp	r4, #15
 8001826:	d901      	bls.n	800182c <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8001828:	2501      	movs	r5, #1
 800182a:	e7eb      	b.n	8001804 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	4621      	mov	r1, r4
 8001830:	202d      	movs	r0, #45	@ 0x2d
 8001832:	f000 f93d 	bl	8001ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_InitTick+0xa0>)
 8001838:	601c      	str	r4, [r3, #0]
 800183a:	e7e3      	b.n	8001804 <HAL_InitTick+0x58>
 800183c:	40023800 	.word	0x40023800
 8001840:	431bde83 	.word	0x431bde83
 8001844:	2000041c 	.word	0x2000041c
 8001848:	40002000 	.word	0x40002000
 800184c:	20000008 	.word	0x20000008

08001850 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler>

08001852 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler>

08001854 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler>

08001856 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler>

08001858 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler>

0800185a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	4770      	bx	lr

0800185c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800185c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800185e:	4802      	ldr	r0, [pc, #8]	@ (8001868 <DMA1_Stream5_IRQHandler+0xc>)
 8001860:	f000 fa4e 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop
 8001868:	200003a8 	.word	0x200003a8

0800186c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800186c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800186e:	4802      	ldr	r0, [pc, #8]	@ (8001878 <DMA1_Stream6_IRQHandler+0xc>)
 8001870:	f000 fa46 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001874:	bd08      	pop	{r3, pc}
 8001876:	bf00      	nop
 8001878:	20000348 	.word	0x20000348

0800187c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800187c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800187e:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM4_IRQHandler+0xc>)
 8001880:	f001 f802 	bl	8002888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001884:	bd08      	pop	{r3, pc}
 8001886:	bf00      	nop
 8001888:	20000300 	.word	0x20000300

0800188c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800188c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
  ++ulHighFrequencyTimerTicks;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001896:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8001898:	f000 fff6 	bl	8002888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800189c:	bd08      	pop	{r3, pc}
 800189e:	bf00      	nop
 80018a0:	200001f4 	.word	0x200001f4
 80018a4:	2000041c 	.word	0x2000041c

080018a8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80018a8:	2001      	movs	r0, #1
 80018aa:	4770      	bx	lr

080018ac <_kill>:

int _kill(int pid, int sig)
{
 80018ac:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ae:	f004 ffbb 	bl	8006828 <__errno>
 80018b2:	2316      	movs	r3, #22
 80018b4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80018b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018ba:	bd08      	pop	{r3, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b508      	push	{r3, lr}
  _kill(status, -1);
 80018be:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018c2:	f7ff fff3 	bl	80018ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c6:	e7fe      	b.n	80018c6 <_exit+0xa>

080018c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	460c      	mov	r4, r1
 80018cc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2500      	movs	r5, #0
 80018d0:	e006      	b.n	80018e0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4621      	mov	r1, r4
 80018d8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80018de:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	42b5      	cmp	r5, r6
 80018e2:	dbf6      	blt.n	80018d2 <_read+0xa>
  }

  return len;
}
 80018e4:	4630      	mov	r0, r6
 80018e6:	bd70      	pop	{r4, r5, r6, pc}

080018e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018ec:	4770      	bx	lr

080018ee <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80018f4:	2000      	movs	r0, #0
 80018f6:	4770      	bx	lr

080018f8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018f8:	2001      	movs	r0, #1
 80018fa:	4770      	bx	lr

080018fc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018fc:	2000      	movs	r0, #0
 80018fe:	4770      	bx	lr

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b510      	push	{r4, lr}
 8001902:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a0c      	ldr	r2, [pc, #48]	@ (8001938 <_sbrk+0x38>)
 8001906:	490d      	ldr	r1, [pc, #52]	@ (800193c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	480d      	ldr	r0, [pc, #52]	@ (8001940 <_sbrk+0x40>)
 800190a:	6800      	ldr	r0, [r0, #0]
 800190c:	b140      	cbz	r0, 8001920 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	480c      	ldr	r0, [pc, #48]	@ (8001940 <_sbrk+0x40>)
 8001910:	6800      	ldr	r0, [r0, #0]
 8001912:	4403      	add	r3, r0
 8001914:	1a52      	subs	r2, r2, r1
 8001916:	4293      	cmp	r3, r2
 8001918:	d806      	bhi.n	8001928 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <_sbrk+0x40>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800191e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001920:	4807      	ldr	r0, [pc, #28]	@ (8001940 <_sbrk+0x40>)
 8001922:	4c08      	ldr	r4, [pc, #32]	@ (8001944 <_sbrk+0x44>)
 8001924:	6004      	str	r4, [r0, #0]
 8001926:	e7f2      	b.n	800190e <_sbrk+0xe>
    errno = ENOMEM;
 8001928:	f004 ff7e 	bl	8006828 <__errno>
 800192c:	230c      	movs	r3, #12
 800192e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001934:	e7f3      	b.n	800191e <_sbrk+0x1e>
 8001936:	bf00      	nop
 8001938:	20020000 	.word	0x20020000
 800193c:	00000400 	.word	0x00000400
 8001940:	20000464 	.word	0x20000464
 8001944:	200013b0 	.word	0x200013b0

08001948 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4a03      	ldr	r2, [pc, #12]	@ (8001958 <SystemInit+0x10>)
 800194a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800194e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001952:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001994 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001960:	f7ff fff2 	bl	8001948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	@ (800199c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	@ (80019a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800198a:	f004 ff53 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198e:	f7ff fd3b 	bl	8001408 <main>
  bx  lr    
 8001992:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019a0:	08008ae8 	.word	0x08008ae8
  ldr r2, =_sbss
 80019a4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019a8:	200013b0 	.word	0x200013b0

080019ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_Init+0x30>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019c2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f85d 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d2:	200f      	movs	r0, #15
 80019d4:	f7ff feea 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d8:	f7ff fdca 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80019dc:	2000      	movs	r0, #0
 80019de:	bd08      	pop	{r3, pc}
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019e4:	4a03      	ldr	r2, [pc, #12]	@ (80019f4 <HAL_IncTick+0x10>)
 80019e6:	6811      	ldr	r1, [r2, #0]
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_IncTick+0x14>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	440b      	add	r3, r1
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000468 	.word	0x20000468
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019fc:	4b01      	ldr	r3, [pc, #4]	@ (8001a04 <HAL_GetTick+0x8>)
 80019fe:	6818      	ldr	r0, [r3, #0]
}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000468 	.word	0x20000468

08001a08 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	db07      	blt.n	8001a1c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0c:	f000 021f 	and.w	r2, r0, #31
 8001a10:	0940      	lsrs	r0, r0, #5
 8001a12:	2301      	movs	r3, #1
 8001a14:	4093      	lsls	r3, r2
 8001a16:	4a02      	ldr	r2, [pc, #8]	@ (8001a20 <__NVIC_EnableIRQ+0x18>)
 8001a18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001a24:	2800      	cmp	r0, #0
 8001a26:	db08      	blt.n	8001a3a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	0109      	lsls	r1, r1, #4
 8001a2a:	b2c9      	uxtb	r1, r1
 8001a2c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a30:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a34:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001a38:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	f000 000f 	and.w	r0, r0, #15
 8001a3e:	0109      	lsls	r1, r1, #4
 8001a40:	b2c9      	uxtb	r1, r1
 8001a42:	4b01      	ldr	r3, [pc, #4]	@ (8001a48 <__NVIC_SetPriority+0x24>)
 8001a44:	5419      	strb	r1, [r3, r0]
  }
}
 8001a46:	4770      	bx	lr
 8001a48:	e000ed14 	.word	0xe000ed14

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a52:	f1c0 0c07 	rsb	ip, r0, #7
 8001a56:	f1bc 0f04 	cmp.w	ip, #4
 8001a5a:	bf28      	it	cs
 8001a5c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a60:	1d03      	adds	r3, r0, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d90f      	bls.n	8001a86 <NVIC_EncodePriority+0x3a>
 8001a66:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001a6c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001a70:	ea21 0100 	bic.w	r1, r1, r0
 8001a74:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a76:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a7a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001a7e:	ea41 0002 	orr.w	r0, r1, r2
 8001a82:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	2300      	movs	r3, #0
 8001a88:	e7ee      	b.n	8001a68 <NVIC_EncodePriority+0x1c>
	...

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	0200      	lsls	r0, r0, #8
 8001a9a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001aa8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_NVIC_SetPriority+0x1c>)
 8001ab6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001abc:	f7ff ffc6 	bl	8001a4c <NVIC_EncodePriority>
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff ffae 	bl	8001a24 <__NVIC_SetPriority>
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad2:	f7ff ff99 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ad6:	bd08      	pop	{r3, pc}

08001ad8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ad8:	b170      	cbz	r0, 8001af8 <HAL_DAC_Init+0x20>
{
 8001ada:	b510      	push	{r4, lr}
 8001adc:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ade:	7903      	ldrb	r3, [r0, #4]
 8001ae0:	b133      	cbz	r3, 8001af0 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aea:	2301      	movs	r3, #1
 8001aec:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8001aee:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001af0:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001af2:	f7ff fd5f 	bl	80015b4 <HAL_DAC_MspInit>
 8001af6:	e7f4      	b.n	8001ae2 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8001af8:	2001      	movs	r0, #1
}
 8001afa:	4770      	bx	lr

08001afc <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001afc:	b348      	cbz	r0, 8001b52 <HAL_DAC_ConfigChannel+0x56>
 8001afe:	4684      	mov	ip, r0
 8001b00:	b349      	cbz	r1, 8001b56 <HAL_DAC_ConfigChannel+0x5a>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b02:	7943      	ldrb	r3, [r0, #5]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d028      	beq.n	8001b5a <HAL_DAC_ConfigChannel+0x5e>
{
 8001b08:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8001b0a:	f04f 0e01 	mov.w	lr, #1
 8001b0e:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	7103      	strb	r3, [r0, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b16:	6804      	ldr	r4, [r0, #0]
 8001b18:	6820      	ldr	r0, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001b1a:	f002 0210 	and.w	r2, r2, #16
 8001b1e:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8001b22:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001b24:	ea20 0003 	bic.w	r0, r0, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b28:	680b      	ldr	r3, [r1, #0]
 8001b2a:	6849      	ldr	r1, [r1, #4]
 8001b2c:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	4303      	orrs	r3, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b32:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b34:	f8dc 0000 	ldr.w	r0, [ip]
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	21c0      	movs	r1, #192	@ 0xc0
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	ea23 0302 	bic.w	r3, r3, r2
 8001b44:	6003      	str	r3, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b46:	f88c e004 	strb.w	lr, [ip, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f88c 0005 	strb.w	r0, [ip, #5]

  /* Return function status */
  return status;
}
 8001b50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
 8001b54:	4770      	bx	lr
 8001b56:	2001      	movs	r0, #1
 8001b58:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001b5a:	2002      	movs	r0, #2
}
 8001b5c:	4770      	bx	lr
	...

08001b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b60:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b62:	6803      	ldr	r3, [r0, #0]
 8001b64:	b2d9      	uxtb	r1, r3
 8001b66:	3910      	subs	r1, #16
 8001b68:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <DMA_CalcBaseAndBitshift+0x3c>)
 8001b6a:	fba2 4201 	umull	r4, r2, r2, r1
 8001b6e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b70:	4c0b      	ldr	r4, [pc, #44]	@ (8001ba0 <DMA_CalcBaseAndBitshift+0x40>)
 8001b72:	5ca2      	ldrb	r2, [r4, r2]
 8001b74:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b76:	295f      	cmp	r1, #95	@ 0x5f
 8001b78:	d909      	bls.n	8001b8e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	3304      	adds	r3, #4
 8001b84:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001b86:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b8c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	6583      	str	r3, [r0, #88]	@ 0x58
 8001b98:	e7f5      	b.n	8001b86 <DMA_CalcBaseAndBitshift+0x26>
 8001b9a:	bf00      	nop
 8001b9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ba0:	08008748 	.word	0x08008748

08001ba4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ba4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ba6:	6982      	ldr	r2, [r0, #24]
 8001ba8:	b992      	cbnz	r2, 8001bd0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d00a      	beq.n	8001bc4 <DMA_CheckFifoParam+0x20>
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d002      	beq.n	8001bb8 <DMA_CheckFifoParam+0x14>
 8001bb2:	b10b      	cbz	r3, 8001bb8 <DMA_CheckFifoParam+0x14>
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bba:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001bbe:	d128      	bne.n	8001c12 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bca:	d024      	beq.n	8001c16 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001bd4:	d009      	beq.n	8001bea <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d925      	bls.n	8001c26 <DMA_CheckFifoParam+0x82>
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d125      	bne.n	8001c2a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bde:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001be0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001be4:	d123      	bne.n	8001c2e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2000      	movs	r0, #0
 8001be8:	4770      	bx	lr
    switch (tmp)
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d803      	bhi.n	8001bf6 <DMA_CheckFifoParam+0x52>
 8001bee:	e8df f003 	tbb	[pc, r3]
 8001bf2:	0414      	.short	0x0414
 8001bf4:	0a14      	.short	0x0a14
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bfc:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c00:	d10d      	bne.n	8001c1e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2000      	movs	r0, #0
 8001c04:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c0c:	d009      	beq.n	8001c22 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	4770      	bx	lr
        status = HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
 8001c14:	4770      	bx	lr
        status = HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
 8001c18:	4770      	bx	lr
      status = HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	4770      	bx	lr
        status = HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
 8001c20:	4770      	bx	lr
        status = HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
 8001c24:	4770      	bx	lr
      status = HAL_ERROR;
 8001c26:	2001      	movs	r0, #1
 8001c28:	4770      	bx	lr
    switch (tmp)
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_DMA_Init>:
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fee0 	bl	80019fc <HAL_GetTick>
  if(hdma == NULL)
 8001c3c:	2c00      	cmp	r4, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_DMA_Init+0xc4>
 8001c40:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	f012 0f01 	tst.w	r2, #1
 8001c60:	d00a      	beq.n	8001c78 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c62:	f7ff fecb 	bl	80019fc <HAL_GetTick>
 8001c66:	1b43      	subs	r3, r0, r5
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d9f5      	bls.n	8001c58 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c70:	2003      	movs	r0, #3
 8001c72:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001c78:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c7a:	4920      	ldr	r1, [pc, #128]	@ (8001cfc <HAL_DMA_Init+0xc8>)
 8001c7c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	6862      	ldr	r2, [r4, #4]
 8001c80:	68a0      	ldr	r0, [r4, #8]
 8001c82:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c86:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	6920      	ldr	r0, [r4, #16]
 8001c8a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c90:	69a0      	ldr	r0, [r4, #24]
 8001c92:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c94:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	6a20      	ldr	r0, [r4, #32]
 8001c9a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001ca0:	2904      	cmp	r1, #4
 8001ca2:	d01e      	beq.n	8001ce2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001ca4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001ca6:	6826      	ldr	r6, [r4, #0]
 8001ca8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001caa:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001cae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cb0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d107      	bne.n	8001cc6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001cb6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cb8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cbc:	b11b      	cbz	r3, 8001cc6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff ff70 	bl	8001ba4 <DMA_CheckFifoParam>
 8001cc4:	b990      	cbnz	r0, 8001cec <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001cc6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff ff49 	bl	8001b60 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cce:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001cd0:	233f      	movs	r3, #63	@ 0x3f
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001ce0:	e7c9      	b.n	8001c76 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001ce4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001ce6:	4301      	orrs	r1, r0
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	e7db      	b.n	8001ca4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cec:	2340      	movs	r3, #64	@ 0x40
 8001cee:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001cf6:	e7be      	b.n	8001c76 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	e7bc      	b.n	8001c76 <HAL_DMA_Init+0x42>
 8001cfc:	f010803f 	.word	0xf010803f

08001d00 <HAL_DMA_IRQHandler>:
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d0a:	4b72      	ldr	r3, [pc, #456]	@ (8001ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8001d0c:	681d      	ldr	r5, [r3, #0]
 8001d0e:	4b72      	ldr	r3, [pc, #456]	@ (8001ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8001d10:	fba3 3505 	umull	r3, r5, r3, r5
 8001d14:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001d18:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	4093      	lsls	r3, r2
 8001d20:	4233      	tst	r3, r6
 8001d22:	d010      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d24:	6803      	ldr	r3, [r0, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f012 0f04 	tst.w	r2, #4
 8001d2c:	d00b      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f022 0204 	bic.w	r2, r2, #4
 8001d34:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d36:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001d38:	2308      	movs	r3, #8
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d3e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d46:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	4233      	tst	r3, r6
 8001d4e:	d009      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	6952      	ldr	r2, [r2, #20]
 8001d54:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001d58:	d004      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d5a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d64:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d66:	2304      	movs	r3, #4
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	4233      	tst	r3, r6
 8001d6c:	d009      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	f012 0f02 	tst.w	r2, #2
 8001d76:	d004      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d78:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d7a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d82:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d84:	2310      	movs	r3, #16
 8001d86:	4093      	lsls	r3, r2
 8001d88:	4233      	tst	r3, r6
 8001d8a:	d024      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d8c:	6822      	ldr	r2, [r4, #0]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	f012 0f08 	tst.w	r2, #8
 8001d94:	d01f      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d96:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001da0:	d00d      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001da8:	d104      	bne.n	8001db4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001daa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dac:	b19b      	cbz	r3, 8001dd6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001dae:	4620      	mov	r0, r4
 8001db0:	4798      	blx	r3
 8001db2:	e010      	b.n	8001dd6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001db4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001db6:	b173      	cbz	r3, 8001dd6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001db8:	4620      	mov	r0, r4
 8001dba:	4798      	blx	r3
 8001dbc:	e00b      	b.n	8001dd6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001dc4:	d103      	bne.n	8001dce <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dd0:	b10b      	cbz	r3, 8001dd6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001dd8:	2320      	movs	r3, #32
 8001dda:	4093      	lsls	r3, r2
 8001ddc:	4233      	tst	r3, r6
 8001dde:	d055      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f012 0f10 	tst.w	r2, #16
 8001de8:	d050      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dea:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dec:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d00e      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001dfe:	d033      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001e06:	d12a      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001e08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03e      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4798      	blx	r3
 8001e12:	e03b      	b.n	8001e8c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	6813      	ldr	r3, [r2, #0]
 8001e18:	f023 0316 	bic.w	r3, r3, #22
 8001e1c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	6953      	ldr	r3, [r2, #20]
 8001e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e26:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e2a:	b1a3      	cbz	r3, 8001e56 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	6813      	ldr	r3, [r2, #0]
 8001e30:	f023 0308 	bic.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e36:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001e38:	233f      	movs	r3, #63	@ 0x3f
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001e44:	2300      	movs	r3, #0
 8001e46:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001e4a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d03f      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001e50:	4620      	mov	r0, r4
 8001e52:	4798      	blx	r3
        return;
 8001e54:	e03c      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e56:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e7      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x12c>
 8001e5c:	e7eb      	b.n	8001e36 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001e5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001e60:	b1a3      	cbz	r3, 8001e8c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001e62:	4620      	mov	r0, r4
 8001e64:	4798      	blx	r3
 8001e66:	e011      	b.n	8001e8c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001e6e:	d109      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001e84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001e86:	b10b      	cbz	r3, 8001e8c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001e88:	4620      	mov	r0, r4
 8001e8a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e8e:	b1fb      	cbz	r3, 8001ed0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e92:	f013 0f01 	tst.w	r3, #1
 8001e96:	d017      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e98:	2305      	movs	r3, #5
 8001e9a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	6813      	ldr	r3, [r2, #0]
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001ea8:	9b01      	ldr	r3, [sp, #4]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	42ab      	cmp	r3, r5
 8001eb0:	d804      	bhi.n	8001ebc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f013 0f01 	tst.w	r3, #1
 8001eba:	d1f5      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001ec8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001eca:	b10b      	cbz	r3, 8001ed0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4798      	blx	r3
}
 8001ed0:	b003      	add	sp, #12
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	1b4e81b5 	.word	0x1b4e81b5

08001edc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f200 80e9 	bhi.w	80020b6 <HAL_GPIO_Init+0x1da>
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	e065      	b.n	8001fb6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eea:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eec:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001ef0:	2403      	movs	r4, #3
 8001ef2:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ef6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efa:	68cc      	ldr	r4, [r1, #12]
 8001efc:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f00:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f02:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f04:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f06:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	684a      	ldr	r2, [r1, #4]
 8001f0c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001f14:	6042      	str	r2, [r0, #4]
 8001f16:	e05c      	b.n	8001fd2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	08dc      	lsrs	r4, r3, #3
 8001f1a:	3408      	adds	r4, #8
 8001f1c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f20:	f003 0507 	and.w	r5, r3, #7
 8001f24:	00ad      	lsls	r5, r5, #2
 8001f26:	f04f 0e0f 	mov.w	lr, #15
 8001f2a:	fa0e fe05 	lsl.w	lr, lr, r5
 8001f2e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f32:	690a      	ldr	r2, [r1, #16]
 8001f34:	40aa      	lsls	r2, r5
 8001f36:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f3a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001f3e:	e05c      	b.n	8001ffa <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f40:	2207      	movs	r2, #7
 8001f42:	e000      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 8001f44:	2200      	movs	r2, #0
 8001f46:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f4a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f4c:	3402      	adds	r4, #2
 8001f4e:	4d5a      	ldr	r5, [pc, #360]	@ (80020b8 <HAL_GPIO_Init+0x1dc>)
 8001f50:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f54:	4a59      	ldr	r2, [pc, #356]	@ (80020bc <HAL_GPIO_Init+0x1e0>)
 8001f56:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	ea6f 020c 	mvn.w	r2, ip
 8001f5c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f60:	684e      	ldr	r6, [r1, #4]
 8001f62:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001f66:	d001      	beq.n	8001f6c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001f68:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001f6c:	4c53      	ldr	r4, [pc, #332]	@ (80020bc <HAL_GPIO_Init+0x1e0>)
 8001f6e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001f70:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f76:	684e      	ldr	r6, [r1, #4]
 8001f78:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001f7c:	d001      	beq.n	8001f82 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001f7e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001f82:	4c4e      	ldr	r4, [pc, #312]	@ (80020bc <HAL_GPIO_Init+0x1e0>)
 8001f84:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001f86:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8c:	684e      	ldr	r6, [r1, #4]
 8001f8e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001f92:	d001      	beq.n	8001f98 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001f94:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001f98:	4c48      	ldr	r4, [pc, #288]	@ (80020bc <HAL_GPIO_Init+0x1e0>)
 8001f9a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	684d      	ldr	r5, [r1, #4]
 8001fa2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001fa6:	d001      	beq.n	8001fac <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001fa8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001fac:	4c43      	ldr	r4, [pc, #268]	@ (80020bc <HAL_GPIO_Init+0x1e0>)
 8001fae:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d87d      	bhi.n	80020b2 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fba:	680c      	ldr	r4, [r1, #0]
 8001fbc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001fc0:	ea32 0404 	bics.w	r4, r2, r4
 8001fc4:	d1f4      	bne.n	8001fb0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	684c      	ldr	r4, [r1, #4]
 8001fc8:	f004 0403 	and.w	r4, r4, #3
 8001fcc:	3c01      	subs	r4, #1
 8001fce:	2c01      	cmp	r4, #1
 8001fd0:	d98b      	bls.n	8001eea <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd2:	684a      	ldr	r2, [r1, #4]
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	2a03      	cmp	r2, #3
 8001fda:	d009      	beq.n	8001ff0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001fdc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	005d      	lsls	r5, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	40aa      	lsls	r2, r5
 8001fe4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	688a      	ldr	r2, [r1, #8]
 8001fea:	40aa      	lsls	r2, r5
 8001fec:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001fee:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff0:	684a      	ldr	r2, [r1, #4]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	2a02      	cmp	r2, #2
 8001ff8:	d08e      	beq.n	8001f18 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001ffa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f20e 	lsl.w	r2, r2, lr
 8002006:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200a:	684a      	ldr	r2, [r1, #4]
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	fa02 f20e 	lsl.w	r2, r2, lr
 8002014:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002016:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	684a      	ldr	r2, [r1, #4]
 800201a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800201e:	d0c7      	beq.n	8001fb0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002020:	2200      	movs	r2, #0
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	4a26      	ldr	r2, [pc, #152]	@ (80020c0 <HAL_GPIO_Init+0x1e4>)
 8002026:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002028:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800202c:	6454      	str	r4, [r2, #68]	@ 0x44
 800202e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002030:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002034:	9201      	str	r2, [sp, #4]
 8002036:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002038:	089c      	lsrs	r4, r3, #2
 800203a:	1ca5      	adds	r5, r4, #2
 800203c:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_GPIO_Init+0x1dc>)
 800203e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002042:	f003 0e03 	and.w	lr, r3, #3
 8002046:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002050:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <HAL_GPIO_Init+0x1e8>)
 8002056:	4290      	cmp	r0, r2
 8002058:	f43f af74 	beq.w	8001f44 <HAL_GPIO_Init+0x68>
 800205c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002060:	4290      	cmp	r0, r2
 8002062:	d01a      	beq.n	800209a <HAL_GPIO_Init+0x1be>
 8002064:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002068:	4290      	cmp	r0, r2
 800206a:	d018      	beq.n	800209e <HAL_GPIO_Init+0x1c2>
 800206c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002070:	4290      	cmp	r0, r2
 8002072:	d016      	beq.n	80020a2 <HAL_GPIO_Init+0x1c6>
 8002074:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002078:	4290      	cmp	r0, r2
 800207a:	d014      	beq.n	80020a6 <HAL_GPIO_Init+0x1ca>
 800207c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002080:	4290      	cmp	r0, r2
 8002082:	d012      	beq.n	80020aa <HAL_GPIO_Init+0x1ce>
 8002084:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002088:	4290      	cmp	r0, r2
 800208a:	d010      	beq.n	80020ae <HAL_GPIO_Init+0x1d2>
 800208c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002090:	4290      	cmp	r0, r2
 8002092:	f43f af55 	beq.w	8001f40 <HAL_GPIO_Init+0x64>
 8002096:	2208      	movs	r2, #8
 8002098:	e755      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 800209a:	2201      	movs	r2, #1
 800209c:	e753      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 800209e:	2202      	movs	r2, #2
 80020a0:	e751      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 80020a2:	2203      	movs	r2, #3
 80020a4:	e74f      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 80020a6:	2204      	movs	r2, #4
 80020a8:	e74d      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 80020aa:	2205      	movs	r2, #5
 80020ac:	e74b      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
 80020ae:	2206      	movs	r2, #6
 80020b0:	e749      	b.n	8001f46 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80020b2:	b002      	add	sp, #8
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	4770      	bx	lr
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40013c00 	.word	0x40013c00
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020000 	.word	0x40020000

080020c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	b10a      	cbz	r2, 80020ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	6181      	str	r1, [r0, #24]
 80020cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ce:	0409      	lsls	r1, r1, #16
 80020d0:	6181      	str	r1, [r0, #24]
  }
}
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d6:	ea01 0203 	and.w	r2, r1, r3
 80020da:	ea21 0103 	bic.w	r1, r1, r3
 80020de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80020e2:	6181      	str	r1, [r0, #24]
}
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e8:	2800      	cmp	r0, #0
 80020ea:	f000 81e0 	beq.w	80024ae <HAL_RCC_OscConfig+0x3c6>
{
 80020ee:	b570      	push	{r4, r5, r6, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f4:	6803      	ldr	r3, [r0, #0]
 80020f6:	f013 0f01 	tst.w	r3, #1
 80020fa:	d03b      	beq.n	8002174 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020fc:	4b9f      	ldr	r3, [pc, #636]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d02c      	beq.n	8002162 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002108:	4b9c      	ldr	r3, [pc, #624]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002110:	2b08      	cmp	r3, #8
 8002112:	d021      	beq.n	8002158 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	6863      	ldr	r3, [r4, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800211a:	d04f      	beq.n	80021bc <HAL_RCC_OscConfig+0xd4>
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002120:	d052      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe0>
 8002122:	4b96      	ldr	r3, [pc, #600]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002132:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d050      	beq.n	80021dc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7ff fc5f 	bl	80019fc <HAL_GetTick>
 800213e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002140:	4b8e      	ldr	r3, [pc, #568]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002148:	d114      	bne.n	8002174 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214a:	f7ff fc57 	bl	80019fc <HAL_GetTick>
 800214e:	1b40      	subs	r0, r0, r5
 8002150:	2864      	cmp	r0, #100	@ 0x64
 8002152:	d9f5      	bls.n	8002140 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002154:	2003      	movs	r0, #3
 8002156:	e1b1      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002158:	4b88      	ldr	r3, [pc, #544]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002160:	d0d8      	beq.n	8002114 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b86      	ldr	r3, [pc, #536]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800216a:	d003      	beq.n	8002174 <HAL_RCC_OscConfig+0x8c>
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 819f 	beq.w	80024b2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	f013 0f02 	tst.w	r3, #2
 800217a:	d054      	beq.n	8002226 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800217c:	4b7f      	ldr	r3, [pc, #508]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f013 0f0c 	tst.w	r3, #12
 8002184:	d03e      	beq.n	8002204 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b7d      	ldr	r3, [pc, #500]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800218e:	2b08      	cmp	r3, #8
 8002190:	d033      	beq.n	80021fa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002192:	68e3      	ldr	r3, [r4, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d068      	beq.n	800226a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b79      	ldr	r3, [pc, #484]	@ (8002380 <HAL_RCC_OscConfig+0x298>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7ff fc2d 	bl	80019fc <HAL_GetTick>
 80021a2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b75      	ldr	r3, [pc, #468]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f013 0f02 	tst.w	r3, #2
 80021ac:	d154      	bne.n	8002258 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff fc25 	bl	80019fc <HAL_GetTick>
 80021b2:	1b40      	subs	r0, r0, r5
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d9f5      	bls.n	80021a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80021b8:	2003      	movs	r0, #3
 80021ba:	e17f      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	4a6f      	ldr	r2, [pc, #444]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e7b5      	b.n	8002134 <HAL_RCC_OscConfig+0x4c>
 80021c8:	4b6c      	ldr	r3, [pc, #432]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e7ab      	b.n	8002134 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80021dc:	f7ff fc0e 	bl	80019fc <HAL_GetTick>
 80021e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b66      	ldr	r3, [pc, #408]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021ea:	d0c3      	beq.n	8002174 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fc06 	bl	80019fc <HAL_GetTick>
 80021f0:	1b40      	subs	r0, r0, r5
 80021f2:	2864      	cmp	r0, #100	@ 0x64
 80021f4:	d9f5      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80021f6:	2003      	movs	r0, #3
 80021f8:	e160      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b60      	ldr	r3, [pc, #384]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002202:	d1c6      	bne.n	8002192 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002204:	4b5d      	ldr	r3, [pc, #372]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f013 0f02 	tst.w	r3, #2
 800220c:	d003      	beq.n	8002216 <HAL_RCC_OscConfig+0x12e>
 800220e:	68e3      	ldr	r3, [r4, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	f040 8150 	bne.w	80024b6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4a59      	ldr	r2, [pc, #356]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800221e:	6921      	ldr	r1, [r4, #16]
 8002220:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002224:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f013 0f08 	tst.w	r3, #8
 800222c:	d042      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800222e:	6963      	ldr	r3, [r4, #20]
 8002230:	b36b      	cbz	r3, 800228e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002232:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_RCC_OscConfig+0x298>)
 8002234:	2201      	movs	r2, #1
 8002236:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7ff fbdf 	bl	80019fc <HAL_GetTick>
 800223e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002240:	4b4e      	ldr	r3, [pc, #312]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	f013 0f02 	tst.w	r3, #2
 8002248:	d134      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff fbd7 	bl	80019fc <HAL_GetTick>
 800224e:	1b40      	subs	r0, r0, r5
 8002250:	2802      	cmp	r0, #2
 8002252:	d9f5      	bls.n	8002240 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002254:	2003      	movs	r0, #3
 8002256:	e131      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002260:	6921      	ldr	r1, [r4, #16]
 8002262:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e7dd      	b.n	8002226 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b45      	ldr	r3, [pc, #276]	@ (8002380 <HAL_RCC_OscConfig+0x298>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002270:	f7ff fbc4 	bl	80019fc <HAL_GetTick>
 8002274:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b41      	ldr	r3, [pc, #260]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f013 0f02 	tst.w	r3, #2
 800227e:	d0d2      	beq.n	8002226 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff fbbc 	bl	80019fc <HAL_GetTick>
 8002284:	1b40      	subs	r0, r0, r5
 8002286:	2802      	cmp	r0, #2
 8002288:	d9f5      	bls.n	8002276 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800228a:	2003      	movs	r0, #3
 800228c:	e116      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <HAL_RCC_OscConfig+0x298>)
 8002290:	2200      	movs	r2, #0
 8002292:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff fbb1 	bl	80019fc <HAL_GetTick>
 800229a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b37      	ldr	r3, [pc, #220]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a0:	f013 0f02 	tst.w	r3, #2
 80022a4:	d006      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a6:	f7ff fba9 	bl	80019fc <HAL_GetTick>
 80022aa:	1b40      	subs	r0, r0, r5
 80022ac:	2802      	cmp	r0, #2
 80022ae:	d9f5      	bls.n	800229c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80022b0:	2003      	movs	r0, #3
 80022b2:	e103      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	f013 0f04 	tst.w	r3, #4
 80022ba:	d077      	beq.n	80023ac <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80022c4:	d133      	bne.n	800232e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	4b2c      	ldr	r3, [pc, #176]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80022cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022de:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <HAL_RCC_OscConfig+0x29c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80022e8:	d023      	beq.n	8002332 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	68a3      	ldr	r3, [r4, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d034      	beq.n	800235a <HAL_RCC_OscConfig+0x272>
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d038      	beq.n	8002366 <HAL_RCC_OscConfig+0x27e>
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 80022f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80022fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002300:	f022 0204 	bic.w	r2, r2, #4
 8002304:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002306:	68a3      	ldr	r3, [r4, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d03d      	beq.n	8002388 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff fb76 	bl	80019fc <HAL_GetTick>
 8002310:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	f013 0f02 	tst.w	r3, #2
 800231a:	d146      	bne.n	80023aa <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff fb6e 	bl	80019fc <HAL_GetTick>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002326:	4298      	cmp	r0, r3
 8002328:	d9f3      	bls.n	8002312 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800232a:	2003      	movs	r0, #3
 800232c:	e0c6      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2500      	movs	r5, #0
 8002330:	e7d6      	b.n	80022e0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_RCC_OscConfig+0x29c>)
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800233c:	f7ff fb5e 	bl	80019fc <HAL_GetTick>
 8002340:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_RCC_OscConfig+0x29c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800234a:	d1ce      	bne.n	80022ea <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7ff fb56 	bl	80019fc <HAL_GetTick>
 8002350:	1b80      	subs	r0, r0, r6
 8002352:	2802      	cmp	r0, #2
 8002354:	d9f5      	bls.n	8002342 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
 8002358:	e0b0      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235a:	4a08      	ldr	r2, [pc, #32]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 800235c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	@ 0x70
 8002364:	e7cf      	b.n	8002306 <HAL_RCC_OscConfig+0x21e>
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <HAL_RCC_OscConfig+0x294>)
 8002368:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800236a:	f042 0204 	orr.w	r2, r2, #4
 800236e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002370:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	671a      	str	r2, [r3, #112]	@ 0x70
 8002378:	e7c5      	b.n	8002306 <HAL_RCC_OscConfig+0x21e>
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	42470000 	.word	0x42470000
 8002384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7ff fb38 	bl	80019fc <HAL_GetTick>
 800238c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	4b52      	ldr	r3, [pc, #328]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002392:	f013 0f02 	tst.w	r3, #2
 8002396:	d008      	beq.n	80023aa <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff fb30 	bl	80019fc <HAL_GetTick>
 800239c:	1b80      	subs	r0, r0, r6
 800239e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023a2:	4298      	cmp	r0, r3
 80023a4:	d9f3      	bls.n	800238e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80023a6:	2003      	movs	r0, #3
 80023a8:	e088      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023aa:	b9ed      	cbnz	r5, 80023e8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ac:	69a3      	ldr	r3, [r4, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8083 	beq.w	80024ba <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b4:	4a48      	ldr	r2, [pc, #288]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 80023b6:	6892      	ldr	r2, [r2, #8]
 80023b8:	f002 020c 	and.w	r2, r2, #12
 80023bc:	2a08      	cmp	r2, #8
 80023be:	d051      	beq.n	8002464 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d017      	beq.n	80023f4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <HAL_RCC_OscConfig+0x3f4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fb17 	bl	80019fc <HAL_GetTick>
 80023ce:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d0:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023d8:	d042      	beq.n	8002460 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff fb0f 	bl	80019fc <HAL_GetTick>
 80023de:	1b00      	subs	r0, r0, r4
 80023e0:	2802      	cmp	r0, #2
 80023e2:	d9f5      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023e4:	2003      	movs	r0, #3
 80023e6:	e069      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4a3b      	ldr	r2, [pc, #236]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 80023ea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	e7db      	b.n	80023ac <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <HAL_RCC_OscConfig+0x3f4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80023fa:	f7ff faff 	bl	80019fc <HAL_GetTick>
 80023fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002408:	d006      	beq.n	8002418 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7ff faf7 	bl	80019fc <HAL_GetTick>
 800240e:	1b40      	subs	r0, r0, r5
 8002410:	2802      	cmp	r0, #2
 8002412:	d9f5      	bls.n	8002400 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002414:	2003      	movs	r0, #3
 8002416:	e051      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002418:	69e3      	ldr	r3, [r4, #28]
 800241a:	6a22      	ldr	r2, [r4, #32]
 800241c:	4313      	orrs	r3, r2
 800241e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002420:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002424:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002426:	0852      	lsrs	r2, r2, #1
 8002428:	3a01      	subs	r2, #1
 800242a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800242e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002434:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 8002436:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b28      	ldr	r3, [pc, #160]	@ (80024dc <HAL_RCC_OscConfig+0x3f4>)
 800243a:	2201      	movs	r2, #1
 800243c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800243e:	f7ff fadd 	bl	80019fc <HAL_GetTick>
 8002442:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff fad5 	bl	80019fc <HAL_GetTick>
 8002452:	1b00      	subs	r0, r0, r4
 8002454:	2802      	cmp	r0, #2
 8002456:	d9f5      	bls.n	8002444 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002458:	2003      	movs	r0, #3
 800245a:	e02f      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800245c:	2000      	movs	r0, #0
 800245e:	e02d      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
 8002460:	2000      	movs	r0, #0
 8002462:	e02b      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	2b01      	cmp	r3, #1
 8002466:	d02b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x3f0>)
 800246a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002470:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002472:	4291      	cmp	r1, r2
 8002474:	d126      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002476:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800247a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	428a      	cmp	r2, r1
 800247e:	d123      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002486:	401a      	ands	r2, r3
 8002488:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800248c:	d11e      	bne.n	80024cc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002492:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002494:	0852      	lsrs	r2, r2, #1
 8002496:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002498:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800249e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80024a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80024a8:	d114      	bne.n	80024d4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80024aa:	2000      	movs	r0, #0
 80024ac:	e006      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
}
 80024b0:	4770      	bx	lr
        return HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	e002      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80024b6:	2001      	movs	r0, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80024ba:	2000      	movs	r0, #0
}
 80024bc:	b002      	add	sp, #8
 80024be:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
 80024c2:	e7fb      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80024c4:	2001      	movs	r0, #1
 80024c6:	e7f9      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
 80024c8:	2001      	movs	r0, #1
 80024ca:	e7f7      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
 80024cc:	2001      	movs	r0, #1
 80024ce:	e7f5      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
 80024d0:	2001      	movs	r0, #1
 80024d2:	e7f3      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
 80024d4:	2001      	movs	r0, #1
 80024d6:	e7f1      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e2:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ee:	482f      	ldr	r0, [pc, #188]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024f0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002500:	d02c      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002504:	6858      	ldr	r0, [r3, #4]
 8002506:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800250a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800250e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002512:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002516:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800251a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800251e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002522:	ebb1 010c 	subs.w	r1, r1, ip
 8002526:	eb63 030e 	sbc.w	r3, r3, lr
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002530:	00c9      	lsls	r1, r1, #3
 8002532:	eb11 0c00 	adds.w	ip, r1, r0
 8002536:	f143 0300 	adc.w	r3, r3, #0
 800253a:	0299      	lsls	r1, r3, #10
 800253c:	2300      	movs	r3, #0
 800253e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002542:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002546:	f7fe fb2f 	bl	8000ba8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800254a:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8002556:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800255a:	e7c9      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800255e:	6858      	ldr	r0, [r3, #4]
 8002560:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002564:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002568:	ebbc 0c00 	subs.w	ip, ip, r0
 800256c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002570:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002574:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002578:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800257c:	ebb1 010c 	subs.w	r1, r1, ip
 8002580:	eb63 030e 	sbc.w	r3, r3, lr
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258a:	00c9      	lsls	r1, r1, #3
 800258c:	eb11 0c00 	adds.w	ip, r1, r0
 8002590:	f143 0300 	adc.w	r3, r3, #0
 8002594:	0299      	lsls	r1, r3, #10
 8002596:	2300      	movs	r3, #0
 8002598:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800259c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80025a0:	f7fe fb02 	bl	8000ba8 <__aeabi_uldivmod>
 80025a4:	e7d1      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x6a>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	00f42400 	.word	0x00f42400

080025b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80025b0:	2800      	cmp	r0, #0
 80025b2:	f000 809b 	beq.w	80026ec <HAL_RCC_ClockConfig+0x13c>
{
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	460d      	mov	r5, r1
 80025ba:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b4f      	ldr	r3, [pc, #316]	@ (80026fc <HAL_RCC_ClockConfig+0x14c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d208      	bcs.n	80025da <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	b2cb      	uxtb	r3, r1
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_RCC_ClockConfig+0x14c>)
 80025cc:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	428b      	cmp	r3, r1
 80025d6:	f040 808b 	bne.w	80026f0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	f013 0f02 	tst.w	r3, #2
 80025e0:	d017      	beq.n	8002612 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e2:	f013 0f04 	tst.w	r3, #4
 80025e6:	d004      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4a45      	ldr	r2, [pc, #276]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 80025ea:	6893      	ldr	r3, [r2, #8]
 80025ec:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025f0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	f013 0f08 	tst.w	r3, #8
 80025f8:	d004      	beq.n	8002604 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fa:	4a41      	ldr	r2, [pc, #260]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 80025fc:	6893      	ldr	r3, [r2, #8]
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4a3e      	ldr	r2, [pc, #248]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002606:	6893      	ldr	r3, [r2, #8]
 8002608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800260c:	68a1      	ldr	r1, [r4, #8]
 800260e:	430b      	orrs	r3, r1
 8002610:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f013 0f01 	tst.w	r3, #1
 8002618:	d032      	beq.n	8002680 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d021      	beq.n	8002664 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002620:	1e9a      	subs	r2, r3, #2
 8002622:	2a01      	cmp	r2, #1
 8002624:	d925      	bls.n	8002672 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4a36      	ldr	r2, [pc, #216]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f012 0f02 	tst.w	r2, #2
 800262e:	d061      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4933      	ldr	r1, [pc, #204]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002632:	688a      	ldr	r2, [r1, #8]
 8002634:	f022 0203 	bic.w	r2, r2, #3
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800263c:	f7ff f9de 	bl	80019fc <HAL_GetTick>
 8002640:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2f      	ldr	r3, [pc, #188]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	6862      	ldr	r2, [r4, #4]
 800264c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002650:	d016      	beq.n	8002680 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f7ff f9d3 	bl	80019fc <HAL_GetTick>
 8002656:	1b80      	subs	r0, r0, r6
 8002658:	f241 3388 	movw	r3, #5000	@ 0x1388
 800265c:	4298      	cmp	r0, r3
 800265e:	d9f0      	bls.n	8002642 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002660:	2003      	movs	r0, #3
 8002662:	e042      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002664:	4a26      	ldr	r2, [pc, #152]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800266c:	d1e0      	bne.n	8002630 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e03b      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4a23      	ldr	r2, [pc, #140]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800267a:	d1d9      	bne.n	8002630 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
 800267e:	e034      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_ClockConfig+0x14c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	42ab      	cmp	r3, r5
 800268a:	d907      	bls.n	800269c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268c:	b2ea      	uxtb	r2, r5
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_RCC_ClockConfig+0x14c>)
 8002690:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	42ab      	cmp	r3, r5
 800269a:	d12d      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f013 0f04 	tst.w	r3, #4
 80026a2:	d006      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4a16      	ldr	r2, [pc, #88]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 80026a6:	6893      	ldr	r3, [r2, #8]
 80026a8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80026ac:	68e1      	ldr	r1, [r4, #12]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f013 0f08 	tst.w	r3, #8
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 80026bc:	6893      	ldr	r3, [r2, #8]
 80026be:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80026c2:	6921      	ldr	r1, [r4, #16]
 80026c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026c8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ca:	f7ff ff09 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <HAL_RCC_ClockConfig+0x150>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002704 <HAL_RCC_ClockConfig+0x154>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	40d8      	lsrs	r0, r3
 80026dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_RCC_ClockConfig+0x158>)
 80026de:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_RCC_ClockConfig+0x15c>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f7ff f862 	bl	80017ac <HAL_InitTick>
  return HAL_OK;
 80026e8:	2000      	movs	r0, #0
}
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80026ec:	2001      	movs	r0, #1
}
 80026ee:	4770      	bx	lr
      return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e7fa      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7f8      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
 80026fa:	e7f6      	b.n	80026ea <HAL_RCC_ClockConfig+0x13a>
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	08008738 	.word	0x08008738
 8002708:	20000000 	.word	0x20000000
 800270c:	20000008 	.word	0x20000008

08002710 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002710:	4b01      	ldr	r3, [pc, #4]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x8>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800271e:	f7ff fff7 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002722:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800272a:	4a03      	ldr	r2, [pc, #12]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
}
 800272e:	40d8      	lsrs	r0, r3
 8002730:	bd08      	pop	{r3, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	08008730 	.word	0x08008730

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800273e:	f7ff ffe7 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002742:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800274a:	4a03      	ldr	r2, [pc, #12]	@ (8002758 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
}
 800274e:	40d8      	lsrs	r0, r3
 8002750:	bd08      	pop	{r3, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	08008730 	.word	0x08008730

0800275c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800275c:	230f      	movs	r3, #15
 800275e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCC_GetClockConfig+0x34>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	f002 0203 	and.w	r2, r2, #3
 8002768:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002770:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002778:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	08db      	lsrs	r3, r3, #3
 800277e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002782:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_RCC_GetClockConfig+0x38>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	600b      	str	r3, [r1, #0]
}
 800278e:	4770      	bx	lr
 8002790:	40023800 	.word	0x40023800
 8002794:	40023c00 	.word	0x40023c00

08002798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002798:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800279a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279c:	6a04      	ldr	r4, [r0, #32]
 800279e:	f024 0401 	bic.w	r4, r4, #1
 80027a2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027aa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80027b2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80027b6:	6203      	str	r3, [r0, #32]
}
 80027b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027bc:	4770      	bx	lr

080027be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027be:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027c0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c2:	6a04      	ldr	r4, [r0, #32]
 80027c4:	f024 0410 	bic.w	r4, r4, #16
 80027c8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ca:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027cc:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80027d8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027dc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80027de:	6203      	str	r3, [r0, #32]
}
 80027e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ec:	430b      	orrs	r3, r1
 80027ee:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f2:	6083      	str	r3, [r0, #8]
}
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80027f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d137      	bne.n	8002872 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002808:	6802      	ldr	r2, [r0, #0]
 800280a:	68d3      	ldr	r3, [r2, #12]
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	6803      	ldr	r3, [r0, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <HAL_TIM_Base_Start_IT+0x84>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d020      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281e:	d01d      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 8002820:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002824:	4293      	cmp	r3, r2
 8002826:	d019      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 8002828:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800282c:	4293      	cmp	r3, r2
 800282e:	d015      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 8002830:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002834:	4293      	cmp	r3, r2
 8002836:	d011      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 8002838:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 8002840:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
 8002848:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800284c:	4293      	cmp	r3, r2
 800284e:	d005      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002858:	2000      	movs	r0, #0
 800285a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	2a06      	cmp	r2, #6
 8002864:	d007      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800286e:	2000      	movs	r0, #0
 8002870:	4770      	bx	lr
    return HAL_ERROR;
 8002872:	2001      	movs	r0, #1
 8002874:	4770      	bx	lr
  return HAL_OK;
 8002876:	2000      	movs	r0, #0
}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40010000 	.word	0x40010000

08002880 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_IC_CaptureCallback>:
}
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_TriggerCallback>:
}
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_IRQHandler>:
{
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800288c:	6803      	ldr	r3, [r0, #0]
 800288e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002890:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002892:	f015 0f02 	tst.w	r5, #2
 8002896:	d010      	beq.n	80028ba <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002898:	f016 0f02 	tst.w	r6, #2
 800289c:	d00d      	beq.n	80028ba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800289e:	f06f 0202 	mvn.w	r2, #2
 80028a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a8:	6803      	ldr	r3, [r0, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f013 0f03 	tst.w	r3, #3
 80028b0:	d05e      	beq.n	8002970 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	f7ff ffe6 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	2300      	movs	r3, #0
 80028b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028ba:	f015 0f04 	tst.w	r5, #4
 80028be:	d012      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028c0:	f016 0f04 	tst.w	r6, #4
 80028c4:	d00f      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	f06f 0204 	mvn.w	r2, #4
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ce:	2302      	movs	r3, #2
 80028d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80028da:	d04f      	beq.n	800297c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80028dc:	4620      	mov	r0, r4
 80028de:	f7ff ffd0 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	2300      	movs	r3, #0
 80028e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e6:	f015 0f08 	tst.w	r5, #8
 80028ea:	d012      	beq.n	8002912 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ec:	f016 0f08 	tst.w	r6, #8
 80028f0:	d00f      	beq.n	8002912 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	f06f 0208 	mvn.w	r2, #8
 80028f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fa:	2304      	movs	r3, #4
 80028fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f013 0f03 	tst.w	r3, #3
 8002906:	d040      	beq.n	800298a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff ffba 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	2300      	movs	r3, #0
 8002910:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002912:	f015 0f10 	tst.w	r5, #16
 8002916:	d012      	beq.n	800293e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002918:	f016 0f10 	tst.w	r6, #16
 800291c:	d00f      	beq.n	800293e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002926:	2308      	movs	r3, #8
 8002928:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002932:	d031      	beq.n	8002998 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002934:	4620      	mov	r0, r4
 8002936:	f7ff ffa4 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	2300      	movs	r3, #0
 800293c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800293e:	f015 0f01 	tst.w	r5, #1
 8002942:	d002      	beq.n	800294a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002944:	f016 0f01 	tst.w	r6, #1
 8002948:	d12d      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800294a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800294e:	d002      	beq.n	8002956 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002950:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002954:	d12f      	bne.n	80029b6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002956:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800295a:	d002      	beq.n	8002962 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800295c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002960:	d131      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002962:	f015 0f20 	tst.w	r5, #32
 8002966:	d002      	beq.n	800296e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002968:	f016 0f20 	tst.w	r6, #32
 800296c:	d133      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x14e>
}
 800296e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002970:	f7ff ff86 	bl	8002880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff ff85 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
 800297a:	e79c      	b.n	80028b6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ff7f 	bl	8002880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff ff7e 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
 8002988:	e7ab      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff ff78 	bl	8002880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ff77 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
 8002996:	e7ba      	b.n	800290e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002998:	4620      	mov	r0, r4
 800299a:	f7ff ff71 	bl	8002880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299e:	4620      	mov	r0, r4
 80029a0:	f7ff ff70 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
 80029a4:	e7c9      	b.n	800293a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fe fc08 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
 80029b4:	e7c9      	b.n	800294a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 f97d 	bl	8002cbe <HAL_TIMEx_BreakCallback>
 80029c4:	e7c7      	b.n	8002956 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7ff ff59 	bl	8002886 <HAL_TIM_TriggerCallback>
 80029d4:	e7c5      	b.n	8002962 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	f06f 0220 	mvn.w	r2, #32
 80029dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80029de:	4620      	mov	r0, r4
 80029e0:	f000 f96c 	bl	8002cbc <HAL_TIMEx_CommutCallback>
}
 80029e4:	e7c3      	b.n	800296e <HAL_TIM_IRQHandler+0xe6>
	...

080029e8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80029e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ea:	4a34      	ldr	r2, [pc, #208]	@ (8002abc <TIM_Base_SetConfig+0xd4>)
 80029ec:	4290      	cmp	r0, r2
 80029ee:	d012      	beq.n	8002a16 <TIM_Base_SetConfig+0x2e>
 80029f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80029f4:	d00f      	beq.n	8002a16 <TIM_Base_SetConfig+0x2e>
 80029f6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80029fa:	4290      	cmp	r0, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_Base_SetConfig+0x2e>
 80029fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a02:	4290      	cmp	r0, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0x2e>
 8002a06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a0a:	4290      	cmp	r0, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0x2e>
 8002a0e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a12:	4290      	cmp	r0, r2
 8002a14:	d103      	bne.n	8002a1e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a1a:	684a      	ldr	r2, [r1, #4]
 8002a1c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <TIM_Base_SetConfig+0xd4>)
 8002a20:	4290      	cmp	r0, r2
 8002a22:	d02a      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a24:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a28:	d027      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a2a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002a2e:	4290      	cmp	r0, r2
 8002a30:	d023      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a36:	4290      	cmp	r0, r2
 8002a38:	d01f      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a3e:	4290      	cmp	r0, r2
 8002a40:	d01b      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a42:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a46:	4290      	cmp	r0, r2
 8002a48:	d017      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a4a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d013      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a56:	4290      	cmp	r0, r2
 8002a58:	d00f      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a5e:	4290      	cmp	r0, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a62:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002a66:	4290      	cmp	r0, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a6e:	4290      	cmp	r0, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0x92>
 8002a72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a76:	4290      	cmp	r0, r2
 8002a78:	d103      	bne.n	8002a82 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	68ca      	ldr	r2, [r1, #12]
 8002a80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a86:	694a      	ldr	r2, [r1, #20]
 8002a88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	688b      	ldr	r3, [r1, #8]
 8002a8e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a90:	680b      	ldr	r3, [r1, #0]
 8002a92:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <TIM_Base_SetConfig+0xd4>)
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d003      	beq.n	8002aa2 <TIM_Base_SetConfig+0xba>
 8002a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d101      	bne.n	8002aa6 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa2:	690b      	ldr	r3, [r1, #16]
 8002aa4:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aaa:	6903      	ldr	r3, [r0, #16]
 8002aac:	f013 0f01 	tst.w	r3, #1
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ab2:	6903      	ldr	r3, [r0, #16]
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6103      	str	r3, [r0, #16]
}
 8002aba:	4770      	bx	lr
 8002abc:	40010000 	.word	0x40010000

08002ac0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002ac0:	b340      	cbz	r0, 8002b14 <HAL_TIM_Base_Init+0x54>
{
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002aca:	b1f3      	cbz	r3, 8002b0a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ad8:	f7ff ff86 	bl	80029e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002ae6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002aea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002aee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002afa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002afe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002b06:	2000      	movs	r0, #0
}
 8002b08:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b0e:	f7fe fdcd 	bl	80016ac <HAL_TIM_Base_MspInit>
 8002b12:	e7db      	b.n	8002acc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
}
 8002b16:	4770      	bx	lr

08002b18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b18:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b20:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002b24:	430a      	orrs	r2, r1
 8002b26:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2a:	6082      	str	r2, [r0, #8]
}
 8002b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b32:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d078      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0xfa>
{
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002b4a:	6802      	ldr	r2, [r0, #0]
 8002b4c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002b56:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002b58:	680b      	ldr	r3, [r1, #0]
 8002b5a:	2b60      	cmp	r3, #96	@ 0x60
 8002b5c:	d04c      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xc6>
 8002b5e:	d829      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x82>
 8002b60:	2b40      	cmp	r3, #64	@ 0x40
 8002b62:	d054      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xdc>
 8002b64:	d90c      	bls.n	8002b80 <HAL_TIM_ConfigClockSource+0x4e>
 8002b66:	2b50      	cmp	r3, #80	@ 0x50
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	68ca      	ldr	r2, [r1, #12]
 8002b6c:	6849      	ldr	r1, [r1, #4]
 8002b6e:	6800      	ldr	r0, [r0, #0]
 8002b70:	f7ff fe12 	bl	8002798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b74:	2150      	movs	r1, #80	@ 0x50
 8002b76:	6820      	ldr	r0, [r4, #0]
 8002b78:	f7ff fe35 	bl	80027e6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2000      	movs	r0, #0
      break;
 8002b7e:	e005      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d00d      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0x6e>
 8002b84:	d909      	bls.n	8002b9a <HAL_TIM_ConfigClockSource+0x68>
 8002b86:	2b30      	cmp	r3, #48	@ 0x30
 8002b88:	d00a      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002b8a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002b92:	2300      	movs	r3, #0
 8002b94:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002b98:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b9a:	b10b      	cbz	r3, 8002ba0 <HAL_TIM_ConfigClockSource+0x6e>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d105      	bne.n	8002bac <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6820      	ldr	r0, [r4, #0]
 8002ba4:	f7ff fe1f 	bl	80027e6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2000      	movs	r0, #0
      break;
 8002baa:	e7ef      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002bac:	2001      	movs	r0, #1
 8002bae:	e7ed      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	e7eb      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb8:	d034      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0xf2>
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bbe:	d10c      	bne.n	8002bda <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc0:	68cb      	ldr	r3, [r1, #12]
 8002bc2:	684a      	ldr	r2, [r1, #4]
 8002bc4:	6889      	ldr	r1, [r1, #8]
 8002bc6:	6800      	ldr	r0, [r0, #0]
 8002bc8:	f7ff ffa6 	bl	8002b18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	6893      	ldr	r3, [r2, #8]
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2000      	movs	r0, #0
      break;
 8002bd8:	e7d8      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002bda:	2b70      	cmp	r3, #112	@ 0x70
 8002bdc:	d124      	bne.n	8002c28 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002bde:	68cb      	ldr	r3, [r1, #12]
 8002be0:	684a      	ldr	r2, [r1, #4]
 8002be2:	6889      	ldr	r1, [r1, #8]
 8002be4:	6800      	ldr	r0, [r0, #0]
 8002be6:	f7ff ff97 	bl	8002b18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002bf2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2000      	movs	r0, #0
      break;
 8002bf6:	e7c9      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf8:	68ca      	ldr	r2, [r1, #12]
 8002bfa:	6849      	ldr	r1, [r1, #4]
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	f7ff fdde 	bl	80027be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c02:	2160      	movs	r1, #96	@ 0x60
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	f7ff fdee 	bl	80027e6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2000      	movs	r0, #0
      break;
 8002c0c:	e7be      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0e:	68ca      	ldr	r2, [r1, #12]
 8002c10:	6849      	ldr	r1, [r1, #4]
 8002c12:	6800      	ldr	r0, [r0, #0]
 8002c14:	f7ff fdc0 	bl	8002798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	2140      	movs	r1, #64	@ 0x40
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	f7ff fde3 	bl	80027e6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2000      	movs	r0, #0
      break;
 8002c22:	e7b3      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002c24:	2000      	movs	r0, #0
 8002c26:	e7b1      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
 8002c2a:	e7af      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002c2c:	2002      	movs	r0, #2
}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c30:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002c34:	2a01      	cmp	r2, #1
 8002c36:	d03d      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8002c38:	b410      	push	{r4}
 8002c3a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c42:	2202      	movs	r2, #2
 8002c44:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c48:	6802      	ldr	r2, [r0, #0]
 8002c4a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c4c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c4e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c52:	6808      	ldr	r0, [r1, #0]
 8002c54:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c58:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4816      	ldr	r0, [pc, #88]	@ (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002c5e:	4282      	cmp	r2, r0
 8002c60:	d01a      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c62:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002c66:	d017      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c68:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002c6c:	4282      	cmp	r2, r0
 8002c6e:	d013      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c70:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002c74:	4282      	cmp	r2, r0
 8002c76:	d00f      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c78:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002c7c:	4282      	cmp	r2, r0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c80:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002c84:	4282      	cmp	r2, r0
 8002c86:	d007      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c88:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8002c8c:	4282      	cmp	r2, r0
 8002c8e:	d003      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002c90:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002c94:	4282      	cmp	r2, r0
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c98:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c9c:	6849      	ldr	r1, [r1, #4]
 8002c9e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cb2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002cb4:	2002      	movs	r0, #2
}
 8002cb6:	4770      	bx	lr
 8002cb8:	40010000 	.word	0x40010000

08002cbc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cbe:	4770      	bx	lr

08002cc0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	f102 030c 	add.w	r3, r2, #12
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	320c      	adds	r2, #12
 8002cd0:	e842 3100 	strex	r1, r3, [r2]
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	d1f3      	bne.n	8002cc0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	f102 0314 	add.w	r3, r2, #20
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	3214      	adds	r2, #20
 8002ce8:	e842 3100 	strex	r1, r3, [r2]
 8002cec:	2900      	cmp	r1, #0
 8002cee:	d1f3      	bne.n	8002cd8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d005      	beq.n	8002d02 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002d00:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	f102 030c 	add.w	r3, r2, #12
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	320c      	adds	r2, #12
 8002d12:	e842 3100 	strex	r1, r3, [r2]
 8002d16:	2900      	cmp	r1, #0
 8002d18:	d1f3      	bne.n	8002d02 <UART_EndRxTransfer+0x42>
 8002d1a:	e7ec      	b.n	8002cf6 <UART_EndRxTransfer+0x36>

08002d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d20:	6802      	ldr	r2, [r0, #0]
 8002d22:	6913      	ldr	r3, [r2, #16]
 8002d24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d28:	68c1      	ldr	r1, [r0, #12]
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d2e:	6883      	ldr	r3, [r0, #8]
 8002d30:	6902      	ldr	r2, [r0, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	6943      	ldr	r3, [r0, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	69c3      	ldr	r3, [r0, #28]
 8002d3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002d3c:	6801      	ldr	r1, [r0, #0]
 8002d3e:	68cb      	ldr	r3, [r1, #12]
 8002d40:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002d44:	f023 030c 	bic.w	r3, r3, #12
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d4c:	6802      	ldr	r2, [r0, #0]
 8002d4e:	6953      	ldr	r3, [r2, #20]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d54:	6981      	ldr	r1, [r0, #24]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	4a31      	ldr	r2, [pc, #196]	@ (8002e24 <UART_SetConfig+0x108>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d006      	beq.n	8002d70 <UART_SetConfig+0x54>
 8002d62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d002      	beq.n	8002d70 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d6a:	f7ff fcd7 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8002d6e:	e001      	b.n	8002d74 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d70:	f7ff fce4 	bl	800273c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d74:	69e3      	ldr	r3, [r4, #28]
 8002d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d7a:	d029      	beq.n	8002dd0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	1803      	adds	r3, r0, r0
 8002d80:	4149      	adcs	r1, r1
 8002d82:	181b      	adds	r3, r3, r0
 8002d84:	f141 0100 	adc.w	r1, r1, #0
 8002d88:	00c9      	lsls	r1, r1, #3
 8002d8a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1818      	adds	r0, r3, r0
 8002d92:	6863      	ldr	r3, [r4, #4]
 8002d94:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002d98:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002d9c:	f141 0100 	adc.w	r1, r1, #0
 8002da0:	f7fd ff02 	bl	8000ba8 <__aeabi_uldivmod>
 8002da4:	4a20      	ldr	r2, [pc, #128]	@ (8002e28 <UART_SetConfig+0x10c>)
 8002da6:	fba2 3100 	umull	r3, r1, r2, r0
 8002daa:	0949      	lsrs	r1, r1, #5
 8002dac:	2364      	movs	r3, #100	@ 0x64
 8002dae:	fb03 0311 	mls	r3, r3, r1, r0
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	3332      	adds	r3, #50	@ 0x32
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dc0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	6821      	ldr	r1, [r4, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }
}
 8002dce:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	1802      	adds	r2, r0, r0
 8002dd4:	eb43 0103 	adc.w	r1, r3, r3
 8002dd8:	1812      	adds	r2, r2, r0
 8002dda:	f141 0100 	adc.w	r1, r1, #0
 8002dde:	00c9      	lsls	r1, r1, #3
 8002de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de4:	00d2      	lsls	r2, r2, #3
 8002de6:	1810      	adds	r0, r2, r0
 8002de8:	f141 0100 	adc.w	r1, r1, #0
 8002dec:	6862      	ldr	r2, [r4, #4]
 8002dee:	1892      	adds	r2, r2, r2
 8002df0:	415b      	adcs	r3, r3
 8002df2:	f7fd fed9 	bl	8000ba8 <__aeabi_uldivmod>
 8002df6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <UART_SetConfig+0x10c>)
 8002df8:	fba2 3100 	umull	r3, r1, r2, r0
 8002dfc:	0949      	lsrs	r1, r1, #5
 8002dfe:	2364      	movs	r3, #100	@ 0x64
 8002e00:	fb03 0311 	mls	r3, r3, r1, r0
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	3332      	adds	r3, #50	@ 0x32
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	005a      	lsls	r2, r3, #1
 8002e10:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002e14:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	6821      	ldr	r1, [r4, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
 8002e22:	e7d4      	b.n	8002dce <UART_SetConfig+0xb2>
 8002e24:	40011000 	.word	0x40011000
 8002e28:	51eb851f 	.word	0x51eb851f

08002e2c <UART_WaitOnFlagUntilTimeout>:
{
 8002e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e30:	b083      	sub	sp, #12
 8002e32:	4605      	mov	r5, r0
 8002e34:	460e      	mov	r6, r1
 8002e36:	4617      	mov	r7, r2
 8002e38:	4699      	mov	r9, r3
 8002e3a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3e:	682b      	ldr	r3, [r5, #0]
 8002e40:	681c      	ldr	r4, [r3, #0]
 8002e42:	ea36 0404 	bics.w	r4, r6, r4
 8002e46:	bf0c      	ite	eq
 8002e48:	2401      	moveq	r4, #1
 8002e4a:	2400      	movne	r4, #0
 8002e4c:	42bc      	cmp	r4, r7
 8002e4e:	d128      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002e54:	d0f3      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe fdd1 	bl	80019fc <HAL_GetTick>
 8002e5a:	eba0 0009 	sub.w	r0, r0, r9
 8002e5e:	4540      	cmp	r0, r8
 8002e60:	d823      	bhi.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x7e>
 8002e62:	f1b8 0f00 	cmp.w	r8, #0
 8002e66:	d022      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	f012 0f04 	tst.w	r2, #4
 8002e70:	d0e5      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x12>
 8002e72:	2e80      	cmp	r6, #128	@ 0x80
 8002e74:	d0e3      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x12>
 8002e76:	2e40      	cmp	r6, #64	@ 0x40
 8002e78:	d0e1      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f012 0f08 	tst.w	r2, #8
 8002e80:	d0dd      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e82:	2400      	movs	r4, #0
 8002e84:	9401      	str	r4, [sp, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	9201      	str	r2, [sp, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002e90:	4628      	mov	r0, r5
 8002e92:	f7ff ff15 	bl	8002cc0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e96:	2308      	movs	r3, #8
 8002e98:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002e9a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	e000      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002ea2:	2000      	movs	r0, #0
}
 8002ea4:	b003      	add	sp, #12
 8002ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002eaa:	2003      	movs	r0, #3
 8002eac:	e7fa      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x78>
 8002eae:	2003      	movs	r0, #3
 8002eb0:	e7f8      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x78>

08002eb2 <HAL_UART_Init>:
  if (huart == NULL)
 8002eb2:	b360      	cbz	r0, 8002f0e <HAL_UART_Init+0x5c>
{
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002ebc:	b313      	cbz	r3, 8002f04 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ebe:	2324      	movs	r3, #36	@ 0x24
 8002ec0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	68d3      	ldr	r3, [r2, #12]
 8002ec8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ecc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff ff24 	bl	8002d1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	6913      	ldr	r3, [r2, #16]
 8002ed8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002edc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	6953      	ldr	r3, [r2, #20]
 8002ee2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002ee6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	68d3      	ldr	r3, [r2, #12]
 8002eec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ef0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f00:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002f02:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002f04:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002f08:	f7fe fc16 	bl	8001738 <HAL_UART_MspInit>
 8002f0c:	e7d7      	b.n	8002ebe <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
}
 8002f10:	4770      	bx	lr

08002f12 <HAL_UART_Transmit>:
{
 8002f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d156      	bne.n	8002fd2 <HAL_UART_Transmit+0xc0>
 8002f24:	4604      	mov	r4, r0
 8002f26:	460d      	mov	r5, r1
 8002f28:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	d055      	beq.n	8002fda <HAL_UART_Transmit+0xc8>
 8002f2e:	b90a      	cbnz	r2, 8002f34 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002f30:	2001      	movs	r0, #1
 8002f32:	e04f      	b.n	8002fd4 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f38:	2321      	movs	r3, #33	@ 0x21
 8002f3a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002f3e:	f7fe fd5d 	bl	80019fc <HAL_GetTick>
 8002f42:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002f44:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f48:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4c:	68a3      	ldr	r3, [r4, #8]
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002f54:	f04f 0800 	mov.w	r8, #0
 8002f58:	e014      	b.n	8002f84 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	6923      	ldr	r3, [r4, #16]
 8002f5c:	b32b      	cbz	r3, 8002faa <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002f5e:	f04f 0800 	mov.w	r8, #0
 8002f62:	e00f      	b.n	8002f84 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002f64:	2320      	movs	r3, #32
 8002f66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	e032      	b.n	8002fd4 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002f7a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002f7c:	b292      	uxth	r2, r2
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	b292      	uxth	r2, r2
 8002f82:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f84:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b193      	cbz	r3, 8002fb0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	9600      	str	r6, [sp, #0]
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7ff ff4a 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d1e3      	bne.n	8002f64 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	d0e6      	beq.n	8002f6e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fa0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa8:	e7e7      	b.n	8002f7a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002faa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002fac:	2500      	movs	r5, #0
 8002fae:	e7e9      	b.n	8002f84 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	9600      	str	r6, [sp, #0]
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2140      	movs	r1, #64	@ 0x40
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff ff37 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002fbe:	b918      	cbnz	r0, 8002fc8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002fc6:	e005      	b.n	8002fd4 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
 8002fd0:	e000      	b.n	8002fd4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002fd2:	2002      	movs	r0, #2
}
 8002fd4:	b002      	add	sp, #8
 8002fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7fa      	b.n	8002fd4 <HAL_UART_Transmit+0xc2>

08002fde <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fde:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fe0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002fe4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002fe6:	f001 ff05 	bl	8004df4 <xTaskGetSchedulerState>
 8002fea:	2801      	cmp	r0, #1
 8002fec:	d100      	bne.n	8002ff0 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8002fee:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8002ff0:	f002 fb08 	bl	8005604 <xPortSysTickHandler>
}
 8002ff4:	e7fb      	b.n	8002fee <SysTick_Handler+0x10>
	...

08002ff8 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ffc:	b92b      	cbnz	r3, 800300a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <osKernelInitialize+0x20>)
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	b928      	cbnz	r0, 8003010 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003008:	4770      	bx	lr
    stat = osErrorISR;
 800300a:	f06f 0005 	mvn.w	r0, #5
 800300e:	4770      	bx	lr
    } else {
      stat = osError;
 8003010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000bc4 	.word	0x20000bc4

0800301c <osKernelStart>:
 800301c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003020:	b973      	cbnz	r3, 8003040 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003022:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <osKernelStart+0x30>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d10d      	bne.n	8003046 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800302a:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	2400      	movs	r4, #0
 800302e:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <osKernelStart+0x34>)
 8003030:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <osKernelStart+0x30>)
 8003034:	2202      	movs	r2, #2
 8003036:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003038:	f001 fb3c 	bl	80046b4 <vTaskStartScheduler>
      stat = osOK;
 800303c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800303e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003040:	f06f 0005 	mvn.w	r0, #5
 8003044:	4770      	bx	lr
      stat = osError;
 8003046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800304a:	4770      	bx	lr
 800304c:	20000bc4 	.word	0x20000bc4
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003054:	b508      	push	{r3, lr}
 8003056:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 800305a:	b113      	cbz	r3, 8003062 <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 800305c:	f001 fb90 	bl	8004780 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8003060:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 8003062:	f001 fb87 	bl	8004774 <xTaskGetTickCount>
  return (ticks);
 8003066:	e7fb      	b.n	8003060 <osKernelGetTickCount+0xc>

08003068 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800306c:	2400      	movs	r4, #0
 800306e:	9405      	str	r4, [sp, #20]
 8003070:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003074:	bb74      	cbnz	r4, 80030d4 <osThreadNew+0x6c>
 8003076:	b368      	cbz	r0, 80030d4 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003078:	b322      	cbz	r2, 80030c4 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800307a:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800307c:	6993      	ldr	r3, [r2, #24]
 800307e:	b903      	cbnz	r3, 8003082 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8003080:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003082:	1e5c      	subs	r4, r3, #1
 8003084:	2c37      	cmp	r4, #55	@ 0x37
 8003086:	d849      	bhi.n	800311c <osThreadNew+0xb4>
 8003088:	6854      	ldr	r4, [r2, #4]
 800308a:	f014 0f01 	tst.w	r4, #1
 800308e:	d147      	bne.n	8003120 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003090:	6956      	ldr	r6, [r2, #20]
 8003092:	b16e      	cbz	r6, 80030b0 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003094:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003098:	6894      	ldr	r4, [r2, #8]
 800309a:	b12c      	cbz	r4, 80030a8 <osThreadNew+0x40>
 800309c:	68d7      	ldr	r7, [r2, #12]
 800309e:	2fab      	cmp	r7, #171	@ 0xab
 80030a0:	d902      	bls.n	80030a8 <osThreadNew+0x40>
 80030a2:	6917      	ldr	r7, [r2, #16]
 80030a4:	b107      	cbz	r7, 80030a8 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030a6:	b9c6      	cbnz	r6, 80030da <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030a8:	b12c      	cbz	r4, 80030b6 <osThreadNew+0x4e>
    mem  = -1;
 80030aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80030ae:	e00e      	b.n	80030ce <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80030b0:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80030b4:	e7f0      	b.n	8003098 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030b6:	68d4      	ldr	r4, [r2, #12]
 80030b8:	b98c      	cbnz	r4, 80030de <osThreadNew+0x76>
 80030ba:	6914      	ldr	r4, [r2, #16]
 80030bc:	b194      	cbz	r4, 80030e4 <osThreadNew+0x7c>
    mem  = -1;
 80030be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80030c2:	e004      	b.n	80030ce <osThreadNew+0x66>
    name = NULL;
 80030c4:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80030c6:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80030c8:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80030ca:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 80030ce:	2c01      	cmp	r4, #1
 80030d0:	d00a      	beq.n	80030e8 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80030d2:	b1ac      	cbz	r4, 8003100 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030d4:	9805      	ldr	r0, [sp, #20]
}
 80030d6:	b007      	add	sp, #28
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80030da:	2401      	movs	r4, #1
 80030dc:	e7f7      	b.n	80030ce <osThreadNew+0x66>
    mem  = -1;
 80030de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80030e2:	e7f4      	b.n	80030ce <osThreadNew+0x66>
          mem = 0;
 80030e4:	2400      	movs	r4, #0
 80030e6:	e7f2      	b.n	80030ce <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030e8:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80030ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030ec:	9202      	str	r2, [sp, #8]
 80030ee:	9401      	str	r4, [sp, #4]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	460b      	mov	r3, r1
 80030f4:	4662      	mov	r2, ip
 80030f6:	4629      	mov	r1, r5
 80030f8:	f001 fa26 	bl	8004548 <xTaskCreateStatic>
 80030fc:	9005      	str	r0, [sp, #20]
 80030fe:	e7e9      	b.n	80030d4 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003100:	aa05      	add	r2, sp, #20
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	460b      	mov	r3, r1
 8003108:	fa1f f28c 	uxth.w	r2, ip
 800310c:	4629      	mov	r1, r5
 800310e:	f001 fa56 	bl	80045be <xTaskCreate>
 8003112:	2801      	cmp	r0, #1
 8003114:	d0de      	beq.n	80030d4 <osThreadNew+0x6c>
            hTask = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	9305      	str	r3, [sp, #20]
 800311a:	e7db      	b.n	80030d4 <osThreadNew+0x6c>
        return (NULL);
 800311c:	2000      	movs	r0, #0
 800311e:	e7da      	b.n	80030d6 <osThreadNew+0x6e>
 8003120:	2000      	movs	r0, #0
 8003122:	e7d8      	b.n	80030d6 <osThreadNew+0x6e>

08003124 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003124:	b508      	push	{r3, lr}
 8003126:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800312a:	b933      	cbnz	r3, 800313a <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800312c:	b908      	cbnz	r0, 8003132 <osDelay+0xe>
    stat = osOK;
 800312e:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003130:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8003132:	f001 fc3b 	bl	80049ac <vTaskDelay>
    stat = osOK;
 8003136:	2000      	movs	r0, #0
 8003138:	e7fa      	b.n	8003130 <osDelay+0xc>
    stat = osErrorISR;
 800313a:	f06f 0005 	mvn.w	r0, #5
 800313e:	e7f7      	b.n	8003130 <osDelay+0xc>

08003140 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8003146:	2b00      	cmp	r3, #0
 8003148:	d13c      	bne.n	80031c4 <osMutexNew+0x84>
 800314a:	4604      	mov	r4, r0
    if (attr != NULL) {
 800314c:	b100      	cbz	r0, 8003150 <osMutexNew+0x10>
      type = attr->attr_bits;
 800314e:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003150:	f013 0601 	ands.w	r6, r3, #1
 8003154:	d000      	beq.n	8003158 <osMutexNew+0x18>
      rmtx = 1U;
 8003156:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003158:	f013 0f08 	tst.w	r3, #8
 800315c:	d135      	bne.n	80031ca <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 800315e:	b344      	cbz	r4, 80031b2 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003160:	68a1      	ldr	r1, [r4, #8]
 8003162:	b111      	cbz	r1, 800316a <osMutexNew+0x2a>
 8003164:	68e3      	ldr	r3, [r4, #12]
 8003166:	2b4f      	cmp	r3, #79	@ 0x4f
 8003168:	d818      	bhi.n	800319c <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800316a:	b191      	cbz	r1, 8003192 <osMutexNew+0x52>
      mem = -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003170:	bb6b      	cbnz	r3, 80031ce <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003172:	b316      	cbz	r6, 80031ba <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003174:	2004      	movs	r0, #4
 8003176:	f000 fce4 	bl	8003b42 <xQueueCreateMutex>
 800317a:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800317c:	b31d      	cbz	r5, 80031c6 <osMutexNew+0x86>
        if (attr != NULL) {
 800317e:	b104      	cbz	r4, 8003182 <osMutexNew+0x42>
          name = attr->name;
 8003180:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8003182:	4621      	mov	r1, r4
 8003184:	4628      	mov	r0, r5
 8003186:	f000 ffcf 	bl	8004128 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800318a:	b1e6      	cbz	r6, 80031c6 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800318c:	f045 0501 	orr.w	r5, r5, #1
 8003190:	e019      	b.n	80031c6 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003192:	68e3      	ldr	r3, [r4, #12]
 8003194:	b17b      	cbz	r3, 80031b6 <osMutexNew+0x76>
      mem = -1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800319a:	e7e9      	b.n	8003170 <osMutexNew+0x30>
          if (rmtx != 0U) {
 800319c:	b126      	cbz	r6, 80031a8 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800319e:	2004      	movs	r0, #4
 80031a0:	f000 fcda 	bl	8003b58 <xQueueCreateMutexStatic>
 80031a4:	4605      	mov	r5, r0
 80031a6:	e7e9      	b.n	800317c <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f000 fcd5 	bl	8003b58 <xQueueCreateMutexStatic>
 80031ae:	4605      	mov	r5, r0
 80031b0:	e7e4      	b.n	800317c <osMutexNew+0x3c>
        mem = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e7dc      	b.n	8003170 <osMutexNew+0x30>
            mem = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e7da      	b.n	8003170 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80031ba:	2001      	movs	r0, #1
 80031bc:	f000 fcc1 	bl	8003b42 <xQueueCreateMutex>
 80031c0:	4605      	mov	r5, r0
 80031c2:	e7db      	b.n	800317c <osMutexNew+0x3c>
  hMutex = NULL;
 80031c4:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80031c6:	4628      	mov	r0, r5
 80031c8:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 80031ca:	2500      	movs	r5, #0
 80031cc:	e7fb      	b.n	80031c6 <osMutexNew+0x86>
 80031ce:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 80031d0:	e7f9      	b.n	80031c6 <osMutexNew+0x86>

080031d2 <osMutexAcquire>:
 80031d2:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80031d6:	b9da      	cbnz	r2, 8003210 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80031d8:	b510      	push	{r4, lr}
 80031da:	4603      	mov	r3, r0
 80031dc:	460c      	mov	r4, r1
 80031de:	f020 0001 	bic.w	r0, r0, #1
 80031e2:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d915      	bls.n	8003216 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80031ea:	b141      	cbz	r1, 80031fe <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80031ec:	4621      	mov	r1, r4
 80031ee:	f000 ff24 	bl	800403a <xQueueTakeMutexRecursive>
 80031f2:	2801      	cmp	r0, #1
 80031f4:	d012      	beq.n	800321c <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 80031f6:	b19c      	cbz	r4, 8003220 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 80031f8:	f06f 0001 	mvn.w	r0, #1
 80031fc:	e00f      	b.n	800321e <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80031fe:	4621      	mov	r1, r4
 8003200:	f000 fe48 	bl	8003e94 <xQueueSemaphoreTake>
 8003204:	2801      	cmp	r0, #1
 8003206:	d00e      	beq.n	8003226 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8003208:	b17c      	cbz	r4, 800322a <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 800320a:	f06f 0001 	mvn.w	r0, #1
 800320e:	e006      	b.n	800321e <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8003210:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8003214:	4770      	bx	lr
    stat = osErrorParameter;
 8003216:	f06f 0003 	mvn.w	r0, #3
 800321a:	e000      	b.n	800321e <osMutexAcquire+0x4c>
  stat = osOK;
 800321c:	2000      	movs	r0, #0
}
 800321e:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8003220:	f06f 0002 	mvn.w	r0, #2
 8003224:	e7fb      	b.n	800321e <osMutexAcquire+0x4c>
  stat = osOK;
 8003226:	2000      	movs	r0, #0
 8003228:	e7f9      	b.n	800321e <osMutexAcquire+0x4c>
          stat = osErrorResource;
 800322a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800322e:	e7f6      	b.n	800321e <osMutexAcquire+0x4c>

08003230 <osMutexRelease>:
 8003230:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003234:	b9ba      	cbnz	r2, 8003266 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003236:	b508      	push	{r3, lr}
 8003238:	4603      	mov	r3, r0
 800323a:	f020 0001 	bic.w	r0, r0, #1
 800323e:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003242:	2b01      	cmp	r3, #1
 8003244:	d912      	bls.n	800326c <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003246:	b129      	cbz	r1, 8003254 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003248:	f000 fc95 	bl	8003b76 <xQueueGiveMutexRecursive>
 800324c:	2801      	cmp	r0, #1
 800324e:	d110      	bne.n	8003272 <osMutexRelease+0x42>
  stat = osOK;
 8003250:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003252:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003254:	2300      	movs	r3, #0
 8003256:	461a      	mov	r2, r3
 8003258:	4619      	mov	r1, r3
 800325a:	f000 fba2 	bl	80039a2 <xQueueGenericSend>
 800325e:	2801      	cmp	r0, #1
 8003260:	d10a      	bne.n	8003278 <osMutexRelease+0x48>
  stat = osOK;
 8003262:	2000      	movs	r0, #0
 8003264:	e7f5      	b.n	8003252 <osMutexRelease+0x22>
    stat = osErrorISR;
 8003266:	f06f 0005 	mvn.w	r0, #5
}
 800326a:	4770      	bx	lr
    stat = osErrorParameter;
 800326c:	f06f 0003 	mvn.w	r0, #3
 8003270:	e7ef      	b.n	8003252 <osMutexRelease+0x22>
        stat = osErrorResource;
 8003272:	f06f 0002 	mvn.w	r0, #2
 8003276:	e7ec      	b.n	8003252 <osMutexRelease+0x22>
        stat = osErrorResource;
 8003278:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800327c:	e7e9      	b.n	8003252 <osMutexRelease+0x22>

0800327e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800327e:	b570      	push	{r4, r5, r6, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003286:	2b00      	cmp	r3, #0
 8003288:	d148      	bne.n	800331c <osSemaphoreNew+0x9e>
 800328a:	460e      	mov	r6, r1
 800328c:	4614      	mov	r4, r2
 800328e:	2800      	cmp	r0, #0
 8003290:	d048      	beq.n	8003324 <osSemaphoreNew+0xa6>
 8003292:	4288      	cmp	r0, r1
 8003294:	d348      	bcc.n	8003328 <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 8003296:	b14a      	cbz	r2, 80032ac <osSemaphoreNew+0x2e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003298:	6895      	ldr	r5, [r2, #8]
 800329a:	b115      	cbz	r5, 80032a2 <osSemaphoreNew+0x24>
 800329c:	68d3      	ldr	r3, [r2, #12]
 800329e:	2b4f      	cmp	r3, #79	@ 0x4f
 80032a0:	d814      	bhi.n	80032cc <osSemaphoreNew+0x4e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	d142      	bne.n	800332c <osSemaphoreNew+0xae>
 80032a6:	68e3      	ldr	r3, [r4, #12]
 80032a8:	b10b      	cbz	r3, 80032ae <osSemaphoreNew+0x30>
 80032aa:	e038      	b.n	800331e <osSemaphoreNew+0xa0>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80032ac:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80032ae:	2801      	cmp	r0, #1
 80032b0:	d00e      	beq.n	80032d0 <osSemaphoreNew+0x52>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 80032b2:	bb6b      	cbnz	r3, 8003310 <osSemaphoreNew+0x92>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80032b4:	4631      	mov	r1, r6
 80032b6:	f000 fb56 	bl	8003966 <xQueueCreateCountingSemaphore>
 80032ba:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80032bc:	b37d      	cbz	r5, 800331e <osSemaphoreNew+0xa0>
        if (attr != NULL) {
 80032be:	b104      	cbz	r4, 80032c2 <osSemaphoreNew+0x44>
          name = attr->name;
 80032c0:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80032c2:	4621      	mov	r1, r4
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 ff2f 	bl	8004128 <vQueueAddToRegistry>
 80032ca:	e028      	b.n	800331e <osSemaphoreNew+0xa0>
        mem = 1;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e7ee      	b.n	80032ae <osSemaphoreNew+0x30>
        if (mem == 1) {
 80032d0:	b9ab      	cbnz	r3, 80032fe <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinary();
 80032d2:	2203      	movs	r2, #3
 80032d4:	2100      	movs	r1, #0
 80032d6:	2001      	movs	r0, #1
 80032d8:	f000 fafe 	bl	80038d8 <xQueueGenericCreate>
 80032dc:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80032de:	b1f5      	cbz	r5, 800331e <osSemaphoreNew+0xa0>
 80032e0:	2e00      	cmp	r6, #0
 80032e2:	d0eb      	beq.n	80032bc <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80032e4:	2300      	movs	r3, #0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4619      	mov	r1, r3
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 fb59 	bl	80039a2 <xQueueGenericSend>
 80032f0:	2801      	cmp	r0, #1
 80032f2:	d0e3      	beq.n	80032bc <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 ff41 	bl	800417c <vQueueDelete>
            hSemaphore = NULL;
 80032fa:	2500      	movs	r5, #0
 80032fc:	e00f      	b.n	800331e <osSemaphoreNew+0xa0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	2203      	movs	r2, #3
 8003302:	9200      	str	r2, [sp, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	4611      	mov	r1, r2
 8003308:	f000 fa9c 	bl	8003844 <xQueueGenericCreateStatic>
 800330c:	4605      	mov	r5, r0
 800330e:	e7e6      	b.n	80032de <osSemaphoreNew+0x60>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003310:	68a2      	ldr	r2, [r4, #8]
 8003312:	4631      	mov	r1, r6
 8003314:	f000 fb04 	bl	8003920 <xQueueCreateCountingSemaphoreStatic>
 8003318:	4605      	mov	r5, r0
 800331a:	e7cf      	b.n	80032bc <osSemaphoreNew+0x3e>
  hSemaphore = NULL;
 800331c:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800331e:	4628      	mov	r0, r5
 8003320:	b002      	add	sp, #8
 8003322:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8003324:	2500      	movs	r5, #0
 8003326:	e7fa      	b.n	800331e <osSemaphoreNew+0xa0>
 8003328:	2500      	movs	r5, #0
 800332a:	e7f8      	b.n	800331e <osSemaphoreNew+0xa0>
 800332c:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800332e:	e7f6      	b.n	800331e <osSemaphoreNew+0xa0>

08003330 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003330:	b320      	cbz	r0, 800337c <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003332:	b510      	push	{r4, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	460c      	mov	r4, r1
 8003338:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800333c:	b1b3      	cbz	r3, 800336c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800333e:	bb01      	cbnz	r1, 8003382 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003340:	2100      	movs	r1, #0
 8003342:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003344:	aa01      	add	r2, sp, #4
 8003346:	f000 fe98 	bl	800407a <xQueueReceiveFromISR>
 800334a:	2801      	cmp	r0, #1
 800334c:	d11c      	bne.n	8003388 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800334e:	9801      	ldr	r0, [sp, #4]
 8003350:	b150      	cbz	r0, 8003368 <osSemaphoreAcquire+0x38>
 8003352:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800335a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003366:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003368:	b002      	add	sp, #8
 800336a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800336c:	f000 fd92 	bl	8003e94 <xQueueSemaphoreTake>
 8003370:	2801      	cmp	r0, #1
 8003372:	d00c      	beq.n	800338e <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 8003374:	b16c      	cbz	r4, 8003392 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 8003376:	f06f 0001 	mvn.w	r0, #1
 800337a:	e7f5      	b.n	8003368 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800337c:	f06f 0003 	mvn.w	r0, #3
}
 8003380:	4770      	bx	lr
      stat = osErrorParameter;
 8003382:	f06f 0003 	mvn.w	r0, #3
 8003386:	e7ef      	b.n	8003368 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8003388:	f06f 0002 	mvn.w	r0, #2
 800338c:	e7ec      	b.n	8003368 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800338e:	2000      	movs	r0, #0
 8003390:	e7ea      	b.n	8003368 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8003392:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003396:	e7e7      	b.n	8003368 <osSemaphoreAcquire+0x38>

08003398 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003398:	b320      	cbz	r0, 80033e4 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800339a:	b500      	push	{lr}
 800339c:	b083      	sub	sp, #12
 800339e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80033a2:	b1a3      	cbz	r3, 80033ce <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80033a8:	a901      	add	r1, sp, #4
 80033aa:	f000 fc6b 	bl	8003c84 <xQueueGiveFromISR>
 80033ae:	2801      	cmp	r0, #1
 80033b0:	d11b      	bne.n	80033ea <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80033b2:	9801      	ldr	r0, [sp, #4]
 80033b4:	b198      	cbz	r0, 80033de <osSemaphoreRelease+0x46>
 80033b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80033ca:	2000      	movs	r0, #0
 80033cc:	e007      	b.n	80033de <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80033ce:	2300      	movs	r3, #0
 80033d0:	461a      	mov	r2, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	f000 fae5 	bl	80039a2 <xQueueGenericSend>
 80033d8:	2801      	cmp	r0, #1
 80033da:	d109      	bne.n	80033f0 <osSemaphoreRelease+0x58>
  stat = osOK;
 80033dc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80033de:	b003      	add	sp, #12
 80033e0:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 80033e4:	f06f 0003 	mvn.w	r0, #3
}
 80033e8:	4770      	bx	lr
      stat = osErrorResource;
 80033ea:	f06f 0002 	mvn.w	r0, #2
 80033ee:	e7f6      	b.n	80033de <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80033f0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80033f4:	e7f3      	b.n	80033de <osSemaphoreRelease+0x46>

080033f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80033f6:	b570      	push	{r4, r5, r6, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13a      	bne.n	8003478 <osMessageQueueNew+0x82>
 8003402:	4614      	mov	r4, r2
 8003404:	2800      	cmp	r0, #0
 8003406:	d03b      	beq.n	8003480 <osMessageQueueNew+0x8a>
 8003408:	2900      	cmp	r1, #0
 800340a:	d03b      	beq.n	8003484 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 800340c:	b36a      	cbz	r2, 800346a <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800340e:	6893      	ldr	r3, [r2, #8]
 8003410:	b14b      	cbz	r3, 8003426 <osMessageQueueNew+0x30>
 8003412:	68d2      	ldr	r2, [r2, #12]
 8003414:	2a4f      	cmp	r2, #79	@ 0x4f
 8003416:	d906      	bls.n	8003426 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003418:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800341a:	b122      	cbz	r2, 8003426 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800341c:	fb01 f500 	mul.w	r5, r1, r0
 8003420:	6966      	ldr	r6, [r4, #20]
 8003422:	42ae      	cmp	r6, r5
 8003424:	d21b      	bcs.n	800345e <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003426:	b173      	cbz	r3, 8003446 <osMessageQueueNew+0x50>
    mem = -1;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800342c:	bb63      	cbnz	r3, 8003488 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800342e:	2200      	movs	r2, #0
 8003430:	f000 fa52 	bl	80038d8 <xQueueGenericCreate>
 8003434:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003436:	b305      	cbz	r5, 800347a <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8003438:	b104      	cbz	r4, 800343c <osMessageQueueNew+0x46>
        name = attr->name;
 800343a:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800343c:	4621      	mov	r1, r4
 800343e:	4628      	mov	r0, r5
 8003440:	f000 fe72 	bl	8004128 <vQueueAddToRegistry>
 8003444:	e019      	b.n	800347a <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003446:	68e3      	ldr	r3, [r4, #12]
 8003448:	b98b      	cbnz	r3, 800346e <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800344a:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800344c:	b113      	cbz	r3, 8003454 <osMessageQueueNew+0x5e>
    mem = -1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003452:	e7eb      	b.n	800342c <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003454:	6963      	ldr	r3, [r4, #20]
 8003456:	b16b      	cbz	r3, 8003474 <osMessageQueueNew+0x7e>
    mem = -1;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800345c:	e7e6      	b.n	800342c <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800345e:	2500      	movs	r5, #0
 8003460:	9500      	str	r5, [sp, #0]
 8003462:	f000 f9ef 	bl	8003844 <xQueueGenericCreateStatic>
 8003466:	4605      	mov	r5, r0
 8003468:	e7e5      	b.n	8003436 <osMessageQueueNew+0x40>
      mem = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	e7de      	b.n	800342c <osMessageQueueNew+0x36>
    mem = -1;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003472:	e7db      	b.n	800342c <osMessageQueueNew+0x36>
          mem = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	e7d9      	b.n	800342c <osMessageQueueNew+0x36>
  hQueue = NULL;
 8003478:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800347a:	4628      	mov	r0, r5
 800347c:	b002      	add	sp, #8
 800347e:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8003480:	2500      	movs	r5, #0
 8003482:	e7fa      	b.n	800347a <osMessageQueueNew+0x84>
 8003484:	2500      	movs	r5, #0
 8003486:	e7f8      	b.n	800347a <osMessageQueueNew+0x84>
 8003488:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800348a:	e7f6      	b.n	800347a <osMessageQueueNew+0x84>

0800348c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800348c:	b510      	push	{r4, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	461c      	mov	r4, r3
 8003492:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003496:	b1c3      	cbz	r3, 80034ca <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003498:	b318      	cbz	r0, 80034e2 <osMessageQueuePut+0x56>
 800349a:	b329      	cbz	r1, 80034e8 <osMessageQueuePut+0x5c>
 800349c:	bb3c      	cbnz	r4, 80034ee <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034a2:	aa01      	add	r2, sp, #4
 80034a4:	f000 fb87 	bl	8003bb6 <xQueueGenericSendFromISR>
 80034a8:	2801      	cmp	r0, #1
 80034aa:	d123      	bne.n	80034f4 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80034ac:	9801      	ldr	r0, [sp, #4]
 80034ae:	b150      	cbz	r0, 80034c6 <osMessageQueuePut+0x3a>
 80034b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80034b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80034c4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80034c6:	b002      	add	sp, #8
 80034c8:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80034ca:	b1b0      	cbz	r0, 80034fa <osMessageQueuePut+0x6e>
 80034cc:	b1c1      	cbz	r1, 8003500 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80034ce:	2300      	movs	r3, #0
 80034d0:	4622      	mov	r2, r4
 80034d2:	f000 fa66 	bl	80039a2 <xQueueGenericSend>
 80034d6:	2801      	cmp	r0, #1
 80034d8:	d015      	beq.n	8003506 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 80034da:	b1b4      	cbz	r4, 800350a <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 80034dc:	f06f 0001 	mvn.w	r0, #1
 80034e0:	e7f1      	b.n	80034c6 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80034e2:	f06f 0003 	mvn.w	r0, #3
 80034e6:	e7ee      	b.n	80034c6 <osMessageQueuePut+0x3a>
 80034e8:	f06f 0003 	mvn.w	r0, #3
 80034ec:	e7eb      	b.n	80034c6 <osMessageQueuePut+0x3a>
 80034ee:	f06f 0003 	mvn.w	r0, #3
 80034f2:	e7e8      	b.n	80034c6 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80034f4:	f06f 0002 	mvn.w	r0, #2
 80034f8:	e7e5      	b.n	80034c6 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80034fa:	f06f 0003 	mvn.w	r0, #3
 80034fe:	e7e2      	b.n	80034c6 <osMessageQueuePut+0x3a>
 8003500:	f06f 0003 	mvn.w	r0, #3
 8003504:	e7df      	b.n	80034c6 <osMessageQueuePut+0x3a>
  stat = osOK;
 8003506:	2000      	movs	r0, #0
 8003508:	e7dd      	b.n	80034c6 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 800350a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800350e:	e7da      	b.n	80034c6 <osMessageQueuePut+0x3a>

08003510 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003510:	b510      	push	{r4, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	461c      	mov	r4, r3
 8003516:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800351a:	b1c3      	cbz	r3, 800354e <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800351c:	b310      	cbz	r0, 8003564 <osMessageQueueGet+0x54>
 800351e:	b321      	cbz	r1, 800356a <osMessageQueueGet+0x5a>
 8003520:	bb34      	cbnz	r4, 8003570 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003526:	aa01      	add	r2, sp, #4
 8003528:	f000 fda7 	bl	800407a <xQueueReceiveFromISR>
 800352c:	2801      	cmp	r0, #1
 800352e:	d122      	bne.n	8003576 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003530:	9801      	ldr	r0, [sp, #4]
 8003532:	b150      	cbz	r0, 800354a <osMessageQueueGet+0x3a>
 8003534:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003548:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800354a:	b002      	add	sp, #8
 800354c:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800354e:	b1a8      	cbz	r0, 800357c <osMessageQueueGet+0x6c>
 8003550:	b1b9      	cbz	r1, 8003582 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003552:	4622      	mov	r2, r4
 8003554:	f000 fbef 	bl	8003d36 <xQueueReceive>
 8003558:	2801      	cmp	r0, #1
 800355a:	d015      	beq.n	8003588 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 800355c:	b1b4      	cbz	r4, 800358c <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 800355e:	f06f 0001 	mvn.w	r0, #1
 8003562:	e7f2      	b.n	800354a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8003564:	f06f 0003 	mvn.w	r0, #3
 8003568:	e7ef      	b.n	800354a <osMessageQueueGet+0x3a>
 800356a:	f06f 0003 	mvn.w	r0, #3
 800356e:	e7ec      	b.n	800354a <osMessageQueueGet+0x3a>
 8003570:	f06f 0003 	mvn.w	r0, #3
 8003574:	e7e9      	b.n	800354a <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8003576:	f06f 0002 	mvn.w	r0, #2
 800357a:	e7e6      	b.n	800354a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800357c:	f06f 0003 	mvn.w	r0, #3
 8003580:	e7e3      	b.n	800354a <osMessageQueueGet+0x3a>
 8003582:	f06f 0003 	mvn.w	r0, #3
 8003586:	e7e0      	b.n	800354a <osMessageQueueGet+0x3a>
  stat = osOK;
 8003588:	2000      	movs	r0, #0
 800358a:	e7de      	b.n	800354a <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 800358c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003590:	e7db      	b.n	800354a <osMessageQueueGet+0x3a>
	...

08003594 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <vApplicationGetIdleTaskMemory+0x10>)
 8003596:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <vApplicationGetIdleTaskMemory+0x14>)
 800359a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000b18 	.word	0x20000b18
 80035a8:	20000918 	.word	0x20000918

080035ac <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <vApplicationGetTimerTaskMemory+0x10>)
 80035ae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <vApplicationGetTimerTaskMemory+0x14>)
 80035b2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035b8:	6013      	str	r3, [r2, #0]
}
 80035ba:	4770      	bx	lr
 80035bc:	2000086c 	.word	0x2000086c
 80035c0:	2000046c 	.word	0x2000046c

080035c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	f100 0308 	add.w	r3, r0, #8
 80035c8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035ce:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035d8:	4770      	bx	lr

080035da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035de:	4770      	bx	lr

080035e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80035e0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035ea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ec:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80035ee:	6803      	ldr	r3, [r0, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	6003      	str	r3, [r0, #0]
}
 80035f4:	4770      	bx	lr

080035f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035f6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035f8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035fa:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80035fe:	d011      	beq.n	8003624 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003600:	f100 0308 	add.w	r3, r0, #8
 8003604:	461c      	mov	r4, r3
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	42aa      	cmp	r2, r5
 800360c:	d9fa      	bls.n	8003604 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003612:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003614:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003616:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003618:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	6003      	str	r3, [r0, #0]
}
 8003620:	bc30      	pop	{r4, r5}
 8003622:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003624:	6904      	ldr	r4, [r0, #16]
 8003626:	e7f2      	b.n	800360e <vListInsert+0x18>

08003628 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003628:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800362a:	6841      	ldr	r1, [r0, #4]
 800362c:	6882      	ldr	r2, [r0, #8]
 800362e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003630:	6841      	ldr	r1, [r0, #4]
 8003632:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	4282      	cmp	r2, r0
 8003638:	d006      	beq.n	8003648 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800363a:	2200      	movs	r2, #0
 800363c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	3a01      	subs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003644:	6818      	ldr	r0, [r3, #0]
}
 8003646:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003648:	6882      	ldr	r2, [r0, #8]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e7f5      	b.n	800363a <uxListRemove+0x12>

0800364e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800364e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003650:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003652:	b118      	cbz	r0, 800365c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800365c:	4770      	bx	lr

0800365e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800365e:	b510      	push	{r4, lr}
 8003660:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003662:	f001 ff5f 	bl	8005524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003666:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003668:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800366a:	429a      	cmp	r2, r3
 800366c:	d004      	beq.n	8003678 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800366e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003670:	f001 ff7a 	bl	8005568 <vPortExitCritical>

	return xReturn;
}
 8003674:	4620      	mov	r0, r4
 8003676:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003678:	2401      	movs	r4, #1
 800367a:	e7f9      	b.n	8003670 <prvIsQueueFull+0x12>

0800367c <prvIsQueueEmpty>:
{
 800367c:	b510      	push	{r4, lr}
 800367e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003680:	f001 ff50 	bl	8005524 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003684:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003686:	b923      	cbnz	r3, 8003692 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003688:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800368a:	f001 ff6d 	bl	8005568 <vPortExitCritical>
}
 800368e:	4620      	mov	r0, r4
 8003690:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8003692:	2400      	movs	r4, #0
 8003694:	e7f9      	b.n	800368a <prvIsQueueEmpty+0xe>

08003696 <prvCopyDataToQueue>:
{
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	4604      	mov	r4, r0
 800369a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800369c:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800369e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80036a0:	b95a      	cbnz	r2, 80036ba <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036a2:	6803      	ldr	r3, [r0, #0]
 80036a4:	b11b      	cbz	r3, 80036ae <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80036a6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036a8:	3601      	adds	r6, #1
 80036aa:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ae:	6880      	ldr	r0, [r0, #8]
 80036b0:	f001 fbfc 	bl	8004eac <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60a3      	str	r3, [r4, #8]
 80036b8:	e7f6      	b.n	80036a8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80036ba:	b96d      	cbnz	r5, 80036d8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036bc:	6840      	ldr	r0, [r0, #4]
 80036be:	f003 f8e0 	bl	8006882 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036c2:	6863      	ldr	r3, [r4, #4]
 80036c4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80036c6:	4413      	add	r3, r2
 80036c8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ca:	68a2      	ldr	r2, [r4, #8]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d319      	bcc.n	8003704 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80036d4:	4628      	mov	r0, r5
 80036d6:	e7e7      	b.n	80036a8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036d8:	68c0      	ldr	r0, [r0, #12]
 80036da:	f003 f8d2 	bl	8006882 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80036e2:	4251      	negs	r1, r2
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d202      	bcs.n	80036f4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036ee:	68a3      	ldr	r3, [r4, #8]
 80036f0:	440b      	add	r3, r1
 80036f2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80036f4:	2d02      	cmp	r5, #2
 80036f6:	d001      	beq.n	80036fc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80036f8:	2000      	movs	r0, #0
 80036fa:	e7d5      	b.n	80036a8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fc:	b126      	cbz	r6, 8003708 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80036fe:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003700:	2000      	movs	r0, #0
 8003702:	e7d1      	b.n	80036a8 <prvCopyDataToQueue+0x12>
 8003704:	4628      	mov	r0, r5
 8003706:	e7cf      	b.n	80036a8 <prvCopyDataToQueue+0x12>
 8003708:	2000      	movs	r0, #0
 800370a:	e7cd      	b.n	80036a8 <prvCopyDataToQueue+0x12>

0800370c <prvCopyDataFromQueue>:
{
 800370c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800370e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003710:	b16a      	cbz	r2, 800372e <prvCopyDataFromQueue+0x22>
{
 8003712:	b510      	push	{r4, lr}
 8003714:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003716:	68d9      	ldr	r1, [r3, #12]
 8003718:	4411      	add	r1, r2
 800371a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800371c:	689c      	ldr	r4, [r3, #8]
 800371e:	42a1      	cmp	r1, r4
 8003720:	d301      	bcc.n	8003726 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003726:	68d9      	ldr	r1, [r3, #12]
 8003728:	f003 f8ab 	bl	8006882 <memcpy>
}
 800372c:	bd10      	pop	{r4, pc}
 800372e:	4770      	bx	lr

08003730 <prvUnlockQueue>:
{
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003734:	f001 fef6 	bl	8005524 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003738:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800373c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800373e:	e001      	b.n	8003744 <prvUnlockQueue+0x14>
			--cTxLock;
 8003740:	3c01      	subs	r4, #1
 8003742:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003744:	2c00      	cmp	r4, #0
 8003746:	dd0a      	ble.n	800375e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003748:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800374a:	b143      	cbz	r3, 800375e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800374c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8003750:	f001 f9ec 	bl	8004b2c <xTaskRemoveFromEventList>
 8003754:	2800      	cmp	r0, #0
 8003756:	d0f3      	beq.n	8003740 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003758:	f001 fa7c 	bl	8004c54 <vTaskMissedYield>
 800375c:	e7f0      	b.n	8003740 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800375e:	23ff      	movs	r3, #255	@ 0xff
 8003760:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003764:	f001 ff00 	bl	8005568 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003768:	f001 fedc 	bl	8005524 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800376c:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8003770:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003772:	e001      	b.n	8003778 <prvUnlockQueue+0x48>
				--cRxLock;
 8003774:	3c01      	subs	r4, #1
 8003776:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003778:	2c00      	cmp	r4, #0
 800377a:	dd0a      	ble.n	8003792 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800377c:	692b      	ldr	r3, [r5, #16]
 800377e:	b143      	cbz	r3, 8003792 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003780:	f105 0010 	add.w	r0, r5, #16
 8003784:	f001 f9d2 	bl	8004b2c <xTaskRemoveFromEventList>
 8003788:	2800      	cmp	r0, #0
 800378a:	d0f3      	beq.n	8003774 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800378c:	f001 fa62 	bl	8004c54 <vTaskMissedYield>
 8003790:	e7f0      	b.n	8003774 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003792:	23ff      	movs	r3, #255	@ 0xff
 8003794:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003798:	f001 fee6 	bl	8005568 <vPortExitCritical>
}
 800379c:	bd38      	pop	{r3, r4, r5, pc}

0800379e <xQueueGenericReset>:
{
 800379e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80037a0:	b1e0      	cbz	r0, 80037dc <xQueueGenericReset+0x3e>
 80037a2:	460d      	mov	r5, r1
 80037a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80037a6:	f001 febd 	bl	8005524 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80037ae:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80037b0:	fb01 3002 	mla	r0, r1, r2, r3
 80037b4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037b6:	2000      	movs	r0, #0
 80037b8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ba:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037bc:	3a01      	subs	r2, #1
 80037be:	fb02 3301 	mla	r3, r2, r1, r3
 80037c2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037c4:	23ff      	movs	r3, #255	@ 0xff
 80037c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80037ce:	b9fd      	cbnz	r5, 8003810 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	6923      	ldr	r3, [r4, #16]
 80037d2:	b963      	cbnz	r3, 80037ee <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80037d4:	f001 fec8 	bl	8005568 <vPortExitCritical>
}
 80037d8:	2001      	movs	r0, #1
 80037da:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ee:	f104 0010 	add.w	r0, r4, #16
 80037f2:	f001 f99b 	bl	8004b2c <xTaskRemoveFromEventList>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d0ec      	beq.n	80037d4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80037fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80037fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003802:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	e7e1      	b.n	80037d4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003810:	f104 0010 	add.w	r0, r4, #16
 8003814:	f7ff fed6 	bl	80035c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003818:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800381c:	f7ff fed2 	bl	80035c4 <vListInitialise>
 8003820:	e7d8      	b.n	80037d4 <xQueueGenericReset+0x36>

08003822 <prvInitialiseNewQueue>:
{
 8003822:	b538      	push	{r3, r4, r5, lr}
 8003824:	461d      	mov	r5, r3
 8003826:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003828:	460b      	mov	r3, r1
 800382a:	b949      	cbnz	r1, 8003840 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800382c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800382e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003830:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003832:	2101      	movs	r1, #1
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff ffb2 	bl	800379e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800383a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800383e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003840:	6022      	str	r2, [r4, #0]
 8003842:	e7f4      	b.n	800382e <prvInitialiseNewQueue+0xc>

08003844 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003844:	b940      	cbnz	r0, 8003858 <xQueueGenericCreateStatic+0x14>
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	e7fe      	b.n	8003856 <xQueueGenericCreateStatic+0x12>
	{
 8003858:	b510      	push	{r4, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	461c      	mov	r4, r3
 800385e:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8003860:	b153      	cbz	r3, 8003878 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003862:	b192      	cbz	r2, 800388a <xQueueGenericCreateStatic+0x46>
 8003864:	b989      	cbnz	r1, 800388a <xQueueGenericCreateStatic+0x46>
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	e7fe      	b.n	8003876 <xQueueGenericCreateStatic+0x32>
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003888:	e7fe      	b.n	8003888 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800388a:	b16a      	cbz	r2, 80038a8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800388c:	2350      	movs	r3, #80	@ 0x50
 800388e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003890:	9b03      	ldr	r3, [sp, #12]
 8003892:	2b50      	cmp	r3, #80	@ 0x50
 8003894:	d013      	beq.n	80038be <xQueueGenericCreateStatic+0x7a>
 8003896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	e7fe      	b.n	80038a6 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d0ef      	beq.n	800388c <xQueueGenericCreateStatic+0x48>
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	e7fe      	b.n	80038bc <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038be:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038c6:	9400      	str	r4, [sp, #0]
 80038c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80038cc:	4660      	mov	r0, ip
 80038ce:	f7ff ffa8 	bl	8003822 <prvInitialiseNewQueue>
	}
 80038d2:	4620      	mov	r0, r4
 80038d4:	b004      	add	sp, #16
 80038d6:	bd10      	pop	{r4, pc}

080038d8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038d8:	b940      	cbnz	r0, 80038ec <xQueueGenericCreate+0x14>
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	e7fe      	b.n	80038ea <xQueueGenericCreate+0x12>
	{
 80038ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ee:	b083      	sub	sp, #12
 80038f0:	460d      	mov	r5, r1
 80038f2:	4614      	mov	r4, r2
 80038f4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038fa:	3050      	adds	r0, #80	@ 0x50
 80038fc:	f001 ffca 	bl	8005894 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003900:	4607      	mov	r7, r0
 8003902:	b150      	cbz	r0, 800391a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800390a:	9000      	str	r0, [sp, #0]
 800390c:	4623      	mov	r3, r4
 800390e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003912:	4629      	mov	r1, r5
 8003914:	4630      	mov	r0, r6
 8003916:	f7ff ff84 	bl	8003822 <prvInitialiseNewQueue>
	}
 800391a:	4638      	mov	r0, r7
 800391c:	b003      	add	sp, #12
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003920 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8003920:	b940      	cbnz	r0, 8003934 <xQueueCreateCountingSemaphoreStatic+0x14>
 8003922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	e7fe      	b.n	8003932 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8003934:	b510      	push	{r4, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800393a:	4288      	cmp	r0, r1
 800393c:	d208      	bcs.n	8003950 <xQueueCreateCountingSemaphoreStatic+0x30>
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	e7fe      	b.n	800394e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003950:	2302      	movs	r3, #2
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	2200      	movs	r2, #0
 8003958:	4611      	mov	r1, r2
 800395a:	f7ff ff73 	bl	8003844 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800395e:	b100      	cbz	r0, 8003962 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003960:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8003962:	b002      	add	sp, #8
 8003964:	bd10      	pop	{r4, pc}

08003966 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8003966:	b940      	cbnz	r0, 800397a <xQueueCreateCountingSemaphore+0x14>
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	e7fe      	b.n	8003978 <xQueueCreateCountingSemaphore+0x12>
	{
 800397a:	b510      	push	{r4, lr}
 800397c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800397e:	4288      	cmp	r0, r1
 8003980:	d208      	bcs.n	8003994 <xQueueCreateCountingSemaphore+0x2e>
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	e7fe      	b.n	8003992 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003994:	2202      	movs	r2, #2
 8003996:	2100      	movs	r1, #0
 8003998:	f7ff ff9e 	bl	80038d8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800399c:	b100      	cbz	r0, 80039a0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800399e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80039a0:	bd10      	pop	{r4, pc}

080039a2 <xQueueGenericSend>:
{
 80039a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a4:	b085      	sub	sp, #20
 80039a6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80039a8:	b188      	cbz	r0, 80039ce <xQueueGenericSend+0x2c>
 80039aa:	460f      	mov	r7, r1
 80039ac:	461d      	mov	r5, r3
 80039ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b0:	b1b1      	cbz	r1, 80039e0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b2:	2d02      	cmp	r5, #2
 80039b4:	d120      	bne.n	80039f8 <xQueueGenericSend+0x56>
 80039b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d01d      	beq.n	80039f8 <xQueueGenericSend+0x56>
 80039bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericSend+0x2a>
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80039de:	e7fe      	b.n	80039de <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0e5      	beq.n	80039b2 <xQueueGenericSend+0x10>
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	e7fe      	b.n	80039f6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f8:	f001 f9fc 	bl	8004df4 <xTaskGetSchedulerState>
 80039fc:	4606      	mov	r6, r0
 80039fe:	b958      	cbnz	r0, 8003a18 <xQueueGenericSend+0x76>
 8003a00:	9b01      	ldr	r3, [sp, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d048      	beq.n	8003a98 <xQueueGenericSend+0xf6>
 8003a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	e7fe      	b.n	8003a16 <xQueueGenericSend+0x74>
 8003a18:	2600      	movs	r6, #0
 8003a1a:	e03d      	b.n	8003a98 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a1c:	462a      	mov	r2, r5
 8003a1e:	4639      	mov	r1, r7
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff fe38 	bl	8003696 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a28:	b97b      	cbnz	r3, 8003a4a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8003a2a:	b148      	cbz	r0, 8003a40 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8003a2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003a40:	f001 fd92 	bl	8005568 <vPortExitCritical>
				return pdPASS;
 8003a44:	2001      	movs	r0, #1
}
 8003a46:	b005      	add	sp, #20
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003a4e:	f001 f86d 	bl	8004b2c <xTaskRemoveFromEventList>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d0f4      	beq.n	8003a40 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8003a56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	e7e9      	b.n	8003a40 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8003a6c:	f001 fd7c 	bl	8005568 <vPortExitCritical>
					return errQUEUE_FULL;
 8003a70:	2000      	movs	r0, #0
 8003a72:	e7e8      	b.n	8003a46 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a74:	a802      	add	r0, sp, #8
 8003a76:	f001 f89f 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a7a:	2601      	movs	r6, #1
 8003a7c:	e019      	b.n	8003ab2 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003a84:	e021      	b.n	8003aca <xQueueGenericSend+0x128>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003a8c:	e023      	b.n	8003ad6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fe4e 	bl	8003730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a94:	f000 ff0e 	bl	80048b4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003a98:	f001 fd44 	bl	8005524 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a9c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3bb      	bcc.n	8003a1c <xQueueGenericSend+0x7a>
 8003aa4:	2d02      	cmp	r5, #2
 8003aa6:	d0b9      	beq.n	8003a1c <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa8:	9b01      	ldr	r3, [sp, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0de      	beq.n	8003a6c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	d0e0      	beq.n	8003a74 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8003ab2:	f001 fd59 	bl	8005568 <vPortExitCritical>
		vTaskSuspendAll();
 8003ab6:	f000 fe55 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aba:	f001 fd33 	bl	8005524 <vPortEnterCritical>
 8003abe:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8003ac2:	b252      	sxtb	r2, r2
 8003ac4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003ac8:	d0d9      	beq.n	8003a7e <xQueueGenericSend+0xdc>
 8003aca:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8003ace:	b252      	sxtb	r2, r2
 8003ad0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003ad4:	d0d7      	beq.n	8003a86 <xQueueGenericSend+0xe4>
 8003ad6:	f001 fd47 	bl	8005568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ada:	a901      	add	r1, sp, #4
 8003adc:	a802      	add	r0, sp, #8
 8003ade:	f001 f877 	bl	8004bd0 <xTaskCheckForTimeOut>
 8003ae2:	b9d8      	cbnz	r0, 8003b1c <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f7ff fdba 	bl	800365e <prvIsQueueFull>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d0cf      	beq.n	8003a8e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aee:	9901      	ldr	r1, [sp, #4]
 8003af0:	f104 0010 	add.w	r0, r4, #16
 8003af4:	f000 ffe6 	bl	8004ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff fe19 	bl	8003730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003afe:	f000 fed9 	bl	80048b4 <xTaskResumeAll>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d1c8      	bne.n	8003a98 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003b06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	e7bd      	b.n	8003a98 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fe07 	bl	8003730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b22:	f000 fec7 	bl	80048b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003b26:	2000      	movs	r0, #0
 8003b28:	e78d      	b.n	8003a46 <xQueueGenericSend+0xa4>

08003b2a <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003b2a:	b148      	cbz	r0, 8003b40 <prvInitialiseMutex+0x16>
	{
 8003b2c:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b2e:	2100      	movs	r1, #0
 8003b30:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b32:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b34:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b36:	460b      	mov	r3, r1
 8003b38:	460a      	mov	r2, r1
 8003b3a:	f7ff ff32 	bl	80039a2 <xQueueGenericSend>
	}
 8003b3e:	bd08      	pop	{r3, pc}
 8003b40:	4770      	bx	lr

08003b42 <xQueueCreateMutex>:
	{
 8003b42:	b510      	push	{r4, lr}
 8003b44:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b46:	2100      	movs	r1, #0
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f7ff fec5 	bl	80038d8 <xQueueGenericCreate>
 8003b4e:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b50:	f7ff ffeb 	bl	8003b2a <prvInitialiseMutex>
	}
 8003b54:	4620      	mov	r0, r4
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <xQueueCreateMutexStatic>:
	{
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003b5e:	9000      	str	r0, [sp, #0]
 8003b60:	2200      	movs	r2, #0
 8003b62:	4611      	mov	r1, r2
 8003b64:	2001      	movs	r0, #1
 8003b66:	f7ff fe6d 	bl	8003844 <xQueueGenericCreateStatic>
 8003b6a:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b6c:	f7ff ffdd 	bl	8003b2a <prvInitialiseMutex>
	}
 8003b70:	4620      	mov	r0, r4
 8003b72:	b002      	add	sp, #8
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <xQueueGiveMutexRecursive>:
	{
 8003b76:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8003b78:	b138      	cbz	r0, 8003b8a <xQueueGiveMutexRecursive+0x14>
 8003b7a:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003b7c:	6885      	ldr	r5, [r0, #8]
 8003b7e:	f001 f933 	bl	8004de8 <xTaskGetCurrentTaskHandle>
 8003b82:	4285      	cmp	r5, r0
 8003b84:	d00a      	beq.n	8003b9c <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8003b86:	2000      	movs	r0, #0
	}
 8003b88:	bd38      	pop	{r3, r4, r5, pc}
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8003b9a:	e7fe      	b.n	8003b9a <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003b9c:	68e3      	ldr	r3, [r4, #12]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003ba2:	b10b      	cbz	r3, 8003ba8 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8003ba4:	2001      	movs	r0, #1
		return xReturn;
 8003ba6:	e7ef      	b.n	8003b88 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	4620      	mov	r0, r4
 8003bae:	f7ff fef8 	bl	80039a2 <xQueueGenericSend>
			xReturn = pdPASS;
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	e7e8      	b.n	8003b88 <xQueueGiveMutexRecursive+0x12>

08003bb6 <xQueueGenericSendFromISR>:
{
 8003bb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003bba:	b190      	cbz	r0, 8003be2 <xQueueGenericSendFromISR+0x2c>
 8003bbc:	460f      	mov	r7, r1
 8003bbe:	4616      	mov	r6, r2
 8003bc0:	461c      	mov	r4, r3
 8003bc2:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc4:	b1b1      	cbz	r1, 8003bf4 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc6:	2c02      	cmp	r4, #2
 8003bc8:	d120      	bne.n	8003c0c <xQueueGenericSendFromISR+0x56>
 8003bca:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d01d      	beq.n	8003c0c <xQueueGenericSendFromISR+0x56>
 8003bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	e7fe      	b.n	8003be0 <xQueueGenericSendFromISR+0x2a>
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0e5      	beq.n	8003bc6 <xQueueGenericSendFromISR+0x10>
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	e7fe      	b.n	8003c0a <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c0c:	f001 fdb0 	bl	8005770 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c10:	f3ef 8811 	mrs	r8, BASEPRI
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c24:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003c26:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d306      	bcc.n	8003c3a <xQueueGenericSendFromISR+0x84>
 8003c2c:	2c02      	cmp	r4, #2
 8003c2e:	d004      	beq.n	8003c3a <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8003c30:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c32:	f388 8811 	msr	BASEPRI, r8
}
 8003c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c3a:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8003c3e:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c42:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c44:	4622      	mov	r2, r4
 8003c46:	4639      	mov	r1, r7
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff fd24 	bl	8003696 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003c4e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8003c52:	d006      	beq.n	8003c62 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c54:	f109 0301 	add.w	r3, r9, #1
 8003c58:	b25b      	sxtb	r3, r3
 8003c5a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	e7e7      	b.n	8003c32 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c62:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003c64:	b90b      	cbnz	r3, 8003c6a <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8003c66:	2001      	movs	r0, #1
 8003c68:	e7e3      	b.n	8003c32 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8003c6e:	f000 ff5d 	bl	8004b2c <xTaskRemoveFromEventList>
 8003c72:	b118      	cbz	r0, 8003c7c <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8003c74:	b126      	cbz	r6, 8003c80 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c76:	2001      	movs	r0, #1
 8003c78:	6030      	str	r0, [r6, #0]
 8003c7a:	e7da      	b.n	8003c32 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	e7d8      	b.n	8003c32 <xQueueGenericSendFromISR+0x7c>
 8003c80:	2001      	movs	r0, #1
 8003c82:	e7d6      	b.n	8003c32 <xQueueGenericSendFromISR+0x7c>

08003c84 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8003c84:	b168      	cbz	r0, 8003ca2 <xQueueGiveFromISR+0x1e>
{
 8003c86:	b570      	push	{r4, r5, r6, lr}
 8003c88:	460c      	mov	r4, r1
 8003c8a:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003c8e:	b18b      	cbz	r3, 8003cb4 <xQueueGiveFromISR+0x30>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	e7fe      	b.n	8003ca0 <xQueueGiveFromISR+0x1c>
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	b1eb      	cbz	r3, 8003cf4 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cb8:	f001 fd5a 	bl	8005770 <vPortValidateInterruptPriority>
	__asm volatile
 8003cbc:	f3ef 8611 	mrs	r6, BASEPRI
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd0:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cd2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d926      	bls.n	8003d26 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cd8:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8003cdc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cde:	3201      	adds	r2, #1
 8003ce0:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce6:	d011      	beq.n	8003d0c <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ce8:	3301      	adds	r3, #1
 8003cea:	b25b      	sxtb	r3, r3
 8003cec:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	e019      	b.n	8003d28 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003cf4:	6883      	ldr	r3, [r0, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0de      	beq.n	8003cb8 <xQueueGiveFromISR+0x34>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	e7fe      	b.n	8003d0a <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d0c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003d0e:	b90b      	cbnz	r3, 8003d14 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e009      	b.n	8003d28 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d14:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8003d18:	f000 ff08 	bl	8004b2c <xTaskRemoveFromEventList>
 8003d1c:	b138      	cbz	r0, 8003d2e <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8003d1e:	b144      	cbz	r4, 8003d32 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d20:	2001      	movs	r0, #1
 8003d22:	6020      	str	r0, [r4, #0]
 8003d24:	e000      	b.n	8003d28 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8003d26:	2000      	movs	r0, #0
	__asm volatile
 8003d28:	f386 8811 	msr	BASEPRI, r6
}
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8003d2e:	2001      	movs	r0, #1
 8003d30:	e7fa      	b.n	8003d28 <xQueueGiveFromISR+0xa4>
 8003d32:	2001      	movs	r0, #1
 8003d34:	e7f8      	b.n	8003d28 <xQueueGiveFromISR+0xa4>

08003d36 <xQueueReceive>:
{
 8003d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003d3c:	b190      	cbz	r0, 8003d64 <xQueueReceive+0x2e>
 8003d3e:	460f      	mov	r7, r1
 8003d40:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d42:	b1c1      	cbz	r1, 8003d76 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d44:	f001 f856 	bl	8004df4 <xTaskGetSchedulerState>
 8003d48:	4606      	mov	r6, r0
 8003d4a:	bb00      	cbnz	r0, 8003d8e <xQueueReceive+0x58>
 8003d4c:	9b01      	ldr	r3, [sp, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d05e      	beq.n	8003e10 <xQueueReceive+0xda>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	e7fe      	b.n	8003d62 <xQueueReceive+0x2c>
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003d74:	e7fe      	b.n	8003d74 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d76:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0e3      	beq.n	8003d44 <xQueueReceive+0xe>
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	e7fe      	b.n	8003d8c <xQueueReceive+0x56>
 8003d8e:	2600      	movs	r6, #0
 8003d90:	e03e      	b.n	8003e10 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d92:	4639      	mov	r1, r7
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff fcb9 	bl	800370c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d9a:	3d01      	subs	r5, #1
 8003d9c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	b923      	cbnz	r3, 8003dac <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8003da2:	f001 fbe1 	bl	8005568 <vPortExitCritical>
				return pdPASS;
 8003da6:	2001      	movs	r0, #1
}
 8003da8:	b005      	add	sp, #20
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dac:	f104 0010 	add.w	r0, r4, #16
 8003db0:	f000 febc 	bl	8004b2c <xTaskRemoveFromEventList>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d0f4      	beq.n	8003da2 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8003db8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	e7e9      	b.n	8003da2 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8003dce:	f001 fbcb 	bl	8005568 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e7e8      	b.n	8003da8 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd6:	a802      	add	r0, sp, #8
 8003dd8:	f000 feee 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ddc:	2601      	movs	r6, #1
 8003dde:	e021      	b.n	8003e24 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8003de0:	2300      	movs	r3, #0
 8003de2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003de6:	e029      	b.n	8003e3c <xQueueReceive+0x106>
 8003de8:	2300      	movs	r3, #0
 8003dea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003dee:	e02b      	b.n	8003e48 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7ff fc9d 	bl	8003730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003df6:	f000 fd5d 	bl	80048b4 <xTaskResumeAll>
 8003dfa:	e009      	b.n	8003e10 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fc97 	bl	8003730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e02:	f000 fd57 	bl	80048b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff fc38 	bl	800367c <prvIsQueueEmpty>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d13f      	bne.n	8003e90 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8003e10:	f001 fb88 	bl	8005524 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e14:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	d1bb      	bne.n	8003d92 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e1a:	9b01      	ldr	r3, [sp, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0d6      	beq.n	8003dce <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8003e20:	2e00      	cmp	r6, #0
 8003e22:	d0d8      	beq.n	8003dd6 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8003e24:	f001 fba0 	bl	8005568 <vPortExitCritical>
		vTaskSuspendAll();
 8003e28:	f000 fc9c 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e2c:	f001 fb7a 	bl	8005524 <vPortEnterCritical>
 8003e30:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003e34:	b25b      	sxtb	r3, r3
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e3a:	d0d1      	beq.n	8003de0 <xQueueReceive+0xaa>
 8003e3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e46:	d0cf      	beq.n	8003de8 <xQueueReceive+0xb2>
 8003e48:	f001 fb8e 	bl	8005568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e4c:	a901      	add	r1, sp, #4
 8003e4e:	a802      	add	r0, sp, #8
 8003e50:	f000 febe 	bl	8004bd0 <xTaskCheckForTimeOut>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d1d1      	bne.n	8003dfc <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7ff fc0f 	bl	800367c <prvIsQueueEmpty>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d0c6      	beq.n	8003df0 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e62:	9901      	ldr	r1, [sp, #4]
 8003e64:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003e68:	f000 fe2c 	bl	8004ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff fc5f 	bl	8003730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e72:	f000 fd1f 	bl	80048b4 <xTaskResumeAll>
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d1ca      	bne.n	8003e10 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003e7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	e7bf      	b.n	8003e10 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8003e90:	2000      	movs	r0, #0
 8003e92:	e789      	b.n	8003da8 <xQueueReceive+0x72>

08003e94 <xQueueSemaphoreTake>:
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003e9a:	b158      	cbz	r0, 8003eb4 <xQueueSemaphoreTake+0x20>
 8003e9c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e9e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ea0:	b18b      	cbz	r3, 8003ec6 <xQueueSemaphoreTake+0x32>
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	e7fe      	b.n	8003eb2 <xQueueSemaphoreTake+0x1e>
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec6:	f000 ff95 	bl	8004df4 <xTaskGetSchedulerState>
 8003eca:	4605      	mov	r5, r0
 8003ecc:	b950      	cbnz	r0, 8003ee4 <xQueueSemaphoreTake+0x50>
 8003ece:	9b01      	ldr	r3, [sp, #4]
 8003ed0:	b15b      	cbz	r3, 8003eea <xQueueSemaphoreTake+0x56>
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	e7fe      	b.n	8003ee2 <xQueueSemaphoreTake+0x4e>
 8003ee4:	2600      	movs	r6, #0
 8003ee6:	4635      	mov	r5, r6
 8003ee8:	e055      	b.n	8003f96 <xQueueSemaphoreTake+0x102>
 8003eea:	4606      	mov	r6, r0
 8003eec:	e053      	b.n	8003f96 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	b13b      	cbz	r3, 8003f06 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	b94b      	cbnz	r3, 8003f0e <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8003efa:	f001 fb35 	bl	8005568 <vPortExitCritical>
				return pdPASS;
 8003efe:	2601      	movs	r6, #1
}
 8003f00:	4630      	mov	r0, r6
 8003f02:	b004      	add	sp, #16
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f06:	f001 f869 	bl	8004fdc <pvTaskIncrementMutexHeldCount>
 8003f0a:	60a0      	str	r0, [r4, #8]
 8003f0c:	e7f3      	b.n	8003ef6 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0e:	f104 0010 	add.w	r0, r4, #16
 8003f12:	f000 fe0b 	bl	8004b2c <xTaskRemoveFromEventList>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d0ef      	beq.n	8003efa <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8003f1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	e7e4      	b.n	8003efa <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f30:	b146      	cbz	r6, 8003f44 <xQueueSemaphoreTake+0xb0>
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	e7fe      	b.n	8003f42 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8003f44:	f001 fb10 	bl	8005568 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003f48:	e7da      	b.n	8003f00 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f4a:	a802      	add	r0, sp, #8
 8003f4c:	f000 fe34 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f50:	2501      	movs	r5, #1
 8003f52:	e02a      	b.n	8003faa <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8003f54:	2300      	movs	r3, #0
 8003f56:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003f5a:	e032      	b.n	8003fc2 <xQueueSemaphoreTake+0x12e>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003f62:	e034      	b.n	8003fce <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8003f64:	f001 fade 	bl	8005524 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f68:	68a0      	ldr	r0, [r4, #8]
 8003f6a:	f000 ff53 	bl	8004e14 <xTaskPriorityInherit>
 8003f6e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8003f70:	f001 fafa 	bl	8005568 <vPortExitCritical>
 8003f74:	e03b      	b.n	8003fee <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8003f76:	4620      	mov	r0, r4
 8003f78:	f7ff fbda 	bl	8003730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f7c:	f000 fc9a 	bl	80048b4 <xTaskResumeAll>
 8003f80:	e009      	b.n	8003f96 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff fbd4 	bl	8003730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f88:	f000 fc94 	bl	80048b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f7ff fb75 	bl	800367c <prvIsQueueEmpty>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d142      	bne.n	800401c <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8003f96:	f001 fac5 	bl	8005524 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1a6      	bne.n	8003eee <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa0:	9b01      	ldr	r3, [sp, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0c4      	beq.n	8003f30 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	d0cf      	beq.n	8003f4a <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8003faa:	f001 fadd 	bl	8005568 <vPortExitCritical>
		vTaskSuspendAll();
 8003fae:	f000 fbd9 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fb2:	f001 fab7 	bl	8005524 <vPortEnterCritical>
 8003fb6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fc0:	d0c8      	beq.n	8003f54 <xQueueSemaphoreTake+0xc0>
 8003fc2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fcc:	d0c6      	beq.n	8003f5c <xQueueSemaphoreTake+0xc8>
 8003fce:	f001 facb 	bl	8005568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fd2:	a901      	add	r1, sp, #4
 8003fd4:	a802      	add	r0, sp, #8
 8003fd6:	f000 fdfb 	bl	8004bd0 <xTaskCheckForTimeOut>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d1d1      	bne.n	8003f82 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff fb4c 	bl	800367c <prvIsQueueEmpty>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0c6      	beq.n	8003f76 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ba      	beq.n	8003f64 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fee:	9901      	ldr	r1, [sp, #4]
 8003ff0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003ff4:	f000 fd66 	bl	8004ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7ff fb99 	bl	8003730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ffe:	f000 fc59 	bl	80048b4 <xTaskResumeAll>
 8004002:	2800      	cmp	r0, #0
 8004004:	d1c7      	bne.n	8003f96 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8004006:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800400a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800400e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	e7bc      	b.n	8003f96 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800401c:	b90e      	cbnz	r6, 8004022 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800401e:	2600      	movs	r6, #0
 8004020:	e76e      	b.n	8003f00 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8004022:	f001 fa7f 	bl	8005524 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff fb11 	bl	800364e <prvGetDisinheritPriorityAfterTimeout>
 800402c:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800402e:	68a0      	ldr	r0, [r4, #8]
 8004030:	f000 ff84 	bl	8004f3c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8004034:	f001 fa98 	bl	8005568 <vPortExitCritical>
 8004038:	e7f1      	b.n	800401e <xQueueSemaphoreTake+0x18a>

0800403a <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800403a:	b180      	cbz	r0, 800405e <xQueueTakeMutexRecursive+0x24>
	{
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	460c      	mov	r4, r1
 8004040:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004042:	6886      	ldr	r6, [r0, #8]
 8004044:	f000 fed0 	bl	8004de8 <xTaskGetCurrentTaskHandle>
 8004048:	4286      	cmp	r6, r0
 800404a:	d011      	beq.n	8004070 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800404c:	4621      	mov	r1, r4
 800404e:	4628      	mov	r0, r5
 8004050:	f7ff ff20 	bl	8003e94 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8004054:	b180      	cbz	r0, 8004078 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004056:	68eb      	ldr	r3, [r5, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800405c:	e00c      	b.n	8004078 <xQueueTakeMutexRecursive+0x3e>
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800406e:	e7fe      	b.n	800406e <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004070:	68eb      	ldr	r3, [r5, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8004076:	2001      	movs	r0, #1
	}
 8004078:	bd70      	pop	{r4, r5, r6, pc}

0800407a <xQueueReceiveFromISR>:
{
 800407a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800407e:	b1b0      	cbz	r0, 80040ae <xQueueReceiveFromISR+0x34>
 8004080:	460d      	mov	r5, r1
 8004082:	4690      	mov	r8, r2
 8004084:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004086:	b1d9      	cbz	r1, 80040c0 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004088:	f001 fb72 	bl	8005770 <vPortValidateInterruptPriority>
	__asm volatile
 800408c:	f3ef 8711 	mrs	r7, BASEPRI
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040a0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a2:	b9ce      	cbnz	r6, 80040d8 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80040a4:	2000      	movs	r0, #0
	__asm volatile
 80040a6:	f387 8811 	msr	BASEPRI, r7
}
 80040aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80040be:	e7fe      	b.n	80040be <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0e0      	beq.n	8004088 <xQueueReceiveFromISR+0xe>
 80040c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	e7fe      	b.n	80040d6 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80040d8:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 80040dc:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040e0:	4629      	mov	r1, r5
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7ff fb12 	bl	800370c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040e8:	1e73      	subs	r3, r6, #1
 80040ea:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80040ec:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80040f0:	d006      	beq.n	8004100 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040f2:	f109 0301 	add.w	r3, r9, #1
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80040fc:	2001      	movs	r0, #1
 80040fe:	e7d2      	b.n	80040a6 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	b90b      	cbnz	r3, 8004108 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8004104:	2001      	movs	r0, #1
 8004106:	e7ce      	b.n	80040a6 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004108:	f104 0010 	add.w	r0, r4, #16
 800410c:	f000 fd0e 	bl	8004b2c <xTaskRemoveFromEventList>
 8004110:	b130      	cbz	r0, 8004120 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8004112:	f1b8 0f00 	cmp.w	r8, #0
 8004116:	d005      	beq.n	8004124 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004118:	2001      	movs	r0, #1
 800411a:	f8c8 0000 	str.w	r0, [r8]
 800411e:	e7c2      	b.n	80040a6 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8004120:	2001      	movs	r0, #1
 8004122:	e7c0      	b.n	80040a6 <xQueueReceiveFromISR+0x2c>
 8004124:	2001      	movs	r0, #1
 8004126:	e7be      	b.n	80040a6 <xQueueReceiveFromISR+0x2c>

08004128 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004128:	2300      	movs	r3, #0
 800412a:	2b07      	cmp	r3, #7
 800412c:	d80c      	bhi.n	8004148 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800412e:	4a07      	ldr	r2, [pc, #28]	@ (800414c <vQueueAddToRegistry+0x24>)
 8004130:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004134:	b10a      	cbz	r2, 800413a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004136:	3301      	adds	r3, #1
 8004138:	e7f7      	b.n	800412a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800413a:	4a04      	ldr	r2, [pc, #16]	@ (800414c <vQueueAddToRegistry+0x24>)
 800413c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004140:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004144:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004146:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000bc8 	.word	0x20000bc8

08004150 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004150:	2300      	movs	r3, #0
 8004152:	2b07      	cmp	r3, #7
 8004154:	d80f      	bhi.n	8004176 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004156:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <vQueueUnregisterQueue+0x28>)
 8004158:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800415c:	6852      	ldr	r2, [r2, #4]
 800415e:	4282      	cmp	r2, r0
 8004160:	d001      	beq.n	8004166 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004162:	3301      	adds	r3, #1
 8004164:	e7f5      	b.n	8004152 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004166:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <vQueueUnregisterQueue+0x28>)
 8004168:	2100      	movs	r1, #0
 800416a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800416e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004172:	6051      	str	r1, [r2, #4]
				break;
 8004174:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004176:	4770      	bx	lr
 8004178:	20000bc8 	.word	0x20000bc8

0800417c <vQueueDelete>:
	configASSERT( pxQueue );
 800417c:	b138      	cbz	r0, 800418e <vQueueDelete+0x12>
{
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8004182:	f7ff ffe5 	bl	8004150 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004186:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800418a:	b14b      	cbz	r3, 80041a0 <vQueueDelete+0x24>
}
 800418c:	bd10      	pop	{r4, pc}
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800419e:	e7fe      	b.n	800419e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 80041a0:	4620      	mov	r0, r4
 80041a2:	f001 fbf9 	bl	8005998 <vPortFree>
}
 80041a6:	e7f1      	b.n	800418c <vQueueDelete+0x10>

080041a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4604      	mov	r4, r0
 80041ac:	460d      	mov	r5, r1
 80041ae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041b0:	f001 f9b8 	bl	8005524 <vPortEnterCritical>
 80041b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041be:	d00d      	beq.n	80041dc <vQueueWaitForMessageRestricted+0x34>
 80041c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80041c4:	b25b      	sxtb	r3, r3
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ca:	d00b      	beq.n	80041e4 <vQueueWaitForMessageRestricted+0x3c>
 80041cc:	f001 f9cc 	bl	8005568 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041d2:	b15b      	cbz	r3, 80041ec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff faab 	bl	8003730 <prvUnlockQueue>
	}
 80041da:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80041dc:	2300      	movs	r3, #0
 80041de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80041e2:	e7ed      	b.n	80041c0 <vQueueWaitForMessageRestricted+0x18>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80041ea:	e7ef      	b.n	80041cc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041ec:	4632      	mov	r2, r6
 80041ee:	4629      	mov	r1, r5
 80041f0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80041f4:	f000 fc7e 	bl	8004af4 <vTaskPlaceOnEventListRestricted>
 80041f8:	e7ec      	b.n	80041d4 <vQueueWaitForMessageRestricted+0x2c>

080041fa <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80041fa:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80041fc:	e001      	b.n	8004202 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 80041fe:	3001      	adds	r0, #1
			ulCount++;
 8004200:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004202:	7802      	ldrb	r2, [r0, #0]
 8004204:	2aa5      	cmp	r2, #165	@ 0xa5
 8004206:	d0fa      	beq.n	80041fe <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 8004208:	f3c3 008f 	ubfx	r0, r3, #2, #16
 800420c:	4770      	bx	lr
	...

08004210 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004210:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <prvResetNextTaskUnblockTime+0x24>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b923      	cbnz	r3, 8004222 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004218:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <prvResetNextTaskUnblockTime+0x28>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <prvResetNextTaskUnblockTime+0x24>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4b02      	ldr	r3, [pc, #8]	@ (8004238 <prvResetNextTaskUnblockTime+0x28>)
 800422e:	601a      	str	r2, [r3, #0]
	}
}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000c80 	.word	0x20000c80
 8004238:	20000c18 	.word	0x20000c18

0800423c <prvInitialiseNewTask>:
{
 800423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004240:	4680      	mov	r8, r0
 8004242:	460d      	mov	r5, r1
 8004244:	4617      	mov	r7, r2
 8004246:	4699      	mov	r9, r3
 8004248:	9e08      	ldr	r6, [sp, #32]
 800424a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800424e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	21a5      	movs	r1, #165	@ 0xa5
 8004254:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004256:	f002 fa3f 	bl	80066d8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800425a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800425c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8004260:	3a01      	subs	r2, #1
 8004262:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004266:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800426a:	6427      	str	r7, [r4, #64]	@ 0x40
	if( pcName != NULL )
 800426c:	2d00      	cmp	r5, #0
 800426e:	d043      	beq.n	80042f8 <prvInitialiseNewTask+0xbc>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004270:	f04f 0c00 	mov.w	ip, #0
 8004274:	f1bc 0f0b 	cmp.w	ip, #11
 8004278:	d809      	bhi.n	800428e <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800427a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800427e:	eb04 020c 	add.w	r2, r4, ip
 8004282:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004286:	b113      	cbz	r3, 800428e <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004288:	f10c 0c01 	add.w	ip, ip, #1
 800428c:	e7f2      	b.n	8004274 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800428e:	2300      	movs	r3, #0
 8004290:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004294:	2e37      	cmp	r6, #55	@ 0x37
 8004296:	d900      	bls.n	800429a <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004298:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800429a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800429c:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800429e:	2500      	movs	r5, #0
 80042a0:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042a2:	1d20      	adds	r0, r4, #4
 80042a4:	f7ff f999 	bl	80035da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a8:	f104 0018 	add.w	r0, r4, #24
 80042ac:	f7ff f995 	bl	80035da <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b2:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 80042b6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042b8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80042ba:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 80042bc:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042c0:	f884 50a8 	strb.w	r5, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042c4:	224c      	movs	r2, #76	@ 0x4c
 80042c6:	4629      	mov	r1, r5
 80042c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042cc:	f002 fa04 	bl	80066d8 <memset>
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <prvInitialiseNewTask+0xc4>)
 80042d2:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80042d4:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042d8:	6622      	str	r2, [r4, #96]	@ 0x60
 80042da:	33d0      	adds	r3, #208	@ 0xd0
 80042dc:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042de:	464a      	mov	r2, r9
 80042e0:	4641      	mov	r1, r8
 80042e2:	4638      	mov	r0, r7
 80042e4:	f001 f8f0 	bl	80054c8 <pxPortInitialiseStack>
 80042e8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80042ea:	f1ba 0f00 	cmp.w	sl, #0
 80042ee:	d001      	beq.n	80042f4 <prvInitialiseNewTask+0xb8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042f0:	f8ca 4000 	str.w	r4, [sl]
}
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80042fe:	e7c9      	b.n	8004294 <prvInitialiseNewTask+0x58>
 8004300:	20001264 	.word	0x20001264

08004304 <prvInitialiseTaskLists>:
{
 8004304:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004306:	2400      	movs	r4, #0
 8004308:	e007      	b.n	800431a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800430a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800430e:	0093      	lsls	r3, r2, #2
 8004310:	480e      	ldr	r0, [pc, #56]	@ (800434c <prvInitialiseTaskLists+0x48>)
 8004312:	4418      	add	r0, r3
 8004314:	f7ff f956 	bl	80035c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004318:	3401      	adds	r4, #1
 800431a:	2c37      	cmp	r4, #55	@ 0x37
 800431c:	d9f5      	bls.n	800430a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800431e:	4d0c      	ldr	r5, [pc, #48]	@ (8004350 <prvInitialiseTaskLists+0x4c>)
 8004320:	4628      	mov	r0, r5
 8004322:	f7ff f94f 	bl	80035c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004326:	4c0b      	ldr	r4, [pc, #44]	@ (8004354 <prvInitialiseTaskLists+0x50>)
 8004328:	4620      	mov	r0, r4
 800432a:	f7ff f94b 	bl	80035c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800432e:	480a      	ldr	r0, [pc, #40]	@ (8004358 <prvInitialiseTaskLists+0x54>)
 8004330:	f7ff f948 	bl	80035c4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004334:	4809      	ldr	r0, [pc, #36]	@ (800435c <prvInitialiseTaskLists+0x58>)
 8004336:	f7ff f945 	bl	80035c4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800433a:	4809      	ldr	r0, [pc, #36]	@ (8004360 <prvInitialiseTaskLists+0x5c>)
 800433c:	f7ff f942 	bl	80035c4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004340:	4b08      	ldr	r3, [pc, #32]	@ (8004364 <prvInitialiseTaskLists+0x60>)
 8004342:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004344:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <prvInitialiseTaskLists+0x64>)
 8004346:	601c      	str	r4, [r3, #0]
}
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	bf00      	nop
 800434c:	20000cac 	.word	0x20000cac
 8004350:	20000c98 	.word	0x20000c98
 8004354:	20000c84 	.word	0x20000c84
 8004358:	20000c68 	.word	0x20000c68
 800435c:	20000c54 	.word	0x20000c54
 8004360:	20000c3c 	.word	0x20000c3c
 8004364:	20000c80 	.word	0x20000c80
 8004368:	20000c7c 	.word	0x20000c7c

0800436c <prvAddNewTaskToReadyList>:
{
 800436c:	b510      	push	{r4, lr}
 800436e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004370:	f001 f8d8 	bl	8005524 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004374:	4a22      	ldr	r2, [pc, #136]	@ (8004400 <prvAddNewTaskToReadyList+0x94>)
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800437c:	4b21      	ldr	r3, [pc, #132]	@ (8004404 <prvAddNewTaskToReadyList+0x98>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b15b      	cbz	r3, 800439a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004382:	4b21      	ldr	r3, [pc, #132]	@ (8004408 <prvAddNewTaskToReadyList+0x9c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b96b      	cbnz	r3, 80043a4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004388:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <prvAddNewTaskToReadyList+0x98>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d807      	bhi.n	80043a4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004394:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <prvAddNewTaskToReadyList+0x98>)
 8004396:	601c      	str	r4, [r3, #0]
 8004398:	e004      	b.n	80043a4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <prvAddNewTaskToReadyList+0x98>)
 800439c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d029      	beq.n	80043f8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <prvAddNewTaskToReadyList+0xa0>)
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043ac:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80043ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80043b0:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <prvAddNewTaskToReadyList+0xa4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4298      	cmp	r0, r3
 80043b6:	d901      	bls.n	80043bc <prvAddNewTaskToReadyList+0x50>
 80043b8:	4b15      	ldr	r3, [pc, #84]	@ (8004410 <prvAddNewTaskToReadyList+0xa4>)
 80043ba:	6018      	str	r0, [r3, #0]
 80043bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043c0:	1d21      	adds	r1, r4, #4
 80043c2:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <prvAddNewTaskToReadyList+0xa8>)
 80043c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80043c8:	f7ff f90a 	bl	80035e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80043cc:	f001 f8cc 	bl	8005568 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80043d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <prvAddNewTaskToReadyList+0x9c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b17b      	cbz	r3, 80043f6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <prvAddNewTaskToReadyList+0x98>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80043de:	429a      	cmp	r2, r3
 80043e0:	d209      	bcs.n	80043f6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80043e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
}
 80043f6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80043f8:	f7ff ff84 	bl	8004304 <prvInitialiseTaskLists>
 80043fc:	e7d2      	b.n	80043a4 <prvAddNewTaskToReadyList+0x38>
 80043fe:	bf00      	nop
 8004400:	20000c38 	.word	0x20000c38
 8004404:	2000110c 	.word	0x2000110c
 8004408:	20000c2c 	.word	0x20000c2c
 800440c:	20000c1c 	.word	0x20000c1c
 8004410:	20000c30 	.word	0x20000c30
 8004414:	20000cac 	.word	0x20000cac

08004418 <prvDeleteTCB>:
	{
 8004418:	b510      	push	{r4, lr}
 800441a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800441c:	3058      	adds	r0, #88	@ 0x58
 800441e:	f002 f977 	bl	8006710 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004422:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8004426:	b163      	cbz	r3, 8004442 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004428:	2b01      	cmp	r3, #1
 800442a:	d011      	beq.n	8004450 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442c:	2b02      	cmp	r3, #2
 800442e:	d00e      	beq.n	800444e <prvDeleteTCB+0x36>
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	e7fe      	b.n	8004440 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8004442:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004444:	f001 faa8 	bl	8005998 <vPortFree>
				vPortFree( pxTCB );
 8004448:	4620      	mov	r0, r4
 800444a:	f001 faa5 	bl	8005998 <vPortFree>
	}
 800444e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004450:	4620      	mov	r0, r4
 8004452:	f001 faa1 	bl	8005998 <vPortFree>
 8004456:	e7fa      	b.n	800444e <prvDeleteTCB+0x36>

08004458 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <prvCheckTasksWaitingTermination+0x40>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b1d3      	cbz	r3, 8004494 <prvCheckTasksWaitingTermination+0x3c>
{
 800445e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004460:	f001 f860 	bl	8005524 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004464:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <prvCheckTasksWaitingTermination+0x44>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800446a:	1d20      	adds	r0, r4, #4
 800446c:	f7ff f8dc 	bl	8003628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004470:	4a0b      	ldr	r2, [pc, #44]	@ (80044a0 <prvCheckTasksWaitingTermination+0x48>)
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	3b01      	subs	r3, #1
 8004476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004478:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <prvCheckTasksWaitingTermination+0x40>)
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004480:	f001 f872 	bl	8005568 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff ffc7 	bl	8004418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800448a:	4b03      	ldr	r3, [pc, #12]	@ (8004498 <prvCheckTasksWaitingTermination+0x40>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e6      	bne.n	8004460 <prvCheckTasksWaitingTermination+0x8>
}
 8004492:	bd10      	pop	{r4, pc}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000c50 	.word	0x20000c50
 800449c:	20000c54 	.word	0x20000c54
 80044a0:	20000c38 	.word	0x20000c38

080044a4 <prvIdleTask>:
{
 80044a4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80044a6:	f7ff ffd7 	bl	8004458 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <prvIdleTask+0x24>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d9f9      	bls.n	80044a6 <prvIdleTask+0x2>
				taskYIELD();
 80044b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80044b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	e7ee      	b.n	80044a6 <prvIdleTask+0x2>
 80044c8:	20000cac 	.word	0x20000cac

080044cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4604      	mov	r4, r0
 80044d0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044d2:	4b17      	ldr	r3, [pc, #92]	@ (8004530 <prvAddCurrentTaskToDelayedList+0x64>)
 80044d4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d6:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x68>)
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	3004      	adds	r0, #4
 80044dc:	f7ff f8a4 	bl	8003628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044e0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80044e4:	d00d      	beq.n	8004502 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044e6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044e8:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x68>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d910      	bls.n	8004514 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f2:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <prvAddCurrentTaskToDelayedList+0x6c>)
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x68>)
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	3104      	adds	r1, #4
 80044fc:	f7ff f87b 	bl	80035f6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004500:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004502:	2d00      	cmp	r5, #0
 8004504:	d0ef      	beq.n	80044e6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x68>)
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	3104      	adds	r1, #4
 800450c:	480b      	ldr	r0, [pc, #44]	@ (800453c <prvAddCurrentTaskToDelayedList+0x70>)
 800450e:	f7ff f867 	bl	80035e0 <vListInsertEnd>
 8004512:	e7f5      	b.n	8004500 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004514:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <prvAddCurrentTaskToDelayedList+0x74>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x68>)
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	3104      	adds	r1, #4
 800451e:	f7ff f86a 	bl	80035f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004522:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x78>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	42a3      	cmp	r3, r4
 8004528:	d9ea      	bls.n	8004500 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x78>)
 800452c:	601c      	str	r4, [r3, #0]
}
 800452e:	e7e7      	b.n	8004500 <prvAddCurrentTaskToDelayedList+0x34>
 8004530:	20000c34 	.word	0x20000c34
 8004534:	2000110c 	.word	0x2000110c
 8004538:	20000c7c 	.word	0x20000c7c
 800453c:	20000c3c 	.word	0x20000c3c
 8004540:	20000c80 	.word	0x20000c80
 8004544:	20000c18 	.word	0x20000c18

08004548 <xTaskCreateStatic>:
	{
 8004548:	b530      	push	{r4, r5, lr}
 800454a:	b087      	sub	sp, #28
 800454c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800454e:	b17c      	cbz	r4, 8004570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004550:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004552:	b1b5      	cbz	r5, 8004582 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004554:	25ac      	movs	r5, #172	@ 0xac
 8004556:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004558:	9d04      	ldr	r5, [sp, #16]
 800455a:	2dac      	cmp	r5, #172	@ 0xac
 800455c:	d01a      	beq.n	8004594 <xTaskCreateStatic+0x4c>
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	e7fe      	b.n	800456e <xTaskCreateStatic+0x26>
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004580:	e7fe      	b.n	8004580 <xTaskCreateStatic+0x38>
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004592:	e7fe      	b.n	8004592 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004594:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004596:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004598:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800459a:	2402      	movs	r4, #2
 800459c:	f885 40a9 	strb.w	r4, [r5, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045a0:	2400      	movs	r4, #0
 80045a2:	9403      	str	r4, [sp, #12]
 80045a4:	9502      	str	r5, [sp, #8]
 80045a6:	ac05      	add	r4, sp, #20
 80045a8:	9401      	str	r4, [sp, #4]
 80045aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045ac:	9400      	str	r4, [sp, #0]
 80045ae:	f7ff fe45 	bl	800423c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80045b4:	f7ff feda 	bl	800436c <prvAddNewTaskToReadyList>
	}
 80045b8:	9805      	ldr	r0, [sp, #20]
 80045ba:	b007      	add	sp, #28
 80045bc:	bd30      	pop	{r4, r5, pc}

080045be <xTaskCreate>:
	{
 80045be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	4607      	mov	r7, r0
 80045c6:	4688      	mov	r8, r1
 80045c8:	4614      	mov	r4, r2
 80045ca:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045cc:	0090      	lsls	r0, r2, #2
 80045ce:	f001 f961 	bl	8005894 <pvPortMalloc>
			if( pxStack != NULL )
 80045d2:	b308      	cbz	r0, 8004618 <xTaskCreate+0x5a>
 80045d4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045d6:	20ac      	movs	r0, #172	@ 0xac
 80045d8:	f001 f95c 	bl	8005894 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80045dc:	4605      	mov	r5, r0
 80045de:	b1a8      	cbz	r0, 800460c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80045e0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045ea:	9303      	str	r3, [sp, #12]
 80045ec:	9002      	str	r0, [sp, #8]
 80045ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4633      	mov	r3, r6
 80045f8:	4622      	mov	r2, r4
 80045fa:	4641      	mov	r1, r8
 80045fc:	4638      	mov	r0, r7
 80045fe:	f7ff fe1d 	bl	800423c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004602:	4628      	mov	r0, r5
 8004604:	f7ff feb2 	bl	800436c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004608:	2001      	movs	r0, #1
 800460a:	e007      	b.n	800461c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800460c:	4648      	mov	r0, r9
 800460e:	f001 f9c3 	bl	8005998 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004616:	e001      	b.n	800461c <xTaskCreate+0x5e>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 800461c:	b005      	add	sp, #20
 800461e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004624 <eTaskGetState>:
	{
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8004626:	b1d0      	cbz	r0, 800465e <eTaskGetState+0x3a>
 8004628:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <eTaskGetState+0x7c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4283      	cmp	r3, r0
 8004630:	d02d      	beq.n	800468e <eTaskGetState+0x6a>
			taskENTER_CRITICAL();
 8004632:	f000 ff77 	bl	8005524 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004636:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 8004638:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <eTaskGetState+0x80>)
 800463a:	681e      	ldr	r6, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800463c:	4b1a      	ldr	r3, [pc, #104]	@ (80046a8 <eTaskGetState+0x84>)
 800463e:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
 8004640:	f000 ff92 	bl	8005568 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004644:	42b5      	cmp	r5, r6
 8004646:	d024      	beq.n	8004692 <eTaskGetState+0x6e>
 8004648:	42bd      	cmp	r5, r7
 800464a:	d024      	beq.n	8004696 <eTaskGetState+0x72>
				else if( pxStateList == &xSuspendedTaskList )
 800464c:	4b17      	ldr	r3, [pc, #92]	@ (80046ac <eTaskGetState+0x88>)
 800464e:	429d      	cmp	r5, r3
 8004650:	d00e      	beq.n	8004670 <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004652:	4b17      	ldr	r3, [pc, #92]	@ (80046b0 <eTaskGetState+0x8c>)
 8004654:	429d      	cmp	r5, r3
 8004656:	d020      	beq.n	800469a <eTaskGetState+0x76>
 8004658:	b1bd      	cbz	r5, 800468a <eTaskGetState+0x66>
				eReturn = eReady;
 800465a:	2001      	movs	r0, #1
 800465c:	e018      	b.n	8004690 <eTaskGetState+0x6c>
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
 800466e:	e7fe      	b.n	800466e <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004670:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004672:	b10b      	cbz	r3, 8004678 <eTaskGetState+0x54>
						eReturn = eBlocked;
 8004674:	2002      	movs	r0, #2
 8004676:	e00b      	b.n	8004690 <eTaskGetState+0x6c>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004678:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <eTaskGetState+0x62>
								eReturn = eSuspended;
 8004682:	2003      	movs	r0, #3
 8004684:	e004      	b.n	8004690 <eTaskGetState+0x6c>
								eReturn = eBlocked;
 8004686:	2002      	movs	r0, #2
 8004688:	e002      	b.n	8004690 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 800468a:	2004      	movs	r0, #4
 800468c:	e000      	b.n	8004690 <eTaskGetState+0x6c>
			eReturn = eRunning;
 800468e:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 8004692:	2002      	movs	r0, #2
 8004694:	e7fc      	b.n	8004690 <eTaskGetState+0x6c>
 8004696:	2002      	movs	r0, #2
 8004698:	e7fa      	b.n	8004690 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 800469a:	2004      	movs	r0, #4
 800469c:	e7f8      	b.n	8004690 <eTaskGetState+0x6c>
 800469e:	bf00      	nop
 80046a0:	2000110c 	.word	0x2000110c
 80046a4:	20000c80 	.word	0x20000c80
 80046a8:	20000c7c 	.word	0x20000c7c
 80046ac:	20000c3c 	.word	0x20000c3c
 80046b0:	20000c54 	.word	0x20000c54

080046b4 <vTaskStartScheduler>:
{
 80046b4:	b510      	push	{r4, lr}
 80046b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046b8:	2400      	movs	r4, #0
 80046ba:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046bc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046be:	aa07      	add	r2, sp, #28
 80046c0:	a906      	add	r1, sp, #24
 80046c2:	a805      	add	r0, sp, #20
 80046c4:	f7fe ff66 	bl	8003594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046c8:	9b05      	ldr	r3, [sp, #20]
 80046ca:	9302      	str	r3, [sp, #8]
 80046cc:	9b06      	ldr	r3, [sp, #24]
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	9400      	str	r4, [sp, #0]
 80046d2:	4623      	mov	r3, r4
 80046d4:	9a07      	ldr	r2, [sp, #28]
 80046d6:	491b      	ldr	r1, [pc, #108]	@ (8004744 <vTaskStartScheduler+0x90>)
 80046d8:	481b      	ldr	r0, [pc, #108]	@ (8004748 <vTaskStartScheduler+0x94>)
 80046da:	f7ff ff35 	bl	8004548 <xTaskCreateStatic>
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <vTaskStartScheduler+0x98>)
 80046e0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80046e2:	b1f8      	cbz	r0, 8004724 <vTaskStartScheduler+0x70>
			xReturn = xTimerCreateTimerTask();
 80046e4:	f000 fcf4 	bl	80050d0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80046e8:	2801      	cmp	r0, #1
 80046ea:	d11c      	bne.n	8004726 <vTaskStartScheduler+0x72>
 80046ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046fc:	4b14      	ldr	r3, [pc, #80]	@ (8004750 <vTaskStartScheduler+0x9c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3358      	adds	r3, #88	@ 0x58
 8004702:	4a14      	ldr	r2, [pc, #80]	@ (8004754 <vTaskStartScheduler+0xa0>)
 8004704:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004706:	4b14      	ldr	r3, [pc, #80]	@ (8004758 <vTaskStartScheduler+0xa4>)
 8004708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800470c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800470e:	4b13      	ldr	r3, [pc, #76]	@ (800475c <vTaskStartScheduler+0xa8>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004714:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <vTaskStartScheduler+0xac>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800471a:	f7fc fd41 	bl	80011a0 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800471e:	f000 ff9b 	bl	8005658 <xPortStartScheduler>
 8004722:	e003      	b.n	800472c <vTaskStartScheduler+0x78>
			xReturn = pdFAIL;
 8004724:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004726:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800472a:	d001      	beq.n	8004730 <vTaskStartScheduler+0x7c>
}
 800472c:	b008      	add	sp, #32
 800472e:	bd10      	pop	{r4, pc}
 8004730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004740:	e7fe      	b.n	8004740 <vTaskStartScheduler+0x8c>
 8004742:	bf00      	nop
 8004744:	08008750 	.word	0x08008750
 8004748:	080044a5 	.word	0x080044a5
 800474c:	20000c14 	.word	0x20000c14
 8004750:	2000110c 	.word	0x2000110c
 8004754:	2000001c 	.word	0x2000001c
 8004758:	20000c18 	.word	0x20000c18
 800475c:	20000c2c 	.word	0x20000c2c
 8004760:	20000c34 	.word	0x20000c34

08004764 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004764:	4a02      	ldr	r2, [pc, #8]	@ (8004770 <vTaskSuspendAll+0xc>)
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000c10 	.word	0x20000c10

08004774 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004774:	4b01      	ldr	r3, [pc, #4]	@ (800477c <xTaskGetTickCount+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000c34 	.word	0x20000c34

08004780 <xTaskGetTickCountFromISR>:
{
 8004780:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004782:	f000 fff5 	bl	8005770 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004786:	4b01      	ldr	r3, [pc, #4]	@ (800478c <xTaskGetTickCountFromISR+0xc>)
 8004788:	6818      	ldr	r0, [r3, #0]
}
 800478a:	bd08      	pop	{r3, pc}
 800478c:	20000c34 	.word	0x20000c34

08004790 <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
 8004790:	4b01      	ldr	r3, [pc, #4]	@ (8004798 <uxTaskGetNumberOfTasks+0x8>)
 8004792:	6818      	ldr	r0, [r3, #0]
}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000c38 	.word	0x20000c38

0800479c <xTaskIncrementTick>:
{
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479e:	4b3a      	ldr	r3, [pc, #232]	@ (8004888 <xTaskIncrementTick+0xec>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d169      	bne.n	800487a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <xTaskIncrementTick+0xf0>)
 80047a8:	681d      	ldr	r5, [r3, #0]
 80047aa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80047ac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ae:	b9c5      	cbnz	r5, 80047e2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80047b0:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <xTaskIncrementTick+0xf4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	b143      	cbz	r3, 80047ca <xTaskIncrementTick+0x2e>
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	e7fe      	b.n	80047c8 <xTaskIncrementTick+0x2c>
 80047ca:	4a31      	ldr	r2, [pc, #196]	@ (8004890 <xTaskIncrementTick+0xf4>)
 80047cc:	6811      	ldr	r1, [r2, #0]
 80047ce:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <xTaskIncrementTick+0xf8>)
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	6010      	str	r0, [r2, #0]
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <xTaskIncrementTick+0xfc>)
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	f7ff fd17 	bl	8004210 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047e2:	4b2e      	ldr	r3, [pc, #184]	@ (800489c <xTaskIncrementTick+0x100>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	42ab      	cmp	r3, r5
 80047e8:	d93d      	bls.n	8004866 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80047ea:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ec:	4b2c      	ldr	r3, [pc, #176]	@ (80048a0 <xTaskIncrementTick+0x104>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	4b2a      	ldr	r3, [pc, #168]	@ (80048a4 <xTaskIncrementTick+0x108>)
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d900      	bls.n	8004802 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8004800:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8004802:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <xTaskIncrementTick+0x10c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d03c      	beq.n	8004884 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800480a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800480c:	e03a      	b.n	8004884 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800480e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004810:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <xTaskIncrementTick+0xf4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	b343      	cbz	r3, 800486a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <xTaskIncrementTick+0xf4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004820:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8004822:	429d      	cmp	r5, r3
 8004824:	d326      	bcc.n	8004874 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004826:	1d26      	adds	r6, r4, #4
 8004828:	4630      	mov	r0, r6
 800482a:	f7fe fefd 	bl	8003628 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800482e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004830:	b11b      	cbz	r3, 800483a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004832:	f104 0018 	add.w	r0, r4, #24
 8004836:	f7fe fef7 	bl	8003628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800483a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800483c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <xTaskIncrementTick+0x110>)
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <xTaskIncrementTick+0xac>
 8004844:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <xTaskIncrementTick+0x110>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800484c:	009a      	lsls	r2, r3, #2
 800484e:	4631      	mov	r1, r6
 8004850:	4814      	ldr	r0, [pc, #80]	@ (80048a4 <xTaskIncrementTick+0x108>)
 8004852:	4410      	add	r0, r2
 8004854:	f7fe fec4 	bl	80035e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004858:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800485a:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <xTaskIncrementTick+0x104>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	429a      	cmp	r2, r3
 8004862:	d2d4      	bcs.n	800480e <xTaskIncrementTick+0x72>
 8004864:	e7d4      	b.n	8004810 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8004866:	2700      	movs	r7, #0
 8004868:	e7d2      	b.n	8004810 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486a:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <xTaskIncrementTick+0x100>)
 800486c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004870:	601a      	str	r2, [r3, #0]
					break;
 8004872:	e7bb      	b.n	80047ec <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004874:	4a09      	ldr	r2, [pc, #36]	@ (800489c <xTaskIncrementTick+0x100>)
 8004876:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004878:	e7b8      	b.n	80047ec <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800487a:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <xTaskIncrementTick+0x114>)
 800487c:	6813      	ldr	r3, [r2, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004882:	2700      	movs	r7, #0
}
 8004884:	4638      	mov	r0, r7
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004888:	20000c10 	.word	0x20000c10
 800488c:	20000c34 	.word	0x20000c34
 8004890:	20000c80 	.word	0x20000c80
 8004894:	20000c7c 	.word	0x20000c7c
 8004898:	20000c20 	.word	0x20000c20
 800489c:	20000c18 	.word	0x20000c18
 80048a0:	2000110c 	.word	0x2000110c
 80048a4:	20000cac 	.word	0x20000cac
 80048a8:	20000c24 	.word	0x20000c24
 80048ac:	20000c30 	.word	0x20000c30
 80048b0:	20000c28 	.word	0x20000c28

080048b4 <xTaskResumeAll>:
{
 80048b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80048b6:	4b35      	ldr	r3, [pc, #212]	@ (800498c <xTaskResumeAll+0xd8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b943      	cbnz	r3, 80048ce <xTaskResumeAll+0x1a>
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	e7fe      	b.n	80048cc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80048ce:	f000 fe29 	bl	8005524 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80048d2:	4b2e      	ldr	r3, [pc, #184]	@ (800498c <xTaskResumeAll+0xd8>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	3a01      	subs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d14f      	bne.n	8004980 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004990 <xTaskResumeAll+0xdc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	b90b      	cbnz	r3, 80048ea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80048e6:	2400      	movs	r4, #0
 80048e8:	e04b      	b.n	8004982 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80048ea:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ec:	4b29      	ldr	r3, [pc, #164]	@ (8004994 <xTaskResumeAll+0xe0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	b31b      	cbz	r3, 800493a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f2:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <xTaskResumeAll+0xe0>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f8:	f104 0018 	add.w	r0, r4, #24
 80048fc:	f7fe fe94 	bl	8003628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004900:	1d25      	adds	r5, r4, #4
 8004902:	4628      	mov	r0, r5
 8004904:	f7fe fe90 	bl	8003628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004908:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800490a:	4b23      	ldr	r3, [pc, #140]	@ (8004998 <xTaskResumeAll+0xe4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4298      	cmp	r0, r3
 8004910:	d901      	bls.n	8004916 <xTaskResumeAll+0x62>
 8004912:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <xTaskResumeAll+0xe4>)
 8004914:	6018      	str	r0, [r3, #0]
 8004916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800491a:	4629      	mov	r1, r5
 800491c:	4b1f      	ldr	r3, [pc, #124]	@ (800499c <xTaskResumeAll+0xe8>)
 800491e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004922:	f7fe fe5d 	bl	80035e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004926:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004928:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <xTaskResumeAll+0xec>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	429a      	cmp	r2, r3
 8004930:	d3dc      	bcc.n	80048ec <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8004932:	4b1c      	ldr	r3, [pc, #112]	@ (80049a4 <xTaskResumeAll+0xf0>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e7d8      	b.n	80048ec <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800493a:	b10c      	cbz	r4, 8004940 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800493c:	f7ff fc68 	bl	8004210 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <xTaskResumeAll+0xf4>)
 8004942:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004944:	b984      	cbnz	r4, 8004968 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8004946:	4b17      	ldr	r3, [pc, #92]	@ (80049a4 <xTaskResumeAll+0xf0>)
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	b1d4      	cbz	r4, 8004982 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800494c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004954:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004960:	2401      	movs	r4, #1
 8004962:	e00e      	b.n	8004982 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004964:	3c01      	subs	r4, #1
 8004966:	d007      	beq.n	8004978 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8004968:	f7ff ff18 	bl	800479c <xTaskIncrementTick>
 800496c:	2800      	cmp	r0, #0
 800496e:	d0f9      	beq.n	8004964 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8004970:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <xTaskResumeAll+0xf0>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e7f5      	b.n	8004964 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <xTaskResumeAll+0xf4>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e7e2      	b.n	8004946 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8004980:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004982:	f000 fdf1 	bl	8005568 <vPortExitCritical>
}
 8004986:	4620      	mov	r0, r4
 8004988:	bd38      	pop	{r3, r4, r5, pc}
 800498a:	bf00      	nop
 800498c:	20000c10 	.word	0x20000c10
 8004990:	20000c38 	.word	0x20000c38
 8004994:	20000c68 	.word	0x20000c68
 8004998:	20000c30 	.word	0x20000c30
 800499c:	20000cac 	.word	0x20000cac
 80049a0:	2000110c 	.word	0x2000110c
 80049a4:	20000c24 	.word	0x20000c24
 80049a8:	20000c28 	.word	0x20000c28

080049ac <vTaskDelay>:
	{
 80049ac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049ae:	b1a8      	cbz	r0, 80049dc <vTaskDelay+0x30>
 80049b0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <vTaskDelay+0x48>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b143      	cbz	r3, 80049ca <vTaskDelay+0x1e>
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	e7fe      	b.n	80049c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80049ca:	f7ff fecb 	bl	8004764 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049ce:	2100      	movs	r1, #0
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff fd7b 	bl	80044cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80049d6:	f7ff ff6d 	bl	80048b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80049da:	b948      	cbnz	r0, 80049f0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80049dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80049e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
	}
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	bf00      	nop
 80049f4:	20000c10 	.word	0x20000c10

080049f8 <vTaskSwitchContext>:
{
 80049f8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049fa:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa4 <vTaskSwitchContext+0xac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b11b      	cbz	r3, 8004a08 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004a00:	4b29      	ldr	r3, [pc, #164]	@ (8004aa8 <vTaskSwitchContext+0xb0>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
}
 8004a06:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 8004a08:	4b27      	ldr	r3, [pc, #156]	@ (8004aa8 <vTaskSwitchContext+0xb0>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004a0e:	f7fc fbd3 	bl	80011b8 <getRunTimeCounterValue>
 8004a12:	4b26      	ldr	r3, [pc, #152]	@ (8004aac <vTaskSwitchContext+0xb4>)
 8004a14:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004a16:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <vTaskSwitchContext+0xb8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	d905      	bls.n	8004a2a <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004a1e:	4a25      	ldr	r2, [pc, #148]	@ (8004ab4 <vTaskSwitchContext+0xbc>)
 8004a20:	6811      	ldr	r1, [r2, #0]
 8004a22:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004a24:	1ac3      	subs	r3, r0, r3
 8004a26:	441a      	add	r2, r3
 8004a28:	654a      	str	r2, [r1, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004a2a:	4b21      	ldr	r3, [pc, #132]	@ (8004ab0 <vTaskSwitchContext+0xb8>)
 8004a2c:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2e:	4b22      	ldr	r3, [pc, #136]	@ (8004ab8 <vTaskSwitchContext+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4920      	ldr	r1, [pc, #128]	@ (8004abc <vTaskSwitchContext+0xc4>)
 8004a3a:	588a      	ldr	r2, [r1, r2]
 8004a3c:	b95a      	cbnz	r2, 8004a56 <vTaskSwitchContext+0x5e>
 8004a3e:	b10b      	cbz	r3, 8004a44 <vTaskSwitchContext+0x4c>
 8004a40:	3b01      	subs	r3, #1
 8004a42:	e7f6      	b.n	8004a32 <vTaskSwitchContext+0x3a>
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	e7fe      	b.n	8004a54 <vTaskSwitchContext+0x5c>
 8004a56:	4608      	mov	r0, r1
 8004a58:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004a5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004a60:	6851      	ldr	r1, [r2, #4]
 8004a62:	6849      	ldr	r1, [r1, #4]
 8004a64:	6051      	str	r1, [r2, #4]
 8004a66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	4402      	add	r2, r0
 8004a70:	4291      	cmp	r1, r2
 8004a72:	d00f      	beq.n	8004a94 <vTaskSwitchContext+0x9c>
 8004a74:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004a78:	4a10      	ldr	r2, [pc, #64]	@ (8004abc <vTaskSwitchContext+0xc4>)
 8004a7a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004a7e:	6852      	ldr	r2, [r2, #4]
 8004a80:	68d1      	ldr	r1, [r2, #12]
 8004a82:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab4 <vTaskSwitchContext+0xbc>)
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	490c      	ldr	r1, [pc, #48]	@ (8004ab8 <vTaskSwitchContext+0xc0>)
 8004a88:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	3358      	adds	r3, #88	@ 0x58
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac0 <vTaskSwitchContext+0xc8>)
 8004a90:	6013      	str	r3, [r2, #0]
}
 8004a92:	e7b8      	b.n	8004a06 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a94:	6848      	ldr	r0, [r1, #4]
 8004a96:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <vTaskSwitchContext+0xc4>)
 8004a9c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004aa0:	6050      	str	r0, [r2, #4]
 8004aa2:	e7e7      	b.n	8004a74 <vTaskSwitchContext+0x7c>
 8004aa4:	20000c10 	.word	0x20000c10
 8004aa8:	20000c24 	.word	0x20000c24
 8004aac:	20000c08 	.word	0x20000c08
 8004ab0:	20000c0c 	.word	0x20000c0c
 8004ab4:	2000110c 	.word	0x2000110c
 8004ab8:	20000c30 	.word	0x20000c30
 8004abc:	20000cac 	.word	0x20000cac
 8004ac0:	2000001c 	.word	0x2000001c

08004ac4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004ac4:	b158      	cbz	r0, 8004ade <vTaskPlaceOnEventList+0x1a>
{
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aca:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <vTaskPlaceOnEventList+0x2c>)
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	3118      	adds	r1, #24
 8004ad0:	f7fe fd91 	bl	80035f6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff fcf8 	bl	80044cc <prvAddCurrentTaskToDelayedList>
}
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8004aee:	e7fe      	b.n	8004aee <vTaskPlaceOnEventList+0x2a>
 8004af0:	2000110c 	.word	0x2000110c

08004af4 <vTaskPlaceOnEventListRestricted>:
	{
 8004af4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004af6:	b170      	cbz	r0, 8004b16 <vTaskPlaceOnEventListRestricted+0x22>
 8004af8:	460d      	mov	r5, r1
 8004afa:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004afc:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <vTaskPlaceOnEventListRestricted+0x34>)
 8004afe:	6811      	ldr	r1, [r2, #0]
 8004b00:	3118      	adds	r1, #24
 8004b02:	f7fe fd6d 	bl	80035e0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8004b06:	b10c      	cbz	r4, 8004b0c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8004b08:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f7ff fcdc 	bl	80044cc <prvAddCurrentTaskToDelayedList>
	}
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8004b26:	e7fe      	b.n	8004b26 <vTaskPlaceOnEventListRestricted+0x32>
 8004b28:	2000110c 	.word	0x2000110c

08004b2c <xTaskRemoveFromEventList>:
{
 8004b2c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b2e:	68c3      	ldr	r3, [r0, #12]
 8004b30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004b32:	b324      	cbz	r4, 8004b7e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b34:	f104 0518 	add.w	r5, r4, #24
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f7fe fd75 	bl	8003628 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <xTaskRemoveFromEventList+0x74>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	bb2b      	cbnz	r3, 8004b90 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b44:	1d25      	adds	r5, r4, #4
 8004b46:	4628      	mov	r0, r5
 8004b48:	f7fe fd6e 	bl	8003628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b4c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004b4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <xTaskRemoveFromEventList+0x78>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4298      	cmp	r0, r3
 8004b54:	d901      	bls.n	8004b5a <xTaskRemoveFromEventList+0x2e>
 8004b56:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <xTaskRemoveFromEventList+0x78>)
 8004b58:	6018      	str	r0, [r3, #0]
 8004b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <xTaskRemoveFromEventList+0x7c>)
 8004b62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b66:	f7fe fd3b 	bl	80035e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <xTaskRemoveFromEventList+0x80>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d911      	bls.n	8004b9a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8004b76:	2001      	movs	r0, #1
 8004b78:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <xTaskRemoveFromEventList+0x84>)
 8004b7a:	6018      	str	r0, [r3, #0]
}
 8004b7c:	bd38      	pop	{r3, r4, r5, pc}
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8004b8e:	e7fe      	b.n	8004b8e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b90:	4629      	mov	r1, r5
 8004b92:	4808      	ldr	r0, [pc, #32]	@ (8004bb4 <xTaskRemoveFromEventList+0x88>)
 8004b94:	f7fe fd24 	bl	80035e0 <vListInsertEnd>
 8004b98:	e7e7      	b.n	8004b6a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8004b9a:	2000      	movs	r0, #0
	return xReturn;
 8004b9c:	e7ee      	b.n	8004b7c <xTaskRemoveFromEventList+0x50>
 8004b9e:	bf00      	nop
 8004ba0:	20000c10 	.word	0x20000c10
 8004ba4:	20000c30 	.word	0x20000c30
 8004ba8:	20000cac 	.word	0x20000cac
 8004bac:	2000110c 	.word	0x2000110c
 8004bb0:	20000c24 	.word	0x20000c24
 8004bb4:	20000c68 	.word	0x20000c68

08004bb8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	@ (8004bc8 <vTaskInternalSetTimeOutState+0x10>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bbe:	4b03      	ldr	r3, [pc, #12]	@ (8004bcc <vTaskInternalSetTimeOutState+0x14>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6043      	str	r3, [r0, #4]
}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000c20 	.word	0x20000c20
 8004bcc:	20000c34 	.word	0x20000c34

08004bd0 <xTaskCheckForTimeOut>:
{
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004bd2:	b1c8      	cbz	r0, 8004c08 <xTaskCheckForTimeOut+0x38>
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004bd8:	b1f9      	cbz	r1, 8004c1a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8004bda:	f000 fca3 	bl	8005524 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004bde:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <xTaskCheckForTimeOut+0x7c>)
 8004be0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004be2:	686b      	ldr	r3, [r5, #4]
 8004be4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8004bec:	d026      	beq.n	8004c3c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bee:	4e18      	ldr	r6, [pc, #96]	@ (8004c50 <xTaskCheckForTimeOut+0x80>)
 8004bf0:	6836      	ldr	r6, [r6, #0]
 8004bf2:	682f      	ldr	r7, [r5, #0]
 8004bf4:	42b7      	cmp	r7, r6
 8004bf6:	d001      	beq.n	8004bfc <xTaskCheckForTimeOut+0x2c>
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	d924      	bls.n	8004c46 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bfc:	4282      	cmp	r2, r0
 8004bfe:	d815      	bhi.n	8004c2c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004c04:	2401      	movs	r4, #1
 8004c06:	e01a      	b.n	8004c3e <xTaskCheckForTimeOut+0x6e>
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8004c18:	e7fe      	b.n	8004c18 <xTaskCheckForTimeOut+0x48>
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8004c2a:	e7fe      	b.n	8004c2a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8004c2c:	1a5b      	subs	r3, r3, r1
 8004c2e:	4413      	add	r3, r2
 8004c30:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c32:	4628      	mov	r0, r5
 8004c34:	f7ff ffc0 	bl	8004bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c38:	2400      	movs	r4, #0
 8004c3a:	e000      	b.n	8004c3e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8004c3c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004c3e:	f000 fc93 	bl	8005568 <vPortExitCritical>
}
 8004c42:	4620      	mov	r0, r4
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8004c46:	2401      	movs	r4, #1
 8004c48:	e7f9      	b.n	8004c3e <xTaskCheckForTimeOut+0x6e>
 8004c4a:	bf00      	nop
 8004c4c:	20000c34 	.word	0x20000c34
 8004c50:	20000c20 	.word	0x20000c20

08004c54 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004c54:	4b01      	ldr	r3, [pc, #4]	@ (8004c5c <vTaskMissedYield+0x8>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
}
 8004c5a:	4770      	bx	lr
 8004c5c:	20000c24 	.word	0x20000c24

08004c60 <vTaskGetInfo>:
	{
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460c      	mov	r4, r1
 8004c64:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 8004c66:	4605      	mov	r5, r0
 8004c68:	b1d0      	cbz	r0, 8004ca0 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004c6a:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004c6c:	f105 0234 	add.w	r2, r5, #52	@ 0x34
 8004c70:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004c72:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8004c74:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004c76:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8004c78:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004c7a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8004c7c:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004c7e:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8004c80:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8004c82:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8004c84:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d019      	beq.n	8004cbe <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 8004c8a:	4a12      	ldr	r2, [pc, #72]	@ (8004cd4 <vTaskGetInfo+0x74>)
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	42aa      	cmp	r2, r5
 8004c90:	d009      	beq.n	8004ca6 <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 8004c92:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d009      	beq.n	8004cac <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 8004c98:	b9b6      	cbnz	r6, 8004cc8 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	8423      	strh	r3, [r4, #32]
	}
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd4 <vTaskGetInfo+0x74>)
 8004ca2:	6815      	ldr	r5, [r2, #0]
 8004ca4:	e7e1      	b.n	8004c6a <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	7323      	strb	r3, [r4, #12]
 8004caa:	e7f5      	b.n	8004c98 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 8004cac:	f7ff fd5a 	bl	8004764 <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cb0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004cb2:	b10b      	cbz	r3, 8004cb8 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 8004cb8:	f7ff fdfc 	bl	80048b4 <xTaskResumeAll>
 8004cbc:	e7ec      	b.n	8004c98 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7ff fcb0 	bl	8004624 <eTaskGetState>
 8004cc4:	7320      	strb	r0, [r4, #12]
 8004cc6:	e7e7      	b.n	8004c98 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004cc8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8004cca:	f7ff fa96 	bl	80041fa <prvTaskCheckFreeStackSpace>
 8004cce:	8420      	strh	r0, [r4, #32]
 8004cd0:	e7e5      	b.n	8004c9e <vTaskGetInfo+0x3e>
 8004cd2:	bf00      	nop
 8004cd4:	2000110c 	.word	0x2000110c

08004cd8 <prvListTasksWithinSingleList>:
	{
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004cdc:	680c      	ldr	r4, [r1, #0]
 8004cde:	b33c      	cbz	r4, 8004d30 <prvListTasksWithinSingleList+0x58>
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	4690      	mov	r8, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce6:	684b      	ldr	r3, [r1, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	604b      	str	r3, [r1, #4]
 8004cec:	f101 0908 	add.w	r9, r1, #8
 8004cf0:	454b      	cmp	r3, r9
 8004cf2:	d004      	beq.n	8004cfe <prvListTasksWithinSingleList+0x26>
 8004cf4:	686b      	ldr	r3, [r5, #4]
 8004cf6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 8004cfa:	2400      	movs	r4, #0
 8004cfc:	e010      	b.n	8004d20 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	604b      	str	r3, [r1, #4]
 8004d02:	e7f7      	b.n	8004cf4 <prvListTasksWithinSingleList+0x1c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d04:	686b      	ldr	r3, [r5, #4]
 8004d06:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004d08:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	2201      	movs	r2, #1
 8004d10:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8004d14:	4630      	mov	r0, r6
 8004d16:	f7ff ffa3 	bl	8004c60 <vTaskGetInfo>
				uxTask++;
 8004d1a:	3401      	adds	r4, #1
			} while( pxNextTCB != pxFirstTCB );
 8004d1c:	45b2      	cmp	sl, r6
 8004d1e:	d007      	beq.n	8004d30 <prvListTasksWithinSingleList+0x58>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d20:	686b      	ldr	r3, [r5, #4]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	6069      	str	r1, [r5, #4]
 8004d26:	4589      	cmp	r9, r1
 8004d28:	d1ec      	bne.n	8004d04 <prvListTasksWithinSingleList+0x2c>
 8004d2a:	684b      	ldr	r3, [r1, #4]
 8004d2c:	606b      	str	r3, [r5, #4]
 8004d2e:	e7e9      	b.n	8004d04 <prvListTasksWithinSingleList+0x2c>
	}
 8004d30:	4620      	mov	r0, r4
 8004d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004d38 <uxTaskGetSystemState>:
	{
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	4616      	mov	r6, r2
		vTaskSuspendAll();
 8004d40:	f7ff fd10 	bl	8004764 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004d44:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <uxTaskGetSystemState+0x98>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d83c      	bhi.n	8004dc6 <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004d4c:	2438      	movs	r4, #56	@ 0x38
 8004d4e:	2500      	movs	r5, #0
					uxQueue--;
 8004d50:	3c01      	subs	r4, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004d52:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8004d56:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <uxTaskGetSystemState+0x9c>)
 8004d5e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004d62:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004d66:	f7ff ffb7 	bl	8004cd8 <prvListTasksWithinSingleList>
 8004d6a:	4405      	add	r5, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d1ef      	bne.n	8004d50 <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004d70:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8004d74:	4b18      	ldr	r3, [pc, #96]	@ (8004dd8 <uxTaskGetSystemState+0xa0>)
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004d7e:	f7ff ffab 	bl	8004cd8 <prvListTasksWithinSingleList>
 8004d82:	4405      	add	r5, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004d84:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8004d88:	4b14      	ldr	r3, [pc, #80]	@ (8004ddc <uxTaskGetSystemState+0xa4>)
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004d92:	f7ff ffa1 	bl	8004cd8 <prvListTasksWithinSingleList>
 8004d96:	4405      	add	r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004d98:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	4910      	ldr	r1, [pc, #64]	@ (8004de0 <uxTaskGetSystemState+0xa8>)
 8004da0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004da4:	f7ff ff98 	bl	8004cd8 <prvListTasksWithinSingleList>
 8004da8:	182c      	adds	r4, r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8004daa:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8004dae:	2203      	movs	r2, #3
 8004db0:	490c      	ldr	r1, [pc, #48]	@ (8004de4 <uxTaskGetSystemState+0xac>)
 8004db2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004db6:	f7ff ff8f 	bl	8004cd8 <prvListTasksWithinSingleList>
 8004dba:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8004dbc:	b126      	cbz	r6, 8004dc8 <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004dbe:	f7fc f9fb 	bl	80011b8 <getRunTimeCounterValue>
 8004dc2:	6030      	str	r0, [r6, #0]
 8004dc4:	e000      	b.n	8004dc8 <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004dc6:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 8004dc8:	f7ff fd74 	bl	80048b4 <xTaskResumeAll>
	}
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd0:	20000c38 	.word	0x20000c38
 8004dd4:	20000cac 	.word	0x20000cac
 8004dd8:	20000c80 	.word	0x20000c80
 8004ddc:	20000c7c 	.word	0x20000c7c
 8004de0:	20000c54 	.word	0x20000c54
 8004de4:	20000c3c 	.word	0x20000c3c

08004de8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8004de8:	4b01      	ldr	r3, [pc, #4]	@ (8004df0 <xTaskGetCurrentTaskHandle+0x8>)
 8004dea:	6818      	ldr	r0, [r3, #0]
	}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	2000110c 	.word	0x2000110c

08004df4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004df4:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <xTaskGetSchedulerState+0x18>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	b133      	cbz	r3, 8004e08 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <xTaskGetSchedulerState+0x1c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	b10b      	cbz	r3, 8004e04 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e00:	2000      	movs	r0, #0
	}
 8004e02:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8004e04:	2002      	movs	r0, #2
 8004e06:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e08:	2001      	movs	r0, #1
 8004e0a:	4770      	bx	lr
 8004e0c:	20000c2c 	.word	0x20000c2c
 8004e10:	20000c10 	.word	0x20000c10

08004e14 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d03e      	beq.n	8004e96 <xTaskPriorityInherit+0x82>
	{
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e1c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004e1e:	4a20      	ldr	r2, [pc, #128]	@ (8004ea0 <xTaskPriorityInherit+0x8c>)
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d22e      	bcs.n	8004e86 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e28:	6982      	ldr	r2, [r0, #24]
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	db05      	blt.n	8004e3a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea0 <xTaskPriorityInherit+0x8c>)
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e34:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004e38:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e3a:	6961      	ldr	r1, [r4, #20]
 8004e3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e40:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <xTaskPriorityInherit+0x90>)
 8004e42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d005      	beq.n	8004e56 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ea0 <xTaskPriorityInherit+0x8c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8004e52:	2001      	movs	r0, #1
	}
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e56:	1d25      	adds	r5, r4, #4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7fe fbe5 	bl	8003628 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <xTaskPriorityInherit+0x8c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004e64:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e66:	4b10      	ldr	r3, [pc, #64]	@ (8004ea8 <xTaskPriorityInherit+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	d901      	bls.n	8004e72 <xTaskPriorityInherit+0x5e>
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <xTaskPriorityInherit+0x94>)
 8004e70:	6018      	str	r0, [r3, #0]
 8004e72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e76:	4629      	mov	r1, r5
 8004e78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <xTaskPriorityInherit+0x90>)
 8004e7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004e7e:	f7fe fbaf 	bl	80035e0 <vListInsertEnd>
				xReturn = pdTRUE;
 8004e82:	2001      	movs	r0, #1
 8004e84:	e7e6      	b.n	8004e54 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e86:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004e88:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <xTaskPriorityInherit+0x8c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d303      	bcc.n	8004e9a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8004e92:	2000      	movs	r0, #0
 8004e94:	e7de      	b.n	8004e54 <xTaskPriorityInherit+0x40>
 8004e96:	2000      	movs	r0, #0
	}
 8004e98:	4770      	bx	lr
					xReturn = pdTRUE;
 8004e9a:	2001      	movs	r0, #1
		return xReturn;
 8004e9c:	e7da      	b.n	8004e54 <xTaskPriorityInherit+0x40>
 8004e9e:	bf00      	nop
 8004ea0:	2000110c 	.word	0x2000110c
 8004ea4:	20000cac 	.word	0x20000cac
 8004ea8:	20000c30 	.word	0x20000c30

08004eac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d03b      	beq.n	8004f28 <xTaskPriorityDisinherit+0x7c>
	{
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <xTaskPriorityDisinherit+0x84>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	d008      	beq.n	8004ece <xTaskPriorityDisinherit+0x22>
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	e7fe      	b.n	8004ecc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ece:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004ed0:	b943      	cbnz	r3, 8004ee4 <xTaskPriorityDisinherit+0x38>
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ee8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004eea:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004eec:	4291      	cmp	r1, r2
 8004eee:	d01d      	beq.n	8004f2c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ef0:	b10b      	cbz	r3, 8004ef6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8004ef2:	2000      	movs	r0, #0
	}
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef6:	1d05      	adds	r5, r0, #4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7fe fb95 	bl	8003628 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004efe:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004f00:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f02:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8004f06:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f08:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <xTaskPriorityDisinherit+0x88>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	d901      	bls.n	8004f14 <xTaskPriorityDisinherit+0x68>
 8004f10:	4b08      	ldr	r3, [pc, #32]	@ (8004f34 <xTaskPriorityDisinherit+0x88>)
 8004f12:	6018      	str	r0, [r3, #0]
 8004f14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <xTaskPriorityDisinherit+0x8c>)
 8004f1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004f20:	f7fe fb5e 	bl	80035e0 <vListInsertEnd>
					xReturn = pdTRUE;
 8004f24:	2001      	movs	r0, #1
 8004f26:	e7e5      	b.n	8004ef4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8004f28:	2000      	movs	r0, #0
	}
 8004f2a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e7e1      	b.n	8004ef4 <xTaskPriorityDisinherit+0x48>
 8004f30:	2000110c 	.word	0x2000110c
 8004f34:	20000c30 	.word	0x20000c30
 8004f38:	20000cac 	.word	0x20000cac

08004f3c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d046      	beq.n	8004fce <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8004f44:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004f46:	b943      	cbnz	r3, 8004f5a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	e7fe      	b.n	8004f58 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f5a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004f5c:	428a      	cmp	r2, r1
 8004f5e:	d200      	bcs.n	8004f62 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f60:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f64:	4291      	cmp	r1, r2
 8004f66:	d001      	beq.n	8004f6c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d000      	beq.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8004f6c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8004f6e:	4b18      	ldr	r3, [pc, #96]	@ (8004fd0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	d022      	beq.n	8004fbc <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8004f76:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f78:	69a3      	ldr	r3, [r4, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	db02      	blt.n	8004f84 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7e:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004f82:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f84:	6962      	ldr	r2, [r4, #20]
 8004f86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004f8a:	4b12      	ldr	r3, [pc, #72]	@ (8004fd4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8004f8c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1eb      	bne.n	8004f6c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f94:	1d25      	adds	r5, r4, #4
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7fe fb46 	bl	8003628 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8004f9c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4298      	cmp	r0, r3
 8004fa4:	d901      	bls.n	8004faa <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8004fa8:	6018      	str	r0, [r3, #0]
 8004faa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4b08      	ldr	r3, [pc, #32]	@ (8004fd4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8004fb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004fb6:	f7fe fb13 	bl	80035e0 <vListInsertEnd>
	}
 8004fba:	e7d7      	b.n	8004f6c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8004fcc:	e7fe      	b.n	8004fcc <vTaskPriorityDisinheritAfterTimeout+0x90>
 8004fce:	4770      	bx	lr
 8004fd0:	2000110c 	.word	0x2000110c
 8004fd4:	20000cac 	.word	0x20000cac
 8004fd8:	20000c30 	.word	0x20000c30

08004fdc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <pvTaskIncrementMutexHeldCount+0x18>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	b123      	cbz	r3, 8004fec <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004fe2:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <pvTaskIncrementMutexHeldCount+0x18>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004fe8:	3301      	adds	r3, #1
 8004fea:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8004fec:	4b01      	ldr	r3, [pc, #4]	@ (8004ff4 <pvTaskIncrementMutexHeldCount+0x18>)
 8004fee:	6818      	ldr	r0, [r3, #0]
	}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000110c 	.word	0x2000110c

08004ff8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <prvGetNextExpireTime+0x1c>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	b92b      	cbnz	r3, 800500c <prvGetNextExpireTime+0x14>
 8005000:	2301      	movs	r3, #1
 8005002:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005004:	b923      	cbnz	r3, 8005010 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005006:	68d3      	ldr	r3, [r2, #12]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800500c:	2300      	movs	r3, #0
 800500e:	e7f8      	b.n	8005002 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005010:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8005012:	4770      	bx	lr
 8005014:	20001210 	.word	0x20001210

08005018 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005018:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800501a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800501c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800501e:	4291      	cmp	r1, r2
 8005020:	d80c      	bhi.n	800503c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	6983      	ldr	r3, [r0, #24]
 8005026:	429a      	cmp	r2, r3
 8005028:	d301      	bcc.n	800502e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800502a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800502c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800502e:	1d01      	adds	r1, r0, #4
 8005030:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <prvInsertTimerInActiveList+0x40>)
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	f7fe fadf 	bl	80035f6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005038:	2000      	movs	r0, #0
 800503a:	e7f7      	b.n	800502c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800503c:	429a      	cmp	r2, r3
 800503e:	d201      	bcs.n	8005044 <prvInsertTimerInActiveList+0x2c>
 8005040:	4299      	cmp	r1, r3
 8005042:	d206      	bcs.n	8005052 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005044:	1d01      	adds	r1, r0, #4
 8005046:	4b05      	ldr	r3, [pc, #20]	@ (800505c <prvInsertTimerInActiveList+0x44>)
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f7fe fad4 	bl	80035f6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800504e:	2000      	movs	r0, #0
 8005050:	e7ec      	b.n	800502c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8005052:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005054:	e7ea      	b.n	800502c <prvInsertTimerInActiveList+0x14>
 8005056:	bf00      	nop
 8005058:	2000120c 	.word	0x2000120c
 800505c:	20001210 	.word	0x20001210

08005060 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005060:	b530      	push	{r4, r5, lr}
 8005062:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005064:	f000 fa5e 	bl	8005524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005068:	4b11      	ldr	r3, [pc, #68]	@ (80050b0 <prvCheckForValidListAndQueue+0x50>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b11b      	cbz	r3, 8005076 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506e:	f000 fa7b 	bl	8005568 <vPortExitCritical>
}
 8005072:	b003      	add	sp, #12
 8005074:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8005076:	4d0f      	ldr	r5, [pc, #60]	@ (80050b4 <prvCheckForValidListAndQueue+0x54>)
 8005078:	4628      	mov	r0, r5
 800507a:	f7fe faa3 	bl	80035c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800507e:	4c0e      	ldr	r4, [pc, #56]	@ (80050b8 <prvCheckForValidListAndQueue+0x58>)
 8005080:	4620      	mov	r0, r4
 8005082:	f7fe fa9f 	bl	80035c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <prvCheckForValidListAndQueue+0x5c>)
 8005088:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <prvCheckForValidListAndQueue+0x60>)
 800508c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800508e:	2300      	movs	r3, #0
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <prvCheckForValidListAndQueue+0x64>)
 8005094:	4a0c      	ldr	r2, [pc, #48]	@ (80050c8 <prvCheckForValidListAndQueue+0x68>)
 8005096:	2110      	movs	r1, #16
 8005098:	200a      	movs	r0, #10
 800509a:	f7fe fbd3 	bl	8003844 <xQueueGenericCreateStatic>
 800509e:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <prvCheckForValidListAndQueue+0x50>)
 80050a0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d0e3      	beq.n	800506e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050a6:	4909      	ldr	r1, [pc, #36]	@ (80050cc <prvCheckForValidListAndQueue+0x6c>)
 80050a8:	f7ff f83e 	bl	8004128 <vQueueAddToRegistry>
 80050ac:	e7df      	b.n	800506e <prvCheckForValidListAndQueue+0xe>
 80050ae:	bf00      	nop
 80050b0:	20001208 	.word	0x20001208
 80050b4:	20001228 	.word	0x20001228
 80050b8:	20001214 	.word	0x20001214
 80050bc:	20001210 	.word	0x20001210
 80050c0:	2000120c 	.word	0x2000120c
 80050c4:	20001110 	.word	0x20001110
 80050c8:	20001160 	.word	0x20001160
 80050cc:	08008758 	.word	0x08008758

080050d0 <xTimerCreateTimerTask>:
{
 80050d0:	b510      	push	{r4, lr}
 80050d2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80050d4:	f7ff ffc4 	bl	8005060 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <xTimerCreateTimerTask+0x54>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b1cb      	cbz	r3, 8005112 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050de:	2400      	movs	r4, #0
 80050e0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050e2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050e4:	aa07      	add	r2, sp, #28
 80050e6:	a906      	add	r1, sp, #24
 80050e8:	a805      	add	r0, sp, #20
 80050ea:	f7fe fa5f 	bl	80035ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050ee:	9b05      	ldr	r3, [sp, #20]
 80050f0:	9302      	str	r3, [sp, #8]
 80050f2:	9b06      	ldr	r3, [sp, #24]
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	2302      	movs	r3, #2
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4623      	mov	r3, r4
 80050fc:	9a07      	ldr	r2, [sp, #28]
 80050fe:	490a      	ldr	r1, [pc, #40]	@ (8005128 <xTimerCreateTimerTask+0x58>)
 8005100:	480a      	ldr	r0, [pc, #40]	@ (800512c <xTimerCreateTimerTask+0x5c>)
 8005102:	f7ff fa21 	bl	8004548 <xTaskCreateStatic>
 8005106:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <xTimerCreateTimerTask+0x60>)
 8005108:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800510a:	b110      	cbz	r0, 8005112 <xTimerCreateTimerTask+0x42>
}
 800510c:	2001      	movs	r0, #1
 800510e:	b008      	add	sp, #32
 8005110:	bd10      	pop	{r4, pc}
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005122:	e7fe      	b.n	8005122 <xTimerCreateTimerTask+0x52>
 8005124:	20001208 	.word	0x20001208
 8005128:	08008760 	.word	0x08008760
 800512c:	08005435 	.word	0x08005435
 8005130:	20001204 	.word	0x20001204

08005134 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005134:	b1b8      	cbz	r0, 8005166 <xTimerGenericCommand+0x32>
 8005136:	469c      	mov	ip, r3
 8005138:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800513a:	4818      	ldr	r0, [pc, #96]	@ (800519c <xTimerGenericCommand+0x68>)
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	b358      	cbz	r0, 8005198 <xTimerGenericCommand+0x64>
{
 8005140:	b500      	push	{lr}
 8005142:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8005144:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005146:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005148:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800514a:	2905      	cmp	r1, #5
 800514c:	dc1c      	bgt.n	8005188 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800514e:	f7ff fe51 	bl	8004df4 <xTaskGetSchedulerState>
 8005152:	2802      	cmp	r0, #2
 8005154:	d010      	beq.n	8005178 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005156:	2300      	movs	r3, #0
 8005158:	461a      	mov	r2, r3
 800515a:	4669      	mov	r1, sp
 800515c:	480f      	ldr	r0, [pc, #60]	@ (800519c <xTimerGenericCommand+0x68>)
 800515e:	6800      	ldr	r0, [r0, #0]
 8005160:	f7fe fc1f 	bl	80039a2 <xQueueGenericSend>
 8005164:	e015      	b.n	8005192 <xTimerGenericCommand+0x5e>
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005176:	e7fe      	b.n	8005176 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005178:	2300      	movs	r3, #0
 800517a:	9a06      	ldr	r2, [sp, #24]
 800517c:	4669      	mov	r1, sp
 800517e:	4807      	ldr	r0, [pc, #28]	@ (800519c <xTimerGenericCommand+0x68>)
 8005180:	6800      	ldr	r0, [r0, #0]
 8005182:	f7fe fc0e 	bl	80039a2 <xQueueGenericSend>
 8005186:	e004      	b.n	8005192 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005188:	2300      	movs	r3, #0
 800518a:	4662      	mov	r2, ip
 800518c:	4669      	mov	r1, sp
 800518e:	f7fe fd12 	bl	8003bb6 <xQueueGenericSendFromISR>
}
 8005192:	b005      	add	sp, #20
 8005194:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8005198:	2000      	movs	r0, #0
}
 800519a:	4770      	bx	lr
 800519c:	20001208 	.word	0x20001208

080051a0 <prvSwitchTimerLists>:
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <prvSwitchTimerLists+0x74>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	b362      	cbz	r2, 8005206 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051b2:	1d25      	adds	r5, r4, #4
 80051b4:	4628      	mov	r0, r5
 80051b6:	f7fe fa37 	bl	8003628 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051ba:	6a23      	ldr	r3, [r4, #32]
 80051bc:	4620      	mov	r0, r4
 80051be:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051c0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80051c4:	f013 0f04 	tst.w	r3, #4
 80051c8:	d0ec      	beq.n	80051a4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051ca:	69a3      	ldr	r3, [r4, #24]
 80051cc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80051ce:	429e      	cmp	r6, r3
 80051d0:	d207      	bcs.n	80051e2 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051d2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051d4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051d6:	4629      	mov	r1, r5
 80051d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <prvSwitchTimerLists+0x74>)
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	f7fe fa0b 	bl	80035f6 <vListInsert>
 80051e0:	e7e0      	b.n	80051a4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051e2:	2100      	movs	r1, #0
 80051e4:	9100      	str	r1, [sp, #0]
 80051e6:	460b      	mov	r3, r1
 80051e8:	4632      	mov	r2, r6
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff ffa2 	bl	8005134 <xTimerGenericCommand>
				configASSERT( xResult );
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1d7      	bne.n	80051a4 <prvSwitchTimerLists+0x4>
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	e7fe      	b.n	8005204 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8005206:	4a04      	ldr	r2, [pc, #16]	@ (8005218 <prvSwitchTimerLists+0x78>)
 8005208:	6810      	ldr	r0, [r2, #0]
 800520a:	4902      	ldr	r1, [pc, #8]	@ (8005214 <prvSwitchTimerLists+0x74>)
 800520c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	b002      	add	sp, #8
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	20001210 	.word	0x20001210
 8005218:	2000120c 	.word	0x2000120c

0800521c <prvSampleTimeNow>:
{
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8005220:	f7ff faa8 	bl	8004774 <xTaskGetTickCount>
 8005224:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8005226:	4b07      	ldr	r3, [pc, #28]	@ (8005244 <prvSampleTimeNow+0x28>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4283      	cmp	r3, r0
 800522c:	d805      	bhi.n	800523a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8005232:	4b04      	ldr	r3, [pc, #16]	@ (8005244 <prvSampleTimeNow+0x28>)
 8005234:	601c      	str	r4, [r3, #0]
}
 8005236:	4620      	mov	r0, r4
 8005238:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800523a:	f7ff ffb1 	bl	80051a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800523e:	2301      	movs	r3, #1
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	e7f6      	b.n	8005232 <prvSampleTimeNow+0x16>
 8005244:	20001200 	.word	0x20001200

08005248 <prvProcessExpiredTimer>:
{
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	4606      	mov	r6, r0
 800524e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005250:	4917      	ldr	r1, [pc, #92]	@ (80052b0 <prvProcessExpiredTimer+0x68>)
 8005252:	6809      	ldr	r1, [r1, #0]
 8005254:	68c9      	ldr	r1, [r1, #12]
 8005256:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005258:	1d20      	adds	r0, r4, #4
 800525a:	f7fe f9e5 	bl	8003628 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800525e:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8005262:	f01c 0f04 	tst.w	ip, #4
 8005266:	d108      	bne.n	800527a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005268:	f02c 0c01 	bic.w	ip, ip, #1
 800526c:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005270:	6a23      	ldr	r3, [r4, #32]
 8005272:	4620      	mov	r0, r4
 8005274:	4798      	blx	r3
}
 8005276:	b002      	add	sp, #8
 8005278:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800527a:	69a1      	ldr	r1, [r4, #24]
 800527c:	4633      	mov	r3, r6
 800527e:	462a      	mov	r2, r5
 8005280:	4431      	add	r1, r6
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff fec8 	bl	8005018 <prvInsertTimerInActiveList>
 8005288:	2800      	cmp	r0, #0
 800528a:	d0f1      	beq.n	8005270 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800528c:	2100      	movs	r1, #0
 800528e:	9100      	str	r1, [sp, #0]
 8005290:	460b      	mov	r3, r1
 8005292:	4632      	mov	r2, r6
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff ff4d 	bl	8005134 <xTimerGenericCommand>
			configASSERT( xResult );
 800529a:	2800      	cmp	r0, #0
 800529c:	d1e8      	bne.n	8005270 <prvProcessExpiredTimer+0x28>
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	e7fe      	b.n	80052ae <prvProcessExpiredTimer+0x66>
 80052b0:	20001210 	.word	0x20001210

080052b4 <prvProcessTimerOrBlockTask>:
{
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	4606      	mov	r6, r0
 80052ba:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80052bc:	f7ff fa52 	bl	8004764 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052c0:	a801      	add	r0, sp, #4
 80052c2:	f7ff ffab 	bl	800521c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80052c6:	9b01      	ldr	r3, [sp, #4]
 80052c8:	bb33      	cbnz	r3, 8005318 <prvProcessTimerOrBlockTask+0x64>
 80052ca:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052cc:	b9e4      	cbnz	r4, 8005308 <prvProcessTimerOrBlockTask+0x54>
 80052ce:	42b0      	cmp	r0, r6
 80052d0:	d213      	bcs.n	80052fa <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052d2:	4622      	mov	r2, r4
 80052d4:	1b71      	subs	r1, r6, r5
 80052d6:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <prvProcessTimerOrBlockTask+0x6c>)
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f7fe ff65 	bl	80041a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052de:	f7ff fae9 	bl	80048b4 <xTaskResumeAll>
 80052e2:	b9d8      	cbnz	r0, 800531c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 80052e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80052e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	e010      	b.n	800531c <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 80052fa:	f7ff fadb 	bl	80048b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052fe:	4629      	mov	r1, r5
 8005300:	4630      	mov	r0, r6
 8005302:	f7ff ffa1 	bl	8005248 <prvProcessExpiredTimer>
 8005306:	e009      	b.n	800531c <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005308:	4a06      	ldr	r2, [pc, #24]	@ (8005324 <prvProcessTimerOrBlockTask+0x70>)
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	b90a      	cbnz	r2, 8005314 <prvProcessTimerOrBlockTask+0x60>
 8005310:	2401      	movs	r4, #1
 8005312:	e7de      	b.n	80052d2 <prvProcessTimerOrBlockTask+0x1e>
 8005314:	461c      	mov	r4, r3
 8005316:	e7dc      	b.n	80052d2 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8005318:	f7ff facc 	bl	80048b4 <xTaskResumeAll>
}
 800531c:	b002      	add	sp, #8
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	20001208 	.word	0x20001208
 8005324:	2000120c 	.word	0x2000120c

08005328 <prvProcessReceivedCommands>:
{
 8005328:	b510      	push	{r4, lr}
 800532a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800532c:	e002      	b.n	8005334 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800532e:	9b04      	ldr	r3, [sp, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	da0f      	bge.n	8005354 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005334:	2200      	movs	r2, #0
 8005336:	a904      	add	r1, sp, #16
 8005338:	4b3d      	ldr	r3, [pc, #244]	@ (8005430 <prvProcessReceivedCommands+0x108>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	f7fe fcfb 	bl	8003d36 <xQueueReceive>
 8005340:	2800      	cmp	r0, #0
 8005342:	d073      	beq.n	800542c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005344:	9b04      	ldr	r3, [sp, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	daf1      	bge.n	800532e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800534a:	9907      	ldr	r1, [sp, #28]
 800534c:	9806      	ldr	r0, [sp, #24]
 800534e:	9b05      	ldr	r3, [sp, #20]
 8005350:	4798      	blx	r3
 8005352:	e7ec      	b.n	800532e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005354:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005356:	6963      	ldr	r3, [r4, #20]
 8005358:	b113      	cbz	r3, 8005360 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800535a:	1d20      	adds	r0, r4, #4
 800535c:	f7fe f964 	bl	8003628 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005360:	a803      	add	r0, sp, #12
 8005362:	f7ff ff5b 	bl	800521c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8005366:	9b04      	ldr	r3, [sp, #16]
 8005368:	2b09      	cmp	r3, #9
 800536a:	d8e3      	bhi.n	8005334 <prvProcessReceivedCommands+0xc>
 800536c:	e8df f003 	tbb	[pc, r3]
 8005370:	30050505 	.word	0x30050505
 8005374:	05055037 	.word	0x05055037
 8005378:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800537a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005386:	9b05      	ldr	r3, [sp, #20]
 8005388:	69a1      	ldr	r1, [r4, #24]
 800538a:	4602      	mov	r2, r0
 800538c:	4419      	add	r1, r3
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff fe42 	bl	8005018 <prvInsertTimerInActiveList>
 8005394:	2800      	cmp	r0, #0
 8005396:	d0cd      	beq.n	8005334 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005398:	6a23      	ldr	r3, [r4, #32]
 800539a:	4620      	mov	r0, r4
 800539c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800539e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80053a2:	f013 0f04 	tst.w	r3, #4
 80053a6:	d0c5      	beq.n	8005334 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053a8:	69a2      	ldr	r2, [r4, #24]
 80053aa:	2100      	movs	r1, #0
 80053ac:	9100      	str	r1, [sp, #0]
 80053ae:	460b      	mov	r3, r1
 80053b0:	9805      	ldr	r0, [sp, #20]
 80053b2:	4402      	add	r2, r0
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7ff febd 	bl	8005134 <xTimerGenericCommand>
							configASSERT( xResult );
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d1ba      	bne.n	8005334 <prvProcessReceivedCommands+0xc>
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	e7fe      	b.n	80053ce <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053d0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 80053dc:	e7aa      	b.n	8005334 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053ea:	9905      	ldr	r1, [sp, #20]
 80053ec:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053ee:	b131      	cbz	r1, 80053fe <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053f0:	4603      	mov	r3, r0
 80053f2:	4602      	mov	r2, r0
 80053f4:	4401      	add	r1, r0
 80053f6:	4620      	mov	r0, r4
 80053f8:	f7ff fe0e 	bl	8005018 <prvInsertTimerInActiveList>
					break;
 80053fc:	e79a      	b.n	8005334 <prvProcessReceivedCommands+0xc>
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800540e:	e7fe      	b.n	800540e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005410:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005414:	f013 0f02 	tst.w	r3, #2
 8005418:	d004      	beq.n	8005424 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005422:	e787      	b.n	8005334 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8005424:	4620      	mov	r0, r4
 8005426:	f000 fab7 	bl	8005998 <vPortFree>
 800542a:	e783      	b.n	8005334 <prvProcessReceivedCommands+0xc>
}
 800542c:	b008      	add	sp, #32
 800542e:	bd10      	pop	{r4, pc}
 8005430:	20001208 	.word	0x20001208

08005434 <prvTimerTask>:
{
 8005434:	b500      	push	{lr}
 8005436:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005438:	a801      	add	r0, sp, #4
 800543a:	f7ff fddd 	bl	8004ff8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800543e:	9901      	ldr	r1, [sp, #4]
 8005440:	f7ff ff38 	bl	80052b4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8005444:	f7ff ff70 	bl	8005328 <prvProcessReceivedCommands>
	for( ;; )
 8005448:	e7f6      	b.n	8005438 <prvTimerTask+0x4>
	...

0800544c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800544c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005452:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <prvTaskExitError+0x3c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800545a:	d008      	beq.n	800546e <prvTaskExitError+0x22>
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	e7fe      	b.n	800546c <prvTaskExitError+0x20>
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800547e:	9b01      	ldr	r3, [sp, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0fc      	beq.n	800547e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005484:	b002      	add	sp, #8
 8005486:	4770      	bx	lr
 8005488:	2000000c 	.word	0x2000000c

0800548c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800548c:	4808      	ldr	r0, [pc, #32]	@ (80054b0 <prvPortStartFirstTask+0x24>)
 800548e:	6800      	ldr	r0, [r0, #0]
 8005490:	6800      	ldr	r0, [r0, #0]
 8005492:	f380 8808 	msr	MSP, r0
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	f380 8814 	msr	CONTROL, r0
 800549e:	b662      	cpsie	i
 80054a0:	b661      	cpsie	f
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	df00      	svc	0
 80054ac:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ae:	0000      	.short	0x0000
 80054b0:	e000ed08 	.word	0xe000ed08

080054b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054c4 <vPortEnableVFP+0x10>
 80054b8:	6801      	ldr	r1, [r0, #0]
 80054ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054be:	6001      	str	r1, [r0, #0]
 80054c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054c2:	0000      	.short	0x0000
 80054c4:	e000ed88 	.word	0xe000ed88

080054c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054d0:	f021 0101 	bic.w	r1, r1, #1
 80054d4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054d8:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <pxPortInitialiseStack+0x28>)
 80054da:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054de:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054e2:	f06f 0302 	mvn.w	r3, #2
 80054e6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80054ea:	3844      	subs	r0, #68	@ 0x44
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	0800544d 	.word	0x0800544d
	...

08005500 <SVC_Handler>:
	__asm volatile (
 8005500:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <pxCurrentTCBConst2>)
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	6808      	ldr	r0, [r1, #0]
 8005506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	f380 8809 	msr	PSP, r0
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	4770      	bx	lr
 800551c:	f3af 8000 	nop.w

08005520 <pxCurrentTCBConst2>:
 8005520:	2000110c 	.word	0x2000110c

08005524 <vPortEnterCritical>:
 8005524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005534:	4a0b      	ldr	r2, [pc, #44]	@ (8005564 <vPortEnterCritical+0x40>)
 8005536:	6813      	ldr	r3, [r2, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800553c:	2b01      	cmp	r3, #1
 800553e:	d000      	beq.n	8005542 <vPortEnterCritical+0x1e>
}
 8005540:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005542:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005546:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800554a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800554e:	d0f7      	beq.n	8005540 <vPortEnterCritical+0x1c>
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	e7fe      	b.n	8005560 <vPortEnterCritical+0x3c>
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c

08005568 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005568:	4b09      	ldr	r3, [pc, #36]	@ (8005590 <vPortExitCritical+0x28>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	b943      	cbnz	r3, 8005580 <vPortExitCritical+0x18>
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	e7fe      	b.n	800557e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005580:	3b01      	subs	r3, #1
 8005582:	4a03      	ldr	r2, [pc, #12]	@ (8005590 <vPortExitCritical+0x28>)
 8005584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005586:	b90b      	cbnz	r3, 800558c <vPortExitCritical+0x24>
	__asm volatile
 8005588:	f383 8811 	msr	BASEPRI, r3
}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	2000000c 	.word	0x2000000c
	...

080055a0 <PendSV_Handler>:
	__asm volatile
 80055a0:	f3ef 8009 	mrs	r0, PSP
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4b15      	ldr	r3, [pc, #84]	@ (8005600 <pxCurrentTCBConst>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f01e 0f10 	tst.w	lr, #16
 80055b0:	bf08      	it	eq
 80055b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055c4:	f380 8811 	msr	BASEPRI, r0
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f7ff fa12 	bl	80049f8 <vTaskSwitchContext>
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f380 8811 	msr	BASEPRI, r0
 80055dc:	bc09      	pop	{r0, r3}
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e6:	f01e 0f10 	tst.w	lr, #16
 80055ea:	bf08      	it	eq
 80055ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055f0:	f380 8809 	msr	PSP, r0
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w

08005600 <pxCurrentTCBConst>:
 8005600:	2000110c 	.word	0x2000110c

08005604 <xPortSysTickHandler>:
{
 8005604:	b508      	push	{r3, lr}
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005616:	f7ff f8c1 	bl	800479c <xTaskIncrementTick>
 800561a:	b128      	cbz	r0, 8005628 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005624:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8005628:	2300      	movs	r3, #0
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bd08      	pop	{r3, pc}

08005630 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005630:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005634:	2300      	movs	r3, #0
 8005636:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005638:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800563a:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <vPortSetupTimerInterrupt+0x20>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4905      	ldr	r1, [pc, #20]	@ (8005654 <vPortSetupTimerInterrupt+0x24>)
 8005640:	fba1 1303 	umull	r1, r3, r1, r3
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	3b01      	subs	r3, #1
 8005648:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800564a:	2307      	movs	r3, #7
 800564c:	6113      	str	r3, [r2, #16]
}
 800564e:	4770      	bx	lr
 8005650:	20000000 	.word	0x20000000
 8005654:	10624dd3 	.word	0x10624dd3

08005658 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005658:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800565c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8005660:	4b3d      	ldr	r3, [pc, #244]	@ (8005758 <xPortStartScheduler+0x100>)
 8005662:	429a      	cmp	r2, r3
 8005664:	d01c      	beq.n	80056a0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005666:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800566a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800566e:	4b3b      	ldr	r3, [pc, #236]	@ (800575c <xPortStartScheduler+0x104>)
 8005670:	429a      	cmp	r2, r3
 8005672:	d01e      	beq.n	80056b2 <xPortStartScheduler+0x5a>
{
 8005674:	b530      	push	{r4, r5, lr}
 8005676:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005678:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <xPortStartScheduler+0x108>)
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005680:	22ff      	movs	r2, #255	@ 0xff
 8005682:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800568c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005690:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005694:	4a33      	ldr	r2, [pc, #204]	@ (8005764 <xPortStartScheduler+0x10c>)
 8005696:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005698:	4b33      	ldr	r3, [pc, #204]	@ (8005768 <xPortStartScheduler+0x110>)
 800569a:	2207      	movs	r2, #7
 800569c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800569e:	e01b      	b.n	80056d8 <xPortStartScheduler+0x80>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056b0:	e7fe      	b.n	80056b0 <xPortStartScheduler+0x58>
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056c2:	e7fe      	b.n	80056c2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80056c4:	4a28      	ldr	r2, [pc, #160]	@ (8005768 <xPortStartScheduler+0x110>)
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056e0:	d1f0      	bne.n	80056c4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056e2:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <xPortStartScheduler+0x110>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d008      	beq.n	80056fc <xPortStartScheduler+0xa4>
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	e7fe      	b.n	80056fa <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005768 <xPortStartScheduler+0x110>)
 8005700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005702:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005706:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4a14      	ldr	r2, [pc, #80]	@ (8005760 <xPortStartScheduler+0x108>)
 800570e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005710:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8005714:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800571c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005720:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005724:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005728:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800572c:	f7ff ff80 	bl	8005630 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005730:	2500      	movs	r5, #0
 8005732:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <xPortStartScheduler+0x114>)
 8005734:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005736:	f7ff febd 	bl	80054b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800573a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800573e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005742:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8005746:	f7ff fea1 	bl	800548c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800574a:	f7ff f955 	bl	80049f8 <vTaskSwitchContext>
	prvTaskExitError();
 800574e:	f7ff fe7d 	bl	800544c <prvTaskExitError>
}
 8005752:	4628      	mov	r0, r5
 8005754:	b003      	add	sp, #12
 8005756:	bd30      	pop	{r4, r5, pc}
 8005758:	410fc271 	.word	0x410fc271
 800575c:	410fc270 	.word	0x410fc270
 8005760:	e000e400 	.word	0xe000e400
 8005764:	20001240 	.word	0x20001240
 8005768:	2000123c 	.word	0x2000123c
 800576c:	2000000c 	.word	0x2000000c

08005770 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005770:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005774:	2b0f      	cmp	r3, #15
 8005776:	d90f      	bls.n	8005798 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005778:	4a11      	ldr	r2, [pc, #68]	@ (80057c0 <vPortValidateInterruptPriority+0x50>)
 800577a:	5c9b      	ldrb	r3, [r3, r2]
 800577c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800577e:	4a11      	ldr	r2, [pc, #68]	@ (80057c4 <vPortValidateInterruptPriority+0x54>)
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d908      	bls.n	8005798 <vPortValidateInterruptPriority+0x28>
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	e7fe      	b.n	8005796 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005798:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800579c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80057a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057a4:	4a08      	ldr	r2, [pc, #32]	@ (80057c8 <vPortValidateInterruptPriority+0x58>)
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d908      	bls.n	80057be <vPortValidateInterruptPriority+0x4e>
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	e7fe      	b.n	80057bc <vPortValidateInterruptPriority+0x4c>
	}
 80057be:	4770      	bx	lr
 80057c0:	e000e3f0 	.word	0xe000e3f0
 80057c4:	20001240 	.word	0x20001240
 80057c8:	2000123c 	.word	0x2000123c

080057cc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057cc:	4a12      	ldr	r2, [pc, #72]	@ (8005818 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057ce:	f012 0f07 	tst.w	r2, #7
 80057d2:	d01e      	beq.n	8005812 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057d4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057da:	f5c1 3380 	rsb	r3, r1, #65536	@ 0x10000
 80057de:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057e0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057e2:	480e      	ldr	r0, [pc, #56]	@ (800581c <prvHeapInit+0x50>)
 80057e4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057e6:	2100      	movs	r1, #0
 80057e8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80057ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ee:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80057f2:	480b      	ldr	r0, [pc, #44]	@ (8005820 <prvHeapInit+0x54>)
 80057f4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80057f6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057f8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057fa:	1a99      	subs	r1, r3, r2
 80057fc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057fe:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <prvHeapInit+0x58>)
 8005802:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005804:	4b08      	ldr	r3, [pc, #32]	@ (8005828 <prvHeapInit+0x5c>)
 8005806:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005808:	4b08      	ldr	r3, [pc, #32]	@ (800582c <prvHeapInit+0x60>)
 800580a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005816:	e7e4      	b.n	80057e2 <prvHeapInit+0x16>
 8005818:	10000000 	.word	0x10000000
 800581c:	2000125c 	.word	0x2000125c
 8005820:	20001258 	.word	0x20001258
 8005824:	20001250 	.word	0x20001250
 8005828:	20001254 	.word	0x20001254
 800582c:	20001244 	.word	0x20001244

08005830 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005830:	4b16      	ldr	r3, [pc, #88]	@ (800588c <prvInsertBlockIntoFreeList+0x5c>)
 8005832:	461a      	mov	r2, r3
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4283      	cmp	r3, r0
 8005838:	d3fb      	bcc.n	8005832 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583a:	6851      	ldr	r1, [r2, #4]
 800583c:	eb02 0c01 	add.w	ip, r2, r1
 8005840:	4584      	cmp	ip, r0
 8005842:	d009      	beq.n	8005858 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005844:	6841      	ldr	r1, [r0, #4]
 8005846:	eb00 0c01 	add.w	ip, r0, r1
 800584a:	4563      	cmp	r3, ip
 800584c:	d009      	beq.n	8005862 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800584e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005850:	4290      	cmp	r0, r2
 8005852:	d019      	beq.n	8005888 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005854:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005856:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005858:	6840      	ldr	r0, [r0, #4]
 800585a:	4401      	add	r1, r0
 800585c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800585e:	4610      	mov	r0, r2
 8005860:	e7f0      	b.n	8005844 <prvInsertBlockIntoFreeList+0x14>
{
 8005862:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005864:	4c0a      	ldr	r4, [pc, #40]	@ (8005890 <prvInsertBlockIntoFreeList+0x60>)
 8005866:	6824      	ldr	r4, [r4, #0]
 8005868:	42a3      	cmp	r3, r4
 800586a:	d00b      	beq.n	8005884 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4419      	add	r1, r3
 8005870:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005872:	6813      	ldr	r3, [r2, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005878:	4290      	cmp	r0, r2
 800587a:	d000      	beq.n	800587e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800587c:	6010      	str	r0, [r2, #0]
	}
}
 800587e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005882:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005884:	6004      	str	r4, [r0, #0]
 8005886:	e7f7      	b.n	8005878 <prvInsertBlockIntoFreeList+0x48>
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	2000125c 	.word	0x2000125c
 8005890:	20001258 	.word	0x20001258

08005894 <pvPortMalloc>:
{
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005898:	f7fe ff64 	bl	8004764 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800589c:	4b38      	ldr	r3, [pc, #224]	@ (8005980 <pvPortMalloc+0xec>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	b1b3      	cbz	r3, 80058d0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058a2:	4b38      	ldr	r3, [pc, #224]	@ (8005984 <pvPortMalloc+0xf0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	421c      	tst	r4, r3
 80058a8:	d150      	bne.n	800594c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	d050      	beq.n	8005950 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80058ae:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058b2:	f014 0f07 	tst.w	r4, #7
 80058b6:	d002      	beq.n	80058be <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058b8:	f022 0207 	bic.w	r2, r2, #7
 80058bc:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d055      	beq.n	800596e <pvPortMalloc+0xda>
 80058c2:	4b31      	ldr	r3, [pc, #196]	@ (8005988 <pvPortMalloc+0xf4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d353      	bcc.n	8005972 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80058ca:	4930      	ldr	r1, [pc, #192]	@ (800598c <pvPortMalloc+0xf8>)
 80058cc:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ce:	e004      	b.n	80058da <pvPortMalloc+0x46>
			prvHeapInit();
 80058d0:	f7ff ff7c 	bl	80057cc <prvHeapInit>
 80058d4:	e7e5      	b.n	80058a2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80058d6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80058d8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	4293      	cmp	r3, r2
 80058de:	d202      	bcs.n	80058e6 <pvPortMalloc+0x52>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f7      	bne.n	80058d6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80058e6:	4b26      	ldr	r3, [pc, #152]	@ (8005980 <pvPortMalloc+0xec>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	d043      	beq.n	8005976 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ee:	680d      	ldr	r5, [r1, #0]
 80058f0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d910      	bls.n	8005920 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058fe:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005900:	f010 0f07 	tst.w	r0, #7
 8005904:	d008      	beq.n	8005918 <pvPortMalloc+0x84>
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	e7fe      	b.n	8005916 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005918:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800591a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800591c:	f7ff ff88 	bl	8005830 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	4919      	ldr	r1, [pc, #100]	@ (8005988 <pvPortMalloc+0xf4>)
 8005924:	680b      	ldr	r3, [r1, #0]
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800592a:	4919      	ldr	r1, [pc, #100]	@ (8005990 <pvPortMalloc+0xfc>)
 800592c:	6809      	ldr	r1, [r1, #0]
 800592e:	428b      	cmp	r3, r1
 8005930:	d201      	bcs.n	8005936 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005932:	4917      	ldr	r1, [pc, #92]	@ (8005990 <pvPortMalloc+0xfc>)
 8005934:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005936:	4b13      	ldr	r3, [pc, #76]	@ (8005984 <pvPortMalloc+0xf0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4313      	orrs	r3, r2
 800593c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005942:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <pvPortMalloc+0x100>)
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e002      	b.n	8005952 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800594c:	2500      	movs	r5, #0
 800594e:	e000      	b.n	8005952 <pvPortMalloc+0xbe>
 8005950:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8005952:	f7fe ffaf 	bl	80048b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005956:	f015 0f07 	tst.w	r5, #7
 800595a:	d00e      	beq.n	800597a <pvPortMalloc+0xe6>
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	e7fe      	b.n	800596c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800596e:	2500      	movs	r5, #0
 8005970:	e7ef      	b.n	8005952 <pvPortMalloc+0xbe>
 8005972:	2500      	movs	r5, #0
 8005974:	e7ed      	b.n	8005952 <pvPortMalloc+0xbe>
 8005976:	2500      	movs	r5, #0
 8005978:	e7eb      	b.n	8005952 <pvPortMalloc+0xbe>
}
 800597a:	4628      	mov	r0, r5
 800597c:	bd38      	pop	{r3, r4, r5, pc}
 800597e:	bf00      	nop
 8005980:	20001258 	.word	0x20001258
 8005984:	20001244 	.word	0x20001244
 8005988:	20001254 	.word	0x20001254
 800598c:	2000125c 	.word	0x2000125c
 8005990:	20001250 	.word	0x20001250
 8005994:	2000124c 	.word	0x2000124c

08005998 <vPortFree>:
	if( pv != NULL )
 8005998:	2800      	cmp	r0, #0
 800599a:	d034      	beq.n	8005a06 <vPortFree+0x6e>
{
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80059a0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80059a8:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <vPortFree+0x70>)
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	4213      	tst	r3, r2
 80059ae:	d108      	bne.n	80059c2 <vPortFree+0x2a>
 80059b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	e7fe      	b.n	80059c0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059c2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80059c6:	b141      	cbz	r1, 80059da <vPortFree+0x42>
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	e7fe      	b.n	80059d8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059da:	ea23 0302 	bic.w	r3, r3, r2
 80059de:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80059e2:	f7fe febf 	bl	8004764 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059e6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80059ea:	4a08      	ldr	r2, [pc, #32]	@ (8005a0c <vPortFree+0x74>)
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	440b      	add	r3, r1
 80059f0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7ff ff1c 	bl	8005830 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059f8:	4a05      	ldr	r2, [pc, #20]	@ (8005a10 <vPortFree+0x78>)
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005a00:	f7fe ff58 	bl	80048b4 <xTaskResumeAll>
}
 8005a04:	bd38      	pop	{r3, r4, r5, pc}
 8005a06:	4770      	bx	lr
 8005a08:	20001244 	.word	0x20001244
 8005a0c:	20001254 	.word	0x20001254
 8005a10:	20001248 	.word	0x20001248

08005a14 <__cvt>:
 8005a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	ec57 6b10 	vmov	r6, r7, d0
 8005a1c:	2f00      	cmp	r7, #0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4619      	mov	r1, r3
 8005a22:	463b      	mov	r3, r7
 8005a24:	bfbb      	ittet	lt
 8005a26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a2a:	461f      	movlt	r7, r3
 8005a2c:	2300      	movge	r3, #0
 8005a2e:	232d      	movlt	r3, #45	@ 0x2d
 8005a30:	700b      	strb	r3, [r1, #0]
 8005a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a38:	4691      	mov	r9, r2
 8005a3a:	f023 0820 	bic.w	r8, r3, #32
 8005a3e:	bfbc      	itt	lt
 8005a40:	4632      	movlt	r2, r6
 8005a42:	4616      	movlt	r6, r2
 8005a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a48:	d005      	beq.n	8005a56 <__cvt+0x42>
 8005a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a4e:	d100      	bne.n	8005a52 <__cvt+0x3e>
 8005a50:	3401      	adds	r4, #1
 8005a52:	2102      	movs	r1, #2
 8005a54:	e000      	b.n	8005a58 <__cvt+0x44>
 8005a56:	2103      	movs	r1, #3
 8005a58:	ab03      	add	r3, sp, #12
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	ab02      	add	r3, sp, #8
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	ec47 6b10 	vmov	d0, r6, r7
 8005a64:	4653      	mov	r3, sl
 8005a66:	4622      	mov	r2, r4
 8005a68:	f000 ffa2 	bl	80069b0 <_dtoa_r>
 8005a6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a70:	4605      	mov	r5, r0
 8005a72:	d119      	bne.n	8005aa8 <__cvt+0x94>
 8005a74:	f019 0f01 	tst.w	r9, #1
 8005a78:	d00e      	beq.n	8005a98 <__cvt+0x84>
 8005a7a:	eb00 0904 	add.w	r9, r0, r4
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2300      	movs	r3, #0
 8005a82:	4630      	mov	r0, r6
 8005a84:	4639      	mov	r1, r7
 8005a86:	f7fb f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a8a:	b108      	cbz	r0, 8005a90 <__cvt+0x7c>
 8005a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a90:	2230      	movs	r2, #48	@ 0x30
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	454b      	cmp	r3, r9
 8005a96:	d31e      	bcc.n	8005ad6 <__cvt+0xc2>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a9c:	1b5b      	subs	r3, r3, r5
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	b004      	add	sp, #16
 8005aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aac:	eb00 0904 	add.w	r9, r0, r4
 8005ab0:	d1e5      	bne.n	8005a7e <__cvt+0x6a>
 8005ab2:	7803      	ldrb	r3, [r0, #0]
 8005ab4:	2b30      	cmp	r3, #48	@ 0x30
 8005ab6:	d10a      	bne.n	8005ace <__cvt+0xba>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2300      	movs	r3, #0
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fb f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ac4:	b918      	cbnz	r0, 8005ace <__cvt+0xba>
 8005ac6:	f1c4 0401 	rsb	r4, r4, #1
 8005aca:	f8ca 4000 	str.w	r4, [sl]
 8005ace:	f8da 3000 	ldr.w	r3, [sl]
 8005ad2:	4499      	add	r9, r3
 8005ad4:	e7d3      	b.n	8005a7e <__cvt+0x6a>
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	9103      	str	r1, [sp, #12]
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	e7d9      	b.n	8005a92 <__cvt+0x7e>

08005ade <__exponent>:
 8005ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	bfba      	itte	lt
 8005ae4:	4249      	neglt	r1, r1
 8005ae6:	232d      	movlt	r3, #45	@ 0x2d
 8005ae8:	232b      	movge	r3, #43	@ 0x2b
 8005aea:	2909      	cmp	r1, #9
 8005aec:	7002      	strb	r2, [r0, #0]
 8005aee:	7043      	strb	r3, [r0, #1]
 8005af0:	dd29      	ble.n	8005b46 <__exponent+0x68>
 8005af2:	f10d 0307 	add.w	r3, sp, #7
 8005af6:	461d      	mov	r5, r3
 8005af8:	270a      	movs	r7, #10
 8005afa:	461a      	mov	r2, r3
 8005afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b00:	fb07 1416 	mls	r4, r7, r6, r1
 8005b04:	3430      	adds	r4, #48	@ 0x30
 8005b06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	2c63      	cmp	r4, #99	@ 0x63
 8005b0e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005b12:	4631      	mov	r1, r6
 8005b14:	dcf1      	bgt.n	8005afa <__exponent+0x1c>
 8005b16:	3130      	adds	r1, #48	@ 0x30
 8005b18:	1e94      	subs	r4, r2, #2
 8005b1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b1e:	1c41      	adds	r1, r0, #1
 8005b20:	4623      	mov	r3, r4
 8005b22:	42ab      	cmp	r3, r5
 8005b24:	d30a      	bcc.n	8005b3c <__exponent+0x5e>
 8005b26:	f10d 0309 	add.w	r3, sp, #9
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	42ac      	cmp	r4, r5
 8005b2e:	bf88      	it	hi
 8005b30:	2300      	movhi	r3, #0
 8005b32:	3302      	adds	r3, #2
 8005b34:	4403      	add	r3, r0
 8005b36:	1a18      	subs	r0, r3, r0
 8005b38:	b003      	add	sp, #12
 8005b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b44:	e7ed      	b.n	8005b22 <__exponent+0x44>
 8005b46:	2330      	movs	r3, #48	@ 0x30
 8005b48:	3130      	adds	r1, #48	@ 0x30
 8005b4a:	7083      	strb	r3, [r0, #2]
 8005b4c:	70c1      	strb	r1, [r0, #3]
 8005b4e:	1d03      	adds	r3, r0, #4
 8005b50:	e7f1      	b.n	8005b36 <__exponent+0x58>
	...

08005b54 <_printf_float>:
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	b08d      	sub	sp, #52	@ 0x34
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b60:	4616      	mov	r6, r2
 8005b62:	461f      	mov	r7, r3
 8005b64:	4605      	mov	r5, r0
 8005b66:	f000 fdbf 	bl	80066e8 <_localeconv_r>
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fa fb7e 	bl	8000270 <strlen>
 8005b74:	2300      	movs	r3, #0
 8005b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b78:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7c:	9005      	str	r0, [sp, #20]
 8005b7e:	3307      	adds	r3, #7
 8005b80:	f023 0307 	bic.w	r3, r3, #7
 8005b84:	f103 0208 	add.w	r2, r3, #8
 8005b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005b90:	f8c8 2000 	str.w	r2, [r8]
 8005b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b9c:	9307      	str	r3, [sp, #28]
 8005b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005baa:	4b9c      	ldr	r3, [pc, #624]	@ (8005e1c <_printf_float+0x2c8>)
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bb0:	f7fa ffbc 	bl	8000b2c <__aeabi_dcmpun>
 8005bb4:	bb70      	cbnz	r0, 8005c14 <_printf_float+0xc0>
 8005bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bba:	4b98      	ldr	r3, [pc, #608]	@ (8005e1c <_printf_float+0x2c8>)
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bc0:	f7fa ff96 	bl	8000af0 <__aeabi_dcmple>
 8005bc4:	bb30      	cbnz	r0, 8005c14 <_printf_float+0xc0>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa ff85 	bl	8000adc <__aeabi_dcmplt>
 8005bd2:	b110      	cbz	r0, 8005bda <_printf_float+0x86>
 8005bd4:	232d      	movs	r3, #45	@ 0x2d
 8005bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bda:	4a91      	ldr	r2, [pc, #580]	@ (8005e20 <_printf_float+0x2cc>)
 8005bdc:	4b91      	ldr	r3, [pc, #580]	@ (8005e24 <_printf_float+0x2d0>)
 8005bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005be2:	bf94      	ite	ls
 8005be4:	4690      	movls	r8, r2
 8005be6:	4698      	movhi	r8, r3
 8005be8:	2303      	movs	r3, #3
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	f02b 0304 	bic.w	r3, fp, #4
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	f04f 0900 	mov.w	r9, #0
 8005bf6:	9700      	str	r7, [sp, #0]
 8005bf8:	4633      	mov	r3, r6
 8005bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f9d2 	bl	8005fa8 <_printf_common>
 8005c04:	3001      	adds	r0, #1
 8005c06:	f040 808d 	bne.w	8005d24 <_printf_float+0x1d0>
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c0e:	b00d      	add	sp, #52	@ 0x34
 8005c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	f7fa ff86 	bl	8000b2c <__aeabi_dcmpun>
 8005c20:	b140      	cbz	r0, 8005c34 <_printf_float+0xe0>
 8005c22:	464b      	mov	r3, r9
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfbc      	itt	lt
 8005c28:	232d      	movlt	r3, #45	@ 0x2d
 8005c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e28 <_printf_float+0x2d4>)
 8005c30:	4b7e      	ldr	r3, [pc, #504]	@ (8005e2c <_printf_float+0x2d8>)
 8005c32:	e7d4      	b.n	8005bde <_printf_float+0x8a>
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c3a:	9206      	str	r2, [sp, #24]
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	d13b      	bne.n	8005cb8 <_printf_float+0x164>
 8005c40:	2306      	movs	r3, #6
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6022      	str	r2, [r4, #0]
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c54:	ab09      	add	r3, sp, #36	@ 0x24
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	6861      	ldr	r1, [r4, #4]
 8005c5a:	ec49 8b10 	vmov	d0, r8, r9
 8005c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7ff fed6 	bl	8005a14 <__cvt>
 8005c68:	9b06      	ldr	r3, [sp, #24]
 8005c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c6c:	2b47      	cmp	r3, #71	@ 0x47
 8005c6e:	4680      	mov	r8, r0
 8005c70:	d129      	bne.n	8005cc6 <_printf_float+0x172>
 8005c72:	1cc8      	adds	r0, r1, #3
 8005c74:	db02      	blt.n	8005c7c <_printf_float+0x128>
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	dd41      	ble.n	8005d00 <_printf_float+0x1ac>
 8005c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c80:	fa5f fa8a 	uxtb.w	sl, sl
 8005c84:	3901      	subs	r1, #1
 8005c86:	4652      	mov	r2, sl
 8005c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c8e:	f7ff ff26 	bl	8005ade <__exponent>
 8005c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c94:	1813      	adds	r3, r2, r0
 8005c96:	2a01      	cmp	r2, #1
 8005c98:	4681      	mov	r9, r0
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	dc02      	bgt.n	8005ca4 <_printf_float+0x150>
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	07d2      	lsls	r2, r2, #31
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_float+0x154>
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0a2      	beq.n	8005bf6 <_printf_float+0xa2>
 8005cb0:	232d      	movs	r3, #45	@ 0x2d
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb6:	e79e      	b.n	8005bf6 <_printf_float+0xa2>
 8005cb8:	9a06      	ldr	r2, [sp, #24]
 8005cba:	2a47      	cmp	r2, #71	@ 0x47
 8005cbc:	d1c2      	bne.n	8005c44 <_printf_float+0xf0>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1c0      	bne.n	8005c44 <_printf_float+0xf0>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7bd      	b.n	8005c42 <_printf_float+0xee>
 8005cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cca:	d9db      	bls.n	8005c84 <_printf_float+0x130>
 8005ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cd0:	d118      	bne.n	8005d04 <_printf_float+0x1b0>
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	dd0b      	ble.n	8005cf0 <_printf_float+0x19c>
 8005cd8:	6121      	str	r1, [r4, #16]
 8005cda:	b913      	cbnz	r3, 8005ce2 <_printf_float+0x18e>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	07d0      	lsls	r0, r2, #31
 8005ce0:	d502      	bpl.n	8005ce8 <_printf_float+0x194>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	440b      	add	r3, r1
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cea:	f04f 0900 	mov.w	r9, #0
 8005cee:	e7db      	b.n	8005ca8 <_printf_float+0x154>
 8005cf0:	b913      	cbnz	r3, 8005cf8 <_printf_float+0x1a4>
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	07d2      	lsls	r2, r2, #31
 8005cf6:	d501      	bpl.n	8005cfc <_printf_float+0x1a8>
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	e7f4      	b.n	8005ce6 <_printf_float+0x192>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e7f2      	b.n	8005ce6 <_printf_float+0x192>
 8005d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d06:	4299      	cmp	r1, r3
 8005d08:	db05      	blt.n	8005d16 <_printf_float+0x1c2>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	6121      	str	r1, [r4, #16]
 8005d0e:	07d8      	lsls	r0, r3, #31
 8005d10:	d5ea      	bpl.n	8005ce8 <_printf_float+0x194>
 8005d12:	1c4b      	adds	r3, r1, #1
 8005d14:	e7e7      	b.n	8005ce6 <_printf_float+0x192>
 8005d16:	2900      	cmp	r1, #0
 8005d18:	bfd4      	ite	le
 8005d1a:	f1c1 0202 	rsble	r2, r1, #2
 8005d1e:	2201      	movgt	r2, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	e7e0      	b.n	8005ce6 <_printf_float+0x192>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	055a      	lsls	r2, r3, #21
 8005d28:	d407      	bmi.n	8005d3a <_printf_float+0x1e6>
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	d12b      	bne.n	8005d90 <_printf_float+0x23c>
 8005d38:	e767      	b.n	8005c0a <_printf_float+0xb6>
 8005d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d3e:	f240 80dd 	bls.w	8005efc <_printf_float+0x3a8>
 8005d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f7fa febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d033      	beq.n	8005dba <_printf_float+0x266>
 8005d52:	4a37      	ldr	r2, [pc, #220]	@ (8005e30 <_printf_float+0x2dc>)
 8005d54:	2301      	movs	r3, #1
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f af54 	beq.w	8005c0a <_printf_float+0xb6>
 8005d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d66:	4543      	cmp	r3, r8
 8005d68:	db02      	blt.n	8005d70 <_printf_float+0x21c>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	07d8      	lsls	r0, r3, #31
 8005d6e:	d50f      	bpl.n	8005d90 <_printf_float+0x23c>
 8005d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af45 	beq.w	8005c0a <_printf_float+0xb6>
 8005d80:	f04f 0900 	mov.w	r9, #0
 8005d84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005d88:	f104 0a1a 	add.w	sl, r4, #26
 8005d8c:	45c8      	cmp	r8, r9
 8005d8e:	dc09      	bgt.n	8005da4 <_printf_float+0x250>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	f100 8103 	bmi.w	8005f9e <_printf_float+0x44a>
 8005d98:	68e0      	ldr	r0, [r4, #12]
 8005d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d9c:	4298      	cmp	r0, r3
 8005d9e:	bfb8      	it	lt
 8005da0:	4618      	movlt	r0, r3
 8005da2:	e734      	b.n	8005c0e <_printf_float+0xba>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4652      	mov	r2, sl
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f af2b 	beq.w	8005c0a <_printf_float+0xb6>
 8005db4:	f109 0901 	add.w	r9, r9, #1
 8005db8:	e7e8      	b.n	8005d8c <_printf_float+0x238>
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dc39      	bgt.n	8005e34 <_printf_float+0x2e0>
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <_printf_float+0x2dc>)
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af1d 	beq.w	8005c0a <_printf_float+0xb6>
 8005dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8005dd8:	d102      	bne.n	8005de0 <_printf_float+0x28c>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	07d9      	lsls	r1, r3, #31
 8005dde:	d5d7      	bpl.n	8005d90 <_printf_float+0x23c>
 8005de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af0d 	beq.w	8005c0a <_printf_float+0xb6>
 8005df0:	f04f 0a00 	mov.w	sl, #0
 8005df4:	f104 0b1a 	add.w	fp, r4, #26
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	425b      	negs	r3, r3
 8005dfc:	4553      	cmp	r3, sl
 8005dfe:	dc01      	bgt.n	8005e04 <_printf_float+0x2b0>
 8005e00:	464b      	mov	r3, r9
 8005e02:	e793      	b.n	8005d2c <_printf_float+0x1d8>
 8005e04:	2301      	movs	r3, #1
 8005e06:	465a      	mov	r2, fp
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f aefb 	beq.w	8005c0a <_printf_float+0xb6>
 8005e14:	f10a 0a01 	add.w	sl, sl, #1
 8005e18:	e7ee      	b.n	8005df8 <_printf_float+0x2a4>
 8005e1a:	bf00      	nop
 8005e1c:	7fefffff 	.word	0x7fefffff
 8005e20:	08008768 	.word	0x08008768
 8005e24:	0800876c 	.word	0x0800876c
 8005e28:	08008770 	.word	0x08008770
 8005e2c:	08008774 	.word	0x08008774
 8005e30:	08008778 	.word	0x08008778
 8005e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e3a:	4553      	cmp	r3, sl
 8005e3c:	bfa8      	it	ge
 8005e3e:	4653      	movge	r3, sl
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	4699      	mov	r9, r3
 8005e44:	dc36      	bgt.n	8005eb4 <_printf_float+0x360>
 8005e46:	f04f 0b00 	mov.w	fp, #0
 8005e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e4e:	f104 021a 	add.w	r2, r4, #26
 8005e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e54:	9306      	str	r3, [sp, #24]
 8005e56:	eba3 0309 	sub.w	r3, r3, r9
 8005e5a:	455b      	cmp	r3, fp
 8005e5c:	dc31      	bgt.n	8005ec2 <_printf_float+0x36e>
 8005e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e60:	459a      	cmp	sl, r3
 8005e62:	dc3a      	bgt.n	8005eda <_printf_float+0x386>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07da      	lsls	r2, r3, #31
 8005e68:	d437      	bmi.n	8005eda <_printf_float+0x386>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e70:	9b06      	ldr	r3, [sp, #24]
 8005e72:	ebaa 0303 	sub.w	r3, sl, r3
 8005e76:	4599      	cmp	r9, r3
 8005e78:	bfa8      	it	ge
 8005e7a:	4699      	movge	r9, r3
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc33      	bgt.n	8005eea <_printf_float+0x396>
 8005e82:	f04f 0800 	mov.w	r8, #0
 8005e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e8a:	f104 0b1a 	add.w	fp, r4, #26
 8005e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e90:	ebaa 0303 	sub.w	r3, sl, r3
 8005e94:	eba3 0309 	sub.w	r3, r3, r9
 8005e98:	4543      	cmp	r3, r8
 8005e9a:	f77f af79 	ble.w	8005d90 <_printf_float+0x23c>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	465a      	mov	r2, fp
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f43f aeae 	beq.w	8005c0a <_printf_float+0xb6>
 8005eae:	f108 0801 	add.w	r8, r8, #1
 8005eb2:	e7ec      	b.n	8005e8e <_printf_float+0x33a>
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d1c2      	bne.n	8005e46 <_printf_float+0x2f2>
 8005ec0:	e6a3      	b.n	8005c0a <_printf_float+0xb6>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	9206      	str	r2, [sp, #24]
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f ae9c 	beq.w	8005c0a <_printf_float+0xb6>
 8005ed2:	9a06      	ldr	r2, [sp, #24]
 8005ed4:	f10b 0b01 	add.w	fp, fp, #1
 8005ed8:	e7bb      	b.n	8005e52 <_printf_float+0x2fe>
 8005eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d1c0      	bne.n	8005e6a <_printf_float+0x316>
 8005ee8:	e68f      	b.n	8005c0a <_printf_float+0xb6>
 8005eea:	9a06      	ldr	r2, [sp, #24]
 8005eec:	464b      	mov	r3, r9
 8005eee:	4442      	add	r2, r8
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d1c3      	bne.n	8005e82 <_printf_float+0x32e>
 8005efa:	e686      	b.n	8005c0a <_printf_float+0xb6>
 8005efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f00:	f1ba 0f01 	cmp.w	sl, #1
 8005f04:	dc01      	bgt.n	8005f0a <_printf_float+0x3b6>
 8005f06:	07db      	lsls	r3, r3, #31
 8005f08:	d536      	bpl.n	8005f78 <_printf_float+0x424>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f ae78 	beq.w	8005c0a <_printf_float+0xb6>
 8005f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f ae70 	beq.w	8005c0a <_printf_float+0xb6>
 8005f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2300      	movs	r3, #0
 8005f32:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005f36:	f7fa fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f3a:	b9c0      	cbnz	r0, 8005f6e <_printf_float+0x41a>
 8005f3c:	4653      	mov	r3, sl
 8005f3e:	f108 0201 	add.w	r2, r8, #1
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d10c      	bne.n	8005f66 <_printf_float+0x412>
 8005f4c:	e65d      	b.n	8005c0a <_printf_float+0xb6>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	465a      	mov	r2, fp
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f43f ae56 	beq.w	8005c0a <_printf_float+0xb6>
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	45d0      	cmp	r8, sl
 8005f64:	dbf3      	blt.n	8005f4e <_printf_float+0x3fa>
 8005f66:	464b      	mov	r3, r9
 8005f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f6c:	e6df      	b.n	8005d2e <_printf_float+0x1da>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	f104 0b1a 	add.w	fp, r4, #26
 8005f76:	e7f4      	b.n	8005f62 <_printf_float+0x40e>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	e7e1      	b.n	8005f42 <_printf_float+0x3ee>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	464a      	mov	r2, r9
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f ae3e 	beq.w	8005c0a <_printf_float+0xb6>
 8005f8e:	f108 0801 	add.w	r8, r8, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	4543      	cmp	r3, r8
 8005f9a:	dcf0      	bgt.n	8005f7e <_printf_float+0x42a>
 8005f9c:	e6fc      	b.n	8005d98 <_printf_float+0x244>
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	f104 0919 	add.w	r9, r4, #25
 8005fa6:	e7f4      	b.n	8005f92 <_printf_float+0x43e>

08005fa8 <_printf_common>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	4616      	mov	r6, r2
 8005fae:	4698      	mov	r8, r3
 8005fb0:	688a      	ldr	r2, [r1, #8]
 8005fb2:	690b      	ldr	r3, [r1, #16]
 8005fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	bfb8      	it	lt
 8005fbc:	4613      	movlt	r3, r2
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b10a      	cbz	r2, 8005fce <_printf_common+0x26>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	bf42      	ittt	mi
 8005fd4:	6833      	ldrmi	r3, [r6, #0]
 8005fd6:	3302      	addmi	r3, #2
 8005fd8:	6033      	strmi	r3, [r6, #0]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	f015 0506 	ands.w	r5, r5, #6
 8005fe0:	d106      	bne.n	8005ff0 <_printf_common+0x48>
 8005fe2:	f104 0a19 	add.w	sl, r4, #25
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	6832      	ldr	r2, [r6, #0]
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc26      	bgt.n	800603e <_printf_common+0x96>
 8005ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	3b00      	subs	r3, #0
 8005ff8:	bf18      	it	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	0692      	lsls	r2, r2, #26
 8005ffe:	d42b      	bmi.n	8006058 <_printf_common+0xb0>
 8006000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006004:	4641      	mov	r1, r8
 8006006:	4638      	mov	r0, r7
 8006008:	47c8      	blx	r9
 800600a:	3001      	adds	r0, #1
 800600c:	d01e      	beq.n	800604c <_printf_common+0xa4>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	6922      	ldr	r2, [r4, #16]
 8006012:	f003 0306 	and.w	r3, r3, #6
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf02      	ittt	eq
 800601a:	68e5      	ldreq	r5, [r4, #12]
 800601c:	6833      	ldreq	r3, [r6, #0]
 800601e:	1aed      	subeq	r5, r5, r3
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	bf0c      	ite	eq
 8006024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006028:	2500      	movne	r5, #0
 800602a:	4293      	cmp	r3, r2
 800602c:	bfc4      	itt	gt
 800602e:	1a9b      	subgt	r3, r3, r2
 8006030:	18ed      	addgt	r5, r5, r3
 8006032:	2600      	movs	r6, #0
 8006034:	341a      	adds	r4, #26
 8006036:	42b5      	cmp	r5, r6
 8006038:	d11a      	bne.n	8006070 <_printf_common+0xc8>
 800603a:	2000      	movs	r0, #0
 800603c:	e008      	b.n	8006050 <_printf_common+0xa8>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4641      	mov	r1, r8
 8006044:	4638      	mov	r0, r7
 8006046:	47c8      	blx	r9
 8006048:	3001      	adds	r0, #1
 800604a:	d103      	bne.n	8006054 <_printf_common+0xac>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006054:	3501      	adds	r5, #1
 8006056:	e7c6      	b.n	8005fe6 <_printf_common+0x3e>
 8006058:	18e1      	adds	r1, r4, r3
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	2030      	movs	r0, #48	@ 0x30
 800605e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006062:	4422      	add	r2, r4
 8006064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800606c:	3302      	adds	r3, #2
 800606e:	e7c7      	b.n	8006000 <_printf_common+0x58>
 8006070:	2301      	movs	r3, #1
 8006072:	4622      	mov	r2, r4
 8006074:	4641      	mov	r1, r8
 8006076:	4638      	mov	r0, r7
 8006078:	47c8      	blx	r9
 800607a:	3001      	adds	r0, #1
 800607c:	d0e6      	beq.n	800604c <_printf_common+0xa4>
 800607e:	3601      	adds	r6, #1
 8006080:	e7d9      	b.n	8006036 <_printf_common+0x8e>
	...

08006084 <_printf_i>:
 8006084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	7e0f      	ldrb	r7, [r1, #24]
 800608a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800608c:	2f78      	cmp	r7, #120	@ 0x78
 800608e:	4691      	mov	r9, r2
 8006090:	4680      	mov	r8, r0
 8006092:	460c      	mov	r4, r1
 8006094:	469a      	mov	sl, r3
 8006096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609a:	d807      	bhi.n	80060ac <_printf_i+0x28>
 800609c:	2f62      	cmp	r7, #98	@ 0x62
 800609e:	d80a      	bhi.n	80060b6 <_printf_i+0x32>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f000 80d2 	beq.w	800624a <_printf_i+0x1c6>
 80060a6:	2f58      	cmp	r7, #88	@ 0x58
 80060a8:	f000 80b9 	beq.w	800621e <_printf_i+0x19a>
 80060ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b4:	e03a      	b.n	800612c <_printf_i+0xa8>
 80060b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ba:	2b15      	cmp	r3, #21
 80060bc:	d8f6      	bhi.n	80060ac <_printf_i+0x28>
 80060be:	a101      	add	r1, pc, #4	@ (adr r1, 80060c4 <_printf_i+0x40>)
 80060c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	08006131 	.word	0x08006131
 80060cc:	080060ad 	.word	0x080060ad
 80060d0:	080060ad 	.word	0x080060ad
 80060d4:	080060ad 	.word	0x080060ad
 80060d8:	080060ad 	.word	0x080060ad
 80060dc:	08006131 	.word	0x08006131
 80060e0:	080060ad 	.word	0x080060ad
 80060e4:	080060ad 	.word	0x080060ad
 80060e8:	080060ad 	.word	0x080060ad
 80060ec:	080060ad 	.word	0x080060ad
 80060f0:	08006231 	.word	0x08006231
 80060f4:	0800615b 	.word	0x0800615b
 80060f8:	080061eb 	.word	0x080061eb
 80060fc:	080060ad 	.word	0x080060ad
 8006100:	080060ad 	.word	0x080060ad
 8006104:	08006253 	.word	0x08006253
 8006108:	080060ad 	.word	0x080060ad
 800610c:	0800615b 	.word	0x0800615b
 8006110:	080060ad 	.word	0x080060ad
 8006114:	080060ad 	.word	0x080060ad
 8006118:	080061f3 	.word	0x080061f3
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6032      	str	r2, [r6, #0]
 8006124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e09d      	b.n	800626c <_printf_i+0x1e8>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	6031      	str	r1, [r6, #0]
 8006138:	0606      	lsls	r6, r0, #24
 800613a:	d501      	bpl.n	8006140 <_printf_i+0xbc>
 800613c:	681d      	ldr	r5, [r3, #0]
 800613e:	e003      	b.n	8006148 <_printf_i+0xc4>
 8006140:	0645      	lsls	r5, r0, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0xb8>
 8006144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006148:	2d00      	cmp	r5, #0
 800614a:	da03      	bge.n	8006154 <_printf_i+0xd0>
 800614c:	232d      	movs	r3, #45	@ 0x2d
 800614e:	426d      	negs	r5, r5
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006154:	4859      	ldr	r0, [pc, #356]	@ (80062bc <_printf_i+0x238>)
 8006156:	230a      	movs	r3, #10
 8006158:	e011      	b.n	800617e <_printf_i+0xfa>
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	0608      	lsls	r0, r1, #24
 8006160:	f853 5b04 	ldr.w	r5, [r3], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0xe8>
 8006166:	0649      	lsls	r1, r1, #25
 8006168:	bf48      	it	mi
 800616a:	b2ad      	uxthmi	r5, r5
 800616c:	2f6f      	cmp	r7, #111	@ 0x6f
 800616e:	4853      	ldr	r0, [pc, #332]	@ (80062bc <_printf_i+0x238>)
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	bf14      	ite	ne
 8006174:	230a      	movne	r3, #10
 8006176:	2308      	moveq	r3, #8
 8006178:	2100      	movs	r1, #0
 800617a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800617e:	6866      	ldr	r6, [r4, #4]
 8006180:	60a6      	str	r6, [r4, #8]
 8006182:	2e00      	cmp	r6, #0
 8006184:	bfa2      	ittt	ge
 8006186:	6821      	ldrge	r1, [r4, #0]
 8006188:	f021 0104 	bicge.w	r1, r1, #4
 800618c:	6021      	strge	r1, [r4, #0]
 800618e:	b90d      	cbnz	r5, 8006194 <_printf_i+0x110>
 8006190:	2e00      	cmp	r6, #0
 8006192:	d04b      	beq.n	800622c <_printf_i+0x1a8>
 8006194:	4616      	mov	r6, r2
 8006196:	fbb5 f1f3 	udiv	r1, r5, r3
 800619a:	fb03 5711 	mls	r7, r3, r1, r5
 800619e:	5dc7      	ldrb	r7, [r0, r7]
 80061a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a4:	462f      	mov	r7, r5
 80061a6:	42bb      	cmp	r3, r7
 80061a8:	460d      	mov	r5, r1
 80061aa:	d9f4      	bls.n	8006196 <_printf_i+0x112>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d10b      	bne.n	80061c8 <_printf_i+0x144>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	07df      	lsls	r7, r3, #31
 80061b4:	d508      	bpl.n	80061c8 <_printf_i+0x144>
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	6861      	ldr	r1, [r4, #4]
 80061ba:	4299      	cmp	r1, r3
 80061bc:	bfde      	ittt	le
 80061be:	2330      	movle	r3, #48	@ 0x30
 80061c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80061c8:	1b92      	subs	r2, r2, r6
 80061ca:	6122      	str	r2, [r4, #16]
 80061cc:	f8cd a000 	str.w	sl, [sp]
 80061d0:	464b      	mov	r3, r9
 80061d2:	aa03      	add	r2, sp, #12
 80061d4:	4621      	mov	r1, r4
 80061d6:	4640      	mov	r0, r8
 80061d8:	f7ff fee6 	bl	8005fa8 <_printf_common>
 80061dc:	3001      	adds	r0, #1
 80061de:	d14a      	bne.n	8006276 <_printf_i+0x1f2>
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061e4:	b004      	add	sp, #16
 80061e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f043 0320 	orr.w	r3, r3, #32
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	4833      	ldr	r0, [pc, #204]	@ (80062c0 <_printf_i+0x23c>)
 80061f4:	2778      	movs	r7, #120	@ 0x78
 80061f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	6831      	ldr	r1, [r6, #0]
 80061fe:	061f      	lsls	r7, r3, #24
 8006200:	f851 5b04 	ldr.w	r5, [r1], #4
 8006204:	d402      	bmi.n	800620c <_printf_i+0x188>
 8006206:	065f      	lsls	r7, r3, #25
 8006208:	bf48      	it	mi
 800620a:	b2ad      	uxthmi	r5, r5
 800620c:	6031      	str	r1, [r6, #0]
 800620e:	07d9      	lsls	r1, r3, #31
 8006210:	bf44      	itt	mi
 8006212:	f043 0320 	orrmi.w	r3, r3, #32
 8006216:	6023      	strmi	r3, [r4, #0]
 8006218:	b11d      	cbz	r5, 8006222 <_printf_i+0x19e>
 800621a:	2310      	movs	r3, #16
 800621c:	e7ac      	b.n	8006178 <_printf_i+0xf4>
 800621e:	4827      	ldr	r0, [pc, #156]	@ (80062bc <_printf_i+0x238>)
 8006220:	e7e9      	b.n	80061f6 <_printf_i+0x172>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f023 0320 	bic.w	r3, r3, #32
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	e7f6      	b.n	800621a <_printf_i+0x196>
 800622c:	4616      	mov	r6, r2
 800622e:	e7bd      	b.n	80061ac <_printf_i+0x128>
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	6825      	ldr	r5, [r4, #0]
 8006234:	6961      	ldr	r1, [r4, #20]
 8006236:	1d18      	adds	r0, r3, #4
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	062e      	lsls	r6, r5, #24
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	d501      	bpl.n	8006244 <_printf_i+0x1c0>
 8006240:	6019      	str	r1, [r3, #0]
 8006242:	e002      	b.n	800624a <_printf_i+0x1c6>
 8006244:	0668      	lsls	r0, r5, #25
 8006246:	d5fb      	bpl.n	8006240 <_printf_i+0x1bc>
 8006248:	8019      	strh	r1, [r3, #0]
 800624a:	2300      	movs	r3, #0
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	4616      	mov	r6, r2
 8006250:	e7bc      	b.n	80061cc <_printf_i+0x148>
 8006252:	6833      	ldr	r3, [r6, #0]
 8006254:	1d1a      	adds	r2, r3, #4
 8006256:	6032      	str	r2, [r6, #0]
 8006258:	681e      	ldr	r6, [r3, #0]
 800625a:	6862      	ldr	r2, [r4, #4]
 800625c:	2100      	movs	r1, #0
 800625e:	4630      	mov	r0, r6
 8006260:	f7f9 ffb6 	bl	80001d0 <memchr>
 8006264:	b108      	cbz	r0, 800626a <_printf_i+0x1e6>
 8006266:	1b80      	subs	r0, r0, r6
 8006268:	6060      	str	r0, [r4, #4]
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	2300      	movs	r3, #0
 8006270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006274:	e7aa      	b.n	80061cc <_printf_i+0x148>
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	47d0      	blx	sl
 8006280:	3001      	adds	r0, #1
 8006282:	d0ad      	beq.n	80061e0 <_printf_i+0x15c>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	079b      	lsls	r3, r3, #30
 8006288:	d413      	bmi.n	80062b2 <_printf_i+0x22e>
 800628a:	68e0      	ldr	r0, [r4, #12]
 800628c:	9b03      	ldr	r3, [sp, #12]
 800628e:	4298      	cmp	r0, r3
 8006290:	bfb8      	it	lt
 8006292:	4618      	movlt	r0, r3
 8006294:	e7a6      	b.n	80061e4 <_printf_i+0x160>
 8006296:	2301      	movs	r3, #1
 8006298:	4632      	mov	r2, r6
 800629a:	4649      	mov	r1, r9
 800629c:	4640      	mov	r0, r8
 800629e:	47d0      	blx	sl
 80062a0:	3001      	adds	r0, #1
 80062a2:	d09d      	beq.n	80061e0 <_printf_i+0x15c>
 80062a4:	3501      	adds	r5, #1
 80062a6:	68e3      	ldr	r3, [r4, #12]
 80062a8:	9903      	ldr	r1, [sp, #12]
 80062aa:	1a5b      	subs	r3, r3, r1
 80062ac:	42ab      	cmp	r3, r5
 80062ae:	dcf2      	bgt.n	8006296 <_printf_i+0x212>
 80062b0:	e7eb      	b.n	800628a <_printf_i+0x206>
 80062b2:	2500      	movs	r5, #0
 80062b4:	f104 0619 	add.w	r6, r4, #25
 80062b8:	e7f5      	b.n	80062a6 <_printf_i+0x222>
 80062ba:	bf00      	nop
 80062bc:	0800877a 	.word	0x0800877a
 80062c0:	0800878b 	.word	0x0800878b

080062c4 <std>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b510      	push	{r4, lr}
 80062c8:	4604      	mov	r4, r0
 80062ca:	e9c0 3300 	strd	r3, r3, [r0]
 80062ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062d2:	6083      	str	r3, [r0, #8]
 80062d4:	8181      	strh	r1, [r0, #12]
 80062d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80062d8:	81c2      	strh	r2, [r0, #14]
 80062da:	6183      	str	r3, [r0, #24]
 80062dc:	4619      	mov	r1, r3
 80062de:	2208      	movs	r2, #8
 80062e0:	305c      	adds	r0, #92	@ 0x5c
 80062e2:	f000 f9f9 	bl	80066d8 <memset>
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <std+0x58>)
 80062e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <std+0x5c>)
 80062ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006324 <std+0x60>)
 80062f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <std+0x64>)
 80062f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <std+0x68>)
 80062f8:	6224      	str	r4, [r4, #32]
 80062fa:	429c      	cmp	r4, r3
 80062fc:	d006      	beq.n	800630c <std+0x48>
 80062fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006302:	4294      	cmp	r4, r2
 8006304:	d002      	beq.n	800630c <std+0x48>
 8006306:	33d0      	adds	r3, #208	@ 0xd0
 8006308:	429c      	cmp	r4, r3
 800630a:	d105      	bne.n	8006318 <std+0x54>
 800630c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006314:	f000 bab2 	b.w	800687c <__retarget_lock_init_recursive>
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	08006529 	.word	0x08006529
 8006320:	0800654b 	.word	0x0800654b
 8006324:	08006583 	.word	0x08006583
 8006328:	080065a7 	.word	0x080065a7
 800632c:	20001264 	.word	0x20001264

08006330 <stdio_exit_handler>:
 8006330:	4a02      	ldr	r2, [pc, #8]	@ (800633c <stdio_exit_handler+0xc>)
 8006332:	4903      	ldr	r1, [pc, #12]	@ (8006340 <stdio_exit_handler+0x10>)
 8006334:	4803      	ldr	r0, [pc, #12]	@ (8006344 <stdio_exit_handler+0x14>)
 8006336:	f000 b869 	b.w	800640c <_fwalk_sglue>
 800633a:	bf00      	nop
 800633c:	20000010 	.word	0x20000010
 8006340:	080081c9 	.word	0x080081c9
 8006344:	20000020 	.word	0x20000020

08006348 <cleanup_stdio>:
 8006348:	6841      	ldr	r1, [r0, #4]
 800634a:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <cleanup_stdio+0x34>)
 800634c:	4299      	cmp	r1, r3
 800634e:	b510      	push	{r4, lr}
 8006350:	4604      	mov	r4, r0
 8006352:	d001      	beq.n	8006358 <cleanup_stdio+0x10>
 8006354:	f001 ff38 	bl	80081c8 <_fflush_r>
 8006358:	68a1      	ldr	r1, [r4, #8]
 800635a:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <cleanup_stdio+0x38>)
 800635c:	4299      	cmp	r1, r3
 800635e:	d002      	beq.n	8006366 <cleanup_stdio+0x1e>
 8006360:	4620      	mov	r0, r4
 8006362:	f001 ff31 	bl	80081c8 <_fflush_r>
 8006366:	68e1      	ldr	r1, [r4, #12]
 8006368:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <cleanup_stdio+0x3c>)
 800636a:	4299      	cmp	r1, r3
 800636c:	d004      	beq.n	8006378 <cleanup_stdio+0x30>
 800636e:	4620      	mov	r0, r4
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f001 bf28 	b.w	80081c8 <_fflush_r>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	20001264 	.word	0x20001264
 8006380:	200012cc 	.word	0x200012cc
 8006384:	20001334 	.word	0x20001334

08006388 <global_stdio_init.part.0>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <global_stdio_init.part.0+0x30>)
 800638c:	4c0b      	ldr	r4, [pc, #44]	@ (80063bc <global_stdio_init.part.0+0x34>)
 800638e:	4a0c      	ldr	r2, [pc, #48]	@ (80063c0 <global_stdio_init.part.0+0x38>)
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	4620      	mov	r0, r4
 8006394:	2200      	movs	r2, #0
 8006396:	2104      	movs	r1, #4
 8006398:	f7ff ff94 	bl	80062c4 <std>
 800639c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063a0:	2201      	movs	r2, #1
 80063a2:	2109      	movs	r1, #9
 80063a4:	f7ff ff8e 	bl	80062c4 <std>
 80063a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063ac:	2202      	movs	r2, #2
 80063ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b2:	2112      	movs	r1, #18
 80063b4:	f7ff bf86 	b.w	80062c4 <std>
 80063b8:	2000139c 	.word	0x2000139c
 80063bc:	20001264 	.word	0x20001264
 80063c0:	08006331 	.word	0x08006331

080063c4 <__sfp_lock_acquire>:
 80063c4:	4801      	ldr	r0, [pc, #4]	@ (80063cc <__sfp_lock_acquire+0x8>)
 80063c6:	f000 ba5a 	b.w	800687e <__retarget_lock_acquire_recursive>
 80063ca:	bf00      	nop
 80063cc:	200013a5 	.word	0x200013a5

080063d0 <__sfp_lock_release>:
 80063d0:	4801      	ldr	r0, [pc, #4]	@ (80063d8 <__sfp_lock_release+0x8>)
 80063d2:	f000 ba55 	b.w	8006880 <__retarget_lock_release_recursive>
 80063d6:	bf00      	nop
 80063d8:	200013a5 	.word	0x200013a5

080063dc <__sinit>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	4604      	mov	r4, r0
 80063e0:	f7ff fff0 	bl	80063c4 <__sfp_lock_acquire>
 80063e4:	6a23      	ldr	r3, [r4, #32]
 80063e6:	b11b      	cbz	r3, 80063f0 <__sinit+0x14>
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ec:	f7ff bff0 	b.w	80063d0 <__sfp_lock_release>
 80063f0:	4b04      	ldr	r3, [pc, #16]	@ (8006404 <__sinit+0x28>)
 80063f2:	6223      	str	r3, [r4, #32]
 80063f4:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <__sinit+0x2c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f5      	bne.n	80063e8 <__sinit+0xc>
 80063fc:	f7ff ffc4 	bl	8006388 <global_stdio_init.part.0>
 8006400:	e7f2      	b.n	80063e8 <__sinit+0xc>
 8006402:	bf00      	nop
 8006404:	08006349 	.word	0x08006349
 8006408:	2000139c 	.word	0x2000139c

0800640c <_fwalk_sglue>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	4607      	mov	r7, r0
 8006412:	4688      	mov	r8, r1
 8006414:	4614      	mov	r4, r2
 8006416:	2600      	movs	r6, #0
 8006418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800641c:	f1b9 0901 	subs.w	r9, r9, #1
 8006420:	d505      	bpl.n	800642e <_fwalk_sglue+0x22>
 8006422:	6824      	ldr	r4, [r4, #0]
 8006424:	2c00      	cmp	r4, #0
 8006426:	d1f7      	bne.n	8006418 <_fwalk_sglue+0xc>
 8006428:	4630      	mov	r0, r6
 800642a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d907      	bls.n	8006444 <_fwalk_sglue+0x38>
 8006434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006438:	3301      	adds	r3, #1
 800643a:	d003      	beq.n	8006444 <_fwalk_sglue+0x38>
 800643c:	4629      	mov	r1, r5
 800643e:	4638      	mov	r0, r7
 8006440:	47c0      	blx	r8
 8006442:	4306      	orrs	r6, r0
 8006444:	3568      	adds	r5, #104	@ 0x68
 8006446:	e7e9      	b.n	800641c <_fwalk_sglue+0x10>

08006448 <iprintf>:
 8006448:	b40f      	push	{r0, r1, r2, r3}
 800644a:	b507      	push	{r0, r1, r2, lr}
 800644c:	4906      	ldr	r1, [pc, #24]	@ (8006468 <iprintf+0x20>)
 800644e:	ab04      	add	r3, sp, #16
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	f853 2b04 	ldr.w	r2, [r3], #4
 8006456:	6881      	ldr	r1, [r0, #8]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	f001 fd19 	bl	8007e90 <_vfiprintf_r>
 800645e:	b003      	add	sp, #12
 8006460:	f85d eb04 	ldr.w	lr, [sp], #4
 8006464:	b004      	add	sp, #16
 8006466:	4770      	bx	lr
 8006468:	2000001c 	.word	0x2000001c

0800646c <_puts_r>:
 800646c:	6a03      	ldr	r3, [r0, #32]
 800646e:	b570      	push	{r4, r5, r6, lr}
 8006470:	6884      	ldr	r4, [r0, #8]
 8006472:	4605      	mov	r5, r0
 8006474:	460e      	mov	r6, r1
 8006476:	b90b      	cbnz	r3, 800647c <_puts_r+0x10>
 8006478:	f7ff ffb0 	bl	80063dc <__sinit>
 800647c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800647e:	07db      	lsls	r3, r3, #31
 8006480:	d405      	bmi.n	800648e <_puts_r+0x22>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	0598      	lsls	r0, r3, #22
 8006486:	d402      	bmi.n	800648e <_puts_r+0x22>
 8006488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800648a:	f000 f9f8 	bl	800687e <__retarget_lock_acquire_recursive>
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	0719      	lsls	r1, r3, #28
 8006492:	d502      	bpl.n	800649a <_puts_r+0x2e>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d135      	bne.n	8006506 <_puts_r+0x9a>
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f000 f8c5 	bl	800662c <__swsetup_r>
 80064a2:	b380      	cbz	r0, 8006506 <_puts_r+0x9a>
 80064a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80064a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064aa:	07da      	lsls	r2, r3, #31
 80064ac:	d405      	bmi.n	80064ba <_puts_r+0x4e>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	059b      	lsls	r3, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_puts_r+0x4e>
 80064b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064b6:	f000 f9e3 	bl	8006880 <__retarget_lock_release_recursive>
 80064ba:	4628      	mov	r0, r5
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da04      	bge.n	80064cc <_puts_r+0x60>
 80064c2:	69a2      	ldr	r2, [r4, #24]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	dc17      	bgt.n	80064f8 <_puts_r+0x8c>
 80064c8:	290a      	cmp	r1, #10
 80064ca:	d015      	beq.n	80064f8 <_puts_r+0x8c>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	7019      	strb	r1, [r3, #0]
 80064d4:	68a3      	ldr	r3, [r4, #8]
 80064d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064da:	3b01      	subs	r3, #1
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	2900      	cmp	r1, #0
 80064e0:	d1ed      	bne.n	80064be <_puts_r+0x52>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da11      	bge.n	800650a <_puts_r+0x9e>
 80064e6:	4622      	mov	r2, r4
 80064e8:	210a      	movs	r1, #10
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 f85f 	bl	80065ae <__swbuf_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d0d7      	beq.n	80064a4 <_puts_r+0x38>
 80064f4:	250a      	movs	r5, #10
 80064f6:	e7d7      	b.n	80064a8 <_puts_r+0x3c>
 80064f8:	4622      	mov	r2, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f857 	bl	80065ae <__swbuf_r>
 8006500:	3001      	adds	r0, #1
 8006502:	d1e7      	bne.n	80064d4 <_puts_r+0x68>
 8006504:	e7ce      	b.n	80064a4 <_puts_r+0x38>
 8006506:	3e01      	subs	r6, #1
 8006508:	e7e4      	b.n	80064d4 <_puts_r+0x68>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	6022      	str	r2, [r4, #0]
 8006510:	220a      	movs	r2, #10
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	e7ee      	b.n	80064f4 <_puts_r+0x88>
	...

08006518 <puts>:
 8006518:	4b02      	ldr	r3, [pc, #8]	@ (8006524 <puts+0xc>)
 800651a:	4601      	mov	r1, r0
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	f7ff bfa5 	b.w	800646c <_puts_r>
 8006522:	bf00      	nop
 8006524:	2000001c 	.word	0x2000001c

08006528 <__sread>:
 8006528:	b510      	push	{r4, lr}
 800652a:	460c      	mov	r4, r1
 800652c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006530:	f000 f956 	bl	80067e0 <_read_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	bfab      	itete	ge
 8006538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800653a:	89a3      	ldrhlt	r3, [r4, #12]
 800653c:	181b      	addge	r3, r3, r0
 800653e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006542:	bfac      	ite	ge
 8006544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006546:	81a3      	strhlt	r3, [r4, #12]
 8006548:	bd10      	pop	{r4, pc}

0800654a <__swrite>:
 800654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	461f      	mov	r7, r3
 8006550:	898b      	ldrh	r3, [r1, #12]
 8006552:	05db      	lsls	r3, r3, #23
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	4616      	mov	r6, r2
 800655a:	d505      	bpl.n	8006568 <__swrite+0x1e>
 800655c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006560:	2302      	movs	r3, #2
 8006562:	2200      	movs	r2, #0
 8006564:	f000 f92a 	bl	80067bc <_lseek_r>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	4632      	mov	r2, r6
 8006576:	463b      	mov	r3, r7
 8006578:	4628      	mov	r0, r5
 800657a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800657e:	f000 b941 	b.w	8006804 <_write_r>

08006582 <__sseek>:
 8006582:	b510      	push	{r4, lr}
 8006584:	460c      	mov	r4, r1
 8006586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658a:	f000 f917 	bl	80067bc <_lseek_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	bf15      	itete	ne
 8006594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800659a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800659e:	81a3      	strheq	r3, [r4, #12]
 80065a0:	bf18      	it	ne
 80065a2:	81a3      	strhne	r3, [r4, #12]
 80065a4:	bd10      	pop	{r4, pc}

080065a6 <__sclose>:
 80065a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065aa:	f000 b8a1 	b.w	80066f0 <_close_r>

080065ae <__swbuf_r>:
 80065ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b0:	460e      	mov	r6, r1
 80065b2:	4614      	mov	r4, r2
 80065b4:	4605      	mov	r5, r0
 80065b6:	b118      	cbz	r0, 80065c0 <__swbuf_r+0x12>
 80065b8:	6a03      	ldr	r3, [r0, #32]
 80065ba:	b90b      	cbnz	r3, 80065c0 <__swbuf_r+0x12>
 80065bc:	f7ff ff0e 	bl	80063dc <__sinit>
 80065c0:	69a3      	ldr	r3, [r4, #24]
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	071a      	lsls	r2, r3, #28
 80065c8:	d501      	bpl.n	80065ce <__swbuf_r+0x20>
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	b943      	cbnz	r3, 80065e0 <__swbuf_r+0x32>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 f82b 	bl	800662c <__swsetup_r>
 80065d6:	b118      	cbz	r0, 80065e0 <__swbuf_r+0x32>
 80065d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80065dc:	4638      	mov	r0, r7
 80065de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	6922      	ldr	r2, [r4, #16]
 80065e4:	1a98      	subs	r0, r3, r2
 80065e6:	6963      	ldr	r3, [r4, #20]
 80065e8:	b2f6      	uxtb	r6, r6
 80065ea:	4283      	cmp	r3, r0
 80065ec:	4637      	mov	r7, r6
 80065ee:	dc05      	bgt.n	80065fc <__swbuf_r+0x4e>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f001 fde8 	bl	80081c8 <_fflush_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d1ed      	bne.n	80065d8 <__swbuf_r+0x2a>
 80065fc:	68a3      	ldr	r3, [r4, #8]
 80065fe:	3b01      	subs	r3, #1
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	6022      	str	r2, [r4, #0]
 8006608:	701e      	strb	r6, [r3, #0]
 800660a:	6962      	ldr	r2, [r4, #20]
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	429a      	cmp	r2, r3
 8006610:	d004      	beq.n	800661c <__swbuf_r+0x6e>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	07db      	lsls	r3, r3, #31
 8006616:	d5e1      	bpl.n	80065dc <__swbuf_r+0x2e>
 8006618:	2e0a      	cmp	r6, #10
 800661a:	d1df      	bne.n	80065dc <__swbuf_r+0x2e>
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f001 fdd2 	bl	80081c8 <_fflush_r>
 8006624:	2800      	cmp	r0, #0
 8006626:	d0d9      	beq.n	80065dc <__swbuf_r+0x2e>
 8006628:	e7d6      	b.n	80065d8 <__swbuf_r+0x2a>
	...

0800662c <__swsetup_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4b29      	ldr	r3, [pc, #164]	@ (80066d4 <__swsetup_r+0xa8>)
 8006630:	4605      	mov	r5, r0
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	460c      	mov	r4, r1
 8006636:	b118      	cbz	r0, 8006640 <__swsetup_r+0x14>
 8006638:	6a03      	ldr	r3, [r0, #32]
 800663a:	b90b      	cbnz	r3, 8006640 <__swsetup_r+0x14>
 800663c:	f7ff fece 	bl	80063dc <__sinit>
 8006640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006644:	0719      	lsls	r1, r3, #28
 8006646:	d422      	bmi.n	800668e <__swsetup_r+0x62>
 8006648:	06da      	lsls	r2, r3, #27
 800664a:	d407      	bmi.n	800665c <__swsetup_r+0x30>
 800664c:	2209      	movs	r2, #9
 800664e:	602a      	str	r2, [r5, #0]
 8006650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800665a:	e033      	b.n	80066c4 <__swsetup_r+0x98>
 800665c:	0758      	lsls	r0, r3, #29
 800665e:	d512      	bpl.n	8006686 <__swsetup_r+0x5a>
 8006660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006662:	b141      	cbz	r1, 8006676 <__swsetup_r+0x4a>
 8006664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006668:	4299      	cmp	r1, r3
 800666a:	d002      	beq.n	8006672 <__swsetup_r+0x46>
 800666c:	4628      	mov	r0, r5
 800666e:	f000 ff63 	bl	8007538 <_free_r>
 8006672:	2300      	movs	r3, #0
 8006674:	6363      	str	r3, [r4, #52]	@ 0x34
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	2300      	movs	r3, #0
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f043 0308 	orr.w	r3, r3, #8
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	b94b      	cbnz	r3, 80066a6 <__swsetup_r+0x7a>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800669c:	d003      	beq.n	80066a6 <__swsetup_r+0x7a>
 800669e:	4621      	mov	r1, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	f001 fddf 	bl	8008264 <__smakebuf_r>
 80066a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066aa:	f013 0201 	ands.w	r2, r3, #1
 80066ae:	d00a      	beq.n	80066c6 <__swsetup_r+0x9a>
 80066b0:	2200      	movs	r2, #0
 80066b2:	60a2      	str	r2, [r4, #8]
 80066b4:	6962      	ldr	r2, [r4, #20]
 80066b6:	4252      	negs	r2, r2
 80066b8:	61a2      	str	r2, [r4, #24]
 80066ba:	6922      	ldr	r2, [r4, #16]
 80066bc:	b942      	cbnz	r2, 80066d0 <__swsetup_r+0xa4>
 80066be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066c2:	d1c5      	bne.n	8006650 <__swsetup_r+0x24>
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	0799      	lsls	r1, r3, #30
 80066c8:	bf58      	it	pl
 80066ca:	6962      	ldrpl	r2, [r4, #20]
 80066cc:	60a2      	str	r2, [r4, #8]
 80066ce:	e7f4      	b.n	80066ba <__swsetup_r+0x8e>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e7f7      	b.n	80066c4 <__swsetup_r+0x98>
 80066d4:	2000001c 	.word	0x2000001c

080066d8 <memset>:
 80066d8:	4402      	add	r2, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	4293      	cmp	r3, r2
 80066de:	d100      	bne.n	80066e2 <memset+0xa>
 80066e0:	4770      	bx	lr
 80066e2:	f803 1b01 	strb.w	r1, [r3], #1
 80066e6:	e7f9      	b.n	80066dc <memset+0x4>

080066e8 <_localeconv_r>:
 80066e8:	4800      	ldr	r0, [pc, #0]	@ (80066ec <_localeconv_r+0x4>)
 80066ea:	4770      	bx	lr
 80066ec:	2000015c 	.word	0x2000015c

080066f0 <_close_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	@ (800670c <_close_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fb f8f4 	bl	80018e8 <_close>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_close_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_close_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	200013a0 	.word	0x200013a0

08006710 <_reclaim_reent>:
 8006710:	4b29      	ldr	r3, [pc, #164]	@ (80067b8 <_reclaim_reent+0xa8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4283      	cmp	r3, r0
 8006716:	b570      	push	{r4, r5, r6, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	d04b      	beq.n	80067b4 <_reclaim_reent+0xa4>
 800671c:	69c3      	ldr	r3, [r0, #28]
 800671e:	b1ab      	cbz	r3, 800674c <_reclaim_reent+0x3c>
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	b16b      	cbz	r3, 8006740 <_reclaim_reent+0x30>
 8006724:	2500      	movs	r5, #0
 8006726:	69e3      	ldr	r3, [r4, #28]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	5959      	ldr	r1, [r3, r5]
 800672c:	2900      	cmp	r1, #0
 800672e:	d13b      	bne.n	80067a8 <_reclaim_reent+0x98>
 8006730:	3504      	adds	r5, #4
 8006732:	2d80      	cmp	r5, #128	@ 0x80
 8006734:	d1f7      	bne.n	8006726 <_reclaim_reent+0x16>
 8006736:	69e3      	ldr	r3, [r4, #28]
 8006738:	4620      	mov	r0, r4
 800673a:	68d9      	ldr	r1, [r3, #12]
 800673c:	f000 fefc 	bl	8007538 <_free_r>
 8006740:	69e3      	ldr	r3, [r4, #28]
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	b111      	cbz	r1, 800674c <_reclaim_reent+0x3c>
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fef6 	bl	8007538 <_free_r>
 800674c:	6961      	ldr	r1, [r4, #20]
 800674e:	b111      	cbz	r1, 8006756 <_reclaim_reent+0x46>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fef1 	bl	8007538 <_free_r>
 8006756:	69e1      	ldr	r1, [r4, #28]
 8006758:	b111      	cbz	r1, 8006760 <_reclaim_reent+0x50>
 800675a:	4620      	mov	r0, r4
 800675c:	f000 feec 	bl	8007538 <_free_r>
 8006760:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006762:	b111      	cbz	r1, 800676a <_reclaim_reent+0x5a>
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fee7 	bl	8007538 <_free_r>
 800676a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800676c:	b111      	cbz	r1, 8006774 <_reclaim_reent+0x64>
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fee2 	bl	8007538 <_free_r>
 8006774:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006776:	b111      	cbz	r1, 800677e <_reclaim_reent+0x6e>
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fedd 	bl	8007538 <_free_r>
 800677e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006780:	b111      	cbz	r1, 8006788 <_reclaim_reent+0x78>
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fed8 	bl	8007538 <_free_r>
 8006788:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800678a:	b111      	cbz	r1, 8006792 <_reclaim_reent+0x82>
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fed3 	bl	8007538 <_free_r>
 8006792:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006794:	b111      	cbz	r1, 800679c <_reclaim_reent+0x8c>
 8006796:	4620      	mov	r0, r4
 8006798:	f000 fece 	bl	8007538 <_free_r>
 800679c:	6a23      	ldr	r3, [r4, #32]
 800679e:	b14b      	cbz	r3, 80067b4 <_reclaim_reent+0xa4>
 80067a0:	4620      	mov	r0, r4
 80067a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067a6:	4718      	bx	r3
 80067a8:	680e      	ldr	r6, [r1, #0]
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 fec4 	bl	8007538 <_free_r>
 80067b0:	4631      	mov	r1, r6
 80067b2:	e7bb      	b.n	800672c <_reclaim_reent+0x1c>
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	bf00      	nop
 80067b8:	2000001c 	.word	0x2000001c

080067bc <_lseek_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d07      	ldr	r5, [pc, #28]	@ (80067dc <_lseek_r+0x20>)
 80067c0:	4604      	mov	r4, r0
 80067c2:	4608      	mov	r0, r1
 80067c4:	4611      	mov	r1, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	602a      	str	r2, [r5, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7fb f896 	bl	80018fc <_lseek>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_lseek_r+0x1e>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_lseek_r+0x1e>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	200013a0 	.word	0x200013a0

080067e0 <_read_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d07      	ldr	r5, [pc, #28]	@ (8006800 <_read_r+0x20>)
 80067e4:	4604      	mov	r4, r0
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fb f86a 	bl	80018c8 <_read>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_read_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_read_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	200013a0 	.word	0x200013a0

08006804 <_write_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	@ (8006824 <_write_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fa fcae 	bl	8001174 <_write>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_write_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_write_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200013a0 	.word	0x200013a0

08006828 <__errno>:
 8006828:	4b01      	ldr	r3, [pc, #4]	@ (8006830 <__errno+0x8>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	2000001c 	.word	0x2000001c

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4d0d      	ldr	r5, [pc, #52]	@ (800686c <__libc_init_array+0x38>)
 8006838:	4c0d      	ldr	r4, [pc, #52]	@ (8006870 <__libc_init_array+0x3c>)
 800683a:	1b64      	subs	r4, r4, r5
 800683c:	10a4      	asrs	r4, r4, #2
 800683e:	2600      	movs	r6, #0
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	4d0b      	ldr	r5, [pc, #44]	@ (8006874 <__libc_init_array+0x40>)
 8006846:	4c0c      	ldr	r4, [pc, #48]	@ (8006878 <__libc_init_array+0x44>)
 8006848:	f001 fe2a 	bl	80084a0 <_init>
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	2600      	movs	r6, #0
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f855 3b04 	ldr.w	r3, [r5], #4
 800685c:	4798      	blx	r3
 800685e:	3601      	adds	r6, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f855 3b04 	ldr.w	r3, [r5], #4
 8006866:	4798      	blx	r3
 8006868:	3601      	adds	r6, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	08008ae0 	.word	0x08008ae0
 8006870:	08008ae0 	.word	0x08008ae0
 8006874:	08008ae0 	.word	0x08008ae0
 8006878:	08008ae4 	.word	0x08008ae4

0800687c <__retarget_lock_init_recursive>:
 800687c:	4770      	bx	lr

0800687e <__retarget_lock_acquire_recursive>:
 800687e:	4770      	bx	lr

08006880 <__retarget_lock_release_recursive>:
 8006880:	4770      	bx	lr

08006882 <memcpy>:
 8006882:	440a      	add	r2, r1
 8006884:	4291      	cmp	r1, r2
 8006886:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800688a:	d100      	bne.n	800688e <memcpy+0xc>
 800688c:	4770      	bx	lr
 800688e:	b510      	push	{r4, lr}
 8006890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006898:	4291      	cmp	r1, r2
 800689a:	d1f9      	bne.n	8006890 <memcpy+0xe>
 800689c:	bd10      	pop	{r4, pc}

0800689e <quorem>:
 800689e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a2:	6903      	ldr	r3, [r0, #16]
 80068a4:	690c      	ldr	r4, [r1, #16]
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	4607      	mov	r7, r0
 80068aa:	db7e      	blt.n	80069aa <quorem+0x10c>
 80068ac:	3c01      	subs	r4, #1
 80068ae:	f101 0814 	add.w	r8, r1, #20
 80068b2:	00a3      	lsls	r3, r4, #2
 80068b4:	f100 0514 	add.w	r5, r0, #20
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c8:	3301      	adds	r3, #1
 80068ca:	429a      	cmp	r2, r3
 80068cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80068d4:	d32e      	bcc.n	8006934 <quorem+0x96>
 80068d6:	f04f 0a00 	mov.w	sl, #0
 80068da:	46c4      	mov	ip, r8
 80068dc:	46ae      	mov	lr, r5
 80068de:	46d3      	mov	fp, sl
 80068e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068e4:	b298      	uxth	r0, r3
 80068e6:	fb06 a000 	mla	r0, r6, r0, sl
 80068ea:	0c02      	lsrs	r2, r0, #16
 80068ec:	0c1b      	lsrs	r3, r3, #16
 80068ee:	fb06 2303 	mla	r3, r6, r3, r2
 80068f2:	f8de 2000 	ldr.w	r2, [lr]
 80068f6:	b280      	uxth	r0, r0
 80068f8:	b292      	uxth	r2, r2
 80068fa:	1a12      	subs	r2, r2, r0
 80068fc:	445a      	add	r2, fp
 80068fe:	f8de 0000 	ldr.w	r0, [lr]
 8006902:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006906:	b29b      	uxth	r3, r3
 8006908:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800690c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006910:	b292      	uxth	r2, r2
 8006912:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006916:	45e1      	cmp	r9, ip
 8006918:	f84e 2b04 	str.w	r2, [lr], #4
 800691c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006920:	d2de      	bcs.n	80068e0 <quorem+0x42>
 8006922:	9b00      	ldr	r3, [sp, #0]
 8006924:	58eb      	ldr	r3, [r5, r3]
 8006926:	b92b      	cbnz	r3, 8006934 <quorem+0x96>
 8006928:	9b01      	ldr	r3, [sp, #4]
 800692a:	3b04      	subs	r3, #4
 800692c:	429d      	cmp	r5, r3
 800692e:	461a      	mov	r2, r3
 8006930:	d32f      	bcc.n	8006992 <quorem+0xf4>
 8006932:	613c      	str	r4, [r7, #16]
 8006934:	4638      	mov	r0, r7
 8006936:	f001 f979 	bl	8007c2c <__mcmp>
 800693a:	2800      	cmp	r0, #0
 800693c:	db25      	blt.n	800698a <quorem+0xec>
 800693e:	4629      	mov	r1, r5
 8006940:	2000      	movs	r0, #0
 8006942:	f858 2b04 	ldr.w	r2, [r8], #4
 8006946:	f8d1 c000 	ldr.w	ip, [r1]
 800694a:	fa1f fe82 	uxth.w	lr, r2
 800694e:	fa1f f38c 	uxth.w	r3, ip
 8006952:	eba3 030e 	sub.w	r3, r3, lr
 8006956:	4403      	add	r3, r0
 8006958:	0c12      	lsrs	r2, r2, #16
 800695a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800695e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006968:	45c1      	cmp	r9, r8
 800696a:	f841 3b04 	str.w	r3, [r1], #4
 800696e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006972:	d2e6      	bcs.n	8006942 <quorem+0xa4>
 8006974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800697c:	b922      	cbnz	r2, 8006988 <quorem+0xea>
 800697e:	3b04      	subs	r3, #4
 8006980:	429d      	cmp	r5, r3
 8006982:	461a      	mov	r2, r3
 8006984:	d30b      	bcc.n	800699e <quorem+0x100>
 8006986:	613c      	str	r4, [r7, #16]
 8006988:	3601      	adds	r6, #1
 800698a:	4630      	mov	r0, r6
 800698c:	b003      	add	sp, #12
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	3b04      	subs	r3, #4
 8006996:	2a00      	cmp	r2, #0
 8006998:	d1cb      	bne.n	8006932 <quorem+0x94>
 800699a:	3c01      	subs	r4, #1
 800699c:	e7c6      	b.n	800692c <quorem+0x8e>
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	d1ef      	bne.n	8006986 <quorem+0xe8>
 80069a6:	3c01      	subs	r4, #1
 80069a8:	e7ea      	b.n	8006980 <quorem+0xe2>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e7ee      	b.n	800698c <quorem+0xee>
	...

080069b0 <_dtoa_r>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	69c7      	ldr	r7, [r0, #28]
 80069b6:	b099      	sub	sp, #100	@ 0x64
 80069b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069bc:	ec55 4b10 	vmov	r4, r5, d0
 80069c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80069c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80069c4:	4683      	mov	fp, r0
 80069c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80069c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069ca:	b97f      	cbnz	r7, 80069ec <_dtoa_r+0x3c>
 80069cc:	2010      	movs	r0, #16
 80069ce:	f000 fdfd 	bl	80075cc <malloc>
 80069d2:	4602      	mov	r2, r0
 80069d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80069d8:	b920      	cbnz	r0, 80069e4 <_dtoa_r+0x34>
 80069da:	4ba7      	ldr	r3, [pc, #668]	@ (8006c78 <_dtoa_r+0x2c8>)
 80069dc:	21ef      	movs	r1, #239	@ 0xef
 80069de:	48a7      	ldr	r0, [pc, #668]	@ (8006c7c <_dtoa_r+0x2cc>)
 80069e0:	f001 fcae 	bl	8008340 <__assert_func>
 80069e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80069e8:	6007      	str	r7, [r0, #0]
 80069ea:	60c7      	str	r7, [r0, #12]
 80069ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	b159      	cbz	r1, 8006a0c <_dtoa_r+0x5c>
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	604a      	str	r2, [r1, #4]
 80069f8:	2301      	movs	r3, #1
 80069fa:	4093      	lsls	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
 80069fe:	4658      	mov	r0, fp
 8006a00:	f000 feda 	bl	80077b8 <_Bfree>
 8006a04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	1e2b      	subs	r3, r5, #0
 8006a0e:	bfb9      	ittee	lt
 8006a10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a14:	9303      	strlt	r3, [sp, #12]
 8006a16:	2300      	movge	r3, #0
 8006a18:	6033      	strge	r3, [r6, #0]
 8006a1a:	9f03      	ldr	r7, [sp, #12]
 8006a1c:	4b98      	ldr	r3, [pc, #608]	@ (8006c80 <_dtoa_r+0x2d0>)
 8006a1e:	bfbc      	itt	lt
 8006a20:	2201      	movlt	r2, #1
 8006a22:	6032      	strlt	r2, [r6, #0]
 8006a24:	43bb      	bics	r3, r7
 8006a26:	d112      	bne.n	8006a4e <_dtoa_r+0x9e>
 8006a28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a34:	4323      	orrs	r3, r4
 8006a36:	f000 854d 	beq.w	80074d4 <_dtoa_r+0xb24>
 8006a3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c94 <_dtoa_r+0x2e4>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 854f 	beq.w	80074e4 <_dtoa_r+0xb34>
 8006a46:	f10a 0303 	add.w	r3, sl, #3
 8006a4a:	f000 bd49 	b.w	80074e0 <_dtoa_r+0xb30>
 8006a4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	ec51 0b17 	vmov	r0, r1, d7
 8006a58:	2300      	movs	r3, #0
 8006a5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006a5e:	f7fa f833 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a62:	4680      	mov	r8, r0
 8006a64:	b158      	cbz	r0, 8006a7e <_dtoa_r+0xce>
 8006a66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a68:	2301      	movs	r3, #1
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a6e:	b113      	cbz	r3, 8006a76 <_dtoa_r+0xc6>
 8006a70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a72:	4b84      	ldr	r3, [pc, #528]	@ (8006c84 <_dtoa_r+0x2d4>)
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c98 <_dtoa_r+0x2e8>
 8006a7a:	f000 bd33 	b.w	80074e4 <_dtoa_r+0xb34>
 8006a7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a82:	aa16      	add	r2, sp, #88	@ 0x58
 8006a84:	a917      	add	r1, sp, #92	@ 0x5c
 8006a86:	4658      	mov	r0, fp
 8006a88:	f001 f980 	bl	8007d8c <__d2b>
 8006a8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a90:	4681      	mov	r9, r0
 8006a92:	2e00      	cmp	r6, #0
 8006a94:	d077      	beq.n	8006b86 <_dtoa_r+0x1d6>
 8006a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006aa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006aac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4b74      	ldr	r3, [pc, #464]	@ (8006c88 <_dtoa_r+0x2d8>)
 8006ab6:	f7f9 fbe7 	bl	8000288 <__aeabi_dsub>
 8006aba:	a369      	add	r3, pc, #420	@ (adr r3, 8006c60 <_dtoa_r+0x2b0>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8006ac4:	a368      	add	r3, pc, #416	@ (adr r3, 8006c68 <_dtoa_r+0x2b8>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fbdf 	bl	800028c <__adddf3>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	f7f9 fd26 	bl	8000524 <__aeabi_i2d>
 8006ad8:	a365      	add	r3, pc, #404	@ (adr r3, 8006c70 <_dtoa_r+0x2c0>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fd8b 	bl	80005f8 <__aeabi_dmul>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fbcf 	bl	800028c <__adddf3>
 8006aee:	4604      	mov	r4, r0
 8006af0:	460d      	mov	r5, r1
 8006af2:	f7fa f831 	bl	8000b58 <__aeabi_d2iz>
 8006af6:	2200      	movs	r2, #0
 8006af8:	4607      	mov	r7, r0
 8006afa:	2300      	movs	r3, #0
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 ffec 	bl	8000adc <__aeabi_dcmplt>
 8006b04:	b140      	cbz	r0, 8006b18 <_dtoa_r+0x168>
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7f9 fd0c 	bl	8000524 <__aeabi_i2d>
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	462b      	mov	r3, r5
 8006b10:	f7f9 ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b14:	b900      	cbnz	r0, 8006b18 <_dtoa_r+0x168>
 8006b16:	3f01      	subs	r7, #1
 8006b18:	2f16      	cmp	r7, #22
 8006b1a:	d851      	bhi.n	8006bc0 <_dtoa_r+0x210>
 8006b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8006c8c <_dtoa_r+0x2dc>)
 8006b1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b2a:	f7f9 ffd7 	bl	8000adc <__aeabi_dcmplt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d048      	beq.n	8006bc4 <_dtoa_r+0x214>
 8006b32:	3f01      	subs	r7, #1
 8006b34:	2300      	movs	r3, #0
 8006b36:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b3a:	1b9b      	subs	r3, r3, r6
 8006b3c:	1e5a      	subs	r2, r3, #1
 8006b3e:	bf44      	itt	mi
 8006b40:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b44:	2300      	movmi	r3, #0
 8006b46:	9208      	str	r2, [sp, #32]
 8006b48:	bf54      	ite	pl
 8006b4a:	f04f 0800 	movpl.w	r8, #0
 8006b4e:	9308      	strmi	r3, [sp, #32]
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	db39      	blt.n	8006bc8 <_dtoa_r+0x218>
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006b58:	443b      	add	r3, r7
 8006b5a:	9308      	str	r3, [sp, #32]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b62:	2b09      	cmp	r3, #9
 8006b64:	d864      	bhi.n	8006c30 <_dtoa_r+0x280>
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	bfc4      	itt	gt
 8006b6a:	3b04      	subgt	r3, #4
 8006b6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b70:	f1a3 0302 	sub.w	r3, r3, #2
 8006b74:	bfcc      	ite	gt
 8006b76:	2400      	movgt	r4, #0
 8006b78:	2401      	movle	r4, #1
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d863      	bhi.n	8006c46 <_dtoa_r+0x296>
 8006b7e:	e8df f003 	tbb	[pc, r3]
 8006b82:	372a      	.short	0x372a
 8006b84:	5535      	.short	0x5535
 8006b86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b8a:	441e      	add	r6, r3
 8006b8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	bfc1      	itttt	gt
 8006b94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b98:	409f      	lslgt	r7, r3
 8006b9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ba2:	bfd6      	itet	le
 8006ba4:	f1c3 0320 	rsble	r3, r3, #32
 8006ba8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bac:	fa04 f003 	lslle.w	r0, r4, r3
 8006bb0:	f7f9 fca8 	bl	8000504 <__aeabi_ui2d>
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006bba:	3e01      	subs	r6, #1
 8006bbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8006bbe:	e777      	b.n	8006ab0 <_dtoa_r+0x100>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7b8      	b.n	8006b36 <_dtoa_r+0x186>
 8006bc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006bc6:	e7b7      	b.n	8006b38 <_dtoa_r+0x188>
 8006bc8:	427b      	negs	r3, r7
 8006bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bcc:	2300      	movs	r3, #0
 8006bce:	eba8 0807 	sub.w	r8, r8, r7
 8006bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bd4:	e7c4      	b.n	8006b60 <_dtoa_r+0x1b0>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dc35      	bgt.n	8006c4c <_dtoa_r+0x29c>
 8006be0:	2301      	movs	r3, #1
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	9307      	str	r3, [sp, #28]
 8006be6:	461a      	mov	r2, r3
 8006be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bea:	e00b      	b.n	8006c04 <_dtoa_r+0x254>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e7f3      	b.n	8006bd8 <_dtoa_r+0x228>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	9307      	str	r3, [sp, #28]
 8006c00:	bfb8      	it	lt
 8006c02:	2301      	movlt	r3, #1
 8006c04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	f102 0514 	add.w	r5, r2, #20
 8006c10:	429d      	cmp	r5, r3
 8006c12:	d91f      	bls.n	8006c54 <_dtoa_r+0x2a4>
 8006c14:	6041      	str	r1, [r0, #4]
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 fd8e 	bl	8007738 <_Balloc>
 8006c1c:	4682      	mov	sl, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d13c      	bne.n	8006c9c <_dtoa_r+0x2ec>
 8006c22:	4b1b      	ldr	r3, [pc, #108]	@ (8006c90 <_dtoa_r+0x2e0>)
 8006c24:	4602      	mov	r2, r0
 8006c26:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c2a:	e6d8      	b.n	80069de <_dtoa_r+0x2e>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e7e0      	b.n	8006bf2 <_dtoa_r+0x242>
 8006c30:	2401      	movs	r4, #1
 8006c32:	2300      	movs	r3, #0
 8006c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	9307      	str	r3, [sp, #28]
 8006c40:	2200      	movs	r2, #0
 8006c42:	2312      	movs	r3, #18
 8006c44:	e7d0      	b.n	8006be8 <_dtoa_r+0x238>
 8006c46:	2301      	movs	r3, #1
 8006c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c4a:	e7f5      	b.n	8006c38 <_dtoa_r+0x288>
 8006c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	9307      	str	r3, [sp, #28]
 8006c52:	e7d7      	b.n	8006c04 <_dtoa_r+0x254>
 8006c54:	3101      	adds	r1, #1
 8006c56:	0052      	lsls	r2, r2, #1
 8006c58:	e7d8      	b.n	8006c0c <_dtoa_r+0x25c>
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w
 8006c60:	636f4361 	.word	0x636f4361
 8006c64:	3fd287a7 	.word	0x3fd287a7
 8006c68:	8b60c8b3 	.word	0x8b60c8b3
 8006c6c:	3fc68a28 	.word	0x3fc68a28
 8006c70:	509f79fb 	.word	0x509f79fb
 8006c74:	3fd34413 	.word	0x3fd34413
 8006c78:	080087a9 	.word	0x080087a9
 8006c7c:	080087c0 	.word	0x080087c0
 8006c80:	7ff00000 	.word	0x7ff00000
 8006c84:	08008779 	.word	0x08008779
 8006c88:	3ff80000 	.word	0x3ff80000
 8006c8c:	080088b8 	.word	0x080088b8
 8006c90:	08008818 	.word	0x08008818
 8006c94:	080087a5 	.word	0x080087a5
 8006c98:	08008778 	.word	0x08008778
 8006c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ca0:	6018      	str	r0, [r3, #0]
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	2b0e      	cmp	r3, #14
 8006ca6:	f200 80a4 	bhi.w	8006df2 <_dtoa_r+0x442>
 8006caa:	2c00      	cmp	r4, #0
 8006cac:	f000 80a1 	beq.w	8006df2 <_dtoa_r+0x442>
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	dd33      	ble.n	8006d1c <_dtoa_r+0x36c>
 8006cb4:	4bad      	ldr	r3, [pc, #692]	@ (8006f6c <_dtoa_r+0x5bc>)
 8006cb6:	f007 020f 	and.w	r2, r7, #15
 8006cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cbe:	ed93 7b00 	vldr	d7, [r3]
 8006cc2:	05f8      	lsls	r0, r7, #23
 8006cc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ccc:	d516      	bpl.n	8006cfc <_dtoa_r+0x34c>
 8006cce:	4ba8      	ldr	r3, [pc, #672]	@ (8006f70 <_dtoa_r+0x5c0>)
 8006cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cd8:	f7f9 fdb8 	bl	800084c <__aeabi_ddiv>
 8006cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce0:	f004 040f 	and.w	r4, r4, #15
 8006ce4:	2603      	movs	r6, #3
 8006ce6:	4da2      	ldr	r5, [pc, #648]	@ (8006f70 <_dtoa_r+0x5c0>)
 8006ce8:	b954      	cbnz	r4, 8006d00 <_dtoa_r+0x350>
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf2:	f7f9 fdab 	bl	800084c <__aeabi_ddiv>
 8006cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cfa:	e028      	b.n	8006d4e <_dtoa_r+0x39e>
 8006cfc:	2602      	movs	r6, #2
 8006cfe:	e7f2      	b.n	8006ce6 <_dtoa_r+0x336>
 8006d00:	07e1      	lsls	r1, r4, #31
 8006d02:	d508      	bpl.n	8006d16 <_dtoa_r+0x366>
 8006d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d14:	3601      	adds	r6, #1
 8006d16:	1064      	asrs	r4, r4, #1
 8006d18:	3508      	adds	r5, #8
 8006d1a:	e7e5      	b.n	8006ce8 <_dtoa_r+0x338>
 8006d1c:	f000 80d2 	beq.w	8006ec4 <_dtoa_r+0x514>
 8006d20:	427c      	negs	r4, r7
 8006d22:	4b92      	ldr	r3, [pc, #584]	@ (8006f6c <_dtoa_r+0x5bc>)
 8006d24:	4d92      	ldr	r5, [pc, #584]	@ (8006f70 <_dtoa_r+0x5c0>)
 8006d26:	f004 020f 	and.w	r2, r4, #15
 8006d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d36:	f7f9 fc5f 	bl	80005f8 <__aeabi_dmul>
 8006d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3e:	1124      	asrs	r4, r4, #4
 8006d40:	2300      	movs	r3, #0
 8006d42:	2602      	movs	r6, #2
 8006d44:	2c00      	cmp	r4, #0
 8006d46:	f040 80b2 	bne.w	8006eae <_dtoa_r+0x4fe>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1d3      	bne.n	8006cf6 <_dtoa_r+0x346>
 8006d4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80b7 	beq.w	8006ec8 <_dtoa_r+0x518>
 8006d5a:	4b86      	ldr	r3, [pc, #536]	@ (8006f74 <_dtoa_r+0x5c4>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4629      	mov	r1, r5
 8006d62:	f7f9 febb 	bl	8000adc <__aeabi_dcmplt>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f000 80ae 	beq.w	8006ec8 <_dtoa_r+0x518>
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80aa 	beq.w	8006ec8 <_dtoa_r+0x518>
 8006d74:	9b00      	ldr	r3, [sp, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd37      	ble.n	8006dea <_dtoa_r+0x43a>
 8006d7a:	1e7b      	subs	r3, r7, #1
 8006d7c:	9304      	str	r3, [sp, #16]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4b7d      	ldr	r3, [pc, #500]	@ (8006f78 <_dtoa_r+0x5c8>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	4629      	mov	r1, r5
 8006d86:	f7f9 fc37 	bl	80005f8 <__aeabi_dmul>
 8006d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8e:	9c00      	ldr	r4, [sp, #0]
 8006d90:	3601      	adds	r6, #1
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7f9 fbc6 	bl	8000524 <__aeabi_i2d>
 8006d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d9c:	f7f9 fc2c 	bl	80005f8 <__aeabi_dmul>
 8006da0:	4b76      	ldr	r3, [pc, #472]	@ (8006f7c <_dtoa_r+0x5cc>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	f7f9 fa72 	bl	800028c <__adddf3>
 8006da8:	4605      	mov	r5, r0
 8006daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	f040 808d 	bne.w	8006ece <_dtoa_r+0x51e>
 8006db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db8:	4b71      	ldr	r3, [pc, #452]	@ (8006f80 <_dtoa_r+0x5d0>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f7f9 fa64 	bl	8000288 <__aeabi_dsub>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4633      	mov	r3, r6
 8006dcc:	f7f9 fea4 	bl	8000b18 <__aeabi_dcmpgt>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f040 828b 	bne.w	80072ec <_dtoa_r+0x93c>
 8006dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dda:	462a      	mov	r2, r5
 8006ddc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006de0:	f7f9 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f040 8128 	bne.w	800703a <_dtoa_r+0x68a>
 8006dea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006dee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006df2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f2c0 815a 	blt.w	80070ae <_dtoa_r+0x6fe>
 8006dfa:	2f0e      	cmp	r7, #14
 8006dfc:	f300 8157 	bgt.w	80070ae <_dtoa_r+0x6fe>
 8006e00:	4b5a      	ldr	r3, [pc, #360]	@ (8006f6c <_dtoa_r+0x5bc>)
 8006e02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e06:	ed93 7b00 	vldr	d7, [r3]
 8006e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	ed8d 7b00 	vstr	d7, [sp]
 8006e12:	da03      	bge.n	8006e1c <_dtoa_r+0x46c>
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f340 8101 	ble.w	800701e <_dtoa_r+0x66e>
 8006e1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e20:	4656      	mov	r6, sl
 8006e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e26:	4620      	mov	r0, r4
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7f9 fd0f 	bl	800084c <__aeabi_ddiv>
 8006e2e:	f7f9 fe93 	bl	8000b58 <__aeabi_d2iz>
 8006e32:	4680      	mov	r8, r0
 8006e34:	f7f9 fb76 	bl	8000524 <__aeabi_i2d>
 8006e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e3c:	f7f9 fbdc 	bl	80005f8 <__aeabi_dmul>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e4c:	f7f9 fa1c 	bl	8000288 <__aeabi_dsub>
 8006e50:	f806 4b01 	strb.w	r4, [r6], #1
 8006e54:	9d07      	ldr	r5, [sp, #28]
 8006e56:	eba6 040a 	sub.w	r4, r6, sl
 8006e5a:	42a5      	cmp	r5, r4
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	f040 8117 	bne.w	8007092 <_dtoa_r+0x6e2>
 8006e64:	f7f9 fa12 	bl	800028c <__adddf3>
 8006e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	460d      	mov	r5, r1
 8006e70:	f7f9 fe52 	bl	8000b18 <__aeabi_dcmpgt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f040 80f9 	bne.w	800706c <_dtoa_r+0x6bc>
 8006e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	4629      	mov	r1, r5
 8006e82:	f7f9 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e86:	b118      	cbz	r0, 8006e90 <_dtoa_r+0x4e0>
 8006e88:	f018 0f01 	tst.w	r8, #1
 8006e8c:	f040 80ee 	bne.w	800706c <_dtoa_r+0x6bc>
 8006e90:	4649      	mov	r1, r9
 8006e92:	4658      	mov	r0, fp
 8006e94:	f000 fc90 	bl	80077b8 <_Bfree>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	7033      	strb	r3, [r6, #0]
 8006e9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e9e:	3701      	adds	r7, #1
 8006ea0:	601f      	str	r7, [r3, #0]
 8006ea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 831d 	beq.w	80074e4 <_dtoa_r+0xb34>
 8006eaa:	601e      	str	r6, [r3, #0]
 8006eac:	e31a      	b.n	80074e4 <_dtoa_r+0xb34>
 8006eae:	07e2      	lsls	r2, r4, #31
 8006eb0:	d505      	bpl.n	8006ebe <_dtoa_r+0x50e>
 8006eb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006eb6:	f7f9 fb9f 	bl	80005f8 <__aeabi_dmul>
 8006eba:	3601      	adds	r6, #1
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	1064      	asrs	r4, r4, #1
 8006ec0:	3508      	adds	r5, #8
 8006ec2:	e73f      	b.n	8006d44 <_dtoa_r+0x394>
 8006ec4:	2602      	movs	r6, #2
 8006ec6:	e742      	b.n	8006d4e <_dtoa_r+0x39e>
 8006ec8:	9c07      	ldr	r4, [sp, #28]
 8006eca:	9704      	str	r7, [sp, #16]
 8006ecc:	e761      	b.n	8006d92 <_dtoa_r+0x3e2>
 8006ece:	4b27      	ldr	r3, [pc, #156]	@ (8006f6c <_dtoa_r+0x5bc>)
 8006ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ed6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eda:	4454      	add	r4, sl
 8006edc:	2900      	cmp	r1, #0
 8006ede:	d053      	beq.n	8006f88 <_dtoa_r+0x5d8>
 8006ee0:	4928      	ldr	r1, [pc, #160]	@ (8006f84 <_dtoa_r+0x5d4>)
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f7f9 fcb2 	bl	800084c <__aeabi_ddiv>
 8006ee8:	4633      	mov	r3, r6
 8006eea:	462a      	mov	r2, r5
 8006eec:	f7f9 f9cc 	bl	8000288 <__aeabi_dsub>
 8006ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ef4:	4656      	mov	r6, sl
 8006ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efa:	f7f9 fe2d 	bl	8000b58 <__aeabi_d2iz>
 8006efe:	4605      	mov	r5, r0
 8006f00:	f7f9 fb10 	bl	8000524 <__aeabi_i2d>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f0c:	f7f9 f9bc 	bl	8000288 <__aeabi_dsub>
 8006f10:	3530      	adds	r5, #48	@ 0x30
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f1a:	f806 5b01 	strb.w	r5, [r6], #1
 8006f1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f22:	f7f9 fddb 	bl	8000adc <__aeabi_dcmplt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d171      	bne.n	800700e <_dtoa_r+0x65e>
 8006f2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f2e:	4911      	ldr	r1, [pc, #68]	@ (8006f74 <_dtoa_r+0x5c4>)
 8006f30:	2000      	movs	r0, #0
 8006f32:	f7f9 f9a9 	bl	8000288 <__aeabi_dsub>
 8006f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f3a:	f7f9 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8095 	bne.w	800706e <_dtoa_r+0x6be>
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	f43f af50 	beq.w	8006dea <_dtoa_r+0x43a>
 8006f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <_dtoa_r+0x5c8>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	f7f9 fb51 	bl	80005f8 <__aeabi_dmul>
 8006f56:	4b08      	ldr	r3, [pc, #32]	@ (8006f78 <_dtoa_r+0x5c8>)
 8006f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f62:	f7f9 fb49 	bl	80005f8 <__aeabi_dmul>
 8006f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6a:	e7c4      	b.n	8006ef6 <_dtoa_r+0x546>
 8006f6c:	080088b8 	.word	0x080088b8
 8006f70:	08008890 	.word	0x08008890
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	40240000 	.word	0x40240000
 8006f7c:	401c0000 	.word	0x401c0000
 8006f80:	40140000 	.word	0x40140000
 8006f84:	3fe00000 	.word	0x3fe00000
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f94:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f96:	4656      	mov	r6, sl
 8006f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f9c:	f7f9 fddc 	bl	8000b58 <__aeabi_d2iz>
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	f7f9 fabf 	bl	8000524 <__aeabi_i2d>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fae:	f7f9 f96b 	bl	8000288 <__aeabi_dsub>
 8006fb2:	3530      	adds	r5, #48	@ 0x30
 8006fb4:	f806 5b01 	strb.w	r5, [r6], #1
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	42a6      	cmp	r6, r4
 8006fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	d124      	bne.n	8007012 <_dtoa_r+0x662>
 8006fc8:	4bac      	ldr	r3, [pc, #688]	@ (800727c <_dtoa_r+0x8cc>)
 8006fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fce:	f7f9 f95d 	bl	800028c <__adddf3>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fda:	f7f9 fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d145      	bne.n	800706e <_dtoa_r+0x6be>
 8006fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fe6:	49a5      	ldr	r1, [pc, #660]	@ (800727c <_dtoa_r+0x8cc>)
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f7f9 f94d 	bl	8000288 <__aeabi_dsub>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff6:	f7f9 fd71 	bl	8000adc <__aeabi_dcmplt>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f43f aef5 	beq.w	8006dea <_dtoa_r+0x43a>
 8007000:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007002:	1e73      	subs	r3, r6, #1
 8007004:	9315      	str	r3, [sp, #84]	@ 0x54
 8007006:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800700a:	2b30      	cmp	r3, #48	@ 0x30
 800700c:	d0f8      	beq.n	8007000 <_dtoa_r+0x650>
 800700e:	9f04      	ldr	r7, [sp, #16]
 8007010:	e73e      	b.n	8006e90 <_dtoa_r+0x4e0>
 8007012:	4b9b      	ldr	r3, [pc, #620]	@ (8007280 <_dtoa_r+0x8d0>)
 8007014:	f7f9 faf0 	bl	80005f8 <__aeabi_dmul>
 8007018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701c:	e7bc      	b.n	8006f98 <_dtoa_r+0x5e8>
 800701e:	d10c      	bne.n	800703a <_dtoa_r+0x68a>
 8007020:	4b98      	ldr	r3, [pc, #608]	@ (8007284 <_dtoa_r+0x8d4>)
 8007022:	2200      	movs	r2, #0
 8007024:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007030:	f7f9 fd68 	bl	8000b04 <__aeabi_dcmpge>
 8007034:	2800      	cmp	r0, #0
 8007036:	f000 8157 	beq.w	80072e8 <_dtoa_r+0x938>
 800703a:	2400      	movs	r4, #0
 800703c:	4625      	mov	r5, r4
 800703e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007040:	43db      	mvns	r3, r3
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	4656      	mov	r6, sl
 8007046:	2700      	movs	r7, #0
 8007048:	4621      	mov	r1, r4
 800704a:	4658      	mov	r0, fp
 800704c:	f000 fbb4 	bl	80077b8 <_Bfree>
 8007050:	2d00      	cmp	r5, #0
 8007052:	d0dc      	beq.n	800700e <_dtoa_r+0x65e>
 8007054:	b12f      	cbz	r7, 8007062 <_dtoa_r+0x6b2>
 8007056:	42af      	cmp	r7, r5
 8007058:	d003      	beq.n	8007062 <_dtoa_r+0x6b2>
 800705a:	4639      	mov	r1, r7
 800705c:	4658      	mov	r0, fp
 800705e:	f000 fbab 	bl	80077b8 <_Bfree>
 8007062:	4629      	mov	r1, r5
 8007064:	4658      	mov	r0, fp
 8007066:	f000 fba7 	bl	80077b8 <_Bfree>
 800706a:	e7d0      	b.n	800700e <_dtoa_r+0x65e>
 800706c:	9704      	str	r7, [sp, #16]
 800706e:	4633      	mov	r3, r6
 8007070:	461e      	mov	r6, r3
 8007072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007076:	2a39      	cmp	r2, #57	@ 0x39
 8007078:	d107      	bne.n	800708a <_dtoa_r+0x6da>
 800707a:	459a      	cmp	sl, r3
 800707c:	d1f8      	bne.n	8007070 <_dtoa_r+0x6c0>
 800707e:	9a04      	ldr	r2, [sp, #16]
 8007080:	3201      	adds	r2, #1
 8007082:	9204      	str	r2, [sp, #16]
 8007084:	2230      	movs	r2, #48	@ 0x30
 8007086:	f88a 2000 	strb.w	r2, [sl]
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	3201      	adds	r2, #1
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e7bd      	b.n	800700e <_dtoa_r+0x65e>
 8007092:	4b7b      	ldr	r3, [pc, #492]	@ (8007280 <_dtoa_r+0x8d0>)
 8007094:	2200      	movs	r2, #0
 8007096:	f7f9 faaf 	bl	80005f8 <__aeabi_dmul>
 800709a:	2200      	movs	r2, #0
 800709c:	2300      	movs	r3, #0
 800709e:	4604      	mov	r4, r0
 80070a0:	460d      	mov	r5, r1
 80070a2:	f7f9 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f43f aebb 	beq.w	8006e22 <_dtoa_r+0x472>
 80070ac:	e6f0      	b.n	8006e90 <_dtoa_r+0x4e0>
 80070ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	f000 80db 	beq.w	800726c <_dtoa_r+0x8bc>
 80070b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070b8:	2a01      	cmp	r2, #1
 80070ba:	f300 80bf 	bgt.w	800723c <_dtoa_r+0x88c>
 80070be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	f000 80b7 	beq.w	8007234 <_dtoa_r+0x884>
 80070c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80070ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070cc:	4646      	mov	r6, r8
 80070ce:	9a08      	ldr	r2, [sp, #32]
 80070d0:	2101      	movs	r1, #1
 80070d2:	441a      	add	r2, r3
 80070d4:	4658      	mov	r0, fp
 80070d6:	4498      	add	r8, r3
 80070d8:	9208      	str	r2, [sp, #32]
 80070da:	f000 fc21 	bl	8007920 <__i2b>
 80070de:	4605      	mov	r5, r0
 80070e0:	b15e      	cbz	r6, 80070fa <_dtoa_r+0x74a>
 80070e2:	9b08      	ldr	r3, [sp, #32]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dd08      	ble.n	80070fa <_dtoa_r+0x74a>
 80070e8:	42b3      	cmp	r3, r6
 80070ea:	9a08      	ldr	r2, [sp, #32]
 80070ec:	bfa8      	it	ge
 80070ee:	4633      	movge	r3, r6
 80070f0:	eba8 0803 	sub.w	r8, r8, r3
 80070f4:	1af6      	subs	r6, r6, r3
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	9308      	str	r3, [sp, #32]
 80070fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fc:	b1f3      	cbz	r3, 800713c <_dtoa_r+0x78c>
 80070fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80b7 	beq.w	8007274 <_dtoa_r+0x8c4>
 8007106:	b18c      	cbz	r4, 800712c <_dtoa_r+0x77c>
 8007108:	4629      	mov	r1, r5
 800710a:	4622      	mov	r2, r4
 800710c:	4658      	mov	r0, fp
 800710e:	f000 fcc7 	bl	8007aa0 <__pow5mult>
 8007112:	464a      	mov	r2, r9
 8007114:	4601      	mov	r1, r0
 8007116:	4605      	mov	r5, r0
 8007118:	4658      	mov	r0, fp
 800711a:	f000 fc17 	bl	800794c <__multiply>
 800711e:	4649      	mov	r1, r9
 8007120:	9004      	str	r0, [sp, #16]
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fb48 	bl	80077b8 <_Bfree>
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	4699      	mov	r9, r3
 800712c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712e:	1b1a      	subs	r2, r3, r4
 8007130:	d004      	beq.n	800713c <_dtoa_r+0x78c>
 8007132:	4649      	mov	r1, r9
 8007134:	4658      	mov	r0, fp
 8007136:	f000 fcb3 	bl	8007aa0 <__pow5mult>
 800713a:	4681      	mov	r9, r0
 800713c:	2101      	movs	r1, #1
 800713e:	4658      	mov	r0, fp
 8007140:	f000 fbee 	bl	8007920 <__i2b>
 8007144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007146:	4604      	mov	r4, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 81cf 	beq.w	80074ec <_dtoa_r+0xb3c>
 800714e:	461a      	mov	r2, r3
 8007150:	4601      	mov	r1, r0
 8007152:	4658      	mov	r0, fp
 8007154:	f000 fca4 	bl	8007aa0 <__pow5mult>
 8007158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715a:	2b01      	cmp	r3, #1
 800715c:	4604      	mov	r4, r0
 800715e:	f300 8095 	bgt.w	800728c <_dtoa_r+0x8dc>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 8087 	bne.w	8007278 <_dtoa_r+0x8c8>
 800716a:	9b03      	ldr	r3, [sp, #12]
 800716c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 8089 	bne.w	8007288 <_dtoa_r+0x8d8>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800717c:	0d1b      	lsrs	r3, r3, #20
 800717e:	051b      	lsls	r3, r3, #20
 8007180:	b12b      	cbz	r3, 800718e <_dtoa_r+0x7de>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	3301      	adds	r3, #1
 8007186:	9308      	str	r3, [sp, #32]
 8007188:	f108 0801 	add.w	r8, r8, #1
 800718c:	2301      	movs	r3, #1
 800718e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 81b0 	beq.w	80074f8 <_dtoa_r+0xb48>
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800719e:	6918      	ldr	r0, [r3, #16]
 80071a0:	f000 fb72 	bl	8007888 <__hi0bits>
 80071a4:	f1c0 0020 	rsb	r0, r0, #32
 80071a8:	9b08      	ldr	r3, [sp, #32]
 80071aa:	4418      	add	r0, r3
 80071ac:	f010 001f 	ands.w	r0, r0, #31
 80071b0:	d077      	beq.n	80072a2 <_dtoa_r+0x8f2>
 80071b2:	f1c0 0320 	rsb	r3, r0, #32
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	dd6b      	ble.n	8007292 <_dtoa_r+0x8e2>
 80071ba:	9b08      	ldr	r3, [sp, #32]
 80071bc:	f1c0 001c 	rsb	r0, r0, #28
 80071c0:	4403      	add	r3, r0
 80071c2:	4480      	add	r8, r0
 80071c4:	4406      	add	r6, r0
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	f1b8 0f00 	cmp.w	r8, #0
 80071cc:	dd05      	ble.n	80071da <_dtoa_r+0x82a>
 80071ce:	4649      	mov	r1, r9
 80071d0:	4642      	mov	r2, r8
 80071d2:	4658      	mov	r0, fp
 80071d4:	f000 fcbe 	bl	8007b54 <__lshift>
 80071d8:	4681      	mov	r9, r0
 80071da:	9b08      	ldr	r3, [sp, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dd05      	ble.n	80071ec <_dtoa_r+0x83c>
 80071e0:	4621      	mov	r1, r4
 80071e2:	461a      	mov	r2, r3
 80071e4:	4658      	mov	r0, fp
 80071e6:	f000 fcb5 	bl	8007b54 <__lshift>
 80071ea:	4604      	mov	r4, r0
 80071ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d059      	beq.n	80072a6 <_dtoa_r+0x8f6>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4648      	mov	r0, r9
 80071f6:	f000 fd19 	bl	8007c2c <__mcmp>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	da53      	bge.n	80072a6 <_dtoa_r+0x8f6>
 80071fe:	1e7b      	subs	r3, r7, #1
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	4649      	mov	r1, r9
 8007204:	2300      	movs	r3, #0
 8007206:	220a      	movs	r2, #10
 8007208:	4658      	mov	r0, fp
 800720a:	f000 faf7 	bl	80077fc <__multadd>
 800720e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007210:	4681      	mov	r9, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8172 	beq.w	80074fc <_dtoa_r+0xb4c>
 8007218:	2300      	movs	r3, #0
 800721a:	4629      	mov	r1, r5
 800721c:	220a      	movs	r2, #10
 800721e:	4658      	mov	r0, fp
 8007220:	f000 faec 	bl	80077fc <__multadd>
 8007224:	9b00      	ldr	r3, [sp, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	4605      	mov	r5, r0
 800722a:	dc67      	bgt.n	80072fc <_dtoa_r+0x94c>
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	2b02      	cmp	r3, #2
 8007230:	dc41      	bgt.n	80072b6 <_dtoa_r+0x906>
 8007232:	e063      	b.n	80072fc <_dtoa_r+0x94c>
 8007234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800723a:	e746      	b.n	80070ca <_dtoa_r+0x71a>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	1e5c      	subs	r4, r3, #1
 8007240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007242:	42a3      	cmp	r3, r4
 8007244:	bfbf      	itttt	lt
 8007246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007248:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800724a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800724c:	1ae3      	sublt	r3, r4, r3
 800724e:	bfb4      	ite	lt
 8007250:	18d2      	addlt	r2, r2, r3
 8007252:	1b1c      	subge	r4, r3, r4
 8007254:	9b07      	ldr	r3, [sp, #28]
 8007256:	bfbc      	itt	lt
 8007258:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800725a:	2400      	movlt	r4, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	bfb5      	itete	lt
 8007260:	eba8 0603 	sublt.w	r6, r8, r3
 8007264:	9b07      	ldrge	r3, [sp, #28]
 8007266:	2300      	movlt	r3, #0
 8007268:	4646      	movge	r6, r8
 800726a:	e730      	b.n	80070ce <_dtoa_r+0x71e>
 800726c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800726e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007270:	4646      	mov	r6, r8
 8007272:	e735      	b.n	80070e0 <_dtoa_r+0x730>
 8007274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007276:	e75c      	b.n	8007132 <_dtoa_r+0x782>
 8007278:	2300      	movs	r3, #0
 800727a:	e788      	b.n	800718e <_dtoa_r+0x7de>
 800727c:	3fe00000 	.word	0x3fe00000
 8007280:	40240000 	.word	0x40240000
 8007284:	40140000 	.word	0x40140000
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	e780      	b.n	800718e <_dtoa_r+0x7de>
 800728c:	2300      	movs	r3, #0
 800728e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007290:	e782      	b.n	8007198 <_dtoa_r+0x7e8>
 8007292:	d099      	beq.n	80071c8 <_dtoa_r+0x818>
 8007294:	9a08      	ldr	r2, [sp, #32]
 8007296:	331c      	adds	r3, #28
 8007298:	441a      	add	r2, r3
 800729a:	4498      	add	r8, r3
 800729c:	441e      	add	r6, r3
 800729e:	9208      	str	r2, [sp, #32]
 80072a0:	e792      	b.n	80071c8 <_dtoa_r+0x818>
 80072a2:	4603      	mov	r3, r0
 80072a4:	e7f6      	b.n	8007294 <_dtoa_r+0x8e4>
 80072a6:	9b07      	ldr	r3, [sp, #28]
 80072a8:	9704      	str	r7, [sp, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dc20      	bgt.n	80072f0 <_dtoa_r+0x940>
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	dd1e      	ble.n	80072f4 <_dtoa_r+0x944>
 80072b6:	9b00      	ldr	r3, [sp, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f47f aec0 	bne.w	800703e <_dtoa_r+0x68e>
 80072be:	4621      	mov	r1, r4
 80072c0:	2205      	movs	r2, #5
 80072c2:	4658      	mov	r0, fp
 80072c4:	f000 fa9a 	bl	80077fc <__multadd>
 80072c8:	4601      	mov	r1, r0
 80072ca:	4604      	mov	r4, r0
 80072cc:	4648      	mov	r0, r9
 80072ce:	f000 fcad 	bl	8007c2c <__mcmp>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f77f aeb3 	ble.w	800703e <_dtoa_r+0x68e>
 80072d8:	4656      	mov	r6, sl
 80072da:	2331      	movs	r3, #49	@ 0x31
 80072dc:	f806 3b01 	strb.w	r3, [r6], #1
 80072e0:	9b04      	ldr	r3, [sp, #16]
 80072e2:	3301      	adds	r3, #1
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	e6ae      	b.n	8007046 <_dtoa_r+0x696>
 80072e8:	9c07      	ldr	r4, [sp, #28]
 80072ea:	9704      	str	r7, [sp, #16]
 80072ec:	4625      	mov	r5, r4
 80072ee:	e7f3      	b.n	80072d8 <_dtoa_r+0x928>
 80072f0:	9b07      	ldr	r3, [sp, #28]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 8104 	beq.w	8007504 <_dtoa_r+0xb54>
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	dd05      	ble.n	800730c <_dtoa_r+0x95c>
 8007300:	4629      	mov	r1, r5
 8007302:	4632      	mov	r2, r6
 8007304:	4658      	mov	r0, fp
 8007306:	f000 fc25 	bl	8007b54 <__lshift>
 800730a:	4605      	mov	r5, r0
 800730c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d05a      	beq.n	80073c8 <_dtoa_r+0xa18>
 8007312:	6869      	ldr	r1, [r5, #4]
 8007314:	4658      	mov	r0, fp
 8007316:	f000 fa0f 	bl	8007738 <_Balloc>
 800731a:	4606      	mov	r6, r0
 800731c:	b928      	cbnz	r0, 800732a <_dtoa_r+0x97a>
 800731e:	4b84      	ldr	r3, [pc, #528]	@ (8007530 <_dtoa_r+0xb80>)
 8007320:	4602      	mov	r2, r0
 8007322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007326:	f7ff bb5a 	b.w	80069de <_dtoa_r+0x2e>
 800732a:	692a      	ldr	r2, [r5, #16]
 800732c:	3202      	adds	r2, #2
 800732e:	0092      	lsls	r2, r2, #2
 8007330:	f105 010c 	add.w	r1, r5, #12
 8007334:	300c      	adds	r0, #12
 8007336:	f7ff faa4 	bl	8006882 <memcpy>
 800733a:	2201      	movs	r2, #1
 800733c:	4631      	mov	r1, r6
 800733e:	4658      	mov	r0, fp
 8007340:	f000 fc08 	bl	8007b54 <__lshift>
 8007344:	f10a 0301 	add.w	r3, sl, #1
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	4453      	add	r3, sl
 800734e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007350:	9b02      	ldr	r3, [sp, #8]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	462f      	mov	r7, r5
 8007358:	930a      	str	r3, [sp, #40]	@ 0x28
 800735a:	4605      	mov	r5, r0
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	4621      	mov	r1, r4
 8007360:	3b01      	subs	r3, #1
 8007362:	4648      	mov	r0, r9
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	f7ff fa9a 	bl	800689e <quorem>
 800736a:	4639      	mov	r1, r7
 800736c:	9002      	str	r0, [sp, #8]
 800736e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007372:	4648      	mov	r0, r9
 8007374:	f000 fc5a 	bl	8007c2c <__mcmp>
 8007378:	462a      	mov	r2, r5
 800737a:	9008      	str	r0, [sp, #32]
 800737c:	4621      	mov	r1, r4
 800737e:	4658      	mov	r0, fp
 8007380:	f000 fc70 	bl	8007c64 <__mdiff>
 8007384:	68c2      	ldr	r2, [r0, #12]
 8007386:	4606      	mov	r6, r0
 8007388:	bb02      	cbnz	r2, 80073cc <_dtoa_r+0xa1c>
 800738a:	4601      	mov	r1, r0
 800738c:	4648      	mov	r0, r9
 800738e:	f000 fc4d 	bl	8007c2c <__mcmp>
 8007392:	4602      	mov	r2, r0
 8007394:	4631      	mov	r1, r6
 8007396:	4658      	mov	r0, fp
 8007398:	920e      	str	r2, [sp, #56]	@ 0x38
 800739a:	f000 fa0d 	bl	80077b8 <_Bfree>
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073a2:	9e07      	ldr	r6, [sp, #28]
 80073a4:	ea43 0102 	orr.w	r1, r3, r2
 80073a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073aa:	4319      	orrs	r1, r3
 80073ac:	d110      	bne.n	80073d0 <_dtoa_r+0xa20>
 80073ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073b2:	d029      	beq.n	8007408 <_dtoa_r+0xa58>
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dd02      	ble.n	80073c0 <_dtoa_r+0xa10>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80073c0:	9b00      	ldr	r3, [sp, #0]
 80073c2:	f883 8000 	strb.w	r8, [r3]
 80073c6:	e63f      	b.n	8007048 <_dtoa_r+0x698>
 80073c8:	4628      	mov	r0, r5
 80073ca:	e7bb      	b.n	8007344 <_dtoa_r+0x994>
 80073cc:	2201      	movs	r2, #1
 80073ce:	e7e1      	b.n	8007394 <_dtoa_r+0x9e4>
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	db04      	blt.n	80073e0 <_dtoa_r+0xa30>
 80073d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073d8:	430b      	orrs	r3, r1
 80073da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073dc:	430b      	orrs	r3, r1
 80073de:	d120      	bne.n	8007422 <_dtoa_r+0xa72>
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	dded      	ble.n	80073c0 <_dtoa_r+0xa10>
 80073e4:	4649      	mov	r1, r9
 80073e6:	2201      	movs	r2, #1
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fbb3 	bl	8007b54 <__lshift>
 80073ee:	4621      	mov	r1, r4
 80073f0:	4681      	mov	r9, r0
 80073f2:	f000 fc1b 	bl	8007c2c <__mcmp>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	dc03      	bgt.n	8007402 <_dtoa_r+0xa52>
 80073fa:	d1e1      	bne.n	80073c0 <_dtoa_r+0xa10>
 80073fc:	f018 0f01 	tst.w	r8, #1
 8007400:	d0de      	beq.n	80073c0 <_dtoa_r+0xa10>
 8007402:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007406:	d1d8      	bne.n	80073ba <_dtoa_r+0xa0a>
 8007408:	9a00      	ldr	r2, [sp, #0]
 800740a:	2339      	movs	r3, #57	@ 0x39
 800740c:	7013      	strb	r3, [r2, #0]
 800740e:	4633      	mov	r3, r6
 8007410:	461e      	mov	r6, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007418:	2a39      	cmp	r2, #57	@ 0x39
 800741a:	d052      	beq.n	80074c2 <_dtoa_r+0xb12>
 800741c:	3201      	adds	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e612      	b.n	8007048 <_dtoa_r+0x698>
 8007422:	2a00      	cmp	r2, #0
 8007424:	dd07      	ble.n	8007436 <_dtoa_r+0xa86>
 8007426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800742a:	d0ed      	beq.n	8007408 <_dtoa_r+0xa58>
 800742c:	9a00      	ldr	r2, [sp, #0]
 800742e:	f108 0301 	add.w	r3, r8, #1
 8007432:	7013      	strb	r3, [r2, #0]
 8007434:	e608      	b.n	8007048 <_dtoa_r+0x698>
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	9a07      	ldr	r2, [sp, #28]
 800743a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800743e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007440:	4293      	cmp	r3, r2
 8007442:	d028      	beq.n	8007496 <_dtoa_r+0xae6>
 8007444:	4649      	mov	r1, r9
 8007446:	2300      	movs	r3, #0
 8007448:	220a      	movs	r2, #10
 800744a:	4658      	mov	r0, fp
 800744c:	f000 f9d6 	bl	80077fc <__multadd>
 8007450:	42af      	cmp	r7, r5
 8007452:	4681      	mov	r9, r0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	f04f 020a 	mov.w	r2, #10
 800745c:	4639      	mov	r1, r7
 800745e:	4658      	mov	r0, fp
 8007460:	d107      	bne.n	8007472 <_dtoa_r+0xac2>
 8007462:	f000 f9cb 	bl	80077fc <__multadd>
 8007466:	4607      	mov	r7, r0
 8007468:	4605      	mov	r5, r0
 800746a:	9b07      	ldr	r3, [sp, #28]
 800746c:	3301      	adds	r3, #1
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	e774      	b.n	800735c <_dtoa_r+0x9ac>
 8007472:	f000 f9c3 	bl	80077fc <__multadd>
 8007476:	4629      	mov	r1, r5
 8007478:	4607      	mov	r7, r0
 800747a:	2300      	movs	r3, #0
 800747c:	220a      	movs	r2, #10
 800747e:	4658      	mov	r0, fp
 8007480:	f000 f9bc 	bl	80077fc <__multadd>
 8007484:	4605      	mov	r5, r0
 8007486:	e7f0      	b.n	800746a <_dtoa_r+0xaba>
 8007488:	9b00      	ldr	r3, [sp, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	bfcc      	ite	gt
 800748e:	461e      	movgt	r6, r3
 8007490:	2601      	movle	r6, #1
 8007492:	4456      	add	r6, sl
 8007494:	2700      	movs	r7, #0
 8007496:	4649      	mov	r1, r9
 8007498:	2201      	movs	r2, #1
 800749a:	4658      	mov	r0, fp
 800749c:	f000 fb5a 	bl	8007b54 <__lshift>
 80074a0:	4621      	mov	r1, r4
 80074a2:	4681      	mov	r9, r0
 80074a4:	f000 fbc2 	bl	8007c2c <__mcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	dcb0      	bgt.n	800740e <_dtoa_r+0xa5e>
 80074ac:	d102      	bne.n	80074b4 <_dtoa_r+0xb04>
 80074ae:	f018 0f01 	tst.w	r8, #1
 80074b2:	d1ac      	bne.n	800740e <_dtoa_r+0xa5e>
 80074b4:	4633      	mov	r3, r6
 80074b6:	461e      	mov	r6, r3
 80074b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074bc:	2a30      	cmp	r2, #48	@ 0x30
 80074be:	d0fa      	beq.n	80074b6 <_dtoa_r+0xb06>
 80074c0:	e5c2      	b.n	8007048 <_dtoa_r+0x698>
 80074c2:	459a      	cmp	sl, r3
 80074c4:	d1a4      	bne.n	8007410 <_dtoa_r+0xa60>
 80074c6:	9b04      	ldr	r3, [sp, #16]
 80074c8:	3301      	adds	r3, #1
 80074ca:	9304      	str	r3, [sp, #16]
 80074cc:	2331      	movs	r3, #49	@ 0x31
 80074ce:	f88a 3000 	strb.w	r3, [sl]
 80074d2:	e5b9      	b.n	8007048 <_dtoa_r+0x698>
 80074d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007534 <_dtoa_r+0xb84>
 80074da:	b11b      	cbz	r3, 80074e4 <_dtoa_r+0xb34>
 80074dc:	f10a 0308 	add.w	r3, sl, #8
 80074e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	4650      	mov	r0, sl
 80074e6:	b019      	add	sp, #100	@ 0x64
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	f77f ae37 	ble.w	8007162 <_dtoa_r+0x7b2>
 80074f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074f8:	2001      	movs	r0, #1
 80074fa:	e655      	b.n	80071a8 <_dtoa_r+0x7f8>
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f77f aed6 	ble.w	80072b0 <_dtoa_r+0x900>
 8007504:	4656      	mov	r6, sl
 8007506:	4621      	mov	r1, r4
 8007508:	4648      	mov	r0, r9
 800750a:	f7ff f9c8 	bl	800689e <quorem>
 800750e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007512:	f806 8b01 	strb.w	r8, [r6], #1
 8007516:	9b00      	ldr	r3, [sp, #0]
 8007518:	eba6 020a 	sub.w	r2, r6, sl
 800751c:	4293      	cmp	r3, r2
 800751e:	ddb3      	ble.n	8007488 <_dtoa_r+0xad8>
 8007520:	4649      	mov	r1, r9
 8007522:	2300      	movs	r3, #0
 8007524:	220a      	movs	r2, #10
 8007526:	4658      	mov	r0, fp
 8007528:	f000 f968 	bl	80077fc <__multadd>
 800752c:	4681      	mov	r9, r0
 800752e:	e7ea      	b.n	8007506 <_dtoa_r+0xb56>
 8007530:	08008818 	.word	0x08008818
 8007534:	0800879c 	.word	0x0800879c

08007538 <_free_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4605      	mov	r5, r0
 800753c:	2900      	cmp	r1, #0
 800753e:	d041      	beq.n	80075c4 <_free_r+0x8c>
 8007540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007544:	1f0c      	subs	r4, r1, #4
 8007546:	2b00      	cmp	r3, #0
 8007548:	bfb8      	it	lt
 800754a:	18e4      	addlt	r4, r4, r3
 800754c:	f000 f8e8 	bl	8007720 <__malloc_lock>
 8007550:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <_free_r+0x90>)
 8007552:	6813      	ldr	r3, [r2, #0]
 8007554:	b933      	cbnz	r3, 8007564 <_free_r+0x2c>
 8007556:	6063      	str	r3, [r4, #4]
 8007558:	6014      	str	r4, [r2, #0]
 800755a:	4628      	mov	r0, r5
 800755c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007560:	f000 b8e4 	b.w	800772c <__malloc_unlock>
 8007564:	42a3      	cmp	r3, r4
 8007566:	d908      	bls.n	800757a <_free_r+0x42>
 8007568:	6820      	ldr	r0, [r4, #0]
 800756a:	1821      	adds	r1, r4, r0
 800756c:	428b      	cmp	r3, r1
 800756e:	bf01      	itttt	eq
 8007570:	6819      	ldreq	r1, [r3, #0]
 8007572:	685b      	ldreq	r3, [r3, #4]
 8007574:	1809      	addeq	r1, r1, r0
 8007576:	6021      	streq	r1, [r4, #0]
 8007578:	e7ed      	b.n	8007556 <_free_r+0x1e>
 800757a:	461a      	mov	r2, r3
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	b10b      	cbz	r3, 8007584 <_free_r+0x4c>
 8007580:	42a3      	cmp	r3, r4
 8007582:	d9fa      	bls.n	800757a <_free_r+0x42>
 8007584:	6811      	ldr	r1, [r2, #0]
 8007586:	1850      	adds	r0, r2, r1
 8007588:	42a0      	cmp	r0, r4
 800758a:	d10b      	bne.n	80075a4 <_free_r+0x6c>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	4401      	add	r1, r0
 8007590:	1850      	adds	r0, r2, r1
 8007592:	4283      	cmp	r3, r0
 8007594:	6011      	str	r1, [r2, #0]
 8007596:	d1e0      	bne.n	800755a <_free_r+0x22>
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	6053      	str	r3, [r2, #4]
 800759e:	4408      	add	r0, r1
 80075a0:	6010      	str	r0, [r2, #0]
 80075a2:	e7da      	b.n	800755a <_free_r+0x22>
 80075a4:	d902      	bls.n	80075ac <_free_r+0x74>
 80075a6:	230c      	movs	r3, #12
 80075a8:	602b      	str	r3, [r5, #0]
 80075aa:	e7d6      	b.n	800755a <_free_r+0x22>
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	1821      	adds	r1, r4, r0
 80075b0:	428b      	cmp	r3, r1
 80075b2:	bf04      	itt	eq
 80075b4:	6819      	ldreq	r1, [r3, #0]
 80075b6:	685b      	ldreq	r3, [r3, #4]
 80075b8:	6063      	str	r3, [r4, #4]
 80075ba:	bf04      	itt	eq
 80075bc:	1809      	addeq	r1, r1, r0
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	6054      	str	r4, [r2, #4]
 80075c2:	e7ca      	b.n	800755a <_free_r+0x22>
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	200013ac 	.word	0x200013ac

080075cc <malloc>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	@ (80075d8 <malloc+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f000 b825 	b.w	8007620 <_malloc_r>
 80075d6:	bf00      	nop
 80075d8:	2000001c 	.word	0x2000001c

080075dc <sbrk_aligned>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4e0f      	ldr	r6, [pc, #60]	@ (800761c <sbrk_aligned+0x40>)
 80075e0:	460c      	mov	r4, r1
 80075e2:	6831      	ldr	r1, [r6, #0]
 80075e4:	4605      	mov	r5, r0
 80075e6:	b911      	cbnz	r1, 80075ee <sbrk_aligned+0x12>
 80075e8:	f000 fe9a 	bl	8008320 <_sbrk_r>
 80075ec:	6030      	str	r0, [r6, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 fe95 	bl	8008320 <_sbrk_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d103      	bne.n	8007602 <sbrk_aligned+0x26>
 80075fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80075fe:	4620      	mov	r0, r4
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	1cc4      	adds	r4, r0, #3
 8007604:	f024 0403 	bic.w	r4, r4, #3
 8007608:	42a0      	cmp	r0, r4
 800760a:	d0f8      	beq.n	80075fe <sbrk_aligned+0x22>
 800760c:	1a21      	subs	r1, r4, r0
 800760e:	4628      	mov	r0, r5
 8007610:	f000 fe86 	bl	8008320 <_sbrk_r>
 8007614:	3001      	adds	r0, #1
 8007616:	d1f2      	bne.n	80075fe <sbrk_aligned+0x22>
 8007618:	e7ef      	b.n	80075fa <sbrk_aligned+0x1e>
 800761a:	bf00      	nop
 800761c:	200013a8 	.word	0x200013a8

08007620 <_malloc_r>:
 8007620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007624:	1ccd      	adds	r5, r1, #3
 8007626:	f025 0503 	bic.w	r5, r5, #3
 800762a:	3508      	adds	r5, #8
 800762c:	2d0c      	cmp	r5, #12
 800762e:	bf38      	it	cc
 8007630:	250c      	movcc	r5, #12
 8007632:	2d00      	cmp	r5, #0
 8007634:	4606      	mov	r6, r0
 8007636:	db01      	blt.n	800763c <_malloc_r+0x1c>
 8007638:	42a9      	cmp	r1, r5
 800763a:	d904      	bls.n	8007646 <_malloc_r+0x26>
 800763c:	230c      	movs	r3, #12
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	2000      	movs	r0, #0
 8007642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800771c <_malloc_r+0xfc>
 800764a:	f000 f869 	bl	8007720 <__malloc_lock>
 800764e:	f8d8 3000 	ldr.w	r3, [r8]
 8007652:	461c      	mov	r4, r3
 8007654:	bb44      	cbnz	r4, 80076a8 <_malloc_r+0x88>
 8007656:	4629      	mov	r1, r5
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff ffbf 	bl	80075dc <sbrk_aligned>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	4604      	mov	r4, r0
 8007662:	d158      	bne.n	8007716 <_malloc_r+0xf6>
 8007664:	f8d8 4000 	ldr.w	r4, [r8]
 8007668:	4627      	mov	r7, r4
 800766a:	2f00      	cmp	r7, #0
 800766c:	d143      	bne.n	80076f6 <_malloc_r+0xd6>
 800766e:	2c00      	cmp	r4, #0
 8007670:	d04b      	beq.n	800770a <_malloc_r+0xea>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	4639      	mov	r1, r7
 8007676:	4630      	mov	r0, r6
 8007678:	eb04 0903 	add.w	r9, r4, r3
 800767c:	f000 fe50 	bl	8008320 <_sbrk_r>
 8007680:	4581      	cmp	r9, r0
 8007682:	d142      	bne.n	800770a <_malloc_r+0xea>
 8007684:	6821      	ldr	r1, [r4, #0]
 8007686:	1a6d      	subs	r5, r5, r1
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ffa6 	bl	80075dc <sbrk_aligned>
 8007690:	3001      	adds	r0, #1
 8007692:	d03a      	beq.n	800770a <_malloc_r+0xea>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	442b      	add	r3, r5
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	f8d8 3000 	ldr.w	r3, [r8]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	bb62      	cbnz	r2, 80076fc <_malloc_r+0xdc>
 80076a2:	f8c8 7000 	str.w	r7, [r8]
 80076a6:	e00f      	b.n	80076c8 <_malloc_r+0xa8>
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	1b52      	subs	r2, r2, r5
 80076ac:	d420      	bmi.n	80076f0 <_malloc_r+0xd0>
 80076ae:	2a0b      	cmp	r2, #11
 80076b0:	d917      	bls.n	80076e2 <_malloc_r+0xc2>
 80076b2:	1961      	adds	r1, r4, r5
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	6025      	str	r5, [r4, #0]
 80076b8:	bf18      	it	ne
 80076ba:	6059      	strne	r1, [r3, #4]
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	bf08      	it	eq
 80076c0:	f8c8 1000 	streq.w	r1, [r8]
 80076c4:	5162      	str	r2, [r4, r5]
 80076c6:	604b      	str	r3, [r1, #4]
 80076c8:	4630      	mov	r0, r6
 80076ca:	f000 f82f 	bl	800772c <__malloc_unlock>
 80076ce:	f104 000b 	add.w	r0, r4, #11
 80076d2:	1d23      	adds	r3, r4, #4
 80076d4:	f020 0007 	bic.w	r0, r0, #7
 80076d8:	1ac2      	subs	r2, r0, r3
 80076da:	bf1c      	itt	ne
 80076dc:	1a1b      	subne	r3, r3, r0
 80076de:	50a3      	strne	r3, [r4, r2]
 80076e0:	e7af      	b.n	8007642 <_malloc_r+0x22>
 80076e2:	6862      	ldr	r2, [r4, #4]
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	bf0c      	ite	eq
 80076e8:	f8c8 2000 	streq.w	r2, [r8]
 80076ec:	605a      	strne	r2, [r3, #4]
 80076ee:	e7eb      	b.n	80076c8 <_malloc_r+0xa8>
 80076f0:	4623      	mov	r3, r4
 80076f2:	6864      	ldr	r4, [r4, #4]
 80076f4:	e7ae      	b.n	8007654 <_malloc_r+0x34>
 80076f6:	463c      	mov	r4, r7
 80076f8:	687f      	ldr	r7, [r7, #4]
 80076fa:	e7b6      	b.n	800766a <_malloc_r+0x4a>
 80076fc:	461a      	mov	r2, r3
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	42a3      	cmp	r3, r4
 8007702:	d1fb      	bne.n	80076fc <_malloc_r+0xdc>
 8007704:	2300      	movs	r3, #0
 8007706:	6053      	str	r3, [r2, #4]
 8007708:	e7de      	b.n	80076c8 <_malloc_r+0xa8>
 800770a:	230c      	movs	r3, #12
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	4630      	mov	r0, r6
 8007710:	f000 f80c 	bl	800772c <__malloc_unlock>
 8007714:	e794      	b.n	8007640 <_malloc_r+0x20>
 8007716:	6005      	str	r5, [r0, #0]
 8007718:	e7d6      	b.n	80076c8 <_malloc_r+0xa8>
 800771a:	bf00      	nop
 800771c:	200013ac 	.word	0x200013ac

08007720 <__malloc_lock>:
 8007720:	4801      	ldr	r0, [pc, #4]	@ (8007728 <__malloc_lock+0x8>)
 8007722:	f7ff b8ac 	b.w	800687e <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	200013a4 	.word	0x200013a4

0800772c <__malloc_unlock>:
 800772c:	4801      	ldr	r0, [pc, #4]	@ (8007734 <__malloc_unlock+0x8>)
 800772e:	f7ff b8a7 	b.w	8006880 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	200013a4 	.word	0x200013a4

08007738 <_Balloc>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	69c6      	ldr	r6, [r0, #28]
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	b976      	cbnz	r6, 8007760 <_Balloc+0x28>
 8007742:	2010      	movs	r0, #16
 8007744:	f7ff ff42 	bl	80075cc <malloc>
 8007748:	4602      	mov	r2, r0
 800774a:	61e0      	str	r0, [r4, #28]
 800774c:	b920      	cbnz	r0, 8007758 <_Balloc+0x20>
 800774e:	4b18      	ldr	r3, [pc, #96]	@ (80077b0 <_Balloc+0x78>)
 8007750:	4818      	ldr	r0, [pc, #96]	@ (80077b4 <_Balloc+0x7c>)
 8007752:	216b      	movs	r1, #107	@ 0x6b
 8007754:	f000 fdf4 	bl	8008340 <__assert_func>
 8007758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800775c:	6006      	str	r6, [r0, #0]
 800775e:	60c6      	str	r6, [r0, #12]
 8007760:	69e6      	ldr	r6, [r4, #28]
 8007762:	68f3      	ldr	r3, [r6, #12]
 8007764:	b183      	cbz	r3, 8007788 <_Balloc+0x50>
 8007766:	69e3      	ldr	r3, [r4, #28]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800776e:	b9b8      	cbnz	r0, 80077a0 <_Balloc+0x68>
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f605 	lsl.w	r6, r1, r5
 8007776:	1d72      	adds	r2, r6, #5
 8007778:	0092      	lsls	r2, r2, #2
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fdfe 	bl	800837c <_calloc_r>
 8007780:	b160      	cbz	r0, 800779c <_Balloc+0x64>
 8007782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007786:	e00e      	b.n	80077a6 <_Balloc+0x6e>
 8007788:	2221      	movs	r2, #33	@ 0x21
 800778a:	2104      	movs	r1, #4
 800778c:	4620      	mov	r0, r4
 800778e:	f000 fdf5 	bl	800837c <_calloc_r>
 8007792:	69e3      	ldr	r3, [r4, #28]
 8007794:	60f0      	str	r0, [r6, #12]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e4      	bne.n	8007766 <_Balloc+0x2e>
 800779c:	2000      	movs	r0, #0
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	6802      	ldr	r2, [r0, #0]
 80077a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077a6:	2300      	movs	r3, #0
 80077a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077ac:	e7f7      	b.n	800779e <_Balloc+0x66>
 80077ae:	bf00      	nop
 80077b0:	080087a9 	.word	0x080087a9
 80077b4:	08008829 	.word	0x08008829

080077b8 <_Bfree>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	69c6      	ldr	r6, [r0, #28]
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b976      	cbnz	r6, 80077e0 <_Bfree+0x28>
 80077c2:	2010      	movs	r0, #16
 80077c4:	f7ff ff02 	bl	80075cc <malloc>
 80077c8:	4602      	mov	r2, r0
 80077ca:	61e8      	str	r0, [r5, #28]
 80077cc:	b920      	cbnz	r0, 80077d8 <_Bfree+0x20>
 80077ce:	4b09      	ldr	r3, [pc, #36]	@ (80077f4 <_Bfree+0x3c>)
 80077d0:	4809      	ldr	r0, [pc, #36]	@ (80077f8 <_Bfree+0x40>)
 80077d2:	218f      	movs	r1, #143	@ 0x8f
 80077d4:	f000 fdb4 	bl	8008340 <__assert_func>
 80077d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077dc:	6006      	str	r6, [r0, #0]
 80077de:	60c6      	str	r6, [r0, #12]
 80077e0:	b13c      	cbz	r4, 80077f2 <_Bfree+0x3a>
 80077e2:	69eb      	ldr	r3, [r5, #28]
 80077e4:	6862      	ldr	r2, [r4, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ec:	6021      	str	r1, [r4, #0]
 80077ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	080087a9 	.word	0x080087a9
 80077f8:	08008829 	.word	0x08008829

080077fc <__multadd>:
 80077fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	690d      	ldr	r5, [r1, #16]
 8007802:	4607      	mov	r7, r0
 8007804:	460c      	mov	r4, r1
 8007806:	461e      	mov	r6, r3
 8007808:	f101 0c14 	add.w	ip, r1, #20
 800780c:	2000      	movs	r0, #0
 800780e:	f8dc 3000 	ldr.w	r3, [ip]
 8007812:	b299      	uxth	r1, r3
 8007814:	fb02 6101 	mla	r1, r2, r1, r6
 8007818:	0c1e      	lsrs	r6, r3, #16
 800781a:	0c0b      	lsrs	r3, r1, #16
 800781c:	fb02 3306 	mla	r3, r2, r6, r3
 8007820:	b289      	uxth	r1, r1
 8007822:	3001      	adds	r0, #1
 8007824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007828:	4285      	cmp	r5, r0
 800782a:	f84c 1b04 	str.w	r1, [ip], #4
 800782e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007832:	dcec      	bgt.n	800780e <__multadd+0x12>
 8007834:	b30e      	cbz	r6, 800787a <__multadd+0x7e>
 8007836:	68a3      	ldr	r3, [r4, #8]
 8007838:	42ab      	cmp	r3, r5
 800783a:	dc19      	bgt.n	8007870 <__multadd+0x74>
 800783c:	6861      	ldr	r1, [r4, #4]
 800783e:	4638      	mov	r0, r7
 8007840:	3101      	adds	r1, #1
 8007842:	f7ff ff79 	bl	8007738 <_Balloc>
 8007846:	4680      	mov	r8, r0
 8007848:	b928      	cbnz	r0, 8007856 <__multadd+0x5a>
 800784a:	4602      	mov	r2, r0
 800784c:	4b0c      	ldr	r3, [pc, #48]	@ (8007880 <__multadd+0x84>)
 800784e:	480d      	ldr	r0, [pc, #52]	@ (8007884 <__multadd+0x88>)
 8007850:	21ba      	movs	r1, #186	@ 0xba
 8007852:	f000 fd75 	bl	8008340 <__assert_func>
 8007856:	6922      	ldr	r2, [r4, #16]
 8007858:	3202      	adds	r2, #2
 800785a:	f104 010c 	add.w	r1, r4, #12
 800785e:	0092      	lsls	r2, r2, #2
 8007860:	300c      	adds	r0, #12
 8007862:	f7ff f80e 	bl	8006882 <memcpy>
 8007866:	4621      	mov	r1, r4
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff ffa5 	bl	80077b8 <_Bfree>
 800786e:	4644      	mov	r4, r8
 8007870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007874:	3501      	adds	r5, #1
 8007876:	615e      	str	r6, [r3, #20]
 8007878:	6125      	str	r5, [r4, #16]
 800787a:	4620      	mov	r0, r4
 800787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007880:	08008818 	.word	0x08008818
 8007884:	08008829 	.word	0x08008829

08007888 <__hi0bits>:
 8007888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800788c:	4603      	mov	r3, r0
 800788e:	bf36      	itet	cc
 8007890:	0403      	lslcc	r3, r0, #16
 8007892:	2000      	movcs	r0, #0
 8007894:	2010      	movcc	r0, #16
 8007896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800789a:	bf3c      	itt	cc
 800789c:	021b      	lslcc	r3, r3, #8
 800789e:	3008      	addcc	r0, #8
 80078a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a4:	bf3c      	itt	cc
 80078a6:	011b      	lslcc	r3, r3, #4
 80078a8:	3004      	addcc	r0, #4
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ae:	bf3c      	itt	cc
 80078b0:	009b      	lslcc	r3, r3, #2
 80078b2:	3002      	addcc	r0, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	db05      	blt.n	80078c4 <__hi0bits+0x3c>
 80078b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80078bc:	f100 0001 	add.w	r0, r0, #1
 80078c0:	bf08      	it	eq
 80078c2:	2020      	moveq	r0, #32
 80078c4:	4770      	bx	lr

080078c6 <__lo0bits>:
 80078c6:	6803      	ldr	r3, [r0, #0]
 80078c8:	4602      	mov	r2, r0
 80078ca:	f013 0007 	ands.w	r0, r3, #7
 80078ce:	d00b      	beq.n	80078e8 <__lo0bits+0x22>
 80078d0:	07d9      	lsls	r1, r3, #31
 80078d2:	d421      	bmi.n	8007918 <__lo0bits+0x52>
 80078d4:	0798      	lsls	r0, r3, #30
 80078d6:	bf49      	itett	mi
 80078d8:	085b      	lsrmi	r3, r3, #1
 80078da:	089b      	lsrpl	r3, r3, #2
 80078dc:	2001      	movmi	r0, #1
 80078de:	6013      	strmi	r3, [r2, #0]
 80078e0:	bf5c      	itt	pl
 80078e2:	6013      	strpl	r3, [r2, #0]
 80078e4:	2002      	movpl	r0, #2
 80078e6:	4770      	bx	lr
 80078e8:	b299      	uxth	r1, r3
 80078ea:	b909      	cbnz	r1, 80078f0 <__lo0bits+0x2a>
 80078ec:	0c1b      	lsrs	r3, r3, #16
 80078ee:	2010      	movs	r0, #16
 80078f0:	b2d9      	uxtb	r1, r3
 80078f2:	b909      	cbnz	r1, 80078f8 <__lo0bits+0x32>
 80078f4:	3008      	adds	r0, #8
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	0719      	lsls	r1, r3, #28
 80078fa:	bf04      	itt	eq
 80078fc:	091b      	lsreq	r3, r3, #4
 80078fe:	3004      	addeq	r0, #4
 8007900:	0799      	lsls	r1, r3, #30
 8007902:	bf04      	itt	eq
 8007904:	089b      	lsreq	r3, r3, #2
 8007906:	3002      	addeq	r0, #2
 8007908:	07d9      	lsls	r1, r3, #31
 800790a:	d403      	bmi.n	8007914 <__lo0bits+0x4e>
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	f100 0001 	add.w	r0, r0, #1
 8007912:	d003      	beq.n	800791c <__lo0bits+0x56>
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	4770      	bx	lr
 8007918:	2000      	movs	r0, #0
 800791a:	4770      	bx	lr
 800791c:	2020      	movs	r0, #32
 800791e:	4770      	bx	lr

08007920 <__i2b>:
 8007920:	b510      	push	{r4, lr}
 8007922:	460c      	mov	r4, r1
 8007924:	2101      	movs	r1, #1
 8007926:	f7ff ff07 	bl	8007738 <_Balloc>
 800792a:	4602      	mov	r2, r0
 800792c:	b928      	cbnz	r0, 800793a <__i2b+0x1a>
 800792e:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <__i2b+0x24>)
 8007930:	4805      	ldr	r0, [pc, #20]	@ (8007948 <__i2b+0x28>)
 8007932:	f240 1145 	movw	r1, #325	@ 0x145
 8007936:	f000 fd03 	bl	8008340 <__assert_func>
 800793a:	2301      	movs	r3, #1
 800793c:	6144      	str	r4, [r0, #20]
 800793e:	6103      	str	r3, [r0, #16]
 8007940:	bd10      	pop	{r4, pc}
 8007942:	bf00      	nop
 8007944:	08008818 	.word	0x08008818
 8007948:	08008829 	.word	0x08008829

0800794c <__multiply>:
 800794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	4614      	mov	r4, r2
 8007952:	690a      	ldr	r2, [r1, #16]
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	429a      	cmp	r2, r3
 8007958:	bfa8      	it	ge
 800795a:	4623      	movge	r3, r4
 800795c:	460f      	mov	r7, r1
 800795e:	bfa4      	itt	ge
 8007960:	460c      	movge	r4, r1
 8007962:	461f      	movge	r7, r3
 8007964:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007968:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800796c:	68a3      	ldr	r3, [r4, #8]
 800796e:	6861      	ldr	r1, [r4, #4]
 8007970:	eb0a 0609 	add.w	r6, sl, r9
 8007974:	42b3      	cmp	r3, r6
 8007976:	b085      	sub	sp, #20
 8007978:	bfb8      	it	lt
 800797a:	3101      	addlt	r1, #1
 800797c:	f7ff fedc 	bl	8007738 <_Balloc>
 8007980:	b930      	cbnz	r0, 8007990 <__multiply+0x44>
 8007982:	4602      	mov	r2, r0
 8007984:	4b44      	ldr	r3, [pc, #272]	@ (8007a98 <__multiply+0x14c>)
 8007986:	4845      	ldr	r0, [pc, #276]	@ (8007a9c <__multiply+0x150>)
 8007988:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800798c:	f000 fcd8 	bl	8008340 <__assert_func>
 8007990:	f100 0514 	add.w	r5, r0, #20
 8007994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007998:	462b      	mov	r3, r5
 800799a:	2200      	movs	r2, #0
 800799c:	4543      	cmp	r3, r8
 800799e:	d321      	bcc.n	80079e4 <__multiply+0x98>
 80079a0:	f107 0114 	add.w	r1, r7, #20
 80079a4:	f104 0214 	add.w	r2, r4, #20
 80079a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80079ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	1b13      	subs	r3, r2, r4
 80079b4:	3b15      	subs	r3, #21
 80079b6:	f023 0303 	bic.w	r3, r3, #3
 80079ba:	3304      	adds	r3, #4
 80079bc:	f104 0715 	add.w	r7, r4, #21
 80079c0:	42ba      	cmp	r2, r7
 80079c2:	bf38      	it	cc
 80079c4:	2304      	movcc	r3, #4
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	9103      	str	r1, [sp, #12]
 80079cc:	428b      	cmp	r3, r1
 80079ce:	d80c      	bhi.n	80079ea <__multiply+0x9e>
 80079d0:	2e00      	cmp	r6, #0
 80079d2:	dd03      	ble.n	80079dc <__multiply+0x90>
 80079d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d05b      	beq.n	8007a94 <__multiply+0x148>
 80079dc:	6106      	str	r6, [r0, #16]
 80079de:	b005      	add	sp, #20
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	f843 2b04 	str.w	r2, [r3], #4
 80079e8:	e7d8      	b.n	800799c <__multiply+0x50>
 80079ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80079ee:	f1ba 0f00 	cmp.w	sl, #0
 80079f2:	d024      	beq.n	8007a3e <__multiply+0xf2>
 80079f4:	f104 0e14 	add.w	lr, r4, #20
 80079f8:	46a9      	mov	r9, r5
 80079fa:	f04f 0c00 	mov.w	ip, #0
 80079fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a02:	f8d9 3000 	ldr.w	r3, [r9]
 8007a06:	fa1f fb87 	uxth.w	fp, r7
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007a14:	f8d9 7000 	ldr.w	r7, [r9]
 8007a18:	4463      	add	r3, ip
 8007a1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007a22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a2c:	4572      	cmp	r2, lr
 8007a2e:	f849 3b04 	str.w	r3, [r9], #4
 8007a32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a36:	d8e2      	bhi.n	80079fe <__multiply+0xb2>
 8007a38:	9b01      	ldr	r3, [sp, #4]
 8007a3a:	f845 c003 	str.w	ip, [r5, r3]
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a44:	3104      	adds	r1, #4
 8007a46:	f1b9 0f00 	cmp.w	r9, #0
 8007a4a:	d021      	beq.n	8007a90 <__multiply+0x144>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	f104 0c14 	add.w	ip, r4, #20
 8007a52:	46ae      	mov	lr, r5
 8007a54:	f04f 0a00 	mov.w	sl, #0
 8007a58:	f8bc b000 	ldrh.w	fp, [ip]
 8007a5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a60:	fb09 770b 	mla	r7, r9, fp, r7
 8007a64:	4457      	add	r7, sl
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a6c:	f84e 3b04 	str.w	r3, [lr], #4
 8007a70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a78:	f8be 3000 	ldrh.w	r3, [lr]
 8007a7c:	fb09 330a 	mla	r3, r9, sl, r3
 8007a80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a84:	4562      	cmp	r2, ip
 8007a86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a8a:	d8e5      	bhi.n	8007a58 <__multiply+0x10c>
 8007a8c:	9f01      	ldr	r7, [sp, #4]
 8007a8e:	51eb      	str	r3, [r5, r7]
 8007a90:	3504      	adds	r5, #4
 8007a92:	e799      	b.n	80079c8 <__multiply+0x7c>
 8007a94:	3e01      	subs	r6, #1
 8007a96:	e79b      	b.n	80079d0 <__multiply+0x84>
 8007a98:	08008818 	.word	0x08008818
 8007a9c:	08008829 	.word	0x08008829

08007aa0 <__pow5mult>:
 8007aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	f012 0203 	ands.w	r2, r2, #3
 8007aaa:	4607      	mov	r7, r0
 8007aac:	460e      	mov	r6, r1
 8007aae:	d007      	beq.n	8007ac0 <__pow5mult+0x20>
 8007ab0:	4c25      	ldr	r4, [pc, #148]	@ (8007b48 <__pow5mult+0xa8>)
 8007ab2:	3a01      	subs	r2, #1
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aba:	f7ff fe9f 	bl	80077fc <__multadd>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	10ad      	asrs	r5, r5, #2
 8007ac2:	d03d      	beq.n	8007b40 <__pow5mult+0xa0>
 8007ac4:	69fc      	ldr	r4, [r7, #28]
 8007ac6:	b97c      	cbnz	r4, 8007ae8 <__pow5mult+0x48>
 8007ac8:	2010      	movs	r0, #16
 8007aca:	f7ff fd7f 	bl	80075cc <malloc>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	61f8      	str	r0, [r7, #28]
 8007ad2:	b928      	cbnz	r0, 8007ae0 <__pow5mult+0x40>
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b4c <__pow5mult+0xac>)
 8007ad6:	481e      	ldr	r0, [pc, #120]	@ (8007b50 <__pow5mult+0xb0>)
 8007ad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007adc:	f000 fc30 	bl	8008340 <__assert_func>
 8007ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ae4:	6004      	str	r4, [r0, #0]
 8007ae6:	60c4      	str	r4, [r0, #12]
 8007ae8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007af0:	b94c      	cbnz	r4, 8007b06 <__pow5mult+0x66>
 8007af2:	f240 2171 	movw	r1, #625	@ 0x271
 8007af6:	4638      	mov	r0, r7
 8007af8:	f7ff ff12 	bl	8007920 <__i2b>
 8007afc:	2300      	movs	r3, #0
 8007afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b02:	4604      	mov	r4, r0
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	f04f 0900 	mov.w	r9, #0
 8007b0a:	07eb      	lsls	r3, r5, #31
 8007b0c:	d50a      	bpl.n	8007b24 <__pow5mult+0x84>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4622      	mov	r2, r4
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ff1a 	bl	800794c <__multiply>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7ff fe4b 	bl	80077b8 <_Bfree>
 8007b22:	4646      	mov	r6, r8
 8007b24:	106d      	asrs	r5, r5, #1
 8007b26:	d00b      	beq.n	8007b40 <__pow5mult+0xa0>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	b938      	cbnz	r0, 8007b3c <__pow5mult+0x9c>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ff0b 	bl	800794c <__multiply>
 8007b36:	6020      	str	r0, [r4, #0]
 8007b38:	f8c0 9000 	str.w	r9, [r0]
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	e7e4      	b.n	8007b0a <__pow5mult+0x6a>
 8007b40:	4630      	mov	r0, r6
 8007b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b46:	bf00      	nop
 8007b48:	08008884 	.word	0x08008884
 8007b4c:	080087a9 	.word	0x080087a9
 8007b50:	08008829 	.word	0x08008829

08007b54 <__lshift>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	460c      	mov	r4, r1
 8007b5a:	6849      	ldr	r1, [r1, #4]
 8007b5c:	6923      	ldr	r3, [r4, #16]
 8007b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b62:	68a3      	ldr	r3, [r4, #8]
 8007b64:	4607      	mov	r7, r0
 8007b66:	4691      	mov	r9, r2
 8007b68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b6c:	f108 0601 	add.w	r6, r8, #1
 8007b70:	42b3      	cmp	r3, r6
 8007b72:	db0b      	blt.n	8007b8c <__lshift+0x38>
 8007b74:	4638      	mov	r0, r7
 8007b76:	f7ff fddf 	bl	8007738 <_Balloc>
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	b948      	cbnz	r0, 8007b92 <__lshift+0x3e>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b28      	ldr	r3, [pc, #160]	@ (8007c24 <__lshift+0xd0>)
 8007b82:	4829      	ldr	r0, [pc, #164]	@ (8007c28 <__lshift+0xd4>)
 8007b84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b88:	f000 fbda 	bl	8008340 <__assert_func>
 8007b8c:	3101      	adds	r1, #1
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	e7ee      	b.n	8007b70 <__lshift+0x1c>
 8007b92:	2300      	movs	r3, #0
 8007b94:	f100 0114 	add.w	r1, r0, #20
 8007b98:	f100 0210 	add.w	r2, r0, #16
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	4553      	cmp	r3, sl
 8007ba0:	db33      	blt.n	8007c0a <__lshift+0xb6>
 8007ba2:	6920      	ldr	r0, [r4, #16]
 8007ba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ba8:	f104 0314 	add.w	r3, r4, #20
 8007bac:	f019 091f 	ands.w	r9, r9, #31
 8007bb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bb8:	d02b      	beq.n	8007c12 <__lshift+0xbe>
 8007bba:	f1c9 0e20 	rsb	lr, r9, #32
 8007bbe:	468a      	mov	sl, r1
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	fa00 f009 	lsl.w	r0, r0, r9
 8007bc8:	4310      	orrs	r0, r2
 8007bca:	f84a 0b04 	str.w	r0, [sl], #4
 8007bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd2:	459c      	cmp	ip, r3
 8007bd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bd8:	d8f3      	bhi.n	8007bc2 <__lshift+0x6e>
 8007bda:	ebac 0304 	sub.w	r3, ip, r4
 8007bde:	3b15      	subs	r3, #21
 8007be0:	f023 0303 	bic.w	r3, r3, #3
 8007be4:	3304      	adds	r3, #4
 8007be6:	f104 0015 	add.w	r0, r4, #21
 8007bea:	4584      	cmp	ip, r0
 8007bec:	bf38      	it	cc
 8007bee:	2304      	movcc	r3, #4
 8007bf0:	50ca      	str	r2, [r1, r3]
 8007bf2:	b10a      	cbz	r2, 8007bf8 <__lshift+0xa4>
 8007bf4:	f108 0602 	add.w	r6, r8, #2
 8007bf8:	3e01      	subs	r6, #1
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	612e      	str	r6, [r5, #16]
 8007bfe:	4621      	mov	r1, r4
 8007c00:	f7ff fdda 	bl	80077b8 <_Bfree>
 8007c04:	4628      	mov	r0, r5
 8007c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c0e:	3301      	adds	r3, #1
 8007c10:	e7c5      	b.n	8007b9e <__lshift+0x4a>
 8007c12:	3904      	subs	r1, #4
 8007c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c18:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c1c:	459c      	cmp	ip, r3
 8007c1e:	d8f9      	bhi.n	8007c14 <__lshift+0xc0>
 8007c20:	e7ea      	b.n	8007bf8 <__lshift+0xa4>
 8007c22:	bf00      	nop
 8007c24:	08008818 	.word	0x08008818
 8007c28:	08008829 	.word	0x08008829

08007c2c <__mcmp>:
 8007c2c:	690a      	ldr	r2, [r1, #16]
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6900      	ldr	r0, [r0, #16]
 8007c32:	1a80      	subs	r0, r0, r2
 8007c34:	b530      	push	{r4, r5, lr}
 8007c36:	d10e      	bne.n	8007c56 <__mcmp+0x2a>
 8007c38:	3314      	adds	r3, #20
 8007c3a:	3114      	adds	r1, #20
 8007c3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c4c:	4295      	cmp	r5, r2
 8007c4e:	d003      	beq.n	8007c58 <__mcmp+0x2c>
 8007c50:	d205      	bcs.n	8007c5e <__mcmp+0x32>
 8007c52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c56:	bd30      	pop	{r4, r5, pc}
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d3f3      	bcc.n	8007c44 <__mcmp+0x18>
 8007c5c:	e7fb      	b.n	8007c56 <__mcmp+0x2a>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7f9      	b.n	8007c56 <__mcmp+0x2a>
	...

08007c64 <__mdiff>:
 8007c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4689      	mov	r9, r1
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4648      	mov	r0, r9
 8007c70:	4614      	mov	r4, r2
 8007c72:	f7ff ffdb 	bl	8007c2c <__mcmp>
 8007c76:	1e05      	subs	r5, r0, #0
 8007c78:	d112      	bne.n	8007ca0 <__mdiff+0x3c>
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7ff fd5b 	bl	8007738 <_Balloc>
 8007c82:	4602      	mov	r2, r0
 8007c84:	b928      	cbnz	r0, 8007c92 <__mdiff+0x2e>
 8007c86:	4b3f      	ldr	r3, [pc, #252]	@ (8007d84 <__mdiff+0x120>)
 8007c88:	f240 2137 	movw	r1, #567	@ 0x237
 8007c8c:	483e      	ldr	r0, [pc, #248]	@ (8007d88 <__mdiff+0x124>)
 8007c8e:	f000 fb57 	bl	8008340 <__assert_func>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c98:	4610      	mov	r0, r2
 8007c9a:	b003      	add	sp, #12
 8007c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca0:	bfbc      	itt	lt
 8007ca2:	464b      	movlt	r3, r9
 8007ca4:	46a1      	movlt	r9, r4
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cac:	bfba      	itte	lt
 8007cae:	461c      	movlt	r4, r3
 8007cb0:	2501      	movlt	r5, #1
 8007cb2:	2500      	movge	r5, #0
 8007cb4:	f7ff fd40 	bl	8007738 <_Balloc>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	b918      	cbnz	r0, 8007cc4 <__mdiff+0x60>
 8007cbc:	4b31      	ldr	r3, [pc, #196]	@ (8007d84 <__mdiff+0x120>)
 8007cbe:	f240 2145 	movw	r1, #581	@ 0x245
 8007cc2:	e7e3      	b.n	8007c8c <__mdiff+0x28>
 8007cc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007cc8:	6926      	ldr	r6, [r4, #16]
 8007cca:	60c5      	str	r5, [r0, #12]
 8007ccc:	f109 0310 	add.w	r3, r9, #16
 8007cd0:	f109 0514 	add.w	r5, r9, #20
 8007cd4:	f104 0e14 	add.w	lr, r4, #20
 8007cd8:	f100 0b14 	add.w	fp, r0, #20
 8007cdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ce0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	46d9      	mov	r9, fp
 8007ce8:	f04f 0c00 	mov.w	ip, #0
 8007cec:	9b01      	ldr	r3, [sp, #4]
 8007cee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007cf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	fa1f f38a 	uxth.w	r3, sl
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	b283      	uxth	r3, r0
 8007d00:	1acb      	subs	r3, r1, r3
 8007d02:	0c00      	lsrs	r0, r0, #16
 8007d04:	4463      	add	r3, ip
 8007d06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d14:	4576      	cmp	r6, lr
 8007d16:	f849 3b04 	str.w	r3, [r9], #4
 8007d1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d1e:	d8e5      	bhi.n	8007cec <__mdiff+0x88>
 8007d20:	1b33      	subs	r3, r6, r4
 8007d22:	3b15      	subs	r3, #21
 8007d24:	f023 0303 	bic.w	r3, r3, #3
 8007d28:	3415      	adds	r4, #21
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	42a6      	cmp	r6, r4
 8007d2e:	bf38      	it	cc
 8007d30:	2304      	movcc	r3, #4
 8007d32:	441d      	add	r5, r3
 8007d34:	445b      	add	r3, fp
 8007d36:	461e      	mov	r6, r3
 8007d38:	462c      	mov	r4, r5
 8007d3a:	4544      	cmp	r4, r8
 8007d3c:	d30e      	bcc.n	8007d5c <__mdiff+0xf8>
 8007d3e:	f108 0103 	add.w	r1, r8, #3
 8007d42:	1b49      	subs	r1, r1, r5
 8007d44:	f021 0103 	bic.w	r1, r1, #3
 8007d48:	3d03      	subs	r5, #3
 8007d4a:	45a8      	cmp	r8, r5
 8007d4c:	bf38      	it	cc
 8007d4e:	2100      	movcc	r1, #0
 8007d50:	440b      	add	r3, r1
 8007d52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d56:	b191      	cbz	r1, 8007d7e <__mdiff+0x11a>
 8007d58:	6117      	str	r7, [r2, #16]
 8007d5a:	e79d      	b.n	8007c98 <__mdiff+0x34>
 8007d5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d60:	46e6      	mov	lr, ip
 8007d62:	0c08      	lsrs	r0, r1, #16
 8007d64:	fa1c fc81 	uxtah	ip, ip, r1
 8007d68:	4471      	add	r1, lr
 8007d6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d6e:	b289      	uxth	r1, r1
 8007d70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d74:	f846 1b04 	str.w	r1, [r6], #4
 8007d78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d7c:	e7dd      	b.n	8007d3a <__mdiff+0xd6>
 8007d7e:	3f01      	subs	r7, #1
 8007d80:	e7e7      	b.n	8007d52 <__mdiff+0xee>
 8007d82:	bf00      	nop
 8007d84:	08008818 	.word	0x08008818
 8007d88:	08008829 	.word	0x08008829

08007d8c <__d2b>:
 8007d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	460f      	mov	r7, r1
 8007d92:	2101      	movs	r1, #1
 8007d94:	ec59 8b10 	vmov	r8, r9, d0
 8007d98:	4616      	mov	r6, r2
 8007d9a:	f7ff fccd 	bl	8007738 <_Balloc>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	b930      	cbnz	r0, 8007db0 <__d2b+0x24>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b23      	ldr	r3, [pc, #140]	@ (8007e34 <__d2b+0xa8>)
 8007da6:	4824      	ldr	r0, [pc, #144]	@ (8007e38 <__d2b+0xac>)
 8007da8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007dac:	f000 fac8 	bl	8008340 <__assert_func>
 8007db0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007db4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007db8:	b10d      	cbz	r5, 8007dbe <__d2b+0x32>
 8007dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	f1b8 0300 	subs.w	r3, r8, #0
 8007dc4:	d023      	beq.n	8007e0e <__d2b+0x82>
 8007dc6:	4668      	mov	r0, sp
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	f7ff fd7c 	bl	80078c6 <__lo0bits>
 8007dce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dd2:	b1d0      	cbz	r0, 8007e0a <__d2b+0x7e>
 8007dd4:	f1c0 0320 	rsb	r3, r0, #32
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	40c2      	lsrs	r2, r0
 8007de0:	6163      	str	r3, [r4, #20]
 8007de2:	9201      	str	r2, [sp, #4]
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	61a3      	str	r3, [r4, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	bf0c      	ite	eq
 8007dec:	2201      	moveq	r2, #1
 8007dee:	2202      	movne	r2, #2
 8007df0:	6122      	str	r2, [r4, #16]
 8007df2:	b1a5      	cbz	r5, 8007e1e <__d2b+0x92>
 8007df4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007df8:	4405      	add	r5, r0
 8007dfa:	603d      	str	r5, [r7, #0]
 8007dfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e00:	6030      	str	r0, [r6, #0]
 8007e02:	4620      	mov	r0, r4
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0a:	6161      	str	r1, [r4, #20]
 8007e0c:	e7ea      	b.n	8007de4 <__d2b+0x58>
 8007e0e:	a801      	add	r0, sp, #4
 8007e10:	f7ff fd59 	bl	80078c6 <__lo0bits>
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	6163      	str	r3, [r4, #20]
 8007e18:	3020      	adds	r0, #32
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	e7e8      	b.n	8007df0 <__d2b+0x64>
 8007e1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e26:	6038      	str	r0, [r7, #0]
 8007e28:	6918      	ldr	r0, [r3, #16]
 8007e2a:	f7ff fd2d 	bl	8007888 <__hi0bits>
 8007e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e32:	e7e5      	b.n	8007e00 <__d2b+0x74>
 8007e34:	08008818 	.word	0x08008818
 8007e38:	08008829 	.word	0x08008829

08007e3c <__sfputc_r>:
 8007e3c:	6893      	ldr	r3, [r2, #8]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	b410      	push	{r4}
 8007e44:	6093      	str	r3, [r2, #8]
 8007e46:	da08      	bge.n	8007e5a <__sfputc_r+0x1e>
 8007e48:	6994      	ldr	r4, [r2, #24]
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	db01      	blt.n	8007e52 <__sfputc_r+0x16>
 8007e4e:	290a      	cmp	r1, #10
 8007e50:	d103      	bne.n	8007e5a <__sfputc_r+0x1e>
 8007e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e56:	f7fe bbaa 	b.w	80065ae <__swbuf_r>
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	1c58      	adds	r0, r3, #1
 8007e5e:	6010      	str	r0, [r2, #0]
 8007e60:	7019      	strb	r1, [r3, #0]
 8007e62:	4608      	mov	r0, r1
 8007e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <__sfputs_r>:
 8007e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	4614      	mov	r4, r2
 8007e72:	18d5      	adds	r5, r2, r3
 8007e74:	42ac      	cmp	r4, r5
 8007e76:	d101      	bne.n	8007e7c <__sfputs_r+0x12>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e007      	b.n	8007e8c <__sfputs_r+0x22>
 8007e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e80:	463a      	mov	r2, r7
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ffda 	bl	8007e3c <__sfputc_r>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d1f3      	bne.n	8007e74 <__sfputs_r+0xa>
 8007e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e90 <_vfiprintf_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	460d      	mov	r5, r1
 8007e96:	b09d      	sub	sp, #116	@ 0x74
 8007e98:	4614      	mov	r4, r2
 8007e9a:	4698      	mov	r8, r3
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	b118      	cbz	r0, 8007ea8 <_vfiprintf_r+0x18>
 8007ea0:	6a03      	ldr	r3, [r0, #32]
 8007ea2:	b90b      	cbnz	r3, 8007ea8 <_vfiprintf_r+0x18>
 8007ea4:	f7fe fa9a 	bl	80063dc <__sinit>
 8007ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eaa:	07d9      	lsls	r1, r3, #31
 8007eac:	d405      	bmi.n	8007eba <_vfiprintf_r+0x2a>
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	059a      	lsls	r2, r3, #22
 8007eb2:	d402      	bmi.n	8007eba <_vfiprintf_r+0x2a>
 8007eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eb6:	f7fe fce2 	bl	800687e <__retarget_lock_acquire_recursive>
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	071b      	lsls	r3, r3, #28
 8007ebe:	d501      	bpl.n	8007ec4 <_vfiprintf_r+0x34>
 8007ec0:	692b      	ldr	r3, [r5, #16]
 8007ec2:	b99b      	cbnz	r3, 8007eec <_vfiprintf_r+0x5c>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7fe fbb0 	bl	800662c <__swsetup_r>
 8007ecc:	b170      	cbz	r0, 8007eec <_vfiprintf_r+0x5c>
 8007ece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed0:	07dc      	lsls	r4, r3, #31
 8007ed2:	d504      	bpl.n	8007ede <_vfiprintf_r+0x4e>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ed8:	b01d      	add	sp, #116	@ 0x74
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	89ab      	ldrh	r3, [r5, #12]
 8007ee0:	0598      	lsls	r0, r3, #22
 8007ee2:	d4f7      	bmi.n	8007ed4 <_vfiprintf_r+0x44>
 8007ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee6:	f7fe fccb 	bl	8006880 <__retarget_lock_release_recursive>
 8007eea:	e7f3      	b.n	8007ed4 <_vfiprintf_r+0x44>
 8007eec:	2300      	movs	r3, #0
 8007eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007efa:	2330      	movs	r3, #48	@ 0x30
 8007efc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080ac <_vfiprintf_r+0x21c>
 8007f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f04:	f04f 0901 	mov.w	r9, #1
 8007f08:	4623      	mov	r3, r4
 8007f0a:	469a      	mov	sl, r3
 8007f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f10:	b10a      	cbz	r2, 8007f16 <_vfiprintf_r+0x86>
 8007f12:	2a25      	cmp	r2, #37	@ 0x25
 8007f14:	d1f9      	bne.n	8007f0a <_vfiprintf_r+0x7a>
 8007f16:	ebba 0b04 	subs.w	fp, sl, r4
 8007f1a:	d00b      	beq.n	8007f34 <_vfiprintf_r+0xa4>
 8007f1c:	465b      	mov	r3, fp
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7ff ffa1 	bl	8007e6a <__sfputs_r>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f000 80a7 	beq.w	800807c <_vfiprintf_r+0x1ec>
 8007f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f30:	445a      	add	r2, fp
 8007f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f34:	f89a 3000 	ldrb.w	r3, [sl]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 809f 	beq.w	800807c <_vfiprintf_r+0x1ec>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f48:	f10a 0a01 	add.w	sl, sl, #1
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	9307      	str	r3, [sp, #28]
 8007f50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f56:	4654      	mov	r4, sl
 8007f58:	2205      	movs	r2, #5
 8007f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5e:	4853      	ldr	r0, [pc, #332]	@ (80080ac <_vfiprintf_r+0x21c>)
 8007f60:	f7f8 f936 	bl	80001d0 <memchr>
 8007f64:	9a04      	ldr	r2, [sp, #16]
 8007f66:	b9d8      	cbnz	r0, 8007fa0 <_vfiprintf_r+0x110>
 8007f68:	06d1      	lsls	r1, r2, #27
 8007f6a:	bf44      	itt	mi
 8007f6c:	2320      	movmi	r3, #32
 8007f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f72:	0713      	lsls	r3, r2, #28
 8007f74:	bf44      	itt	mi
 8007f76:	232b      	movmi	r3, #43	@ 0x2b
 8007f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f82:	d015      	beq.n	8007fb0 <_vfiprintf_r+0x120>
 8007f84:	9a07      	ldr	r2, [sp, #28]
 8007f86:	4654      	mov	r4, sl
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f04f 0c0a 	mov.w	ip, #10
 8007f8e:	4621      	mov	r1, r4
 8007f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f94:	3b30      	subs	r3, #48	@ 0x30
 8007f96:	2b09      	cmp	r3, #9
 8007f98:	d94b      	bls.n	8008032 <_vfiprintf_r+0x1a2>
 8007f9a:	b1b0      	cbz	r0, 8007fca <_vfiprintf_r+0x13a>
 8007f9c:	9207      	str	r2, [sp, #28]
 8007f9e:	e014      	b.n	8007fca <_vfiprintf_r+0x13a>
 8007fa0:	eba0 0308 	sub.w	r3, r0, r8
 8007fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	46a2      	mov	sl, r4
 8007fae:	e7d2      	b.n	8007f56 <_vfiprintf_r+0xc6>
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	1d19      	adds	r1, r3, #4
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	9103      	str	r1, [sp, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfbb      	ittet	lt
 8007fbc:	425b      	neglt	r3, r3
 8007fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc2:	9307      	strge	r3, [sp, #28]
 8007fc4:	9307      	strlt	r3, [sp, #28]
 8007fc6:	bfb8      	it	lt
 8007fc8:	9204      	strlt	r2, [sp, #16]
 8007fca:	7823      	ldrb	r3, [r4, #0]
 8007fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fce:	d10a      	bne.n	8007fe6 <_vfiprintf_r+0x156>
 8007fd0:	7863      	ldrb	r3, [r4, #1]
 8007fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd4:	d132      	bne.n	800803c <_vfiprintf_r+0x1ac>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	9203      	str	r2, [sp, #12]
 8007fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fe2:	3402      	adds	r4, #2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080bc <_vfiprintf_r+0x22c>
 8007fea:	7821      	ldrb	r1, [r4, #0]
 8007fec:	2203      	movs	r2, #3
 8007fee:	4650      	mov	r0, sl
 8007ff0:	f7f8 f8ee 	bl	80001d0 <memchr>
 8007ff4:	b138      	cbz	r0, 8008006 <_vfiprintf_r+0x176>
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	eba0 000a 	sub.w	r0, r0, sl
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	4082      	lsls	r2, r0
 8008000:	4313      	orrs	r3, r2
 8008002:	3401      	adds	r4, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800a:	4829      	ldr	r0, [pc, #164]	@ (80080b0 <_vfiprintf_r+0x220>)
 800800c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008010:	2206      	movs	r2, #6
 8008012:	f7f8 f8dd 	bl	80001d0 <memchr>
 8008016:	2800      	cmp	r0, #0
 8008018:	d03f      	beq.n	800809a <_vfiprintf_r+0x20a>
 800801a:	4b26      	ldr	r3, [pc, #152]	@ (80080b4 <_vfiprintf_r+0x224>)
 800801c:	bb1b      	cbnz	r3, 8008066 <_vfiprintf_r+0x1d6>
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	3307      	adds	r3, #7
 8008022:	f023 0307 	bic.w	r3, r3, #7
 8008026:	3308      	adds	r3, #8
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802c:	443b      	add	r3, r7
 800802e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008030:	e76a      	b.n	8007f08 <_vfiprintf_r+0x78>
 8008032:	fb0c 3202 	mla	r2, ip, r2, r3
 8008036:	460c      	mov	r4, r1
 8008038:	2001      	movs	r0, #1
 800803a:	e7a8      	b.n	8007f8e <_vfiprintf_r+0xfe>
 800803c:	2300      	movs	r3, #0
 800803e:	3401      	adds	r4, #1
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0c0a 	mov.w	ip, #10
 8008048:	4620      	mov	r0, r4
 800804a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800804e:	3a30      	subs	r2, #48	@ 0x30
 8008050:	2a09      	cmp	r2, #9
 8008052:	d903      	bls.n	800805c <_vfiprintf_r+0x1cc>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0c6      	beq.n	8007fe6 <_vfiprintf_r+0x156>
 8008058:	9105      	str	r1, [sp, #20]
 800805a:	e7c4      	b.n	8007fe6 <_vfiprintf_r+0x156>
 800805c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008060:	4604      	mov	r4, r0
 8008062:	2301      	movs	r3, #1
 8008064:	e7f0      	b.n	8008048 <_vfiprintf_r+0x1b8>
 8008066:	ab03      	add	r3, sp, #12
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	462a      	mov	r2, r5
 800806c:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <_vfiprintf_r+0x228>)
 800806e:	a904      	add	r1, sp, #16
 8008070:	4630      	mov	r0, r6
 8008072:	f7fd fd6f 	bl	8005b54 <_printf_float>
 8008076:	4607      	mov	r7, r0
 8008078:	1c78      	adds	r0, r7, #1
 800807a:	d1d6      	bne.n	800802a <_vfiprintf_r+0x19a>
 800807c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800807e:	07d9      	lsls	r1, r3, #31
 8008080:	d405      	bmi.n	800808e <_vfiprintf_r+0x1fe>
 8008082:	89ab      	ldrh	r3, [r5, #12]
 8008084:	059a      	lsls	r2, r3, #22
 8008086:	d402      	bmi.n	800808e <_vfiprintf_r+0x1fe>
 8008088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800808a:	f7fe fbf9 	bl	8006880 <__retarget_lock_release_recursive>
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	065b      	lsls	r3, r3, #25
 8008092:	f53f af1f 	bmi.w	8007ed4 <_vfiprintf_r+0x44>
 8008096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008098:	e71e      	b.n	8007ed8 <_vfiprintf_r+0x48>
 800809a:	ab03      	add	r3, sp, #12
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	462a      	mov	r2, r5
 80080a0:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <_vfiprintf_r+0x228>)
 80080a2:	a904      	add	r1, sp, #16
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7fd ffed 	bl	8006084 <_printf_i>
 80080aa:	e7e4      	b.n	8008076 <_vfiprintf_r+0x1e6>
 80080ac:	08008980 	.word	0x08008980
 80080b0:	0800898a 	.word	0x0800898a
 80080b4:	08005b55 	.word	0x08005b55
 80080b8:	08007e6b 	.word	0x08007e6b
 80080bc:	08008986 	.word	0x08008986

080080c0 <__sflush_r>:
 80080c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	0716      	lsls	r6, r2, #28
 80080ca:	4605      	mov	r5, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	d454      	bmi.n	800817a <__sflush_r+0xba>
 80080d0:	684b      	ldr	r3, [r1, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dc02      	bgt.n	80080dc <__sflush_r+0x1c>
 80080d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dd48      	ble.n	800816e <__sflush_r+0xae>
 80080dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d045      	beq.n	800816e <__sflush_r+0xae>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080e8:	682f      	ldr	r7, [r5, #0]
 80080ea:	6a21      	ldr	r1, [r4, #32]
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	d030      	beq.n	8008152 <__sflush_r+0x92>
 80080f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	0759      	lsls	r1, r3, #29
 80080f6:	d505      	bpl.n	8008104 <__sflush_r+0x44>
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080fe:	b10b      	cbz	r3, 8008104 <__sflush_r+0x44>
 8008100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008102:	1ad2      	subs	r2, r2, r3
 8008104:	2300      	movs	r3, #0
 8008106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008108:	6a21      	ldr	r1, [r4, #32]
 800810a:	4628      	mov	r0, r5
 800810c:	47b0      	blx	r6
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	d106      	bne.n	8008122 <__sflush_r+0x62>
 8008114:	6829      	ldr	r1, [r5, #0]
 8008116:	291d      	cmp	r1, #29
 8008118:	d82b      	bhi.n	8008172 <__sflush_r+0xb2>
 800811a:	4a2a      	ldr	r2, [pc, #168]	@ (80081c4 <__sflush_r+0x104>)
 800811c:	410a      	asrs	r2, r1
 800811e:	07d6      	lsls	r6, r2, #31
 8008120:	d427      	bmi.n	8008172 <__sflush_r+0xb2>
 8008122:	2200      	movs	r2, #0
 8008124:	6062      	str	r2, [r4, #4]
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	d504      	bpl.n	8008138 <__sflush_r+0x78>
 800812e:	1c42      	adds	r2, r0, #1
 8008130:	d101      	bne.n	8008136 <__sflush_r+0x76>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	b903      	cbnz	r3, 8008138 <__sflush_r+0x78>
 8008136:	6560      	str	r0, [r4, #84]	@ 0x54
 8008138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800813a:	602f      	str	r7, [r5, #0]
 800813c:	b1b9      	cbz	r1, 800816e <__sflush_r+0xae>
 800813e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008142:	4299      	cmp	r1, r3
 8008144:	d002      	beq.n	800814c <__sflush_r+0x8c>
 8008146:	4628      	mov	r0, r5
 8008148:	f7ff f9f6 	bl	8007538 <_free_r>
 800814c:	2300      	movs	r3, #0
 800814e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008150:	e00d      	b.n	800816e <__sflush_r+0xae>
 8008152:	2301      	movs	r3, #1
 8008154:	4628      	mov	r0, r5
 8008156:	47b0      	blx	r6
 8008158:	4602      	mov	r2, r0
 800815a:	1c50      	adds	r0, r2, #1
 800815c:	d1c9      	bne.n	80080f2 <__sflush_r+0x32>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0c6      	beq.n	80080f2 <__sflush_r+0x32>
 8008164:	2b1d      	cmp	r3, #29
 8008166:	d001      	beq.n	800816c <__sflush_r+0xac>
 8008168:	2b16      	cmp	r3, #22
 800816a:	d11e      	bne.n	80081aa <__sflush_r+0xea>
 800816c:	602f      	str	r7, [r5, #0]
 800816e:	2000      	movs	r0, #0
 8008170:	e022      	b.n	80081b8 <__sflush_r+0xf8>
 8008172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008176:	b21b      	sxth	r3, r3
 8008178:	e01b      	b.n	80081b2 <__sflush_r+0xf2>
 800817a:	690f      	ldr	r7, [r1, #16]
 800817c:	2f00      	cmp	r7, #0
 800817e:	d0f6      	beq.n	800816e <__sflush_r+0xae>
 8008180:	0793      	lsls	r3, r2, #30
 8008182:	680e      	ldr	r6, [r1, #0]
 8008184:	bf08      	it	eq
 8008186:	694b      	ldreq	r3, [r1, #20]
 8008188:	600f      	str	r7, [r1, #0]
 800818a:	bf18      	it	ne
 800818c:	2300      	movne	r3, #0
 800818e:	eba6 0807 	sub.w	r8, r6, r7
 8008192:	608b      	str	r3, [r1, #8]
 8008194:	f1b8 0f00 	cmp.w	r8, #0
 8008198:	dde9      	ble.n	800816e <__sflush_r+0xae>
 800819a:	6a21      	ldr	r1, [r4, #32]
 800819c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800819e:	4643      	mov	r3, r8
 80081a0:	463a      	mov	r2, r7
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b0      	blx	r6
 80081a6:	2800      	cmp	r0, #0
 80081a8:	dc08      	bgt.n	80081bc <__sflush_r+0xfc>
 80081aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081bc:	4407      	add	r7, r0
 80081be:	eba8 0800 	sub.w	r8, r8, r0
 80081c2:	e7e7      	b.n	8008194 <__sflush_r+0xd4>
 80081c4:	dfbffffe 	.word	0xdfbffffe

080081c8 <_fflush_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b913      	cbnz	r3, 80081d8 <_fflush_r+0x10>
 80081d2:	2500      	movs	r5, #0
 80081d4:	4628      	mov	r0, r5
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	b118      	cbz	r0, 80081e2 <_fflush_r+0x1a>
 80081da:	6a03      	ldr	r3, [r0, #32]
 80081dc:	b90b      	cbnz	r3, 80081e2 <_fflush_r+0x1a>
 80081de:	f7fe f8fd 	bl	80063dc <__sinit>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f3      	beq.n	80081d2 <_fflush_r+0xa>
 80081ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081ec:	07d0      	lsls	r0, r2, #31
 80081ee:	d404      	bmi.n	80081fa <_fflush_r+0x32>
 80081f0:	0599      	lsls	r1, r3, #22
 80081f2:	d402      	bmi.n	80081fa <_fflush_r+0x32>
 80081f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081f6:	f7fe fb42 	bl	800687e <__retarget_lock_acquire_recursive>
 80081fa:	4628      	mov	r0, r5
 80081fc:	4621      	mov	r1, r4
 80081fe:	f7ff ff5f 	bl	80080c0 <__sflush_r>
 8008202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008204:	07da      	lsls	r2, r3, #31
 8008206:	4605      	mov	r5, r0
 8008208:	d4e4      	bmi.n	80081d4 <_fflush_r+0xc>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	059b      	lsls	r3, r3, #22
 800820e:	d4e1      	bmi.n	80081d4 <_fflush_r+0xc>
 8008210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008212:	f7fe fb35 	bl	8006880 <__retarget_lock_release_recursive>
 8008216:	e7dd      	b.n	80081d4 <_fflush_r+0xc>

08008218 <__swhatbuf_r>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	460c      	mov	r4, r1
 800821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008220:	2900      	cmp	r1, #0
 8008222:	b096      	sub	sp, #88	@ 0x58
 8008224:	4615      	mov	r5, r2
 8008226:	461e      	mov	r6, r3
 8008228:	da0d      	bge.n	8008246 <__swhatbuf_r+0x2e>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008230:	f04f 0100 	mov.w	r1, #0
 8008234:	bf14      	ite	ne
 8008236:	2340      	movne	r3, #64	@ 0x40
 8008238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800823c:	2000      	movs	r0, #0
 800823e:	6031      	str	r1, [r6, #0]
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	b016      	add	sp, #88	@ 0x58
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	466a      	mov	r2, sp
 8008248:	f000 f848 	bl	80082dc <_fstat_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	dbec      	blt.n	800822a <__swhatbuf_r+0x12>
 8008250:	9901      	ldr	r1, [sp, #4]
 8008252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800825a:	4259      	negs	r1, r3
 800825c:	4159      	adcs	r1, r3
 800825e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008262:	e7eb      	b.n	800823c <__swhatbuf_r+0x24>

08008264 <__smakebuf_r>:
 8008264:	898b      	ldrh	r3, [r1, #12]
 8008266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008268:	079d      	lsls	r5, r3, #30
 800826a:	4606      	mov	r6, r0
 800826c:	460c      	mov	r4, r1
 800826e:	d507      	bpl.n	8008280 <__smakebuf_r+0x1c>
 8008270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	2301      	movs	r3, #1
 800827a:	6163      	str	r3, [r4, #20]
 800827c:	b003      	add	sp, #12
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008280:	ab01      	add	r3, sp, #4
 8008282:	466a      	mov	r2, sp
 8008284:	f7ff ffc8 	bl	8008218 <__swhatbuf_r>
 8008288:	9f00      	ldr	r7, [sp, #0]
 800828a:	4605      	mov	r5, r0
 800828c:	4639      	mov	r1, r7
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff f9c6 	bl	8007620 <_malloc_r>
 8008294:	b948      	cbnz	r0, 80082aa <__smakebuf_r+0x46>
 8008296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829a:	059a      	lsls	r2, r3, #22
 800829c:	d4ee      	bmi.n	800827c <__smakebuf_r+0x18>
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	f043 0302 	orr.w	r3, r3, #2
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	e7e2      	b.n	8008270 <__smakebuf_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	6020      	str	r0, [r4, #0]
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ba:	b15b      	cbz	r3, 80082d4 <__smakebuf_r+0x70>
 80082bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f81d 	bl	8008300 <_isatty_r>
 80082c6:	b128      	cbz	r0, 80082d4 <__smakebuf_r+0x70>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	431d      	orrs	r5, r3
 80082d8:	81a5      	strh	r5, [r4, #12]
 80082da:	e7cf      	b.n	800827c <__smakebuf_r+0x18>

080082dc <_fstat_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	@ (80082fc <_fstat_r+0x20>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	f7f9 fb00 	bl	80018ee <_fstat>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d102      	bne.n	80082f8 <_fstat_r+0x1c>
 80082f2:	682b      	ldr	r3, [r5, #0]
 80082f4:	b103      	cbz	r3, 80082f8 <_fstat_r+0x1c>
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	200013a0 	.word	0x200013a0

08008300 <_isatty_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d06      	ldr	r5, [pc, #24]	@ (800831c <_isatty_r+0x1c>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7f9 faf4 	bl	80018f8 <_isatty>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_isatty_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_isatty_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	200013a0 	.word	0x200013a0

08008320 <_sbrk_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d06      	ldr	r5, [pc, #24]	@ (800833c <_sbrk_r+0x1c>)
 8008324:	2300      	movs	r3, #0
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	f7f9 fae8 	bl	8001900 <_sbrk>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_sbrk_r+0x1a>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_sbrk_r+0x1a>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	200013a0 	.word	0x200013a0

08008340 <__assert_func>:
 8008340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008342:	4614      	mov	r4, r2
 8008344:	461a      	mov	r2, r3
 8008346:	4b09      	ldr	r3, [pc, #36]	@ (800836c <__assert_func+0x2c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4605      	mov	r5, r0
 800834c:	68d8      	ldr	r0, [r3, #12]
 800834e:	b954      	cbnz	r4, 8008366 <__assert_func+0x26>
 8008350:	4b07      	ldr	r3, [pc, #28]	@ (8008370 <__assert_func+0x30>)
 8008352:	461c      	mov	r4, r3
 8008354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008358:	9100      	str	r1, [sp, #0]
 800835a:	462b      	mov	r3, r5
 800835c:	4905      	ldr	r1, [pc, #20]	@ (8008374 <__assert_func+0x34>)
 800835e:	f000 f841 	bl	80083e4 <fiprintf>
 8008362:	f000 f851 	bl	8008408 <abort>
 8008366:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <__assert_func+0x38>)
 8008368:	e7f4      	b.n	8008354 <__assert_func+0x14>
 800836a:	bf00      	nop
 800836c:	2000001c 	.word	0x2000001c
 8008370:	080089d6 	.word	0x080089d6
 8008374:	080089a8 	.word	0x080089a8
 8008378:	0800899b 	.word	0x0800899b

0800837c <_calloc_r>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	fba1 5402 	umull	r5, r4, r1, r2
 8008382:	b93c      	cbnz	r4, 8008394 <_calloc_r+0x18>
 8008384:	4629      	mov	r1, r5
 8008386:	f7ff f94b 	bl	8007620 <_malloc_r>
 800838a:	4606      	mov	r6, r0
 800838c:	b928      	cbnz	r0, 800839a <_calloc_r+0x1e>
 800838e:	2600      	movs	r6, #0
 8008390:	4630      	mov	r0, r6
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	220c      	movs	r2, #12
 8008396:	6002      	str	r2, [r0, #0]
 8008398:	e7f9      	b.n	800838e <_calloc_r+0x12>
 800839a:	462a      	mov	r2, r5
 800839c:	4621      	mov	r1, r4
 800839e:	f7fe f99b 	bl	80066d8 <memset>
 80083a2:	e7f5      	b.n	8008390 <_calloc_r+0x14>

080083a4 <__ascii_mbtowc>:
 80083a4:	b082      	sub	sp, #8
 80083a6:	b901      	cbnz	r1, 80083aa <__ascii_mbtowc+0x6>
 80083a8:	a901      	add	r1, sp, #4
 80083aa:	b142      	cbz	r2, 80083be <__ascii_mbtowc+0x1a>
 80083ac:	b14b      	cbz	r3, 80083c2 <__ascii_mbtowc+0x1e>
 80083ae:	7813      	ldrb	r3, [r2, #0]
 80083b0:	600b      	str	r3, [r1, #0]
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	1e10      	subs	r0, r2, #0
 80083b6:	bf18      	it	ne
 80083b8:	2001      	movne	r0, #1
 80083ba:	b002      	add	sp, #8
 80083bc:	4770      	bx	lr
 80083be:	4610      	mov	r0, r2
 80083c0:	e7fb      	b.n	80083ba <__ascii_mbtowc+0x16>
 80083c2:	f06f 0001 	mvn.w	r0, #1
 80083c6:	e7f8      	b.n	80083ba <__ascii_mbtowc+0x16>

080083c8 <__ascii_wctomb>:
 80083c8:	4603      	mov	r3, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	b141      	cbz	r1, 80083e0 <__ascii_wctomb+0x18>
 80083ce:	2aff      	cmp	r2, #255	@ 0xff
 80083d0:	d904      	bls.n	80083dc <__ascii_wctomb+0x14>
 80083d2:	228a      	movs	r2, #138	@ 0x8a
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083da:	4770      	bx	lr
 80083dc:	700a      	strb	r2, [r1, #0]
 80083de:	2001      	movs	r0, #1
 80083e0:	4770      	bx	lr
	...

080083e4 <fiprintf>:
 80083e4:	b40e      	push	{r1, r2, r3}
 80083e6:	b503      	push	{r0, r1, lr}
 80083e8:	4601      	mov	r1, r0
 80083ea:	ab03      	add	r3, sp, #12
 80083ec:	4805      	ldr	r0, [pc, #20]	@ (8008404 <fiprintf+0x20>)
 80083ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f2:	6800      	ldr	r0, [r0, #0]
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	f7ff fd4b 	bl	8007e90 <_vfiprintf_r>
 80083fa:	b002      	add	sp, #8
 80083fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008400:	b003      	add	sp, #12
 8008402:	4770      	bx	lr
 8008404:	2000001c 	.word	0x2000001c

08008408 <abort>:
 8008408:	b508      	push	{r3, lr}
 800840a:	2006      	movs	r0, #6
 800840c:	f000 f82c 	bl	8008468 <raise>
 8008410:	2001      	movs	r0, #1
 8008412:	f7f9 fa53 	bl	80018bc <_exit>

08008416 <_raise_r>:
 8008416:	291f      	cmp	r1, #31
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4605      	mov	r5, r0
 800841c:	460c      	mov	r4, r1
 800841e:	d904      	bls.n	800842a <_raise_r+0x14>
 8008420:	2316      	movs	r3, #22
 8008422:	6003      	str	r3, [r0, #0]
 8008424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800842c:	b112      	cbz	r2, 8008434 <_raise_r+0x1e>
 800842e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008432:	b94b      	cbnz	r3, 8008448 <_raise_r+0x32>
 8008434:	4628      	mov	r0, r5
 8008436:	f000 f831 	bl	800849c <_getpid_r>
 800843a:	4622      	mov	r2, r4
 800843c:	4601      	mov	r1, r0
 800843e:	4628      	mov	r0, r5
 8008440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008444:	f000 b818 	b.w	8008478 <_kill_r>
 8008448:	2b01      	cmp	r3, #1
 800844a:	d00a      	beq.n	8008462 <_raise_r+0x4c>
 800844c:	1c59      	adds	r1, r3, #1
 800844e:	d103      	bne.n	8008458 <_raise_r+0x42>
 8008450:	2316      	movs	r3, #22
 8008452:	6003      	str	r3, [r0, #0]
 8008454:	2001      	movs	r0, #1
 8008456:	e7e7      	b.n	8008428 <_raise_r+0x12>
 8008458:	2100      	movs	r1, #0
 800845a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800845e:	4620      	mov	r0, r4
 8008460:	4798      	blx	r3
 8008462:	2000      	movs	r0, #0
 8008464:	e7e0      	b.n	8008428 <_raise_r+0x12>
	...

08008468 <raise>:
 8008468:	4b02      	ldr	r3, [pc, #8]	@ (8008474 <raise+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f7ff bfd2 	b.w	8008416 <_raise_r>
 8008472:	bf00      	nop
 8008474:	2000001c 	.word	0x2000001c

08008478 <_kill_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d07      	ldr	r5, [pc, #28]	@ (8008498 <_kill_r+0x20>)
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	f7f9 fa11 	bl	80018ac <_kill>
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	d102      	bne.n	8008494 <_kill_r+0x1c>
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	b103      	cbz	r3, 8008494 <_kill_r+0x1c>
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	bd38      	pop	{r3, r4, r5, pc}
 8008496:	bf00      	nop
 8008498:	200013a0 	.word	0x200013a0

0800849c <_getpid_r>:
 800849c:	f7f9 ba04 	b.w	80018a8 <_getpid>

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
