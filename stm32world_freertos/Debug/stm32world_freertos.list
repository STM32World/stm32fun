
stm32world_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008750  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  080088e0  080088e0  000098e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  0001c000  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  0001c000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08009760  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00010000  10000000  08009958  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000013ec  200001f8  200001f8  0001c1f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015e4  200015e4  0001c1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025711  00000000  00000000  0001c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000435c  00000000  00000000  00041741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f943  00000000  00000000  00045a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001710  00000000  00000000  000553e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000128c  00000000  00000000  00056af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000050a5  00000000  00000000  00057d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002140f  00000000  00000000  0005ce21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d03eb  00000000  00000000  0007e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  0014e61b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000516c  00000000  00000000  0014e6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00153840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000000fa  00000000  00000000  00153899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000010  00000000  00000000  00153993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088c8 	.word	0x080088c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080088c8 	.word	0x080088c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	b08b      	sub	sp, #44	@ 0x2c
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	9405      	str	r4, [sp, #20]
 8000ea0:	9406      	str	r4, [sp, #24]
 8000ea2:	9407      	str	r4, [sp, #28]
 8000ea4:	9408      	str	r4, [sp, #32]
 8000ea6:	9409      	str	r4, [sp, #36]	@ 0x24
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	9401      	str	r4, [sp, #4]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_GPIO_Init+0x98>)
 8000eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eae:	f042 0204 	orr.w	r2, r2, #4
 8000eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb6:	f002 0204 	and.w	r2, r2, #4
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	9402      	str	r4, [sp, #8]
 8000ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ece:	9202      	str	r2, [sp, #8]
 8000ed0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	9403      	str	r4, [sp, #12]
 8000ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8000edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ede:	f002 0201 	and.w	r2, r2, #1
 8000ee2:	9203      	str	r2, [sp, #12]
 8000ee4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	9404      	str	r4, [sp, #16]
 8000ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eea:	f042 0202 	orr.w	r2, r2, #2
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	9304      	str	r3, [sp, #16]
 8000ef8:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000efa:	4d0e      	ldr	r5, [pc, #56]	@ (8000f34 <MX_GPIO_Init+0x9c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f02:	4628      	mov	r0, r5
 8000f04:	f001 faae 	bl	8002464 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(PULSE_GPIO_Port, PULSE_Pin, GPIO_PIN_RESET);
 8000f08:	4622      	mov	r2, r4
 8000f0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f001 faa8 	bl	8002464 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin PULSE_Pin */
    GPIO_InitStruct.Pin = LED_Pin | PULSE_Pin;
 8000f14:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	a905      	add	r1, sp, #20
 8000f24:	4628      	mov	r0, r5
 8000f26:	f001 f9a7 	bl	8002278 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000f2a:	b00b      	add	sp, #44	@ 0x2c
 8000f2c:	bd30      	pop	{r4, r5, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800

08000f38 <MX_DMA_Init>:
{
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	b082      	sub	sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	9401      	str	r4, [sp, #4]
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <MX_DMA_Init+0x40>)
 8000f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f44:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f54:	4622      	mov	r2, r4
 8000f56:	2105      	movs	r1, #5
 8000f58:	2010      	movs	r0, #16
 8000f5a:	f000 fe7f 	bl	8001c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f5e:	2010      	movs	r0, #16
 8000f60:	f000 fe8c 	bl	8001c7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f64:	4622      	mov	r2, r4
 8000f66:	2105      	movs	r1, #5
 8000f68:	2011      	movs	r0, #17
 8000f6a:	f000 fe77 	bl	8001c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f000 fe84 	bl	8001c7c <HAL_NVIC_EnableIRQ>
}
 8000f74:	b002      	add	sp, #8
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	40023800 	.word	0x40023800

08000f7c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f7c:	b530      	push	{r4, r5, lr}
 8000f7e:	b083      	sub	sp, #12
    /* USER CODE BEGIN 5 */

    uint8_t toggle = 0;
 8000f80:	2400      	movs	r4, #0
 8000f82:	e008      	b.n	8000f96 <StartDefaultTask+0x1a>
        osSemaphoreRelease(ledSemaphoreHandle);

        uint32_t tick = osKernelGetTickCount();

        if (!toggle) { // Only every second time
            osMessageQueuePut(tickQueueHandle, &tick, 0, osWaitForever);
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f88:	2200      	movs	r2, #0
 8000f8a:	a901      	add	r1, sp, #4
 8000f8c:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <StartDefaultTask+0x3c>)
 8000f8e:	6800      	ldr	r0, [r0, #0]
 8000f90:	f002 fc4a 	bl	8003828 <osMessageQueuePut>
        toggle = !toggle;
 8000f94:	462c      	mov	r4, r5
        osDelay(500);
 8000f96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f9a:	f002 fa91 	bl	80034c0 <osDelay>
        toggle = !toggle;
 8000f9e:	f084 0501 	eor.w	r5, r4, #1
        osSemaphoreRelease(ledSemaphoreHandle);
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <StartDefaultTask+0x40>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	f002 fbc5 	bl	8003734 <osSemaphoreRelease>
        uint32_t tick = osKernelGetTickCount();
 8000faa:	f002 fa21 	bl	80033f0 <osKernelGetTickCount>
 8000fae:	9001      	str	r0, [sp, #4]
        if (!toggle) { // Only every second time
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	d0ef      	beq.n	8000f94 <StartDefaultTask+0x18>
 8000fb4:	e7e6      	b.n	8000f84 <StartDefaultTask+0x8>
 8000fb6:	bf00      	nop
 8000fb8:	20000440 	.word	0x20000440
 8000fbc:	20000434 	.word	0x20000434

08000fc0 <StartPulseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPulseTask */
void StartPulseTask(void *argument)
{
 8000fc0:	b508      	push	{r3, lr}
    osStatus_t ret;

    /* Infinite loop */
    for (;;) {

        ret = osSemaphoreAcquire(pulseSemaphoreHandle, osWaitForever);
 8000fc2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <StartPulseTask+0x24>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	f002 fb7f 	bl	80036cc <osSemaphoreAcquire>

        if (!ret) {
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	d1f7      	bne.n	8000fc2 <StartPulseTask+0x2>
            HAL_GPIO_TogglePin(PULSE_GPIO_Port, PULSE_Pin);
 8000fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd6:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8000fda:	f500 3002 	add.w	r0, r0, #133120	@ 0x20800
 8000fde:	f001 fa47 	bl	8002470 <HAL_GPIO_TogglePin>
 8000fe2:	e7ee      	b.n	8000fc2 <StartPulseTask+0x2>
 8000fe4:	20000430 	.word	0x20000430

08000fe8 <StartLedTask>:
{
 8000fe8:	b510      	push	{r4, lr}
        ret = osSemaphoreAcquire(ledSemaphoreHandle, osWaitForever);
 8000fea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <StartLedTask+0x30>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f002 fb6b 	bl	80036cc <osSemaphoreAcquire>
        if (!ret) {
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d1f7      	bne.n	8000fea <StartLedTask+0x2>
            osMutexWait(ledMutexHandle, osWaitForever);
 8000ffa:	4c08      	ldr	r4, [pc, #32]	@ (800101c <StartLedTask+0x34>)
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	f002 fab4 	bl	800356e <osMutexAcquire>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <StartLedTask+0x38>)
 800100c:	f001 fa30 	bl	8002470 <HAL_GPIO_TogglePin>
            osMutexRelease(ledMutexHandle);
 8001010:	6820      	ldr	r0, [r4, #0]
 8001012:	f002 fadb 	bl	80035cc <osMutexRelease>
 8001016:	e7e8      	b.n	8000fea <StartLedTask+0x2>
 8001018:	20000434 	.word	0x20000434
 800101c:	20000438 	.word	0x20000438
 8001020:	40020800 	.word	0x40020800

08001024 <StartTickTask>:
{
 8001024:	b510      	push	{r4, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	e01d      	b.n	8001066 <StartTickTask+0x42>
            osMutexWait(printMutexHandle, osWaitForever);
 800102a:	4c14      	ldr	r4, [pc, #80]	@ (800107c <StartTickTask+0x58>)
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001030:	6820      	ldr	r0, [r4, #0]
 8001032:	f002 fa9c 	bl	800356e <osMutexAcquire>
            printf("Tick %lu (c1 = %lu, c1h = %lu ch2 = %lu, c2h = %lu s = %lu)\n", tick / 1000, conv_ch1, conv_half_ch1, conv_ch2, conv_half_ch2, sine_task);
 8001036:	9905      	ldr	r1, [sp, #20]
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <StartTickTask+0x5c>)
 800103a:	fba3 3101 	umull	r3, r1, r3, r1
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <StartTickTask+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <StartTickTask+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <StartTickTask+0x68>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <StartTickTask+0x6c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <StartTickTask+0x70>)
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	0989      	lsrs	r1, r1, #6
 800105a:	480f      	ldr	r0, [pc, #60]	@ (8001098 <StartTickTask+0x74>)
 800105c:	f005 fc06 	bl	800686c <iprintf>
            osMutexRelease(printMutexHandle);
 8001060:	6820      	ldr	r0, [r4, #0]
 8001062:	f002 fab3 	bl	80035cc <osMutexRelease>
        ret = osMessageQueueGet(tickQueueHandle, &tick, NULL, osWaitForever);
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106a:	2200      	movs	r2, #0
 800106c:	a905      	add	r1, sp, #20
 800106e:	480b      	ldr	r0, [pc, #44]	@ (800109c <StartTickTask+0x78>)
 8001070:	6800      	ldr	r0, [r0, #0]
 8001072:	f002 fc1b 	bl	80038ac <osMessageQueueGet>
        if (ret == osOK) {
 8001076:	2800      	cmp	r0, #0
 8001078:	d1f5      	bne.n	8001066 <StartTickTask+0x42>
 800107a:	e7d6      	b.n	800102a <StartTickTask+0x6>
 800107c:	2000043c 	.word	0x2000043c
 8001080:	10624dd3 	.word	0x10624dd3
 8001084:	20000214 	.word	0x20000214
 8001088:	2000021c 	.word	0x2000021c
 800108c:	20000218 	.word	0x20000218
 8001090:	20000224 	.word	0x20000224
 8001094:	20000220 	.word	0x20000220
 8001098:	080088e0 	.word	0x080088e0
 800109c:	20000440 	.word	0x20000440

080010a0 <StartStatusTask>:
{
 80010a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	e047      	b.n	8001136 <StartStatusTask+0x96>
                        * (float) pxTaskStatusArray[x].ulRunTimeCounter
 80010a6:	9b06      	ldr	r3, [sp, #24]
 80010a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80010ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80010b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80010b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001188 <StartStatusTask+0xe8>
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
                        / (float) ulTotalRunTime);
 80010c0:	ed9d 7a05 	vldr	s14, [sp, #20]
 80010c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                printf("Task %lu: %-12s %2d %8.4f (%8lu) %4i\n", x,
 80010c8:	9d06      	ldr	r5, [sp, #24]
                        pxTaskStatusArray[x].pcTaskName,
 80010ca:	9b06      	ldr	r3, [sp, #24]
 80010cc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80010d0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
                        pxTaskStatusArray[x].eCurrentState, runtime_percent, pxTaskStatusArray[x].ulRunTimeCounter,
 80010d4:	9b06      	ldr	r3, [sp, #24]
 80010d6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80010da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80010de:	7b1e      	ldrb	r6, [r3, #12]
 80010e0:	9b06      	ldr	r3, [sp, #24]
 80010e2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80010e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                        pxTaskStatusArray[x].usStackHighWaterMark);
 80010ea:	9906      	ldr	r1, [sp, #24]
 80010ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80010f0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80010f4:	8c09      	ldrh	r1, [r1, #32]
                printf("Task %lu: %-12s %2d %8.4f (%8lu) %4i\n", x,
 80010f6:	6857      	ldr	r7, [r2, #4]
 80010f8:	9103      	str	r1, [sp, #12]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001102:	ee17 0a90 	vmov	r0, s15
 8001106:	f7ff fa1f 	bl	8000548 <__aeabi_f2d>
 800110a:	e9cd 0100 	strd	r0, r1, [sp]
 800110e:	4633      	mov	r3, r6
 8001110:	463a      	mov	r2, r7
 8001112:	4629      	mov	r1, r5
 8001114:	481d      	ldr	r0, [pc, #116]	@ (800118c <StartStatusTask+0xec>)
 8001116:	f005 fba9 	bl	800686c <iprintf>
            for (x = 0; x < uxArraySize; x++) {
 800111a:	9b06      	ldr	r3, [sp, #24]
 800111c:	3301      	adds	r3, #1
 800111e:	9306      	str	r3, [sp, #24]
 8001120:	9a06      	ldr	r2, [sp, #24]
 8001122:	9b07      	ldr	r3, [sp, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3be      	bcc.n	80010a6 <StartStatusTask+0x6>
            vPortFree(pxTaskStatusArray);
 8001128:	4620      	mov	r0, r4
 800112a:	f004 fdfd 	bl	8005d28 <vPortFree>
        osMutexRelease(printMutexHandle);
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <StartStatusTask+0xf0>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f002 fa4b 	bl	80035cc <osMutexRelease>
        osDelay(10000);
 8001136:	f242 7010 	movw	r0, #10000	@ 0x2710
 800113a:	f002 f9c1 	bl	80034c0 <osDelay>
        uxArraySize = uxTaskGetNumberOfTasks();
 800113e:	f003 fcf5 	bl	8004b2c <uxTaskGetNumberOfTasks>
 8001142:	9007      	str	r0, [sp, #28]
        pxTaskStatusArray = pvPortMalloc(uxArraySize * sizeof(TaskStatus_t)); // a little bit scary!
 8001144:	9807      	ldr	r0, [sp, #28]
 8001146:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800114a:	0080      	lsls	r0, r0, #2
 800114c:	f004 fd6a 	bl	8005c24 <pvPortMalloc>
 8001150:	4604      	mov	r4, r0
        osMutexWait(printMutexHandle, osWaitForever);
 8001152:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <StartStatusTask+0xf0>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	f002 fa08 	bl	800356e <osMutexAcquire>
        if (pxTaskStatusArray != NULL) {
 800115e:	b17c      	cbz	r4, 8001180 <StartStatusTask+0xe0>
            uxArraySize = uxTaskGetSystemState(pxTaskStatusArray, uxArraySize,
 8001160:	9907      	ldr	r1, [sp, #28]
 8001162:	aa05      	add	r2, sp, #20
 8001164:	4620      	mov	r0, r4
 8001166:	f003 ffb5 	bl	80050d4 <uxTaskGetSystemState>
 800116a:	9007      	str	r0, [sp, #28]
            printf("Task count = %lu\n", uxArraySize);
 800116c:	9907      	ldr	r1, [sp, #28]
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <StartStatusTask+0xf4>)
 8001170:	f005 fb7c 	bl	800686c <iprintf>
            printf("No      Name          S   Usage     Count     HW\n");
 8001174:	4808      	ldr	r0, [pc, #32]	@ (8001198 <StartStatusTask+0xf8>)
 8001176:	f005 fbe1 	bl	800693c <puts>
            for (x = 0; x < uxArraySize; x++) {
 800117a:	2300      	movs	r3, #0
 800117c:	9306      	str	r3, [sp, #24]
 800117e:	e7cf      	b.n	8001120 <StartStatusTask+0x80>
            printf("Unable to allocate stack space\n");
 8001180:	4806      	ldr	r0, [pc, #24]	@ (800119c <StartStatusTask+0xfc>)
 8001182:	f005 fbdb 	bl	800693c <puts>
 8001186:	e7d2      	b.n	800112e <StartStatusTask+0x8e>
 8001188:	42c80000 	.word	0x42c80000
 800118c:	08008968 	.word	0x08008968
 8001190:	2000043c 	.word	0x2000043c
 8001194:	08008920 	.word	0x08008920
 8001198:	08008934 	.word	0x08008934
 800119c:	08008990 	.word	0x08008990

080011a0 <StartSineTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSineTask */
void StartSineTask(void *argument)
{
 80011a0:	b510      	push	{r4, lr}
 80011a2:	ed2d 8b02 	vpush	{d8}
 80011a6:	b084      	sub	sp, #16
    /* Infinite loop */
    for (;;) {

        sine_queue_t sine;

        ret = osMessageQueueGet(sineQueueHandle, &sine, NULL, osWaitForever);
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ac:	2200      	movs	r2, #0
 80011ae:	4669      	mov	r1, sp
 80011b0:	481b      	ldr	r0, [pc, #108]	@ (8001220 <StartSineTask+0x80>)
 80011b2:	6800      	ldr	r0, [r0, #0]
 80011b4:	f002 fb7a 	bl	80038ac <osMessageQueueGet>
        if (ret == osOK) {
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1f5      	bne.n	80011a8 <StartSineTask+0x8>
 80011bc:	4604      	mov	r4, r0
            ++sine_task;
 80011be:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <StartSineTask+0x84>)
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	6013      	str	r3, [r2, #0]
            for (int i = 0; i < DMA_BUFFER_SIZE; ++i) {
 80011c6:	e000      	b.n	80011ca <StartSineTask+0x2a>
 80011c8:	3401      	adds	r4, #1
 80011ca:	2c3f      	cmp	r4, #63	@ 0x3f
 80011cc:	dcec      	bgt.n	80011a8 <StartSineTask+0x8>
                sine.buffer[i] = OUTPUT_MID - (sine.amplification * (OUTPUT_MID * arm_cos_f32(sine.angle)));
 80011ce:	ed9d 8a03 	vldr	s16, [sp, #12]
 80011d2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80011d6:	f004 fde5 	bl	8005da4 <arm_cos_f32>
 80011da:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8001228 <StartSineTask+0x88>
 80011de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80011e2:	ee28 8a00 	vmul.f32	s16, s16, s0
 80011e6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80011ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ee:	9b00      	ldr	r3, [sp, #0]
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
                sine.angle += sine.angle_change;
 80011f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80011fc:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001204:	edcd 7a01 	vstr	s15, [sp, #4]
                if (sine.angle >= two_pi) {
 8001208:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800122c <StartSineTask+0x8c>
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	dbd8      	blt.n	80011c8 <StartSineTask+0x28>
                    sine.angle -= two_pi;
 8001216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121a:	edcd 7a01 	vstr	s15, [sp, #4]
 800121e:	e7d3      	b.n	80011c8 <StartSineTask+0x28>
 8001220:	20000228 	.word	0x20000228
 8001224:	20000214 	.word	0x20000214
 8001228:	45000000 	.word	0x45000000
 800122c:	40c90fdb 	.word	0x40c90fdb

08001230 <_write>:
    if (fd == 1 || fd == 2) {
 8001230:	3801      	subs	r0, #1
 8001232:	2801      	cmp	r0, #1
 8001234:	d80a      	bhi.n	800124c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8001236:	b510      	push	{r4, lr}
 8001238:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800123a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800123e:	b292      	uxth	r2, r2
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <_write+0x28>)
 8001242:	f002 f834 	bl	80032ae <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8001246:	b920      	cbnz	r0, 8001252 <_write+0x22>
            return len;
 8001248:	4620      	mov	r0, r4
}
 800124a:	bd10      	pop	{r4, pc}
    return -1;
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001250:	4770      	bx	lr
            return -1;
 8001252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001256:	e7f8      	b.n	800124a <_write+0x1a>
 8001258:	2000045c 	.word	0x2000045c

0800125c <HAL_DAC_ConvCpltCallbackCh1>:
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 800125c:	b508      	push	{r3, lr}
    ++conv_ch1;
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_DAC_ConvCpltCallbackCh1+0x20>)
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	6013      	str	r3, [r2, #0]
    dacs[0].buffer = &dma_buffer_1[DMA_BUFFER_SIZE];
 8001266:	4906      	ldr	r1, [pc, #24]	@ (8001280 <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 800126a:	600b      	str	r3, [r1, #0]
    osMessageQueuePut(sineQueueHandle, &dacs[0], 0, 0);
 800126c:	2300      	movs	r3, #0
 800126e:	461a      	mov	r2, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 8001272:	6800      	ldr	r0, [r0, #0]
 8001274:	f002 fad8 	bl	8003828 <osMessageQueuePut>
}
 8001278:	bd08      	pop	{r3, pc}
 800127a:	bf00      	nop
 800127c:	20000220 	.word	0x20000220
 8001280:	20000000 	.word	0x20000000
 8001284:	200003ac 	.word	0x200003ac
 8001288:	20000228 	.word	0x20000228

0800128c <HAL_DAC_ConvHalfCpltCallbackCh1>:
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 800128c:	b508      	push	{r3, lr}
    ++conv_half_ch1;
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	6013      	str	r3, [r2, #0]
    dacs[0].buffer = &dma_buffer_1[0];
 8001296:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 800129a:	600b      	str	r3, [r1, #0]
    osMessageQueuePut(sineQueueHandle, &dacs[0], 0, 0);
 800129c:	2300      	movs	r3, #0
 800129e:	461a      	mov	r2, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x2c>)
 80012a2:	6800      	ldr	r0, [r0, #0]
 80012a4:	f002 fac0 	bl	8003828 <osMessageQueuePut>
}
 80012a8:	bd08      	pop	{r3, pc}
 80012aa:	bf00      	nop
 80012ac:	20000224 	.word	0x20000224
 80012b0:	20000000 	.word	0x20000000
 80012b4:	2000032c 	.word	0x2000032c
 80012b8:	20000228 	.word	0x20000228

080012bc <HAL_DACEx_ConvCpltCallbackCh2>:
void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac) {
 80012bc:	b508      	push	{r3, lr}
    ++conv_ch2;
 80012be:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	6013      	str	r3, [r2, #0]
    dacs[1].buffer = &dma_buffer_2[DMA_BUFFER_SIZE];
 80012c6:	4906      	ldr	r1, [pc, #24]	@ (80012e0 <HAL_DACEx_ConvCpltCallbackCh2+0x24>)
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 80012ca:	f841 3f10 	str.w	r3, [r1, #16]!
    osMessageQueuePut(sineQueueHandle, &dacs[1], 0, 0);
 80012ce:	2300      	movs	r3, #0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 80012d4:	6800      	ldr	r0, [r0, #0]
 80012d6:	f002 faa7 	bl	8003828 <osMessageQueuePut>
}
 80012da:	bd08      	pop	{r3, pc}
 80012dc:	20000218 	.word	0x20000218
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200002ac 	.word	0x200002ac
 80012e8:	20000228 	.word	0x20000228

080012ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac) {
 80012ec:	b508      	push	{r3, lr}
    ++conv_half_ch2;
 80012ee:	4a07      	ldr	r2, [pc, #28]	@ (800130c <HAL_DACEx_ConvHalfCpltCallbackCh2+0x20>)
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	6013      	str	r3, [r2, #0]
    dacs[1].buffer = &dma_buffer_2[0];
 80012f6:	4906      	ldr	r1, [pc, #24]	@ (8001310 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x24>)
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x28>)
 80012fa:	f841 3f10 	str.w	r3, [r1, #16]!
    osMessageQueuePut(sineQueueHandle, &dacs[1], 0, 0);
 80012fe:	2300      	movs	r3, #0
 8001300:	461a      	mov	r2, r3
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x2c>)
 8001304:	6800      	ldr	r0, [r0, #0]
 8001306:	f002 fa8f 	bl	8003828 <osMessageQueuePut>
}
 800130a:	bd08      	pop	{r3, pc}
 800130c:	2000021c 	.word	0x2000021c
 8001310:	20000000 	.word	0x20000000
 8001314:	2000022c 	.word	0x2000022c
 8001318:	20000228 	.word	0x20000228

0800131c <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void) {
 800131c:	b508      	push	{r3, lr}
    ulHighFrequencyTimerTicks = 0;
 800131e:	4b03      	ldr	r3, [pc, #12]	@ (800132c <configureTimerForRunTimeStats+0x10>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim13);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <configureTimerForRunTimeStats+0x14>)
 8001326:	f001 fc35 	bl	8002b94 <HAL_TIM_Base_Start_IT>
}
 800132a:	bd08      	pop	{r3, pc}
 800132c:	2000042c 	.word	0x2000042c
 8001330:	200004a4 	.word	0x200004a4

08001334 <getRunTimeCounterValue>:
    return ulHighFrequencyTimerTicks;
 8001334:	4b01      	ldr	r3, [pc, #4]	@ (800133c <getRunTimeCounterValue+0x8>)
 8001336:	6818      	ldr	r0, [r3, #0]
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000042c 	.word	0x2000042c

08001340 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
    /* USER CODE BEGIN Callback 0 */

    if (htim->Instance == TIM4) {
 8001344:	6802      	ldr	r2, [r0, #0]
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001348:	429a      	cmp	r2, r3
 800134a:	d004      	beq.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x16>
        osSemaphoreRelease(pulseSemaphoreHandle);
    }

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM14) {
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001350:	429a      	cmp	r2, r3
 8001352:	d005      	beq.n	8001360 <HAL_TIM_PeriodElapsedCallback+0x20>
        HAL_IncTick();
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8001354:	bd10      	pop	{r4, pc}
        osSemaphoreRelease(pulseSemaphoreHandle);
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f002 f9eb 	bl	8003734 <osSemaphoreRelease>
 800135e:	e7f5      	b.n	800134c <HAL_TIM_PeriodElapsedCallback+0xc>
        HAL_IncTick();
 8001360:	f000 fc16 	bl	8001b90 <HAL_IncTick>
}
 8001364:	e7f6      	b.n	8001354 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001366:	bf00      	nop
 8001368:	40000800 	.word	0x40000800
 800136c:	40002000 	.word	0x40002000
 8001370:	20000430 	.word	0x20000430

08001374 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001376:	e7fe      	b.n	8001376 <Error_Handler+0x2>

08001378 <MX_USART1_UART_Init>:
{
 8001378:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800137a:	480a      	ldr	r0, [pc, #40]	@ (80013a4 <MX_USART1_UART_Init+0x2c>)
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <MX_USART1_UART_Init+0x30>)
 800137e:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8001380:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001384:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	2300      	movs	r3, #0
 8001388:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800138a:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800138c:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800138e:	220c      	movs	r2, #12
 8001390:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	f001 ff5a 	bl	800324e <HAL_UART_Init>
 800139a:	b900      	cbnz	r0, 800139e <MX_USART1_UART_Init+0x26>
}
 800139c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800139e:	f7ff ffe9 	bl	8001374 <Error_Handler>
 80013a2:	bf00      	nop
 80013a4:	2000045c 	.word	0x2000045c
 80013a8:	40011000 	.word	0x40011000

080013ac <MX_TIM13_Init>:
{
 80013ac:	b508      	push	{r3, lr}
    htim13.Instance = TIM13;
 80013ae:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <MX_TIM13_Init+0x24>)
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_TIM13_Init+0x28>)
 80013b2:	6003      	str	r3, [r0, #0]
    htim13.Init.Prescaler = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	6043      	str	r3, [r0, #4]
    htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	6083      	str	r3, [r0, #8]
    htim13.Init.Period = 840 - 1;
 80013ba:	f240 3247 	movw	r2, #839	@ 0x347
 80013be:	60c2      	str	r2, [r0, #12]
    htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	6103      	str	r3, [r0, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013c4:	f001 fd4a 	bl	8002e5c <HAL_TIM_Base_Init>
 80013c8:	b900      	cbnz	r0, 80013cc <MX_TIM13_Init+0x20>
}
 80013ca:	bd08      	pop	{r3, pc}
        Error_Handler();
 80013cc:	f7ff ffd2 	bl	8001374 <Error_Handler>
 80013d0:	200004a4 	.word	0x200004a4
 80013d4:	40001c00 	.word	0x40001c00

080013d8 <MX_TIM4_Init>:
{
 80013d8:	b500      	push	{lr}
 80013da:	b087      	sub	sp, #28
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013dc:	2300      	movs	r3, #0
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	9303      	str	r3, [sp, #12]
 80013e2:	9304      	str	r3, [sp, #16]
 80013e4:	9305      	str	r3, [sp, #20]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	9301      	str	r3, [sp, #4]
    htim4.Instance = TIM4;
 80013ea:	4813      	ldr	r0, [pc, #76]	@ (8001438 <MX_TIM4_Init+0x60>)
 80013ec:	4a13      	ldr	r2, [pc, #76]	@ (800143c <MX_TIM4_Init+0x64>)
 80013ee:	6002      	str	r2, [r0, #0]
    htim4.Init.Prescaler = 84 - 1;
 80013f0:	2253      	movs	r2, #83	@ 0x53
 80013f2:	6042      	str	r2, [r0, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	6083      	str	r3, [r0, #8]
    htim4.Init.Period = 25 - 1;
 80013f6:	2218      	movs	r2, #24
 80013f8:	60c2      	str	r2, [r0, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	6103      	str	r3, [r0, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013fe:	f001 fd2d 	bl	8002e5c <HAL_TIM_Base_Init>
 8001402:	b990      	cbnz	r0, 800142a <MX_TIM4_Init+0x52>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001408:	9302      	str	r3, [sp, #8]
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800140a:	a902      	add	r1, sp, #8
 800140c:	480a      	ldr	r0, [pc, #40]	@ (8001438 <MX_TIM4_Init+0x60>)
 800140e:	f001 fd5e 	bl	8002ece <HAL_TIM_ConfigClockSource>
 8001412:	b960      	cbnz	r0, 800142e <MX_TIM4_Init+0x56>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	9300      	str	r3, [sp, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	9301      	str	r3, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141a:	4669      	mov	r1, sp
 800141c:	4806      	ldr	r0, [pc, #24]	@ (8001438 <MX_TIM4_Init+0x60>)
 800141e:	f001 fdd5 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	b930      	cbnz	r0, 8001432 <MX_TIM4_Init+0x5a>
}
 8001424:	b007      	add	sp, #28
 8001426:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 800142a:	f7ff ffa3 	bl	8001374 <Error_Handler>
        Error_Handler();
 800142e:	f7ff ffa1 	bl	8001374 <Error_Handler>
        Error_Handler();
 8001432:	f7ff ff9f 	bl	8001374 <Error_Handler>
 8001436:	bf00      	nop
 8001438:	20000534 	.word	0x20000534
 800143c:	40000800 	.word	0x40000800

08001440 <MX_DAC_Init>:
{
 8001440:	b500      	push	{lr}
 8001442:	b083      	sub	sp, #12
    DAC_ChannelConfTypeDef sConfig = { 0 };
 8001444:	2300      	movs	r3, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	9301      	str	r3, [sp, #4]
    hdac.Instance = DAC;
 800144a:	480f      	ldr	r0, [pc, #60]	@ (8001488 <MX_DAC_Init+0x48>)
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_DAC_Init+0x4c>)
 800144e:	6003      	str	r3, [r0, #0]
    if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001450:	f000 fc18 	bl	8001c84 <HAL_DAC_Init>
 8001454:	b988      	cbnz	r0, 800147a <MX_DAC_Init+0x3a>
    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001456:	2304      	movs	r3, #4
 8001458:	9300      	str	r3, [sp, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800145a:	2200      	movs	r2, #0
 800145c:	9201      	str	r2, [sp, #4]
    if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800145e:	4669      	mov	r1, sp
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <MX_DAC_Init+0x48>)
 8001462:	f000 fcb3 	bl	8001dcc <HAL_DAC_ConfigChannel>
 8001466:	b950      	cbnz	r0, 800147e <MX_DAC_Init+0x3e>
    if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001468:	2210      	movs	r2, #16
 800146a:	4669      	mov	r1, sp
 800146c:	4806      	ldr	r0, [pc, #24]	@ (8001488 <MX_DAC_Init+0x48>)
 800146e:	f000 fcad 	bl	8001dcc <HAL_DAC_ConfigChannel>
 8001472:	b930      	cbnz	r0, 8001482 <MX_DAC_Init+0x42>
}
 8001474:	b003      	add	sp, #12
 8001476:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 800147a:	f7ff ff7b 	bl	8001374 <Error_Handler>
        Error_Handler();
 800147e:	f7ff ff79 	bl	8001374 <Error_Handler>
        Error_Handler();
 8001482:	f7ff ff77 	bl	8001374 <Error_Handler>
 8001486:	bf00      	nop
 8001488:	2000063c 	.word	0x2000063c
 800148c:	40007400 	.word	0x40007400

08001490 <MX_TIM6_Init>:
{
 8001490:	b500      	push	{lr}
 8001492:	b083      	sub	sp, #12
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	9301      	str	r3, [sp, #4]
    htim6.Instance = TIM6;
 800149a:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <MX_TIM6_Init+0x44>)
 800149c:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <MX_TIM6_Init+0x48>)
 800149e:	6002      	str	r2, [r0, #0]
    htim6.Init.Prescaler = 84 - 1;
 80014a0:	2253      	movs	r2, #83	@ 0x53
 80014a2:	6042      	str	r2, [r0, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	6083      	str	r3, [r0, #8]
    htim6.Init.Period = 10 - 1;
 80014a6:	2209      	movs	r2, #9
 80014a8:	60c2      	str	r2, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014ac:	f001 fcd6 	bl	8002e5c <HAL_TIM_Base_Init>
 80014b0:	b958      	cbnz	r0, 80014ca <MX_TIM6_Init+0x3a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014b2:	2320      	movs	r3, #32
 80014b4:	9300      	str	r3, [sp, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	9301      	str	r3, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014ba:	4669      	mov	r1, sp
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_TIM6_Init+0x44>)
 80014be:	f001 fd85 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	b920      	cbnz	r0, 80014ce <MX_TIM6_Init+0x3e>
}
 80014c4:	b003      	add	sp, #12
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80014ca:	f7ff ff53 	bl	8001374 <Error_Handler>
        Error_Handler();
 80014ce:	f7ff ff51 	bl	8001374 <Error_Handler>
 80014d2:	bf00      	nop
 80014d4:	200004ec 	.word	0x200004ec
 80014d8:	40001000 	.word	0x40001000

080014dc <SystemClock_Config>:
{
 80014dc:	b500      	push	{lr}
 80014de:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014e0:	2230      	movs	r2, #48	@ 0x30
 80014e2:	2100      	movs	r1, #0
 80014e4:	a808      	add	r0, sp, #32
 80014e6:	f005 fb09 	bl	8006afc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014ea:	2300      	movs	r3, #0
 80014ec:	9303      	str	r3, [sp, #12]
 80014ee:	9304      	str	r3, [sp, #16]
 80014f0:	9305      	str	r3, [sp, #20]
 80014f2:	9306      	str	r3, [sp, #24]
 80014f4:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <SystemClock_Config+0xa0>)
 80014fa:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80014fc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001500:	6411      	str	r1, [r2, #64]	@ 0x40
 8001502:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001504:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <SystemClock_Config+0xa4>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001522:	2301      	movs	r3, #1
 8001524:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001526:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800152a:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001530:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001534:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001536:	2208      	movs	r2, #8
 8001538:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800153a:	22a8      	movs	r2, #168	@ 0xa8
 800153c:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	a808      	add	r0, sp, #32
 8001546:	f000 ff9d 	bl	8002484 <HAL_RCC_OscConfig>
 800154a:	b998      	cbnz	r0, 8001574 <SystemClock_Config+0x98>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800154c:	230f      	movs	r3, #15
 800154e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001550:	2302      	movs	r3, #2
 8001552:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001558:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800155c:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001562:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001564:	2105      	movs	r1, #5
 8001566:	a803      	add	r0, sp, #12
 8001568:	f001 f9f0 	bl	800294c <HAL_RCC_ClockConfig>
 800156c:	b920      	cbnz	r0, 8001578 <SystemClock_Config+0x9c>
}
 800156e:	b015      	add	sp, #84	@ 0x54
 8001570:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8001574:	f7ff fefe 	bl	8001374 <Error_Handler>
        Error_Handler();
 8001578:	f7ff fefc 	bl	8001374 <Error_Handler>
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <main>:
{
 8001584:	b500      	push	{lr}
 8001586:	b083      	sub	sp, #12
    HAL_Init();
 8001588:	f000 fae8 	bl	8001b5c <HAL_Init>
    SystemClock_Config();
 800158c:	f7ff ffa6 	bl	80014dc <SystemClock_Config>
    MX_GPIO_Init();
 8001590:	f7ff fc82 	bl	8000e98 <MX_GPIO_Init>
    MX_DMA_Init();
 8001594:	f7ff fcd0 	bl	8000f38 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8001598:	f7ff feee 	bl	8001378 <MX_USART1_UART_Init>
    MX_TIM13_Init();
 800159c:	f7ff ff06 	bl	80013ac <MX_TIM13_Init>
    MX_TIM4_Init();
 80015a0:	f7ff ff1a 	bl	80013d8 <MX_TIM4_Init>
    MX_DAC_Init();
 80015a4:	f7ff ff4c 	bl	8001440 <MX_DAC_Init>
    MX_TIM6_Init();
 80015a8:	f7ff ff72 	bl	8001490 <MX_TIM6_Init>
    printf("\n\n\n--------\nStarting\n");
 80015ac:	4837      	ldr	r0, [pc, #220]	@ (800168c <main+0x108>)
 80015ae:	f005 f9c5 	bl	800693c <puts>
    HAL_TIM_Base_Start_IT(&htim4);
 80015b2:	4837      	ldr	r0, [pc, #220]	@ (8001690 <main+0x10c>)
 80015b4:	f001 faee 	bl	8002b94 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 80015b8:	4836      	ldr	r0, [pc, #216]	@ (8001694 <main+0x110>)
 80015ba:	f001 faeb 	bl	8002b94 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) &dma_buffer_1, 2 * DMA_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80015be:	4d36      	ldr	r5, [pc, #216]	@ (8001698 <main+0x114>)
 80015c0:	2400      	movs	r4, #0
 80015c2:	9400      	str	r4, [sp, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	4a35      	ldr	r2, [pc, #212]	@ (800169c <main+0x118>)
 80015c8:	4621      	mov	r1, r4
 80015ca:	4628      	mov	r0, r5
 80015cc:	f000 fb6c 	bl	8001ca8 <HAL_DAC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t*) &dma_buffer_2, 2 * DMA_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80015d0:	9400      	str	r4, [sp, #0]
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	4a32      	ldr	r2, [pc, #200]	@ (80016a0 <main+0x11c>)
 80015d6:	2110      	movs	r1, #16
 80015d8:	4628      	mov	r0, r5
 80015da:	f000 fb65 	bl	8001ca8 <HAL_DAC_Start_DMA>
    osKernelInitialize();
 80015de:	f001 fed9 	bl	8003394 <osKernelInitialize>
    printMutexHandle = osMutexNew(&printMutex_attributes);
 80015e2:	4830      	ldr	r0, [pc, #192]	@ (80016a4 <main+0x120>)
 80015e4:	f001 ff7a 	bl	80034dc <osMutexNew>
 80015e8:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <main+0x124>)
 80015ea:	6018      	str	r0, [r3, #0]
    ledMutexHandle = osMutexNew(&ledMutex_attributes);
 80015ec:	482f      	ldr	r0, [pc, #188]	@ (80016ac <main+0x128>)
 80015ee:	f001 ff75 	bl	80034dc <osMutexNew>
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <main+0x12c>)
 80015f4:	6018      	str	r0, [r3, #0]
    ledSemaphoreHandle = osSemaphoreNew(1, 1, &ledSemaphore_attributes);
 80015f6:	4a2f      	ldr	r2, [pc, #188]	@ (80016b4 <main+0x130>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	4608      	mov	r0, r1
 80015fc:	f002 f80d 	bl	800361a <osSemaphoreNew>
 8001600:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <main+0x134>)
 8001602:	6018      	str	r0, [r3, #0]
    pulseSemaphoreHandle = osSemaphoreNew(1, 1, &pulseSemaphore_attributes);
 8001604:	4a2d      	ldr	r2, [pc, #180]	@ (80016bc <main+0x138>)
 8001606:	2101      	movs	r1, #1
 8001608:	4608      	mov	r0, r1
 800160a:	f002 f806 	bl	800361a <osSemaphoreNew>
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <main+0x13c>)
 8001610:	6018      	str	r0, [r3, #0]
    tickQueueHandle = osMessageQueueNew(16, 4, &tickQueue_attributes);
 8001612:	4a2c      	ldr	r2, [pc, #176]	@ (80016c4 <main+0x140>)
 8001614:	2104      	movs	r1, #4
 8001616:	2010      	movs	r0, #16
 8001618:	f002 f8bb 	bl	8003792 <osMessageQueueNew>
 800161c:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <main+0x144>)
 800161e:	6018      	str	r0, [r3, #0]
    sineQueueHandle = osMessageQueueNew(16, sizeof(dacs[0]), &sineQueue_attributes);
 8001620:	4a2a      	ldr	r2, [pc, #168]	@ (80016cc <main+0x148>)
 8001622:	2110      	movs	r1, #16
 8001624:	4608      	mov	r0, r1
 8001626:	f002 f8b4 	bl	8003792 <osMessageQueueNew>
 800162a:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <main+0x14c>)
 800162c:	6018      	str	r0, [r3, #0]
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800162e:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <main+0x150>)
 8001630:	4621      	mov	r1, r4
 8001632:	4829      	ldr	r0, [pc, #164]	@ (80016d8 <main+0x154>)
 8001634:	f001 fee6 	bl	8003404 <osThreadNew>
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <main+0x158>)
 800163a:	6018      	str	r0, [r3, #0]
    ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 800163c:	4a28      	ldr	r2, [pc, #160]	@ (80016e0 <main+0x15c>)
 800163e:	4621      	mov	r1, r4
 8001640:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <main+0x160>)
 8001642:	f001 fedf 	bl	8003404 <osThreadNew>
 8001646:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <main+0x164>)
 8001648:	6018      	str	r0, [r3, #0]
    tickTaskHandle = osThreadNew(StartTickTask, NULL, &tickTask_attributes);
 800164a:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <main+0x168>)
 800164c:	4621      	mov	r1, r4
 800164e:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <main+0x16c>)
 8001650:	f001 fed8 	bl	8003404 <osThreadNew>
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <main+0x170>)
 8001656:	6018      	str	r0, [r3, #0]
    statusTaskHandle = osThreadNew(StartStatusTask, NULL, &statusTask_attributes);
 8001658:	4a27      	ldr	r2, [pc, #156]	@ (80016f8 <main+0x174>)
 800165a:	4621      	mov	r1, r4
 800165c:	4827      	ldr	r0, [pc, #156]	@ (80016fc <main+0x178>)
 800165e:	f001 fed1 	bl	8003404 <osThreadNew>
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <main+0x17c>)
 8001664:	6018      	str	r0, [r3, #0]
    pulseTaskHandle = osThreadNew(StartPulseTask, NULL, &pulseTask_attributes);
 8001666:	4a27      	ldr	r2, [pc, #156]	@ (8001704 <main+0x180>)
 8001668:	4621      	mov	r1, r4
 800166a:	4827      	ldr	r0, [pc, #156]	@ (8001708 <main+0x184>)
 800166c:	f001 feca 	bl	8003404 <osThreadNew>
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <main+0x188>)
 8001672:	6018      	str	r0, [r3, #0]
    sineTaskHandle = osThreadNew(StartSineTask, NULL, &sineTask_attributes);
 8001674:	4a26      	ldr	r2, [pc, #152]	@ (8001710 <main+0x18c>)
 8001676:	4621      	mov	r1, r4
 8001678:	4826      	ldr	r0, [pc, #152]	@ (8001714 <main+0x190>)
 800167a:	f001 fec3 	bl	8003404 <osThreadNew>
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <main+0x194>)
 8001680:	6018      	str	r0, [r3, #0]
    osKernelStart();
 8001682:	f001 fe99 	bl	80033b8 <osKernelStart>
    Error_Handler();
 8001686:	f7ff fe75 	bl	8001374 <Error_Handler>
 800168a:	bf00      	nop
 800168c:	080089b0 	.word	0x080089b0
 8001690:	20000534 	.word	0x20000534
 8001694:	200004ec 	.word	0x200004ec
 8001698:	2000063c 	.word	0x2000063c
 800169c:	2000032c 	.word	0x2000032c
 80016a0:	2000022c 	.word	0x2000022c
 80016a4:	08008aa4 	.word	0x08008aa4
 80016a8:	2000043c 	.word	0x2000043c
 80016ac:	08008a94 	.word	0x08008a94
 80016b0:	20000438 	.word	0x20000438
 80016b4:	08008a84 	.word	0x08008a84
 80016b8:	20000434 	.word	0x20000434
 80016bc:	08008a74 	.word	0x08008a74
 80016c0:	20000430 	.word	0x20000430
 80016c4:	08008ab4 	.word	0x08008ab4
 80016c8:	20000440 	.word	0x20000440
 80016cc:	08008a5c 	.word	0x08008a5c
 80016d0:	20000228 	.word	0x20000228
 80016d4:	08008b80 	.word	0x08008b80
 80016d8:	08000f7d 	.word	0x08000f7d
 80016dc:	20000458 	.word	0x20000458
 80016e0:	08008b5c 	.word	0x08008b5c
 80016e4:	08000fe9 	.word	0x08000fe9
 80016e8:	20000454 	.word	0x20000454
 80016ec:	08008b38 	.word	0x08008b38
 80016f0:	08001025 	.word	0x08001025
 80016f4:	20000450 	.word	0x20000450
 80016f8:	08008b14 	.word	0x08008b14
 80016fc:	080010a1 	.word	0x080010a1
 8001700:	2000044c 	.word	0x2000044c
 8001704:	08008af0 	.word	0x08008af0
 8001708:	08000fc1 	.word	0x08000fc1
 800170c:	20000448 	.word	0x20000448
 8001710:	08008acc 	.word	0x08008acc
 8001714:	080011a1 	.word	0x080011a1
 8001718:	20000444 	.word	0x20000444

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b500      	push	{lr}
 800171e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001720:	2200      	movs	r2, #0
 8001722:	9200      	str	r2, [sp, #0]
 8001724:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_MspInit+0x40>)
 8001726:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001728:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800172c:	6459      	str	r1, [r3, #68]	@ 0x44
 800172e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001730:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001734:	9100      	str	r1, [sp, #0]
 8001736:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	9201      	str	r2, [sp, #4]
 800173a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800173c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001740:	6419      	str	r1, [r3, #64]	@ 0x40
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800174c:	210f      	movs	r1, #15
 800174e:	f06f 0001 	mvn.w	r0, #1
 8001752:	f000 fa83 	bl	8001c5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	b003      	add	sp, #12
 8001758:	f85d fb04 	ldr.w	pc, [sp], #4
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001760:	b530      	push	{r4, r5, lr}
 8001762:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	2300      	movs	r3, #0
 8001766:	9303      	str	r3, [sp, #12]
 8001768:	9304      	str	r3, [sp, #16]
 800176a:	9305      	str	r3, [sp, #20]
 800176c:	9306      	str	r3, [sp, #24]
 800176e:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 8001770:	6802      	ldr	r2, [r0, #0]
 8001772:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <HAL_DAC_MspInit+0xe0>)
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001778:	b009      	add	sp, #36	@ 0x24
 800177a:	bd30      	pop	{r4, r5, pc}
 800177c:	4604      	mov	r4, r0
    __HAL_RCC_DAC_CLK_ENABLE();
 800177e:	2500      	movs	r5, #0
 8001780:	9501      	str	r5, [sp, #4]
 8001782:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8001786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001788:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40
 800178e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001790:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	9502      	str	r5, [sp, #8]
 800179a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017ac:	2330      	movs	r3, #48	@ 0x30
 80017ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b0:	2303      	movs	r3, #3
 80017b2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	a903      	add	r1, sp, #12
 80017b6:	4823      	ldr	r0, [pc, #140]	@ (8001844 <HAL_DAC_MspInit+0xe4>)
 80017b8:	f000 fd5e 	bl	8002278 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 80017bc:	4822      	ldr	r0, [pc, #136]	@ (8001848 <HAL_DAC_MspInit+0xe8>)
 80017be:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_DAC_MspInit+0xec>)
 80017c0:	6003      	str	r3, [r0, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80017c2:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 80017c6:	6043      	str	r3, [r0, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c8:	2340      	movs	r3, #64	@ 0x40
 80017ca:	6083      	str	r3, [r0, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	60c5      	str	r5, [r0, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80017ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d2:	6103      	str	r3, [r0, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017d8:	6143      	str	r3, [r0, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017de:	6183      	str	r3, [r0, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e4:	61c3      	str	r3, [r0, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80017e6:	6205      	str	r5, [r0, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017ea:	f000 fbbb 	bl	8001f64 <HAL_DMA_Init>
 80017ee:	bb08      	cbnz	r0, 8001834 <HAL_DAC_MspInit+0xd4>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_DAC_MspInit+0xe8>)
 80017f2:	60a3      	str	r3, [r4, #8]
 80017f4:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_dac2.Instance = DMA1_Stream6;
 80017f6:	4816      	ldr	r0, [pc, #88]	@ (8001850 <HAL_DAC_MspInit+0xf0>)
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_DAC_MspInit+0xf4>)
 80017fa:	6003      	str	r3, [r0, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80017fc:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8001800:	6043      	str	r3, [r0, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001802:	2340      	movs	r3, #64	@ 0x40
 8001804:	6083      	str	r3, [r0, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60c3      	str	r3, [r0, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800180a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180e:	6102      	str	r2, [r0, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001810:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001814:	6142      	str	r2, [r0, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001816:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181a:	6182      	str	r2, [r0, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 800181c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001820:	61c2      	str	r2, [r0, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001822:	6203      	str	r3, [r0, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001824:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001826:	f000 fb9d 	bl	8001f64 <HAL_DMA_Init>
 800182a:	b930      	cbnz	r0, 800183a <HAL_DAC_MspInit+0xda>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_DAC_MspInit+0xf0>)
 800182e:	60e3      	str	r3, [r4, #12]
 8001830:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8001832:	e7a1      	b.n	8001778 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8001834:	f7ff fd9e 	bl	8001374 <Error_Handler>
 8001838:	e7da      	b.n	80017f0 <HAL_DAC_MspInit+0x90>
      Error_Handler();
 800183a:	f7ff fd9b 	bl	8001374 <Error_Handler>
 800183e:	e7f5      	b.n	800182c <HAL_DAC_MspInit+0xcc>
 8001840:	40007400 	.word	0x40007400
 8001844:	40020000 	.word	0x40020000
 8001848:	200005dc 	.word	0x200005dc
 800184c:	40026088 	.word	0x40026088
 8001850:	2000057c 	.word	0x2000057c
 8001854:	400260a0 	.word	0x400260a0

08001858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001858:	b500      	push	{lr}
 800185a:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM4)
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <HAL_TIM_Base_MspInit+0x7c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d008      	beq.n	8001876 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001864:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <HAL_TIM_Base_MspInit+0x80>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM13)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <HAL_TIM_Base_MspInit+0x84>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d023      	beq.n	80018b8 <HAL_TIM_Base_MspInit+0x60>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001870:	b005      	add	sp, #20
 8001872:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001876:	2200      	movs	r2, #0
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_TIM_Base_MspInit+0x88>)
 800187c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800187e:	f041 0104 	orr.w	r1, r1, #4
 8001882:	6419      	str	r1, [r3, #64]	@ 0x40
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800188e:	2105      	movs	r1, #5
 8001890:	201e      	movs	r0, #30
 8001892:	f000 f9e3 	bl	8001c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001896:	201e      	movs	r0, #30
 8001898:	f000 f9f0 	bl	8001c7c <HAL_NVIC_EnableIRQ>
 800189c:	e7e8      	b.n	8001870 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_TIM_Base_MspInit+0x88>)
 80018a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	9b02      	ldr	r3, [sp, #8]
 80018b6:	e7db      	b.n	8001870 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	9303      	str	r3, [sp, #12]
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_TIM_Base_MspInit+0x88>)
 80018be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018cc:	9303      	str	r3, [sp, #12]
 80018ce:	9b03      	ldr	r3, [sp, #12]
}
 80018d0:	e7ce      	b.n	8001870 <HAL_TIM_Base_MspInit+0x18>
 80018d2:	bf00      	nop
 80018d4:	40000800 	.word	0x40000800
 80018d8:	40001000 	.word	0x40001000
 80018dc:	40001c00 	.word	0x40001c00
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b500      	push	{lr}
 80018e6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	2300      	movs	r3, #0
 80018ea:	9303      	str	r3, [sp, #12]
 80018ec:	9304      	str	r3, [sp, #16]
 80018ee:	9305      	str	r3, [sp, #20]
 80018f0:	9306      	str	r3, [sp, #24]
 80018f2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80018f4:	6802      	ldr	r2, [r0, #0]
 80018f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018fa:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80018fe:	429a      	cmp	r2, r3
 8001900:	d002      	beq.n	8001908 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001902:	b009      	add	sp, #36	@ 0x24
 8001904:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001908:	2100      	movs	r1, #0
 800190a:	9101      	str	r1, [sp, #4]
 800190c:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001912:	f042 0210 	orr.w	r2, r2, #16
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
 8001918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800191a:	f002 0210 	and.w	r2, r2, #16
 800191e:	9201      	str	r2, [sp, #4]
 8001920:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	9102      	str	r1, [sp, #8]
 8001924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	631a      	str	r2, [r3, #48]	@ 0x30
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001936:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800193a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001944:	2307      	movs	r3, #7
 8001946:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	a903      	add	r1, sp, #12
 800194a:	4802      	ldr	r0, [pc, #8]	@ (8001954 <HAL_UART_MspInit+0x70>)
 800194c:	f000 fc94 	bl	8002278 <HAL_GPIO_Init>
}
 8001950:	e7d7      	b.n	8001902 <HAL_UART_MspInit+0x1e>
 8001952:	bf00      	nop
 8001954:	40020000 	.word	0x40020000

08001958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b530      	push	{r4, r5, lr}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <HAL_InitTick+0x90>)
 8001964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001966:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001976:	a902      	add	r1, sp, #8
 8001978:	a803      	add	r0, sp, #12
 800197a:	f001 f8bd 	bl	8002af8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800197e:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001980:	b9cb      	cbnz	r3, 80019b6 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001982:	f001 f899 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8001986:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <HAL_InitTick+0x94>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	3b01      	subs	r3, #1

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001992:	4817      	ldr	r0, [pc, #92]	@ (80019f0 <HAL_InitTick+0x98>)
 8001994:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <HAL_InitTick+0x9c>)
 8001996:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001998:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800199c:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800199e:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	6083      	str	r3, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80019a8:	f001 fa58 	bl	8002e5c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80019ac:	4605      	mov	r5, r0
 80019ae:	b130      	cbz	r0, 80019be <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80019b0:	4628      	mov	r0, r5
 80019b2:	b009      	add	sp, #36	@ 0x24
 80019b4:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019b6:	f001 f87f 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 80019ba:	0043      	lsls	r3, r0, #1
 80019bc:	e7e4      	b.n	8001988 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim14);
 80019be:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <HAL_InitTick+0x98>)
 80019c0:	f001 f8e8 	bl	8002b94 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80019c4:	4605      	mov	r5, r0
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d1f2      	bne.n	80019b0 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019ca:	202d      	movs	r0, #45	@ 0x2d
 80019cc:	f000 f956 	bl	8001c7c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d0:	2c0f      	cmp	r4, #15
 80019d2:	d901      	bls.n	80019d8 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80019d4:	2501      	movs	r5, #1
 80019d6:	e7eb      	b.n	80019b0 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	4621      	mov	r1, r4
 80019dc:	202d      	movs	r0, #45	@ 0x2d
 80019de:	f000 f93d 	bl	8001c5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_InitTick+0xa0>)
 80019e4:	601c      	str	r4, [r3, #0]
 80019e6:	e7e3      	b.n	80019b0 <HAL_InitTick+0x58>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	20000650 	.word	0x20000650
 80019f4:	40002000 	.word	0x40002000
 80019f8:	20000028 	.word	0x20000028

080019fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler>

080019fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler>

08001a00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler>

08001a02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler>

08001a04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler>

08001a06 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a06:	4770      	bx	lr

08001a08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a0a:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <DMA1_Stream5_IRQHandler+0xc>)
 8001a0c:	f000 fb46 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a10:	bd08      	pop	{r3, pc}
 8001a12:	bf00      	nop
 8001a14:	200005dc 	.word	0x200005dc

08001a18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001a1a:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <DMA1_Stream6_IRQHandler+0xc>)
 8001a1c:	f000 fb3e 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a20:	bd08      	pop	{r3, pc}
 8001a22:	bf00      	nop
 8001a24:	2000057c 	.word	0x2000057c

08001a28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a2a:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <TIM4_IRQHandler+0xc>)
 8001a2c:	f001 f8fa 	bl	8002c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a30:	bd08      	pop	{r3, pc}
 8001a32:	bf00      	nop
 8001a34:	20000534 	.word	0x20000534

08001a38 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
  ++ulHighFrequencyTimerTicks;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001a42:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8001a44:	f001 f8ee 	bl	8002c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a48:	bd08      	pop	{r3, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000042c 	.word	0x2000042c
 8001a50:	20000650 	.word	0x20000650

08001a54 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001a54:	2001      	movs	r0, #1
 8001a56:	4770      	bx	lr

08001a58 <_kill>:

int _kill(int pid, int sig)
{
 8001a58:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5a:	f005 f8f7 	bl	8006c4c <__errno>
 8001a5e:	2316      	movs	r3, #22
 8001a60:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a66:	bd08      	pop	{r3, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001a6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a6e:	f7ff fff3 	bl	8001a58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0xa>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	460c      	mov	r4, r1
 8001a78:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	e006      	b.n	8001a8c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001a7e:	f3af 8000 	nop.w
 8001a82:	4621      	mov	r1, r4
 8001a84:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001a8a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	42b5      	cmp	r5, r6
 8001a8e:	dbf6      	blt.n	8001a7e <_read+0xa>
  }

  return len;
}
 8001a90:	4630      	mov	r0, r6
 8001a92:	bd70      	pop	{r4, r5, r6, pc}

08001a94 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a9e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	4770      	bx	lr

08001aa4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	4770      	bx	lr

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <_sbrk+0x38>)
 8001ab2:	490d      	ldr	r1, [pc, #52]	@ (8001ae8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <_sbrk+0x40>)
 8001ab6:	6800      	ldr	r0, [r0, #0]
 8001ab8:	b140      	cbz	r0, 8001acc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	480c      	ldr	r0, [pc, #48]	@ (8001aec <_sbrk+0x40>)
 8001abc:	6800      	ldr	r0, [r0, #0]
 8001abe:	4403      	add	r3, r0
 8001ac0:	1a52      	subs	r2, r2, r1
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d806      	bhi.n	8001ad4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ac6:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <_sbrk+0x40>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001aca:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001acc:	4807      	ldr	r0, [pc, #28]	@ (8001aec <_sbrk+0x40>)
 8001ace:	4c08      	ldr	r4, [pc, #32]	@ (8001af0 <_sbrk+0x44>)
 8001ad0:	6004      	str	r4, [r0, #0]
 8001ad2:	e7f2      	b.n	8001aba <_sbrk+0xe>
    errno = ENOMEM;
 8001ad4:	f005 f8ba 	bl	8006c4c <__errno>
 8001ad8:	230c      	movs	r3, #12
 8001ada:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ae0:	e7f3      	b.n	8001aca <_sbrk+0x1e>
 8001ae2:	bf00      	nop
 8001ae4:	20020000 	.word	0x20020000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000698 	.word	0x20000698
 8001af0:	200015e8 	.word	0x200015e8

08001af4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4a03      	ldr	r2, [pc, #12]	@ (8001b04 <SystemInit+0x10>)
 8001af6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001afa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001afe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b0c:	f7ff fff2 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f005 f88f 	bl	8006c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fd23 	bl	8001584 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001b4c:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 8001b50:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001b54:	200015e4 	.word	0x200015e4

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_Init+0x30>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b66:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b6e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b76:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f85d 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f7ff feea 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fdca 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001b88:	2000      	movs	r0, #0
 8001b8a:	bd08      	pop	{r3, pc}
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b90:	4a03      	ldr	r2, [pc, #12]	@ (8001ba0 <HAL_IncTick+0x10>)
 8001b92:	6811      	ldr	r1, [r2, #0]
 8001b94:	4b03      	ldr	r3, [pc, #12]	@ (8001ba4 <HAL_IncTick+0x14>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	440b      	add	r3, r1
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2000069c 	.word	0x2000069c
 8001ba4:	20000024 	.word	0x20000024

08001ba8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ba8:	4b01      	ldr	r3, [pc, #4]	@ (8001bb0 <HAL_GetTick+0x8>)
 8001baa:	6818      	ldr	r0, [r3, #0]
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000069c 	.word	0x2000069c

08001bb4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	db07      	blt.n	8001bc8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb8:	f000 021f 	and.w	r2, r0, #31
 8001bbc:	0940      	lsrs	r0, r0, #5
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	4a02      	ldr	r2, [pc, #8]	@ (8001bcc <__NVIC_EnableIRQ+0x18>)
 8001bc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	db08      	blt.n	8001be6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	0109      	lsls	r1, r1, #4
 8001bd6:	b2c9      	uxtb	r1, r1
 8001bd8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001bdc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001be0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001be4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	f000 000f 	and.w	r0, r0, #15
 8001bea:	0109      	lsls	r1, r1, #4
 8001bec:	b2c9      	uxtb	r1, r1
 8001bee:	4b01      	ldr	r3, [pc, #4]	@ (8001bf4 <__NVIC_SetPriority+0x24>)
 8001bf0:	5419      	strb	r1, [r3, r0]
  }
}
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed14 	.word	0xe000ed14

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfe:	f1c0 0c07 	rsb	ip, r0, #7
 8001c02:	f1bc 0f04 	cmp.w	ip, #4
 8001c06:	bf28      	it	cs
 8001c08:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0c:	1d03      	adds	r3, r0, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d90f      	bls.n	8001c32 <NVIC_EncodePriority+0x3a>
 8001c12:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001c18:	fa0e f00c 	lsl.w	r0, lr, ip
 8001c1c:	ea21 0100 	bic.w	r1, r1, r0
 8001c20:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c22:	fa0e fe03 	lsl.w	lr, lr, r3
 8001c26:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001c2a:	ea41 0002 	orr.w	r0, r1, r2
 8001c2e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	2300      	movs	r3, #0
 8001c34:	e7ee      	b.n	8001c14 <NVIC_EncodePriority+0x1c>
	...

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	0200      	lsls	r0, r0, #8
 8001c46:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001c54:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_NVIC_SetPriority+0x1c>)
 8001c62:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c64:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001c68:	f7ff ffc6 	bl	8001bf8 <NVIC_EncodePriority>
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff ffae 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7e:	f7ff ff99 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001c82:	bd08      	pop	{r3, pc}

08001c84 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c84:	b170      	cbz	r0, 8001ca4 <HAL_DAC_Init+0x20>
{
 8001c86:	b510      	push	{r4, lr}
 8001c88:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c8a:	7903      	ldrb	r3, [r0, #4]
 8001c8c:	b133      	cbz	r3, 8001c9c <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c92:	2000      	movs	r0, #0
 8001c94:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c96:	2301      	movs	r3, #1
 8001c98:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8001c9a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001c9c:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001c9e:	f7ff fd5f 	bl	8001760 <HAL_DAC_MspInit>
 8001ca2:	e7f4      	b.n	8001c8e <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	460d      	mov	r5, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	9a04      	ldr	r2, [sp, #16]
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d061      	beq.n	8001d78 <HAL_DAC_Start_DMA+0xd0>
 8001cb4:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cb6:	7940      	ldrb	r0, [r0, #5]
 8001cb8:	2801      	cmp	r0, #1
 8001cba:	d05f      	beq.n	8001d7c <HAL_DAC_Start_DMA+0xd4>
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	7120      	strb	r0, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 8001cc4:	2d00      	cmp	r5, #0
 8001cc6:	d12f      	bne.n	8001d28 <HAL_DAC_Start_DMA+0x80>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001cc8:	68a0      	ldr	r0, [r4, #8]
 8001cca:	4e2d      	ldr	r6, [pc, #180]	@ (8001d80 <HAL_DAC_Start_DMA+0xd8>)
 8001ccc:	63c6      	str	r6, [r0, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001cce:	68a0      	ldr	r0, [r4, #8]
 8001cd0:	4e2c      	ldr	r6, [pc, #176]	@ (8001d84 <HAL_DAC_Start_DMA+0xdc>)
 8001cd2:	6406      	str	r6, [r0, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001cd4:	68a0      	ldr	r0, [r4, #8]
 8001cd6:	4e2c      	ldr	r6, [pc, #176]	@ (8001d88 <HAL_DAC_Start_DMA+0xe0>)
 8001cd8:	64c6      	str	r6, [r0, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001cda:	6826      	ldr	r6, [r4, #0]
 8001cdc:	6830      	ldr	r0, [r6, #0]
 8001cde:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8001ce2:	6030      	str	r0, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001ce4:	b122      	cbz	r2, 8001cf0 <HAL_DAC_Start_DMA+0x48>
 8001ce6:	2a04      	cmp	r2, #4
 8001ce8:	d01b      	beq.n	8001d22 <HAL_DAC_Start_DMA+0x7a>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001cea:	6822      	ldr	r2, [r4, #0]
 8001cec:	3210      	adds	r2, #16
        break;
 8001cee:	e001      	b.n	8001cf4 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001cf0:	6822      	ldr	r2, [r4, #0]
 8001cf2:	3208      	adds	r2, #8
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	d131      	bne.n	8001d5c <HAL_DAC_Start_DMA+0xb4>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001cf8:	6826      	ldr	r6, [r4, #0]
 8001cfa:	6830      	ldr	r0, [r6, #0]
 8001cfc:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8001d00:	6030      	str	r0, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001d02:	68a0      	ldr	r0, [r4, #8]
 8001d04:	f000 f994 	bl	8002030 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d12e      	bne.n	8001d6e <HAL_DAC_Start_DMA+0xc6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001d10:	6821      	ldr	r1, [r4, #0]
 8001d12:	680b      	ldr	r3, [r1, #0]
 8001d14:	f005 0510 	and.w	r5, r5, #16
 8001d18:	2201      	movs	r2, #1
 8001d1a:	40aa      	lsls	r2, r5
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	320c      	adds	r2, #12
        break;
 8001d26:	e7e5      	b.n	8001cf4 <HAL_DAC_Start_DMA+0x4c>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001d28:	68e0      	ldr	r0, [r4, #12]
 8001d2a:	4e18      	ldr	r6, [pc, #96]	@ (8001d8c <HAL_DAC_Start_DMA+0xe4>)
 8001d2c:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001d2e:	68e0      	ldr	r0, [r4, #12]
 8001d30:	4e17      	ldr	r6, [pc, #92]	@ (8001d90 <HAL_DAC_Start_DMA+0xe8>)
 8001d32:	6406      	str	r6, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001d34:	68e0      	ldr	r0, [r4, #12]
 8001d36:	4e17      	ldr	r6, [pc, #92]	@ (8001d94 <HAL_DAC_Start_DMA+0xec>)
 8001d38:	64c6      	str	r6, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001d3a:	6826      	ldr	r6, [r4, #0]
 8001d3c:	6830      	ldr	r0, [r6, #0]
 8001d3e:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001d42:	6030      	str	r0, [r6, #0]
    switch (Alignment)
 8001d44:	b122      	cbz	r2, 8001d50 <HAL_DAC_Start_DMA+0xa8>
 8001d46:	2a04      	cmp	r2, #4
 8001d48:	d005      	beq.n	8001d56 <HAL_DAC_Start_DMA+0xae>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	321c      	adds	r2, #28
        break;
 8001d4e:	e7d1      	b.n	8001cf4 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	3214      	adds	r2, #20
        break;
 8001d54:	e7ce      	b.n	8001cf4 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	3218      	adds	r2, #24
        break;
 8001d5a:	e7cb      	b.n	8001cf4 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d5c:	6826      	ldr	r6, [r4, #0]
 8001d5e:	6830      	ldr	r0, [r6, #0]
 8001d60:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 8001d64:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001d66:	68e0      	ldr	r0, [r4, #12]
 8001d68:	f000 f962 	bl	8002030 <HAL_DMA_Start_IT>
 8001d6c:	e7cc      	b.n	8001d08 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d6e:	6923      	ldr	r3, [r4, #16]
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6123      	str	r3, [r4, #16]
 8001d76:	e7d3      	b.n	8001d20 <HAL_DAC_Start_DMA+0x78>
    return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e7d1      	b.n	8001d20 <HAL_DAC_Start_DMA+0x78>
  __HAL_LOCK(hdac);
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	e7cf      	b.n	8001d20 <HAL_DAC_Start_DMA+0x78>
 8001d80:	08001d99 	.word	0x08001d99
 8001d84:	08001da9 	.word	0x08001da9
 8001d88:	08001db5 	.word	0x08001db5
 8001d8c:	08001e31 	.word	0x08001e31
 8001d90:	08001e41 	.word	0x08001e41
 8001d94:	08001e4b 	.word	0x08001e4b

08001d98 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d98:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d9a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fa5d 	bl	800125c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	7123      	strb	r3, [r4, #4]
}
 8001da6:	bd10      	pop	{r4, pc}

08001da8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001da8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001daa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001dac:	f7ff fa6e 	bl	800128c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001db0:	bd08      	pop	{r3, pc}

08001db2 <HAL_DAC_ErrorCallbackCh1>:
}
 8001db2:	4770      	bx	lr

08001db4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001db4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fff6 	bl	8001db2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	7123      	strb	r3, [r4, #4]
}
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8001dcc:	b348      	cbz	r0, 8001e22 <HAL_DAC_ConfigChannel+0x56>
 8001dce:	4684      	mov	ip, r0
 8001dd0:	b349      	cbz	r1, 8001e26 <HAL_DAC_ConfigChannel+0x5a>
  __HAL_LOCK(hdac);
 8001dd2:	7943      	ldrb	r3, [r0, #5]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d028      	beq.n	8001e2a <HAL_DAC_ConfigChannel+0x5e>
{
 8001dd8:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8001dda:	f04f 0e01 	mov.w	lr, #1
 8001dde:	f880 e005 	strb.w	lr, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001de6:	6804      	ldr	r4, [r0, #0]
 8001de8:	6820      	ldr	r0, [r4, #0]
               << (Channel & 0x10UL));
 8001dea:	f002 0210 	and.w	r2, r2, #16
 8001dee:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8001df2:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001df4:	ea20 0003 	bic.w	r0, r0, r3
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001df8:	680b      	ldr	r3, [r1, #0]
 8001dfa:	6849      	ldr	r1, [r1, #4]
 8001dfc:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	4303      	orrs	r3, r0
  hdac->Instance->CR = tmpreg1;
 8001e02:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e04:	f8dc 0000 	ldr.w	r0, [ip]
 8001e08:	6803      	ldr	r3, [r0, #0]
 8001e0a:	21c0      	movs	r1, #192	@ 0xc0
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	ea23 0302 	bic.w	r3, r3, r2
 8001e14:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001e16:	f88c e004 	strb.w	lr, [ip, #4]
  __HAL_UNLOCK(hdac);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f88c 0005 	strb.w	r0, [ip, #5]
}
 8001e20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
 8001e24:	4770      	bx	lr
 8001e26:	2001      	movs	r0, #1
 8001e28:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001e2a:	2002      	movs	r0, #2
}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_DACEx_ErrorCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001e2e:	4770      	bx	lr

08001e30 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e30:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e32:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff fa41 	bl	80012bc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	7123      	strb	r3, [r4, #4]
}
 8001e3e:	bd10      	pop	{r4, pc}

08001e40 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e40:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001e42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001e44:	f7ff fa52 	bl	80012ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e48:	bd08      	pop	{r3, pc}

08001e4a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4c:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e4e:	6923      	ldr	r3, [r4, #16]
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff ffe9 	bl	8001e2e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	7123      	strb	r3, [r4, #4]
}
 8001e60:	bd10      	pop	{r4, pc}

08001e62 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e62:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e64:	6805      	ldr	r5, [r0, #0]
 8001e66:	682c      	ldr	r4, [r5, #0]
 8001e68:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001e6c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e6e:	6804      	ldr	r4, [r0, #0]
 8001e70:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e72:	6883      	ldr	r3, [r0, #8]
 8001e74:	2b40      	cmp	r3, #64	@ 0x40
 8001e76:	d005      	beq.n	8001e84 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	60da      	str	r2, [r3, #12]
  }
}
 8001e80:	bc30      	pop	{r4, r5}
 8001e82:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001e84:	6803      	ldr	r3, [r0, #0]
 8001e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001e88:	6803      	ldr	r3, [r0, #0]
 8001e8a:	60d9      	str	r1, [r3, #12]
 8001e8c:	e7f8      	b.n	8001e80 <DMA_SetConfig+0x1e>
	...

08001e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e90:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e92:	6803      	ldr	r3, [r0, #0]
 8001e94:	b2d9      	uxtb	r1, r3
 8001e96:	3910      	subs	r1, #16
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <DMA_CalcBaseAndBitshift+0x3c>)
 8001e9a:	fba2 4201 	umull	r4, r2, r2, r1
 8001e9e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8001ed0 <DMA_CalcBaseAndBitshift+0x40>)
 8001ea2:	5ca2      	ldrb	r2, [r4, r2]
 8001ea4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ea6:	295f      	cmp	r1, #95	@ 0x5f
 8001ea8:	d909      	bls.n	8001ebe <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eaa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001eb6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ebc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ebe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	6583      	str	r3, [r0, #88]	@ 0x58
 8001ec8:	e7f5      	b.n	8001eb6 <DMA_CalcBaseAndBitshift+0x26>
 8001eca:	bf00      	nop
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab
 8001ed0:	08008bbc 	.word	0x08008bbc

08001ed4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ed4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ed6:	6982      	ldr	r2, [r0, #24]
 8001ed8:	b992      	cbnz	r2, 8001f00 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d00a      	beq.n	8001ef4 <DMA_CheckFifoParam+0x20>
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d002      	beq.n	8001ee8 <DMA_CheckFifoParam+0x14>
 8001ee2:	b10b      	cbz	r3, 8001ee8 <DMA_CheckFifoParam+0x14>
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001eea:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001eee:	d128      	bne.n	8001f42 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001efa:	d024      	beq.n	8001f46 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2000      	movs	r0, #0
 8001efe:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f00:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001f04:	d009      	beq.n	8001f1a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d925      	bls.n	8001f56 <DMA_CheckFifoParam+0x82>
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d125      	bne.n	8001f5a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f10:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001f14:	d123      	bne.n	8001f5e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2000      	movs	r0, #0
 8001f18:	4770      	bx	lr
    switch (tmp)
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d803      	bhi.n	8001f26 <DMA_CheckFifoParam+0x52>
 8001f1e:	e8df f003 	tbb	[pc, r3]
 8001f22:	0414      	.short	0x0414
 8001f24:	0a14      	.short	0x0a14
 8001f26:	2000      	movs	r0, #0
 8001f28:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f2c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001f30:	d10d      	bne.n	8001f4e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2000      	movs	r0, #0
 8001f34:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f36:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f3c:	d009      	beq.n	8001f52 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4770      	bx	lr
        status = HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
 8001f44:	4770      	bx	lr
        status = HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
 8001f48:	4770      	bx	lr
      status = HAL_ERROR;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	4770      	bx	lr
        status = HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
 8001f50:	4770      	bx	lr
        status = HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
 8001f54:	4770      	bx	lr
      status = HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
 8001f58:	4770      	bx	lr
    switch (tmp)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_DMA_Init>:
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fe1e 	bl	8001ba8 <HAL_GetTick>
  if(hdma == NULL)
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d05b      	beq.n	8002028 <HAL_DMA_Init+0xc4>
 8001f70:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f012 0f01 	tst.w	r2, #1
 8001f90:	d00a      	beq.n	8001fa8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f92:	f7ff fe09 	bl	8001ba8 <HAL_GetTick>
 8001f96:	1b43      	subs	r3, r0, r5
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d9f5      	bls.n	8001f88 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001fa8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001faa:	4920      	ldr	r1, [pc, #128]	@ (800202c <HAL_DMA_Init+0xc8>)
 8001fac:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	6862      	ldr	r2, [r4, #4]
 8001fb0:	68a0      	ldr	r0, [r4, #8]
 8001fb2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb8:	6920      	ldr	r0, [r4, #16]
 8001fba:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	69a0      	ldr	r0, [r4, #24]
 8001fc2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	6a20      	ldr	r0, [r4, #32]
 8001fca:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fcc:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001fd0:	2904      	cmp	r1, #4
 8001fd2:	d01e      	beq.n	8002012 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001fd4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001fd6:	6826      	ldr	r6, [r4, #0]
 8001fd8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fda:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001fde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001fe0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d107      	bne.n	8001ff6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001fe6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001fe8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001fec:	b11b      	cbz	r3, 8001ff6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ff70 	bl	8001ed4 <DMA_CheckFifoParam>
 8001ff4:	b990      	cbnz	r0, 800201c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001ff6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff ff49 	bl	8001e90 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002000:	233f      	movs	r3, #63	@ 0x3f
 8002002:	4093      	lsls	r3, r2
 8002004:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002006:	2000      	movs	r0, #0
 8002008:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800200a:	2301      	movs	r3, #1
 800200c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002010:	e7c9      	b.n	8001fa6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002012:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002014:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002016:	4301      	orrs	r1, r0
 8002018:	430a      	orrs	r2, r1
 800201a:	e7db      	b.n	8001fd4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800201c:	2340      	movs	r3, #64	@ 0x40
 800201e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002020:	2001      	movs	r0, #1
 8002022:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8002026:	e7be      	b.n	8001fa6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002028:	2001      	movs	r0, #1
 800202a:	e7bc      	b.n	8001fa6 <HAL_DMA_Init+0x42>
 800202c:	f010803f 	.word	0xf010803f

08002030 <HAL_DMA_Start_IT>:
{
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002034:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002036:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800203a:	2801      	cmp	r0, #1
 800203c:	d02b      	beq.n	8002096 <HAL_DMA_Start_IT+0x66>
 800203e:	2001      	movs	r0, #1
 8002040:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002044:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8002048:	b2c0      	uxtb	r0, r0
 800204a:	2801      	cmp	r0, #1
 800204c:	d004      	beq.n	8002058 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800204e:	2300      	movs	r3, #0
 8002050:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8002054:	2002      	movs	r0, #2
}
 8002056:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	2002      	movs	r0, #2
 800205a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205e:	2000      	movs	r0, #0
 8002060:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff fefd 	bl	8001e62 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800206a:	233f      	movs	r3, #63	@ 0x3f
 800206c:	4093      	lsls	r3, r2
 800206e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f043 0316 	orr.w	r3, r3, #22
 8002078:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800207a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800207c:	b123      	cbz	r3, 8002088 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	6813      	ldr	r3, [r2, #0]
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2000      	movs	r0, #0
 8002094:	e7df      	b.n	8002056 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8002096:	2002      	movs	r0, #2
 8002098:	e7dd      	b.n	8002056 <HAL_DMA_Start_IT+0x26>
	...

0800209c <HAL_DMA_IRQHandler>:
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b083      	sub	sp, #12
 80020a0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020a6:	4b72      	ldr	r3, [pc, #456]	@ (8002270 <HAL_DMA_IRQHandler+0x1d4>)
 80020a8:	681d      	ldr	r5, [r3, #0]
 80020aa:	4b72      	ldr	r3, [pc, #456]	@ (8002274 <HAL_DMA_IRQHandler+0x1d8>)
 80020ac:	fba3 3505 	umull	r3, r5, r3, r5
 80020b0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80020b4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80020b8:	2308      	movs	r3, #8
 80020ba:	4093      	lsls	r3, r2
 80020bc:	4233      	tst	r3, r6
 80020be:	d010      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020c0:	6803      	ldr	r3, [r0, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f012 0f04 	tst.w	r2, #4
 80020c8:	d00b      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80020d4:	2308      	movs	r3, #8
 80020d6:	4093      	lsls	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80020e4:	2301      	movs	r3, #1
 80020e6:	4093      	lsls	r3, r2
 80020e8:	4233      	tst	r3, r6
 80020ea:	d009      	beq.n	8002100 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6952      	ldr	r2, [r2, #20]
 80020f0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020f6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002100:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002102:	2304      	movs	r3, #4
 8002104:	4093      	lsls	r3, r2
 8002106:	4233      	tst	r3, r6
 8002108:	d009      	beq.n	800211e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	f012 0f02 	tst.w	r2, #2
 8002112:	d004      	beq.n	800211e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002114:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002116:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800211e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002120:	2310      	movs	r3, #16
 8002122:	4093      	lsls	r3, r2
 8002124:	4233      	tst	r3, r6
 8002126:	d024      	beq.n	8002172 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	f012 0f08 	tst.w	r2, #8
 8002130:	d01f      	beq.n	8002172 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002132:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800213c:	d00d      	beq.n	800215a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002144:	d104      	bne.n	8002150 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002146:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002148:	b19b      	cbz	r3, 8002172 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800214a:	4620      	mov	r0, r4
 800214c:	4798      	blx	r3
 800214e:	e010      	b.n	8002172 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002150:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002152:	b173      	cbz	r3, 8002172 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002154:	4620      	mov	r0, r4
 8002156:	4798      	blx	r3
 8002158:	e00b      	b.n	8002172 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002160:	d103      	bne.n	800216a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800216a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800216c:	b10b      	cbz	r3, 8002172 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800216e:	4620      	mov	r0, r4
 8002170:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002172:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002174:	2320      	movs	r3, #32
 8002176:	4093      	lsls	r3, r2
 8002178:	4233      	tst	r3, r6
 800217a:	d055      	beq.n	8002228 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	f012 0f10 	tst.w	r2, #16
 8002184:	d050      	beq.n	8002228 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002186:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002188:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d00e      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800219a:	d033      	beq.n	8002204 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80021a2:	d12a      	bne.n	80021fa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80021a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03e      	beq.n	8002228 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80021aa:	4620      	mov	r0, r4
 80021ac:	4798      	blx	r3
 80021ae:	e03b      	b.n	8002228 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b0:	6822      	ldr	r2, [r4, #0]
 80021b2:	6813      	ldr	r3, [r2, #0]
 80021b4:	f023 0316 	bic.w	r3, r3, #22
 80021b8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	6953      	ldr	r3, [r2, #20]
 80021be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021c2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021c6:	b1a3      	cbz	r3, 80021f2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c8:	6822      	ldr	r2, [r4, #0]
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	f023 0308 	bic.w	r3, r3, #8
 80021d0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80021d4:	233f      	movs	r3, #63	@ 0x3f
 80021d6:	4093      	lsls	r3, r2
 80021d8:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80021da:	2301      	movs	r3, #1
 80021dc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80021e0:	2300      	movs	r3, #0
 80021e2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80021e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03f      	beq.n	800226c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80021ec:	4620      	mov	r0, r4
 80021ee:	4798      	blx	r3
        return;
 80021f0:	e03c      	b.n	800226c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e7      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x12c>
 80021f8:	e7eb      	b.n	80021d2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80021fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80021fc:	b1a3      	cbz	r3, 8002228 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80021fe:	4620      	mov	r0, r4
 8002200:	4798      	blx	r3
 8002202:	e011      	b.n	8002228 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800220a:	d109      	bne.n	8002220 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f022 0210 	bic.w	r2, r2, #16
 8002212:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002214:	2301      	movs	r3, #1
 8002216:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800221a:	2300      	movs	r3, #0
 800221c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002220:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002222:	b10b      	cbz	r3, 8002228 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002224:	4620      	mov	r0, r4
 8002226:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002228:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800222a:	b1fb      	cbz	r3, 800226c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800222c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800222e:	f013 0f01 	tst.w	r3, #1
 8002232:	d017      	beq.n	8002264 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	2305      	movs	r3, #5
 8002236:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800223a:	6822      	ldr	r2, [r4, #0]
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002244:	9b01      	ldr	r3, [sp, #4]
 8002246:	3301      	adds	r3, #1
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	42ab      	cmp	r3, r5
 800224c:	d804      	bhi.n	8002258 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f013 0f01 	tst.w	r3, #1
 8002256:	d1f5      	bne.n	8002244 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8002258:	2301      	movs	r3, #1
 800225a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800225e:	2300      	movs	r3, #0
 8002260:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002264:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002266:	b10b      	cbz	r3, 800226c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002268:	4620      	mov	r0, r4
 800226a:	4798      	blx	r3
}
 800226c:	b003      	add	sp, #12
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002270:	20000020 	.word	0x20000020
 8002274:	1b4e81b5 	.word	0x1b4e81b5

08002278 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002278:	2300      	movs	r3, #0
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f200 80e9 	bhi.w	8002452 <HAL_GPIO_Init+0x1da>
{
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	e065      	b.n	8002352 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800228c:	2403      	movs	r4, #3
 800228e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002292:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	68cc      	ldr	r4, [r1, #12]
 8002298:	fa04 f40e 	lsl.w	r4, r4, lr
 800229c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800229e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a6:	684a      	ldr	r2, [r1, #4]
 80022a8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80022b0:	6042      	str	r2, [r0, #4]
 80022b2:	e05c      	b.n	800236e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	08dc      	lsrs	r4, r3, #3
 80022b6:	3408      	adds	r4, #8
 80022b8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022bc:	f003 0507 	and.w	r5, r3, #7
 80022c0:	00ad      	lsls	r5, r5, #2
 80022c2:	f04f 0e0f 	mov.w	lr, #15
 80022c6:	fa0e fe05 	lsl.w	lr, lr, r5
 80022ca:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ce:	690a      	ldr	r2, [r1, #16]
 80022d0:	40aa      	lsls	r2, r5
 80022d2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80022da:	e05c      	b.n	8002396 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022dc:	2207      	movs	r2, #7
 80022de:	e000      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 80022e0:	2200      	movs	r2, #0
 80022e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80022e6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	3402      	adds	r4, #2
 80022ea:	4d5a      	ldr	r5, [pc, #360]	@ (8002454 <HAL_GPIO_Init+0x1dc>)
 80022ec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f0:	4a59      	ldr	r2, [pc, #356]	@ (8002458 <HAL_GPIO_Init+0x1e0>)
 80022f2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	ea6f 020c 	mvn.w	r2, ip
 80022f8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fc:	684e      	ldr	r6, [r1, #4]
 80022fe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002302:	d001      	beq.n	8002308 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002304:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002308:	4c53      	ldr	r4, [pc, #332]	@ (8002458 <HAL_GPIO_Init+0x1e0>)
 800230a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800230c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800230e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002312:	684e      	ldr	r6, [r1, #4]
 8002314:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8002318:	d001      	beq.n	800231e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800231a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800231e:	4c4e      	ldr	r4, [pc, #312]	@ (8002458 <HAL_GPIO_Init+0x1e0>)
 8002320:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002322:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002324:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002328:	684e      	ldr	r6, [r1, #4]
 800232a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800232e:	d001      	beq.n	8002334 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002330:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002334:	4c48      	ldr	r4, [pc, #288]	@ (8002458 <HAL_GPIO_Init+0x1e0>)
 8002336:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800233a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800233c:	684d      	ldr	r5, [r1, #4]
 800233e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8002342:	d001      	beq.n	8002348 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8002344:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002348:	4c43      	ldr	r4, [pc, #268]	@ (8002458 <HAL_GPIO_Init+0x1e0>)
 800234a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234c:	3301      	adds	r3, #1
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d87d      	bhi.n	800244e <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	680c      	ldr	r4, [r1, #0]
 8002358:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800235c:	ea32 0404 	bics.w	r4, r2, r4
 8002360:	d1f4      	bne.n	800234c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	684c      	ldr	r4, [r1, #4]
 8002364:	f004 0403 	and.w	r4, r4, #3
 8002368:	3c01      	subs	r4, #1
 800236a:	2c01      	cmp	r4, #1
 800236c:	d98b      	bls.n	8002286 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236e:	684a      	ldr	r2, [r1, #4]
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	2a03      	cmp	r2, #3
 8002376:	d009      	beq.n	800238c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002378:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	005d      	lsls	r5, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	40aa      	lsls	r2, r5
 8002380:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002384:	688a      	ldr	r2, [r1, #8]
 8002386:	40aa      	lsls	r2, r5
 8002388:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800238a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	684a      	ldr	r2, [r1, #4]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	2a02      	cmp	r2, #2
 8002394:	d08e      	beq.n	80022b4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8002396:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002398:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f20e 	lsl.w	r2, r2, lr
 80023a2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a6:	684a      	ldr	r2, [r1, #4]
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	fa02 f20e 	lsl.w	r2, r2, lr
 80023b0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80023b2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b4:	684a      	ldr	r2, [r1, #4]
 80023b6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80023ba:	d0c7      	beq.n	800234c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	2200      	movs	r2, #0
 80023be:	9201      	str	r2, [sp, #4]
 80023c0:	4a26      	ldr	r2, [pc, #152]	@ (800245c <HAL_GPIO_Init+0x1e4>)
 80023c2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80023c4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80023c8:	6454      	str	r4, [r2, #68]	@ 0x44
 80023ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023cc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80023d4:	089c      	lsrs	r4, r3, #2
 80023d6:	1ca5      	adds	r5, r4, #2
 80023d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002454 <HAL_GPIO_Init+0x1dc>)
 80023da:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023de:	f003 0e03 	and.w	lr, r3, #3
 80023e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f20e 	lsl.w	r2, r2, lr
 80023ec:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <HAL_GPIO_Init+0x1e8>)
 80023f2:	4290      	cmp	r0, r2
 80023f4:	f43f af74 	beq.w	80022e0 <HAL_GPIO_Init+0x68>
 80023f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023fc:	4290      	cmp	r0, r2
 80023fe:	d01a      	beq.n	8002436 <HAL_GPIO_Init+0x1be>
 8002400:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002404:	4290      	cmp	r0, r2
 8002406:	d018      	beq.n	800243a <HAL_GPIO_Init+0x1c2>
 8002408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800240c:	4290      	cmp	r0, r2
 800240e:	d016      	beq.n	800243e <HAL_GPIO_Init+0x1c6>
 8002410:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002414:	4290      	cmp	r0, r2
 8002416:	d014      	beq.n	8002442 <HAL_GPIO_Init+0x1ca>
 8002418:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800241c:	4290      	cmp	r0, r2
 800241e:	d012      	beq.n	8002446 <HAL_GPIO_Init+0x1ce>
 8002420:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002424:	4290      	cmp	r0, r2
 8002426:	d010      	beq.n	800244a <HAL_GPIO_Init+0x1d2>
 8002428:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800242c:	4290      	cmp	r0, r2
 800242e:	f43f af55 	beq.w	80022dc <HAL_GPIO_Init+0x64>
 8002432:	2208      	movs	r2, #8
 8002434:	e755      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 8002436:	2201      	movs	r2, #1
 8002438:	e753      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 800243a:	2202      	movs	r2, #2
 800243c:	e751      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 800243e:	2203      	movs	r2, #3
 8002440:	e74f      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 8002442:	2204      	movs	r2, #4
 8002444:	e74d      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 8002446:	2205      	movs	r2, #5
 8002448:	e74b      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
 800244a:	2206      	movs	r2, #6
 800244c:	e749      	b.n	80022e2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800244e:	b002      	add	sp, #8
 8002450:	bd70      	pop	{r4, r5, r6, pc}
 8002452:	4770      	bx	lr
 8002454:	40013800 	.word	0x40013800
 8002458:	40013c00 	.word	0x40013c00
 800245c:	40023800 	.word	0x40023800
 8002460:	40020000 	.word	0x40020000

08002464 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002464:	b10a      	cbz	r2, 800246a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	6181      	str	r1, [r0, #24]
 8002468:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	0409      	lsls	r1, r1, #16
 800246c:	6181      	str	r1, [r0, #24]
  }
}
 800246e:	4770      	bx	lr

08002470 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002470:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002472:	ea01 0203 	and.w	r2, r1, r3
 8002476:	ea21 0103 	bic.w	r1, r1, r3
 800247a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800247e:	6181      	str	r1, [r0, #24]
}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	2800      	cmp	r0, #0
 8002486:	f000 81e0 	beq.w	800284a <HAL_RCC_OscConfig+0x3c6>
{
 800248a:	b570      	push	{r4, r5, r6, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002490:	6803      	ldr	r3, [r0, #0]
 8002492:	f013 0f01 	tst.w	r3, #1
 8002496:	d03b      	beq.n	8002510 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002498:	4b9f      	ldr	r3, [pc, #636]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d02c      	beq.n	80024fe <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d021      	beq.n	80024f4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b6:	d04f      	beq.n	8002558 <HAL_RCC_OscConfig+0xd4>
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024bc:	d052      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
 80024be:	4b96      	ldr	r3, [pc, #600]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d0:	6863      	ldr	r3, [r4, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d050      	beq.n	8002578 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7ff fb67 	bl	8001ba8 <HAL_GetTick>
 80024da:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024e4:	d114      	bne.n	8002510 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e6:	f7ff fb5f 	bl	8001ba8 <HAL_GetTick>
 80024ea:	1b40      	subs	r0, r0, r5
 80024ec:	2864      	cmp	r0, #100	@ 0x64
 80024ee:	d9f5      	bls.n	80024dc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80024f0:	2003      	movs	r0, #3
 80024f2:	e1b1      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f4:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024fc:	d0d8      	beq.n	80024b0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fe:	4b86      	ldr	r3, [pc, #536]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002506:	d003      	beq.n	8002510 <HAL_RCC_OscConfig+0x8c>
 8002508:	6863      	ldr	r3, [r4, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 819f 	beq.w	800284e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	f013 0f02 	tst.w	r3, #2
 8002516:	d054      	beq.n	80025c2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002518:	4b7f      	ldr	r3, [pc, #508]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f013 0f0c 	tst.w	r3, #12
 8002520:	d03e      	beq.n	80025a0 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b7d      	ldr	r3, [pc, #500]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	2b08      	cmp	r3, #8
 800252c:	d033      	beq.n	8002596 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800252e:	68e3      	ldr	r3, [r4, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d068      	beq.n	8002606 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b79      	ldr	r3, [pc, #484]	@ (800271c <HAL_RCC_OscConfig+0x298>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7ff fb35 	bl	8001ba8 <HAL_GetTick>
 800253e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b75      	ldr	r3, [pc, #468]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f013 0f02 	tst.w	r3, #2
 8002548:	d154      	bne.n	80025f4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff fb2d 	bl	8001ba8 <HAL_GetTick>
 800254e:	1b40      	subs	r0, r0, r5
 8002550:	2802      	cmp	r0, #2
 8002552:	d9f5      	bls.n	8002540 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002554:	2003      	movs	r0, #3
 8002556:	e17f      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002558:	4a6f      	ldr	r2, [pc, #444]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e7b5      	b.n	80024d0 <HAL_RCC_OscConfig+0x4c>
 8002564:	4b6c      	ldr	r3, [pc, #432]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e7ab      	b.n	80024d0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002578:	f7ff fb16 	bl	8001ba8 <HAL_GetTick>
 800257c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b66      	ldr	r3, [pc, #408]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002586:	d0c3      	beq.n	8002510 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fb0e 	bl	8001ba8 <HAL_GetTick>
 800258c:	1b40      	subs	r0, r0, r5
 800258e:	2864      	cmp	r0, #100	@ 0x64
 8002590:	d9f5      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002592:	2003      	movs	r0, #3
 8002594:	e160      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b60      	ldr	r3, [pc, #384]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800259e:	d1c6      	bne.n	800252e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f013 0f02 	tst.w	r3, #2
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_OscConfig+0x12e>
 80025aa:	68e3      	ldr	r3, [r4, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 8150 	bne.w	8002852 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4a59      	ldr	r2, [pc, #356]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80025b4:	6813      	ldr	r3, [r2, #0]
 80025b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80025ba:	6921      	ldr	r1, [r4, #16]
 80025bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025c0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	f013 0f08 	tst.w	r3, #8
 80025c8:	d042      	beq.n	8002650 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ca:	6963      	ldr	r3, [r4, #20]
 80025cc:	b36b      	cbz	r3, 800262a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_OscConfig+0x298>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7ff fae7 	bl	8001ba8 <HAL_GetTick>
 80025da:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e0:	f013 0f02 	tst.w	r3, #2
 80025e4:	d134      	bne.n	8002650 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e6:	f7ff fadf 	bl	8001ba8 <HAL_GetTick>
 80025ea:	1b40      	subs	r0, r0, r5
 80025ec:	2802      	cmp	r0, #2
 80025ee:	d9f5      	bls.n	80025dc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80025f0:	2003      	movs	r0, #3
 80025f2:	e131      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4a48      	ldr	r2, [pc, #288]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80025fc:	6921      	ldr	r1, [r4, #16]
 80025fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e7dd      	b.n	80025c2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_RCC_OscConfig+0x298>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800260c:	f7ff facc 	bl	8001ba8 <HAL_GetTick>
 8002610:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f013 0f02 	tst.w	r3, #2
 800261a:	d0d2      	beq.n	80025c2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff fac4 	bl	8001ba8 <HAL_GetTick>
 8002620:	1b40      	subs	r0, r0, r5
 8002622:	2802      	cmp	r0, #2
 8002624:	d9f5      	bls.n	8002612 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002626:	2003      	movs	r0, #3
 8002628:	e116      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <HAL_RCC_OscConfig+0x298>)
 800262c:	2200      	movs	r2, #0
 800262e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff fab9 	bl	8001ba8 <HAL_GetTick>
 8002636:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 800263a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263c:	f013 0f02 	tst.w	r3, #2
 8002640:	d006      	beq.n	8002650 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff fab1 	bl	8001ba8 <HAL_GetTick>
 8002646:	1b40      	subs	r0, r0, r5
 8002648:	2802      	cmp	r0, #2
 800264a:	d9f5      	bls.n	8002638 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 800264c:	2003      	movs	r0, #3
 800264e:	e103      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	f013 0f04 	tst.w	r3, #4
 8002656:	d077      	beq.n	8002748 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002658:	4b2f      	ldr	r3, [pc, #188]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002660:	d133      	bne.n	80026ca <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800266a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800267a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_RCC_OscConfig+0x29c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002684:	d023      	beq.n	80026ce <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002686:	68a3      	ldr	r3, [r4, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d034      	beq.n	80026f6 <HAL_RCC_OscConfig+0x272>
 800268c:	2b05      	cmp	r3, #5
 800268e:	d038      	beq.n	8002702 <HAL_RCC_OscConfig+0x27e>
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002692:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	671a      	str	r2, [r3, #112]	@ 0x70
 800269a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800269c:	f022 0204 	bic.w	r2, r2, #4
 80026a0:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a2:	68a3      	ldr	r3, [r4, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d03d      	beq.n	8002724 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff fa7e 	bl	8001ba8 <HAL_GetTick>
 80026ac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f013 0f02 	tst.w	r3, #2
 80026b6:	d146      	bne.n	8002746 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7ff fa76 	bl	8001ba8 <HAL_GetTick>
 80026bc:	1b80      	subs	r0, r0, r6
 80026be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026c2:	4298      	cmp	r0, r3
 80026c4:	d9f3      	bls.n	80026ae <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80026c6:	2003      	movs	r0, #3
 80026c8:	e0c6      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2500      	movs	r5, #0
 80026cc:	e7d6      	b.n	800267c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <HAL_RCC_OscConfig+0x29c>)
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026d8:	f7ff fa66 	bl	8001ba8 <HAL_GetTick>
 80026dc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_OscConfig+0x29c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026e6:	d1ce      	bne.n	8002686 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7ff fa5e 	bl	8001ba8 <HAL_GetTick>
 80026ec:	1b80      	subs	r0, r0, r6
 80026ee:	2802      	cmp	r0, #2
 80026f0:	d9f5      	bls.n	80026de <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80026f2:	2003      	movs	r0, #3
 80026f4:	e0b0      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f6:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 80026f8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002700:	e7cf      	b.n	80026a2 <HAL_RCC_OscConfig+0x21e>
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_OscConfig+0x294>)
 8002704:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002706:	f042 0204 	orr.w	r2, r2, #4
 800270a:	671a      	str	r2, [r3, #112]	@ 0x70
 800270c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	671a      	str	r2, [r3, #112]	@ 0x70
 8002714:	e7c5      	b.n	80026a2 <HAL_RCC_OscConfig+0x21e>
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	42470000 	.word	0x42470000
 8002720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff fa40 	bl	8001ba8 <HAL_GetTick>
 8002728:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272a:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	f013 0f02 	tst.w	r3, #2
 8002732:	d008      	beq.n	8002746 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7ff fa38 	bl	8001ba8 <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800273e:	4298      	cmp	r0, r3
 8002740:	d9f3      	bls.n	800272a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002742:	2003      	movs	r0, #3
 8002744:	e088      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002746:	b9ed      	cbnz	r5, 8002784 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002748:	69a3      	ldr	r3, [r4, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8083 	beq.w	8002856 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002750:	4a48      	ldr	r2, [pc, #288]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 8002752:	6892      	ldr	r2, [r2, #8]
 8002754:	f002 020c 	and.w	r2, r2, #12
 8002758:	2a08      	cmp	r2, #8
 800275a:	d051      	beq.n	8002800 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275c:	2b02      	cmp	r3, #2
 800275e:	d017      	beq.n	8002790 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <HAL_RCC_OscConfig+0x3f4>)
 8002762:	2200      	movs	r2, #0
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff fa1f 	bl	8001ba8 <HAL_GetTick>
 800276a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002774:	d042      	beq.n	80027fc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7ff fa17 	bl	8001ba8 <HAL_GetTick>
 800277a:	1b00      	subs	r0, r0, r4
 800277c:	2802      	cmp	r0, #2
 800277e:	d9f5      	bls.n	800276c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002780:	2003      	movs	r0, #3
 8002782:	e069      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4a3b      	ldr	r2, [pc, #236]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 8002786:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	e7db      	b.n	8002748 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <HAL_RCC_OscConfig+0x3f4>)
 8002792:	2200      	movs	r2, #0
 8002794:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002796:	f7ff fa07 	bl	8001ba8 <HAL_GetTick>
 800279a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279c:	4b35      	ldr	r3, [pc, #212]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027a4:	d006      	beq.n	80027b4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff f9ff 	bl	8001ba8 <HAL_GetTick>
 80027aa:	1b40      	subs	r0, r0, r5
 80027ac:	2802      	cmp	r0, #2
 80027ae:	d9f5      	bls.n	800279c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80027b0:	2003      	movs	r0, #3
 80027b2:	e051      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b4:	69e3      	ldr	r3, [r4, #28]
 80027b6:	6a22      	ldr	r2, [r4, #32]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80027bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80027c2:	0852      	lsrs	r2, r2, #1
 80027c4:	3a01      	subs	r2, #1
 80027c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80027cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027d0:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 80027d2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80027d4:	4b28      	ldr	r3, [pc, #160]	@ (8002878 <HAL_RCC_OscConfig+0x3f4>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80027da:	f7ff f9e5 	bl	8001ba8 <HAL_GetTick>
 80027de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e0:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f9dd 	bl	8001ba8 <HAL_GetTick>
 80027ee:	1b00      	subs	r0, r0, r4
 80027f0:	2802      	cmp	r0, #2
 80027f2:	d9f5      	bls.n	80027e0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80027f4:	2003      	movs	r0, #3
 80027f6:	e02f      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
 80027fa:	e02d      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
 80027fc:	2000      	movs	r0, #0
 80027fe:	e02b      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	2b01      	cmp	r3, #1
 8002802:	d02b      	beq.n	800285c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_RCC_OscConfig+0x3f0>)
 8002806:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800280c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280e:	4291      	cmp	r1, r2
 8002810:	d126      	bne.n	8002860 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002816:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	428a      	cmp	r2, r1
 800281a:	d123      	bne.n	8002864 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002822:	401a      	ands	r2, r3
 8002824:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002828:	d11e      	bne.n	8002868 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800282e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002830:	0852      	lsrs	r2, r2, #1
 8002832:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002834:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800283a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800283e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002844:	d114      	bne.n	8002870 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002846:	2000      	movs	r0, #0
 8002848:	e006      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800284a:	2001      	movs	r0, #1
}
 800284c:	4770      	bx	lr
        return HAL_ERROR;
 800284e:	2001      	movs	r0, #1
 8002850:	e002      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002852:	2001      	movs	r0, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002856:	2000      	movs	r0, #0
}
 8002858:	b002      	add	sp, #8
 800285a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800285c:	2001      	movs	r0, #1
 800285e:	e7fb      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
 8002862:	e7f9      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
 8002864:	2001      	movs	r0, #1
 8002866:	e7f7      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
 8002868:	2001      	movs	r0, #1
 800286a:	e7f5      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
 800286c:	2001      	movs	r0, #1
 800286e:	e7f3      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
 8002870:	2001      	movs	r0, #1
 8002872:	e7f1      	b.n	8002858 <HAL_RCC_OscConfig+0x3d4>
 8002874:	40023800 	.word	0x40023800
 8002878:	42470000 	.word	0x42470000

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800287e:	4b31      	ldr	r3, [pc, #196]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d001      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800288a:	482f      	ldr	r0, [pc, #188]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800288c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288e:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800289c:	d02c      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b29      	ldr	r3, [pc, #164]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028a0:	6858      	ldr	r0, [r3, #4]
 80028a2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80028a6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80028aa:	ebbc 0c00 	subs.w	ip, ip, r0
 80028ae:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80028b2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80028b6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80028ba:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80028be:	ebb1 010c 	subs.w	r1, r1, ip
 80028c2:	eb63 030e 	sbc.w	r3, r3, lr
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028cc:	00c9      	lsls	r1, r1, #3
 80028ce:	eb11 0c00 	adds.w	ip, r1, r0
 80028d2:	f143 0300 	adc.w	r3, r3, #0
 80028d6:	0299      	lsls	r1, r3, #10
 80028d8:	2300      	movs	r3, #0
 80028da:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80028de:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80028e2:	f7fe f961 	bl	8000ba8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028e6:	4b17      	ldr	r3, [pc, #92]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80028ee:	3301      	adds	r3, #1
 80028f0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80028f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80028f6:	e7c9      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f8:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028fa:	6858      	ldr	r0, [r3, #4]
 80028fc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002900:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002904:	ebbc 0c00 	subs.w	ip, ip, r0
 8002908:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800290c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002910:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002914:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002918:	ebb1 010c 	subs.w	r1, r1, ip
 800291c:	eb63 030e 	sbc.w	r3, r3, lr
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002926:	00c9      	lsls	r1, r1, #3
 8002928:	eb11 0c00 	adds.w	ip, r1, r0
 800292c:	f143 0300 	adc.w	r3, r3, #0
 8002930:	0299      	lsls	r1, r3, #10
 8002932:	2300      	movs	r3, #0
 8002934:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002938:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800293c:	f7fe f934 	bl	8000ba8 <__aeabi_uldivmod>
 8002940:	e7d1      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x6a>
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400

0800294c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800294c:	2800      	cmp	r0, #0
 800294e:	f000 809b 	beq.w	8002a88 <HAL_RCC_ClockConfig+0x13c>
{
 8002952:	b570      	push	{r4, r5, r6, lr}
 8002954:	460d      	mov	r5, r1
 8002956:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b4f      	ldr	r3, [pc, #316]	@ (8002a98 <HAL_RCC_ClockConfig+0x14c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	428b      	cmp	r3, r1
 8002962:	d208      	bcs.n	8002976 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002964:	b2cb      	uxtb	r3, r1
 8002966:	4a4c      	ldr	r2, [pc, #304]	@ (8002a98 <HAL_RCC_ClockConfig+0x14c>)
 8002968:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	6813      	ldr	r3, [r2, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	428b      	cmp	r3, r1
 8002972:	f040 808b 	bne.w	8002a8c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	f013 0f02 	tst.w	r3, #2
 800297c:	d017      	beq.n	80029ae <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297e:	f013 0f04 	tst.w	r3, #4
 8002982:	d004      	beq.n	800298e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4a45      	ldr	r2, [pc, #276]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002986:	6893      	ldr	r3, [r2, #8]
 8002988:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800298c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	f013 0f08 	tst.w	r3, #8
 8002994:	d004      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002996:	4a41      	ldr	r2, [pc, #260]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002998:	6893      	ldr	r3, [r2, #8]
 800299a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800299e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4a3e      	ldr	r2, [pc, #248]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 80029a2:	6893      	ldr	r3, [r2, #8]
 80029a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029a8:	68a1      	ldr	r1, [r4, #8]
 80029aa:	430b      	orrs	r3, r1
 80029ac:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	f013 0f01 	tst.w	r3, #1
 80029b4:	d032      	beq.n	8002a1c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	6863      	ldr	r3, [r4, #4]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d021      	beq.n	8002a00 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029bc:	1e9a      	subs	r2, r3, #2
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d925      	bls.n	8002a0e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4a36      	ldr	r2, [pc, #216]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f012 0f02 	tst.w	r2, #2
 80029ca:	d061      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029cc:	4933      	ldr	r1, [pc, #204]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 80029ce:	688a      	ldr	r2, [r1, #8]
 80029d0:	f022 0203 	bic.w	r2, r2, #3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80029d8:	f7ff f8e6 	bl	8001ba8 <HAL_GetTick>
 80029dc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2f      	ldr	r3, [pc, #188]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	6862      	ldr	r2, [r4, #4]
 80029e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029ec:	d016      	beq.n	8002a1c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ee:	f7ff f8db 	bl	8001ba8 <HAL_GetTick>
 80029f2:	1b80      	subs	r0, r0, r6
 80029f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029f8:	4298      	cmp	r0, r3
 80029fa:	d9f0      	bls.n	80029de <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80029fc:	2003      	movs	r0, #3
 80029fe:	e042      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a00:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a08:	d1e0      	bne.n	80029cc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	e03b      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002a16:	d1d9      	bne.n	80029cc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	e034      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <HAL_RCC_ClockConfig+0x14c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	42ab      	cmp	r3, r5
 8002a26:	d907      	bls.n	8002a38 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a28:	b2ea      	uxtb	r2, r5
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_ClockConfig+0x14c>)
 8002a2c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	42ab      	cmp	r3, r5
 8002a36:	d12d      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	f013 0f04 	tst.w	r3, #4
 8002a3e:	d006      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002a42:	6893      	ldr	r3, [r2, #8]
 8002a44:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002a48:	68e1      	ldr	r1, [r4, #12]
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	f013 0f08 	tst.w	r3, #8
 8002a54:	d007      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4a11      	ldr	r2, [pc, #68]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002a58:	6893      	ldr	r3, [r2, #8]
 8002a5a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002a5e:	6921      	ldr	r1, [r4, #16]
 8002a60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a64:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a66:	f7ff ff09 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <HAL_RCC_ClockConfig+0x150>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a72:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa0 <HAL_RCC_ClockConfig+0x154>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	40d8      	lsrs	r0, r3
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 8002a7a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <HAL_RCC_ClockConfig+0x15c>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	f7fe ff6a 	bl	8001958 <HAL_InitTick>
  return HAL_OK;
 8002a84:	2000      	movs	r0, #0
}
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
}
 8002a8a:	4770      	bx	lr
      return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e7fa      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7f8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
 8002a96:	e7f6      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13a>
 8002a98:	40023c00 	.word	0x40023c00
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08008bac 	.word	0x08008bac
 8002aa4:	20000020 	.word	0x20000020
 8002aa8:	20000028 	.word	0x20000028

08002aac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002aac:	4b01      	ldr	r3, [pc, #4]	@ (8002ab4 <HAL_RCC_GetHCLKFreq+0x8>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000020 	.word	0x20000020

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aba:	f7ff fff7 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002abe:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ac6:	4a03      	ldr	r2, [pc, #12]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002aca:	40d8      	lsrs	r0, r3
 8002acc:	bd08      	pop	{r3, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08008ba4 	.word	0x08008ba4

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ada:	f7ff ffe7 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002ade:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ae6:	4a03      	ldr	r2, [pc, #12]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002aea:	40d8      	lsrs	r0, r3
 8002aec:	bd08      	pop	{r3, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08008ba4 	.word	0x08008ba4

08002af8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002af8:	230f      	movs	r3, #15
 8002afa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_GetClockConfig+0x34>)
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f002 0203 	and.w	r2, r2, #3
 8002b04:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002b0c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002b14:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	08db      	lsrs	r3, r3, #3
 8002b1a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002b1e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_GetClockConfig+0x38>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	600b      	str	r3, [r1, #0]
}
 8002b2a:	4770      	bx	lr
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b36:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b38:	6a04      	ldr	r4, [r0, #32]
 8002b3a:	f024 0401 	bic.w	r4, r4, #1
 8002b3e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b40:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b42:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b46:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b4a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002b4e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b50:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b52:	6203      	str	r3, [r0, #32]
}
 8002b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b5c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5e:	6a04      	ldr	r4, [r0, #32]
 8002b60:	f024 0410 	bic.w	r4, r4, #16
 8002b64:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b68:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b78:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b7a:	6203      	str	r3, [r0, #32]
}
 8002b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b82:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8e:	6083      	str	r3, [r0, #8]
}
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b94:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d137      	bne.n	8002c0e <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba4:	6802      	ldr	r2, [r0, #0]
 8002ba6:	68d3      	ldr	r3, [r2, #12]
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bae:	6803      	ldr	r3, [r0, #0]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	@ (8002c18 <HAL_TIM_Base_Start_IT+0x84>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d020      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bba:	d01d      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002bbc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d019      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002bc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d015      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002bcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d011      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002bd4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00d      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002bdc:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
 8002be4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d005      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	2a06      	cmp	r2, #6
 8002c00:	d007      	beq.n	8002c12 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	4770      	bx	lr
    return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	4770      	bx	lr
  return HAL_OK;
 8002c12:	2000      	movs	r0, #0
}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000

08002c1c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIM_IC_CaptureCallback>:
}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_TriggerCallback>:
}
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIM_IRQHandler>:
{
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002c28:	6803      	ldr	r3, [r0, #0]
 8002c2a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c2c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c2e:	f015 0f02 	tst.w	r5, #2
 8002c32:	d010      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c34:	f016 0f02 	tst.w	r6, #2
 8002c38:	d00d      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c3a:	f06f 0202 	mvn.w	r2, #2
 8002c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c40:	2301      	movs	r3, #1
 8002c42:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c44:	6803      	ldr	r3, [r0, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f013 0f03 	tst.w	r3, #3
 8002c4c:	d05e      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	f7ff ffe6 	bl	8002c1e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	2300      	movs	r3, #0
 8002c54:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c56:	f015 0f04 	tst.w	r5, #4
 8002c5a:	d012      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c5c:	f016 0f04 	tst.w	r6, #4
 8002c60:	d00f      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	f06f 0204 	mvn.w	r2, #4
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002c76:	d04f      	beq.n	8002d18 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff ffd0 	bl	8002c1e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c82:	f015 0f08 	tst.w	r5, #8
 8002c86:	d012      	beq.n	8002cae <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c88:	f016 0f08 	tst.w	r6, #8
 8002c8c:	d00f      	beq.n	8002cae <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	f06f 0208 	mvn.w	r2, #8
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c96:	2304      	movs	r3, #4
 8002c98:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f013 0f03 	tst.w	r3, #3
 8002ca2:	d040      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff ffba 	bl	8002c1e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	2300      	movs	r3, #0
 8002cac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cae:	f015 0f10 	tst.w	r5, #16
 8002cb2:	d012      	beq.n	8002cda <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cb4:	f016 0f10 	tst.w	r6, #16
 8002cb8:	d00f      	beq.n	8002cda <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	f06f 0210 	mvn.w	r2, #16
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002cce:	d031      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff ffa4 	bl	8002c1e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cda:	f015 0f01 	tst.w	r5, #1
 8002cde:	d002      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ce0:	f016 0f01 	tst.w	r6, #1
 8002ce4:	d12d      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ce6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002cea:	d002      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cec:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002cf0:	d12f      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cf2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002cf6:	d002      	beq.n	8002cfe <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cf8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002cfc:	d131      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cfe:	f015 0f20 	tst.w	r5, #32
 8002d02:	d002      	beq.n	8002d0a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d04:	f016 0f20 	tst.w	r6, #32
 8002d08:	d133      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x14e>
}
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0c:	f7ff ff86 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff ff85 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d16:	e79c      	b.n	8002c52 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff ff7f 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff ff7e 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d24:	e7ab      	b.n	8002c7e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff ff78 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff77 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d32:	e7ba      	b.n	8002caa <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff ff71 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff ff70 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d40:	e7c9      	b.n	8002cd6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f06f 0201 	mvn.w	r2, #1
 8002d48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7fe faf8 	bl	8001340 <HAL_TIM_PeriodElapsedCallback>
 8002d50:	e7c9      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f000 f97d 	bl	800305a <HAL_TIMEx_BreakCallback>
 8002d60:	e7c7      	b.n	8002cf2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff ff59 	bl	8002c22 <HAL_TIM_TriggerCallback>
 8002d70:	e7c5      	b.n	8002cfe <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	f06f 0220 	mvn.w	r2, #32
 8002d78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 f96c 	bl	8003058 <HAL_TIMEx_CommutCallback>
}
 8002d80:	e7c3      	b.n	8002d0a <HAL_TIM_IRQHandler+0xe6>
	...

08002d84 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002d84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d86:	4a34      	ldr	r2, [pc, #208]	@ (8002e58 <TIM_Base_SetConfig+0xd4>)
 8002d88:	4290      	cmp	r0, r2
 8002d8a:	d012      	beq.n	8002db2 <TIM_Base_SetConfig+0x2e>
 8002d8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0x2e>
 8002d92:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002d96:	4290      	cmp	r0, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0x2e>
 8002d9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d9e:	4290      	cmp	r0, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0x2e>
 8002da2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002da6:	4290      	cmp	r0, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0x2e>
 8002daa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002dae:	4290      	cmp	r0, r2
 8002db0:	d103      	bne.n	8002dba <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002db6:	684a      	ldr	r2, [r1, #4]
 8002db8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dba:	4a27      	ldr	r2, [pc, #156]	@ (8002e58 <TIM_Base_SetConfig+0xd4>)
 8002dbc:	4290      	cmp	r0, r2
 8002dbe:	d02a      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dc0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002dc4:	d027      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dc6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d023      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dd2:	4290      	cmp	r0, r2
 8002dd4:	d01f      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d01b      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dde:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002de2:	4290      	cmp	r0, r2
 8002de4:	d017      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002de6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002dea:	4290      	cmp	r0, r2
 8002dec:	d013      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002df2:	4290      	cmp	r0, r2
 8002df4:	d00f      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dfa:	4290      	cmp	r0, r2
 8002dfc:	d00b      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002dfe:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002e02:	4290      	cmp	r0, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002e06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e0a:	4290      	cmp	r0, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_Base_SetConfig+0x92>
 8002e0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e12:	4290      	cmp	r0, r2
 8002e14:	d103      	bne.n	8002e1e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1a:	68ca      	ldr	r2, [r1, #12]
 8002e1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e22:	694a      	ldr	r2, [r1, #20]
 8002e24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e28:	688b      	ldr	r3, [r1, #8]
 8002e2a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	680b      	ldr	r3, [r1, #0]
 8002e2e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <TIM_Base_SetConfig+0xd4>)
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d003      	beq.n	8002e3e <TIM_Base_SetConfig+0xba>
 8002e36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e3a:	4298      	cmp	r0, r3
 8002e3c:	d101      	bne.n	8002e42 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3e:	690b      	ldr	r3, [r1, #16]
 8002e40:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e42:	2301      	movs	r3, #1
 8002e44:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e46:	6903      	ldr	r3, [r0, #16]
 8002e48:	f013 0f01 	tst.w	r3, #1
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e4e:	6903      	ldr	r3, [r0, #16]
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6103      	str	r3, [r0, #16]
}
 8002e56:	4770      	bx	lr
 8002e58:	40010000 	.word	0x40010000

08002e5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002e5c:	b340      	cbz	r0, 8002eb0 <HAL_TIM_Base_Init+0x54>
{
 8002e5e:	b510      	push	{r4, lr}
 8002e60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e66:	b1f3      	cbz	r3, 8002ea6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6e:	4621      	mov	r1, r4
 8002e70:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e74:	f7ff ff86 	bl	8002d84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002e82:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e86:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e8a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e96:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002e9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002ea2:	2000      	movs	r0, #0
}
 8002ea4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ea6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	f7fe fcd5 	bl	8001858 <HAL_TIM_Base_MspInit>
 8002eae:	e7db      	b.n	8002e68 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
}
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eb6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ebc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	6082      	str	r2, [r0, #8]
}
 8002ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002ece:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d078      	beq.n	8002fc8 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002eda:	2301      	movs	r3, #1
 8002edc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002ee6:	6802      	ldr	r2, [r0, #0]
 8002ee8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002ef2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	2b60      	cmp	r3, #96	@ 0x60
 8002ef8:	d04c      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0xc6>
 8002efa:	d829      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x82>
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d054      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0xdc>
 8002f00:	d90c      	bls.n	8002f1c <HAL_TIM_ConfigClockSource+0x4e>
 8002f02:	2b50      	cmp	r3, #80	@ 0x50
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	68ca      	ldr	r2, [r1, #12]
 8002f08:	6849      	ldr	r1, [r1, #4]
 8002f0a:	6800      	ldr	r0, [r0, #0]
 8002f0c:	f7ff fe12 	bl	8002b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f10:	2150      	movs	r1, #80	@ 0x50
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	f7ff fe35 	bl	8002b82 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2000      	movs	r0, #0
      break;
 8002f1a:	e005      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d00d      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x6e>
 8002f20:	d909      	bls.n	8002f36 <HAL_TIM_ConfigClockSource+0x68>
 8002f22:	2b30      	cmp	r3, #48	@ 0x30
 8002f24:	d00a      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002f34:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f36:	b10b      	cbz	r3, 8002f3c <HAL_TIM_ConfigClockSource+0x6e>
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d105      	bne.n	8002f48 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	f7ff fe1f 	bl	8002b82 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2000      	movs	r0, #0
      break;
 8002f46:	e7ef      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
 8002f4a:	e7ed      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7eb      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f54:	d034      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0xf2>
 8002f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5a:	d10c      	bne.n	8002f76 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002f5c:	68cb      	ldr	r3, [r1, #12]
 8002f5e:	684a      	ldr	r2, [r1, #4]
 8002f60:	6889      	ldr	r1, [r1, #8]
 8002f62:	6800      	ldr	r0, [r0, #0]
 8002f64:	f7ff ffa6 	bl	8002eb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	6893      	ldr	r3, [r2, #8]
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f70:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2000      	movs	r0, #0
      break;
 8002f74:	e7d8      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002f76:	2b70      	cmp	r3, #112	@ 0x70
 8002f78:	d124      	bne.n	8002fc4 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	68cb      	ldr	r3, [r1, #12]
 8002f7c:	684a      	ldr	r2, [r1, #4]
 8002f7e:	6889      	ldr	r1, [r1, #8]
 8002f80:	6800      	ldr	r0, [r0, #0]
 8002f82:	f7ff ff97 	bl	8002eb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002f8e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2000      	movs	r0, #0
      break;
 8002f92:	e7c9      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f94:	68ca      	ldr	r2, [r1, #12]
 8002f96:	6849      	ldr	r1, [r1, #4]
 8002f98:	6800      	ldr	r0, [r0, #0]
 8002f9a:	f7ff fdde 	bl	8002b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f9e:	2160      	movs	r1, #96	@ 0x60
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	f7ff fdee 	bl	8002b82 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2000      	movs	r0, #0
      break;
 8002fa8:	e7be      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	68ca      	ldr	r2, [r1, #12]
 8002fac:	6849      	ldr	r1, [r1, #4]
 8002fae:	6800      	ldr	r0, [r0, #0]
 8002fb0:	f7ff fdc0 	bl	8002b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb4:	2140      	movs	r1, #64	@ 0x40
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	f7ff fde3 	bl	8002b82 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2000      	movs	r0, #0
      break;
 8002fbe:	e7b3      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7b1      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e7af      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002fc8:	2002      	movs	r0, #2
}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fcc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002fd0:	2a01      	cmp	r2, #1
 8002fd2:	d03d      	beq.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8002fd4:	b410      	push	{r4}
 8002fd6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe4:	6802      	ldr	r2, [r0, #0]
 8002fe6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fea:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fee:	6808      	ldr	r0, [r1, #0]
 8002ff0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4816      	ldr	r0, [pc, #88]	@ (8003054 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002ffa:	4282      	cmp	r2, r0
 8002ffc:	d01a      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002ffe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003002:	d017      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003004:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003008:	4282      	cmp	r2, r0
 800300a:	d013      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800300c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003010:	4282      	cmp	r2, r0
 8003012:	d00f      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003014:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003018:	4282      	cmp	r2, r0
 800301a:	d00b      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800301c:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003020:	4282      	cmp	r2, r0
 8003022:	d007      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003024:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8003028:	4282      	cmp	r2, r0
 800302a:	d003      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800302c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003030:	4282      	cmp	r2, r0
 8003032:	d104      	bne.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003034:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003038:	6849      	ldr	r1, [r1, #4]
 800303a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800303c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003044:	2000      	movs	r0, #0
 8003046:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800304a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800304e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003050:	2002      	movs	r0, #2
}
 8003052:	4770      	bx	lr
 8003054:	40010000 	.word	0x40010000

08003058 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003058:	4770      	bx	lr

0800305a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305a:	4770      	bx	lr

0800305c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	f102 030c 	add.w	r3, r2, #12
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	320c      	adds	r2, #12
 800306c:	e842 3100 	strex	r1, r3, [r2]
 8003070:	2900      	cmp	r1, #0
 8003072:	d1f3      	bne.n	800305c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	f102 0314 	add.w	r3, r2, #20
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	3214      	adds	r2, #20
 8003084:	e842 3100 	strex	r1, r3, [r2]
 8003088:	2900      	cmp	r1, #0
 800308a:	d1f3      	bne.n	8003074 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003092:	2320      	movs	r3, #32
 8003094:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003098:	2300      	movs	r3, #0
 800309a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800309c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	f102 030c 	add.w	r3, r2, #12
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	320c      	adds	r2, #12
 80030ae:	e842 3100 	strex	r1, r3, [r2]
 80030b2:	2900      	cmp	r1, #0
 80030b4:	d1f3      	bne.n	800309e <UART_EndRxTransfer+0x42>
 80030b6:	e7ec      	b.n	8003092 <UART_EndRxTransfer+0x36>

080030b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030bc:	6802      	ldr	r2, [r0, #0]
 80030be:	6913      	ldr	r3, [r2, #16]
 80030c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030c4:	68c1      	ldr	r1, [r0, #12]
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ca:	6883      	ldr	r3, [r0, #8]
 80030cc:	6902      	ldr	r2, [r0, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6943      	ldr	r3, [r0, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	69c3      	ldr	r3, [r0, #28]
 80030d6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	6801      	ldr	r1, [r0, #0]
 80030da:	68cb      	ldr	r3, [r1, #12]
 80030dc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80030e0:	f023 030c 	bic.w	r3, r3, #12
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e8:	6802      	ldr	r2, [r0, #0]
 80030ea:	6953      	ldr	r3, [r2, #20]
 80030ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030f0:	6981      	ldr	r1, [r0, #24]
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	4a31      	ldr	r2, [pc, #196]	@ (80031c0 <UART_SetConfig+0x108>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x54>
 80030fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003102:	4293      	cmp	r3, r2
 8003104:	d002      	beq.n	800310c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003106:	f7ff fcd7 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 800310a:	e001      	b.n	8003110 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7ff fce4 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003110:	69e3      	ldr	r3, [r4, #28]
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003116:	d029      	beq.n	800316c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003118:	2100      	movs	r1, #0
 800311a:	1803      	adds	r3, r0, r0
 800311c:	4149      	adcs	r1, r1
 800311e:	181b      	adds	r3, r3, r0
 8003120:	f141 0100 	adc.w	r1, r1, #0
 8003124:	00c9      	lsls	r1, r1, #3
 8003126:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1818      	adds	r0, r3, r0
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003134:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003138:	f141 0100 	adc.w	r1, r1, #0
 800313c:	f7fd fd34 	bl	8000ba8 <__aeabi_uldivmod>
 8003140:	4a20      	ldr	r2, [pc, #128]	@ (80031c4 <UART_SetConfig+0x10c>)
 8003142:	fba2 3100 	umull	r3, r1, r2, r0
 8003146:	0949      	lsrs	r1, r1, #5
 8003148:	2364      	movs	r3, #100	@ 0x64
 800314a:	fb03 0311 	mls	r3, r3, r1, r0
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	3332      	adds	r3, #50	@ 0x32
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800315c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	6821      	ldr	r1, [r4, #0]
 8003166:	4413      	add	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }
}
 800316a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800316c:	2300      	movs	r3, #0
 800316e:	1802      	adds	r2, r0, r0
 8003170:	eb43 0103 	adc.w	r1, r3, r3
 8003174:	1812      	adds	r2, r2, r0
 8003176:	f141 0100 	adc.w	r1, r1, #0
 800317a:	00c9      	lsls	r1, r1, #3
 800317c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003180:	00d2      	lsls	r2, r2, #3
 8003182:	1810      	adds	r0, r2, r0
 8003184:	f141 0100 	adc.w	r1, r1, #0
 8003188:	6862      	ldr	r2, [r4, #4]
 800318a:	1892      	adds	r2, r2, r2
 800318c:	415b      	adcs	r3, r3
 800318e:	f7fd fd0b 	bl	8000ba8 <__aeabi_uldivmod>
 8003192:	4a0c      	ldr	r2, [pc, #48]	@ (80031c4 <UART_SetConfig+0x10c>)
 8003194:	fba2 3100 	umull	r3, r1, r2, r0
 8003198:	0949      	lsrs	r1, r1, #5
 800319a:	2364      	movs	r3, #100	@ 0x64
 800319c:	fb03 0311 	mls	r3, r3, r1, r0
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	3332      	adds	r3, #50	@ 0x32
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	005a      	lsls	r2, r3, #1
 80031ac:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80031b0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	6821      	ldr	r1, [r4, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
 80031be:	e7d4      	b.n	800316a <UART_SetConfig+0xb2>
 80031c0:	40011000 	.word	0x40011000
 80031c4:	51eb851f 	.word	0x51eb851f

080031c8 <UART_WaitOnFlagUntilTimeout>:
{
 80031c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031cc:	b083      	sub	sp, #12
 80031ce:	4605      	mov	r5, r0
 80031d0:	460e      	mov	r6, r1
 80031d2:	4617      	mov	r7, r2
 80031d4:	4699      	mov	r9, r3
 80031d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	681c      	ldr	r4, [r3, #0]
 80031de:	ea36 0404 	bics.w	r4, r6, r4
 80031e2:	bf0c      	ite	eq
 80031e4:	2401      	moveq	r4, #1
 80031e6:	2400      	movne	r4, #0
 80031e8:	42bc      	cmp	r4, r7
 80031ea:	d128      	bne.n	800323e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80031f0:	d0f3      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe fcd9 	bl	8001ba8 <HAL_GetTick>
 80031f6:	eba0 0009 	sub.w	r0, r0, r9
 80031fa:	4540      	cmp	r0, r8
 80031fc:	d823      	bhi.n	8003246 <UART_WaitOnFlagUntilTimeout+0x7e>
 80031fe:	f1b8 0f00 	cmp.w	r8, #0
 8003202:	d022      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	f012 0f04 	tst.w	r2, #4
 800320c:	d0e5      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
 800320e:	2e80      	cmp	r6, #128	@ 0x80
 8003210:	d0e3      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
 8003212:	2e40      	cmp	r6, #64	@ 0x40
 8003214:	d0e1      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f012 0f08 	tst.w	r2, #8
 800321c:	d0dd      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800321e:	2400      	movs	r4, #0
 8003220:	9401      	str	r4, [sp, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800322c:	4628      	mov	r0, r5
 800322e:	f7ff ff15 	bl	800305c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003232:	2308      	movs	r3, #8
 8003234:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003236:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800323a:	2001      	movs	r0, #1
 800323c:	e000      	b.n	8003240 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800323e:	2000      	movs	r0, #0
}
 8003240:	b003      	add	sp, #12
 8003242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003246:	2003      	movs	r0, #3
 8003248:	e7fa      	b.n	8003240 <UART_WaitOnFlagUntilTimeout+0x78>
 800324a:	2003      	movs	r0, #3
 800324c:	e7f8      	b.n	8003240 <UART_WaitOnFlagUntilTimeout+0x78>

0800324e <HAL_UART_Init>:
  if (huart == NULL)
 800324e:	b360      	cbz	r0, 80032aa <HAL_UART_Init+0x5c>
{
 8003250:	b510      	push	{r4, lr}
 8003252:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003254:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003258:	b313      	cbz	r3, 80032a0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800325a:	2324      	movs	r3, #36	@ 0x24
 800325c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	68d3      	ldr	r3, [r2, #12]
 8003264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003268:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800326a:	4620      	mov	r0, r4
 800326c:	f7ff ff24 	bl	80030b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	6913      	ldr	r3, [r2, #16]
 8003274:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003278:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	6953      	ldr	r3, [r2, #20]
 800327e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003282:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	68d3      	ldr	r3, [r2, #12]
 8003288:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800328c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328e:	2000      	movs	r0, #0
 8003290:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003292:	2320      	movs	r3, #32
 8003294:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800329c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800329e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80032a0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80032a4:	f7fe fb1e 	bl	80018e4 <HAL_UART_MspInit>
 80032a8:	e7d7      	b.n	800325a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
}
 80032ac:	4770      	bx	lr

080032ae <HAL_UART_Transmit>:
{
 80032ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80032b6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d156      	bne.n	800336e <HAL_UART_Transmit+0xc0>
 80032c0:	4604      	mov	r4, r0
 80032c2:	460d      	mov	r5, r1
 80032c4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80032c6:	2900      	cmp	r1, #0
 80032c8:	d055      	beq.n	8003376 <HAL_UART_Transmit+0xc8>
 80032ca:	b90a      	cbnz	r2, 80032d0 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e04f      	b.n	8003370 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032d4:	2321      	movs	r3, #33	@ 0x21
 80032d6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80032da:	f7fe fc65 	bl	8001ba8 <HAL_GetTick>
 80032de:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80032e0:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032e4:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68a3      	ldr	r3, [r4, #8]
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80032f0:	f04f 0800 	mov.w	r8, #0
 80032f4:	e014      	b.n	8003320 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	b32b      	cbz	r3, 8003346 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80032fa:	f04f 0800 	mov.w	r8, #0
 80032fe:	e00f      	b.n	8003320 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003300:	2320      	movs	r3, #32
 8003302:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003306:	2003      	movs	r0, #3
 8003308:	e032      	b.n	8003370 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800330a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003316:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003318:	b292      	uxth	r2, r2
 800331a:	3a01      	subs	r2, #1
 800331c:	b292      	uxth	r2, r2
 800331e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003320:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003322:	b29b      	uxth	r3, r3
 8003324:	b193      	cbz	r3, 800334c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	9600      	str	r6, [sp, #0]
 8003328:	463b      	mov	r3, r7
 800332a:	2200      	movs	r2, #0
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	4620      	mov	r0, r4
 8003330:	f7ff ff4a 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8003334:	2800      	cmp	r0, #0
 8003336:	d1e3      	bne.n	8003300 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003338:	2d00      	cmp	r5, #0
 800333a:	d0e6      	beq.n	800330a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003344:	e7e7      	b.n	8003316 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003346:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003348:	2500      	movs	r5, #0
 800334a:	e7e9      	b.n	8003320 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800334c:	9600      	str	r6, [sp, #0]
 800334e:	463b      	mov	r3, r7
 8003350:	2200      	movs	r2, #0
 8003352:	2140      	movs	r1, #64	@ 0x40
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ff37 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 800335a:	b918      	cbnz	r0, 8003364 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800335c:	2320      	movs	r3, #32
 800335e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003362:	e005      	b.n	8003370 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003364:	2320      	movs	r3, #32
 8003366:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800336a:	2003      	movs	r0, #3
 800336c:	e000      	b.n	8003370 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800336e:	2002      	movs	r0, #2
}
 8003370:	b002      	add	sp, #8
 8003372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003376:	2001      	movs	r0, #1
 8003378:	e7fa      	b.n	8003370 <HAL_UART_Transmit+0xc2>

0800337a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800337a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800337c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003380:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003382:	f001 ff05 	bl	8005190 <xTaskGetSchedulerState>
 8003386:	2801      	cmp	r0, #1
 8003388:	d100      	bne.n	800338c <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800338a:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800338c:	f002 fb02 	bl	8005994 <xPortSysTickHandler>
}
 8003390:	e7fb      	b.n	800338a <SysTick_Handler+0x10>
	...

08003394 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003394:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003398:	b92b      	cbnz	r3, 80033a6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <osKernelInitialize+0x20>)
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	b928      	cbnz	r0, 80033ac <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033a4:	4770      	bx	lr
    stat = osErrorISR;
 80033a6:	f06f 0005 	mvn.w	r0, #5
 80033aa:	4770      	bx	lr
    } else {
      stat = osError;
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000df8 	.word	0x20000df8

080033b8 <osKernelStart>:
 80033b8:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80033bc:	b973      	cbnz	r3, 80033dc <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80033be:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <osKernelStart+0x30>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10d      	bne.n	80033e2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80033c6:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	2400      	movs	r4, #0
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <osKernelStart+0x34>)
 80033cc:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <osKernelStart+0x30>)
 80033d0:	2202      	movs	r2, #2
 80033d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80033d4:	f001 fb3c 	bl	8004a50 <vTaskStartScheduler>
      stat = osOK;
 80033d8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80033da:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80033dc:	f06f 0005 	mvn.w	r0, #5
 80033e0:	4770      	bx	lr
      stat = osError;
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80033e6:	4770      	bx	lr
 80033e8:	20000df8 	.word	0x20000df8
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80033f0:	b508      	push	{r3, lr}
 80033f2:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 80033f6:	b113      	cbz	r3, 80033fe <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 80033f8:	f001 fb90 	bl	8004b1c <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 80033fc:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 80033fe:	f001 fb87 	bl	8004b10 <xTaskGetTickCount>
  return (ticks);
 8003402:	e7fb      	b.n	80033fc <osKernelGetTickCount+0xc>

08003404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003408:	2400      	movs	r4, #0
 800340a:	9405      	str	r4, [sp, #20]
 800340c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003410:	bb74      	cbnz	r4, 8003470 <osThreadNew+0x6c>
 8003412:	b368      	cbz	r0, 8003470 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003414:	b322      	cbz	r2, 8003460 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 8003416:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003418:	6993      	ldr	r3, [r2, #24]
 800341a:	b903      	cbnz	r3, 800341e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800341c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800341e:	1e5c      	subs	r4, r3, #1
 8003420:	2c37      	cmp	r4, #55	@ 0x37
 8003422:	d849      	bhi.n	80034b8 <osThreadNew+0xb4>
 8003424:	6854      	ldr	r4, [r2, #4]
 8003426:	f014 0f01 	tst.w	r4, #1
 800342a:	d147      	bne.n	80034bc <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800342c:	6956      	ldr	r6, [r2, #20]
 800342e:	b16e      	cbz	r6, 800344c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003430:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003434:	6894      	ldr	r4, [r2, #8]
 8003436:	b12c      	cbz	r4, 8003444 <osThreadNew+0x40>
 8003438:	68d7      	ldr	r7, [r2, #12]
 800343a:	2fab      	cmp	r7, #171	@ 0xab
 800343c:	d902      	bls.n	8003444 <osThreadNew+0x40>
 800343e:	6917      	ldr	r7, [r2, #16]
 8003440:	b107      	cbz	r7, 8003444 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003442:	b9c6      	cbnz	r6, 8003476 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003444:	b12c      	cbz	r4, 8003452 <osThreadNew+0x4e>
    mem  = -1;
 8003446:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800344a:	e00e      	b.n	800346a <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800344c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8003450:	e7f0      	b.n	8003434 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003452:	68d4      	ldr	r4, [r2, #12]
 8003454:	b98c      	cbnz	r4, 800347a <osThreadNew+0x76>
 8003456:	6914      	ldr	r4, [r2, #16]
 8003458:	b194      	cbz	r4, 8003480 <osThreadNew+0x7c>
    mem  = -1;
 800345a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800345e:	e004      	b.n	800346a <osThreadNew+0x66>
    name = NULL;
 8003460:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8003462:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8003464:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8003466:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800346a:	2c01      	cmp	r4, #1
 800346c:	d00a      	beq.n	8003484 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800346e:	b1ac      	cbz	r4, 800349c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003470:	9805      	ldr	r0, [sp, #20]
}
 8003472:	b007      	add	sp, #28
 8003474:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8003476:	2401      	movs	r4, #1
 8003478:	e7f7      	b.n	800346a <osThreadNew+0x66>
    mem  = -1;
 800347a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800347e:	e7f4      	b.n	800346a <osThreadNew+0x66>
          mem = 0;
 8003480:	2400      	movs	r4, #0
 8003482:	e7f2      	b.n	800346a <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003484:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003486:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003488:	9202      	str	r2, [sp, #8]
 800348a:	9401      	str	r4, [sp, #4]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	460b      	mov	r3, r1
 8003490:	4662      	mov	r2, ip
 8003492:	4629      	mov	r1, r5
 8003494:	f001 fa26 	bl	80048e4 <xTaskCreateStatic>
 8003498:	9005      	str	r0, [sp, #20]
 800349a:	e7e9      	b.n	8003470 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800349c:	aa05      	add	r2, sp, #20
 800349e:	9201      	str	r2, [sp, #4]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	460b      	mov	r3, r1
 80034a4:	fa1f f28c 	uxth.w	r2, ip
 80034a8:	4629      	mov	r1, r5
 80034aa:	f001 fa56 	bl	800495a <xTaskCreate>
 80034ae:	2801      	cmp	r0, #1
 80034b0:	d0de      	beq.n	8003470 <osThreadNew+0x6c>
            hTask = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	9305      	str	r3, [sp, #20]
 80034b6:	e7db      	b.n	8003470 <osThreadNew+0x6c>
        return (NULL);
 80034b8:	2000      	movs	r0, #0
 80034ba:	e7da      	b.n	8003472 <osThreadNew+0x6e>
 80034bc:	2000      	movs	r0, #0
 80034be:	e7d8      	b.n	8003472 <osThreadNew+0x6e>

080034c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034c0:	b508      	push	{r3, lr}
 80034c2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80034c6:	b933      	cbnz	r3, 80034d6 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80034c8:	b908      	cbnz	r0, 80034ce <osDelay+0xe>
    stat = osOK;
 80034ca:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80034cc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80034ce:	f001 fc3b 	bl	8004d48 <vTaskDelay>
    stat = osOK;
 80034d2:	2000      	movs	r0, #0
 80034d4:	e7fa      	b.n	80034cc <osDelay+0xc>
    stat = osErrorISR;
 80034d6:	f06f 0005 	mvn.w	r0, #5
 80034da:	e7f7      	b.n	80034cc <osDelay+0xc>

080034dc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d13c      	bne.n	8003560 <osMutexNew+0x84>
 80034e6:	4604      	mov	r4, r0
    if (attr != NULL) {
 80034e8:	b100      	cbz	r0, 80034ec <osMutexNew+0x10>
      type = attr->attr_bits;
 80034ea:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80034ec:	f013 0601 	ands.w	r6, r3, #1
 80034f0:	d000      	beq.n	80034f4 <osMutexNew+0x18>
      rmtx = 1U;
 80034f2:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80034f4:	f013 0f08 	tst.w	r3, #8
 80034f8:	d135      	bne.n	8003566 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 80034fa:	b344      	cbz	r4, 800354e <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80034fc:	68a1      	ldr	r1, [r4, #8]
 80034fe:	b111      	cbz	r1, 8003506 <osMutexNew+0x2a>
 8003500:	68e3      	ldr	r3, [r4, #12]
 8003502:	2b4f      	cmp	r3, #79	@ 0x4f
 8003504:	d818      	bhi.n	8003538 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003506:	b191      	cbz	r1, 800352e <osMutexNew+0x52>
      mem = -1;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 800350c:	bb6b      	cbnz	r3, 800356a <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800350e:	b316      	cbz	r6, 8003556 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003510:	2004      	movs	r0, #4
 8003512:	f000 fce4 	bl	8003ede <xQueueCreateMutex>
 8003516:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003518:	b31d      	cbz	r5, 8003562 <osMutexNew+0x86>
        if (attr != NULL) {
 800351a:	b104      	cbz	r4, 800351e <osMutexNew+0x42>
          name = attr->name;
 800351c:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f000 ffcf 	bl	80044c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003526:	b1e6      	cbz	r6, 8003562 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003528:	f045 0501 	orr.w	r5, r5, #1
 800352c:	e019      	b.n	8003562 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800352e:	68e3      	ldr	r3, [r4, #12]
 8003530:	b17b      	cbz	r3, 8003552 <osMutexNew+0x76>
      mem = -1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003536:	e7e9      	b.n	800350c <osMutexNew+0x30>
          if (rmtx != 0U) {
 8003538:	b126      	cbz	r6, 8003544 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800353a:	2004      	movs	r0, #4
 800353c:	f000 fcda 	bl	8003ef4 <xQueueCreateMutexStatic>
 8003540:	4605      	mov	r5, r0
 8003542:	e7e9      	b.n	8003518 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003544:	2001      	movs	r0, #1
 8003546:	f000 fcd5 	bl	8003ef4 <xQueueCreateMutexStatic>
 800354a:	4605      	mov	r5, r0
 800354c:	e7e4      	b.n	8003518 <osMutexNew+0x3c>
        mem = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	e7dc      	b.n	800350c <osMutexNew+0x30>
            mem = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	e7da      	b.n	800350c <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8003556:	2001      	movs	r0, #1
 8003558:	f000 fcc1 	bl	8003ede <xQueueCreateMutex>
 800355c:	4605      	mov	r5, r0
 800355e:	e7db      	b.n	8003518 <osMutexNew+0x3c>
  hMutex = NULL;
 8003560:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8003562:	4628      	mov	r0, r5
 8003564:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8003566:	2500      	movs	r5, #0
 8003568:	e7fb      	b.n	8003562 <osMutexNew+0x86>
 800356a:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 800356c:	e7f9      	b.n	8003562 <osMutexNew+0x86>

0800356e <osMutexAcquire>:
 800356e:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003572:	b9da      	cbnz	r2, 80035ac <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003574:	b510      	push	{r4, lr}
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	f020 0001 	bic.w	r0, r0, #1
 800357e:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003582:	2b01      	cmp	r3, #1
 8003584:	d915      	bls.n	80035b2 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003586:	b141      	cbz	r1, 800359a <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003588:	4621      	mov	r1, r4
 800358a:	f000 ff24 	bl	80043d6 <xQueueTakeMutexRecursive>
 800358e:	2801      	cmp	r0, #1
 8003590:	d012      	beq.n	80035b8 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8003592:	b19c      	cbz	r4, 80035bc <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8003594:	f06f 0001 	mvn.w	r0, #1
 8003598:	e00f      	b.n	80035ba <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800359a:	4621      	mov	r1, r4
 800359c:	f000 fe48 	bl	8004230 <xQueueSemaphoreTake>
 80035a0:	2801      	cmp	r0, #1
 80035a2:	d00e      	beq.n	80035c2 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 80035a4:	b17c      	cbz	r4, 80035c6 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 80035a6:	f06f 0001 	mvn.w	r0, #1
 80035aa:	e006      	b.n	80035ba <osMutexAcquire+0x4c>
    stat = osErrorISR;
 80035ac:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80035b0:	4770      	bx	lr
    stat = osErrorParameter;
 80035b2:	f06f 0003 	mvn.w	r0, #3
 80035b6:	e000      	b.n	80035ba <osMutexAcquire+0x4c>
  stat = osOK;
 80035b8:	2000      	movs	r0, #0
}
 80035ba:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 80035bc:	f06f 0002 	mvn.w	r0, #2
 80035c0:	e7fb      	b.n	80035ba <osMutexAcquire+0x4c>
  stat = osOK;
 80035c2:	2000      	movs	r0, #0
 80035c4:	e7f9      	b.n	80035ba <osMutexAcquire+0x4c>
          stat = osErrorResource;
 80035c6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80035ca:	e7f6      	b.n	80035ba <osMutexAcquire+0x4c>

080035cc <osMutexRelease>:
 80035cc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80035d0:	b9ba      	cbnz	r2, 8003602 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80035d2:	b508      	push	{r3, lr}
 80035d4:	4603      	mov	r3, r0
 80035d6:	f020 0001 	bic.w	r0, r0, #1
 80035da:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d912      	bls.n	8003608 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80035e2:	b129      	cbz	r1, 80035f0 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80035e4:	f000 fc95 	bl	8003f12 <xQueueGiveMutexRecursive>
 80035e8:	2801      	cmp	r0, #1
 80035ea:	d110      	bne.n	800360e <osMutexRelease+0x42>
  stat = osOK;
 80035ec:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80035ee:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80035f0:	2300      	movs	r3, #0
 80035f2:	461a      	mov	r2, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	f000 fba2 	bl	8003d3e <xQueueGenericSend>
 80035fa:	2801      	cmp	r0, #1
 80035fc:	d10a      	bne.n	8003614 <osMutexRelease+0x48>
  stat = osOK;
 80035fe:	2000      	movs	r0, #0
 8003600:	e7f5      	b.n	80035ee <osMutexRelease+0x22>
    stat = osErrorISR;
 8003602:	f06f 0005 	mvn.w	r0, #5
}
 8003606:	4770      	bx	lr
    stat = osErrorParameter;
 8003608:	f06f 0003 	mvn.w	r0, #3
 800360c:	e7ef      	b.n	80035ee <osMutexRelease+0x22>
        stat = osErrorResource;
 800360e:	f06f 0002 	mvn.w	r0, #2
 8003612:	e7ec      	b.n	80035ee <osMutexRelease+0x22>
        stat = osErrorResource;
 8003614:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003618:	e7e9      	b.n	80035ee <osMutexRelease+0x22>

0800361a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800361a:	b570      	push	{r4, r5, r6, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003622:	2b00      	cmp	r3, #0
 8003624:	d148      	bne.n	80036b8 <osSemaphoreNew+0x9e>
 8003626:	460e      	mov	r6, r1
 8003628:	4614      	mov	r4, r2
 800362a:	2800      	cmp	r0, #0
 800362c:	d048      	beq.n	80036c0 <osSemaphoreNew+0xa6>
 800362e:	4288      	cmp	r0, r1
 8003630:	d348      	bcc.n	80036c4 <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 8003632:	b14a      	cbz	r2, 8003648 <osSemaphoreNew+0x2e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003634:	6895      	ldr	r5, [r2, #8]
 8003636:	b115      	cbz	r5, 800363e <osSemaphoreNew+0x24>
 8003638:	68d3      	ldr	r3, [r2, #12]
 800363a:	2b4f      	cmp	r3, #79	@ 0x4f
 800363c:	d814      	bhi.n	8003668 <osSemaphoreNew+0x4e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800363e:	2d00      	cmp	r5, #0
 8003640:	d142      	bne.n	80036c8 <osSemaphoreNew+0xae>
 8003642:	68e3      	ldr	r3, [r4, #12]
 8003644:	b10b      	cbz	r3, 800364a <osSemaphoreNew+0x30>
 8003646:	e038      	b.n	80036ba <osSemaphoreNew+0xa0>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8003648:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800364a:	2801      	cmp	r0, #1
 800364c:	d00e      	beq.n	800366c <osSemaphoreNew+0x52>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800364e:	bb6b      	cbnz	r3, 80036ac <osSemaphoreNew+0x92>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003650:	4631      	mov	r1, r6
 8003652:	f000 fb56 	bl	8003d02 <xQueueCreateCountingSemaphore>
 8003656:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003658:	b37d      	cbz	r5, 80036ba <osSemaphoreNew+0xa0>
        if (attr != NULL) {
 800365a:	b104      	cbz	r4, 800365e <osSemaphoreNew+0x44>
          name = attr->name;
 800365c:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 ff2f 	bl	80044c4 <vQueueAddToRegistry>
 8003666:	e028      	b.n	80036ba <osSemaphoreNew+0xa0>
        mem = 1;
 8003668:	2301      	movs	r3, #1
 800366a:	e7ee      	b.n	800364a <osSemaphoreNew+0x30>
        if (mem == 1) {
 800366c:	b9ab      	cbnz	r3, 800369a <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinary();
 800366e:	2203      	movs	r2, #3
 8003670:	2100      	movs	r1, #0
 8003672:	2001      	movs	r0, #1
 8003674:	f000 fafe 	bl	8003c74 <xQueueGenericCreate>
 8003678:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800367a:	b1f5      	cbz	r5, 80036ba <osSemaphoreNew+0xa0>
 800367c:	2e00      	cmp	r6, #0
 800367e:	d0eb      	beq.n	8003658 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003680:	2300      	movs	r3, #0
 8003682:	461a      	mov	r2, r3
 8003684:	4619      	mov	r1, r3
 8003686:	4628      	mov	r0, r5
 8003688:	f000 fb59 	bl	8003d3e <xQueueGenericSend>
 800368c:	2801      	cmp	r0, #1
 800368e:	d0e3      	beq.n	8003658 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8003690:	4628      	mov	r0, r5
 8003692:	f000 ff41 	bl	8004518 <vQueueDelete>
            hSemaphore = NULL;
 8003696:	2500      	movs	r5, #0
 8003698:	e00f      	b.n	80036ba <osSemaphoreNew+0xa0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	2203      	movs	r2, #3
 800369e:	9200      	str	r2, [sp, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	4611      	mov	r1, r2
 80036a4:	f000 fa9c 	bl	8003be0 <xQueueGenericCreateStatic>
 80036a8:	4605      	mov	r5, r0
 80036aa:	e7e6      	b.n	800367a <osSemaphoreNew+0x60>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80036ac:	68a2      	ldr	r2, [r4, #8]
 80036ae:	4631      	mov	r1, r6
 80036b0:	f000 fb04 	bl	8003cbc <xQueueCreateCountingSemaphoreStatic>
 80036b4:	4605      	mov	r5, r0
 80036b6:	e7cf      	b.n	8003658 <osSemaphoreNew+0x3e>
  hSemaphore = NULL;
 80036b8:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80036ba:	4628      	mov	r0, r5
 80036bc:	b002      	add	sp, #8
 80036be:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 80036c0:	2500      	movs	r5, #0
 80036c2:	e7fa      	b.n	80036ba <osSemaphoreNew+0xa0>
 80036c4:	2500      	movs	r5, #0
 80036c6:	e7f8      	b.n	80036ba <osSemaphoreNew+0xa0>
 80036c8:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 80036ca:	e7f6      	b.n	80036ba <osSemaphoreNew+0xa0>

080036cc <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80036cc:	b320      	cbz	r0, 8003718 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80036ce:	b510      	push	{r4, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	460c      	mov	r4, r1
 80036d4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80036d8:	b1b3      	cbz	r3, 8003708 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 80036da:	bb01      	cbnz	r1, 800371e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80036dc:	2100      	movs	r1, #0
 80036de:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80036e0:	aa01      	add	r2, sp, #4
 80036e2:	f000 fe98 	bl	8004416 <xQueueReceiveFromISR>
 80036e6:	2801      	cmp	r0, #1
 80036e8:	d11c      	bne.n	8003724 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80036ea:	9801      	ldr	r0, [sp, #4]
 80036ec:	b150      	cbz	r0, 8003704 <osSemaphoreAcquire+0x38>
 80036ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80036f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003702:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003704:	b002      	add	sp, #8
 8003706:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003708:	f000 fd92 	bl	8004230 <xQueueSemaphoreTake>
 800370c:	2801      	cmp	r0, #1
 800370e:	d00c      	beq.n	800372a <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 8003710:	b16c      	cbz	r4, 800372e <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 8003712:	f06f 0001 	mvn.w	r0, #1
 8003716:	e7f5      	b.n	8003704 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 8003718:	f06f 0003 	mvn.w	r0, #3
}
 800371c:	4770      	bx	lr
      stat = osErrorParameter;
 800371e:	f06f 0003 	mvn.w	r0, #3
 8003722:	e7ef      	b.n	8003704 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8003724:	f06f 0002 	mvn.w	r0, #2
 8003728:	e7ec      	b.n	8003704 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800372a:	2000      	movs	r0, #0
 800372c:	e7ea      	b.n	8003704 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800372e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003732:	e7e7      	b.n	8003704 <osSemaphoreAcquire+0x38>

08003734 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003734:	b320      	cbz	r0, 8003780 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003736:	b500      	push	{lr}
 8003738:	b083      	sub	sp, #12
 800373a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800373e:	b1a3      	cbz	r3, 800376a <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 8003740:	2300      	movs	r3, #0
 8003742:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003744:	a901      	add	r1, sp, #4
 8003746:	f000 fc6b 	bl	8004020 <xQueueGiveFromISR>
 800374a:	2801      	cmp	r0, #1
 800374c:	d11b      	bne.n	8003786 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800374e:	9801      	ldr	r0, [sp, #4]
 8003750:	b198      	cbz	r0, 800377a <osSemaphoreRelease+0x46>
 8003752:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800375a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003766:	2000      	movs	r0, #0
 8003768:	e007      	b.n	800377a <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800376a:	2300      	movs	r3, #0
 800376c:	461a      	mov	r2, r3
 800376e:	4619      	mov	r1, r3
 8003770:	f000 fae5 	bl	8003d3e <xQueueGenericSend>
 8003774:	2801      	cmp	r0, #1
 8003776:	d109      	bne.n	800378c <osSemaphoreRelease+0x58>
  stat = osOK;
 8003778:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800377a:	b003      	add	sp, #12
 800377c:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8003780:	f06f 0003 	mvn.w	r0, #3
}
 8003784:	4770      	bx	lr
      stat = osErrorResource;
 8003786:	f06f 0002 	mvn.w	r0, #2
 800378a:	e7f6      	b.n	800377a <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800378c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003790:	e7f3      	b.n	800377a <osSemaphoreRelease+0x46>

08003792 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003792:	b570      	push	{r4, r5, r6, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800379a:	2b00      	cmp	r3, #0
 800379c:	d13a      	bne.n	8003814 <osMessageQueueNew+0x82>
 800379e:	4614      	mov	r4, r2
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d03b      	beq.n	800381c <osMessageQueueNew+0x8a>
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d03b      	beq.n	8003820 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80037a8:	b36a      	cbz	r2, 8003806 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80037aa:	6893      	ldr	r3, [r2, #8]
 80037ac:	b14b      	cbz	r3, 80037c2 <osMessageQueueNew+0x30>
 80037ae:	68d2      	ldr	r2, [r2, #12]
 80037b0:	2a4f      	cmp	r2, #79	@ 0x4f
 80037b2:	d906      	bls.n	80037c2 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80037b4:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80037b6:	b122      	cbz	r2, 80037c2 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80037b8:	fb01 f500 	mul.w	r5, r1, r0
 80037bc:	6966      	ldr	r6, [r4, #20]
 80037be:	42ae      	cmp	r6, r5
 80037c0:	d21b      	bcs.n	80037fa <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037c2:	b173      	cbz	r3, 80037e2 <osMessageQueueNew+0x50>
    mem = -1;
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80037c8:	bb63      	cbnz	r3, 8003824 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80037ca:	2200      	movs	r2, #0
 80037cc:	f000 fa52 	bl	8003c74 <xQueueGenericCreate>
 80037d0:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80037d2:	b305      	cbz	r5, 8003816 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80037d4:	b104      	cbz	r4, 80037d8 <osMessageQueueNew+0x46>
        name = attr->name;
 80037d6:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80037d8:	4621      	mov	r1, r4
 80037da:	4628      	mov	r0, r5
 80037dc:	f000 fe72 	bl	80044c4 <vQueueAddToRegistry>
 80037e0:	e019      	b.n	8003816 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	b98b      	cbnz	r3, 800380a <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037e6:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037e8:	b113      	cbz	r3, 80037f0 <osMessageQueueNew+0x5e>
    mem = -1;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037ee:	e7eb      	b.n	80037c8 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037f0:	6963      	ldr	r3, [r4, #20]
 80037f2:	b16b      	cbz	r3, 8003810 <osMessageQueueNew+0x7e>
    mem = -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037f8:	e7e6      	b.n	80037c8 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80037fa:	2500      	movs	r5, #0
 80037fc:	9500      	str	r5, [sp, #0]
 80037fe:	f000 f9ef 	bl	8003be0 <xQueueGenericCreateStatic>
 8003802:	4605      	mov	r5, r0
 8003804:	e7e5      	b.n	80037d2 <osMessageQueueNew+0x40>
      mem = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	e7de      	b.n	80037c8 <osMessageQueueNew+0x36>
    mem = -1;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800380e:	e7db      	b.n	80037c8 <osMessageQueueNew+0x36>
          mem = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	e7d9      	b.n	80037c8 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8003814:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003816:	4628      	mov	r0, r5
 8003818:	b002      	add	sp, #8
 800381a:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800381c:	2500      	movs	r5, #0
 800381e:	e7fa      	b.n	8003816 <osMessageQueueNew+0x84>
 8003820:	2500      	movs	r5, #0
 8003822:	e7f8      	b.n	8003816 <osMessageQueueNew+0x84>
 8003824:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8003826:	e7f6      	b.n	8003816 <osMessageQueueNew+0x84>

08003828 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003828:	b510      	push	{r4, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	461c      	mov	r4, r3
 800382e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003832:	b1c3      	cbz	r3, 8003866 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003834:	b318      	cbz	r0, 800387e <osMessageQueuePut+0x56>
 8003836:	b329      	cbz	r1, 8003884 <osMessageQueuePut+0x5c>
 8003838:	bb3c      	cbnz	r4, 800388a <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800383e:	aa01      	add	r2, sp, #4
 8003840:	f000 fb87 	bl	8003f52 <xQueueGenericSendFromISR>
 8003844:	2801      	cmp	r0, #1
 8003846:	d123      	bne.n	8003890 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003848:	9801      	ldr	r0, [sp, #4]
 800384a:	b150      	cbz	r0, 8003862 <osMessageQueuePut+0x3a>
 800384c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003854:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003860:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003862:	b002      	add	sp, #8
 8003864:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003866:	b1b0      	cbz	r0, 8003896 <osMessageQueuePut+0x6e>
 8003868:	b1c1      	cbz	r1, 800389c <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800386a:	2300      	movs	r3, #0
 800386c:	4622      	mov	r2, r4
 800386e:	f000 fa66 	bl	8003d3e <xQueueGenericSend>
 8003872:	2801      	cmp	r0, #1
 8003874:	d015      	beq.n	80038a2 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8003876:	b1b4      	cbz	r4, 80038a6 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8003878:	f06f 0001 	mvn.w	r0, #1
 800387c:	e7f1      	b.n	8003862 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800387e:	f06f 0003 	mvn.w	r0, #3
 8003882:	e7ee      	b.n	8003862 <osMessageQueuePut+0x3a>
 8003884:	f06f 0003 	mvn.w	r0, #3
 8003888:	e7eb      	b.n	8003862 <osMessageQueuePut+0x3a>
 800388a:	f06f 0003 	mvn.w	r0, #3
 800388e:	e7e8      	b.n	8003862 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8003890:	f06f 0002 	mvn.w	r0, #2
 8003894:	e7e5      	b.n	8003862 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8003896:	f06f 0003 	mvn.w	r0, #3
 800389a:	e7e2      	b.n	8003862 <osMessageQueuePut+0x3a>
 800389c:	f06f 0003 	mvn.w	r0, #3
 80038a0:	e7df      	b.n	8003862 <osMessageQueuePut+0x3a>
  stat = osOK;
 80038a2:	2000      	movs	r0, #0
 80038a4:	e7dd      	b.n	8003862 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80038a6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80038aa:	e7da      	b.n	8003862 <osMessageQueuePut+0x3a>

080038ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80038ac:	b510      	push	{r4, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	461c      	mov	r4, r3
 80038b2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80038b6:	b1c3      	cbz	r3, 80038ea <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038b8:	b310      	cbz	r0, 8003900 <osMessageQueueGet+0x54>
 80038ba:	b321      	cbz	r1, 8003906 <osMessageQueueGet+0x5a>
 80038bc:	bb34      	cbnz	r4, 800390c <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80038c2:	aa01      	add	r2, sp, #4
 80038c4:	f000 fda7 	bl	8004416 <xQueueReceiveFromISR>
 80038c8:	2801      	cmp	r0, #1
 80038ca:	d122      	bne.n	8003912 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80038cc:	9801      	ldr	r0, [sp, #4]
 80038ce:	b150      	cbz	r0, 80038e6 <osMessageQueueGet+0x3a>
 80038d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80038d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80038e4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80038e6:	b002      	add	sp, #8
 80038e8:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80038ea:	b1a8      	cbz	r0, 8003918 <osMessageQueueGet+0x6c>
 80038ec:	b1b9      	cbz	r1, 800391e <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80038ee:	4622      	mov	r2, r4
 80038f0:	f000 fbef 	bl	80040d2 <xQueueReceive>
 80038f4:	2801      	cmp	r0, #1
 80038f6:	d015      	beq.n	8003924 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 80038f8:	b1b4      	cbz	r4, 8003928 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 80038fa:	f06f 0001 	mvn.w	r0, #1
 80038fe:	e7f2      	b.n	80038e6 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8003900:	f06f 0003 	mvn.w	r0, #3
 8003904:	e7ef      	b.n	80038e6 <osMessageQueueGet+0x3a>
 8003906:	f06f 0003 	mvn.w	r0, #3
 800390a:	e7ec      	b.n	80038e6 <osMessageQueueGet+0x3a>
 800390c:	f06f 0003 	mvn.w	r0, #3
 8003910:	e7e9      	b.n	80038e6 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8003912:	f06f 0002 	mvn.w	r0, #2
 8003916:	e7e6      	b.n	80038e6 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8003918:	f06f 0003 	mvn.w	r0, #3
 800391c:	e7e3      	b.n	80038e6 <osMessageQueueGet+0x3a>
 800391e:	f06f 0003 	mvn.w	r0, #3
 8003922:	e7e0      	b.n	80038e6 <osMessageQueueGet+0x3a>
  stat = osOK;
 8003924:	2000      	movs	r0, #0
 8003926:	e7de      	b.n	80038e6 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8003928:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800392c:	e7db      	b.n	80038e6 <osMessageQueueGet+0x3a>
	...

08003930 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <vApplicationGetIdleTaskMemory+0x10>)
 8003932:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003934:	4b03      	ldr	r3, [pc, #12]	@ (8003944 <vApplicationGetIdleTaskMemory+0x14>)
 8003936:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20000d4c 	.word	0x20000d4c
 8003944:	20000b4c 	.word	0x20000b4c

08003948 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <vApplicationGetTimerTaskMemory+0x10>)
 800394a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <vApplicationGetTimerTaskMemory+0x14>)
 800394e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003954:	6013      	str	r3, [r2, #0]
}
 8003956:	4770      	bx	lr
 8003958:	20000aa0 	.word	0x20000aa0
 800395c:	200006a0 	.word	0x200006a0

08003960 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003960:	f100 0308 	add.w	r3, r0, #8
 8003964:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003966:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800396a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003974:	4770      	bx	lr

08003976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800397a:	4770      	bx	lr

0800397c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800397c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800397e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003984:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003986:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003988:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800398a:	6803      	ldr	r3, [r0, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	6003      	str	r3, [r0, #0]
}
 8003990:	4770      	bx	lr

08003992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003992:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003994:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003996:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800399a:	d011      	beq.n	80039c0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800399c:	f100 0308 	add.w	r3, r0, #8
 80039a0:	461c      	mov	r4, r3
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	42aa      	cmp	r2, r5
 80039a8:	d9fa      	bls.n	80039a0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039ae:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039b0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80039b2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80039b6:	6803      	ldr	r3, [r0, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	6003      	str	r3, [r0, #0]
}
 80039bc:	bc30      	pop	{r4, r5}
 80039be:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80039c0:	6904      	ldr	r4, [r0, #16]
 80039c2:	e7f2      	b.n	80039aa <vListInsert+0x18>

080039c4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039c4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039c6:	6841      	ldr	r1, [r0, #4]
 80039c8:	6882      	ldr	r2, [r0, #8]
 80039ca:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039cc:	6841      	ldr	r1, [r0, #4]
 80039ce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	4282      	cmp	r2, r0
 80039d4:	d006      	beq.n	80039e4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039d6:	2200      	movs	r2, #0
 80039d8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	3a01      	subs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039e0:	6818      	ldr	r0, [r3, #0]
}
 80039e2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039e4:	6882      	ldr	r2, [r0, #8]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	e7f5      	b.n	80039d6 <uxListRemove+0x12>

080039ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80039ea:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80039ec:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80039ee:	b118      	cbz	r0, 80039f8 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80039f8:	4770      	bx	lr

080039fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039fa:	b510      	push	{r4, lr}
 80039fc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039fe:	f001 ff59 	bl	80058b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a02:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d004      	beq.n	8003a14 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8003a0a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003a0c:	f001 ff74 	bl	80058f8 <vPortExitCritical>

	return xReturn;
}
 8003a10:	4620      	mov	r0, r4
 8003a12:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003a14:	2401      	movs	r4, #1
 8003a16:	e7f9      	b.n	8003a0c <prvIsQueueFull+0x12>

08003a18 <prvIsQueueEmpty>:
{
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003a1c:	f001 ff4a 	bl	80058b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a20:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a22:	b923      	cbnz	r3, 8003a2e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003a24:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003a26:	f001 ff67 	bl	80058f8 <vPortExitCritical>
}
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8003a2e:	2400      	movs	r4, #0
 8003a30:	e7f9      	b.n	8003a26 <prvIsQueueEmpty+0xe>

08003a32 <prvCopyDataToQueue>:
{
 8003a32:	b570      	push	{r4, r5, r6, lr}
 8003a34:	4604      	mov	r4, r0
 8003a36:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a38:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a3a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003a3c:	b95a      	cbnz	r2, 8003a56 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a3e:	6803      	ldr	r3, [r0, #0]
 8003a40:	b11b      	cbz	r3, 8003a4a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003a42:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a44:	3601      	adds	r6, #1
 8003a46:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a4a:	6880      	ldr	r0, [r0, #8]
 8003a4c:	f001 fbfc 	bl	8005248 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60a3      	str	r3, [r4, #8]
 8003a54:	e7f6      	b.n	8003a44 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003a56:	b96d      	cbnz	r5, 8003a74 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a58:	6840      	ldr	r0, [r0, #4]
 8003a5a:	f003 f924 	bl	8006ca6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a62:	4413      	add	r3, r2
 8003a64:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a66:	68a2      	ldr	r2, [r4, #8]
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d319      	bcc.n	8003aa0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003a70:	4628      	mov	r0, r5
 8003a72:	e7e7      	b.n	8003a44 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a74:	68c0      	ldr	r0, [r0, #12]
 8003a76:	f003 f916 	bl	8006ca6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a7a:	68e3      	ldr	r3, [r4, #12]
 8003a7c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a7e:	4251      	negs	r1, r2
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d202      	bcs.n	8003a90 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	440b      	add	r3, r1
 8003a8e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003a90:	2d02      	cmp	r5, #2
 8003a92:	d001      	beq.n	8003a98 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003a94:	2000      	movs	r0, #0
 8003a96:	e7d5      	b.n	8003a44 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a98:	b126      	cbz	r6, 8003aa4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003a9a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	e7d1      	b.n	8003a44 <prvCopyDataToQueue+0x12>
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	e7cf      	b.n	8003a44 <prvCopyDataToQueue+0x12>
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	e7cd      	b.n	8003a44 <prvCopyDataToQueue+0x12>

08003aa8 <prvCopyDataFromQueue>:
{
 8003aa8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003aaa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003aac:	b16a      	cbz	r2, 8003aca <prvCopyDataFromQueue+0x22>
{
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ab2:	68d9      	ldr	r1, [r3, #12]
 8003ab4:	4411      	add	r1, r2
 8003ab6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ab8:	689c      	ldr	r4, [r3, #8]
 8003aba:	42a1      	cmp	r1, r4
 8003abc:	d301      	bcc.n	8003ac2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ac2:	68d9      	ldr	r1, [r3, #12]
 8003ac4:	f003 f8ef 	bl	8006ca6 <memcpy>
}
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	4770      	bx	lr

08003acc <prvUnlockQueue>:
{
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003ad0:	f001 fef0 	bl	80058b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003ad4:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8003ad8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ada:	e001      	b.n	8003ae0 <prvUnlockQueue+0x14>
			--cTxLock;
 8003adc:	3c01      	subs	r4, #1
 8003ade:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	dd0a      	ble.n	8003afa <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003ae6:	b143      	cbz	r3, 8003afa <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8003aec:	f001 f9ec 	bl	8004ec8 <xTaskRemoveFromEventList>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d0f3      	beq.n	8003adc <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003af4:	f001 fa7c 	bl	8004ff0 <vTaskMissedYield>
 8003af8:	e7f0      	b.n	8003adc <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8003afa:	23ff      	movs	r3, #255	@ 0xff
 8003afc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003b00:	f001 fefa 	bl	80058f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003b04:	f001 fed6 	bl	80058b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003b08:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8003b0c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b0e:	e001      	b.n	8003b14 <prvUnlockQueue+0x48>
				--cRxLock;
 8003b10:	3c01      	subs	r4, #1
 8003b12:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	dd0a      	ble.n	8003b2e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b18:	692b      	ldr	r3, [r5, #16]
 8003b1a:	b143      	cbz	r3, 8003b2e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b1c:	f105 0010 	add.w	r0, r5, #16
 8003b20:	f001 f9d2 	bl	8004ec8 <xTaskRemoveFromEventList>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d0f3      	beq.n	8003b10 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8003b28:	f001 fa62 	bl	8004ff0 <vTaskMissedYield>
 8003b2c:	e7f0      	b.n	8003b10 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003b2e:	23ff      	movs	r3, #255	@ 0xff
 8003b30:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003b34:	f001 fee0 	bl	80058f8 <vPortExitCritical>
}
 8003b38:	bd38      	pop	{r3, r4, r5, pc}

08003b3a <xQueueGenericReset>:
{
 8003b3a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003b3c:	b1e0      	cbz	r0, 8003b78 <xQueueGenericReset+0x3e>
 8003b3e:	460d      	mov	r5, r1
 8003b40:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003b42:	f001 feb7 	bl	80058b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003b4a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003b4c:	fb01 3002 	mla	r0, r1, r2, r3
 8003b50:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b52:	2000      	movs	r0, #0
 8003b54:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b56:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	fb02 3301 	mla	r3, r2, r1, r3
 8003b5e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b60:	23ff      	movs	r3, #255	@ 0xff
 8003b62:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003b6a:	b9fd      	cbnz	r5, 8003bac <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b6c:	6923      	ldr	r3, [r4, #16]
 8003b6e:	b963      	cbnz	r3, 8003b8a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003b70:	f001 fec2 	bl	80058f8 <vPortExitCritical>
}
 8003b74:	2001      	movs	r0, #1
 8003b76:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b8a:	f104 0010 	add.w	r0, r4, #16
 8003b8e:	f001 f99b 	bl	8004ec8 <xTaskRemoveFromEventList>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d0ec      	beq.n	8003b70 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003b96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	e7e1      	b.n	8003b70 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bac:	f104 0010 	add.w	r0, r4, #16
 8003bb0:	f7ff fed6 	bl	8003960 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bb4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003bb8:	f7ff fed2 	bl	8003960 <vListInitialise>
 8003bbc:	e7d8      	b.n	8003b70 <xQueueGenericReset+0x36>

08003bbe <prvInitialiseNewQueue>:
{
 8003bbe:	b538      	push	{r3, r4, r5, lr}
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	b949      	cbnz	r1, 8003bdc <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bc8:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003bca:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bcc:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7ff ffb2 	bl	8003b3a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003bd6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bdc:	6022      	str	r2, [r4, #0]
 8003bde:	e7f4      	b.n	8003bca <prvInitialiseNewQueue+0xc>

08003be0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003be0:	b940      	cbnz	r0, 8003bf4 <xQueueGenericCreateStatic+0x14>
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueGenericCreateStatic+0x12>
	{
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	461c      	mov	r4, r3
 8003bfa:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8003bfc:	b153      	cbz	r3, 8003c14 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bfe:	b192      	cbz	r2, 8003c26 <xQueueGenericCreateStatic+0x46>
 8003c00:	b989      	cbnz	r1, 8003c26 <xQueueGenericCreateStatic+0x46>
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	e7fe      	b.n	8003c12 <xQueueGenericCreateStatic+0x32>
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c26:	b16a      	cbz	r2, 8003c44 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c28:	2350      	movs	r3, #80	@ 0x50
 8003c2a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	2b50      	cmp	r3, #80	@ 0x50
 8003c30:	d013      	beq.n	8003c5a <xQueueGenericCreateStatic+0x7a>
 8003c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	e7fe      	b.n	8003c42 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c44:	2900      	cmp	r1, #0
 8003c46:	d0ef      	beq.n	8003c28 <xQueueGenericCreateStatic+0x48>
 8003c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	e7fe      	b.n	8003c58 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c5a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c62:	9400      	str	r4, [sp, #0]
 8003c64:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003c68:	4660      	mov	r0, ip
 8003c6a:	f7ff ffa8 	bl	8003bbe <prvInitialiseNewQueue>
	}
 8003c6e:	4620      	mov	r0, r4
 8003c70:	b004      	add	sp, #16
 8003c72:	bd10      	pop	{r4, pc}

08003c74 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c74:	b940      	cbnz	r0, 8003c88 <xQueueGenericCreate+0x14>
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	e7fe      	b.n	8003c86 <xQueueGenericCreate+0x12>
	{
 8003c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	460d      	mov	r5, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c92:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c96:	3050      	adds	r0, #80	@ 0x50
 8003c98:	f001 ffc4 	bl	8005c24 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	b150      	cbz	r0, 8003cb6 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ca6:	9000      	str	r0, [sp, #0]
 8003ca8:	4623      	mov	r3, r4
 8003caa:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003cae:	4629      	mov	r1, r5
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f7ff ff84 	bl	8003bbe <prvInitialiseNewQueue>
	}
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	b003      	add	sp, #12
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cbc <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8003cbc:	b940      	cbnz	r0, 8003cd0 <xQueueCreateCountingSemaphoreStatic+0x14>
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	e7fe      	b.n	8003cce <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003cd6:	4288      	cmp	r0, r1
 8003cd8:	d208      	bcs.n	8003cec <xQueueCreateCountingSemaphoreStatic+0x30>
 8003cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	e7fe      	b.n	8003cea <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003cec:	2302      	movs	r3, #2
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f7ff ff73 	bl	8003be0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8003cfa:	b100      	cbz	r0, 8003cfe <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003cfc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd10      	pop	{r4, pc}

08003d02 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8003d02:	b940      	cbnz	r0, 8003d16 <xQueueCreateCountingSemaphore+0x14>
 8003d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	e7fe      	b.n	8003d14 <xQueueCreateCountingSemaphore+0x12>
	{
 8003d16:	b510      	push	{r4, lr}
 8003d18:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003d1a:	4288      	cmp	r0, r1
 8003d1c:	d208      	bcs.n	8003d30 <xQueueCreateCountingSemaphore+0x2e>
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	e7fe      	b.n	8003d2e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003d30:	2202      	movs	r2, #2
 8003d32:	2100      	movs	r1, #0
 8003d34:	f7ff ff9e 	bl	8003c74 <xQueueGenericCreate>
		if( xHandle != NULL )
 8003d38:	b100      	cbz	r0, 8003d3c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003d3a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8003d3c:	bd10      	pop	{r4, pc}

08003d3e <xQueueGenericSend>:
{
 8003d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d40:	b085      	sub	sp, #20
 8003d42:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003d44:	b188      	cbz	r0, 8003d6a <xQueueGenericSend+0x2c>
 8003d46:	460f      	mov	r7, r1
 8003d48:	461d      	mov	r5, r3
 8003d4a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d4c:	b1b1      	cbz	r1, 8003d7c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d4e:	2d02      	cmp	r5, #2
 8003d50:	d120      	bne.n	8003d94 <xQueueGenericSend+0x56>
 8003d52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d01d      	beq.n	8003d94 <xQueueGenericSend+0x56>
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericSend+0x2a>
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003d7a:	e7fe      	b.n	8003d7a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d7c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0e5      	beq.n	8003d4e <xQueueGenericSend+0x10>
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	e7fe      	b.n	8003d92 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d94:	f001 f9fc 	bl	8005190 <xTaskGetSchedulerState>
 8003d98:	4606      	mov	r6, r0
 8003d9a:	b958      	cbnz	r0, 8003db4 <xQueueGenericSend+0x76>
 8003d9c:	9b01      	ldr	r3, [sp, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d048      	beq.n	8003e34 <xQueueGenericSend+0xf6>
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	e7fe      	b.n	8003db2 <xQueueGenericSend+0x74>
 8003db4:	2600      	movs	r6, #0
 8003db6:	e03d      	b.n	8003e34 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003db8:	462a      	mov	r2, r5
 8003dba:	4639      	mov	r1, r7
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7ff fe38 	bl	8003a32 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dc4:	b97b      	cbnz	r3, 8003de6 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8003dc6:	b148      	cbz	r0, 8003ddc <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8003dc8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003ddc:	f001 fd8c 	bl	80058f8 <vPortExitCritical>
				return pdPASS;
 8003de0:	2001      	movs	r0, #1
}
 8003de2:	b005      	add	sp, #20
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003dea:	f001 f86d 	bl	8004ec8 <xTaskRemoveFromEventList>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0f4      	beq.n	8003ddc <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8003df2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	e7e9      	b.n	8003ddc <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8003e08:	f001 fd76 	bl	80058f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e7e8      	b.n	8003de2 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e10:	a802      	add	r0, sp, #8
 8003e12:	f001 f89f 	bl	8004f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e16:	2601      	movs	r6, #1
 8003e18:	e019      	b.n	8003e4e <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003e20:	e021      	b.n	8003e66 <xQueueGenericSend+0x128>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003e28:	e023      	b.n	8003e72 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff fe4e 	bl	8003acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e30:	f000 ff0e 	bl	8004c50 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003e34:	f001 fd3e 	bl	80058b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e38:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d3bb      	bcc.n	8003db8 <xQueueGenericSend+0x7a>
 8003e40:	2d02      	cmp	r5, #2
 8003e42:	d0b9      	beq.n	8003db8 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e44:	9b01      	ldr	r3, [sp, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0de      	beq.n	8003e08 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8003e4a:	2e00      	cmp	r6, #0
 8003e4c:	d0e0      	beq.n	8003e10 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8003e4e:	f001 fd53 	bl	80058f8 <vPortExitCritical>
		vTaskSuspendAll();
 8003e52:	f000 fe55 	bl	8004b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e56:	f001 fd2d 	bl	80058b4 <vPortEnterCritical>
 8003e5a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8003e5e:	b252      	sxtb	r2, r2
 8003e60:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003e64:	d0d9      	beq.n	8003e1a <xQueueGenericSend+0xdc>
 8003e66:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8003e6a:	b252      	sxtb	r2, r2
 8003e6c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003e70:	d0d7      	beq.n	8003e22 <xQueueGenericSend+0xe4>
 8003e72:	f001 fd41 	bl	80058f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e76:	a901      	add	r1, sp, #4
 8003e78:	a802      	add	r0, sp, #8
 8003e7a:	f001 f877 	bl	8004f6c <xTaskCheckForTimeOut>
 8003e7e:	b9d8      	cbnz	r0, 8003eb8 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7ff fdba 	bl	80039fa <prvIsQueueFull>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d0cf      	beq.n	8003e2a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e8a:	9901      	ldr	r1, [sp, #4]
 8003e8c:	f104 0010 	add.w	r0, r4, #16
 8003e90:	f000 ffe6 	bl	8004e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff fe19 	bl	8003acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e9a:	f000 fed9 	bl	8004c50 <xTaskResumeAll>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d1c8      	bne.n	8003e34 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003ea2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eaa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	e7bd      	b.n	8003e34 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7ff fe07 	bl	8003acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ebe:	f000 fec7 	bl	8004c50 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e78d      	b.n	8003de2 <xQueueGenericSend+0xa4>

08003ec6 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003ec6:	b148      	cbz	r0, 8003edc <prvInitialiseMutex+0x16>
	{
 8003ec8:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ece:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ed0:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	f7ff ff32 	bl	8003d3e <xQueueGenericSend>
	}
 8003eda:	bd08      	pop	{r3, pc}
 8003edc:	4770      	bx	lr

08003ede <xQueueCreateMutex>:
	{
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff fec5 	bl	8003c74 <xQueueGenericCreate>
 8003eea:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003eec:	f7ff ffeb 	bl	8003ec6 <prvInitialiseMutex>
	}
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <xQueueCreateMutexStatic>:
	{
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003efa:	9000      	str	r0, [sp, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	4611      	mov	r1, r2
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7ff fe6d 	bl	8003be0 <xQueueGenericCreateStatic>
 8003f06:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f08:	f7ff ffdd 	bl	8003ec6 <prvInitialiseMutex>
	}
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd10      	pop	{r4, pc}

08003f12 <xQueueGiveMutexRecursive>:
	{
 8003f12:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8003f14:	b138      	cbz	r0, 8003f26 <xQueueGiveMutexRecursive+0x14>
 8003f16:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003f18:	6885      	ldr	r5, [r0, #8]
 8003f1a:	f001 f933 	bl	8005184 <xTaskGetCurrentTaskHandle>
 8003f1e:	4285      	cmp	r5, r0
 8003f20:	d00a      	beq.n	8003f38 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8003f22:	2000      	movs	r0, #0
	}
 8003f24:	bd38      	pop	{r3, r4, r5, pc}
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8003f36:	e7fe      	b.n	8003f36 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003f38:	68e3      	ldr	r3, [r4, #12]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003f3e:	b10b      	cbz	r3, 8003f44 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8003f40:	2001      	movs	r0, #1
		return xReturn;
 8003f42:	e7ef      	b.n	8003f24 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003f44:	461a      	mov	r2, r3
 8003f46:	4619      	mov	r1, r3
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7ff fef8 	bl	8003d3e <xQueueGenericSend>
			xReturn = pdPASS;
 8003f4e:	2001      	movs	r0, #1
 8003f50:	e7e8      	b.n	8003f24 <xQueueGiveMutexRecursive+0x12>

08003f52 <xQueueGenericSendFromISR>:
{
 8003f52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003f56:	b190      	cbz	r0, 8003f7e <xQueueGenericSendFromISR+0x2c>
 8003f58:	460f      	mov	r7, r1
 8003f5a:	4616      	mov	r6, r2
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f60:	b1b1      	cbz	r1, 8003f90 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f62:	2c02      	cmp	r4, #2
 8003f64:	d120      	bne.n	8003fa8 <xQueueGenericSendFromISR+0x56>
 8003f66:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d01d      	beq.n	8003fa8 <xQueueGenericSendFromISR+0x56>
 8003f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGenericSendFromISR+0x2a>
 8003f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003f8e:	e7fe      	b.n	8003f8e <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f90:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0e5      	beq.n	8003f62 <xQueueGenericSendFromISR+0x10>
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fa8:	f001 fdaa 	bl	8005b00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fac:	f3ef 8811 	mrs	r8, BASEPRI
 8003fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fc0:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003fc2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d306      	bcc.n	8003fd6 <xQueueGenericSendFromISR+0x84>
 8003fc8:	2c02      	cmp	r4, #2
 8003fca:	d004      	beq.n	8003fd6 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8003fcc:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fce:	f388 8811 	msr	BASEPRI, r8
}
 8003fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fd6:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8003fda:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fde:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff fd24 	bl	8003a32 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003fea:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8003fee:	d006      	beq.n	8003ffe <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ff0:	f109 0301 	add.w	r3, r9, #1
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	e7e7      	b.n	8003fce <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ffe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004000:	b90b      	cbnz	r3, 8004006 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8004002:	2001      	movs	r0, #1
 8004004:	e7e3      	b.n	8003fce <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004006:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800400a:	f000 ff5d 	bl	8004ec8 <xTaskRemoveFromEventList>
 800400e:	b118      	cbz	r0, 8004018 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8004010:	b126      	cbz	r6, 800401c <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004012:	2001      	movs	r0, #1
 8004014:	6030      	str	r0, [r6, #0]
 8004016:	e7da      	b.n	8003fce <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8004018:	2001      	movs	r0, #1
 800401a:	e7d8      	b.n	8003fce <xQueueGenericSendFromISR+0x7c>
 800401c:	2001      	movs	r0, #1
 800401e:	e7d6      	b.n	8003fce <xQueueGenericSendFromISR+0x7c>

08004020 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004020:	b168      	cbz	r0, 800403e <xQueueGiveFromISR+0x1e>
{
 8004022:	b570      	push	{r4, r5, r6, lr}
 8004024:	460c      	mov	r4, r1
 8004026:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004028:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800402a:	b18b      	cbz	r3, 8004050 <xQueueGiveFromISR+0x30>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	e7fe      	b.n	800403c <xQueueGiveFromISR+0x1c>
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800404e:	e7fe      	b.n	800404e <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004050:	6803      	ldr	r3, [r0, #0]
 8004052:	b1eb      	cbz	r3, 8004090 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004054:	f001 fd54 	bl	8005b00 <vPortValidateInterruptPriority>
	__asm volatile
 8004058:	f3ef 8611 	mrs	r6, BASEPRI
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800406c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800406e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8004070:	4293      	cmp	r3, r2
 8004072:	d926      	bls.n	80040c2 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004074:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8004078:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800407a:	3201      	adds	r2, #1
 800407c:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004082:	d011      	beq.n	80040a8 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004084:	3301      	adds	r3, #1
 8004086:	b25b      	sxtb	r3, r3
 8004088:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800408c:	2001      	movs	r0, #1
 800408e:	e019      	b.n	80040c4 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004090:	6883      	ldr	r3, [r0, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0de      	beq.n	8004054 <xQueueGiveFromISR+0x34>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	e7fe      	b.n	80040a6 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80040aa:	b90b      	cbnz	r3, 80040b0 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80040ac:	2001      	movs	r0, #1
 80040ae:	e009      	b.n	80040c4 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040b0:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80040b4:	f000 ff08 	bl	8004ec8 <xTaskRemoveFromEventList>
 80040b8:	b138      	cbz	r0, 80040ca <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80040ba:	b144      	cbz	r4, 80040ce <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040bc:	2001      	movs	r0, #1
 80040be:	6020      	str	r0, [r4, #0]
 80040c0:	e000      	b.n	80040c4 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80040c2:	2000      	movs	r0, #0
	__asm volatile
 80040c4:	f386 8811 	msr	BASEPRI, r6
}
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80040ca:	2001      	movs	r0, #1
 80040cc:	e7fa      	b.n	80040c4 <xQueueGiveFromISR+0xa4>
 80040ce:	2001      	movs	r0, #1
 80040d0:	e7f8      	b.n	80040c4 <xQueueGiveFromISR+0xa4>

080040d2 <xQueueReceive>:
{
 80040d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d4:	b085      	sub	sp, #20
 80040d6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80040d8:	b190      	cbz	r0, 8004100 <xQueueReceive+0x2e>
 80040da:	460f      	mov	r7, r1
 80040dc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040de:	b1c1      	cbz	r1, 8004112 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e0:	f001 f856 	bl	8005190 <xTaskGetSchedulerState>
 80040e4:	4606      	mov	r6, r0
 80040e6:	bb00      	cbnz	r0, 800412a <xQueueReceive+0x58>
 80040e8:	9b01      	ldr	r3, [sp, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d05e      	beq.n	80041ac <xQueueReceive+0xda>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	e7fe      	b.n	80040fe <xQueueReceive+0x2c>
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004110:	e7fe      	b.n	8004110 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004112:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e3      	beq.n	80040e0 <xQueueReceive+0xe>
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	e7fe      	b.n	8004128 <xQueueReceive+0x56>
 800412a:	2600      	movs	r6, #0
 800412c:	e03e      	b.n	80041ac <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800412e:	4639      	mov	r1, r7
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff fcb9 	bl	8003aa8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004136:	3d01      	subs	r5, #1
 8004138:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413a:	6923      	ldr	r3, [r4, #16]
 800413c:	b923      	cbnz	r3, 8004148 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800413e:	f001 fbdb 	bl	80058f8 <vPortExitCritical>
				return pdPASS;
 8004142:	2001      	movs	r0, #1
}
 8004144:	b005      	add	sp, #20
 8004146:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004148:	f104 0010 	add.w	r0, r4, #16
 800414c:	f000 febc 	bl	8004ec8 <xTaskRemoveFromEventList>
 8004150:	2800      	cmp	r0, #0
 8004152:	d0f4      	beq.n	800413e <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8004154:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	e7e9      	b.n	800413e <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800416a:	f001 fbc5 	bl	80058f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800416e:	2000      	movs	r0, #0
 8004170:	e7e8      	b.n	8004144 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004172:	a802      	add	r0, sp, #8
 8004174:	f000 feee 	bl	8004f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004178:	2601      	movs	r6, #1
 800417a:	e021      	b.n	80041c0 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800417c:	2300      	movs	r3, #0
 800417e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004182:	e029      	b.n	80041d8 <xQueueReceive+0x106>
 8004184:	2300      	movs	r3, #0
 8004186:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800418a:	e02b      	b.n	80041e4 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff fc9d 	bl	8003acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004192:	f000 fd5d 	bl	8004c50 <xTaskResumeAll>
 8004196:	e009      	b.n	80041ac <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff fc97 	bl	8003acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800419e:	f000 fd57 	bl	8004c50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7ff fc38 	bl	8003a18 <prvIsQueueEmpty>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d13f      	bne.n	800422c <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80041ac:	f001 fb82 	bl	80058b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	d1bb      	bne.n	800412e <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80041b6:	9b01      	ldr	r3, [sp, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0d6      	beq.n	800416a <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80041bc:	2e00      	cmp	r6, #0
 80041be:	d0d8      	beq.n	8004172 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80041c0:	f001 fb9a 	bl	80058f8 <vPortExitCritical>
		vTaskSuspendAll();
 80041c4:	f000 fc9c 	bl	8004b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041c8:	f001 fb74 	bl	80058b4 <vPortEnterCritical>
 80041cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041d6:	d0d1      	beq.n	800417c <xQueueReceive+0xaa>
 80041d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e2:	d0cf      	beq.n	8004184 <xQueueReceive+0xb2>
 80041e4:	f001 fb88 	bl	80058f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041e8:	a901      	add	r1, sp, #4
 80041ea:	a802      	add	r0, sp, #8
 80041ec:	f000 febe 	bl	8004f6c <xTaskCheckForTimeOut>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d1d1      	bne.n	8004198 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff fc0f 	bl	8003a18 <prvIsQueueEmpty>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d0c6      	beq.n	800418c <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041fe:	9901      	ldr	r1, [sp, #4]
 8004200:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004204:	f000 fe2c 	bl	8004e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004208:	4620      	mov	r0, r4
 800420a:	f7ff fc5f 	bl	8003acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800420e:	f000 fd1f 	bl	8004c50 <xTaskResumeAll>
 8004212:	2800      	cmp	r0, #0
 8004214:	d1ca      	bne.n	80041ac <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8004216:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800421a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800421e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	e7bf      	b.n	80041ac <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800422c:	2000      	movs	r0, #0
 800422e:	e789      	b.n	8004144 <xQueueReceive+0x72>

08004230 <xQueueSemaphoreTake>:
{
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004236:	b158      	cbz	r0, 8004250 <xQueueSemaphoreTake+0x20>
 8004238:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800423a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800423c:	b18b      	cbz	r3, 8004262 <xQueueSemaphoreTake+0x32>
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	e7fe      	b.n	800424e <xQueueSemaphoreTake+0x1e>
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004260:	e7fe      	b.n	8004260 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004262:	f000 ff95 	bl	8005190 <xTaskGetSchedulerState>
 8004266:	4605      	mov	r5, r0
 8004268:	b950      	cbnz	r0, 8004280 <xQueueSemaphoreTake+0x50>
 800426a:	9b01      	ldr	r3, [sp, #4]
 800426c:	b15b      	cbz	r3, 8004286 <xQueueSemaphoreTake+0x56>
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	e7fe      	b.n	800427e <xQueueSemaphoreTake+0x4e>
 8004280:	2600      	movs	r6, #0
 8004282:	4635      	mov	r5, r6
 8004284:	e055      	b.n	8004332 <xQueueSemaphoreTake+0x102>
 8004286:	4606      	mov	r6, r0
 8004288:	e053      	b.n	8004332 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800428a:	3b01      	subs	r3, #1
 800428c:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	b13b      	cbz	r3, 80042a2 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	b94b      	cbnz	r3, 80042aa <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8004296:	f001 fb2f 	bl	80058f8 <vPortExitCritical>
				return pdPASS;
 800429a:	2601      	movs	r6, #1
}
 800429c:	4630      	mov	r0, r6
 800429e:	b004      	add	sp, #16
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042a2:	f001 f869 	bl	8005378 <pvTaskIncrementMutexHeldCount>
 80042a6:	60a0      	str	r0, [r4, #8]
 80042a8:	e7f3      	b.n	8004292 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042aa:	f104 0010 	add.w	r0, r4, #16
 80042ae:	f000 fe0b 	bl	8004ec8 <xTaskRemoveFromEventList>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d0ef      	beq.n	8004296 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80042b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80042ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	e7e4      	b.n	8004296 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042cc:	b146      	cbz	r6, 80042e0 <xQueueSemaphoreTake+0xb0>
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	e7fe      	b.n	80042de <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 80042e0:	f001 fb0a 	bl	80058f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80042e4:	e7da      	b.n	800429c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e6:	a802      	add	r0, sp, #8
 80042e8:	f000 fe34 	bl	8004f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ec:	2501      	movs	r5, #1
 80042ee:	e02a      	b.n	8004346 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 80042f0:	2300      	movs	r3, #0
 80042f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80042f6:	e032      	b.n	800435e <xQueueSemaphoreTake+0x12e>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80042fe:	e034      	b.n	800436a <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8004300:	f001 fad8 	bl	80058b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004304:	68a0      	ldr	r0, [r4, #8]
 8004306:	f000 ff53 	bl	80051b0 <xTaskPriorityInherit>
 800430a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800430c:	f001 faf4 	bl	80058f8 <vPortExitCritical>
 8004310:	e03b      	b.n	800438a <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8004312:	4620      	mov	r0, r4
 8004314:	f7ff fbda 	bl	8003acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004318:	f000 fc9a 	bl	8004c50 <xTaskResumeAll>
 800431c:	e009      	b.n	8004332 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff fbd4 	bl	8003acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004324:	f000 fc94 	bl	8004c50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004328:	4620      	mov	r0, r4
 800432a:	f7ff fb75 	bl	8003a18 <prvIsQueueEmpty>
 800432e:	2800      	cmp	r0, #0
 8004330:	d142      	bne.n	80043b8 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8004332:	f001 fabf 	bl	80058b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004336:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1a6      	bne.n	800428a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800433c:	9b01      	ldr	r3, [sp, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0c4      	beq.n	80042cc <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8004342:	2d00      	cmp	r5, #0
 8004344:	d0cf      	beq.n	80042e6 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8004346:	f001 fad7 	bl	80058f8 <vPortExitCritical>
		vTaskSuspendAll();
 800434a:	f000 fbd9 	bl	8004b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800434e:	f001 fab1 	bl	80058b4 <vPortEnterCritical>
 8004352:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435c:	d0c8      	beq.n	80042f0 <xQueueSemaphoreTake+0xc0>
 800435e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004362:	b25b      	sxtb	r3, r3
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004368:	d0c6      	beq.n	80042f8 <xQueueSemaphoreTake+0xc8>
 800436a:	f001 fac5 	bl	80058f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800436e:	a901      	add	r1, sp, #4
 8004370:	a802      	add	r0, sp, #8
 8004372:	f000 fdfb 	bl	8004f6c <xTaskCheckForTimeOut>
 8004376:	2800      	cmp	r0, #0
 8004378:	d1d1      	bne.n	800431e <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff fb4c 	bl	8003a18 <prvIsQueueEmpty>
 8004380:	2800      	cmp	r0, #0
 8004382:	d0c6      	beq.n	8004312 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ba      	beq.n	8004300 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800438a:	9901      	ldr	r1, [sp, #4]
 800438c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004390:	f000 fd66 	bl	8004e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff fb99 	bl	8003acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800439a:	f000 fc59 	bl	8004c50 <xTaskResumeAll>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1c7      	bne.n	8004332 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80043a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	e7bc      	b.n	8004332 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80043b8:	b90e      	cbnz	r6, 80043be <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80043ba:	2600      	movs	r6, #0
 80043bc:	e76e      	b.n	800429c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80043be:	f001 fa79 	bl	80058b4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff fb11 	bl	80039ea <prvGetDisinheritPriorityAfterTimeout>
 80043c8:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043ca:	68a0      	ldr	r0, [r4, #8]
 80043cc:	f000 ff84 	bl	80052d8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80043d0:	f001 fa92 	bl	80058f8 <vPortExitCritical>
 80043d4:	e7f1      	b.n	80043ba <xQueueSemaphoreTake+0x18a>

080043d6 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80043d6:	b180      	cbz	r0, 80043fa <xQueueTakeMutexRecursive+0x24>
	{
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	460c      	mov	r4, r1
 80043dc:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80043de:	6886      	ldr	r6, [r0, #8]
 80043e0:	f000 fed0 	bl	8005184 <xTaskGetCurrentTaskHandle>
 80043e4:	4286      	cmp	r6, r0
 80043e6:	d011      	beq.n	800440c <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80043e8:	4621      	mov	r1, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	f7ff ff20 	bl	8004230 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80043f0:	b180      	cbz	r0, 8004414 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80043f2:	68eb      	ldr	r3, [r5, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60eb      	str	r3, [r5, #12]
		return xReturn;
 80043f8:	e00c      	b.n	8004414 <xQueueTakeMutexRecursive+0x3e>
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800440a:	e7fe      	b.n	800440a <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800440c:	68eb      	ldr	r3, [r5, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8004412:	2001      	movs	r0, #1
	}
 8004414:	bd70      	pop	{r4, r5, r6, pc}

08004416 <xQueueReceiveFromISR>:
{
 8004416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800441a:	b1b0      	cbz	r0, 800444a <xQueueReceiveFromISR+0x34>
 800441c:	460d      	mov	r5, r1
 800441e:	4690      	mov	r8, r2
 8004420:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004422:	b1d9      	cbz	r1, 800445c <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004424:	f001 fb6c 	bl	8005b00 <vPortValidateInterruptPriority>
	__asm volatile
 8004428:	f3ef 8711 	mrs	r7, BASEPRI
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800443c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800443e:	b9ce      	cbnz	r6, 8004474 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8004440:	2000      	movs	r0, #0
	__asm volatile
 8004442:	f387 8811 	msr	BASEPRI, r7
}
 8004446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800445a:	e7fe      	b.n	800445a <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800445c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0e0      	beq.n	8004424 <xQueueReceiveFromISR+0xe>
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	e7fe      	b.n	8004472 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004474:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8004478:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800447c:	4629      	mov	r1, r5
 800447e:	4620      	mov	r0, r4
 8004480:	f7ff fb12 	bl	8003aa8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004484:	1e73      	subs	r3, r6, #1
 8004486:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8004488:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 800448c:	d006      	beq.n	800449c <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800448e:	f109 0301 	add.w	r3, r9, #1
 8004492:	b25b      	sxtb	r3, r3
 8004494:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8004498:	2001      	movs	r0, #1
 800449a:	e7d2      	b.n	8004442 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	b90b      	cbnz	r3, 80044a4 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80044a0:	2001      	movs	r0, #1
 80044a2:	e7ce      	b.n	8004442 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044a4:	f104 0010 	add.w	r0, r4, #16
 80044a8:	f000 fd0e 	bl	8004ec8 <xTaskRemoveFromEventList>
 80044ac:	b130      	cbz	r0, 80044bc <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80044ae:	f1b8 0f00 	cmp.w	r8, #0
 80044b2:	d005      	beq.n	80044c0 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044b4:	2001      	movs	r0, #1
 80044b6:	f8c8 0000 	str.w	r0, [r8]
 80044ba:	e7c2      	b.n	8004442 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80044bc:	2001      	movs	r0, #1
 80044be:	e7c0      	b.n	8004442 <xQueueReceiveFromISR+0x2c>
 80044c0:	2001      	movs	r0, #1
 80044c2:	e7be      	b.n	8004442 <xQueueReceiveFromISR+0x2c>

080044c4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b07      	cmp	r3, #7
 80044c8:	d80c      	bhi.n	80044e4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044ca:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <vQueueAddToRegistry+0x24>)
 80044cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80044d0:	b10a      	cbz	r2, 80044d6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044d2:	3301      	adds	r3, #1
 80044d4:	e7f7      	b.n	80044c6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044d6:	4a04      	ldr	r2, [pc, #16]	@ (80044e8 <vQueueAddToRegistry+0x24>)
 80044d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044dc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80044e0:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044e2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000dfc 	.word	0x20000dfc

080044ec <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b07      	cmp	r3, #7
 80044f0:	d80f      	bhi.n	8004512 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80044f2:	4a08      	ldr	r2, [pc, #32]	@ (8004514 <vQueueUnregisterQueue+0x28>)
 80044f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80044f8:	6852      	ldr	r2, [r2, #4]
 80044fa:	4282      	cmp	r2, r0
 80044fc:	d001      	beq.n	8004502 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044fe:	3301      	adds	r3, #1
 8004500:	e7f5      	b.n	80044ee <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004502:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <vQueueUnregisterQueue+0x28>)
 8004504:	2100      	movs	r1, #0
 8004506:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800450a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800450e:	6051      	str	r1, [r2, #4]
				break;
 8004510:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004512:	4770      	bx	lr
 8004514:	20000dfc 	.word	0x20000dfc

08004518 <vQueueDelete>:
	configASSERT( pxQueue );
 8004518:	b138      	cbz	r0, 800452a <vQueueDelete+0x12>
{
 800451a:	b510      	push	{r4, lr}
 800451c:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800451e:	f7ff ffe5 	bl	80044ec <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004522:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004526:	b14b      	cbz	r3, 800453c <vQueueDelete+0x24>
}
 8004528:	bd10      	pop	{r4, pc}
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800453a:	e7fe      	b.n	800453a <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800453c:	4620      	mov	r0, r4
 800453e:	f001 fbf3 	bl	8005d28 <vPortFree>
}
 8004542:	e7f1      	b.n	8004528 <vQueueDelete+0x10>

08004544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4604      	mov	r4, r0
 8004548:	460d      	mov	r5, r1
 800454a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800454c:	f001 f9b2 	bl	80058b4 <vPortEnterCritical>
 8004550:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004554:	b25b      	sxtb	r3, r3
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800455a:	d00d      	beq.n	8004578 <vQueueWaitForMessageRestricted+0x34>
 800455c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004560:	b25b      	sxtb	r3, r3
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004566:	d00b      	beq.n	8004580 <vQueueWaitForMessageRestricted+0x3c>
 8004568:	f001 f9c6 	bl	80058f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800456c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800456e:	b15b      	cbz	r3, 8004588 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff faab 	bl	8003acc <prvUnlockQueue>
	}
 8004576:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8004578:	2300      	movs	r3, #0
 800457a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800457e:	e7ed      	b.n	800455c <vQueueWaitForMessageRestricted+0x18>
 8004580:	2300      	movs	r3, #0
 8004582:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004586:	e7ef      	b.n	8004568 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004588:	4632      	mov	r2, r6
 800458a:	4629      	mov	r1, r5
 800458c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004590:	f000 fc7e 	bl	8004e90 <vTaskPlaceOnEventListRestricted>
 8004594:	e7ec      	b.n	8004570 <vQueueWaitForMessageRestricted+0x2c>

08004596 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8004596:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004598:	e001      	b.n	800459e <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800459a:	3001      	adds	r0, #1
			ulCount++;
 800459c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800459e:	7802      	ldrb	r2, [r0, #0]
 80045a0:	2aa5      	cmp	r2, #165	@ 0xa5
 80045a2:	d0fa      	beq.n	800459a <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 80045a4:	f3c3 008f 	ubfx	r0, r3, #2, #16
 80045a8:	4770      	bx	lr
	...

080045ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <prvResetNextTaskUnblockTime+0x24>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b923      	cbnz	r3, 80045be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045b4:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <prvResetNextTaskUnblockTime+0x28>)
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045be:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <prvResetNextTaskUnblockTime+0x24>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	4b02      	ldr	r3, [pc, #8]	@ (80045d4 <prvResetNextTaskUnblockTime+0x28>)
 80045ca:	601a      	str	r2, [r3, #0]
	}
}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000eb4 	.word	0x20000eb4
 80045d4:	20000e4c 	.word	0x20000e4c

080045d8 <prvInitialiseNewTask>:
{
 80045d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	4680      	mov	r8, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4617      	mov	r7, r2
 80045e2:	4699      	mov	r9, r3
 80045e4:	9e08      	ldr	r6, [sp, #32]
 80045e6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80045ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045ec:	0092      	lsls	r2, r2, #2
 80045ee:	21a5      	movs	r1, #165	@ 0xa5
 80045f0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80045f2:	f002 fa83 	bl	8006afc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80045f8:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 80045fc:	3a01      	subs	r2, #1
 80045fe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004602:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004606:	6427      	str	r7, [r4, #64]	@ 0x40
	if( pcName != NULL )
 8004608:	2d00      	cmp	r5, #0
 800460a:	d043      	beq.n	8004694 <prvInitialiseNewTask+0xbc>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460c:	f04f 0c00 	mov.w	ip, #0
 8004610:	f1bc 0f0b 	cmp.w	ip, #11
 8004614:	d809      	bhi.n	800462a <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004616:	f815 300c 	ldrb.w	r3, [r5, ip]
 800461a:	eb04 020c 	add.w	r2, r4, ip
 800461e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004622:	b113      	cbz	r3, 800462a <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004624:	f10c 0c01 	add.w	ip, ip, #1
 8004628:	e7f2      	b.n	8004610 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800462a:	2300      	movs	r3, #0
 800462c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004630:	2e37      	cmp	r6, #55	@ 0x37
 8004632:	d900      	bls.n	8004636 <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004634:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004636:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004638:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800463a:	2500      	movs	r5, #0
 800463c:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800463e:	1d20      	adds	r0, r4, #4
 8004640:	f7ff f999 	bl	8003976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004644:	f104 0018 	add.w	r0, r4, #24
 8004648:	f7ff f995 	bl	8003976 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800464c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8004652:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004654:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004656:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8004658:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800465c:	f884 50a8 	strb.w	r5, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004660:	224c      	movs	r2, #76	@ 0x4c
 8004662:	4629      	mov	r1, r5
 8004664:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004668:	f002 fa48 	bl	8006afc <memset>
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <prvInitialiseNewTask+0xc4>)
 800466e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004670:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004674:	6622      	str	r2, [r4, #96]	@ 0x60
 8004676:	33d0      	adds	r3, #208	@ 0xd0
 8004678:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800467a:	464a      	mov	r2, r9
 800467c:	4641      	mov	r1, r8
 800467e:	4638      	mov	r0, r7
 8004680:	f001 f8f0 	bl	8005864 <pxPortInitialiseStack>
 8004684:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004686:	f1ba 0f00 	cmp.w	sl, #0
 800468a:	d001      	beq.n	8004690 <prvInitialiseNewTask+0xb8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800468c:	f8ca 4000 	str.w	r4, [sl]
}
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800469a:	e7c9      	b.n	8004630 <prvInitialiseNewTask+0x58>
 800469c:	20001498 	.word	0x20001498

080046a0 <prvInitialiseTaskLists>:
{
 80046a0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a2:	2400      	movs	r4, #0
 80046a4:	e007      	b.n	80046b6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046a6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80046aa:	0093      	lsls	r3, r2, #2
 80046ac:	480e      	ldr	r0, [pc, #56]	@ (80046e8 <prvInitialiseTaskLists+0x48>)
 80046ae:	4418      	add	r0, r3
 80046b0:	f7ff f956 	bl	8003960 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b4:	3401      	adds	r4, #1
 80046b6:	2c37      	cmp	r4, #55	@ 0x37
 80046b8:	d9f5      	bls.n	80046a6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80046ba:	4d0c      	ldr	r5, [pc, #48]	@ (80046ec <prvInitialiseTaskLists+0x4c>)
 80046bc:	4628      	mov	r0, r5
 80046be:	f7ff f94f 	bl	8003960 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046c2:	4c0b      	ldr	r4, [pc, #44]	@ (80046f0 <prvInitialiseTaskLists+0x50>)
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7ff f94b 	bl	8003960 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046ca:	480a      	ldr	r0, [pc, #40]	@ (80046f4 <prvInitialiseTaskLists+0x54>)
 80046cc:	f7ff f948 	bl	8003960 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80046d0:	4809      	ldr	r0, [pc, #36]	@ (80046f8 <prvInitialiseTaskLists+0x58>)
 80046d2:	f7ff f945 	bl	8003960 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80046d6:	4809      	ldr	r0, [pc, #36]	@ (80046fc <prvInitialiseTaskLists+0x5c>)
 80046d8:	f7ff f942 	bl	8003960 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80046dc:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <prvInitialiseTaskLists+0x60>)
 80046de:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046e0:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <prvInitialiseTaskLists+0x64>)
 80046e2:	601c      	str	r4, [r3, #0]
}
 80046e4:	bd38      	pop	{r3, r4, r5, pc}
 80046e6:	bf00      	nop
 80046e8:	20000ee0 	.word	0x20000ee0
 80046ec:	20000ecc 	.word	0x20000ecc
 80046f0:	20000eb8 	.word	0x20000eb8
 80046f4:	20000e9c 	.word	0x20000e9c
 80046f8:	20000e88 	.word	0x20000e88
 80046fc:	20000e70 	.word	0x20000e70
 8004700:	20000eb4 	.word	0x20000eb4
 8004704:	20000eb0 	.word	0x20000eb0

08004708 <prvAddNewTaskToReadyList>:
{
 8004708:	b510      	push	{r4, lr}
 800470a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800470c:	f001 f8d2 	bl	80058b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004710:	4a22      	ldr	r2, [pc, #136]	@ (800479c <prvAddNewTaskToReadyList+0x94>)
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004718:	4b21      	ldr	r3, [pc, #132]	@ (80047a0 <prvAddNewTaskToReadyList+0x98>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	b15b      	cbz	r3, 8004736 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800471e:	4b21      	ldr	r3, [pc, #132]	@ (80047a4 <prvAddNewTaskToReadyList+0x9c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	b96b      	cbnz	r3, 8004740 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004724:	4b1e      	ldr	r3, [pc, #120]	@ (80047a0 <prvAddNewTaskToReadyList+0x98>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800472c:	429a      	cmp	r2, r3
 800472e:	d807      	bhi.n	8004740 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004730:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <prvAddNewTaskToReadyList+0x98>)
 8004732:	601c      	str	r4, [r3, #0]
 8004734:	e004      	b.n	8004740 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004736:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <prvAddNewTaskToReadyList+0x98>)
 8004738:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d029      	beq.n	8004794 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <prvAddNewTaskToReadyList+0xa0>)
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004748:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800474a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <prvAddNewTaskToReadyList+0xa4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4298      	cmp	r0, r3
 8004752:	d901      	bls.n	8004758 <prvAddNewTaskToReadyList+0x50>
 8004754:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <prvAddNewTaskToReadyList+0xa4>)
 8004756:	6018      	str	r0, [r3, #0]
 8004758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800475c:	1d21      	adds	r1, r4, #4
 800475e:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <prvAddNewTaskToReadyList+0xa8>)
 8004760:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004764:	f7ff f90a 	bl	800397c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004768:	f001 f8c6 	bl	80058f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800476c:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <prvAddNewTaskToReadyList+0x9c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	b17b      	cbz	r3, 8004792 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004772:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <prvAddNewTaskToReadyList+0x98>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800477a:	429a      	cmp	r2, r3
 800477c:	d209      	bcs.n	8004792 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800477e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	f3bf 8f6f 	isb	sy
}
 8004792:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004794:	f7ff ff84 	bl	80046a0 <prvInitialiseTaskLists>
 8004798:	e7d2      	b.n	8004740 <prvAddNewTaskToReadyList+0x38>
 800479a:	bf00      	nop
 800479c:	20000e6c 	.word	0x20000e6c
 80047a0:	20001340 	.word	0x20001340
 80047a4:	20000e60 	.word	0x20000e60
 80047a8:	20000e50 	.word	0x20000e50
 80047ac:	20000e64 	.word	0x20000e64
 80047b0:	20000ee0 	.word	0x20000ee0

080047b4 <prvDeleteTCB>:
	{
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047b8:	3058      	adds	r0, #88	@ 0x58
 80047ba:	f002 f9bb 	bl	8006b34 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047be:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 80047c2:	b163      	cbz	r3, 80047de <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d011      	beq.n	80047ec <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d00e      	beq.n	80047ea <prvDeleteTCB+0x36>
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	e7fe      	b.n	80047dc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80047de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80047e0:	f001 faa2 	bl	8005d28 <vPortFree>
				vPortFree( pxTCB );
 80047e4:	4620      	mov	r0, r4
 80047e6:	f001 fa9f 	bl	8005d28 <vPortFree>
	}
 80047ea:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80047ec:	4620      	mov	r0, r4
 80047ee:	f001 fa9b 	bl	8005d28 <vPortFree>
 80047f2:	e7fa      	b.n	80047ea <prvDeleteTCB+0x36>

080047f4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <prvCheckTasksWaitingTermination+0x40>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b1d3      	cbz	r3, 8004830 <prvCheckTasksWaitingTermination+0x3c>
{
 80047fa:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80047fc:	f001 f85a 	bl	80058b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004800:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <prvCheckTasksWaitingTermination+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004806:	1d20      	adds	r0, r4, #4
 8004808:	f7ff f8dc 	bl	80039c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800480c:	4a0b      	ldr	r2, [pc, #44]	@ (800483c <prvCheckTasksWaitingTermination+0x48>)
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	3b01      	subs	r3, #1
 8004812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004814:	4a07      	ldr	r2, [pc, #28]	@ (8004834 <prvCheckTasksWaitingTermination+0x40>)
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800481c:	f001 f86c 	bl	80058f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff ffc7 	bl	80047b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004826:	4b03      	ldr	r3, [pc, #12]	@ (8004834 <prvCheckTasksWaitingTermination+0x40>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <prvCheckTasksWaitingTermination+0x8>
}
 800482e:	bd10      	pop	{r4, pc}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000e84 	.word	0x20000e84
 8004838:	20000e88 	.word	0x20000e88
 800483c:	20000e6c 	.word	0x20000e6c

08004840 <prvIdleTask>:
{
 8004840:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004842:	f7ff ffd7 	bl	80047f4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <prvIdleTask+0x24>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d9f9      	bls.n	8004842 <prvIdleTask+0x2>
				taskYIELD();
 800484e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004856:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	e7ee      	b.n	8004842 <prvIdleTask+0x2>
 8004864:	20000ee0 	.word	0x20000ee0

08004868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800486e:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <prvAddCurrentTaskToDelayedList+0x64>)
 8004870:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004872:	4b17      	ldr	r3, [pc, #92]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	3004      	adds	r0, #4
 8004878:	f7ff f8a4 	bl	80039c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800487c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8004880:	d00d      	beq.n	800489e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004882:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004884:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800488a:	42a6      	cmp	r6, r4
 800488c:	d910      	bls.n	80048b0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800488e:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	3104      	adds	r1, #4
 8004898:	f7ff f87b 	bl	8003992 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800489c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800489e:	2d00      	cmp	r5, #0
 80048a0:	d0ef      	beq.n	8004882 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	3104      	adds	r1, #4
 80048a8:	480b      	ldr	r0, [pc, #44]	@ (80048d8 <prvAddCurrentTaskToDelayedList+0x70>)
 80048aa:	f7ff f867 	bl	800397c <vListInsertEnd>
 80048ae:	e7f5      	b.n	800489c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <prvAddCurrentTaskToDelayedList+0x74>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	3104      	adds	r1, #4
 80048ba:	f7ff f86a 	bl	8003992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048be:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <prvAddCurrentTaskToDelayedList+0x78>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	d9ea      	bls.n	800489c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80048c6:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <prvAddCurrentTaskToDelayedList+0x78>)
 80048c8:	601c      	str	r4, [r3, #0]
}
 80048ca:	e7e7      	b.n	800489c <prvAddCurrentTaskToDelayedList+0x34>
 80048cc:	20000e68 	.word	0x20000e68
 80048d0:	20001340 	.word	0x20001340
 80048d4:	20000eb0 	.word	0x20000eb0
 80048d8:	20000e70 	.word	0x20000e70
 80048dc:	20000eb4 	.word	0x20000eb4
 80048e0:	20000e4c 	.word	0x20000e4c

080048e4 <xTaskCreateStatic>:
	{
 80048e4:	b530      	push	{r4, r5, lr}
 80048e6:	b087      	sub	sp, #28
 80048e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80048ea:	b17c      	cbz	r4, 800490c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048ec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80048ee:	b1b5      	cbz	r5, 800491e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80048f0:	25ac      	movs	r5, #172	@ 0xac
 80048f2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048f4:	9d04      	ldr	r5, [sp, #16]
 80048f6:	2dac      	cmp	r5, #172	@ 0xac
 80048f8:	d01a      	beq.n	8004930 <xTaskCreateStatic+0x4c>
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	e7fe      	b.n	800490a <xTaskCreateStatic+0x26>
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800491c:	e7fe      	b.n	800491c <xTaskCreateStatic+0x38>
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800492e:	e7fe      	b.n	800492e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004930:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004932:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004934:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004936:	2402      	movs	r4, #2
 8004938:	f885 40a9 	strb.w	r4, [r5, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800493c:	2400      	movs	r4, #0
 800493e:	9403      	str	r4, [sp, #12]
 8004940:	9502      	str	r5, [sp, #8]
 8004942:	ac05      	add	r4, sp, #20
 8004944:	9401      	str	r4, [sp, #4]
 8004946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004948:	9400      	str	r4, [sp, #0]
 800494a:	f7ff fe45 	bl	80045d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800494e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004950:	f7ff feda 	bl	8004708 <prvAddNewTaskToReadyList>
	}
 8004954:	9805      	ldr	r0, [sp, #20]
 8004956:	b007      	add	sp, #28
 8004958:	bd30      	pop	{r4, r5, pc}

0800495a <xTaskCreate>:
	{
 800495a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800495e:	b085      	sub	sp, #20
 8004960:	4607      	mov	r7, r0
 8004962:	4688      	mov	r8, r1
 8004964:	4614      	mov	r4, r2
 8004966:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004968:	0090      	lsls	r0, r2, #2
 800496a:	f001 f95b 	bl	8005c24 <pvPortMalloc>
			if( pxStack != NULL )
 800496e:	b308      	cbz	r0, 80049b4 <xTaskCreate+0x5a>
 8004970:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004972:	20ac      	movs	r0, #172	@ 0xac
 8004974:	f001 f956 	bl	8005c24 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004978:	4605      	mov	r5, r0
 800497a:	b1a8      	cbz	r0, 80049a8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800497c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004980:	2300      	movs	r3, #0
 8004982:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	9002      	str	r0, [sp, #8]
 800498a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4633      	mov	r3, r6
 8004994:	4622      	mov	r2, r4
 8004996:	4641      	mov	r1, r8
 8004998:	4638      	mov	r0, r7
 800499a:	f7ff fe1d 	bl	80045d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff feb2 	bl	8004708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049a4:	2001      	movs	r0, #1
 80049a6:	e007      	b.n	80049b8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80049a8:	4648      	mov	r0, r9
 80049aa:	f001 f9bd 	bl	8005d28 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049b2:	e001      	b.n	80049b8 <xTaskCreate+0x5e>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80049b8:	b005      	add	sp, #20
 80049ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080049c0 <eTaskGetState>:
	{
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 80049c2:	b1d0      	cbz	r0, 80049fa <eTaskGetState+0x3a>
 80049c4:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 80049c6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a3c <eTaskGetState+0x7c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4283      	cmp	r3, r0
 80049cc:	d02d      	beq.n	8004a2a <eTaskGetState+0x6a>
			taskENTER_CRITICAL();
 80049ce:	f000 ff71 	bl	80058b4 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80049d2:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 80049d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a40 <eTaskGetState+0x80>)
 80049d6:	681e      	ldr	r6, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80049d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a44 <eTaskGetState+0x84>)
 80049da:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
 80049dc:	f000 ff8c 	bl	80058f8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80049e0:	42b5      	cmp	r5, r6
 80049e2:	d024      	beq.n	8004a2e <eTaskGetState+0x6e>
 80049e4:	42bd      	cmp	r5, r7
 80049e6:	d024      	beq.n	8004a32 <eTaskGetState+0x72>
				else if( pxStateList == &xSuspendedTaskList )
 80049e8:	4b17      	ldr	r3, [pc, #92]	@ (8004a48 <eTaskGetState+0x88>)
 80049ea:	429d      	cmp	r5, r3
 80049ec:	d00e      	beq.n	8004a0c <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80049ee:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <eTaskGetState+0x8c>)
 80049f0:	429d      	cmp	r5, r3
 80049f2:	d020      	beq.n	8004a36 <eTaskGetState+0x76>
 80049f4:	b1bd      	cbz	r5, 8004a26 <eTaskGetState+0x66>
				eReturn = eReady;
 80049f6:	2001      	movs	r0, #1
 80049f8:	e018      	b.n	8004a2c <eTaskGetState+0x6c>
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
 8004a0a:	e7fe      	b.n	8004a0a <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004a0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a0e:	b10b      	cbz	r3, 8004a14 <eTaskGetState+0x54>
						eReturn = eBlocked;
 8004a10:	2002      	movs	r0, #2
 8004a12:	e00b      	b.n	8004a2c <eTaskGetState+0x6c>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004a14:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <eTaskGetState+0x62>
								eReturn = eSuspended;
 8004a1e:	2003      	movs	r0, #3
 8004a20:	e004      	b.n	8004a2c <eTaskGetState+0x6c>
								eReturn = eBlocked;
 8004a22:	2002      	movs	r0, #2
 8004a24:	e002      	b.n	8004a2c <eTaskGetState+0x6c>
					eReturn = eDeleted;
 8004a26:	2004      	movs	r0, #4
 8004a28:	e000      	b.n	8004a2c <eTaskGetState+0x6c>
			eReturn = eRunning;
 8004a2a:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 8004a2e:	2002      	movs	r0, #2
 8004a30:	e7fc      	b.n	8004a2c <eTaskGetState+0x6c>
 8004a32:	2002      	movs	r0, #2
 8004a34:	e7fa      	b.n	8004a2c <eTaskGetState+0x6c>
					eReturn = eDeleted;
 8004a36:	2004      	movs	r0, #4
 8004a38:	e7f8      	b.n	8004a2c <eTaskGetState+0x6c>
 8004a3a:	bf00      	nop
 8004a3c:	20001340 	.word	0x20001340
 8004a40:	20000eb4 	.word	0x20000eb4
 8004a44:	20000eb0 	.word	0x20000eb0
 8004a48:	20000e70 	.word	0x20000e70
 8004a4c:	20000e88 	.word	0x20000e88

08004a50 <vTaskStartScheduler>:
{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a54:	2400      	movs	r4, #0
 8004a56:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a58:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a5a:	aa07      	add	r2, sp, #28
 8004a5c:	a906      	add	r1, sp, #24
 8004a5e:	a805      	add	r0, sp, #20
 8004a60:	f7fe ff66 	bl	8003930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a64:	9b05      	ldr	r3, [sp, #20]
 8004a66:	9302      	str	r3, [sp, #8]
 8004a68:	9b06      	ldr	r3, [sp, #24]
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	9400      	str	r4, [sp, #0]
 8004a6e:	4623      	mov	r3, r4
 8004a70:	9a07      	ldr	r2, [sp, #28]
 8004a72:	491b      	ldr	r1, [pc, #108]	@ (8004ae0 <vTaskStartScheduler+0x90>)
 8004a74:	481b      	ldr	r0, [pc, #108]	@ (8004ae4 <vTaskStartScheduler+0x94>)
 8004a76:	f7ff ff35 	bl	80048e4 <xTaskCreateStatic>
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <vTaskStartScheduler+0x98>)
 8004a7c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8004a7e:	b1f8      	cbz	r0, 8004ac0 <vTaskStartScheduler+0x70>
			xReturn = xTimerCreateTimerTask();
 8004a80:	f000 fcf4 	bl	800546c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004a84:	2801      	cmp	r0, #1
 8004a86:	d11c      	bne.n	8004ac2 <vTaskStartScheduler+0x72>
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <vTaskStartScheduler+0x9c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3358      	adds	r3, #88	@ 0x58
 8004a9e:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <vTaskStartScheduler+0xa0>)
 8004aa0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa2:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <vTaskStartScheduler+0xa4>)
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004aa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <vTaskStartScheduler+0xa8>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <vTaskStartScheduler+0xac>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004ab6:	f7fc fc31 	bl	800131c <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8004aba:	f000 ff95 	bl	80059e8 <xPortStartScheduler>
 8004abe:	e003      	b.n	8004ac8 <vTaskStartScheduler+0x78>
			xReturn = pdFAIL;
 8004ac0:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ac2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8004ac6:	d001      	beq.n	8004acc <vTaskStartScheduler+0x7c>
}
 8004ac8:	b008      	add	sp, #32
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004adc:	e7fe      	b.n	8004adc <vTaskStartScheduler+0x8c>
 8004ade:	bf00      	nop
 8004ae0:	08008bc4 	.word	0x08008bc4
 8004ae4:	08004841 	.word	0x08004841
 8004ae8:	20000e48 	.word	0x20000e48
 8004aec:	20001340 	.word	0x20001340
 8004af0:	2000003c 	.word	0x2000003c
 8004af4:	20000e4c 	.word	0x20000e4c
 8004af8:	20000e60 	.word	0x20000e60
 8004afc:	20000e68 	.word	0x20000e68

08004b00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004b00:	4a02      	ldr	r2, [pc, #8]	@ (8004b0c <vTaskSuspendAll+0xc>)
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000e44 	.word	0x20000e44

08004b10 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004b10:	4b01      	ldr	r3, [pc, #4]	@ (8004b18 <xTaskGetTickCount+0x8>)
 8004b12:	6818      	ldr	r0, [r3, #0]
}
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000e68 	.word	0x20000e68

08004b1c <xTaskGetTickCountFromISR>:
{
 8004b1c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b1e:	f000 ffef 	bl	8005b00 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004b22:	4b01      	ldr	r3, [pc, #4]	@ (8004b28 <xTaskGetTickCountFromISR+0xc>)
 8004b24:	6818      	ldr	r0, [r3, #0]
}
 8004b26:	bd08      	pop	{r3, pc}
 8004b28:	20000e68 	.word	0x20000e68

08004b2c <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
 8004b2c:	4b01      	ldr	r3, [pc, #4]	@ (8004b34 <uxTaskGetNumberOfTasks+0x8>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000e6c 	.word	0x20000e6c

08004b38 <xTaskIncrementTick>:
{
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c24 <xTaskIncrementTick+0xec>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d169      	bne.n	8004c16 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b42:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <xTaskIncrementTick+0xf0>)
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004b48:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b4a:	b9c5      	cbnz	r5, 8004b7e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004b4c:	4b37      	ldr	r3, [pc, #220]	@ (8004c2c <xTaskIncrementTick+0xf4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b143      	cbz	r3, 8004b66 <xTaskIncrementTick+0x2e>
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	e7fe      	b.n	8004b64 <xTaskIncrementTick+0x2c>
 8004b66:	4a31      	ldr	r2, [pc, #196]	@ (8004c2c <xTaskIncrementTick+0xf4>)
 8004b68:	6811      	ldr	r1, [r2, #0]
 8004b6a:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <xTaskIncrementTick+0xf8>)
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	6010      	str	r0, [r2, #0]
 8004b70:	6019      	str	r1, [r3, #0]
 8004b72:	4a30      	ldr	r2, [pc, #192]	@ (8004c34 <xTaskIncrementTick+0xfc>)
 8004b74:	6813      	ldr	r3, [r2, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	f7ff fd17 	bl	80045ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004c38 <xTaskIncrementTick+0x100>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	42ab      	cmp	r3, r5
 8004b84:	d93d      	bls.n	8004c02 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8004b86:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b88:	4b2c      	ldr	r3, [pc, #176]	@ (8004c3c <xTaskIncrementTick+0x104>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	4b2a      	ldr	r3, [pc, #168]	@ (8004c40 <xTaskIncrementTick+0x108>)
 8004b96:	589b      	ldr	r3, [r3, r2]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d900      	bls.n	8004b9e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8004b9c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8004b9e:	4b29      	ldr	r3, [pc, #164]	@ (8004c44 <xTaskIncrementTick+0x10c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d03c      	beq.n	8004c20 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8004ba6:	2701      	movs	r7, #1
	return xSwitchRequired;
 8004ba8:	e03a      	b.n	8004c20 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8004baa:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bac:	4b1f      	ldr	r3, [pc, #124]	@ (8004c2c <xTaskIncrementTick+0xf4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	b343      	cbz	r3, 8004c06 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <xTaskIncrementTick+0xf4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bbc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8004bbe:	429d      	cmp	r5, r3
 8004bc0:	d326      	bcc.n	8004c10 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc2:	1d26      	adds	r6, r4, #4
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f7fe fefd 	bl	80039c4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004bcc:	b11b      	cbz	r3, 8004bd6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bce:	f104 0018 	add.w	r0, r4, #24
 8004bd2:	f7fe fef7 	bl	80039c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <xTaskIncrementTick+0x110>)
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <xTaskIncrementTick+0xac>
 8004be0:	4a19      	ldr	r2, [pc, #100]	@ (8004c48 <xTaskIncrementTick+0x110>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004be8:	009a      	lsls	r2, r3, #2
 8004bea:	4631      	mov	r1, r6
 8004bec:	4814      	ldr	r0, [pc, #80]	@ (8004c40 <xTaskIncrementTick+0x108>)
 8004bee:	4410      	add	r0, r2
 8004bf0:	f7fe fec4 	bl	800397c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bf4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004bf6:	4b11      	ldr	r3, [pc, #68]	@ (8004c3c <xTaskIncrementTick+0x104>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d2d4      	bcs.n	8004baa <xTaskIncrementTick+0x72>
 8004c00:	e7d4      	b.n	8004bac <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8004c02:	2700      	movs	r7, #0
 8004c04:	e7d2      	b.n	8004bac <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c06:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <xTaskIncrementTick+0x100>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c0c:	601a      	str	r2, [r3, #0]
					break;
 8004c0e:	e7bb      	b.n	8004b88 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004c10:	4a09      	ldr	r2, [pc, #36]	@ (8004c38 <xTaskIncrementTick+0x100>)
 8004c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c14:	e7b8      	b.n	8004b88 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8004c16:	4a0d      	ldr	r2, [pc, #52]	@ (8004c4c <xTaskIncrementTick+0x114>)
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004c1e:	2700      	movs	r7, #0
}
 8004c20:	4638      	mov	r0, r7
 8004c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c24:	20000e44 	.word	0x20000e44
 8004c28:	20000e68 	.word	0x20000e68
 8004c2c:	20000eb4 	.word	0x20000eb4
 8004c30:	20000eb0 	.word	0x20000eb0
 8004c34:	20000e54 	.word	0x20000e54
 8004c38:	20000e4c 	.word	0x20000e4c
 8004c3c:	20001340 	.word	0x20001340
 8004c40:	20000ee0 	.word	0x20000ee0
 8004c44:	20000e58 	.word	0x20000e58
 8004c48:	20000e64 	.word	0x20000e64
 8004c4c:	20000e5c 	.word	0x20000e5c

08004c50 <xTaskResumeAll>:
{
 8004c50:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004c52:	4b35      	ldr	r3, [pc, #212]	@ (8004d28 <xTaskResumeAll+0xd8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b943      	cbnz	r3, 8004c6a <xTaskResumeAll+0x1a>
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	e7fe      	b.n	8004c68 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8004c6a:	f000 fe23 	bl	80058b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d28 <xTaskResumeAll+0xd8>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	3a01      	subs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d14f      	bne.n	8004d1c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d2c <xTaskResumeAll+0xdc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	b90b      	cbnz	r3, 8004c86 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004c82:	2400      	movs	r4, #0
 8004c84:	e04b      	b.n	8004d1e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8004c86:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c88:	4b29      	ldr	r3, [pc, #164]	@ (8004d30 <xTaskResumeAll+0xe0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	b31b      	cbz	r3, 8004cd6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8e:	4b28      	ldr	r3, [pc, #160]	@ (8004d30 <xTaskResumeAll+0xe0>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c94:	f104 0018 	add.w	r0, r4, #24
 8004c98:	f7fe fe94 	bl	80039c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c9c:	1d25      	adds	r5, r4, #4
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f7fe fe90 	bl	80039c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ca4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004ca6:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <xTaskResumeAll+0xe4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4298      	cmp	r0, r3
 8004cac:	d901      	bls.n	8004cb2 <xTaskResumeAll+0x62>
 8004cae:	4b21      	ldr	r3, [pc, #132]	@ (8004d34 <xTaskResumeAll+0xe4>)
 8004cb0:	6018      	str	r0, [r3, #0]
 8004cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d38 <xTaskResumeAll+0xe8>)
 8004cba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004cbe:	f7fe fe5d 	bl	800397c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d3c <xTaskResumeAll+0xec>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3dc      	bcc.n	8004c88 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8004cce:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <xTaskResumeAll+0xf0>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e7d8      	b.n	8004c88 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8004cd6:	b10c      	cbz	r4, 8004cdc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8004cd8:	f7ff fc68 	bl	80045ac <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cdc:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <xTaskResumeAll+0xf4>)
 8004cde:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004ce0:	b984      	cbnz	r4, 8004d04 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8004ce2:	4b17      	ldr	r3, [pc, #92]	@ (8004d40 <xTaskResumeAll+0xf0>)
 8004ce4:	681c      	ldr	r4, [r3, #0]
 8004ce6:	b1d4      	cbz	r4, 8004d1e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8004ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004cfc:	2401      	movs	r4, #1
 8004cfe:	e00e      	b.n	8004d1e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d00:	3c01      	subs	r4, #1
 8004d02:	d007      	beq.n	8004d14 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8004d04:	f7ff ff18 	bl	8004b38 <xTaskIncrementTick>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d0f9      	beq.n	8004d00 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <xTaskResumeAll+0xf0>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e7f5      	b.n	8004d00 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <xTaskResumeAll+0xf4>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e7e2      	b.n	8004ce2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8004d1c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004d1e:	f000 fdeb 	bl	80058f8 <vPortExitCritical>
}
 8004d22:	4620      	mov	r0, r4
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
 8004d26:	bf00      	nop
 8004d28:	20000e44 	.word	0x20000e44
 8004d2c:	20000e6c 	.word	0x20000e6c
 8004d30:	20000e9c 	.word	0x20000e9c
 8004d34:	20000e64 	.word	0x20000e64
 8004d38:	20000ee0 	.word	0x20000ee0
 8004d3c:	20001340 	.word	0x20001340
 8004d40:	20000e58 	.word	0x20000e58
 8004d44:	20000e5c 	.word	0x20000e5c

08004d48 <vTaskDelay>:
	{
 8004d48:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d4a:	b1a8      	cbz	r0, 8004d78 <vTaskDelay+0x30>
 8004d4c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <vTaskDelay+0x48>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	b143      	cbz	r3, 8004d66 <vTaskDelay+0x1e>
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	e7fe      	b.n	8004d64 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004d66:	f7ff fecb 	bl	8004b00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7ff fd7b 	bl	8004868 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004d72:	f7ff ff6d 	bl	8004c50 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004d76:	b948      	cbnz	r0, 8004d8c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8004d78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
	}
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000e44 	.word	0x20000e44

08004d94 <vTaskSwitchContext>:
{
 8004d94:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d96:	4b2a      	ldr	r3, [pc, #168]	@ (8004e40 <vTaskSwitchContext+0xac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b11b      	cbz	r3, 8004da4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004d9c:	4b29      	ldr	r3, [pc, #164]	@ (8004e44 <vTaskSwitchContext+0xb0>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
}
 8004da2:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 8004da4:	4b27      	ldr	r3, [pc, #156]	@ (8004e44 <vTaskSwitchContext+0xb0>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004daa:	f7fc fac3 	bl	8001334 <getRunTimeCounterValue>
 8004dae:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <vTaskSwitchContext+0xb4>)
 8004db0:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004db2:	4b26      	ldr	r3, [pc, #152]	@ (8004e4c <vTaskSwitchContext+0xb8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4298      	cmp	r0, r3
 8004db8:	d905      	bls.n	8004dc6 <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004dba:	4a25      	ldr	r2, [pc, #148]	@ (8004e50 <vTaskSwitchContext+0xbc>)
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004dc0:	1ac3      	subs	r3, r0, r3
 8004dc2:	441a      	add	r2, r3
 8004dc4:	654a      	str	r2, [r1, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004dc6:	4b21      	ldr	r3, [pc, #132]	@ (8004e4c <vTaskSwitchContext+0xb8>)
 8004dc8:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dca:	4b22      	ldr	r3, [pc, #136]	@ (8004e54 <vTaskSwitchContext+0xc0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004dd2:	0092      	lsls	r2, r2, #2
 8004dd4:	4920      	ldr	r1, [pc, #128]	@ (8004e58 <vTaskSwitchContext+0xc4>)
 8004dd6:	588a      	ldr	r2, [r1, r2]
 8004dd8:	b95a      	cbnz	r2, 8004df2 <vTaskSwitchContext+0x5e>
 8004dda:	b10b      	cbz	r3, 8004de0 <vTaskSwitchContext+0x4c>
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	e7f6      	b.n	8004dce <vTaskSwitchContext+0x3a>
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	e7fe      	b.n	8004df0 <vTaskSwitchContext+0x5c>
 8004df2:	4608      	mov	r0, r1
 8004df4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004df8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004dfc:	6851      	ldr	r1, [r2, #4]
 8004dfe:	6849      	ldr	r1, [r1, #4]
 8004e00:	6051      	str	r1, [r2, #4]
 8004e02:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004e06:	0092      	lsls	r2, r2, #2
 8004e08:	3208      	adds	r2, #8
 8004e0a:	4402      	add	r2, r0
 8004e0c:	4291      	cmp	r1, r2
 8004e0e:	d00f      	beq.n	8004e30 <vTaskSwitchContext+0x9c>
 8004e10:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e14:	4a10      	ldr	r2, [pc, #64]	@ (8004e58 <vTaskSwitchContext+0xc4>)
 8004e16:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004e1a:	6852      	ldr	r2, [r2, #4]
 8004e1c:	68d1      	ldr	r1, [r2, #12]
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e50 <vTaskSwitchContext+0xbc>)
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	490c      	ldr	r1, [pc, #48]	@ (8004e54 <vTaskSwitchContext+0xc0>)
 8004e24:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	3358      	adds	r3, #88	@ 0x58
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e5c <vTaskSwitchContext+0xc8>)
 8004e2c:	6013      	str	r3, [r2, #0]
}
 8004e2e:	e7b8      	b.n	8004da2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e30:	6848      	ldr	r0, [r1, #4]
 8004e32:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e36:	4a08      	ldr	r2, [pc, #32]	@ (8004e58 <vTaskSwitchContext+0xc4>)
 8004e38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004e3c:	6050      	str	r0, [r2, #4]
 8004e3e:	e7e7      	b.n	8004e10 <vTaskSwitchContext+0x7c>
 8004e40:	20000e44 	.word	0x20000e44
 8004e44:	20000e58 	.word	0x20000e58
 8004e48:	20000e3c 	.word	0x20000e3c
 8004e4c:	20000e40 	.word	0x20000e40
 8004e50:	20001340 	.word	0x20001340
 8004e54:	20000e64 	.word	0x20000e64
 8004e58:	20000ee0 	.word	0x20000ee0
 8004e5c:	2000003c 	.word	0x2000003c

08004e60 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004e60:	b158      	cbz	r0, 8004e7a <vTaskPlaceOnEventList+0x1a>
{
 8004e62:	b510      	push	{r4, lr}
 8004e64:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e66:	4a09      	ldr	r2, [pc, #36]	@ (8004e8c <vTaskPlaceOnEventList+0x2c>)
 8004e68:	6811      	ldr	r1, [r2, #0]
 8004e6a:	3118      	adds	r1, #24
 8004e6c:	f7fe fd91 	bl	8003992 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e70:	2101      	movs	r1, #1
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff fcf8 	bl	8004868 <prvAddCurrentTaskToDelayedList>
}
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8004e8a:	e7fe      	b.n	8004e8a <vTaskPlaceOnEventList+0x2a>
 8004e8c:	20001340 	.word	0x20001340

08004e90 <vTaskPlaceOnEventListRestricted>:
	{
 8004e90:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004e92:	b170      	cbz	r0, 8004eb2 <vTaskPlaceOnEventListRestricted+0x22>
 8004e94:	460d      	mov	r5, r1
 8004e96:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <vTaskPlaceOnEventListRestricted+0x34>)
 8004e9a:	6811      	ldr	r1, [r2, #0]
 8004e9c:	3118      	adds	r1, #24
 8004e9e:	f7fe fd6d 	bl	800397c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8004ea2:	b10c      	cbz	r4, 8004ea8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8004ea4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7ff fcdc 	bl	8004868 <prvAddCurrentTaskToDelayedList>
	}
 8004eb0:	bd38      	pop	{r3, r4, r5, pc}
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8004ec2:	e7fe      	b.n	8004ec2 <vTaskPlaceOnEventListRestricted+0x32>
 8004ec4:	20001340 	.word	0x20001340

08004ec8 <xTaskRemoveFromEventList>:
{
 8004ec8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eca:	68c3      	ldr	r3, [r0, #12]
 8004ecc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004ece:	b324      	cbz	r4, 8004f1a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ed0:	f104 0518 	add.w	r5, r4, #24
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f7fe fd75 	bl	80039c4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eda:	4b18      	ldr	r3, [pc, #96]	@ (8004f3c <xTaskRemoveFromEventList+0x74>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	bb2b      	cbnz	r3, 8004f2c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ee0:	1d25      	adds	r5, r4, #4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7fe fd6e 	bl	80039c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ee8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004eea:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <xTaskRemoveFromEventList+0x78>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4298      	cmp	r0, r3
 8004ef0:	d901      	bls.n	8004ef6 <xTaskRemoveFromEventList+0x2e>
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <xTaskRemoveFromEventList+0x78>)
 8004ef4:	6018      	str	r0, [r3, #0]
 8004ef6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004efa:	4629      	mov	r1, r5
 8004efc:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <xTaskRemoveFromEventList+0x7c>)
 8004efe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004f02:	f7fe fd3b 	bl	800397c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004f08:	4b0f      	ldr	r3, [pc, #60]	@ (8004f48 <xTaskRemoveFromEventList+0x80>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d911      	bls.n	8004f36 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8004f12:	2001      	movs	r0, #1
 8004f14:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <xTaskRemoveFromEventList+0x84>)
 8004f16:	6018      	str	r0, [r3, #0]
}
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8004f2a:	e7fe      	b.n	8004f2a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4808      	ldr	r0, [pc, #32]	@ (8004f50 <xTaskRemoveFromEventList+0x88>)
 8004f30:	f7fe fd24 	bl	800397c <vListInsertEnd>
 8004f34:	e7e7      	b.n	8004f06 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8004f36:	2000      	movs	r0, #0
	return xReturn;
 8004f38:	e7ee      	b.n	8004f18 <xTaskRemoveFromEventList+0x50>
 8004f3a:	bf00      	nop
 8004f3c:	20000e44 	.word	0x20000e44
 8004f40:	20000e64 	.word	0x20000e64
 8004f44:	20000ee0 	.word	0x20000ee0
 8004f48:	20001340 	.word	0x20001340
 8004f4c:	20000e58 	.word	0x20000e58
 8004f50:	20000e9c 	.word	0x20000e9c

08004f54 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f54:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <vTaskInternalSetTimeOutState+0x10>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f5a:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <vTaskInternalSetTimeOutState+0x14>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6043      	str	r3, [r0, #4]
}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000e54 	.word	0x20000e54
 8004f68:	20000e68 	.word	0x20000e68

08004f6c <xTaskCheckForTimeOut>:
{
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004f6e:	b1c8      	cbz	r0, 8004fa4 <xTaskCheckForTimeOut+0x38>
 8004f70:	460c      	mov	r4, r1
 8004f72:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004f74:	b1f9      	cbz	r1, 8004fb6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8004f76:	f000 fc9d 	bl	80058b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <xTaskCheckForTimeOut+0x7c>)
 8004f7c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f7e:	686b      	ldr	r3, [r5, #4]
 8004f80:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8004f88:	d026      	beq.n	8004fd8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f8a:	4e18      	ldr	r6, [pc, #96]	@ (8004fec <xTaskCheckForTimeOut+0x80>)
 8004f8c:	6836      	ldr	r6, [r6, #0]
 8004f8e:	682f      	ldr	r7, [r5, #0]
 8004f90:	42b7      	cmp	r7, r6
 8004f92:	d001      	beq.n	8004f98 <xTaskCheckForTimeOut+0x2c>
 8004f94:	428b      	cmp	r3, r1
 8004f96:	d924      	bls.n	8004fe2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f98:	4282      	cmp	r2, r0
 8004f9a:	d815      	bhi.n	8004fc8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004fa0:	2401      	movs	r4, #1
 8004fa2:	e01a      	b.n	8004fda <xTaskCheckForTimeOut+0x6e>
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8004fb4:	e7fe      	b.n	8004fb4 <xTaskCheckForTimeOut+0x48>
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8004fc6:	e7fe      	b.n	8004fc6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8004fc8:	1a5b      	subs	r3, r3, r1
 8004fca:	4413      	add	r3, r2
 8004fcc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7ff ffc0 	bl	8004f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fd4:	2400      	movs	r4, #0
 8004fd6:	e000      	b.n	8004fda <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8004fd8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004fda:	f000 fc8d 	bl	80058f8 <vPortExitCritical>
}
 8004fde:	4620      	mov	r0, r4
 8004fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8004fe2:	2401      	movs	r4, #1
 8004fe4:	e7f9      	b.n	8004fda <xTaskCheckForTimeOut+0x6e>
 8004fe6:	bf00      	nop
 8004fe8:	20000e68 	.word	0x20000e68
 8004fec:	20000e54 	.word	0x20000e54

08004ff0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004ff0:	4b01      	ldr	r3, [pc, #4]	@ (8004ff8 <vTaskMissedYield+0x8>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	4770      	bx	lr
 8004ff8:	20000e58 	.word	0x20000e58

08004ffc <vTaskGetInfo>:
	{
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	460c      	mov	r4, r1
 8005000:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 8005002:	4605      	mov	r5, r0
 8005004:	b1d0      	cbz	r0, 800503c <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005006:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005008:	f105 0234 	add.w	r2, r5, #52	@ 0x34
 800500c:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800500e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005010:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005012:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005014:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005016:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8005018:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800501a:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 800501c:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800501e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8005020:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8005022:	2b05      	cmp	r3, #5
 8005024:	d019      	beq.n	800505a <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <vTaskGetInfo+0x74>)
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	42aa      	cmp	r2, r5
 800502c:	d009      	beq.n	8005042 <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 800502e:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 8005030:	2b03      	cmp	r3, #3
 8005032:	d009      	beq.n	8005048 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 8005034:	b9b6      	cbnz	r6, 8005064 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	8423      	strh	r3, [r4, #32]
	}
 800503a:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800503c:	4a0c      	ldr	r2, [pc, #48]	@ (8005070 <vTaskGetInfo+0x74>)
 800503e:	6815      	ldr	r5, [r2, #0]
 8005040:	e7e1      	b.n	8005006 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 8005042:	2300      	movs	r3, #0
 8005044:	7323      	strb	r3, [r4, #12]
 8005046:	e7f5      	b.n	8005034 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 8005048:	f7ff fd5a 	bl	8004b00 <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800504c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800504e:	b10b      	cbz	r3, 8005054 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 8005050:	2302      	movs	r3, #2
 8005052:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 8005054:	f7ff fdfc 	bl	8004c50 <xTaskResumeAll>
 8005058:	e7ec      	b.n	8005034 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800505a:	4628      	mov	r0, r5
 800505c:	f7ff fcb0 	bl	80049c0 <eTaskGetState>
 8005060:	7320      	strb	r0, [r4, #12]
 8005062:	e7e7      	b.n	8005034 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005064:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8005066:	f7ff fa96 	bl	8004596 <prvTaskCheckFreeStackSpace>
 800506a:	8420      	strh	r0, [r4, #32]
 800506c:	e7e5      	b.n	800503a <vTaskGetInfo+0x3e>
 800506e:	bf00      	nop
 8005070:	20001340 	.word	0x20001340

08005074 <prvListTasksWithinSingleList>:
	{
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005078:	680c      	ldr	r4, [r1, #0]
 800507a:	b33c      	cbz	r4, 80050cc <prvListTasksWithinSingleList+0x58>
 800507c:	4607      	mov	r7, r0
 800507e:	460d      	mov	r5, r1
 8005080:	4690      	mov	r8, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005082:	684b      	ldr	r3, [r1, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	604b      	str	r3, [r1, #4]
 8005088:	f101 0908 	add.w	r9, r1, #8
 800508c:	454b      	cmp	r3, r9
 800508e:	d004      	beq.n	800509a <prvListTasksWithinSingleList+0x26>
 8005090:	686b      	ldr	r3, [r5, #4]
 8005092:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 8005096:	2400      	movs	r4, #0
 8005098:	e010      	b.n	80050bc <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	604b      	str	r3, [r1, #4]
 800509e:	e7f7      	b.n	8005090 <prvListTasksWithinSingleList+0x1c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a0:	686b      	ldr	r3, [r5, #4]
 80050a2:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80050a4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 80050a8:	4643      	mov	r3, r8
 80050aa:	2201      	movs	r2, #1
 80050ac:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7ff ffa3 	bl	8004ffc <vTaskGetInfo>
				uxTask++;
 80050b6:	3401      	adds	r4, #1
			} while( pxNextTCB != pxFirstTCB );
 80050b8:	45b2      	cmp	sl, r6
 80050ba:	d007      	beq.n	80050cc <prvListTasksWithinSingleList+0x58>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050bc:	686b      	ldr	r3, [r5, #4]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	6069      	str	r1, [r5, #4]
 80050c2:	4589      	cmp	r9, r1
 80050c4:	d1ec      	bne.n	80050a0 <prvListTasksWithinSingleList+0x2c>
 80050c6:	684b      	ldr	r3, [r1, #4]
 80050c8:	606b      	str	r3, [r5, #4]
 80050ca:	e7e9      	b.n	80050a0 <prvListTasksWithinSingleList+0x2c>
	}
 80050cc:	4620      	mov	r0, r4
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080050d4 <uxTaskGetSystemState>:
	{
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	4607      	mov	r7, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	4616      	mov	r6, r2
		vTaskSuspendAll();
 80050dc:	f7ff fd10 	bl	8004b00 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80050e0:	4b22      	ldr	r3, [pc, #136]	@ (800516c <uxTaskGetSystemState+0x98>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d83c      	bhi.n	8005162 <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80050e8:	2438      	movs	r4, #56	@ 0x38
 80050ea:	2500      	movs	r5, #0
					uxQueue--;
 80050ec:	3c01      	subs	r4, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80050ee:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 80050f2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80050f6:	2201      	movs	r2, #1
 80050f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <uxTaskGetSystemState+0x9c>)
 80050fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80050fe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005102:	f7ff ffb7 	bl	8005074 <prvListTasksWithinSingleList>
 8005106:	4405      	add	r5, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005108:	2c00      	cmp	r4, #0
 800510a:	d1ef      	bne.n	80050ec <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800510c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8005110:	4b18      	ldr	r3, [pc, #96]	@ (8005174 <uxTaskGetSystemState+0xa0>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	2202      	movs	r2, #2
 8005116:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800511a:	f7ff ffab 	bl	8005074 <prvListTasksWithinSingleList>
 800511e:	4405      	add	r5, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8005120:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <uxTaskGetSystemState+0xa4>)
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	2202      	movs	r2, #2
 800512a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800512e:	f7ff ffa1 	bl	8005074 <prvListTasksWithinSingleList>
 8005132:	4405      	add	r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005134:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8005138:	2204      	movs	r2, #4
 800513a:	4910      	ldr	r1, [pc, #64]	@ (800517c <uxTaskGetSystemState+0xa8>)
 800513c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005140:	f7ff ff98 	bl	8005074 <prvListTasksWithinSingleList>
 8005144:	182c      	adds	r4, r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8005146:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800514a:	2203      	movs	r2, #3
 800514c:	490c      	ldr	r1, [pc, #48]	@ (8005180 <uxTaskGetSystemState+0xac>)
 800514e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005152:	f7ff ff8f 	bl	8005074 <prvListTasksWithinSingleList>
 8005156:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8005158:	b126      	cbz	r6, 8005164 <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800515a:	f7fc f8eb 	bl	8001334 <getRunTimeCounterValue>
 800515e:	6030      	str	r0, [r6, #0]
 8005160:	e000      	b.n	8005164 <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8005162:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 8005164:	f7ff fd74 	bl	8004c50 <xTaskResumeAll>
	}
 8005168:	4620      	mov	r0, r4
 800516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516c:	20000e6c 	.word	0x20000e6c
 8005170:	20000ee0 	.word	0x20000ee0
 8005174:	20000eb4 	.word	0x20000eb4
 8005178:	20000eb0 	.word	0x20000eb0
 800517c:	20000e88 	.word	0x20000e88
 8005180:	20000e70 	.word	0x20000e70

08005184 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005184:	4b01      	ldr	r3, [pc, #4]	@ (800518c <xTaskGetCurrentTaskHandle+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
	}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20001340 	.word	0x20001340

08005190 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <xTaskGetSchedulerState+0x18>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	b133      	cbz	r3, 80051a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005196:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <xTaskGetSchedulerState+0x1c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	b10b      	cbz	r3, 80051a0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800519c:	2000      	movs	r0, #0
	}
 800519e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80051a0:	2002      	movs	r0, #2
 80051a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051a4:	2001      	movs	r0, #1
 80051a6:	4770      	bx	lr
 80051a8:	20000e60 	.word	0x20000e60
 80051ac:	20000e44 	.word	0x20000e44

080051b0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d03e      	beq.n	8005232 <xTaskPriorityInherit+0x82>
	{
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80051ba:	4a20      	ldr	r2, [pc, #128]	@ (800523c <xTaskPriorityInherit+0x8c>)
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d22e      	bcs.n	8005222 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051c4:	6982      	ldr	r2, [r0, #24]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	db05      	blt.n	80051d6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ca:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <xTaskPriorityInherit+0x8c>)
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051d0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80051d4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051d6:	6961      	ldr	r1, [r4, #20]
 80051d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051dc:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <xTaskPriorityInherit+0x90>)
 80051de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051e2:	4299      	cmp	r1, r3
 80051e4:	d005      	beq.n	80051f2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <xTaskPriorityInherit+0x8c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80051ee:	2001      	movs	r0, #1
	}
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f2:	1d25      	adds	r5, r4, #4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f7fe fbe5 	bl	80039c4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051fa:	4b10      	ldr	r3, [pc, #64]	@ (800523c <xTaskPriorityInherit+0x8c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005200:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005202:	4b10      	ldr	r3, [pc, #64]	@ (8005244 <xTaskPriorityInherit+0x94>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4298      	cmp	r0, r3
 8005208:	d901      	bls.n	800520e <xTaskPriorityInherit+0x5e>
 800520a:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <xTaskPriorityInherit+0x94>)
 800520c:	6018      	str	r0, [r3, #0]
 800520e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005212:	4629      	mov	r1, r5
 8005214:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <xTaskPriorityInherit+0x90>)
 8005216:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800521a:	f7fe fbaf 	bl	800397c <vListInsertEnd>
				xReturn = pdTRUE;
 800521e:	2001      	movs	r0, #1
 8005220:	e7e6      	b.n	80051f0 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005222:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <xTaskPriorityInherit+0x8c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	429a      	cmp	r2, r3
 800522c:	d303      	bcc.n	8005236 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800522e:	2000      	movs	r0, #0
 8005230:	e7de      	b.n	80051f0 <xTaskPriorityInherit+0x40>
 8005232:	2000      	movs	r0, #0
	}
 8005234:	4770      	bx	lr
					xReturn = pdTRUE;
 8005236:	2001      	movs	r0, #1
		return xReturn;
 8005238:	e7da      	b.n	80051f0 <xTaskPriorityInherit+0x40>
 800523a:	bf00      	nop
 800523c:	20001340 	.word	0x20001340
 8005240:	20000ee0 	.word	0x20000ee0
 8005244:	20000e64 	.word	0x20000e64

08005248 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005248:	2800      	cmp	r0, #0
 800524a:	d03b      	beq.n	80052c4 <xTaskPriorityDisinherit+0x7c>
	{
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005250:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <xTaskPriorityDisinherit+0x84>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4283      	cmp	r3, r0
 8005256:	d008      	beq.n	800526a <xTaskPriorityDisinherit+0x22>
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	e7fe      	b.n	8005268 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800526a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800526c:	b943      	cbnz	r3, 8005280 <xTaskPriorityDisinherit+0x38>
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	e7fe      	b.n	800527e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005280:	3b01      	subs	r3, #1
 8005282:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005284:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005286:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005288:	4291      	cmp	r1, r2
 800528a:	d01d      	beq.n	80052c8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800528c:	b10b      	cbz	r3, 8005292 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800528e:	2000      	movs	r0, #0
	}
 8005290:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005292:	1d05      	adds	r5, r0, #4
 8005294:	4628      	mov	r0, r5
 8005296:	f7fe fb95 	bl	80039c4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800529a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800529c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529e:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80052a2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80052a4:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <xTaskPriorityDisinherit+0x88>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4298      	cmp	r0, r3
 80052aa:	d901      	bls.n	80052b0 <xTaskPriorityDisinherit+0x68>
 80052ac:	4b08      	ldr	r3, [pc, #32]	@ (80052d0 <xTaskPriorityDisinherit+0x88>)
 80052ae:	6018      	str	r0, [r3, #0]
 80052b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052b4:	4629      	mov	r1, r5
 80052b6:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <xTaskPriorityDisinherit+0x8c>)
 80052b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052bc:	f7fe fb5e 	bl	800397c <vListInsertEnd>
					xReturn = pdTRUE;
 80052c0:	2001      	movs	r0, #1
 80052c2:	e7e5      	b.n	8005290 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80052c4:	2000      	movs	r0, #0
	}
 80052c6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80052c8:	2000      	movs	r0, #0
 80052ca:	e7e1      	b.n	8005290 <xTaskPriorityDisinherit+0x48>
 80052cc:	20001340 	.word	0x20001340
 80052d0:	20000e64 	.word	0x20000e64
 80052d4:	20000ee0 	.word	0x20000ee0

080052d8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80052d8:	2800      	cmp	r0, #0
 80052da:	d046      	beq.n	800536a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80052e0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80052e2:	b943      	cbnz	r3, 80052f6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	e7fe      	b.n	80052f4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052f6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80052f8:	428a      	cmp	r2, r1
 80052fa:	d200      	bcs.n	80052fe <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052fc:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80052fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005300:	4291      	cmp	r1, r2
 8005302:	d001      	beq.n	8005308 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005304:	2b01      	cmp	r3, #1
 8005306:	d000      	beq.n	800530a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8005308:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800530a:	4b18      	ldr	r3, [pc, #96]	@ (800536c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	42a3      	cmp	r3, r4
 8005310:	d022      	beq.n	8005358 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8005312:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005314:	69a3      	ldr	r3, [r4, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	db02      	blt.n	8005320 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800531e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005320:	6962      	ldr	r2, [r4, #20]
 8005322:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005326:	4b12      	ldr	r3, [pc, #72]	@ (8005370 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8005328:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800532c:	429a      	cmp	r2, r3
 800532e:	d1eb      	bne.n	8005308 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005330:	1d25      	adds	r5, r4, #4
 8005332:	4628      	mov	r0, r5
 8005334:	f7fe fb46 	bl	80039c4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005338:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800533a:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4298      	cmp	r0, r3
 8005340:	d901      	bls.n	8005346 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8005342:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005344:	6018      	str	r0, [r3, #0]
 8005346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800534a:	4629      	mov	r1, r5
 800534c:	4b08      	ldr	r3, [pc, #32]	@ (8005370 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800534e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005352:	f7fe fb13 	bl	800397c <vListInsertEnd>
	}
 8005356:	e7d7      	b.n	8005308 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005368:	e7fe      	b.n	8005368 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800536a:	4770      	bx	lr
 800536c:	20001340 	.word	0x20001340
 8005370:	20000ee0 	.word	0x20000ee0
 8005374:	20000e64 	.word	0x20000e64

08005378 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <pvTaskIncrementMutexHeldCount+0x18>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	b123      	cbz	r3, 8005388 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800537e:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <pvTaskIncrementMutexHeldCount+0x18>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005384:	3301      	adds	r3, #1
 8005386:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8005388:	4b01      	ldr	r3, [pc, #4]	@ (8005390 <pvTaskIncrementMutexHeldCount+0x18>)
 800538a:	6818      	ldr	r0, [r3, #0]
	}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20001340 	.word	0x20001340

08005394 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005394:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <prvGetNextExpireTime+0x1c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	6813      	ldr	r3, [r2, #0]
 800539a:	b92b      	cbnz	r3, 80053a8 <prvGetNextExpireTime+0x14>
 800539c:	2301      	movs	r3, #1
 800539e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a0:	b923      	cbnz	r3, 80053ac <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a2:	68d3      	ldr	r3, [r2, #12]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053a8:	2300      	movs	r3, #0
 80053aa:	e7f8      	b.n	800539e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053ac:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80053ae:	4770      	bx	lr
 80053b0:	20001444 	.word	0x20001444

080053b4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053b4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053b6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053b8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053ba:	4291      	cmp	r1, r2
 80053bc:	d80c      	bhi.n	80053d8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	6983      	ldr	r3, [r0, #24]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d301      	bcc.n	80053ca <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053c6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80053c8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053ca:	1d01      	adds	r1, r0, #4
 80053cc:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <prvInsertTimerInActiveList+0x40>)
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	f7fe fadf 	bl	8003992 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80053d4:	2000      	movs	r0, #0
 80053d6:	e7f7      	b.n	80053c8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053d8:	429a      	cmp	r2, r3
 80053da:	d201      	bcs.n	80053e0 <prvInsertTimerInActiveList+0x2c>
 80053dc:	4299      	cmp	r1, r3
 80053de:	d206      	bcs.n	80053ee <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053e0:	1d01      	adds	r1, r0, #4
 80053e2:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <prvInsertTimerInActiveList+0x44>)
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f7fe fad4 	bl	8003992 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80053ea:	2000      	movs	r0, #0
 80053ec:	e7ec      	b.n	80053c8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80053ee:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80053f0:	e7ea      	b.n	80053c8 <prvInsertTimerInActiveList+0x14>
 80053f2:	bf00      	nop
 80053f4:	20001440 	.word	0x20001440
 80053f8:	20001444 	.word	0x20001444

080053fc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053fc:	b530      	push	{r4, r5, lr}
 80053fe:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005400:	f000 fa58 	bl	80058b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005404:	4b11      	ldr	r3, [pc, #68]	@ (800544c <prvCheckForValidListAndQueue+0x50>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b11b      	cbz	r3, 8005412 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800540a:	f000 fa75 	bl	80058f8 <vPortExitCritical>
}
 800540e:	b003      	add	sp, #12
 8005410:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8005412:	4d0f      	ldr	r5, [pc, #60]	@ (8005450 <prvCheckForValidListAndQueue+0x54>)
 8005414:	4628      	mov	r0, r5
 8005416:	f7fe faa3 	bl	8003960 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800541a:	4c0e      	ldr	r4, [pc, #56]	@ (8005454 <prvCheckForValidListAndQueue+0x58>)
 800541c:	4620      	mov	r0, r4
 800541e:	f7fe fa9f 	bl	8003960 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005422:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <prvCheckForValidListAndQueue+0x5c>)
 8005424:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005426:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <prvCheckForValidListAndQueue+0x60>)
 8005428:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <prvCheckForValidListAndQueue+0x64>)
 8005430:	4a0c      	ldr	r2, [pc, #48]	@ (8005464 <prvCheckForValidListAndQueue+0x68>)
 8005432:	2110      	movs	r1, #16
 8005434:	200a      	movs	r0, #10
 8005436:	f7fe fbd3 	bl	8003be0 <xQueueGenericCreateStatic>
 800543a:	4b04      	ldr	r3, [pc, #16]	@ (800544c <prvCheckForValidListAndQueue+0x50>)
 800543c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800543e:	2800      	cmp	r0, #0
 8005440:	d0e3      	beq.n	800540a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005442:	4909      	ldr	r1, [pc, #36]	@ (8005468 <prvCheckForValidListAndQueue+0x6c>)
 8005444:	f7ff f83e 	bl	80044c4 <vQueueAddToRegistry>
 8005448:	e7df      	b.n	800540a <prvCheckForValidListAndQueue+0xe>
 800544a:	bf00      	nop
 800544c:	2000143c 	.word	0x2000143c
 8005450:	2000145c 	.word	0x2000145c
 8005454:	20001448 	.word	0x20001448
 8005458:	20001444 	.word	0x20001444
 800545c:	20001440 	.word	0x20001440
 8005460:	20001344 	.word	0x20001344
 8005464:	20001394 	.word	0x20001394
 8005468:	08008bcc 	.word	0x08008bcc

0800546c <xTimerCreateTimerTask>:
{
 800546c:	b510      	push	{r4, lr}
 800546e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005470:	f7ff ffc4 	bl	80053fc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005474:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <xTimerCreateTimerTask+0x54>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	b1cb      	cbz	r3, 80054ae <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800547a:	2400      	movs	r4, #0
 800547c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800547e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005480:	aa07      	add	r2, sp, #28
 8005482:	a906      	add	r1, sp, #24
 8005484:	a805      	add	r0, sp, #20
 8005486:	f7fe fa5f 	bl	8003948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800548a:	9b05      	ldr	r3, [sp, #20]
 800548c:	9302      	str	r3, [sp, #8]
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	2302      	movs	r3, #2
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	4623      	mov	r3, r4
 8005498:	9a07      	ldr	r2, [sp, #28]
 800549a:	490a      	ldr	r1, [pc, #40]	@ (80054c4 <xTimerCreateTimerTask+0x58>)
 800549c:	480a      	ldr	r0, [pc, #40]	@ (80054c8 <xTimerCreateTimerTask+0x5c>)
 800549e:	f7ff fa21 	bl	80048e4 <xTaskCreateStatic>
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <xTimerCreateTimerTask+0x60>)
 80054a4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80054a6:	b110      	cbz	r0, 80054ae <xTimerCreateTimerTask+0x42>
}
 80054a8:	2001      	movs	r0, #1
 80054aa:	b008      	add	sp, #32
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80054be:	e7fe      	b.n	80054be <xTimerCreateTimerTask+0x52>
 80054c0:	2000143c 	.word	0x2000143c
 80054c4:	08008bd4 	.word	0x08008bd4
 80054c8:	080057d1 	.word	0x080057d1
 80054cc:	20001438 	.word	0x20001438

080054d0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80054d0:	b1b8      	cbz	r0, 8005502 <xTimerGenericCommand+0x32>
 80054d2:	469c      	mov	ip, r3
 80054d4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80054d6:	4818      	ldr	r0, [pc, #96]	@ (8005538 <xTimerGenericCommand+0x68>)
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	b358      	cbz	r0, 8005534 <xTimerGenericCommand+0x64>
{
 80054dc:	b500      	push	{lr}
 80054de:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80054e0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054e2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054e4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054e6:	2905      	cmp	r1, #5
 80054e8:	dc1c      	bgt.n	8005524 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054ea:	f7ff fe51 	bl	8005190 <xTaskGetSchedulerState>
 80054ee:	2802      	cmp	r0, #2
 80054f0:	d010      	beq.n	8005514 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054f2:	2300      	movs	r3, #0
 80054f4:	461a      	mov	r2, r3
 80054f6:	4669      	mov	r1, sp
 80054f8:	480f      	ldr	r0, [pc, #60]	@ (8005538 <xTimerGenericCommand+0x68>)
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f7fe fc1f 	bl	8003d3e <xQueueGenericSend>
 8005500:	e015      	b.n	800552e <xTimerGenericCommand+0x5e>
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005512:	e7fe      	b.n	8005512 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005514:	2300      	movs	r3, #0
 8005516:	9a06      	ldr	r2, [sp, #24]
 8005518:	4669      	mov	r1, sp
 800551a:	4807      	ldr	r0, [pc, #28]	@ (8005538 <xTimerGenericCommand+0x68>)
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	f7fe fc0e 	bl	8003d3e <xQueueGenericSend>
 8005522:	e004      	b.n	800552e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005524:	2300      	movs	r3, #0
 8005526:	4662      	mov	r2, ip
 8005528:	4669      	mov	r1, sp
 800552a:	f7fe fd12 	bl	8003f52 <xQueueGenericSendFromISR>
}
 800552e:	b005      	add	sp, #20
 8005530:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8005534:	2000      	movs	r0, #0
}
 8005536:	4770      	bx	lr
 8005538:	2000143c 	.word	0x2000143c

0800553c <prvSwitchTimerLists>:
{
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <prvSwitchTimerLists+0x74>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	b362      	cbz	r2, 80055a2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800554c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800554e:	1d25      	adds	r5, r4, #4
 8005550:	4628      	mov	r0, r5
 8005552:	f7fe fa37 	bl	80039c4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005556:	6a23      	ldr	r3, [r4, #32]
 8005558:	4620      	mov	r0, r4
 800555a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800555c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005560:	f013 0f04 	tst.w	r3, #4
 8005564:	d0ec      	beq.n	8005540 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005566:	69a3      	ldr	r3, [r4, #24]
 8005568:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800556a:	429e      	cmp	r6, r3
 800556c:	d207      	bcs.n	800557e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800556e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005570:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005572:	4629      	mov	r1, r5
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <prvSwitchTimerLists+0x74>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	f7fe fa0b 	bl	8003992 <vListInsert>
 800557c:	e7e0      	b.n	8005540 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800557e:	2100      	movs	r1, #0
 8005580:	9100      	str	r1, [sp, #0]
 8005582:	460b      	mov	r3, r1
 8005584:	4632      	mov	r2, r6
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ffa2 	bl	80054d0 <xTimerGenericCommand>
				configASSERT( xResult );
 800558c:	2800      	cmp	r0, #0
 800558e:	d1d7      	bne.n	8005540 <prvSwitchTimerLists+0x4>
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	e7fe      	b.n	80055a0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80055a2:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <prvSwitchTimerLists+0x78>)
 80055a4:	6810      	ldr	r0, [r2, #0]
 80055a6:	4902      	ldr	r1, [pc, #8]	@ (80055b0 <prvSwitchTimerLists+0x74>)
 80055a8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	b002      	add	sp, #8
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	20001444 	.word	0x20001444
 80055b4:	20001440 	.word	0x20001440

080055b8 <prvSampleTimeNow>:
{
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80055bc:	f7ff faa8 	bl	8004b10 <xTaskGetTickCount>
 80055c0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80055c2:	4b07      	ldr	r3, [pc, #28]	@ (80055e0 <prvSampleTimeNow+0x28>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4283      	cmp	r3, r0
 80055c8:	d805      	bhi.n	80055d6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80055ce:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <prvSampleTimeNow+0x28>)
 80055d0:	601c      	str	r4, [r3, #0]
}
 80055d2:	4620      	mov	r0, r4
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80055d6:	f7ff ffb1 	bl	800553c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	e7f6      	b.n	80055ce <prvSampleTimeNow+0x16>
 80055e0:	20001434 	.word	0x20001434

080055e4 <prvProcessExpiredTimer>:
{
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	4606      	mov	r6, r0
 80055ea:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ec:	4917      	ldr	r1, [pc, #92]	@ (800564c <prvProcessExpiredTimer+0x68>)
 80055ee:	6809      	ldr	r1, [r1, #0]
 80055f0:	68c9      	ldr	r1, [r1, #12]
 80055f2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055f4:	1d20      	adds	r0, r4, #4
 80055f6:	f7fe f9e5 	bl	80039c4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055fa:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 80055fe:	f01c 0f04 	tst.w	ip, #4
 8005602:	d108      	bne.n	8005616 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005604:	f02c 0c01 	bic.w	ip, ip, #1
 8005608:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800560c:	6a23      	ldr	r3, [r4, #32]
 800560e:	4620      	mov	r0, r4
 8005610:	4798      	blx	r3
}
 8005612:	b002      	add	sp, #8
 8005614:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005616:	69a1      	ldr	r1, [r4, #24]
 8005618:	4633      	mov	r3, r6
 800561a:	462a      	mov	r2, r5
 800561c:	4431      	add	r1, r6
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff fec8 	bl	80053b4 <prvInsertTimerInActiveList>
 8005624:	2800      	cmp	r0, #0
 8005626:	d0f1      	beq.n	800560c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005628:	2100      	movs	r1, #0
 800562a:	9100      	str	r1, [sp, #0]
 800562c:	460b      	mov	r3, r1
 800562e:	4632      	mov	r2, r6
 8005630:	4620      	mov	r0, r4
 8005632:	f7ff ff4d 	bl	80054d0 <xTimerGenericCommand>
			configASSERT( xResult );
 8005636:	2800      	cmp	r0, #0
 8005638:	d1e8      	bne.n	800560c <prvProcessExpiredTimer+0x28>
 800563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	e7fe      	b.n	800564a <prvProcessExpiredTimer+0x66>
 800564c:	20001444 	.word	0x20001444

08005650 <prvProcessTimerOrBlockTask>:
{
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	4606      	mov	r6, r0
 8005656:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8005658:	f7ff fa52 	bl	8004b00 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800565c:	a801      	add	r0, sp, #4
 800565e:	f7ff ffab 	bl	80055b8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	bb33      	cbnz	r3, 80056b4 <prvProcessTimerOrBlockTask+0x64>
 8005666:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005668:	b9e4      	cbnz	r4, 80056a4 <prvProcessTimerOrBlockTask+0x54>
 800566a:	42b0      	cmp	r0, r6
 800566c:	d213      	bcs.n	8005696 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800566e:	4622      	mov	r2, r4
 8005670:	1b71      	subs	r1, r6, r5
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <prvProcessTimerOrBlockTask+0x6c>)
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	f7fe ff65 	bl	8004544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800567a:	f7ff fae9 	bl	8004c50 <xTaskResumeAll>
 800567e:	b9d8      	cbnz	r0, 80056b8 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8005680:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005688:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	e010      	b.n	80056b8 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8005696:	f7ff fadb 	bl	8004c50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800569a:	4629      	mov	r1, r5
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff ffa1 	bl	80055e4 <prvProcessExpiredTimer>
 80056a2:	e009      	b.n	80056b8 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056a4:	4a06      	ldr	r2, [pc, #24]	@ (80056c0 <prvProcessTimerOrBlockTask+0x70>)
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	b90a      	cbnz	r2, 80056b0 <prvProcessTimerOrBlockTask+0x60>
 80056ac:	2401      	movs	r4, #1
 80056ae:	e7de      	b.n	800566e <prvProcessTimerOrBlockTask+0x1e>
 80056b0:	461c      	mov	r4, r3
 80056b2:	e7dc      	b.n	800566e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 80056b4:	f7ff facc 	bl	8004c50 <xTaskResumeAll>
}
 80056b8:	b002      	add	sp, #8
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	2000143c 	.word	0x2000143c
 80056c0:	20001440 	.word	0x20001440

080056c4 <prvProcessReceivedCommands>:
{
 80056c4:	b510      	push	{r4, lr}
 80056c6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056c8:	e002      	b.n	80056d0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	da0f      	bge.n	80056f0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056d0:	2200      	movs	r2, #0
 80056d2:	a904      	add	r1, sp, #16
 80056d4:	4b3d      	ldr	r3, [pc, #244]	@ (80057cc <prvProcessReceivedCommands+0x108>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	f7fe fcfb 	bl	80040d2 <xQueueReceive>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d073      	beq.n	80057c8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056e0:	9b04      	ldr	r3, [sp, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	daf1      	bge.n	80056ca <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056e6:	9907      	ldr	r1, [sp, #28]
 80056e8:	9806      	ldr	r0, [sp, #24]
 80056ea:	9b05      	ldr	r3, [sp, #20]
 80056ec:	4798      	blx	r3
 80056ee:	e7ec      	b.n	80056ca <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056f0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056f2:	6963      	ldr	r3, [r4, #20]
 80056f4:	b113      	cbz	r3, 80056fc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056f6:	1d20      	adds	r0, r4, #4
 80056f8:	f7fe f964 	bl	80039c4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056fc:	a803      	add	r0, sp, #12
 80056fe:	f7ff ff5b 	bl	80055b8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	2b09      	cmp	r3, #9
 8005706:	d8e3      	bhi.n	80056d0 <prvProcessReceivedCommands+0xc>
 8005708:	e8df f003 	tbb	[pc, r3]
 800570c:	30050505 	.word	0x30050505
 8005710:	05055037 	.word	0x05055037
 8005714:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005716:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	69a1      	ldr	r1, [r4, #24]
 8005726:	4602      	mov	r2, r0
 8005728:	4419      	add	r1, r3
 800572a:	4620      	mov	r0, r4
 800572c:	f7ff fe42 	bl	80053b4 <prvInsertTimerInActiveList>
 8005730:	2800      	cmp	r0, #0
 8005732:	d0cd      	beq.n	80056d0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005734:	6a23      	ldr	r3, [r4, #32]
 8005736:	4620      	mov	r0, r4
 8005738:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800573a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800573e:	f013 0f04 	tst.w	r3, #4
 8005742:	d0c5      	beq.n	80056d0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005744:	69a2      	ldr	r2, [r4, #24]
 8005746:	2100      	movs	r1, #0
 8005748:	9100      	str	r1, [sp, #0]
 800574a:	460b      	mov	r3, r1
 800574c:	9805      	ldr	r0, [sp, #20]
 800574e:	4402      	add	r2, r0
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff febd 	bl	80054d0 <xTimerGenericCommand>
							configASSERT( xResult );
 8005756:	2800      	cmp	r0, #0
 8005758:	d1ba      	bne.n	80056d0 <prvProcessReceivedCommands+0xc>
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	e7fe      	b.n	800576a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800576c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8005778:	e7aa      	b.n	80056d0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800577a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005786:	9905      	ldr	r1, [sp, #20]
 8005788:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800578a:	b131      	cbz	r1, 800579a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800578c:	4603      	mov	r3, r0
 800578e:	4602      	mov	r2, r0
 8005790:	4401      	add	r1, r0
 8005792:	4620      	mov	r0, r4
 8005794:	f7ff fe0e 	bl	80053b4 <prvInsertTimerInActiveList>
					break;
 8005798:	e79a      	b.n	80056d0 <prvProcessReceivedCommands+0xc>
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057aa:	e7fe      	b.n	80057aa <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057ac:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80057b0:	f013 0f02 	tst.w	r3, #2
 80057b4:	d004      	beq.n	80057c0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80057be:	e787      	b.n	80056d0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 fab1 	bl	8005d28 <vPortFree>
 80057c6:	e783      	b.n	80056d0 <prvProcessReceivedCommands+0xc>
}
 80057c8:	b008      	add	sp, #32
 80057ca:	bd10      	pop	{r4, pc}
 80057cc:	2000143c 	.word	0x2000143c

080057d0 <prvTimerTask>:
{
 80057d0:	b500      	push	{lr}
 80057d2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057d4:	a801      	add	r0, sp, #4
 80057d6:	f7ff fddd 	bl	8005394 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057da:	9901      	ldr	r1, [sp, #4]
 80057dc:	f7ff ff38 	bl	8005650 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80057e0:	f7ff ff70 	bl	80056c4 <prvProcessReceivedCommands>
	for( ;; )
 80057e4:	e7f6      	b.n	80057d4 <prvTimerTask+0x4>
	...

080057e8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <prvTaskExitError+0x3c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057f6:	d008      	beq.n	800580a <prvTaskExitError+0x22>
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	e7fe      	b.n	8005808 <prvTaskExitError+0x20>
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0fc      	beq.n	800581a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005820:	b002      	add	sp, #8
 8005822:	4770      	bx	lr
 8005824:	2000002c 	.word	0x2000002c

08005828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005828:	4808      	ldr	r0, [pc, #32]	@ (800584c <prvPortStartFirstTask+0x24>)
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	6800      	ldr	r0, [r0, #0]
 800582e:	f380 8808 	msr	MSP, r0
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f380 8814 	msr	CONTROL, r0
 800583a:	b662      	cpsie	i
 800583c:	b661      	cpsie	f
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	df00      	svc	0
 8005848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800584a:	0000      	.short	0x0000
 800584c:	e000ed08 	.word	0xe000ed08

08005850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005850:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005860 <vPortEnableVFP+0x10>
 8005854:	6801      	ldr	r1, [r0, #0]
 8005856:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800585a:	6001      	str	r1, [r0, #0]
 800585c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800585e:	0000      	.short	0x0000
 8005860:	e000ed88 	.word	0xe000ed88

08005864 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005868:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800586c:	f021 0101 	bic.w	r1, r1, #1
 8005870:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005874:	4b05      	ldr	r3, [pc, #20]	@ (800588c <pxPortInitialiseStack+0x28>)
 8005876:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800587a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800587e:	f06f 0302 	mvn.w	r3, #2
 8005882:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005886:	3844      	subs	r0, #68	@ 0x44
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	080057e9 	.word	0x080057e9

08005890 <SVC_Handler>:
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	20001340 	.word	0x20001340

080058b4 <vPortEnterCritical>:
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80058c4:	4a0b      	ldr	r2, [pc, #44]	@ (80058f4 <vPortEnterCritical+0x40>)
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d000      	beq.n	80058d2 <vPortEnterCritical+0x1e>
}
 80058d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80058d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80058da:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80058de:	d0f7      	beq.n	80058d0 <vPortEnterCritical+0x1c>
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	e7fe      	b.n	80058f0 <vPortEnterCritical+0x3c>
 80058f2:	bf00      	nop
 80058f4:	2000002c 	.word	0x2000002c

080058f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80058f8:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <vPortExitCritical+0x28>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b943      	cbnz	r3, 8005910 <vPortExitCritical+0x18>
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	e7fe      	b.n	800590e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005910:	3b01      	subs	r3, #1
 8005912:	4a03      	ldr	r2, [pc, #12]	@ (8005920 <vPortExitCritical+0x28>)
 8005914:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005916:	b90b      	cbnz	r3, 800591c <vPortExitCritical+0x24>
	__asm volatile
 8005918:	f383 8811 	msr	BASEPRI, r3
}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000002c 	.word	0x2000002c
	...

08005930 <PendSV_Handler>:
	__asm volatile
 8005930:	f3ef 8009 	mrs	r0, PSP
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <pxCurrentTCBConst>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	f01e 0f10 	tst.w	lr, #16
 8005940:	bf08      	it	eq
 8005942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	6010      	str	r0, [r2, #0]
 800594c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005954:	f380 8811 	msr	BASEPRI, r0
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f7ff fa18 	bl	8004d94 <vTaskSwitchContext>
 8005964:	f04f 0000 	mov.w	r0, #0
 8005968:	f380 8811 	msr	BASEPRI, r0
 800596c:	bc09      	pop	{r0, r3}
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	6808      	ldr	r0, [r1, #0]
 8005972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005976:	f01e 0f10 	tst.w	lr, #16
 800597a:	bf08      	it	eq
 800597c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005980:	f380 8809 	msr	PSP, r0
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w

08005990 <pxCurrentTCBConst>:
 8005990:	20001340 	.word	0x20001340

08005994 <xPortSysTickHandler>:
{
 8005994:	b508      	push	{r3, lr}
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80059a6:	f7ff f8c7 	bl	8004b38 <xTaskIncrementTick>
 80059aa:	b128      	cbz	r0, 80059b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80059b8:	2300      	movs	r3, #0
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bd08      	pop	{r3, pc}

080059c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80059c4:	2300      	movs	r3, #0
 80059c6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059c8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059ca:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <vPortSetupTimerInterrupt+0x20>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4905      	ldr	r1, [pc, #20]	@ (80059e4 <vPortSetupTimerInterrupt+0x24>)
 80059d0:	fba1 1303 	umull	r1, r3, r1, r3
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	3b01      	subs	r3, #1
 80059d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059da:	2307      	movs	r3, #7
 80059dc:	6113      	str	r3, [r2, #16]
}
 80059de:	4770      	bx	lr
 80059e0:	20000020 	.word	0x20000020
 80059e4:	10624dd3 	.word	0x10624dd3

080059e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059ec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80059f0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ae8 <xPortStartScheduler+0x100>)
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d01c      	beq.n	8005a30 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059fa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80059fe:	4b3b      	ldr	r3, [pc, #236]	@ (8005aec <xPortStartScheduler+0x104>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d01e      	beq.n	8005a42 <xPortStartScheduler+0x5a>
{
 8005a04:	b530      	push	{r4, r5, lr}
 8005a06:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a08:	4b39      	ldr	r3, [pc, #228]	@ (8005af0 <xPortStartScheduler+0x108>)
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a10:	22ff      	movs	r2, #255	@ 0xff
 8005a12:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a24:	4a33      	ldr	r2, [pc, #204]	@ (8005af4 <xPortStartScheduler+0x10c>)
 8005a26:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a28:	4b33      	ldr	r3, [pc, #204]	@ (8005af8 <xPortStartScheduler+0x110>)
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a2e:	e01b      	b.n	8005a68 <xPortStartScheduler+0x80>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a40:	e7fe      	b.n	8005a40 <xPortStartScheduler+0x58>
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a52:	e7fe      	b.n	8005a52 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8005a54:	4a28      	ldr	r2, [pc, #160]	@ (8005af8 <xPortStartScheduler+0x110>)
 8005a56:	6813      	ldr	r3, [r2, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a70:	d1f0      	bne.n	8005a54 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a72:	4b21      	ldr	r3, [pc, #132]	@ (8005af8 <xPortStartScheduler+0x110>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d008      	beq.n	8005a8c <xPortStartScheduler+0xa4>
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	e7fe      	b.n	8005a8a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005af8 <xPortStartScheduler+0x110>)
 8005a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a96:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a98:	9b01      	ldr	r3, [sp, #4]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4a14      	ldr	r2, [pc, #80]	@ (8005af0 <xPortStartScheduler+0x108>)
 8005a9e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005aa0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8005aa4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005aac:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ab0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005ab4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ab8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8005abc:	f7ff ff80 	bl	80059c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8005afc <xPortStartScheduler+0x114>)
 8005ac4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005ac6:	f7ff fec3 	bl	8005850 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aca:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8005ace:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005ad2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8005ad6:	f7ff fea7 	bl	8005828 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005ada:	f7ff f95b 	bl	8004d94 <vTaskSwitchContext>
	prvTaskExitError();
 8005ade:	f7ff fe83 	bl	80057e8 <prvTaskExitError>
}
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	b003      	add	sp, #12
 8005ae6:	bd30      	pop	{r4, r5, pc}
 8005ae8:	410fc271 	.word	0x410fc271
 8005aec:	410fc270 	.word	0x410fc270
 8005af0:	e000e400 	.word	0xe000e400
 8005af4:	20001474 	.word	0x20001474
 8005af8:	20001470 	.word	0x20001470
 8005afc:	2000002c 	.word	0x2000002c

08005b00 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b00:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b04:	2b0f      	cmp	r3, #15
 8005b06:	d90f      	bls.n	8005b28 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b08:	4a11      	ldr	r2, [pc, #68]	@ (8005b50 <vPortValidateInterruptPriority+0x50>)
 8005b0a:	5c9b      	ldrb	r3, [r3, r2]
 8005b0c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b0e:	4a11      	ldr	r2, [pc, #68]	@ (8005b54 <vPortValidateInterruptPriority+0x54>)
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d908      	bls.n	8005b28 <vPortValidateInterruptPriority+0x28>
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	e7fe      	b.n	8005b26 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005b2c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8005b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b34:	4a08      	ldr	r2, [pc, #32]	@ (8005b58 <vPortValidateInterruptPriority+0x58>)
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d908      	bls.n	8005b4e <vPortValidateInterruptPriority+0x4e>
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	e7fe      	b.n	8005b4c <vPortValidateInterruptPriority+0x4c>
	}
 8005b4e:	4770      	bx	lr
 8005b50:	e000e3f0 	.word	0xe000e3f0
 8005b54:	20001474 	.word	0x20001474
 8005b58:	20001470 	.word	0x20001470

08005b5c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b5c:	4a12      	ldr	r2, [pc, #72]	@ (8005ba8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b5e:	f012 0f07 	tst.w	r2, #7
 8005b62:	d01e      	beq.n	8005ba2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b64:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b66:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b6a:	f5c1 3380 	rsb	r3, r1, #65536	@ 0x10000
 8005b6e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b70:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b72:	480e      	ldr	r0, [pc, #56]	@ (8005bac <prvHeapInit+0x50>)
 8005b74:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b76:	2100      	movs	r1, #0
 8005b78:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b7a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005b7c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b7e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005b82:	480b      	ldr	r0, [pc, #44]	@ (8005bb0 <prvHeapInit+0x54>)
 8005b84:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005b86:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b88:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b8a:	1a99      	subs	r1, r3, r2
 8005b8c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b8e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b90:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <prvHeapInit+0x58>)
 8005b92:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b94:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <prvHeapInit+0x5c>)
 8005b96:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b98:	4b08      	ldr	r3, [pc, #32]	@ (8005bbc <prvHeapInit+0x60>)
 8005b9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ba6:	e7e4      	b.n	8005b72 <prvHeapInit+0x16>
 8005ba8:	10000000 	.word	0x10000000
 8005bac:	20001490 	.word	0x20001490
 8005bb0:	2000148c 	.word	0x2000148c
 8005bb4:	20001484 	.word	0x20001484
 8005bb8:	20001488 	.word	0x20001488
 8005bbc:	20001478 	.word	0x20001478

08005bc0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bc0:	4b16      	ldr	r3, [pc, #88]	@ (8005c1c <prvInsertBlockIntoFreeList+0x5c>)
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4283      	cmp	r3, r0
 8005bc8:	d3fb      	bcc.n	8005bc2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bca:	6851      	ldr	r1, [r2, #4]
 8005bcc:	eb02 0c01 	add.w	ip, r2, r1
 8005bd0:	4584      	cmp	ip, r0
 8005bd2:	d009      	beq.n	8005be8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bd4:	6841      	ldr	r1, [r0, #4]
 8005bd6:	eb00 0c01 	add.w	ip, r0, r1
 8005bda:	4563      	cmp	r3, ip
 8005bdc:	d009      	beq.n	8005bf2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bde:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005be0:	4290      	cmp	r0, r2
 8005be2:	d019      	beq.n	8005c18 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005be4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005be6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005be8:	6840      	ldr	r0, [r0, #4]
 8005bea:	4401      	add	r1, r0
 8005bec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005bee:	4610      	mov	r0, r2
 8005bf0:	e7f0      	b.n	8005bd4 <prvInsertBlockIntoFreeList+0x14>
{
 8005bf2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8005c20 <prvInsertBlockIntoFreeList+0x60>)
 8005bf6:	6824      	ldr	r4, [r4, #0]
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d00b      	beq.n	8005c14 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4419      	add	r1, r3
 8005c00:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005c08:	4290      	cmp	r0, r2
 8005c0a:	d000      	beq.n	8005c0e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c0c:	6010      	str	r0, [r2, #0]
	}
}
 8005c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c12:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c14:	6004      	str	r4, [r0, #0]
 8005c16:	e7f7      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x48>
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20001490 	.word	0x20001490
 8005c20:	2000148c 	.word	0x2000148c

08005c24 <pvPortMalloc>:
{
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005c28:	f7fe ff6a 	bl	8004b00 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005c2c:	4b38      	ldr	r3, [pc, #224]	@ (8005d10 <pvPortMalloc+0xec>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	b1b3      	cbz	r3, 8005c60 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c32:	4b38      	ldr	r3, [pc, #224]	@ (8005d14 <pvPortMalloc+0xf0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	421c      	tst	r4, r3
 8005c38:	d150      	bne.n	8005cdc <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	d050      	beq.n	8005ce0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8005c3e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c42:	f014 0f07 	tst.w	r4, #7
 8005c46:	d002      	beq.n	8005c4e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c48:	f022 0207 	bic.w	r2, r2, #7
 8005c4c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c4e:	2a00      	cmp	r2, #0
 8005c50:	d055      	beq.n	8005cfe <pvPortMalloc+0xda>
 8005c52:	4b31      	ldr	r3, [pc, #196]	@ (8005d18 <pvPortMalloc+0xf4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d353      	bcc.n	8005d02 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8005c5a:	4930      	ldr	r1, [pc, #192]	@ (8005d1c <pvPortMalloc+0xf8>)
 8005c5c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c5e:	e004      	b.n	8005c6a <pvPortMalloc+0x46>
			prvHeapInit();
 8005c60:	f7ff ff7c 	bl	8005b5c <prvHeapInit>
 8005c64:	e7e5      	b.n	8005c32 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8005c66:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c68:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c6a:	6863      	ldr	r3, [r4, #4]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d202      	bcs.n	8005c76 <pvPortMalloc+0x52>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f7      	bne.n	8005c66 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005c76:	4b26      	ldr	r3, [pc, #152]	@ (8005d10 <pvPortMalloc+0xec>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	42a3      	cmp	r3, r4
 8005c7c:	d043      	beq.n	8005d06 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c7e:	680d      	ldr	r5, [r1, #0]
 8005c80:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d910      	bls.n	8005cb0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c8e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c90:	f010 0f07 	tst.w	r0, #7
 8005c94:	d008      	beq.n	8005ca8 <pvPortMalloc+0x84>
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	e7fe      	b.n	8005ca6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ca8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005caa:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cac:	f7ff ff88 	bl	8005bc0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cb0:	6862      	ldr	r2, [r4, #4]
 8005cb2:	4919      	ldr	r1, [pc, #100]	@ (8005d18 <pvPortMalloc+0xf4>)
 8005cb4:	680b      	ldr	r3, [r1, #0]
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cba:	4919      	ldr	r1, [pc, #100]	@ (8005d20 <pvPortMalloc+0xfc>)
 8005cbc:	6809      	ldr	r1, [r1, #0]
 8005cbe:	428b      	cmp	r3, r1
 8005cc0:	d201      	bcs.n	8005cc6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cc2:	4917      	ldr	r1, [pc, #92]	@ (8005d20 <pvPortMalloc+0xfc>)
 8005cc4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cc6:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <pvPortMalloc+0xf0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005cd2:	4a14      	ldr	r2, [pc, #80]	@ (8005d24 <pvPortMalloc+0x100>)
 8005cd4:	6813      	ldr	r3, [r2, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e002      	b.n	8005ce2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8005cdc:	2500      	movs	r5, #0
 8005cde:	e000      	b.n	8005ce2 <pvPortMalloc+0xbe>
 8005ce0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8005ce2:	f7fe ffb5 	bl	8004c50 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce6:	f015 0f07 	tst.w	r5, #7
 8005cea:	d00e      	beq.n	8005d0a <pvPortMalloc+0xe6>
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	e7fe      	b.n	8005cfc <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8005cfe:	2500      	movs	r5, #0
 8005d00:	e7ef      	b.n	8005ce2 <pvPortMalloc+0xbe>
 8005d02:	2500      	movs	r5, #0
 8005d04:	e7ed      	b.n	8005ce2 <pvPortMalloc+0xbe>
 8005d06:	2500      	movs	r5, #0
 8005d08:	e7eb      	b.n	8005ce2 <pvPortMalloc+0xbe>
}
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	bd38      	pop	{r3, r4, r5, pc}
 8005d0e:	bf00      	nop
 8005d10:	2000148c 	.word	0x2000148c
 8005d14:	20001478 	.word	0x20001478
 8005d18:	20001488 	.word	0x20001488
 8005d1c:	20001490 	.word	0x20001490
 8005d20:	20001484 	.word	0x20001484
 8005d24:	20001480 	.word	0x20001480

08005d28 <vPortFree>:
	if( pv != NULL )
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d034      	beq.n	8005d96 <vPortFree+0x6e>
{
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8005d30:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d34:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <vPortFree+0x70>)
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	4213      	tst	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <vPortFree+0x2a>
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	e7fe      	b.n	8005d50 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d52:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005d56:	b141      	cbz	r1, 8005d6a <vPortFree+0x42>
 8005d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	e7fe      	b.n	8005d68 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d6a:	ea23 0302 	bic.w	r3, r3, r2
 8005d6e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005d72:	f7fe fec5 	bl	8004b00 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d76:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005d7a:	4a08      	ldr	r2, [pc, #32]	@ (8005d9c <vPortFree+0x74>)
 8005d7c:	6813      	ldr	r3, [r2, #0]
 8005d7e:	440b      	add	r3, r1
 8005d80:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff ff1c 	bl	8005bc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d88:	4a05      	ldr	r2, [pc, #20]	@ (8005da0 <vPortFree+0x78>)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005d90:	f7fe ff5e 	bl	8004c50 <xTaskResumeAll>
}
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	4770      	bx	lr
 8005d98:	20001478 	.word	0x20001478
 8005d9c:	20001488 	.word	0x20001488
 8005da0:	2000147c 	.word	0x2000147c

08005da4 <arm_cos_f32>:
 8005da4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005e2c <arm_cos_f32+0x88>
 8005da8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005dac:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005db0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005db4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005dc0:	d504      	bpl.n	8005dcc <arm_cos_f32+0x28>
 8005dc2:	ee17 3a90 	vmov	r3, s15
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005e30 <arm_cos_f32+0x8c>
 8005dd4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005dd8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005ddc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005de0:	ee17 3a90 	vmov	r3, s15
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dea:	d21a      	bcs.n	8005e22 <arm_cos_f32+0x7e>
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8005e34 <arm_cos_f32+0x90>)
 8005dfc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005e00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005e08:	ed93 7a00 	vldr	s14, [r3]
 8005e0c:	edd2 6a00 	vldr	s13, [r2]
 8005e10:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005e14:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e1c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005e20:	4770      	bx	lr
 8005e22:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005e26:	2101      	movs	r1, #1
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e7e6      	b.n	8005dfa <arm_cos_f32+0x56>
 8005e2c:	3e22f983 	.word	0x3e22f983
 8005e30:	44000000 	.word	0x44000000
 8005e34:	08008bdc 	.word	0x08008bdc

08005e38 <__cvt>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	ec57 6b10 	vmov	r6, r7, d0
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	460c      	mov	r4, r1
 8005e44:	4619      	mov	r1, r3
 8005e46:	463b      	mov	r3, r7
 8005e48:	bfbb      	ittet	lt
 8005e4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e4e:	461f      	movlt	r7, r3
 8005e50:	2300      	movge	r3, #0
 8005e52:	232d      	movlt	r3, #45	@ 0x2d
 8005e54:	700b      	strb	r3, [r1, #0]
 8005e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e5c:	4691      	mov	r9, r2
 8005e5e:	f023 0820 	bic.w	r8, r3, #32
 8005e62:	bfbc      	itt	lt
 8005e64:	4632      	movlt	r2, r6
 8005e66:	4616      	movlt	r6, r2
 8005e68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e6c:	d005      	beq.n	8005e7a <__cvt+0x42>
 8005e6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e72:	d100      	bne.n	8005e76 <__cvt+0x3e>
 8005e74:	3401      	adds	r4, #1
 8005e76:	2102      	movs	r1, #2
 8005e78:	e000      	b.n	8005e7c <__cvt+0x44>
 8005e7a:	2103      	movs	r1, #3
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	ab02      	add	r3, sp, #8
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	ec47 6b10 	vmov	d0, r6, r7
 8005e88:	4653      	mov	r3, sl
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	f000 ffa4 	bl	8006dd8 <_dtoa_r>
 8005e90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e94:	4605      	mov	r5, r0
 8005e96:	d119      	bne.n	8005ecc <__cvt+0x94>
 8005e98:	f019 0f01 	tst.w	r9, #1
 8005e9c:	d00e      	beq.n	8005ebc <__cvt+0x84>
 8005e9e:	eb00 0904 	add.w	r9, r0, r4
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	f7fa fe0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eae:	b108      	cbz	r0, 8005eb4 <__cvt+0x7c>
 8005eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005eb4:	2230      	movs	r2, #48	@ 0x30
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	454b      	cmp	r3, r9
 8005eba:	d31e      	bcc.n	8005efa <__cvt+0xc2>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ec0:	1b5b      	subs	r3, r3, r5
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	b004      	add	sp, #16
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ed0:	eb00 0904 	add.w	r9, r0, r4
 8005ed4:	d1e5      	bne.n	8005ea2 <__cvt+0x6a>
 8005ed6:	7803      	ldrb	r3, [r0, #0]
 8005ed8:	2b30      	cmp	r3, #48	@ 0x30
 8005eda:	d10a      	bne.n	8005ef2 <__cvt+0xba>
 8005edc:	2200      	movs	r2, #0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee8:	b918      	cbnz	r0, 8005ef2 <__cvt+0xba>
 8005eea:	f1c4 0401 	rsb	r4, r4, #1
 8005eee:	f8ca 4000 	str.w	r4, [sl]
 8005ef2:	f8da 3000 	ldr.w	r3, [sl]
 8005ef6:	4499      	add	r9, r3
 8005ef8:	e7d3      	b.n	8005ea2 <__cvt+0x6a>
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	9103      	str	r1, [sp, #12]
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e7d9      	b.n	8005eb6 <__cvt+0x7e>

08005f02 <__exponent>:
 8005f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f04:	2900      	cmp	r1, #0
 8005f06:	bfba      	itte	lt
 8005f08:	4249      	neglt	r1, r1
 8005f0a:	232d      	movlt	r3, #45	@ 0x2d
 8005f0c:	232b      	movge	r3, #43	@ 0x2b
 8005f0e:	2909      	cmp	r1, #9
 8005f10:	7002      	strb	r2, [r0, #0]
 8005f12:	7043      	strb	r3, [r0, #1]
 8005f14:	dd29      	ble.n	8005f6a <__exponent+0x68>
 8005f16:	f10d 0307 	add.w	r3, sp, #7
 8005f1a:	461d      	mov	r5, r3
 8005f1c:	270a      	movs	r7, #10
 8005f1e:	461a      	mov	r2, r3
 8005f20:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f24:	fb07 1416 	mls	r4, r7, r6, r1
 8005f28:	3430      	adds	r4, #48	@ 0x30
 8005f2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f2e:	460c      	mov	r4, r1
 8005f30:	2c63      	cmp	r4, #99	@ 0x63
 8005f32:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005f36:	4631      	mov	r1, r6
 8005f38:	dcf1      	bgt.n	8005f1e <__exponent+0x1c>
 8005f3a:	3130      	adds	r1, #48	@ 0x30
 8005f3c:	1e94      	subs	r4, r2, #2
 8005f3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f42:	1c41      	adds	r1, r0, #1
 8005f44:	4623      	mov	r3, r4
 8005f46:	42ab      	cmp	r3, r5
 8005f48:	d30a      	bcc.n	8005f60 <__exponent+0x5e>
 8005f4a:	f10d 0309 	add.w	r3, sp, #9
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	42ac      	cmp	r4, r5
 8005f52:	bf88      	it	hi
 8005f54:	2300      	movhi	r3, #0
 8005f56:	3302      	adds	r3, #2
 8005f58:	4403      	add	r3, r0
 8005f5a:	1a18      	subs	r0, r3, r0
 8005f5c:	b003      	add	sp, #12
 8005f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f68:	e7ed      	b.n	8005f46 <__exponent+0x44>
 8005f6a:	2330      	movs	r3, #48	@ 0x30
 8005f6c:	3130      	adds	r1, #48	@ 0x30
 8005f6e:	7083      	strb	r3, [r0, #2]
 8005f70:	70c1      	strb	r1, [r0, #3]
 8005f72:	1d03      	adds	r3, r0, #4
 8005f74:	e7f1      	b.n	8005f5a <__exponent+0x58>
	...

08005f78 <_printf_float>:
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	b08d      	sub	sp, #52	@ 0x34
 8005f7e:	460c      	mov	r4, r1
 8005f80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f84:	4616      	mov	r6, r2
 8005f86:	461f      	mov	r7, r3
 8005f88:	4605      	mov	r5, r0
 8005f8a:	f000 fdbf 	bl	8006b0c <_localeconv_r>
 8005f8e:	6803      	ldr	r3, [r0, #0]
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fa f96c 	bl	8000270 <strlen>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa0:	9005      	str	r0, [sp, #20]
 8005fa2:	3307      	adds	r3, #7
 8005fa4:	f023 0307 	bic.w	r3, r3, #7
 8005fa8:	f103 0208 	add.w	r2, r3, #8
 8005fac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fb0:	f8d4 b000 	ldr.w	fp, [r4]
 8005fb4:	f8c8 2000 	str.w	r2, [r8]
 8005fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fc0:	9307      	str	r3, [sp, #28]
 8005fc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fce:	4b9c      	ldr	r3, [pc, #624]	@ (8006240 <_printf_float+0x2c8>)
 8005fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fd4:	f7fa fdaa 	bl	8000b2c <__aeabi_dcmpun>
 8005fd8:	bb70      	cbnz	r0, 8006038 <_printf_float+0xc0>
 8005fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fde:	4b98      	ldr	r3, [pc, #608]	@ (8006240 <_printf_float+0x2c8>)
 8005fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fe4:	f7fa fd84 	bl	8000af0 <__aeabi_dcmple>
 8005fe8:	bb30      	cbnz	r0, 8006038 <_printf_float+0xc0>
 8005fea:	2200      	movs	r2, #0
 8005fec:	2300      	movs	r3, #0
 8005fee:	4640      	mov	r0, r8
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	f7fa fd73 	bl	8000adc <__aeabi_dcmplt>
 8005ff6:	b110      	cbz	r0, 8005ffe <_printf_float+0x86>
 8005ff8:	232d      	movs	r3, #45	@ 0x2d
 8005ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ffe:	4a91      	ldr	r2, [pc, #580]	@ (8006244 <_printf_float+0x2cc>)
 8006000:	4b91      	ldr	r3, [pc, #580]	@ (8006248 <_printf_float+0x2d0>)
 8006002:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006006:	bf94      	ite	ls
 8006008:	4690      	movls	r8, r2
 800600a:	4698      	movhi	r8, r3
 800600c:	2303      	movs	r3, #3
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	f02b 0304 	bic.w	r3, fp, #4
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	f04f 0900 	mov.w	r9, #0
 800601a:	9700      	str	r7, [sp, #0]
 800601c:	4633      	mov	r3, r6
 800601e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006020:	4621      	mov	r1, r4
 8006022:	4628      	mov	r0, r5
 8006024:	f000 f9d2 	bl	80063cc <_printf_common>
 8006028:	3001      	adds	r0, #1
 800602a:	f040 808d 	bne.w	8006148 <_printf_float+0x1d0>
 800602e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006032:	b00d      	add	sp, #52	@ 0x34
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	4640      	mov	r0, r8
 800603e:	4649      	mov	r1, r9
 8006040:	f7fa fd74 	bl	8000b2c <__aeabi_dcmpun>
 8006044:	b140      	cbz	r0, 8006058 <_printf_float+0xe0>
 8006046:	464b      	mov	r3, r9
 8006048:	2b00      	cmp	r3, #0
 800604a:	bfbc      	itt	lt
 800604c:	232d      	movlt	r3, #45	@ 0x2d
 800604e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006052:	4a7e      	ldr	r2, [pc, #504]	@ (800624c <_printf_float+0x2d4>)
 8006054:	4b7e      	ldr	r3, [pc, #504]	@ (8006250 <_printf_float+0x2d8>)
 8006056:	e7d4      	b.n	8006002 <_printf_float+0x8a>
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800605e:	9206      	str	r2, [sp, #24]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	d13b      	bne.n	80060dc <_printf_float+0x164>
 8006064:	2306      	movs	r3, #6
 8006066:	6063      	str	r3, [r4, #4]
 8006068:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800606c:	2300      	movs	r3, #0
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	ab0a      	add	r3, sp, #40	@ 0x28
 8006074:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006078:	ab09      	add	r3, sp, #36	@ 0x24
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	6861      	ldr	r1, [r4, #4]
 800607e:	ec49 8b10 	vmov	d0, r8, r9
 8006082:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006086:	4628      	mov	r0, r5
 8006088:	f7ff fed6 	bl	8005e38 <__cvt>
 800608c:	9b06      	ldr	r3, [sp, #24]
 800608e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006090:	2b47      	cmp	r3, #71	@ 0x47
 8006092:	4680      	mov	r8, r0
 8006094:	d129      	bne.n	80060ea <_printf_float+0x172>
 8006096:	1cc8      	adds	r0, r1, #3
 8006098:	db02      	blt.n	80060a0 <_printf_float+0x128>
 800609a:	6863      	ldr	r3, [r4, #4]
 800609c:	4299      	cmp	r1, r3
 800609e:	dd41      	ble.n	8006124 <_printf_float+0x1ac>
 80060a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80060a4:	fa5f fa8a 	uxtb.w	sl, sl
 80060a8:	3901      	subs	r1, #1
 80060aa:	4652      	mov	r2, sl
 80060ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80060b2:	f7ff ff26 	bl	8005f02 <__exponent>
 80060b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060b8:	1813      	adds	r3, r2, r0
 80060ba:	2a01      	cmp	r2, #1
 80060bc:	4681      	mov	r9, r0
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	dc02      	bgt.n	80060c8 <_printf_float+0x150>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	07d2      	lsls	r2, r2, #31
 80060c6:	d501      	bpl.n	80060cc <_printf_float+0x154>
 80060c8:	3301      	adds	r3, #1
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0a2      	beq.n	800601a <_printf_float+0xa2>
 80060d4:	232d      	movs	r3, #45	@ 0x2d
 80060d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060da:	e79e      	b.n	800601a <_printf_float+0xa2>
 80060dc:	9a06      	ldr	r2, [sp, #24]
 80060de:	2a47      	cmp	r2, #71	@ 0x47
 80060e0:	d1c2      	bne.n	8006068 <_printf_float+0xf0>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1c0      	bne.n	8006068 <_printf_float+0xf0>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e7bd      	b.n	8006066 <_printf_float+0xee>
 80060ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ee:	d9db      	bls.n	80060a8 <_printf_float+0x130>
 80060f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060f4:	d118      	bne.n	8006128 <_printf_float+0x1b0>
 80060f6:	2900      	cmp	r1, #0
 80060f8:	6863      	ldr	r3, [r4, #4]
 80060fa:	dd0b      	ble.n	8006114 <_printf_float+0x19c>
 80060fc:	6121      	str	r1, [r4, #16]
 80060fe:	b913      	cbnz	r3, 8006106 <_printf_float+0x18e>
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	07d0      	lsls	r0, r2, #31
 8006104:	d502      	bpl.n	800610c <_printf_float+0x194>
 8006106:	3301      	adds	r3, #1
 8006108:	440b      	add	r3, r1
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800610e:	f04f 0900 	mov.w	r9, #0
 8006112:	e7db      	b.n	80060cc <_printf_float+0x154>
 8006114:	b913      	cbnz	r3, 800611c <_printf_float+0x1a4>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	07d2      	lsls	r2, r2, #31
 800611a:	d501      	bpl.n	8006120 <_printf_float+0x1a8>
 800611c:	3302      	adds	r3, #2
 800611e:	e7f4      	b.n	800610a <_printf_float+0x192>
 8006120:	2301      	movs	r3, #1
 8006122:	e7f2      	b.n	800610a <_printf_float+0x192>
 8006124:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800612a:	4299      	cmp	r1, r3
 800612c:	db05      	blt.n	800613a <_printf_float+0x1c2>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	6121      	str	r1, [r4, #16]
 8006132:	07d8      	lsls	r0, r3, #31
 8006134:	d5ea      	bpl.n	800610c <_printf_float+0x194>
 8006136:	1c4b      	adds	r3, r1, #1
 8006138:	e7e7      	b.n	800610a <_printf_float+0x192>
 800613a:	2900      	cmp	r1, #0
 800613c:	bfd4      	ite	le
 800613e:	f1c1 0202 	rsble	r2, r1, #2
 8006142:	2201      	movgt	r2, #1
 8006144:	4413      	add	r3, r2
 8006146:	e7e0      	b.n	800610a <_printf_float+0x192>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	055a      	lsls	r2, r3, #21
 800614c:	d407      	bmi.n	800615e <_printf_float+0x1e6>
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	4642      	mov	r2, r8
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	d12b      	bne.n	80061b4 <_printf_float+0x23c>
 800615c:	e767      	b.n	800602e <_printf_float+0xb6>
 800615e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006162:	f240 80dd 	bls.w	8006320 <_printf_float+0x3a8>
 8006166:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800616a:	2200      	movs	r2, #0
 800616c:	2300      	movs	r3, #0
 800616e:	f7fa fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006172:	2800      	cmp	r0, #0
 8006174:	d033      	beq.n	80061de <_printf_float+0x266>
 8006176:	4a37      	ldr	r2, [pc, #220]	@ (8006254 <_printf_float+0x2dc>)
 8006178:	2301      	movs	r3, #1
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f af54 	beq.w	800602e <_printf_float+0xb6>
 8006186:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800618a:	4543      	cmp	r3, r8
 800618c:	db02      	blt.n	8006194 <_printf_float+0x21c>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	07d8      	lsls	r0, r3, #31
 8006192:	d50f      	bpl.n	80061b4 <_printf_float+0x23c>
 8006194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af45 	beq.w	800602e <_printf_float+0xb6>
 80061a4:	f04f 0900 	mov.w	r9, #0
 80061a8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80061ac:	f104 0a1a 	add.w	sl, r4, #26
 80061b0:	45c8      	cmp	r8, r9
 80061b2:	dc09      	bgt.n	80061c8 <_printf_float+0x250>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	079b      	lsls	r3, r3, #30
 80061b8:	f100 8103 	bmi.w	80063c2 <_printf_float+0x44a>
 80061bc:	68e0      	ldr	r0, [r4, #12]
 80061be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061c0:	4298      	cmp	r0, r3
 80061c2:	bfb8      	it	lt
 80061c4:	4618      	movlt	r0, r3
 80061c6:	e734      	b.n	8006032 <_printf_float+0xba>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f af2b 	beq.w	800602e <_printf_float+0xb6>
 80061d8:	f109 0901 	add.w	r9, r9, #1
 80061dc:	e7e8      	b.n	80061b0 <_printf_float+0x238>
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dc39      	bgt.n	8006258 <_printf_float+0x2e0>
 80061e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <_printf_float+0x2dc>)
 80061e6:	2301      	movs	r3, #1
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af1d 	beq.w	800602e <_printf_float+0xb6>
 80061f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061f8:	ea59 0303 	orrs.w	r3, r9, r3
 80061fc:	d102      	bne.n	8006204 <_printf_float+0x28c>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	07d9      	lsls	r1, r3, #31
 8006202:	d5d7      	bpl.n	80061b4 <_printf_float+0x23c>
 8006204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f af0d 	beq.w	800602e <_printf_float+0xb6>
 8006214:	f04f 0a00 	mov.w	sl, #0
 8006218:	f104 0b1a 	add.w	fp, r4, #26
 800621c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800621e:	425b      	negs	r3, r3
 8006220:	4553      	cmp	r3, sl
 8006222:	dc01      	bgt.n	8006228 <_printf_float+0x2b0>
 8006224:	464b      	mov	r3, r9
 8006226:	e793      	b.n	8006150 <_printf_float+0x1d8>
 8006228:	2301      	movs	r3, #1
 800622a:	465a      	mov	r2, fp
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	47b8      	blx	r7
 8006232:	3001      	adds	r0, #1
 8006234:	f43f aefb 	beq.w	800602e <_printf_float+0xb6>
 8006238:	f10a 0a01 	add.w	sl, sl, #1
 800623c:	e7ee      	b.n	800621c <_printf_float+0x2a4>
 800623e:	bf00      	nop
 8006240:	7fefffff 	.word	0x7fefffff
 8006244:	080093e0 	.word	0x080093e0
 8006248:	080093e4 	.word	0x080093e4
 800624c:	080093e8 	.word	0x080093e8
 8006250:	080093ec 	.word	0x080093ec
 8006254:	080093f0 	.word	0x080093f0
 8006258:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800625a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800625e:	4553      	cmp	r3, sl
 8006260:	bfa8      	it	ge
 8006262:	4653      	movge	r3, sl
 8006264:	2b00      	cmp	r3, #0
 8006266:	4699      	mov	r9, r3
 8006268:	dc36      	bgt.n	80062d8 <_printf_float+0x360>
 800626a:	f04f 0b00 	mov.w	fp, #0
 800626e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006272:	f104 021a 	add.w	r2, r4, #26
 8006276:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006278:	9306      	str	r3, [sp, #24]
 800627a:	eba3 0309 	sub.w	r3, r3, r9
 800627e:	455b      	cmp	r3, fp
 8006280:	dc31      	bgt.n	80062e6 <_printf_float+0x36e>
 8006282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006284:	459a      	cmp	sl, r3
 8006286:	dc3a      	bgt.n	80062fe <_printf_float+0x386>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	07da      	lsls	r2, r3, #31
 800628c:	d437      	bmi.n	80062fe <_printf_float+0x386>
 800628e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006290:	ebaa 0903 	sub.w	r9, sl, r3
 8006294:	9b06      	ldr	r3, [sp, #24]
 8006296:	ebaa 0303 	sub.w	r3, sl, r3
 800629a:	4599      	cmp	r9, r3
 800629c:	bfa8      	it	ge
 800629e:	4699      	movge	r9, r3
 80062a0:	f1b9 0f00 	cmp.w	r9, #0
 80062a4:	dc33      	bgt.n	800630e <_printf_float+0x396>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ae:	f104 0b1a 	add.w	fp, r4, #26
 80062b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b4:	ebaa 0303 	sub.w	r3, sl, r3
 80062b8:	eba3 0309 	sub.w	r3, r3, r9
 80062bc:	4543      	cmp	r3, r8
 80062be:	f77f af79 	ble.w	80061b4 <_printf_float+0x23c>
 80062c2:	2301      	movs	r3, #1
 80062c4:	465a      	mov	r2, fp
 80062c6:	4631      	mov	r1, r6
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b8      	blx	r7
 80062cc:	3001      	adds	r0, #1
 80062ce:	f43f aeae 	beq.w	800602e <_printf_float+0xb6>
 80062d2:	f108 0801 	add.w	r8, r8, #1
 80062d6:	e7ec      	b.n	80062b2 <_printf_float+0x33a>
 80062d8:	4642      	mov	r2, r8
 80062da:	4631      	mov	r1, r6
 80062dc:	4628      	mov	r0, r5
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	d1c2      	bne.n	800626a <_printf_float+0x2f2>
 80062e4:	e6a3      	b.n	800602e <_printf_float+0xb6>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4631      	mov	r1, r6
 80062ea:	4628      	mov	r0, r5
 80062ec:	9206      	str	r2, [sp, #24]
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f ae9c 	beq.w	800602e <_printf_float+0xb6>
 80062f6:	9a06      	ldr	r2, [sp, #24]
 80062f8:	f10b 0b01 	add.w	fp, fp, #1
 80062fc:	e7bb      	b.n	8006276 <_printf_float+0x2fe>
 80062fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	d1c0      	bne.n	800628e <_printf_float+0x316>
 800630c:	e68f      	b.n	800602e <_printf_float+0xb6>
 800630e:	9a06      	ldr	r2, [sp, #24]
 8006310:	464b      	mov	r3, r9
 8006312:	4442      	add	r2, r8
 8006314:	4631      	mov	r1, r6
 8006316:	4628      	mov	r0, r5
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	d1c3      	bne.n	80062a6 <_printf_float+0x32e>
 800631e:	e686      	b.n	800602e <_printf_float+0xb6>
 8006320:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006324:	f1ba 0f01 	cmp.w	sl, #1
 8006328:	dc01      	bgt.n	800632e <_printf_float+0x3b6>
 800632a:	07db      	lsls	r3, r3, #31
 800632c:	d536      	bpl.n	800639c <_printf_float+0x424>
 800632e:	2301      	movs	r3, #1
 8006330:	4642      	mov	r2, r8
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f ae78 	beq.w	800602e <_printf_float+0xb6>
 800633e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	f43f ae70 	beq.w	800602e <_printf_float+0xb6>
 800634e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800635a:	f7fa fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800635e:	b9c0      	cbnz	r0, 8006392 <_printf_float+0x41a>
 8006360:	4653      	mov	r3, sl
 8006362:	f108 0201 	add.w	r2, r8, #1
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	d10c      	bne.n	800638a <_printf_float+0x412>
 8006370:	e65d      	b.n	800602e <_printf_float+0xb6>
 8006372:	2301      	movs	r3, #1
 8006374:	465a      	mov	r2, fp
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	f43f ae56 	beq.w	800602e <_printf_float+0xb6>
 8006382:	f108 0801 	add.w	r8, r8, #1
 8006386:	45d0      	cmp	r8, sl
 8006388:	dbf3      	blt.n	8006372 <_printf_float+0x3fa>
 800638a:	464b      	mov	r3, r9
 800638c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006390:	e6df      	b.n	8006152 <_printf_float+0x1da>
 8006392:	f04f 0800 	mov.w	r8, #0
 8006396:	f104 0b1a 	add.w	fp, r4, #26
 800639a:	e7f4      	b.n	8006386 <_printf_float+0x40e>
 800639c:	2301      	movs	r3, #1
 800639e:	4642      	mov	r2, r8
 80063a0:	e7e1      	b.n	8006366 <_printf_float+0x3ee>
 80063a2:	2301      	movs	r3, #1
 80063a4:	464a      	mov	r2, r9
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	f43f ae3e 	beq.w	800602e <_printf_float+0xb6>
 80063b2:	f108 0801 	add.w	r8, r8, #1
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063ba:	1a5b      	subs	r3, r3, r1
 80063bc:	4543      	cmp	r3, r8
 80063be:	dcf0      	bgt.n	80063a2 <_printf_float+0x42a>
 80063c0:	e6fc      	b.n	80061bc <_printf_float+0x244>
 80063c2:	f04f 0800 	mov.w	r8, #0
 80063c6:	f104 0919 	add.w	r9, r4, #25
 80063ca:	e7f4      	b.n	80063b6 <_printf_float+0x43e>

080063cc <_printf_common>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	4616      	mov	r6, r2
 80063d2:	4698      	mov	r8, r3
 80063d4:	688a      	ldr	r2, [r1, #8]
 80063d6:	690b      	ldr	r3, [r1, #16]
 80063d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063dc:	4293      	cmp	r3, r2
 80063de:	bfb8      	it	lt
 80063e0:	4613      	movlt	r3, r2
 80063e2:	6033      	str	r3, [r6, #0]
 80063e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063e8:	4607      	mov	r7, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	b10a      	cbz	r2, 80063f2 <_printf_common+0x26>
 80063ee:	3301      	adds	r3, #1
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	0699      	lsls	r1, r3, #26
 80063f6:	bf42      	ittt	mi
 80063f8:	6833      	ldrmi	r3, [r6, #0]
 80063fa:	3302      	addmi	r3, #2
 80063fc:	6033      	strmi	r3, [r6, #0]
 80063fe:	6825      	ldr	r5, [r4, #0]
 8006400:	f015 0506 	ands.w	r5, r5, #6
 8006404:	d106      	bne.n	8006414 <_printf_common+0x48>
 8006406:	f104 0a19 	add.w	sl, r4, #25
 800640a:	68e3      	ldr	r3, [r4, #12]
 800640c:	6832      	ldr	r2, [r6, #0]
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	42ab      	cmp	r3, r5
 8006412:	dc26      	bgt.n	8006462 <_printf_common+0x96>
 8006414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006418:	6822      	ldr	r2, [r4, #0]
 800641a:	3b00      	subs	r3, #0
 800641c:	bf18      	it	ne
 800641e:	2301      	movne	r3, #1
 8006420:	0692      	lsls	r2, r2, #26
 8006422:	d42b      	bmi.n	800647c <_printf_common+0xb0>
 8006424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006428:	4641      	mov	r1, r8
 800642a:	4638      	mov	r0, r7
 800642c:	47c8      	blx	r9
 800642e:	3001      	adds	r0, #1
 8006430:	d01e      	beq.n	8006470 <_printf_common+0xa4>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	6922      	ldr	r2, [r4, #16]
 8006436:	f003 0306 	and.w	r3, r3, #6
 800643a:	2b04      	cmp	r3, #4
 800643c:	bf02      	ittt	eq
 800643e:	68e5      	ldreq	r5, [r4, #12]
 8006440:	6833      	ldreq	r3, [r6, #0]
 8006442:	1aed      	subeq	r5, r5, r3
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	bf0c      	ite	eq
 8006448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800644c:	2500      	movne	r5, #0
 800644e:	4293      	cmp	r3, r2
 8006450:	bfc4      	itt	gt
 8006452:	1a9b      	subgt	r3, r3, r2
 8006454:	18ed      	addgt	r5, r5, r3
 8006456:	2600      	movs	r6, #0
 8006458:	341a      	adds	r4, #26
 800645a:	42b5      	cmp	r5, r6
 800645c:	d11a      	bne.n	8006494 <_printf_common+0xc8>
 800645e:	2000      	movs	r0, #0
 8006460:	e008      	b.n	8006474 <_printf_common+0xa8>
 8006462:	2301      	movs	r3, #1
 8006464:	4652      	mov	r2, sl
 8006466:	4641      	mov	r1, r8
 8006468:	4638      	mov	r0, r7
 800646a:	47c8      	blx	r9
 800646c:	3001      	adds	r0, #1
 800646e:	d103      	bne.n	8006478 <_printf_common+0xac>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006478:	3501      	adds	r5, #1
 800647a:	e7c6      	b.n	800640a <_printf_common+0x3e>
 800647c:	18e1      	adds	r1, r4, r3
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	2030      	movs	r0, #48	@ 0x30
 8006482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006486:	4422      	add	r2, r4
 8006488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800648c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006490:	3302      	adds	r3, #2
 8006492:	e7c7      	b.n	8006424 <_printf_common+0x58>
 8006494:	2301      	movs	r3, #1
 8006496:	4622      	mov	r2, r4
 8006498:	4641      	mov	r1, r8
 800649a:	4638      	mov	r0, r7
 800649c:	47c8      	blx	r9
 800649e:	3001      	adds	r0, #1
 80064a0:	d0e6      	beq.n	8006470 <_printf_common+0xa4>
 80064a2:	3601      	adds	r6, #1
 80064a4:	e7d9      	b.n	800645a <_printf_common+0x8e>
	...

080064a8 <_printf_i>:
 80064a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064ac:	7e0f      	ldrb	r7, [r1, #24]
 80064ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064b0:	2f78      	cmp	r7, #120	@ 0x78
 80064b2:	4691      	mov	r9, r2
 80064b4:	4680      	mov	r8, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	469a      	mov	sl, r3
 80064ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064be:	d807      	bhi.n	80064d0 <_printf_i+0x28>
 80064c0:	2f62      	cmp	r7, #98	@ 0x62
 80064c2:	d80a      	bhi.n	80064da <_printf_i+0x32>
 80064c4:	2f00      	cmp	r7, #0
 80064c6:	f000 80d2 	beq.w	800666e <_printf_i+0x1c6>
 80064ca:	2f58      	cmp	r7, #88	@ 0x58
 80064cc:	f000 80b9 	beq.w	8006642 <_printf_i+0x19a>
 80064d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064d8:	e03a      	b.n	8006550 <_printf_i+0xa8>
 80064da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064de:	2b15      	cmp	r3, #21
 80064e0:	d8f6      	bhi.n	80064d0 <_printf_i+0x28>
 80064e2:	a101      	add	r1, pc, #4	@ (adr r1, 80064e8 <_printf_i+0x40>)
 80064e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e8:	08006541 	.word	0x08006541
 80064ec:	08006555 	.word	0x08006555
 80064f0:	080064d1 	.word	0x080064d1
 80064f4:	080064d1 	.word	0x080064d1
 80064f8:	080064d1 	.word	0x080064d1
 80064fc:	080064d1 	.word	0x080064d1
 8006500:	08006555 	.word	0x08006555
 8006504:	080064d1 	.word	0x080064d1
 8006508:	080064d1 	.word	0x080064d1
 800650c:	080064d1 	.word	0x080064d1
 8006510:	080064d1 	.word	0x080064d1
 8006514:	08006655 	.word	0x08006655
 8006518:	0800657f 	.word	0x0800657f
 800651c:	0800660f 	.word	0x0800660f
 8006520:	080064d1 	.word	0x080064d1
 8006524:	080064d1 	.word	0x080064d1
 8006528:	08006677 	.word	0x08006677
 800652c:	080064d1 	.word	0x080064d1
 8006530:	0800657f 	.word	0x0800657f
 8006534:	080064d1 	.word	0x080064d1
 8006538:	080064d1 	.word	0x080064d1
 800653c:	08006617 	.word	0x08006617
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	1d1a      	adds	r2, r3, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6032      	str	r2, [r6, #0]
 8006548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800654c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006550:	2301      	movs	r3, #1
 8006552:	e09d      	b.n	8006690 <_printf_i+0x1e8>
 8006554:	6833      	ldr	r3, [r6, #0]
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	1d19      	adds	r1, r3, #4
 800655a:	6031      	str	r1, [r6, #0]
 800655c:	0606      	lsls	r6, r0, #24
 800655e:	d501      	bpl.n	8006564 <_printf_i+0xbc>
 8006560:	681d      	ldr	r5, [r3, #0]
 8006562:	e003      	b.n	800656c <_printf_i+0xc4>
 8006564:	0645      	lsls	r5, r0, #25
 8006566:	d5fb      	bpl.n	8006560 <_printf_i+0xb8>
 8006568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800656c:	2d00      	cmp	r5, #0
 800656e:	da03      	bge.n	8006578 <_printf_i+0xd0>
 8006570:	232d      	movs	r3, #45	@ 0x2d
 8006572:	426d      	negs	r5, r5
 8006574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006578:	4859      	ldr	r0, [pc, #356]	@ (80066e0 <_printf_i+0x238>)
 800657a:	230a      	movs	r3, #10
 800657c:	e011      	b.n	80065a2 <_printf_i+0xfa>
 800657e:	6821      	ldr	r1, [r4, #0]
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	0608      	lsls	r0, r1, #24
 8006584:	f853 5b04 	ldr.w	r5, [r3], #4
 8006588:	d402      	bmi.n	8006590 <_printf_i+0xe8>
 800658a:	0649      	lsls	r1, r1, #25
 800658c:	bf48      	it	mi
 800658e:	b2ad      	uxthmi	r5, r5
 8006590:	2f6f      	cmp	r7, #111	@ 0x6f
 8006592:	4853      	ldr	r0, [pc, #332]	@ (80066e0 <_printf_i+0x238>)
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	bf14      	ite	ne
 8006598:	230a      	movne	r3, #10
 800659a:	2308      	moveq	r3, #8
 800659c:	2100      	movs	r1, #0
 800659e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065a2:	6866      	ldr	r6, [r4, #4]
 80065a4:	60a6      	str	r6, [r4, #8]
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	bfa2      	ittt	ge
 80065aa:	6821      	ldrge	r1, [r4, #0]
 80065ac:	f021 0104 	bicge.w	r1, r1, #4
 80065b0:	6021      	strge	r1, [r4, #0]
 80065b2:	b90d      	cbnz	r5, 80065b8 <_printf_i+0x110>
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d04b      	beq.n	8006650 <_printf_i+0x1a8>
 80065b8:	4616      	mov	r6, r2
 80065ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80065be:	fb03 5711 	mls	r7, r3, r1, r5
 80065c2:	5dc7      	ldrb	r7, [r0, r7]
 80065c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065c8:	462f      	mov	r7, r5
 80065ca:	42bb      	cmp	r3, r7
 80065cc:	460d      	mov	r5, r1
 80065ce:	d9f4      	bls.n	80065ba <_printf_i+0x112>
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d10b      	bne.n	80065ec <_printf_i+0x144>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	07df      	lsls	r7, r3, #31
 80065d8:	d508      	bpl.n	80065ec <_printf_i+0x144>
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	6861      	ldr	r1, [r4, #4]
 80065de:	4299      	cmp	r1, r3
 80065e0:	bfde      	ittt	le
 80065e2:	2330      	movle	r3, #48	@ 0x30
 80065e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065ec:	1b92      	subs	r2, r2, r6
 80065ee:	6122      	str	r2, [r4, #16]
 80065f0:	f8cd a000 	str.w	sl, [sp]
 80065f4:	464b      	mov	r3, r9
 80065f6:	aa03      	add	r2, sp, #12
 80065f8:	4621      	mov	r1, r4
 80065fa:	4640      	mov	r0, r8
 80065fc:	f7ff fee6 	bl	80063cc <_printf_common>
 8006600:	3001      	adds	r0, #1
 8006602:	d14a      	bne.n	800669a <_printf_i+0x1f2>
 8006604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006608:	b004      	add	sp, #16
 800660a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	f043 0320 	orr.w	r3, r3, #32
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	4833      	ldr	r0, [pc, #204]	@ (80066e4 <_printf_i+0x23c>)
 8006618:	2778      	movs	r7, #120	@ 0x78
 800661a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	6831      	ldr	r1, [r6, #0]
 8006622:	061f      	lsls	r7, r3, #24
 8006624:	f851 5b04 	ldr.w	r5, [r1], #4
 8006628:	d402      	bmi.n	8006630 <_printf_i+0x188>
 800662a:	065f      	lsls	r7, r3, #25
 800662c:	bf48      	it	mi
 800662e:	b2ad      	uxthmi	r5, r5
 8006630:	6031      	str	r1, [r6, #0]
 8006632:	07d9      	lsls	r1, r3, #31
 8006634:	bf44      	itt	mi
 8006636:	f043 0320 	orrmi.w	r3, r3, #32
 800663a:	6023      	strmi	r3, [r4, #0]
 800663c:	b11d      	cbz	r5, 8006646 <_printf_i+0x19e>
 800663e:	2310      	movs	r3, #16
 8006640:	e7ac      	b.n	800659c <_printf_i+0xf4>
 8006642:	4827      	ldr	r0, [pc, #156]	@ (80066e0 <_printf_i+0x238>)
 8006644:	e7e9      	b.n	800661a <_printf_i+0x172>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f023 0320 	bic.w	r3, r3, #32
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	e7f6      	b.n	800663e <_printf_i+0x196>
 8006650:	4616      	mov	r6, r2
 8006652:	e7bd      	b.n	80065d0 <_printf_i+0x128>
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	6825      	ldr	r5, [r4, #0]
 8006658:	6961      	ldr	r1, [r4, #20]
 800665a:	1d18      	adds	r0, r3, #4
 800665c:	6030      	str	r0, [r6, #0]
 800665e:	062e      	lsls	r6, r5, #24
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	d501      	bpl.n	8006668 <_printf_i+0x1c0>
 8006664:	6019      	str	r1, [r3, #0]
 8006666:	e002      	b.n	800666e <_printf_i+0x1c6>
 8006668:	0668      	lsls	r0, r5, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0x1bc>
 800666c:	8019      	strh	r1, [r3, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	4616      	mov	r6, r2
 8006674:	e7bc      	b.n	80065f0 <_printf_i+0x148>
 8006676:	6833      	ldr	r3, [r6, #0]
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	6032      	str	r2, [r6, #0]
 800667c:	681e      	ldr	r6, [r3, #0]
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	2100      	movs	r1, #0
 8006682:	4630      	mov	r0, r6
 8006684:	f7f9 fda4 	bl	80001d0 <memchr>
 8006688:	b108      	cbz	r0, 800668e <_printf_i+0x1e6>
 800668a:	1b80      	subs	r0, r0, r6
 800668c:	6060      	str	r0, [r4, #4]
 800668e:	6863      	ldr	r3, [r4, #4]
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	2300      	movs	r3, #0
 8006694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006698:	e7aa      	b.n	80065f0 <_printf_i+0x148>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	4632      	mov	r2, r6
 800669e:	4649      	mov	r1, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	47d0      	blx	sl
 80066a4:	3001      	adds	r0, #1
 80066a6:	d0ad      	beq.n	8006604 <_printf_i+0x15c>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	079b      	lsls	r3, r3, #30
 80066ac:	d413      	bmi.n	80066d6 <_printf_i+0x22e>
 80066ae:	68e0      	ldr	r0, [r4, #12]
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	4298      	cmp	r0, r3
 80066b4:	bfb8      	it	lt
 80066b6:	4618      	movlt	r0, r3
 80066b8:	e7a6      	b.n	8006608 <_printf_i+0x160>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4632      	mov	r2, r6
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	47d0      	blx	sl
 80066c4:	3001      	adds	r0, #1
 80066c6:	d09d      	beq.n	8006604 <_printf_i+0x15c>
 80066c8:	3501      	adds	r5, #1
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	9903      	ldr	r1, [sp, #12]
 80066ce:	1a5b      	subs	r3, r3, r1
 80066d0:	42ab      	cmp	r3, r5
 80066d2:	dcf2      	bgt.n	80066ba <_printf_i+0x212>
 80066d4:	e7eb      	b.n	80066ae <_printf_i+0x206>
 80066d6:	2500      	movs	r5, #0
 80066d8:	f104 0619 	add.w	r6, r4, #25
 80066dc:	e7f5      	b.n	80066ca <_printf_i+0x222>
 80066de:	bf00      	nop
 80066e0:	080093f2 	.word	0x080093f2
 80066e4:	08009403 	.word	0x08009403

080066e8 <std>:
 80066e8:	2300      	movs	r3, #0
 80066ea:	b510      	push	{r4, lr}
 80066ec:	4604      	mov	r4, r0
 80066ee:	e9c0 3300 	strd	r3, r3, [r0]
 80066f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066f6:	6083      	str	r3, [r0, #8]
 80066f8:	8181      	strh	r1, [r0, #12]
 80066fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80066fc:	81c2      	strh	r2, [r0, #14]
 80066fe:	6183      	str	r3, [r0, #24]
 8006700:	4619      	mov	r1, r3
 8006702:	2208      	movs	r2, #8
 8006704:	305c      	adds	r0, #92	@ 0x5c
 8006706:	f000 f9f9 	bl	8006afc <memset>
 800670a:	4b0d      	ldr	r3, [pc, #52]	@ (8006740 <std+0x58>)
 800670c:	6263      	str	r3, [r4, #36]	@ 0x24
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <std+0x5c>)
 8006710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <std+0x60>)
 8006714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <std+0x64>)
 8006718:	6323      	str	r3, [r4, #48]	@ 0x30
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x68>)
 800671c:	6224      	str	r4, [r4, #32]
 800671e:	429c      	cmp	r4, r3
 8006720:	d006      	beq.n	8006730 <std+0x48>
 8006722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006726:	4294      	cmp	r4, r2
 8006728:	d002      	beq.n	8006730 <std+0x48>
 800672a:	33d0      	adds	r3, #208	@ 0xd0
 800672c:	429c      	cmp	r4, r3
 800672e:	d105      	bne.n	800673c <std+0x54>
 8006730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006738:	f000 bab2 	b.w	8006ca0 <__retarget_lock_init_recursive>
 800673c:	bd10      	pop	{r4, pc}
 800673e:	bf00      	nop
 8006740:	0800694d 	.word	0x0800694d
 8006744:	0800696f 	.word	0x0800696f
 8006748:	080069a7 	.word	0x080069a7
 800674c:	080069cb 	.word	0x080069cb
 8006750:	20001498 	.word	0x20001498

08006754 <stdio_exit_handler>:
 8006754:	4a02      	ldr	r2, [pc, #8]	@ (8006760 <stdio_exit_handler+0xc>)
 8006756:	4903      	ldr	r1, [pc, #12]	@ (8006764 <stdio_exit_handler+0x10>)
 8006758:	4803      	ldr	r0, [pc, #12]	@ (8006768 <stdio_exit_handler+0x14>)
 800675a:	f000 b869 	b.w	8006830 <_fwalk_sglue>
 800675e:	bf00      	nop
 8006760:	20000030 	.word	0x20000030
 8006764:	080085f1 	.word	0x080085f1
 8006768:	20000040 	.word	0x20000040

0800676c <cleanup_stdio>:
 800676c:	6841      	ldr	r1, [r0, #4]
 800676e:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <cleanup_stdio+0x34>)
 8006770:	4299      	cmp	r1, r3
 8006772:	b510      	push	{r4, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	d001      	beq.n	800677c <cleanup_stdio+0x10>
 8006778:	f001 ff3a 	bl	80085f0 <_fflush_r>
 800677c:	68a1      	ldr	r1, [r4, #8]
 800677e:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <cleanup_stdio+0x38>)
 8006780:	4299      	cmp	r1, r3
 8006782:	d002      	beq.n	800678a <cleanup_stdio+0x1e>
 8006784:	4620      	mov	r0, r4
 8006786:	f001 ff33 	bl	80085f0 <_fflush_r>
 800678a:	68e1      	ldr	r1, [r4, #12]
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <cleanup_stdio+0x3c>)
 800678e:	4299      	cmp	r1, r3
 8006790:	d004      	beq.n	800679c <cleanup_stdio+0x30>
 8006792:	4620      	mov	r0, r4
 8006794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006798:	f001 bf2a 	b.w	80085f0 <_fflush_r>
 800679c:	bd10      	pop	{r4, pc}
 800679e:	bf00      	nop
 80067a0:	20001498 	.word	0x20001498
 80067a4:	20001500 	.word	0x20001500
 80067a8:	20001568 	.word	0x20001568

080067ac <global_stdio_init.part.0>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	4b0b      	ldr	r3, [pc, #44]	@ (80067dc <global_stdio_init.part.0+0x30>)
 80067b0:	4c0b      	ldr	r4, [pc, #44]	@ (80067e0 <global_stdio_init.part.0+0x34>)
 80067b2:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <global_stdio_init.part.0+0x38>)
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	4620      	mov	r0, r4
 80067b8:	2200      	movs	r2, #0
 80067ba:	2104      	movs	r1, #4
 80067bc:	f7ff ff94 	bl	80066e8 <std>
 80067c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067c4:	2201      	movs	r2, #1
 80067c6:	2109      	movs	r1, #9
 80067c8:	f7ff ff8e 	bl	80066e8 <std>
 80067cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067d0:	2202      	movs	r2, #2
 80067d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d6:	2112      	movs	r1, #18
 80067d8:	f7ff bf86 	b.w	80066e8 <std>
 80067dc:	200015d0 	.word	0x200015d0
 80067e0:	20001498 	.word	0x20001498
 80067e4:	08006755 	.word	0x08006755

080067e8 <__sfp_lock_acquire>:
 80067e8:	4801      	ldr	r0, [pc, #4]	@ (80067f0 <__sfp_lock_acquire+0x8>)
 80067ea:	f000 ba5a 	b.w	8006ca2 <__retarget_lock_acquire_recursive>
 80067ee:	bf00      	nop
 80067f0:	200015d9 	.word	0x200015d9

080067f4 <__sfp_lock_release>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__sfp_lock_release+0x8>)
 80067f6:	f000 ba55 	b.w	8006ca4 <__retarget_lock_release_recursive>
 80067fa:	bf00      	nop
 80067fc:	200015d9 	.word	0x200015d9

08006800 <__sinit>:
 8006800:	b510      	push	{r4, lr}
 8006802:	4604      	mov	r4, r0
 8006804:	f7ff fff0 	bl	80067e8 <__sfp_lock_acquire>
 8006808:	6a23      	ldr	r3, [r4, #32]
 800680a:	b11b      	cbz	r3, 8006814 <__sinit+0x14>
 800680c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006810:	f7ff bff0 	b.w	80067f4 <__sfp_lock_release>
 8006814:	4b04      	ldr	r3, [pc, #16]	@ (8006828 <__sinit+0x28>)
 8006816:	6223      	str	r3, [r4, #32]
 8006818:	4b04      	ldr	r3, [pc, #16]	@ (800682c <__sinit+0x2c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f5      	bne.n	800680c <__sinit+0xc>
 8006820:	f7ff ffc4 	bl	80067ac <global_stdio_init.part.0>
 8006824:	e7f2      	b.n	800680c <__sinit+0xc>
 8006826:	bf00      	nop
 8006828:	0800676d 	.word	0x0800676d
 800682c:	200015d0 	.word	0x200015d0

08006830 <_fwalk_sglue>:
 8006830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006834:	4607      	mov	r7, r0
 8006836:	4688      	mov	r8, r1
 8006838:	4614      	mov	r4, r2
 800683a:	2600      	movs	r6, #0
 800683c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006840:	f1b9 0901 	subs.w	r9, r9, #1
 8006844:	d505      	bpl.n	8006852 <_fwalk_sglue+0x22>
 8006846:	6824      	ldr	r4, [r4, #0]
 8006848:	2c00      	cmp	r4, #0
 800684a:	d1f7      	bne.n	800683c <_fwalk_sglue+0xc>
 800684c:	4630      	mov	r0, r6
 800684e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d907      	bls.n	8006868 <_fwalk_sglue+0x38>
 8006858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800685c:	3301      	adds	r3, #1
 800685e:	d003      	beq.n	8006868 <_fwalk_sglue+0x38>
 8006860:	4629      	mov	r1, r5
 8006862:	4638      	mov	r0, r7
 8006864:	47c0      	blx	r8
 8006866:	4306      	orrs	r6, r0
 8006868:	3568      	adds	r5, #104	@ 0x68
 800686a:	e7e9      	b.n	8006840 <_fwalk_sglue+0x10>

0800686c <iprintf>:
 800686c:	b40f      	push	{r0, r1, r2, r3}
 800686e:	b507      	push	{r0, r1, r2, lr}
 8006870:	4906      	ldr	r1, [pc, #24]	@ (800688c <iprintf+0x20>)
 8006872:	ab04      	add	r3, sp, #16
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	f853 2b04 	ldr.w	r2, [r3], #4
 800687a:	6881      	ldr	r1, [r0, #8]
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	f001 fd1b 	bl	80082b8 <_vfiprintf_r>
 8006882:	b003      	add	sp, #12
 8006884:	f85d eb04 	ldr.w	lr, [sp], #4
 8006888:	b004      	add	sp, #16
 800688a:	4770      	bx	lr
 800688c:	2000003c 	.word	0x2000003c

08006890 <_puts_r>:
 8006890:	6a03      	ldr	r3, [r0, #32]
 8006892:	b570      	push	{r4, r5, r6, lr}
 8006894:	6884      	ldr	r4, [r0, #8]
 8006896:	4605      	mov	r5, r0
 8006898:	460e      	mov	r6, r1
 800689a:	b90b      	cbnz	r3, 80068a0 <_puts_r+0x10>
 800689c:	f7ff ffb0 	bl	8006800 <__sinit>
 80068a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068a2:	07db      	lsls	r3, r3, #31
 80068a4:	d405      	bmi.n	80068b2 <_puts_r+0x22>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	0598      	lsls	r0, r3, #22
 80068aa:	d402      	bmi.n	80068b2 <_puts_r+0x22>
 80068ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ae:	f000 f9f8 	bl	8006ca2 <__retarget_lock_acquire_recursive>
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	0719      	lsls	r1, r3, #28
 80068b6:	d502      	bpl.n	80068be <_puts_r+0x2e>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d135      	bne.n	800692a <_puts_r+0x9a>
 80068be:	4621      	mov	r1, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 f8c5 	bl	8006a50 <__swsetup_r>
 80068c6:	b380      	cbz	r0, 800692a <_puts_r+0x9a>
 80068c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80068cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068ce:	07da      	lsls	r2, r3, #31
 80068d0:	d405      	bmi.n	80068de <_puts_r+0x4e>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	d402      	bmi.n	80068de <_puts_r+0x4e>
 80068d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068da:	f000 f9e3 	bl	8006ca4 <__retarget_lock_release_recursive>
 80068de:	4628      	mov	r0, r5
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da04      	bge.n	80068f0 <_puts_r+0x60>
 80068e6:	69a2      	ldr	r2, [r4, #24]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	dc17      	bgt.n	800691c <_puts_r+0x8c>
 80068ec:	290a      	cmp	r1, #10
 80068ee:	d015      	beq.n	800691c <_puts_r+0x8c>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	6022      	str	r2, [r4, #0]
 80068f6:	7019      	strb	r1, [r3, #0]
 80068f8:	68a3      	ldr	r3, [r4, #8]
 80068fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068fe:	3b01      	subs	r3, #1
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	2900      	cmp	r1, #0
 8006904:	d1ed      	bne.n	80068e2 <_puts_r+0x52>
 8006906:	2b00      	cmp	r3, #0
 8006908:	da11      	bge.n	800692e <_puts_r+0x9e>
 800690a:	4622      	mov	r2, r4
 800690c:	210a      	movs	r1, #10
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f85f 	bl	80069d2 <__swbuf_r>
 8006914:	3001      	adds	r0, #1
 8006916:	d0d7      	beq.n	80068c8 <_puts_r+0x38>
 8006918:	250a      	movs	r5, #10
 800691a:	e7d7      	b.n	80068cc <_puts_r+0x3c>
 800691c:	4622      	mov	r2, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 f857 	bl	80069d2 <__swbuf_r>
 8006924:	3001      	adds	r0, #1
 8006926:	d1e7      	bne.n	80068f8 <_puts_r+0x68>
 8006928:	e7ce      	b.n	80068c8 <_puts_r+0x38>
 800692a:	3e01      	subs	r6, #1
 800692c:	e7e4      	b.n	80068f8 <_puts_r+0x68>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	220a      	movs	r2, #10
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e7ee      	b.n	8006918 <_puts_r+0x88>
	...

0800693c <puts>:
 800693c:	4b02      	ldr	r3, [pc, #8]	@ (8006948 <puts+0xc>)
 800693e:	4601      	mov	r1, r0
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	f7ff bfa5 	b.w	8006890 <_puts_r>
 8006946:	bf00      	nop
 8006948:	2000003c 	.word	0x2000003c

0800694c <__sread>:
 800694c:	b510      	push	{r4, lr}
 800694e:	460c      	mov	r4, r1
 8006950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006954:	f000 f956 	bl	8006c04 <_read_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	bfab      	itete	ge
 800695c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800695e:	89a3      	ldrhlt	r3, [r4, #12]
 8006960:	181b      	addge	r3, r3, r0
 8006962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006966:	bfac      	ite	ge
 8006968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800696a:	81a3      	strhlt	r3, [r4, #12]
 800696c:	bd10      	pop	{r4, pc}

0800696e <__swrite>:
 800696e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006972:	461f      	mov	r7, r3
 8006974:	898b      	ldrh	r3, [r1, #12]
 8006976:	05db      	lsls	r3, r3, #23
 8006978:	4605      	mov	r5, r0
 800697a:	460c      	mov	r4, r1
 800697c:	4616      	mov	r6, r2
 800697e:	d505      	bpl.n	800698c <__swrite+0x1e>
 8006980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006984:	2302      	movs	r3, #2
 8006986:	2200      	movs	r2, #0
 8006988:	f000 f92a 	bl	8006be0 <_lseek_r>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	4632      	mov	r2, r6
 800699a:	463b      	mov	r3, r7
 800699c:	4628      	mov	r0, r5
 800699e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a2:	f000 b941 	b.w	8006c28 <_write_r>

080069a6 <__sseek>:
 80069a6:	b510      	push	{r4, lr}
 80069a8:	460c      	mov	r4, r1
 80069aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ae:	f000 f917 	bl	8006be0 <_lseek_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	bf15      	itete	ne
 80069b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069c2:	81a3      	strheq	r3, [r4, #12]
 80069c4:	bf18      	it	ne
 80069c6:	81a3      	strhne	r3, [r4, #12]
 80069c8:	bd10      	pop	{r4, pc}

080069ca <__sclose>:
 80069ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ce:	f000 b8a1 	b.w	8006b14 <_close_r>

080069d2 <__swbuf_r>:
 80069d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d4:	460e      	mov	r6, r1
 80069d6:	4614      	mov	r4, r2
 80069d8:	4605      	mov	r5, r0
 80069da:	b118      	cbz	r0, 80069e4 <__swbuf_r+0x12>
 80069dc:	6a03      	ldr	r3, [r0, #32]
 80069de:	b90b      	cbnz	r3, 80069e4 <__swbuf_r+0x12>
 80069e0:	f7ff ff0e 	bl	8006800 <__sinit>
 80069e4:	69a3      	ldr	r3, [r4, #24]
 80069e6:	60a3      	str	r3, [r4, #8]
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	071a      	lsls	r2, r3, #28
 80069ec:	d501      	bpl.n	80069f2 <__swbuf_r+0x20>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	b943      	cbnz	r3, 8006a04 <__swbuf_r+0x32>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 f82b 	bl	8006a50 <__swsetup_r>
 80069fa:	b118      	cbz	r0, 8006a04 <__swbuf_r+0x32>
 80069fc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006a00:	4638      	mov	r0, r7
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	6922      	ldr	r2, [r4, #16]
 8006a08:	1a98      	subs	r0, r3, r2
 8006a0a:	6963      	ldr	r3, [r4, #20]
 8006a0c:	b2f6      	uxtb	r6, r6
 8006a0e:	4283      	cmp	r3, r0
 8006a10:	4637      	mov	r7, r6
 8006a12:	dc05      	bgt.n	8006a20 <__swbuf_r+0x4e>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f001 fdea 	bl	80085f0 <_fflush_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d1ed      	bne.n	80069fc <__swbuf_r+0x2a>
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	6022      	str	r2, [r4, #0]
 8006a2c:	701e      	strb	r6, [r3, #0]
 8006a2e:	6962      	ldr	r2, [r4, #20]
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d004      	beq.n	8006a40 <__swbuf_r+0x6e>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	07db      	lsls	r3, r3, #31
 8006a3a:	d5e1      	bpl.n	8006a00 <__swbuf_r+0x2e>
 8006a3c:	2e0a      	cmp	r6, #10
 8006a3e:	d1df      	bne.n	8006a00 <__swbuf_r+0x2e>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f001 fdd4 	bl	80085f0 <_fflush_r>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d0d9      	beq.n	8006a00 <__swbuf_r+0x2e>
 8006a4c:	e7d6      	b.n	80069fc <__swbuf_r+0x2a>
	...

08006a50 <__swsetup_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4b29      	ldr	r3, [pc, #164]	@ (8006af8 <__swsetup_r+0xa8>)
 8006a54:	4605      	mov	r5, r0
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	460c      	mov	r4, r1
 8006a5a:	b118      	cbz	r0, 8006a64 <__swsetup_r+0x14>
 8006a5c:	6a03      	ldr	r3, [r0, #32]
 8006a5e:	b90b      	cbnz	r3, 8006a64 <__swsetup_r+0x14>
 8006a60:	f7ff fece 	bl	8006800 <__sinit>
 8006a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a68:	0719      	lsls	r1, r3, #28
 8006a6a:	d422      	bmi.n	8006ab2 <__swsetup_r+0x62>
 8006a6c:	06da      	lsls	r2, r3, #27
 8006a6e:	d407      	bmi.n	8006a80 <__swsetup_r+0x30>
 8006a70:	2209      	movs	r2, #9
 8006a72:	602a      	str	r2, [r5, #0]
 8006a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a7e:	e033      	b.n	8006ae8 <__swsetup_r+0x98>
 8006a80:	0758      	lsls	r0, r3, #29
 8006a82:	d512      	bpl.n	8006aaa <__swsetup_r+0x5a>
 8006a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a86:	b141      	cbz	r1, 8006a9a <__swsetup_r+0x4a>
 8006a88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <__swsetup_r+0x46>
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 ff65 	bl	8007960 <_free_r>
 8006a96:	2300      	movs	r3, #0
 8006a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f043 0308 	orr.w	r3, r3, #8
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	b94b      	cbnz	r3, 8006aca <__swsetup_r+0x7a>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac0:	d003      	beq.n	8006aca <__swsetup_r+0x7a>
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f001 fde1 	bl	800868c <__smakebuf_r>
 8006aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ace:	f013 0201 	ands.w	r2, r3, #1
 8006ad2:	d00a      	beq.n	8006aea <__swsetup_r+0x9a>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	60a2      	str	r2, [r4, #8]
 8006ad8:	6962      	ldr	r2, [r4, #20]
 8006ada:	4252      	negs	r2, r2
 8006adc:	61a2      	str	r2, [r4, #24]
 8006ade:	6922      	ldr	r2, [r4, #16]
 8006ae0:	b942      	cbnz	r2, 8006af4 <__swsetup_r+0xa4>
 8006ae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ae6:	d1c5      	bne.n	8006a74 <__swsetup_r+0x24>
 8006ae8:	bd38      	pop	{r3, r4, r5, pc}
 8006aea:	0799      	lsls	r1, r3, #30
 8006aec:	bf58      	it	pl
 8006aee:	6962      	ldrpl	r2, [r4, #20]
 8006af0:	60a2      	str	r2, [r4, #8]
 8006af2:	e7f4      	b.n	8006ade <__swsetup_r+0x8e>
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7f7      	b.n	8006ae8 <__swsetup_r+0x98>
 8006af8:	2000003c 	.word	0x2000003c

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <_localeconv_r>:
 8006b0c:	4800      	ldr	r0, [pc, #0]	@ (8006b10 <_localeconv_r+0x4>)
 8006b0e:	4770      	bx	lr
 8006b10:	2000017c 	.word	0x2000017c

08006b14 <_close_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d06      	ldr	r5, [pc, #24]	@ (8006b30 <_close_r+0x1c>)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	f7fa ffb8 	bl	8001a94 <_close>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_close_r+0x1a>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_close_r+0x1a>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	200015d4 	.word	0x200015d4

08006b34 <_reclaim_reent>:
 8006b34:	4b29      	ldr	r3, [pc, #164]	@ (8006bdc <_reclaim_reent+0xa8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4283      	cmp	r3, r0
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	d04b      	beq.n	8006bd8 <_reclaim_reent+0xa4>
 8006b40:	69c3      	ldr	r3, [r0, #28]
 8006b42:	b1ab      	cbz	r3, 8006b70 <_reclaim_reent+0x3c>
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	b16b      	cbz	r3, 8006b64 <_reclaim_reent+0x30>
 8006b48:	2500      	movs	r5, #0
 8006b4a:	69e3      	ldr	r3, [r4, #28]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	5959      	ldr	r1, [r3, r5]
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d13b      	bne.n	8006bcc <_reclaim_reent+0x98>
 8006b54:	3504      	adds	r5, #4
 8006b56:	2d80      	cmp	r5, #128	@ 0x80
 8006b58:	d1f7      	bne.n	8006b4a <_reclaim_reent+0x16>
 8006b5a:	69e3      	ldr	r3, [r4, #28]
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	68d9      	ldr	r1, [r3, #12]
 8006b60:	f000 fefe 	bl	8007960 <_free_r>
 8006b64:	69e3      	ldr	r3, [r4, #28]
 8006b66:	6819      	ldr	r1, [r3, #0]
 8006b68:	b111      	cbz	r1, 8006b70 <_reclaim_reent+0x3c>
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fef8 	bl	8007960 <_free_r>
 8006b70:	6961      	ldr	r1, [r4, #20]
 8006b72:	b111      	cbz	r1, 8006b7a <_reclaim_reent+0x46>
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fef3 	bl	8007960 <_free_r>
 8006b7a:	69e1      	ldr	r1, [r4, #28]
 8006b7c:	b111      	cbz	r1, 8006b84 <_reclaim_reent+0x50>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 feee 	bl	8007960 <_free_r>
 8006b84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b86:	b111      	cbz	r1, 8006b8e <_reclaim_reent+0x5a>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fee9 	bl	8007960 <_free_r>
 8006b8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b90:	b111      	cbz	r1, 8006b98 <_reclaim_reent+0x64>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fee4 	bl	8007960 <_free_r>
 8006b98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b9a:	b111      	cbz	r1, 8006ba2 <_reclaim_reent+0x6e>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fedf 	bl	8007960 <_free_r>
 8006ba2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ba4:	b111      	cbz	r1, 8006bac <_reclaim_reent+0x78>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 feda 	bl	8007960 <_free_r>
 8006bac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006bae:	b111      	cbz	r1, 8006bb6 <_reclaim_reent+0x82>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fed5 	bl	8007960 <_free_r>
 8006bb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006bb8:	b111      	cbz	r1, 8006bc0 <_reclaim_reent+0x8c>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fed0 	bl	8007960 <_free_r>
 8006bc0:	6a23      	ldr	r3, [r4, #32]
 8006bc2:	b14b      	cbz	r3, 8006bd8 <_reclaim_reent+0xa4>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bca:	4718      	bx	r3
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fec6 	bl	8007960 <_free_r>
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	e7bb      	b.n	8006b50 <_reclaim_reent+0x1c>
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
 8006bda:	bf00      	nop
 8006bdc:	2000003c 	.word	0x2000003c

08006be0 <_lseek_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	@ (8006c00 <_lseek_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa ff5a 	bl	8001aa8 <_lseek>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_lseek_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_lseek_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200015d4 	.word	0x200015d4

08006c04 <_read_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	@ (8006c24 <_read_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa ff2e 	bl	8001a74 <_read>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_read_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_read_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	200015d4 	.word	0x200015d4

08006c28 <_write_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	@ (8006c48 <_write_r+0x20>)
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	4608      	mov	r0, r1
 8006c30:	4611      	mov	r1, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	602a      	str	r2, [r5, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7fa fafa 	bl	8001230 <_write>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_write_r+0x1e>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_write_r+0x1e>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	200015d4 	.word	0x200015d4

08006c4c <__errno>:
 8006c4c:	4b01      	ldr	r3, [pc, #4]	@ (8006c54 <__errno+0x8>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	2000003c 	.word	0x2000003c

08006c58 <__libc_init_array>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c90 <__libc_init_array+0x38>)
 8006c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c94 <__libc_init_array+0x3c>)
 8006c5e:	1b64      	subs	r4, r4, r5
 8006c60:	10a4      	asrs	r4, r4, #2
 8006c62:	2600      	movs	r6, #0
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	d109      	bne.n	8006c7c <__libc_init_array+0x24>
 8006c68:	4d0b      	ldr	r5, [pc, #44]	@ (8006c98 <__libc_init_array+0x40>)
 8006c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c9c <__libc_init_array+0x44>)
 8006c6c:	f001 fe2c 	bl	80088c8 <_init>
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	2600      	movs	r6, #0
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d105      	bne.n	8006c86 <__libc_init_array+0x2e>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c80:	4798      	blx	r3
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7ee      	b.n	8006c64 <__libc_init_array+0xc>
 8006c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8a:	4798      	blx	r3
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	e7f2      	b.n	8006c76 <__libc_init_array+0x1e>
 8006c90:	08009758 	.word	0x08009758
 8006c94:	08009758 	.word	0x08009758
 8006c98:	08009758 	.word	0x08009758
 8006c9c:	0800975c 	.word	0x0800975c

08006ca0 <__retarget_lock_init_recursive>:
 8006ca0:	4770      	bx	lr

08006ca2 <__retarget_lock_acquire_recursive>:
 8006ca2:	4770      	bx	lr

08006ca4 <__retarget_lock_release_recursive>:
 8006ca4:	4770      	bx	lr

08006ca6 <memcpy>:
 8006ca6:	440a      	add	r2, r1
 8006ca8:	4291      	cmp	r1, r2
 8006caa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006cae:	d100      	bne.n	8006cb2 <memcpy+0xc>
 8006cb0:	4770      	bx	lr
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cbc:	4291      	cmp	r1, r2
 8006cbe:	d1f9      	bne.n	8006cb4 <memcpy+0xe>
 8006cc0:	bd10      	pop	{r4, pc}

08006cc2 <quorem>:
 8006cc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc6:	6903      	ldr	r3, [r0, #16]
 8006cc8:	690c      	ldr	r4, [r1, #16]
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	4607      	mov	r7, r0
 8006cce:	db7e      	blt.n	8006dce <quorem+0x10c>
 8006cd0:	3c01      	subs	r4, #1
 8006cd2:	f101 0814 	add.w	r8, r1, #20
 8006cd6:	00a3      	lsls	r3, r4, #2
 8006cd8:	f100 0514 	add.w	r5, r0, #20
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cec:	3301      	adds	r3, #1
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cf8:	d32e      	bcc.n	8006d58 <quorem+0x96>
 8006cfa:	f04f 0a00 	mov.w	sl, #0
 8006cfe:	46c4      	mov	ip, r8
 8006d00:	46ae      	mov	lr, r5
 8006d02:	46d3      	mov	fp, sl
 8006d04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d08:	b298      	uxth	r0, r3
 8006d0a:	fb06 a000 	mla	r0, r6, r0, sl
 8006d0e:	0c02      	lsrs	r2, r0, #16
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	fb06 2303 	mla	r3, r6, r3, r2
 8006d16:	f8de 2000 	ldr.w	r2, [lr]
 8006d1a:	b280      	uxth	r0, r0
 8006d1c:	b292      	uxth	r2, r2
 8006d1e:	1a12      	subs	r2, r2, r0
 8006d20:	445a      	add	r2, fp
 8006d22:	f8de 0000 	ldr.w	r0, [lr]
 8006d26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d34:	b292      	uxth	r2, r2
 8006d36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d3a:	45e1      	cmp	r9, ip
 8006d3c:	f84e 2b04 	str.w	r2, [lr], #4
 8006d40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d44:	d2de      	bcs.n	8006d04 <quorem+0x42>
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	58eb      	ldr	r3, [r5, r3]
 8006d4a:	b92b      	cbnz	r3, 8006d58 <quorem+0x96>
 8006d4c:	9b01      	ldr	r3, [sp, #4]
 8006d4e:	3b04      	subs	r3, #4
 8006d50:	429d      	cmp	r5, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	d32f      	bcc.n	8006db6 <quorem+0xf4>
 8006d56:	613c      	str	r4, [r7, #16]
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f001 f97b 	bl	8008054 <__mcmp>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	db25      	blt.n	8006dae <quorem+0xec>
 8006d62:	4629      	mov	r1, r5
 8006d64:	2000      	movs	r0, #0
 8006d66:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d6a:	f8d1 c000 	ldr.w	ip, [r1]
 8006d6e:	fa1f fe82 	uxth.w	lr, r2
 8006d72:	fa1f f38c 	uxth.w	r3, ip
 8006d76:	eba3 030e 	sub.w	r3, r3, lr
 8006d7a:	4403      	add	r3, r0
 8006d7c:	0c12      	lsrs	r2, r2, #16
 8006d7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d8c:	45c1      	cmp	r9, r8
 8006d8e:	f841 3b04 	str.w	r3, [r1], #4
 8006d92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d96:	d2e6      	bcs.n	8006d66 <quorem+0xa4>
 8006d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006da0:	b922      	cbnz	r2, 8006dac <quorem+0xea>
 8006da2:	3b04      	subs	r3, #4
 8006da4:	429d      	cmp	r5, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	d30b      	bcc.n	8006dc2 <quorem+0x100>
 8006daa:	613c      	str	r4, [r7, #16]
 8006dac:	3601      	adds	r6, #1
 8006dae:	4630      	mov	r0, r6
 8006db0:	b003      	add	sp, #12
 8006db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	3b04      	subs	r3, #4
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d1cb      	bne.n	8006d56 <quorem+0x94>
 8006dbe:	3c01      	subs	r4, #1
 8006dc0:	e7c6      	b.n	8006d50 <quorem+0x8e>
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d1ef      	bne.n	8006daa <quorem+0xe8>
 8006dca:	3c01      	subs	r4, #1
 8006dcc:	e7ea      	b.n	8006da4 <quorem+0xe2>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e7ee      	b.n	8006db0 <quorem+0xee>
 8006dd2:	0000      	movs	r0, r0
 8006dd4:	0000      	movs	r0, r0
	...

08006dd8 <_dtoa_r>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	69c7      	ldr	r7, [r0, #28]
 8006dde:	b099      	sub	sp, #100	@ 0x64
 8006de0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006de4:	ec55 4b10 	vmov	r4, r5, d0
 8006de8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006dea:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dec:	4683      	mov	fp, r0
 8006dee:	920e      	str	r2, [sp, #56]	@ 0x38
 8006df0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006df2:	b97f      	cbnz	r7, 8006e14 <_dtoa_r+0x3c>
 8006df4:	2010      	movs	r0, #16
 8006df6:	f000 fdfd 	bl	80079f4 <malloc>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e00:	b920      	cbnz	r0, 8006e0c <_dtoa_r+0x34>
 8006e02:	4ba7      	ldr	r3, [pc, #668]	@ (80070a0 <_dtoa_r+0x2c8>)
 8006e04:	21ef      	movs	r1, #239	@ 0xef
 8006e06:	48a7      	ldr	r0, [pc, #668]	@ (80070a4 <_dtoa_r+0x2cc>)
 8006e08:	f001 fcae 	bl	8008768 <__assert_func>
 8006e0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e10:	6007      	str	r7, [r0, #0]
 8006e12:	60c7      	str	r7, [r0, #12]
 8006e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e18:	6819      	ldr	r1, [r3, #0]
 8006e1a:	b159      	cbz	r1, 8006e34 <_dtoa_r+0x5c>
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	604a      	str	r2, [r1, #4]
 8006e20:	2301      	movs	r3, #1
 8006e22:	4093      	lsls	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
 8006e26:	4658      	mov	r0, fp
 8006e28:	f000 feda 	bl	8007be0 <_Bfree>
 8006e2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	1e2b      	subs	r3, r5, #0
 8006e36:	bfb9      	ittee	lt
 8006e38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e3c:	9303      	strlt	r3, [sp, #12]
 8006e3e:	2300      	movge	r3, #0
 8006e40:	6033      	strge	r3, [r6, #0]
 8006e42:	9f03      	ldr	r7, [sp, #12]
 8006e44:	4b98      	ldr	r3, [pc, #608]	@ (80070a8 <_dtoa_r+0x2d0>)
 8006e46:	bfbc      	itt	lt
 8006e48:	2201      	movlt	r2, #1
 8006e4a:	6032      	strlt	r2, [r6, #0]
 8006e4c:	43bb      	bics	r3, r7
 8006e4e:	d112      	bne.n	8006e76 <_dtoa_r+0x9e>
 8006e50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e5c:	4323      	orrs	r3, r4
 8006e5e:	f000 854d 	beq.w	80078fc <_dtoa_r+0xb24>
 8006e62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070bc <_dtoa_r+0x2e4>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 854f 	beq.w	800790c <_dtoa_r+0xb34>
 8006e6e:	f10a 0303 	add.w	r3, sl, #3
 8006e72:	f000 bd49 	b.w	8007908 <_dtoa_r+0xb30>
 8006e76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	ec51 0b17 	vmov	r0, r1, d7
 8006e80:	2300      	movs	r3, #0
 8006e82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e86:	f7f9 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	b158      	cbz	r0, 8006ea6 <_dtoa_r+0xce>
 8006e8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e90:	2301      	movs	r3, #1
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e96:	b113      	cbz	r3, 8006e9e <_dtoa_r+0xc6>
 8006e98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e9a:	4b84      	ldr	r3, [pc, #528]	@ (80070ac <_dtoa_r+0x2d4>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070c0 <_dtoa_r+0x2e8>
 8006ea2:	f000 bd33 	b.w	800790c <_dtoa_r+0xb34>
 8006ea6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006eaa:	aa16      	add	r2, sp, #88	@ 0x58
 8006eac:	a917      	add	r1, sp, #92	@ 0x5c
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f001 f980 	bl	80081b4 <__d2b>
 8006eb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006eb8:	4681      	mov	r9, r0
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	d077      	beq.n	8006fae <_dtoa_r+0x1d6>
 8006ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ecc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ed0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ed4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ed8:	4619      	mov	r1, r3
 8006eda:	2200      	movs	r2, #0
 8006edc:	4b74      	ldr	r3, [pc, #464]	@ (80070b0 <_dtoa_r+0x2d8>)
 8006ede:	f7f9 f9d3 	bl	8000288 <__aeabi_dsub>
 8006ee2:	a369      	add	r3, pc, #420	@ (adr r3, 8007088 <_dtoa_r+0x2b0>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f7f9 fb86 	bl	80005f8 <__aeabi_dmul>
 8006eec:	a368      	add	r3, pc, #416	@ (adr r3, 8007090 <_dtoa_r+0x2b8>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f7f9 f9cb 	bl	800028c <__adddf3>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	460d      	mov	r5, r1
 8006efc:	f7f9 fb12 	bl	8000524 <__aeabi_i2d>
 8006f00:	a365      	add	r3, pc, #404	@ (adr r3, 8007098 <_dtoa_r+0x2c0>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f7f9 fb77 	bl	80005f8 <__aeabi_dmul>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 f9bb 	bl	800028c <__adddf3>
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	f7f9 fe1d 	bl	8000b58 <__aeabi_d2iz>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4607      	mov	r7, r0
 8006f22:	2300      	movs	r3, #0
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8006f2c:	b140      	cbz	r0, 8006f40 <_dtoa_r+0x168>
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f7f9 faf8 	bl	8000524 <__aeabi_i2d>
 8006f34:	4622      	mov	r2, r4
 8006f36:	462b      	mov	r3, r5
 8006f38:	f7f9 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f3c:	b900      	cbnz	r0, 8006f40 <_dtoa_r+0x168>
 8006f3e:	3f01      	subs	r7, #1
 8006f40:	2f16      	cmp	r7, #22
 8006f42:	d851      	bhi.n	8006fe8 <_dtoa_r+0x210>
 8006f44:	4b5b      	ldr	r3, [pc, #364]	@ (80070b4 <_dtoa_r+0x2dc>)
 8006f46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f52:	f7f9 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d048      	beq.n	8006fec <_dtoa_r+0x214>
 8006f5a:	3f01      	subs	r7, #1
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f62:	1b9b      	subs	r3, r3, r6
 8006f64:	1e5a      	subs	r2, r3, #1
 8006f66:	bf44      	itt	mi
 8006f68:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f6c:	2300      	movmi	r3, #0
 8006f6e:	9208      	str	r2, [sp, #32]
 8006f70:	bf54      	ite	pl
 8006f72:	f04f 0800 	movpl.w	r8, #0
 8006f76:	9308      	strmi	r3, [sp, #32]
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	db39      	blt.n	8006ff0 <_dtoa_r+0x218>
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f80:	443b      	add	r3, r7
 8006f82:	9308      	str	r3, [sp, #32]
 8006f84:	2300      	movs	r3, #0
 8006f86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8a:	2b09      	cmp	r3, #9
 8006f8c:	d864      	bhi.n	8007058 <_dtoa_r+0x280>
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	bfc4      	itt	gt
 8006f92:	3b04      	subgt	r3, #4
 8006f94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f98:	f1a3 0302 	sub.w	r3, r3, #2
 8006f9c:	bfcc      	ite	gt
 8006f9e:	2400      	movgt	r4, #0
 8006fa0:	2401      	movle	r4, #1
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d863      	bhi.n	800706e <_dtoa_r+0x296>
 8006fa6:	e8df f003 	tbb	[pc, r3]
 8006faa:	372a      	.short	0x372a
 8006fac:	5535      	.short	0x5535
 8006fae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fb2:	441e      	add	r6, r3
 8006fb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	bfc1      	itttt	gt
 8006fbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fc0:	409f      	lslgt	r7, r3
 8006fc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006fca:	bfd6      	itet	le
 8006fcc:	f1c3 0320 	rsble	r3, r3, #32
 8006fd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006fd4:	fa04 f003 	lslle.w	r0, r4, r3
 8006fd8:	f7f9 fa94 	bl	8000504 <__aeabi_ui2d>
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fe2:	3e01      	subs	r6, #1
 8006fe4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fe6:	e777      	b.n	8006ed8 <_dtoa_r+0x100>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e7b8      	b.n	8006f5e <_dtoa_r+0x186>
 8006fec:	9012      	str	r0, [sp, #72]	@ 0x48
 8006fee:	e7b7      	b.n	8006f60 <_dtoa_r+0x188>
 8006ff0:	427b      	negs	r3, r7
 8006ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	eba8 0807 	sub.w	r8, r8, r7
 8006ffa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ffc:	e7c4      	b.n	8006f88 <_dtoa_r+0x1b0>
 8006ffe:	2300      	movs	r3, #0
 8007000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc35      	bgt.n	8007074 <_dtoa_r+0x29c>
 8007008:	2301      	movs	r3, #1
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	9307      	str	r3, [sp, #28]
 800700e:	461a      	mov	r2, r3
 8007010:	920e      	str	r2, [sp, #56]	@ 0x38
 8007012:	e00b      	b.n	800702c <_dtoa_r+0x254>
 8007014:	2301      	movs	r3, #1
 8007016:	e7f3      	b.n	8007000 <_dtoa_r+0x228>
 8007018:	2300      	movs	r3, #0
 800701a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800701c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	bfb8      	it	lt
 800702a:	2301      	movlt	r3, #1
 800702c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007030:	2100      	movs	r1, #0
 8007032:	2204      	movs	r2, #4
 8007034:	f102 0514 	add.w	r5, r2, #20
 8007038:	429d      	cmp	r5, r3
 800703a:	d91f      	bls.n	800707c <_dtoa_r+0x2a4>
 800703c:	6041      	str	r1, [r0, #4]
 800703e:	4658      	mov	r0, fp
 8007040:	f000 fd8e 	bl	8007b60 <_Balloc>
 8007044:	4682      	mov	sl, r0
 8007046:	2800      	cmp	r0, #0
 8007048:	d13c      	bne.n	80070c4 <_dtoa_r+0x2ec>
 800704a:	4b1b      	ldr	r3, [pc, #108]	@ (80070b8 <_dtoa_r+0x2e0>)
 800704c:	4602      	mov	r2, r0
 800704e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007052:	e6d8      	b.n	8006e06 <_dtoa_r+0x2e>
 8007054:	2301      	movs	r3, #1
 8007056:	e7e0      	b.n	800701a <_dtoa_r+0x242>
 8007058:	2401      	movs	r4, #1
 800705a:	2300      	movs	r3, #0
 800705c:	9309      	str	r3, [sp, #36]	@ 0x24
 800705e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	9307      	str	r3, [sp, #28]
 8007068:	2200      	movs	r2, #0
 800706a:	2312      	movs	r3, #18
 800706c:	e7d0      	b.n	8007010 <_dtoa_r+0x238>
 800706e:	2301      	movs	r3, #1
 8007070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007072:	e7f5      	b.n	8007060 <_dtoa_r+0x288>
 8007074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	e7d7      	b.n	800702c <_dtoa_r+0x254>
 800707c:	3101      	adds	r1, #1
 800707e:	0052      	lsls	r2, r2, #1
 8007080:	e7d8      	b.n	8007034 <_dtoa_r+0x25c>
 8007082:	bf00      	nop
 8007084:	f3af 8000 	nop.w
 8007088:	636f4361 	.word	0x636f4361
 800708c:	3fd287a7 	.word	0x3fd287a7
 8007090:	8b60c8b3 	.word	0x8b60c8b3
 8007094:	3fc68a28 	.word	0x3fc68a28
 8007098:	509f79fb 	.word	0x509f79fb
 800709c:	3fd34413 	.word	0x3fd34413
 80070a0:	08009421 	.word	0x08009421
 80070a4:	08009438 	.word	0x08009438
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	080093f1 	.word	0x080093f1
 80070b0:	3ff80000 	.word	0x3ff80000
 80070b4:	08009530 	.word	0x08009530
 80070b8:	08009490 	.word	0x08009490
 80070bc:	0800941d 	.word	0x0800941d
 80070c0:	080093f0 	.word	0x080093f0
 80070c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070c8:	6018      	str	r0, [r3, #0]
 80070ca:	9b07      	ldr	r3, [sp, #28]
 80070cc:	2b0e      	cmp	r3, #14
 80070ce:	f200 80a4 	bhi.w	800721a <_dtoa_r+0x442>
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	f000 80a1 	beq.w	800721a <_dtoa_r+0x442>
 80070d8:	2f00      	cmp	r7, #0
 80070da:	dd33      	ble.n	8007144 <_dtoa_r+0x36c>
 80070dc:	4bad      	ldr	r3, [pc, #692]	@ (8007394 <_dtoa_r+0x5bc>)
 80070de:	f007 020f 	and.w	r2, r7, #15
 80070e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e6:	ed93 7b00 	vldr	d7, [r3]
 80070ea:	05f8      	lsls	r0, r7, #23
 80070ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070f4:	d516      	bpl.n	8007124 <_dtoa_r+0x34c>
 80070f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007398 <_dtoa_r+0x5c0>)
 80070f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007100:	f7f9 fba4 	bl	800084c <__aeabi_ddiv>
 8007104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007108:	f004 040f 	and.w	r4, r4, #15
 800710c:	2603      	movs	r6, #3
 800710e:	4da2      	ldr	r5, [pc, #648]	@ (8007398 <_dtoa_r+0x5c0>)
 8007110:	b954      	cbnz	r4, 8007128 <_dtoa_r+0x350>
 8007112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800711a:	f7f9 fb97 	bl	800084c <__aeabi_ddiv>
 800711e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007122:	e028      	b.n	8007176 <_dtoa_r+0x39e>
 8007124:	2602      	movs	r6, #2
 8007126:	e7f2      	b.n	800710e <_dtoa_r+0x336>
 8007128:	07e1      	lsls	r1, r4, #31
 800712a:	d508      	bpl.n	800713e <_dtoa_r+0x366>
 800712c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007134:	f7f9 fa60 	bl	80005f8 <__aeabi_dmul>
 8007138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800713c:	3601      	adds	r6, #1
 800713e:	1064      	asrs	r4, r4, #1
 8007140:	3508      	adds	r5, #8
 8007142:	e7e5      	b.n	8007110 <_dtoa_r+0x338>
 8007144:	f000 80d2 	beq.w	80072ec <_dtoa_r+0x514>
 8007148:	427c      	negs	r4, r7
 800714a:	4b92      	ldr	r3, [pc, #584]	@ (8007394 <_dtoa_r+0x5bc>)
 800714c:	4d92      	ldr	r5, [pc, #584]	@ (8007398 <_dtoa_r+0x5c0>)
 800714e:	f004 020f 	and.w	r2, r4, #15
 8007152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800715e:	f7f9 fa4b 	bl	80005f8 <__aeabi_dmul>
 8007162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007166:	1124      	asrs	r4, r4, #4
 8007168:	2300      	movs	r3, #0
 800716a:	2602      	movs	r6, #2
 800716c:	2c00      	cmp	r4, #0
 800716e:	f040 80b2 	bne.w	80072d6 <_dtoa_r+0x4fe>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1d3      	bne.n	800711e <_dtoa_r+0x346>
 8007176:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007178:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80b7 	beq.w	80072f0 <_dtoa_r+0x518>
 8007182:	4b86      	ldr	r3, [pc, #536]	@ (800739c <_dtoa_r+0x5c4>)
 8007184:	2200      	movs	r2, #0
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f9 fca7 	bl	8000adc <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f000 80ae 	beq.w	80072f0 <_dtoa_r+0x518>
 8007194:	9b07      	ldr	r3, [sp, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80aa 	beq.w	80072f0 <_dtoa_r+0x518>
 800719c:	9b00      	ldr	r3, [sp, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dd37      	ble.n	8007212 <_dtoa_r+0x43a>
 80071a2:	1e7b      	subs	r3, r7, #1
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	4620      	mov	r0, r4
 80071a8:	4b7d      	ldr	r3, [pc, #500]	@ (80073a0 <_dtoa_r+0x5c8>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	4629      	mov	r1, r5
 80071ae:	f7f9 fa23 	bl	80005f8 <__aeabi_dmul>
 80071b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b6:	9c00      	ldr	r4, [sp, #0]
 80071b8:	3601      	adds	r6, #1
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7f9 f9b2 	bl	8000524 <__aeabi_i2d>
 80071c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071c4:	f7f9 fa18 	bl	80005f8 <__aeabi_dmul>
 80071c8:	4b76      	ldr	r3, [pc, #472]	@ (80073a4 <_dtoa_r+0x5cc>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	f7f9 f85e 	bl	800028c <__adddf3>
 80071d0:	4605      	mov	r5, r0
 80071d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071d6:	2c00      	cmp	r4, #0
 80071d8:	f040 808d 	bne.w	80072f6 <_dtoa_r+0x51e>
 80071dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e0:	4b71      	ldr	r3, [pc, #452]	@ (80073a8 <_dtoa_r+0x5d0>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	f7f9 f850 	bl	8000288 <__aeabi_dsub>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071f0:	462a      	mov	r2, r5
 80071f2:	4633      	mov	r3, r6
 80071f4:	f7f9 fc90 	bl	8000b18 <__aeabi_dcmpgt>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f040 828b 	bne.w	8007714 <_dtoa_r+0x93c>
 80071fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007202:	462a      	mov	r2, r5
 8007204:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007208:	f7f9 fc68 	bl	8000adc <__aeabi_dcmplt>
 800720c:	2800      	cmp	r0, #0
 800720e:	f040 8128 	bne.w	8007462 <_dtoa_r+0x68a>
 8007212:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007216:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800721a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f2c0 815a 	blt.w	80074d6 <_dtoa_r+0x6fe>
 8007222:	2f0e      	cmp	r7, #14
 8007224:	f300 8157 	bgt.w	80074d6 <_dtoa_r+0x6fe>
 8007228:	4b5a      	ldr	r3, [pc, #360]	@ (8007394 <_dtoa_r+0x5bc>)
 800722a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800722e:	ed93 7b00 	vldr	d7, [r3]
 8007232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007234:	2b00      	cmp	r3, #0
 8007236:	ed8d 7b00 	vstr	d7, [sp]
 800723a:	da03      	bge.n	8007244 <_dtoa_r+0x46c>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f340 8101 	ble.w	8007446 <_dtoa_r+0x66e>
 8007244:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007248:	4656      	mov	r6, sl
 800724a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 fafb 	bl	800084c <__aeabi_ddiv>
 8007256:	f7f9 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800725a:	4680      	mov	r8, r0
 800725c:	f7f9 f962 	bl	8000524 <__aeabi_i2d>
 8007260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007264:	f7f9 f9c8 	bl	80005f8 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007274:	f7f9 f808 	bl	8000288 <__aeabi_dsub>
 8007278:	f806 4b01 	strb.w	r4, [r6], #1
 800727c:	9d07      	ldr	r5, [sp, #28]
 800727e:	eba6 040a 	sub.w	r4, r6, sl
 8007282:	42a5      	cmp	r5, r4
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	f040 8117 	bne.w	80074ba <_dtoa_r+0x6e2>
 800728c:	f7f8 fffe 	bl	800028c <__adddf3>
 8007290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	f7f9 fc3e 	bl	8000b18 <__aeabi_dcmpgt>
 800729c:	2800      	cmp	r0, #0
 800729e:	f040 80f9 	bne.w	8007494 <_dtoa_r+0x6bc>
 80072a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072a6:	4620      	mov	r0, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7f9 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ae:	b118      	cbz	r0, 80072b8 <_dtoa_r+0x4e0>
 80072b0:	f018 0f01 	tst.w	r8, #1
 80072b4:	f040 80ee 	bne.w	8007494 <_dtoa_r+0x6bc>
 80072b8:	4649      	mov	r1, r9
 80072ba:	4658      	mov	r0, fp
 80072bc:	f000 fc90 	bl	8007be0 <_Bfree>
 80072c0:	2300      	movs	r3, #0
 80072c2:	7033      	strb	r3, [r6, #0]
 80072c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072c6:	3701      	adds	r7, #1
 80072c8:	601f      	str	r7, [r3, #0]
 80072ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 831d 	beq.w	800790c <_dtoa_r+0xb34>
 80072d2:	601e      	str	r6, [r3, #0]
 80072d4:	e31a      	b.n	800790c <_dtoa_r+0xb34>
 80072d6:	07e2      	lsls	r2, r4, #31
 80072d8:	d505      	bpl.n	80072e6 <_dtoa_r+0x50e>
 80072da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072de:	f7f9 f98b 	bl	80005f8 <__aeabi_dmul>
 80072e2:	3601      	adds	r6, #1
 80072e4:	2301      	movs	r3, #1
 80072e6:	1064      	asrs	r4, r4, #1
 80072e8:	3508      	adds	r5, #8
 80072ea:	e73f      	b.n	800716c <_dtoa_r+0x394>
 80072ec:	2602      	movs	r6, #2
 80072ee:	e742      	b.n	8007176 <_dtoa_r+0x39e>
 80072f0:	9c07      	ldr	r4, [sp, #28]
 80072f2:	9704      	str	r7, [sp, #16]
 80072f4:	e761      	b.n	80071ba <_dtoa_r+0x3e2>
 80072f6:	4b27      	ldr	r3, [pc, #156]	@ (8007394 <_dtoa_r+0x5bc>)
 80072f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007302:	4454      	add	r4, sl
 8007304:	2900      	cmp	r1, #0
 8007306:	d053      	beq.n	80073b0 <_dtoa_r+0x5d8>
 8007308:	4928      	ldr	r1, [pc, #160]	@ (80073ac <_dtoa_r+0x5d4>)
 800730a:	2000      	movs	r0, #0
 800730c:	f7f9 fa9e 	bl	800084c <__aeabi_ddiv>
 8007310:	4633      	mov	r3, r6
 8007312:	462a      	mov	r2, r5
 8007314:	f7f8 ffb8 	bl	8000288 <__aeabi_dsub>
 8007318:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800731c:	4656      	mov	r6, sl
 800731e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007322:	f7f9 fc19 	bl	8000b58 <__aeabi_d2iz>
 8007326:	4605      	mov	r5, r0
 8007328:	f7f9 f8fc 	bl	8000524 <__aeabi_i2d>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007334:	f7f8 ffa8 	bl	8000288 <__aeabi_dsub>
 8007338:	3530      	adds	r5, #48	@ 0x30
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007342:	f806 5b01 	strb.w	r5, [r6], #1
 8007346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800734a:	f7f9 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d171      	bne.n	8007436 <_dtoa_r+0x65e>
 8007352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007356:	4911      	ldr	r1, [pc, #68]	@ (800739c <_dtoa_r+0x5c4>)
 8007358:	2000      	movs	r0, #0
 800735a:	f7f8 ff95 	bl	8000288 <__aeabi_dsub>
 800735e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007362:	f7f9 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8007366:	2800      	cmp	r0, #0
 8007368:	f040 8095 	bne.w	8007496 <_dtoa_r+0x6be>
 800736c:	42a6      	cmp	r6, r4
 800736e:	f43f af50 	beq.w	8007212 <_dtoa_r+0x43a>
 8007372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007376:	4b0a      	ldr	r3, [pc, #40]	@ (80073a0 <_dtoa_r+0x5c8>)
 8007378:	2200      	movs	r2, #0
 800737a:	f7f9 f93d 	bl	80005f8 <__aeabi_dmul>
 800737e:	4b08      	ldr	r3, [pc, #32]	@ (80073a0 <_dtoa_r+0x5c8>)
 8007380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007384:	2200      	movs	r2, #0
 8007386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800738a:	f7f9 f935 	bl	80005f8 <__aeabi_dmul>
 800738e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007392:	e7c4      	b.n	800731e <_dtoa_r+0x546>
 8007394:	08009530 	.word	0x08009530
 8007398:	08009508 	.word	0x08009508
 800739c:	3ff00000 	.word	0x3ff00000
 80073a0:	40240000 	.word	0x40240000
 80073a4:	401c0000 	.word	0x401c0000
 80073a8:	40140000 	.word	0x40140000
 80073ac:	3fe00000 	.word	0x3fe00000
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7f9 f920 	bl	80005f8 <__aeabi_dmul>
 80073b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80073be:	4656      	mov	r6, sl
 80073c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c4:	f7f9 fbc8 	bl	8000b58 <__aeabi_d2iz>
 80073c8:	4605      	mov	r5, r0
 80073ca:	f7f9 f8ab 	bl	8000524 <__aeabi_i2d>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d6:	f7f8 ff57 	bl	8000288 <__aeabi_dsub>
 80073da:	3530      	adds	r5, #48	@ 0x30
 80073dc:	f806 5b01 	strb.w	r5, [r6], #1
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	42a6      	cmp	r6, r4
 80073e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	d124      	bne.n	800743a <_dtoa_r+0x662>
 80073f0:	4bac      	ldr	r3, [pc, #688]	@ (80076a4 <_dtoa_r+0x8cc>)
 80073f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073f6:	f7f8 ff49 	bl	800028c <__adddf3>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007402:	f7f9 fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8007406:	2800      	cmp	r0, #0
 8007408:	d145      	bne.n	8007496 <_dtoa_r+0x6be>
 800740a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800740e:	49a5      	ldr	r1, [pc, #660]	@ (80076a4 <_dtoa_r+0x8cc>)
 8007410:	2000      	movs	r0, #0
 8007412:	f7f8 ff39 	bl	8000288 <__aeabi_dsub>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741e:	f7f9 fb5d 	bl	8000adc <__aeabi_dcmplt>
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aef5 	beq.w	8007212 <_dtoa_r+0x43a>
 8007428:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800742a:	1e73      	subs	r3, r6, #1
 800742c:	9315      	str	r3, [sp, #84]	@ 0x54
 800742e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007432:	2b30      	cmp	r3, #48	@ 0x30
 8007434:	d0f8      	beq.n	8007428 <_dtoa_r+0x650>
 8007436:	9f04      	ldr	r7, [sp, #16]
 8007438:	e73e      	b.n	80072b8 <_dtoa_r+0x4e0>
 800743a:	4b9b      	ldr	r3, [pc, #620]	@ (80076a8 <_dtoa_r+0x8d0>)
 800743c:	f7f9 f8dc 	bl	80005f8 <__aeabi_dmul>
 8007440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007444:	e7bc      	b.n	80073c0 <_dtoa_r+0x5e8>
 8007446:	d10c      	bne.n	8007462 <_dtoa_r+0x68a>
 8007448:	4b98      	ldr	r3, [pc, #608]	@ (80076ac <_dtoa_r+0x8d4>)
 800744a:	2200      	movs	r2, #0
 800744c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007450:	f7f9 f8d2 	bl	80005f8 <__aeabi_dmul>
 8007454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007458:	f7f9 fb54 	bl	8000b04 <__aeabi_dcmpge>
 800745c:	2800      	cmp	r0, #0
 800745e:	f000 8157 	beq.w	8007710 <_dtoa_r+0x938>
 8007462:	2400      	movs	r4, #0
 8007464:	4625      	mov	r5, r4
 8007466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007468:	43db      	mvns	r3, r3
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	4656      	mov	r6, sl
 800746e:	2700      	movs	r7, #0
 8007470:	4621      	mov	r1, r4
 8007472:	4658      	mov	r0, fp
 8007474:	f000 fbb4 	bl	8007be0 <_Bfree>
 8007478:	2d00      	cmp	r5, #0
 800747a:	d0dc      	beq.n	8007436 <_dtoa_r+0x65e>
 800747c:	b12f      	cbz	r7, 800748a <_dtoa_r+0x6b2>
 800747e:	42af      	cmp	r7, r5
 8007480:	d003      	beq.n	800748a <_dtoa_r+0x6b2>
 8007482:	4639      	mov	r1, r7
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fbab 	bl	8007be0 <_Bfree>
 800748a:	4629      	mov	r1, r5
 800748c:	4658      	mov	r0, fp
 800748e:	f000 fba7 	bl	8007be0 <_Bfree>
 8007492:	e7d0      	b.n	8007436 <_dtoa_r+0x65e>
 8007494:	9704      	str	r7, [sp, #16]
 8007496:	4633      	mov	r3, r6
 8007498:	461e      	mov	r6, r3
 800749a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800749e:	2a39      	cmp	r2, #57	@ 0x39
 80074a0:	d107      	bne.n	80074b2 <_dtoa_r+0x6da>
 80074a2:	459a      	cmp	sl, r3
 80074a4:	d1f8      	bne.n	8007498 <_dtoa_r+0x6c0>
 80074a6:	9a04      	ldr	r2, [sp, #16]
 80074a8:	3201      	adds	r2, #1
 80074aa:	9204      	str	r2, [sp, #16]
 80074ac:	2230      	movs	r2, #48	@ 0x30
 80074ae:	f88a 2000 	strb.w	r2, [sl]
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	3201      	adds	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e7bd      	b.n	8007436 <_dtoa_r+0x65e>
 80074ba:	4b7b      	ldr	r3, [pc, #492]	@ (80076a8 <_dtoa_r+0x8d0>)
 80074bc:	2200      	movs	r2, #0
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2300      	movs	r3, #0
 80074c6:	4604      	mov	r4, r0
 80074c8:	460d      	mov	r5, r1
 80074ca:	f7f9 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f43f aebb 	beq.w	800724a <_dtoa_r+0x472>
 80074d4:	e6f0      	b.n	80072b8 <_dtoa_r+0x4e0>
 80074d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074d8:	2a00      	cmp	r2, #0
 80074da:	f000 80db 	beq.w	8007694 <_dtoa_r+0x8bc>
 80074de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e0:	2a01      	cmp	r2, #1
 80074e2:	f300 80bf 	bgt.w	8007664 <_dtoa_r+0x88c>
 80074e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	f000 80b7 	beq.w	800765c <_dtoa_r+0x884>
 80074ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074f4:	4646      	mov	r6, r8
 80074f6:	9a08      	ldr	r2, [sp, #32]
 80074f8:	2101      	movs	r1, #1
 80074fa:	441a      	add	r2, r3
 80074fc:	4658      	mov	r0, fp
 80074fe:	4498      	add	r8, r3
 8007500:	9208      	str	r2, [sp, #32]
 8007502:	f000 fc21 	bl	8007d48 <__i2b>
 8007506:	4605      	mov	r5, r0
 8007508:	b15e      	cbz	r6, 8007522 <_dtoa_r+0x74a>
 800750a:	9b08      	ldr	r3, [sp, #32]
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd08      	ble.n	8007522 <_dtoa_r+0x74a>
 8007510:	42b3      	cmp	r3, r6
 8007512:	9a08      	ldr	r2, [sp, #32]
 8007514:	bfa8      	it	ge
 8007516:	4633      	movge	r3, r6
 8007518:	eba8 0803 	sub.w	r8, r8, r3
 800751c:	1af6      	subs	r6, r6, r3
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	9308      	str	r3, [sp, #32]
 8007522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007524:	b1f3      	cbz	r3, 8007564 <_dtoa_r+0x78c>
 8007526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80b7 	beq.w	800769c <_dtoa_r+0x8c4>
 800752e:	b18c      	cbz	r4, 8007554 <_dtoa_r+0x77c>
 8007530:	4629      	mov	r1, r5
 8007532:	4622      	mov	r2, r4
 8007534:	4658      	mov	r0, fp
 8007536:	f000 fcc7 	bl	8007ec8 <__pow5mult>
 800753a:	464a      	mov	r2, r9
 800753c:	4601      	mov	r1, r0
 800753e:	4605      	mov	r5, r0
 8007540:	4658      	mov	r0, fp
 8007542:	f000 fc17 	bl	8007d74 <__multiply>
 8007546:	4649      	mov	r1, r9
 8007548:	9004      	str	r0, [sp, #16]
 800754a:	4658      	mov	r0, fp
 800754c:	f000 fb48 	bl	8007be0 <_Bfree>
 8007550:	9b04      	ldr	r3, [sp, #16]
 8007552:	4699      	mov	r9, r3
 8007554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007556:	1b1a      	subs	r2, r3, r4
 8007558:	d004      	beq.n	8007564 <_dtoa_r+0x78c>
 800755a:	4649      	mov	r1, r9
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fcb3 	bl	8007ec8 <__pow5mult>
 8007562:	4681      	mov	r9, r0
 8007564:	2101      	movs	r1, #1
 8007566:	4658      	mov	r0, fp
 8007568:	f000 fbee 	bl	8007d48 <__i2b>
 800756c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800756e:	4604      	mov	r4, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 81cf 	beq.w	8007914 <_dtoa_r+0xb3c>
 8007576:	461a      	mov	r2, r3
 8007578:	4601      	mov	r1, r0
 800757a:	4658      	mov	r0, fp
 800757c:	f000 fca4 	bl	8007ec8 <__pow5mult>
 8007580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007582:	2b01      	cmp	r3, #1
 8007584:	4604      	mov	r4, r0
 8007586:	f300 8095 	bgt.w	80076b4 <_dtoa_r+0x8dc>
 800758a:	9b02      	ldr	r3, [sp, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 8087 	bne.w	80076a0 <_dtoa_r+0x8c8>
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 8089 	bne.w	80076b0 <_dtoa_r+0x8d8>
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075a4:	0d1b      	lsrs	r3, r3, #20
 80075a6:	051b      	lsls	r3, r3, #20
 80075a8:	b12b      	cbz	r3, 80075b6 <_dtoa_r+0x7de>
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	3301      	adds	r3, #1
 80075ae:	9308      	str	r3, [sp, #32]
 80075b0:	f108 0801 	add.w	r8, r8, #1
 80075b4:	2301      	movs	r3, #1
 80075b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 81b0 	beq.w	8007920 <_dtoa_r+0xb48>
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075c6:	6918      	ldr	r0, [r3, #16]
 80075c8:	f000 fb72 	bl	8007cb0 <__hi0bits>
 80075cc:	f1c0 0020 	rsb	r0, r0, #32
 80075d0:	9b08      	ldr	r3, [sp, #32]
 80075d2:	4418      	add	r0, r3
 80075d4:	f010 001f 	ands.w	r0, r0, #31
 80075d8:	d077      	beq.n	80076ca <_dtoa_r+0x8f2>
 80075da:	f1c0 0320 	rsb	r3, r0, #32
 80075de:	2b04      	cmp	r3, #4
 80075e0:	dd6b      	ble.n	80076ba <_dtoa_r+0x8e2>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	f1c0 001c 	rsb	r0, r0, #28
 80075e8:	4403      	add	r3, r0
 80075ea:	4480      	add	r8, r0
 80075ec:	4406      	add	r6, r0
 80075ee:	9308      	str	r3, [sp, #32]
 80075f0:	f1b8 0f00 	cmp.w	r8, #0
 80075f4:	dd05      	ble.n	8007602 <_dtoa_r+0x82a>
 80075f6:	4649      	mov	r1, r9
 80075f8:	4642      	mov	r2, r8
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fcbe 	bl	8007f7c <__lshift>
 8007600:	4681      	mov	r9, r0
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dd05      	ble.n	8007614 <_dtoa_r+0x83c>
 8007608:	4621      	mov	r1, r4
 800760a:	461a      	mov	r2, r3
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fcb5 	bl	8007f7c <__lshift>
 8007612:	4604      	mov	r4, r0
 8007614:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007616:	2b00      	cmp	r3, #0
 8007618:	d059      	beq.n	80076ce <_dtoa_r+0x8f6>
 800761a:	4621      	mov	r1, r4
 800761c:	4648      	mov	r0, r9
 800761e:	f000 fd19 	bl	8008054 <__mcmp>
 8007622:	2800      	cmp	r0, #0
 8007624:	da53      	bge.n	80076ce <_dtoa_r+0x8f6>
 8007626:	1e7b      	subs	r3, r7, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	4649      	mov	r1, r9
 800762c:	2300      	movs	r3, #0
 800762e:	220a      	movs	r2, #10
 8007630:	4658      	mov	r0, fp
 8007632:	f000 faf7 	bl	8007c24 <__multadd>
 8007636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007638:	4681      	mov	r9, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 8172 	beq.w	8007924 <_dtoa_r+0xb4c>
 8007640:	2300      	movs	r3, #0
 8007642:	4629      	mov	r1, r5
 8007644:	220a      	movs	r2, #10
 8007646:	4658      	mov	r0, fp
 8007648:	f000 faec 	bl	8007c24 <__multadd>
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	4605      	mov	r5, r0
 8007652:	dc67      	bgt.n	8007724 <_dtoa_r+0x94c>
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	2b02      	cmp	r3, #2
 8007658:	dc41      	bgt.n	80076de <_dtoa_r+0x906>
 800765a:	e063      	b.n	8007724 <_dtoa_r+0x94c>
 800765c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800765e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007662:	e746      	b.n	80074f2 <_dtoa_r+0x71a>
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	1e5c      	subs	r4, r3, #1
 8007668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800766a:	42a3      	cmp	r3, r4
 800766c:	bfbf      	itttt	lt
 800766e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007670:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007672:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007674:	1ae3      	sublt	r3, r4, r3
 8007676:	bfb4      	ite	lt
 8007678:	18d2      	addlt	r2, r2, r3
 800767a:	1b1c      	subge	r4, r3, r4
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	bfbc      	itt	lt
 8007680:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007682:	2400      	movlt	r4, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfb5      	itete	lt
 8007688:	eba8 0603 	sublt.w	r6, r8, r3
 800768c:	9b07      	ldrge	r3, [sp, #28]
 800768e:	2300      	movlt	r3, #0
 8007690:	4646      	movge	r6, r8
 8007692:	e730      	b.n	80074f6 <_dtoa_r+0x71e>
 8007694:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007696:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007698:	4646      	mov	r6, r8
 800769a:	e735      	b.n	8007508 <_dtoa_r+0x730>
 800769c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800769e:	e75c      	b.n	800755a <_dtoa_r+0x782>
 80076a0:	2300      	movs	r3, #0
 80076a2:	e788      	b.n	80075b6 <_dtoa_r+0x7de>
 80076a4:	3fe00000 	.word	0x3fe00000
 80076a8:	40240000 	.word	0x40240000
 80076ac:	40140000 	.word	0x40140000
 80076b0:	9b02      	ldr	r3, [sp, #8]
 80076b2:	e780      	b.n	80075b6 <_dtoa_r+0x7de>
 80076b4:	2300      	movs	r3, #0
 80076b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b8:	e782      	b.n	80075c0 <_dtoa_r+0x7e8>
 80076ba:	d099      	beq.n	80075f0 <_dtoa_r+0x818>
 80076bc:	9a08      	ldr	r2, [sp, #32]
 80076be:	331c      	adds	r3, #28
 80076c0:	441a      	add	r2, r3
 80076c2:	4498      	add	r8, r3
 80076c4:	441e      	add	r6, r3
 80076c6:	9208      	str	r2, [sp, #32]
 80076c8:	e792      	b.n	80075f0 <_dtoa_r+0x818>
 80076ca:	4603      	mov	r3, r0
 80076cc:	e7f6      	b.n	80076bc <_dtoa_r+0x8e4>
 80076ce:	9b07      	ldr	r3, [sp, #28]
 80076d0:	9704      	str	r7, [sp, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dc20      	bgt.n	8007718 <_dtoa_r+0x940>
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076da:	2b02      	cmp	r3, #2
 80076dc:	dd1e      	ble.n	800771c <_dtoa_r+0x944>
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f47f aec0 	bne.w	8007466 <_dtoa_r+0x68e>
 80076e6:	4621      	mov	r1, r4
 80076e8:	2205      	movs	r2, #5
 80076ea:	4658      	mov	r0, fp
 80076ec:	f000 fa9a 	bl	8007c24 <__multadd>
 80076f0:	4601      	mov	r1, r0
 80076f2:	4604      	mov	r4, r0
 80076f4:	4648      	mov	r0, r9
 80076f6:	f000 fcad 	bl	8008054 <__mcmp>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f77f aeb3 	ble.w	8007466 <_dtoa_r+0x68e>
 8007700:	4656      	mov	r6, sl
 8007702:	2331      	movs	r3, #49	@ 0x31
 8007704:	f806 3b01 	strb.w	r3, [r6], #1
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	3301      	adds	r3, #1
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	e6ae      	b.n	800746e <_dtoa_r+0x696>
 8007710:	9c07      	ldr	r4, [sp, #28]
 8007712:	9704      	str	r7, [sp, #16]
 8007714:	4625      	mov	r5, r4
 8007716:	e7f3      	b.n	8007700 <_dtoa_r+0x928>
 8007718:	9b07      	ldr	r3, [sp, #28]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8104 	beq.w	800792c <_dtoa_r+0xb54>
 8007724:	2e00      	cmp	r6, #0
 8007726:	dd05      	ble.n	8007734 <_dtoa_r+0x95c>
 8007728:	4629      	mov	r1, r5
 800772a:	4632      	mov	r2, r6
 800772c:	4658      	mov	r0, fp
 800772e:	f000 fc25 	bl	8007f7c <__lshift>
 8007732:	4605      	mov	r5, r0
 8007734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	d05a      	beq.n	80077f0 <_dtoa_r+0xa18>
 800773a:	6869      	ldr	r1, [r5, #4]
 800773c:	4658      	mov	r0, fp
 800773e:	f000 fa0f 	bl	8007b60 <_Balloc>
 8007742:	4606      	mov	r6, r0
 8007744:	b928      	cbnz	r0, 8007752 <_dtoa_r+0x97a>
 8007746:	4b84      	ldr	r3, [pc, #528]	@ (8007958 <_dtoa_r+0xb80>)
 8007748:	4602      	mov	r2, r0
 800774a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800774e:	f7ff bb5a 	b.w	8006e06 <_dtoa_r+0x2e>
 8007752:	692a      	ldr	r2, [r5, #16]
 8007754:	3202      	adds	r2, #2
 8007756:	0092      	lsls	r2, r2, #2
 8007758:	f105 010c 	add.w	r1, r5, #12
 800775c:	300c      	adds	r0, #12
 800775e:	f7ff faa2 	bl	8006ca6 <memcpy>
 8007762:	2201      	movs	r2, #1
 8007764:	4631      	mov	r1, r6
 8007766:	4658      	mov	r0, fp
 8007768:	f000 fc08 	bl	8007f7c <__lshift>
 800776c:	f10a 0301 	add.w	r3, sl, #1
 8007770:	9307      	str	r3, [sp, #28]
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	4453      	add	r3, sl
 8007776:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	462f      	mov	r7, r5
 8007780:	930a      	str	r3, [sp, #40]	@ 0x28
 8007782:	4605      	mov	r5, r0
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	4621      	mov	r1, r4
 8007788:	3b01      	subs	r3, #1
 800778a:	4648      	mov	r0, r9
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f7ff fa98 	bl	8006cc2 <quorem>
 8007792:	4639      	mov	r1, r7
 8007794:	9002      	str	r0, [sp, #8]
 8007796:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800779a:	4648      	mov	r0, r9
 800779c:	f000 fc5a 	bl	8008054 <__mcmp>
 80077a0:	462a      	mov	r2, r5
 80077a2:	9008      	str	r0, [sp, #32]
 80077a4:	4621      	mov	r1, r4
 80077a6:	4658      	mov	r0, fp
 80077a8:	f000 fc70 	bl	800808c <__mdiff>
 80077ac:	68c2      	ldr	r2, [r0, #12]
 80077ae:	4606      	mov	r6, r0
 80077b0:	bb02      	cbnz	r2, 80077f4 <_dtoa_r+0xa1c>
 80077b2:	4601      	mov	r1, r0
 80077b4:	4648      	mov	r0, r9
 80077b6:	f000 fc4d 	bl	8008054 <__mcmp>
 80077ba:	4602      	mov	r2, r0
 80077bc:	4631      	mov	r1, r6
 80077be:	4658      	mov	r0, fp
 80077c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80077c2:	f000 fa0d 	bl	8007be0 <_Bfree>
 80077c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077ca:	9e07      	ldr	r6, [sp, #28]
 80077cc:	ea43 0102 	orr.w	r1, r3, r2
 80077d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d2:	4319      	orrs	r1, r3
 80077d4:	d110      	bne.n	80077f8 <_dtoa_r+0xa20>
 80077d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077da:	d029      	beq.n	8007830 <_dtoa_r+0xa58>
 80077dc:	9b08      	ldr	r3, [sp, #32]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd02      	ble.n	80077e8 <_dtoa_r+0xa10>
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	f883 8000 	strb.w	r8, [r3]
 80077ee:	e63f      	b.n	8007470 <_dtoa_r+0x698>
 80077f0:	4628      	mov	r0, r5
 80077f2:	e7bb      	b.n	800776c <_dtoa_r+0x994>
 80077f4:	2201      	movs	r2, #1
 80077f6:	e7e1      	b.n	80077bc <_dtoa_r+0x9e4>
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	db04      	blt.n	8007808 <_dtoa_r+0xa30>
 80077fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007800:	430b      	orrs	r3, r1
 8007802:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007804:	430b      	orrs	r3, r1
 8007806:	d120      	bne.n	800784a <_dtoa_r+0xa72>
 8007808:	2a00      	cmp	r2, #0
 800780a:	dded      	ble.n	80077e8 <_dtoa_r+0xa10>
 800780c:	4649      	mov	r1, r9
 800780e:	2201      	movs	r2, #1
 8007810:	4658      	mov	r0, fp
 8007812:	f000 fbb3 	bl	8007f7c <__lshift>
 8007816:	4621      	mov	r1, r4
 8007818:	4681      	mov	r9, r0
 800781a:	f000 fc1b 	bl	8008054 <__mcmp>
 800781e:	2800      	cmp	r0, #0
 8007820:	dc03      	bgt.n	800782a <_dtoa_r+0xa52>
 8007822:	d1e1      	bne.n	80077e8 <_dtoa_r+0xa10>
 8007824:	f018 0f01 	tst.w	r8, #1
 8007828:	d0de      	beq.n	80077e8 <_dtoa_r+0xa10>
 800782a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800782e:	d1d8      	bne.n	80077e2 <_dtoa_r+0xa0a>
 8007830:	9a00      	ldr	r2, [sp, #0]
 8007832:	2339      	movs	r3, #57	@ 0x39
 8007834:	7013      	strb	r3, [r2, #0]
 8007836:	4633      	mov	r3, r6
 8007838:	461e      	mov	r6, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007840:	2a39      	cmp	r2, #57	@ 0x39
 8007842:	d052      	beq.n	80078ea <_dtoa_r+0xb12>
 8007844:	3201      	adds	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e612      	b.n	8007470 <_dtoa_r+0x698>
 800784a:	2a00      	cmp	r2, #0
 800784c:	dd07      	ble.n	800785e <_dtoa_r+0xa86>
 800784e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007852:	d0ed      	beq.n	8007830 <_dtoa_r+0xa58>
 8007854:	9a00      	ldr	r2, [sp, #0]
 8007856:	f108 0301 	add.w	r3, r8, #1
 800785a:	7013      	strb	r3, [r2, #0]
 800785c:	e608      	b.n	8007470 <_dtoa_r+0x698>
 800785e:	9b07      	ldr	r3, [sp, #28]
 8007860:	9a07      	ldr	r2, [sp, #28]
 8007862:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007868:	4293      	cmp	r3, r2
 800786a:	d028      	beq.n	80078be <_dtoa_r+0xae6>
 800786c:	4649      	mov	r1, r9
 800786e:	2300      	movs	r3, #0
 8007870:	220a      	movs	r2, #10
 8007872:	4658      	mov	r0, fp
 8007874:	f000 f9d6 	bl	8007c24 <__multadd>
 8007878:	42af      	cmp	r7, r5
 800787a:	4681      	mov	r9, r0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	f04f 020a 	mov.w	r2, #10
 8007884:	4639      	mov	r1, r7
 8007886:	4658      	mov	r0, fp
 8007888:	d107      	bne.n	800789a <_dtoa_r+0xac2>
 800788a:	f000 f9cb 	bl	8007c24 <__multadd>
 800788e:	4607      	mov	r7, r0
 8007890:	4605      	mov	r5, r0
 8007892:	9b07      	ldr	r3, [sp, #28]
 8007894:	3301      	adds	r3, #1
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	e774      	b.n	8007784 <_dtoa_r+0x9ac>
 800789a:	f000 f9c3 	bl	8007c24 <__multadd>
 800789e:	4629      	mov	r1, r5
 80078a0:	4607      	mov	r7, r0
 80078a2:	2300      	movs	r3, #0
 80078a4:	220a      	movs	r2, #10
 80078a6:	4658      	mov	r0, fp
 80078a8:	f000 f9bc 	bl	8007c24 <__multadd>
 80078ac:	4605      	mov	r5, r0
 80078ae:	e7f0      	b.n	8007892 <_dtoa_r+0xaba>
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bfcc      	ite	gt
 80078b6:	461e      	movgt	r6, r3
 80078b8:	2601      	movle	r6, #1
 80078ba:	4456      	add	r6, sl
 80078bc:	2700      	movs	r7, #0
 80078be:	4649      	mov	r1, r9
 80078c0:	2201      	movs	r2, #1
 80078c2:	4658      	mov	r0, fp
 80078c4:	f000 fb5a 	bl	8007f7c <__lshift>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4681      	mov	r9, r0
 80078cc:	f000 fbc2 	bl	8008054 <__mcmp>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	dcb0      	bgt.n	8007836 <_dtoa_r+0xa5e>
 80078d4:	d102      	bne.n	80078dc <_dtoa_r+0xb04>
 80078d6:	f018 0f01 	tst.w	r8, #1
 80078da:	d1ac      	bne.n	8007836 <_dtoa_r+0xa5e>
 80078dc:	4633      	mov	r3, r6
 80078de:	461e      	mov	r6, r3
 80078e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078e4:	2a30      	cmp	r2, #48	@ 0x30
 80078e6:	d0fa      	beq.n	80078de <_dtoa_r+0xb06>
 80078e8:	e5c2      	b.n	8007470 <_dtoa_r+0x698>
 80078ea:	459a      	cmp	sl, r3
 80078ec:	d1a4      	bne.n	8007838 <_dtoa_r+0xa60>
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	3301      	adds	r3, #1
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	2331      	movs	r3, #49	@ 0x31
 80078f6:	f88a 3000 	strb.w	r3, [sl]
 80078fa:	e5b9      	b.n	8007470 <_dtoa_r+0x698>
 80078fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800795c <_dtoa_r+0xb84>
 8007902:	b11b      	cbz	r3, 800790c <_dtoa_r+0xb34>
 8007904:	f10a 0308 	add.w	r3, sl, #8
 8007908:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	4650      	mov	r0, sl
 800790e:	b019      	add	sp, #100	@ 0x64
 8007910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007916:	2b01      	cmp	r3, #1
 8007918:	f77f ae37 	ble.w	800758a <_dtoa_r+0x7b2>
 800791c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800791e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007920:	2001      	movs	r0, #1
 8007922:	e655      	b.n	80075d0 <_dtoa_r+0x7f8>
 8007924:	9b00      	ldr	r3, [sp, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f77f aed6 	ble.w	80076d8 <_dtoa_r+0x900>
 800792c:	4656      	mov	r6, sl
 800792e:	4621      	mov	r1, r4
 8007930:	4648      	mov	r0, r9
 8007932:	f7ff f9c6 	bl	8006cc2 <quorem>
 8007936:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800793a:	f806 8b01 	strb.w	r8, [r6], #1
 800793e:	9b00      	ldr	r3, [sp, #0]
 8007940:	eba6 020a 	sub.w	r2, r6, sl
 8007944:	4293      	cmp	r3, r2
 8007946:	ddb3      	ble.n	80078b0 <_dtoa_r+0xad8>
 8007948:	4649      	mov	r1, r9
 800794a:	2300      	movs	r3, #0
 800794c:	220a      	movs	r2, #10
 800794e:	4658      	mov	r0, fp
 8007950:	f000 f968 	bl	8007c24 <__multadd>
 8007954:	4681      	mov	r9, r0
 8007956:	e7ea      	b.n	800792e <_dtoa_r+0xb56>
 8007958:	08009490 	.word	0x08009490
 800795c:	08009414 	.word	0x08009414

08007960 <_free_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4605      	mov	r5, r0
 8007964:	2900      	cmp	r1, #0
 8007966:	d041      	beq.n	80079ec <_free_r+0x8c>
 8007968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796c:	1f0c      	subs	r4, r1, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfb8      	it	lt
 8007972:	18e4      	addlt	r4, r4, r3
 8007974:	f000 f8e8 	bl	8007b48 <__malloc_lock>
 8007978:	4a1d      	ldr	r2, [pc, #116]	@ (80079f0 <_free_r+0x90>)
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	b933      	cbnz	r3, 800798c <_free_r+0x2c>
 800797e:	6063      	str	r3, [r4, #4]
 8007980:	6014      	str	r4, [r2, #0]
 8007982:	4628      	mov	r0, r5
 8007984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007988:	f000 b8e4 	b.w	8007b54 <__malloc_unlock>
 800798c:	42a3      	cmp	r3, r4
 800798e:	d908      	bls.n	80079a2 <_free_r+0x42>
 8007990:	6820      	ldr	r0, [r4, #0]
 8007992:	1821      	adds	r1, r4, r0
 8007994:	428b      	cmp	r3, r1
 8007996:	bf01      	itttt	eq
 8007998:	6819      	ldreq	r1, [r3, #0]
 800799a:	685b      	ldreq	r3, [r3, #4]
 800799c:	1809      	addeq	r1, r1, r0
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	e7ed      	b.n	800797e <_free_r+0x1e>
 80079a2:	461a      	mov	r2, r3
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	b10b      	cbz	r3, 80079ac <_free_r+0x4c>
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	d9fa      	bls.n	80079a2 <_free_r+0x42>
 80079ac:	6811      	ldr	r1, [r2, #0]
 80079ae:	1850      	adds	r0, r2, r1
 80079b0:	42a0      	cmp	r0, r4
 80079b2:	d10b      	bne.n	80079cc <_free_r+0x6c>
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	4401      	add	r1, r0
 80079b8:	1850      	adds	r0, r2, r1
 80079ba:	4283      	cmp	r3, r0
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	d1e0      	bne.n	8007982 <_free_r+0x22>
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	6053      	str	r3, [r2, #4]
 80079c6:	4408      	add	r0, r1
 80079c8:	6010      	str	r0, [r2, #0]
 80079ca:	e7da      	b.n	8007982 <_free_r+0x22>
 80079cc:	d902      	bls.n	80079d4 <_free_r+0x74>
 80079ce:	230c      	movs	r3, #12
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	e7d6      	b.n	8007982 <_free_r+0x22>
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	1821      	adds	r1, r4, r0
 80079d8:	428b      	cmp	r3, r1
 80079da:	bf04      	itt	eq
 80079dc:	6819      	ldreq	r1, [r3, #0]
 80079de:	685b      	ldreq	r3, [r3, #4]
 80079e0:	6063      	str	r3, [r4, #4]
 80079e2:	bf04      	itt	eq
 80079e4:	1809      	addeq	r1, r1, r0
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	6054      	str	r4, [r2, #4]
 80079ea:	e7ca      	b.n	8007982 <_free_r+0x22>
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	200015e0 	.word	0x200015e0

080079f4 <malloc>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	@ (8007a00 <malloc+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 b825 	b.w	8007a48 <_malloc_r>
 80079fe:	bf00      	nop
 8007a00:	2000003c 	.word	0x2000003c

08007a04 <sbrk_aligned>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	4e0f      	ldr	r6, [pc, #60]	@ (8007a44 <sbrk_aligned+0x40>)
 8007a08:	460c      	mov	r4, r1
 8007a0a:	6831      	ldr	r1, [r6, #0]
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	b911      	cbnz	r1, 8007a16 <sbrk_aligned+0x12>
 8007a10:	f000 fe9a 	bl	8008748 <_sbrk_r>
 8007a14:	6030      	str	r0, [r6, #0]
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 fe95 	bl	8008748 <_sbrk_r>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d103      	bne.n	8007a2a <sbrk_aligned+0x26>
 8007a22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a26:	4620      	mov	r0, r4
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d0f8      	beq.n	8007a26 <sbrk_aligned+0x22>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fe86 	bl	8008748 <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d1f2      	bne.n	8007a26 <sbrk_aligned+0x22>
 8007a40:	e7ef      	b.n	8007a22 <sbrk_aligned+0x1e>
 8007a42:	bf00      	nop
 8007a44:	200015dc 	.word	0x200015dc

08007a48 <_malloc_r>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	1ccd      	adds	r5, r1, #3
 8007a4e:	f025 0503 	bic.w	r5, r5, #3
 8007a52:	3508      	adds	r5, #8
 8007a54:	2d0c      	cmp	r5, #12
 8007a56:	bf38      	it	cc
 8007a58:	250c      	movcc	r5, #12
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	db01      	blt.n	8007a64 <_malloc_r+0x1c>
 8007a60:	42a9      	cmp	r1, r5
 8007a62:	d904      	bls.n	8007a6e <_malloc_r+0x26>
 8007a64:	230c      	movs	r3, #12
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b44 <_malloc_r+0xfc>
 8007a72:	f000 f869 	bl	8007b48 <__malloc_lock>
 8007a76:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7a:	461c      	mov	r4, r3
 8007a7c:	bb44      	cbnz	r4, 8007ad0 <_malloc_r+0x88>
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7ff ffbf 	bl	8007a04 <sbrk_aligned>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	4604      	mov	r4, r0
 8007a8a:	d158      	bne.n	8007b3e <_malloc_r+0xf6>
 8007a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a90:	4627      	mov	r7, r4
 8007a92:	2f00      	cmp	r7, #0
 8007a94:	d143      	bne.n	8007b1e <_malloc_r+0xd6>
 8007a96:	2c00      	cmp	r4, #0
 8007a98:	d04b      	beq.n	8007b32 <_malloc_r+0xea>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	eb04 0903 	add.w	r9, r4, r3
 8007aa4:	f000 fe50 	bl	8008748 <_sbrk_r>
 8007aa8:	4581      	cmp	r9, r0
 8007aaa:	d142      	bne.n	8007b32 <_malloc_r+0xea>
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	1a6d      	subs	r5, r5, r1
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7ff ffa6 	bl	8007a04 <sbrk_aligned>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d03a      	beq.n	8007b32 <_malloc_r+0xea>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	442b      	add	r3, r5
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	bb62      	cbnz	r2, 8007b24 <_malloc_r+0xdc>
 8007aca:	f8c8 7000 	str.w	r7, [r8]
 8007ace:	e00f      	b.n	8007af0 <_malloc_r+0xa8>
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	1b52      	subs	r2, r2, r5
 8007ad4:	d420      	bmi.n	8007b18 <_malloc_r+0xd0>
 8007ad6:	2a0b      	cmp	r2, #11
 8007ad8:	d917      	bls.n	8007b0a <_malloc_r+0xc2>
 8007ada:	1961      	adds	r1, r4, r5
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	6025      	str	r5, [r4, #0]
 8007ae0:	bf18      	it	ne
 8007ae2:	6059      	strne	r1, [r3, #4]
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	bf08      	it	eq
 8007ae8:	f8c8 1000 	streq.w	r1, [r8]
 8007aec:	5162      	str	r2, [r4, r5]
 8007aee:	604b      	str	r3, [r1, #4]
 8007af0:	4630      	mov	r0, r6
 8007af2:	f000 f82f 	bl	8007b54 <__malloc_unlock>
 8007af6:	f104 000b 	add.w	r0, r4, #11
 8007afa:	1d23      	adds	r3, r4, #4
 8007afc:	f020 0007 	bic.w	r0, r0, #7
 8007b00:	1ac2      	subs	r2, r0, r3
 8007b02:	bf1c      	itt	ne
 8007b04:	1a1b      	subne	r3, r3, r0
 8007b06:	50a3      	strne	r3, [r4, r2]
 8007b08:	e7af      	b.n	8007a6a <_malloc_r+0x22>
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	bf0c      	ite	eq
 8007b10:	f8c8 2000 	streq.w	r2, [r8]
 8007b14:	605a      	strne	r2, [r3, #4]
 8007b16:	e7eb      	b.n	8007af0 <_malloc_r+0xa8>
 8007b18:	4623      	mov	r3, r4
 8007b1a:	6864      	ldr	r4, [r4, #4]
 8007b1c:	e7ae      	b.n	8007a7c <_malloc_r+0x34>
 8007b1e:	463c      	mov	r4, r7
 8007b20:	687f      	ldr	r7, [r7, #4]
 8007b22:	e7b6      	b.n	8007a92 <_malloc_r+0x4a>
 8007b24:	461a      	mov	r2, r3
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d1fb      	bne.n	8007b24 <_malloc_r+0xdc>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6053      	str	r3, [r2, #4]
 8007b30:	e7de      	b.n	8007af0 <_malloc_r+0xa8>
 8007b32:	230c      	movs	r3, #12
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 f80c 	bl	8007b54 <__malloc_unlock>
 8007b3c:	e794      	b.n	8007a68 <_malloc_r+0x20>
 8007b3e:	6005      	str	r5, [r0, #0]
 8007b40:	e7d6      	b.n	8007af0 <_malloc_r+0xa8>
 8007b42:	bf00      	nop
 8007b44:	200015e0 	.word	0x200015e0

08007b48 <__malloc_lock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__malloc_lock+0x8>)
 8007b4a:	f7ff b8aa 	b.w	8006ca2 <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	200015d8 	.word	0x200015d8

08007b54 <__malloc_unlock>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__malloc_unlock+0x8>)
 8007b56:	f7ff b8a5 	b.w	8006ca4 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	200015d8 	.word	0x200015d8

08007b60 <_Balloc>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	69c6      	ldr	r6, [r0, #28]
 8007b64:	4604      	mov	r4, r0
 8007b66:	460d      	mov	r5, r1
 8007b68:	b976      	cbnz	r6, 8007b88 <_Balloc+0x28>
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f7ff ff42 	bl	80079f4 <malloc>
 8007b70:	4602      	mov	r2, r0
 8007b72:	61e0      	str	r0, [r4, #28]
 8007b74:	b920      	cbnz	r0, 8007b80 <_Balloc+0x20>
 8007b76:	4b18      	ldr	r3, [pc, #96]	@ (8007bd8 <_Balloc+0x78>)
 8007b78:	4818      	ldr	r0, [pc, #96]	@ (8007bdc <_Balloc+0x7c>)
 8007b7a:	216b      	movs	r1, #107	@ 0x6b
 8007b7c:	f000 fdf4 	bl	8008768 <__assert_func>
 8007b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b84:	6006      	str	r6, [r0, #0]
 8007b86:	60c6      	str	r6, [r0, #12]
 8007b88:	69e6      	ldr	r6, [r4, #28]
 8007b8a:	68f3      	ldr	r3, [r6, #12]
 8007b8c:	b183      	cbz	r3, 8007bb0 <_Balloc+0x50>
 8007b8e:	69e3      	ldr	r3, [r4, #28]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b96:	b9b8      	cbnz	r0, 8007bc8 <_Balloc+0x68>
 8007b98:	2101      	movs	r1, #1
 8007b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b9e:	1d72      	adds	r2, r6, #5
 8007ba0:	0092      	lsls	r2, r2, #2
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 fdfe 	bl	80087a4 <_calloc_r>
 8007ba8:	b160      	cbz	r0, 8007bc4 <_Balloc+0x64>
 8007baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bae:	e00e      	b.n	8007bce <_Balloc+0x6e>
 8007bb0:	2221      	movs	r2, #33	@ 0x21
 8007bb2:	2104      	movs	r1, #4
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fdf5 	bl	80087a4 <_calloc_r>
 8007bba:	69e3      	ldr	r3, [r4, #28]
 8007bbc:	60f0      	str	r0, [r6, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e4      	bne.n	8007b8e <_Balloc+0x2e>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	6802      	ldr	r2, [r0, #0]
 8007bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bd4:	e7f7      	b.n	8007bc6 <_Balloc+0x66>
 8007bd6:	bf00      	nop
 8007bd8:	08009421 	.word	0x08009421
 8007bdc:	080094a1 	.word	0x080094a1

08007be0 <_Bfree>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	69c6      	ldr	r6, [r0, #28]
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b976      	cbnz	r6, 8007c08 <_Bfree+0x28>
 8007bea:	2010      	movs	r0, #16
 8007bec:	f7ff ff02 	bl	80079f4 <malloc>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	61e8      	str	r0, [r5, #28]
 8007bf4:	b920      	cbnz	r0, 8007c00 <_Bfree+0x20>
 8007bf6:	4b09      	ldr	r3, [pc, #36]	@ (8007c1c <_Bfree+0x3c>)
 8007bf8:	4809      	ldr	r0, [pc, #36]	@ (8007c20 <_Bfree+0x40>)
 8007bfa:	218f      	movs	r1, #143	@ 0x8f
 8007bfc:	f000 fdb4 	bl	8008768 <__assert_func>
 8007c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c04:	6006      	str	r6, [r0, #0]
 8007c06:	60c6      	str	r6, [r0, #12]
 8007c08:	b13c      	cbz	r4, 8007c1a <_Bfree+0x3a>
 8007c0a:	69eb      	ldr	r3, [r5, #28]
 8007c0c:	6862      	ldr	r2, [r4, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c14:	6021      	str	r1, [r4, #0]
 8007c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	08009421 	.word	0x08009421
 8007c20:	080094a1 	.word	0x080094a1

08007c24 <__multadd>:
 8007c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c28:	690d      	ldr	r5, [r1, #16]
 8007c2a:	4607      	mov	r7, r0
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	461e      	mov	r6, r3
 8007c30:	f101 0c14 	add.w	ip, r1, #20
 8007c34:	2000      	movs	r0, #0
 8007c36:	f8dc 3000 	ldr.w	r3, [ip]
 8007c3a:	b299      	uxth	r1, r3
 8007c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8007c40:	0c1e      	lsrs	r6, r3, #16
 8007c42:	0c0b      	lsrs	r3, r1, #16
 8007c44:	fb02 3306 	mla	r3, r2, r6, r3
 8007c48:	b289      	uxth	r1, r1
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c50:	4285      	cmp	r5, r0
 8007c52:	f84c 1b04 	str.w	r1, [ip], #4
 8007c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c5a:	dcec      	bgt.n	8007c36 <__multadd+0x12>
 8007c5c:	b30e      	cbz	r6, 8007ca2 <__multadd+0x7e>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dc19      	bgt.n	8007c98 <__multadd+0x74>
 8007c64:	6861      	ldr	r1, [r4, #4]
 8007c66:	4638      	mov	r0, r7
 8007c68:	3101      	adds	r1, #1
 8007c6a:	f7ff ff79 	bl	8007b60 <_Balloc>
 8007c6e:	4680      	mov	r8, r0
 8007c70:	b928      	cbnz	r0, 8007c7e <__multadd+0x5a>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca8 <__multadd+0x84>)
 8007c76:	480d      	ldr	r0, [pc, #52]	@ (8007cac <__multadd+0x88>)
 8007c78:	21ba      	movs	r1, #186	@ 0xba
 8007c7a:	f000 fd75 	bl	8008768 <__assert_func>
 8007c7e:	6922      	ldr	r2, [r4, #16]
 8007c80:	3202      	adds	r2, #2
 8007c82:	f104 010c 	add.w	r1, r4, #12
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	300c      	adds	r0, #12
 8007c8a:	f7ff f80c 	bl	8006ca6 <memcpy>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff ffa5 	bl	8007be0 <_Bfree>
 8007c96:	4644      	mov	r4, r8
 8007c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	615e      	str	r6, [r3, #20]
 8007ca0:	6125      	str	r5, [r4, #16]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	08009490 	.word	0x08009490
 8007cac:	080094a1 	.word	0x080094a1

08007cb0 <__hi0bits>:
 8007cb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	bf36      	itet	cc
 8007cb8:	0403      	lslcc	r3, r0, #16
 8007cba:	2000      	movcs	r0, #0
 8007cbc:	2010      	movcc	r0, #16
 8007cbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cc2:	bf3c      	itt	cc
 8007cc4:	021b      	lslcc	r3, r3, #8
 8007cc6:	3008      	addcc	r0, #8
 8007cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ccc:	bf3c      	itt	cc
 8007cce:	011b      	lslcc	r3, r3, #4
 8007cd0:	3004      	addcc	r0, #4
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd6:	bf3c      	itt	cc
 8007cd8:	009b      	lslcc	r3, r3, #2
 8007cda:	3002      	addcc	r0, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	db05      	blt.n	8007cec <__hi0bits+0x3c>
 8007ce0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ce4:	f100 0001 	add.w	r0, r0, #1
 8007ce8:	bf08      	it	eq
 8007cea:	2020      	moveq	r0, #32
 8007cec:	4770      	bx	lr

08007cee <__lo0bits>:
 8007cee:	6803      	ldr	r3, [r0, #0]
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f013 0007 	ands.w	r0, r3, #7
 8007cf6:	d00b      	beq.n	8007d10 <__lo0bits+0x22>
 8007cf8:	07d9      	lsls	r1, r3, #31
 8007cfa:	d421      	bmi.n	8007d40 <__lo0bits+0x52>
 8007cfc:	0798      	lsls	r0, r3, #30
 8007cfe:	bf49      	itett	mi
 8007d00:	085b      	lsrmi	r3, r3, #1
 8007d02:	089b      	lsrpl	r3, r3, #2
 8007d04:	2001      	movmi	r0, #1
 8007d06:	6013      	strmi	r3, [r2, #0]
 8007d08:	bf5c      	itt	pl
 8007d0a:	6013      	strpl	r3, [r2, #0]
 8007d0c:	2002      	movpl	r0, #2
 8007d0e:	4770      	bx	lr
 8007d10:	b299      	uxth	r1, r3
 8007d12:	b909      	cbnz	r1, 8007d18 <__lo0bits+0x2a>
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	2010      	movs	r0, #16
 8007d18:	b2d9      	uxtb	r1, r3
 8007d1a:	b909      	cbnz	r1, 8007d20 <__lo0bits+0x32>
 8007d1c:	3008      	adds	r0, #8
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	0719      	lsls	r1, r3, #28
 8007d22:	bf04      	itt	eq
 8007d24:	091b      	lsreq	r3, r3, #4
 8007d26:	3004      	addeq	r0, #4
 8007d28:	0799      	lsls	r1, r3, #30
 8007d2a:	bf04      	itt	eq
 8007d2c:	089b      	lsreq	r3, r3, #2
 8007d2e:	3002      	addeq	r0, #2
 8007d30:	07d9      	lsls	r1, r3, #31
 8007d32:	d403      	bmi.n	8007d3c <__lo0bits+0x4e>
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	f100 0001 	add.w	r0, r0, #1
 8007d3a:	d003      	beq.n	8007d44 <__lo0bits+0x56>
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4770      	bx	lr
 8007d40:	2000      	movs	r0, #0
 8007d42:	4770      	bx	lr
 8007d44:	2020      	movs	r0, #32
 8007d46:	4770      	bx	lr

08007d48 <__i2b>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	f7ff ff07 	bl	8007b60 <_Balloc>
 8007d52:	4602      	mov	r2, r0
 8007d54:	b928      	cbnz	r0, 8007d62 <__i2b+0x1a>
 8007d56:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <__i2b+0x24>)
 8007d58:	4805      	ldr	r0, [pc, #20]	@ (8007d70 <__i2b+0x28>)
 8007d5a:	f240 1145 	movw	r1, #325	@ 0x145
 8007d5e:	f000 fd03 	bl	8008768 <__assert_func>
 8007d62:	2301      	movs	r3, #1
 8007d64:	6144      	str	r4, [r0, #20]
 8007d66:	6103      	str	r3, [r0, #16]
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	08009490 	.word	0x08009490
 8007d70:	080094a1 	.word	0x080094a1

08007d74 <__multiply>:
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	4614      	mov	r4, r2
 8007d7a:	690a      	ldr	r2, [r1, #16]
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	bfa8      	it	ge
 8007d82:	4623      	movge	r3, r4
 8007d84:	460f      	mov	r7, r1
 8007d86:	bfa4      	itt	ge
 8007d88:	460c      	movge	r4, r1
 8007d8a:	461f      	movge	r7, r3
 8007d8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	6861      	ldr	r1, [r4, #4]
 8007d98:	eb0a 0609 	add.w	r6, sl, r9
 8007d9c:	42b3      	cmp	r3, r6
 8007d9e:	b085      	sub	sp, #20
 8007da0:	bfb8      	it	lt
 8007da2:	3101      	addlt	r1, #1
 8007da4:	f7ff fedc 	bl	8007b60 <_Balloc>
 8007da8:	b930      	cbnz	r0, 8007db8 <__multiply+0x44>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b44      	ldr	r3, [pc, #272]	@ (8007ec0 <__multiply+0x14c>)
 8007dae:	4845      	ldr	r0, [pc, #276]	@ (8007ec4 <__multiply+0x150>)
 8007db0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007db4:	f000 fcd8 	bl	8008768 <__assert_func>
 8007db8:	f100 0514 	add.w	r5, r0, #20
 8007dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4543      	cmp	r3, r8
 8007dc6:	d321      	bcc.n	8007e0c <__multiply+0x98>
 8007dc8:	f107 0114 	add.w	r1, r7, #20
 8007dcc:	f104 0214 	add.w	r2, r4, #20
 8007dd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007dd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007dd8:	9302      	str	r3, [sp, #8]
 8007dda:	1b13      	subs	r3, r2, r4
 8007ddc:	3b15      	subs	r3, #21
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	3304      	adds	r3, #4
 8007de4:	f104 0715 	add.w	r7, r4, #21
 8007de8:	42ba      	cmp	r2, r7
 8007dea:	bf38      	it	cc
 8007dec:	2304      	movcc	r3, #4
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	9b02      	ldr	r3, [sp, #8]
 8007df2:	9103      	str	r1, [sp, #12]
 8007df4:	428b      	cmp	r3, r1
 8007df6:	d80c      	bhi.n	8007e12 <__multiply+0x9e>
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	dd03      	ble.n	8007e04 <__multiply+0x90>
 8007dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d05b      	beq.n	8007ebc <__multiply+0x148>
 8007e04:	6106      	str	r6, [r0, #16]
 8007e06:	b005      	add	sp, #20
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	f843 2b04 	str.w	r2, [r3], #4
 8007e10:	e7d8      	b.n	8007dc4 <__multiply+0x50>
 8007e12:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e16:	f1ba 0f00 	cmp.w	sl, #0
 8007e1a:	d024      	beq.n	8007e66 <__multiply+0xf2>
 8007e1c:	f104 0e14 	add.w	lr, r4, #20
 8007e20:	46a9      	mov	r9, r5
 8007e22:	f04f 0c00 	mov.w	ip, #0
 8007e26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e2a:	f8d9 3000 	ldr.w	r3, [r9]
 8007e2e:	fa1f fb87 	uxth.w	fp, r7
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e3c:	f8d9 7000 	ldr.w	r7, [r9]
 8007e40:	4463      	add	r3, ip
 8007e42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e46:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e54:	4572      	cmp	r2, lr
 8007e56:	f849 3b04 	str.w	r3, [r9], #4
 8007e5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e5e:	d8e2      	bhi.n	8007e26 <__multiply+0xb2>
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	f845 c003 	str.w	ip, [r5, r3]
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e6c:	3104      	adds	r1, #4
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	d021      	beq.n	8007eb8 <__multiply+0x144>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	f104 0c14 	add.w	ip, r4, #20
 8007e7a:	46ae      	mov	lr, r5
 8007e7c:	f04f 0a00 	mov.w	sl, #0
 8007e80:	f8bc b000 	ldrh.w	fp, [ip]
 8007e84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e88:	fb09 770b 	mla	r7, r9, fp, r7
 8007e8c:	4457      	add	r7, sl
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e94:	f84e 3b04 	str.w	r3, [lr], #4
 8007e98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ea0:	f8be 3000 	ldrh.w	r3, [lr]
 8007ea4:	fb09 330a 	mla	r3, r9, sl, r3
 8007ea8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007eac:	4562      	cmp	r2, ip
 8007eae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eb2:	d8e5      	bhi.n	8007e80 <__multiply+0x10c>
 8007eb4:	9f01      	ldr	r7, [sp, #4]
 8007eb6:	51eb      	str	r3, [r5, r7]
 8007eb8:	3504      	adds	r5, #4
 8007eba:	e799      	b.n	8007df0 <__multiply+0x7c>
 8007ebc:	3e01      	subs	r6, #1
 8007ebe:	e79b      	b.n	8007df8 <__multiply+0x84>
 8007ec0:	08009490 	.word	0x08009490
 8007ec4:	080094a1 	.word	0x080094a1

08007ec8 <__pow5mult>:
 8007ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ecc:	4615      	mov	r5, r2
 8007ece:	f012 0203 	ands.w	r2, r2, #3
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	d007      	beq.n	8007ee8 <__pow5mult+0x20>
 8007ed8:	4c25      	ldr	r4, [pc, #148]	@ (8007f70 <__pow5mult+0xa8>)
 8007eda:	3a01      	subs	r2, #1
 8007edc:	2300      	movs	r3, #0
 8007ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ee2:	f7ff fe9f 	bl	8007c24 <__multadd>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	10ad      	asrs	r5, r5, #2
 8007eea:	d03d      	beq.n	8007f68 <__pow5mult+0xa0>
 8007eec:	69fc      	ldr	r4, [r7, #28]
 8007eee:	b97c      	cbnz	r4, 8007f10 <__pow5mult+0x48>
 8007ef0:	2010      	movs	r0, #16
 8007ef2:	f7ff fd7f 	bl	80079f4 <malloc>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	61f8      	str	r0, [r7, #28]
 8007efa:	b928      	cbnz	r0, 8007f08 <__pow5mult+0x40>
 8007efc:	4b1d      	ldr	r3, [pc, #116]	@ (8007f74 <__pow5mult+0xac>)
 8007efe:	481e      	ldr	r0, [pc, #120]	@ (8007f78 <__pow5mult+0xb0>)
 8007f00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f04:	f000 fc30 	bl	8008768 <__assert_func>
 8007f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f0c:	6004      	str	r4, [r0, #0]
 8007f0e:	60c4      	str	r4, [r0, #12]
 8007f10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f18:	b94c      	cbnz	r4, 8007f2e <__pow5mult+0x66>
 8007f1a:	f240 2171 	movw	r1, #625	@ 0x271
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ff12 	bl	8007d48 <__i2b>
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	f04f 0900 	mov.w	r9, #0
 8007f32:	07eb      	lsls	r3, r5, #31
 8007f34:	d50a      	bpl.n	8007f4c <__pow5mult+0x84>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff ff1a 	bl	8007d74 <__multiply>
 8007f40:	4631      	mov	r1, r6
 8007f42:	4680      	mov	r8, r0
 8007f44:	4638      	mov	r0, r7
 8007f46:	f7ff fe4b 	bl	8007be0 <_Bfree>
 8007f4a:	4646      	mov	r6, r8
 8007f4c:	106d      	asrs	r5, r5, #1
 8007f4e:	d00b      	beq.n	8007f68 <__pow5mult+0xa0>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	b938      	cbnz	r0, 8007f64 <__pow5mult+0x9c>
 8007f54:	4622      	mov	r2, r4
 8007f56:	4621      	mov	r1, r4
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f7ff ff0b 	bl	8007d74 <__multiply>
 8007f5e:	6020      	str	r0, [r4, #0]
 8007f60:	f8c0 9000 	str.w	r9, [r0]
 8007f64:	4604      	mov	r4, r0
 8007f66:	e7e4      	b.n	8007f32 <__pow5mult+0x6a>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	bf00      	nop
 8007f70:	080094fc 	.word	0x080094fc
 8007f74:	08009421 	.word	0x08009421
 8007f78:	080094a1 	.word	0x080094a1

08007f7c <__lshift>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	6849      	ldr	r1, [r1, #4]
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	4691      	mov	r9, r2
 8007f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f94:	f108 0601 	add.w	r6, r8, #1
 8007f98:	42b3      	cmp	r3, r6
 8007f9a:	db0b      	blt.n	8007fb4 <__lshift+0x38>
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	f7ff fddf 	bl	8007b60 <_Balloc>
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	b948      	cbnz	r0, 8007fba <__lshift+0x3e>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	4b28      	ldr	r3, [pc, #160]	@ (800804c <__lshift+0xd0>)
 8007faa:	4829      	ldr	r0, [pc, #164]	@ (8008050 <__lshift+0xd4>)
 8007fac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007fb0:	f000 fbda 	bl	8008768 <__assert_func>
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	e7ee      	b.n	8007f98 <__lshift+0x1c>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f100 0114 	add.w	r1, r0, #20
 8007fc0:	f100 0210 	add.w	r2, r0, #16
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	4553      	cmp	r3, sl
 8007fc8:	db33      	blt.n	8008032 <__lshift+0xb6>
 8007fca:	6920      	ldr	r0, [r4, #16]
 8007fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fd0:	f104 0314 	add.w	r3, r4, #20
 8007fd4:	f019 091f 	ands.w	r9, r9, #31
 8007fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fe0:	d02b      	beq.n	800803a <__lshift+0xbe>
 8007fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8007fe6:	468a      	mov	sl, r1
 8007fe8:	2200      	movs	r2, #0
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	fa00 f009 	lsl.w	r0, r0, r9
 8007ff0:	4310      	orrs	r0, r2
 8007ff2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffa:	459c      	cmp	ip, r3
 8007ffc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008000:	d8f3      	bhi.n	8007fea <__lshift+0x6e>
 8008002:	ebac 0304 	sub.w	r3, ip, r4
 8008006:	3b15      	subs	r3, #21
 8008008:	f023 0303 	bic.w	r3, r3, #3
 800800c:	3304      	adds	r3, #4
 800800e:	f104 0015 	add.w	r0, r4, #21
 8008012:	4584      	cmp	ip, r0
 8008014:	bf38      	it	cc
 8008016:	2304      	movcc	r3, #4
 8008018:	50ca      	str	r2, [r1, r3]
 800801a:	b10a      	cbz	r2, 8008020 <__lshift+0xa4>
 800801c:	f108 0602 	add.w	r6, r8, #2
 8008020:	3e01      	subs	r6, #1
 8008022:	4638      	mov	r0, r7
 8008024:	612e      	str	r6, [r5, #16]
 8008026:	4621      	mov	r1, r4
 8008028:	f7ff fdda 	bl	8007be0 <_Bfree>
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008032:	f842 0f04 	str.w	r0, [r2, #4]!
 8008036:	3301      	adds	r3, #1
 8008038:	e7c5      	b.n	8007fc6 <__lshift+0x4a>
 800803a:	3904      	subs	r1, #4
 800803c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008040:	f841 2f04 	str.w	r2, [r1, #4]!
 8008044:	459c      	cmp	ip, r3
 8008046:	d8f9      	bhi.n	800803c <__lshift+0xc0>
 8008048:	e7ea      	b.n	8008020 <__lshift+0xa4>
 800804a:	bf00      	nop
 800804c:	08009490 	.word	0x08009490
 8008050:	080094a1 	.word	0x080094a1

08008054 <__mcmp>:
 8008054:	690a      	ldr	r2, [r1, #16]
 8008056:	4603      	mov	r3, r0
 8008058:	6900      	ldr	r0, [r0, #16]
 800805a:	1a80      	subs	r0, r0, r2
 800805c:	b530      	push	{r4, r5, lr}
 800805e:	d10e      	bne.n	800807e <__mcmp+0x2a>
 8008060:	3314      	adds	r3, #20
 8008062:	3114      	adds	r1, #20
 8008064:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008068:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800806c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008070:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008074:	4295      	cmp	r5, r2
 8008076:	d003      	beq.n	8008080 <__mcmp+0x2c>
 8008078:	d205      	bcs.n	8008086 <__mcmp+0x32>
 800807a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	42a3      	cmp	r3, r4
 8008082:	d3f3      	bcc.n	800806c <__mcmp+0x18>
 8008084:	e7fb      	b.n	800807e <__mcmp+0x2a>
 8008086:	2001      	movs	r0, #1
 8008088:	e7f9      	b.n	800807e <__mcmp+0x2a>
	...

0800808c <__mdiff>:
 800808c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	4689      	mov	r9, r1
 8008092:	4606      	mov	r6, r0
 8008094:	4611      	mov	r1, r2
 8008096:	4648      	mov	r0, r9
 8008098:	4614      	mov	r4, r2
 800809a:	f7ff ffdb 	bl	8008054 <__mcmp>
 800809e:	1e05      	subs	r5, r0, #0
 80080a0:	d112      	bne.n	80080c8 <__mdiff+0x3c>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff fd5b 	bl	8007b60 <_Balloc>
 80080aa:	4602      	mov	r2, r0
 80080ac:	b928      	cbnz	r0, 80080ba <__mdiff+0x2e>
 80080ae:	4b3f      	ldr	r3, [pc, #252]	@ (80081ac <__mdiff+0x120>)
 80080b0:	f240 2137 	movw	r1, #567	@ 0x237
 80080b4:	483e      	ldr	r0, [pc, #248]	@ (80081b0 <__mdiff+0x124>)
 80080b6:	f000 fb57 	bl	8008768 <__assert_func>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080c0:	4610      	mov	r0, r2
 80080c2:	b003      	add	sp, #12
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	bfbc      	itt	lt
 80080ca:	464b      	movlt	r3, r9
 80080cc:	46a1      	movlt	r9, r4
 80080ce:	4630      	mov	r0, r6
 80080d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080d4:	bfba      	itte	lt
 80080d6:	461c      	movlt	r4, r3
 80080d8:	2501      	movlt	r5, #1
 80080da:	2500      	movge	r5, #0
 80080dc:	f7ff fd40 	bl	8007b60 <_Balloc>
 80080e0:	4602      	mov	r2, r0
 80080e2:	b918      	cbnz	r0, 80080ec <__mdiff+0x60>
 80080e4:	4b31      	ldr	r3, [pc, #196]	@ (80081ac <__mdiff+0x120>)
 80080e6:	f240 2145 	movw	r1, #581	@ 0x245
 80080ea:	e7e3      	b.n	80080b4 <__mdiff+0x28>
 80080ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080f0:	6926      	ldr	r6, [r4, #16]
 80080f2:	60c5      	str	r5, [r0, #12]
 80080f4:	f109 0310 	add.w	r3, r9, #16
 80080f8:	f109 0514 	add.w	r5, r9, #20
 80080fc:	f104 0e14 	add.w	lr, r4, #20
 8008100:	f100 0b14 	add.w	fp, r0, #20
 8008104:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008108:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	46d9      	mov	r9, fp
 8008110:	f04f 0c00 	mov.w	ip, #0
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	f85e 0b04 	ldr.w	r0, [lr], #4
 800811a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	fa1f f38a 	uxth.w	r3, sl
 8008124:	4619      	mov	r1, r3
 8008126:	b283      	uxth	r3, r0
 8008128:	1acb      	subs	r3, r1, r3
 800812a:	0c00      	lsrs	r0, r0, #16
 800812c:	4463      	add	r3, ip
 800812e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008132:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800813c:	4576      	cmp	r6, lr
 800813e:	f849 3b04 	str.w	r3, [r9], #4
 8008142:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008146:	d8e5      	bhi.n	8008114 <__mdiff+0x88>
 8008148:	1b33      	subs	r3, r6, r4
 800814a:	3b15      	subs	r3, #21
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	3415      	adds	r4, #21
 8008152:	3304      	adds	r3, #4
 8008154:	42a6      	cmp	r6, r4
 8008156:	bf38      	it	cc
 8008158:	2304      	movcc	r3, #4
 800815a:	441d      	add	r5, r3
 800815c:	445b      	add	r3, fp
 800815e:	461e      	mov	r6, r3
 8008160:	462c      	mov	r4, r5
 8008162:	4544      	cmp	r4, r8
 8008164:	d30e      	bcc.n	8008184 <__mdiff+0xf8>
 8008166:	f108 0103 	add.w	r1, r8, #3
 800816a:	1b49      	subs	r1, r1, r5
 800816c:	f021 0103 	bic.w	r1, r1, #3
 8008170:	3d03      	subs	r5, #3
 8008172:	45a8      	cmp	r8, r5
 8008174:	bf38      	it	cc
 8008176:	2100      	movcc	r1, #0
 8008178:	440b      	add	r3, r1
 800817a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800817e:	b191      	cbz	r1, 80081a6 <__mdiff+0x11a>
 8008180:	6117      	str	r7, [r2, #16]
 8008182:	e79d      	b.n	80080c0 <__mdiff+0x34>
 8008184:	f854 1b04 	ldr.w	r1, [r4], #4
 8008188:	46e6      	mov	lr, ip
 800818a:	0c08      	lsrs	r0, r1, #16
 800818c:	fa1c fc81 	uxtah	ip, ip, r1
 8008190:	4471      	add	r1, lr
 8008192:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008196:	b289      	uxth	r1, r1
 8008198:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800819c:	f846 1b04 	str.w	r1, [r6], #4
 80081a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081a4:	e7dd      	b.n	8008162 <__mdiff+0xd6>
 80081a6:	3f01      	subs	r7, #1
 80081a8:	e7e7      	b.n	800817a <__mdiff+0xee>
 80081aa:	bf00      	nop
 80081ac:	08009490 	.word	0x08009490
 80081b0:	080094a1 	.word	0x080094a1

080081b4 <__d2b>:
 80081b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	460f      	mov	r7, r1
 80081ba:	2101      	movs	r1, #1
 80081bc:	ec59 8b10 	vmov	r8, r9, d0
 80081c0:	4616      	mov	r6, r2
 80081c2:	f7ff fccd 	bl	8007b60 <_Balloc>
 80081c6:	4604      	mov	r4, r0
 80081c8:	b930      	cbnz	r0, 80081d8 <__d2b+0x24>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b23      	ldr	r3, [pc, #140]	@ (800825c <__d2b+0xa8>)
 80081ce:	4824      	ldr	r0, [pc, #144]	@ (8008260 <__d2b+0xac>)
 80081d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80081d4:	f000 fac8 	bl	8008768 <__assert_func>
 80081d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e0:	b10d      	cbz	r5, 80081e6 <__d2b+0x32>
 80081e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	f1b8 0300 	subs.w	r3, r8, #0
 80081ec:	d023      	beq.n	8008236 <__d2b+0x82>
 80081ee:	4668      	mov	r0, sp
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	f7ff fd7c 	bl	8007cee <__lo0bits>
 80081f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081fa:	b1d0      	cbz	r0, 8008232 <__d2b+0x7e>
 80081fc:	f1c0 0320 	rsb	r3, r0, #32
 8008200:	fa02 f303 	lsl.w	r3, r2, r3
 8008204:	430b      	orrs	r3, r1
 8008206:	40c2      	lsrs	r2, r0
 8008208:	6163      	str	r3, [r4, #20]
 800820a:	9201      	str	r2, [sp, #4]
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	61a3      	str	r3, [r4, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bf0c      	ite	eq
 8008214:	2201      	moveq	r2, #1
 8008216:	2202      	movne	r2, #2
 8008218:	6122      	str	r2, [r4, #16]
 800821a:	b1a5      	cbz	r5, 8008246 <__d2b+0x92>
 800821c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008220:	4405      	add	r5, r0
 8008222:	603d      	str	r5, [r7, #0]
 8008224:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	4620      	mov	r0, r4
 800822c:	b003      	add	sp, #12
 800822e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008232:	6161      	str	r1, [r4, #20]
 8008234:	e7ea      	b.n	800820c <__d2b+0x58>
 8008236:	a801      	add	r0, sp, #4
 8008238:	f7ff fd59 	bl	8007cee <__lo0bits>
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	3020      	adds	r0, #32
 8008242:	2201      	movs	r2, #1
 8008244:	e7e8      	b.n	8008218 <__d2b+0x64>
 8008246:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800824a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800824e:	6038      	str	r0, [r7, #0]
 8008250:	6918      	ldr	r0, [r3, #16]
 8008252:	f7ff fd2d 	bl	8007cb0 <__hi0bits>
 8008256:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800825a:	e7e5      	b.n	8008228 <__d2b+0x74>
 800825c:	08009490 	.word	0x08009490
 8008260:	080094a1 	.word	0x080094a1

08008264 <__sfputc_r>:
 8008264:	6893      	ldr	r3, [r2, #8]
 8008266:	3b01      	subs	r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	b410      	push	{r4}
 800826c:	6093      	str	r3, [r2, #8]
 800826e:	da08      	bge.n	8008282 <__sfputc_r+0x1e>
 8008270:	6994      	ldr	r4, [r2, #24]
 8008272:	42a3      	cmp	r3, r4
 8008274:	db01      	blt.n	800827a <__sfputc_r+0x16>
 8008276:	290a      	cmp	r1, #10
 8008278:	d103      	bne.n	8008282 <__sfputc_r+0x1e>
 800827a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800827e:	f7fe bba8 	b.w	80069d2 <__swbuf_r>
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	1c58      	adds	r0, r3, #1
 8008286:	6010      	str	r0, [r2, #0]
 8008288:	7019      	strb	r1, [r3, #0]
 800828a:	4608      	mov	r0, r1
 800828c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008290:	4770      	bx	lr

08008292 <__sfputs_r>:
 8008292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008294:	4606      	mov	r6, r0
 8008296:	460f      	mov	r7, r1
 8008298:	4614      	mov	r4, r2
 800829a:	18d5      	adds	r5, r2, r3
 800829c:	42ac      	cmp	r4, r5
 800829e:	d101      	bne.n	80082a4 <__sfputs_r+0x12>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e007      	b.n	80082b4 <__sfputs_r+0x22>
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	463a      	mov	r2, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ffda 	bl	8008264 <__sfputc_r>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d1f3      	bne.n	800829c <__sfputs_r+0xa>
 80082b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082b8 <_vfiprintf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	460d      	mov	r5, r1
 80082be:	b09d      	sub	sp, #116	@ 0x74
 80082c0:	4614      	mov	r4, r2
 80082c2:	4698      	mov	r8, r3
 80082c4:	4606      	mov	r6, r0
 80082c6:	b118      	cbz	r0, 80082d0 <_vfiprintf_r+0x18>
 80082c8:	6a03      	ldr	r3, [r0, #32]
 80082ca:	b90b      	cbnz	r3, 80082d0 <_vfiprintf_r+0x18>
 80082cc:	f7fe fa98 	bl	8006800 <__sinit>
 80082d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	d405      	bmi.n	80082e2 <_vfiprintf_r+0x2a>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	059a      	lsls	r2, r3, #22
 80082da:	d402      	bmi.n	80082e2 <_vfiprintf_r+0x2a>
 80082dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082de:	f7fe fce0 	bl	8006ca2 <__retarget_lock_acquire_recursive>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	071b      	lsls	r3, r3, #28
 80082e6:	d501      	bpl.n	80082ec <_vfiprintf_r+0x34>
 80082e8:	692b      	ldr	r3, [r5, #16]
 80082ea:	b99b      	cbnz	r3, 8008314 <_vfiprintf_r+0x5c>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7fe fbae 	bl	8006a50 <__swsetup_r>
 80082f4:	b170      	cbz	r0, 8008314 <_vfiprintf_r+0x5c>
 80082f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082f8:	07dc      	lsls	r4, r3, #31
 80082fa:	d504      	bpl.n	8008306 <_vfiprintf_r+0x4e>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008300:	b01d      	add	sp, #116	@ 0x74
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	0598      	lsls	r0, r3, #22
 800830a:	d4f7      	bmi.n	80082fc <_vfiprintf_r+0x44>
 800830c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800830e:	f7fe fcc9 	bl	8006ca4 <__retarget_lock_release_recursive>
 8008312:	e7f3      	b.n	80082fc <_vfiprintf_r+0x44>
 8008314:	2300      	movs	r3, #0
 8008316:	9309      	str	r3, [sp, #36]	@ 0x24
 8008318:	2320      	movs	r3, #32
 800831a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800831e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008322:	2330      	movs	r3, #48	@ 0x30
 8008324:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084d4 <_vfiprintf_r+0x21c>
 8008328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800832c:	f04f 0901 	mov.w	r9, #1
 8008330:	4623      	mov	r3, r4
 8008332:	469a      	mov	sl, r3
 8008334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008338:	b10a      	cbz	r2, 800833e <_vfiprintf_r+0x86>
 800833a:	2a25      	cmp	r2, #37	@ 0x25
 800833c:	d1f9      	bne.n	8008332 <_vfiprintf_r+0x7a>
 800833e:	ebba 0b04 	subs.w	fp, sl, r4
 8008342:	d00b      	beq.n	800835c <_vfiprintf_r+0xa4>
 8008344:	465b      	mov	r3, fp
 8008346:	4622      	mov	r2, r4
 8008348:	4629      	mov	r1, r5
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ffa1 	bl	8008292 <__sfputs_r>
 8008350:	3001      	adds	r0, #1
 8008352:	f000 80a7 	beq.w	80084a4 <_vfiprintf_r+0x1ec>
 8008356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008358:	445a      	add	r2, fp
 800835a:	9209      	str	r2, [sp, #36]	@ 0x24
 800835c:	f89a 3000 	ldrb.w	r3, [sl]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 809f 	beq.w	80084a4 <_vfiprintf_r+0x1ec>
 8008366:	2300      	movs	r3, #0
 8008368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800836c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	9307      	str	r3, [sp, #28]
 8008378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800837c:	931a      	str	r3, [sp, #104]	@ 0x68
 800837e:	4654      	mov	r4, sl
 8008380:	2205      	movs	r2, #5
 8008382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008386:	4853      	ldr	r0, [pc, #332]	@ (80084d4 <_vfiprintf_r+0x21c>)
 8008388:	f7f7 ff22 	bl	80001d0 <memchr>
 800838c:	9a04      	ldr	r2, [sp, #16]
 800838e:	b9d8      	cbnz	r0, 80083c8 <_vfiprintf_r+0x110>
 8008390:	06d1      	lsls	r1, r2, #27
 8008392:	bf44      	itt	mi
 8008394:	2320      	movmi	r3, #32
 8008396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800839a:	0713      	lsls	r3, r2, #28
 800839c:	bf44      	itt	mi
 800839e:	232b      	movmi	r3, #43	@ 0x2b
 80083a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a4:	f89a 3000 	ldrb.w	r3, [sl]
 80083a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083aa:	d015      	beq.n	80083d8 <_vfiprintf_r+0x120>
 80083ac:	9a07      	ldr	r2, [sp, #28]
 80083ae:	4654      	mov	r4, sl
 80083b0:	2000      	movs	r0, #0
 80083b2:	f04f 0c0a 	mov.w	ip, #10
 80083b6:	4621      	mov	r1, r4
 80083b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083bc:	3b30      	subs	r3, #48	@ 0x30
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d94b      	bls.n	800845a <_vfiprintf_r+0x1a2>
 80083c2:	b1b0      	cbz	r0, 80083f2 <_vfiprintf_r+0x13a>
 80083c4:	9207      	str	r2, [sp, #28]
 80083c6:	e014      	b.n	80083f2 <_vfiprintf_r+0x13a>
 80083c8:	eba0 0308 	sub.w	r3, r0, r8
 80083cc:	fa09 f303 	lsl.w	r3, r9, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	46a2      	mov	sl, r4
 80083d6:	e7d2      	b.n	800837e <_vfiprintf_r+0xc6>
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	1d19      	adds	r1, r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	9103      	str	r1, [sp, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bfbb      	ittet	lt
 80083e4:	425b      	neglt	r3, r3
 80083e6:	f042 0202 	orrlt.w	r2, r2, #2
 80083ea:	9307      	strge	r3, [sp, #28]
 80083ec:	9307      	strlt	r3, [sp, #28]
 80083ee:	bfb8      	it	lt
 80083f0:	9204      	strlt	r2, [sp, #16]
 80083f2:	7823      	ldrb	r3, [r4, #0]
 80083f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80083f6:	d10a      	bne.n	800840e <_vfiprintf_r+0x156>
 80083f8:	7863      	ldrb	r3, [r4, #1]
 80083fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80083fc:	d132      	bne.n	8008464 <_vfiprintf_r+0x1ac>
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	1d1a      	adds	r2, r3, #4
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	9203      	str	r2, [sp, #12]
 8008406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800840a:	3402      	adds	r4, #2
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084e4 <_vfiprintf_r+0x22c>
 8008412:	7821      	ldrb	r1, [r4, #0]
 8008414:	2203      	movs	r2, #3
 8008416:	4650      	mov	r0, sl
 8008418:	f7f7 feda 	bl	80001d0 <memchr>
 800841c:	b138      	cbz	r0, 800842e <_vfiprintf_r+0x176>
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	eba0 000a 	sub.w	r0, r0, sl
 8008424:	2240      	movs	r2, #64	@ 0x40
 8008426:	4082      	lsls	r2, r0
 8008428:	4313      	orrs	r3, r2
 800842a:	3401      	adds	r4, #1
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008432:	4829      	ldr	r0, [pc, #164]	@ (80084d8 <_vfiprintf_r+0x220>)
 8008434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008438:	2206      	movs	r2, #6
 800843a:	f7f7 fec9 	bl	80001d0 <memchr>
 800843e:	2800      	cmp	r0, #0
 8008440:	d03f      	beq.n	80084c2 <_vfiprintf_r+0x20a>
 8008442:	4b26      	ldr	r3, [pc, #152]	@ (80084dc <_vfiprintf_r+0x224>)
 8008444:	bb1b      	cbnz	r3, 800848e <_vfiprintf_r+0x1d6>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	3307      	adds	r3, #7
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	3308      	adds	r3, #8
 8008450:	9303      	str	r3, [sp, #12]
 8008452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008454:	443b      	add	r3, r7
 8008456:	9309      	str	r3, [sp, #36]	@ 0x24
 8008458:	e76a      	b.n	8008330 <_vfiprintf_r+0x78>
 800845a:	fb0c 3202 	mla	r2, ip, r2, r3
 800845e:	460c      	mov	r4, r1
 8008460:	2001      	movs	r0, #1
 8008462:	e7a8      	b.n	80083b6 <_vfiprintf_r+0xfe>
 8008464:	2300      	movs	r3, #0
 8008466:	3401      	adds	r4, #1
 8008468:	9305      	str	r3, [sp, #20]
 800846a:	4619      	mov	r1, r3
 800846c:	f04f 0c0a 	mov.w	ip, #10
 8008470:	4620      	mov	r0, r4
 8008472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008476:	3a30      	subs	r2, #48	@ 0x30
 8008478:	2a09      	cmp	r2, #9
 800847a:	d903      	bls.n	8008484 <_vfiprintf_r+0x1cc>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0c6      	beq.n	800840e <_vfiprintf_r+0x156>
 8008480:	9105      	str	r1, [sp, #20]
 8008482:	e7c4      	b.n	800840e <_vfiprintf_r+0x156>
 8008484:	fb0c 2101 	mla	r1, ip, r1, r2
 8008488:	4604      	mov	r4, r0
 800848a:	2301      	movs	r3, #1
 800848c:	e7f0      	b.n	8008470 <_vfiprintf_r+0x1b8>
 800848e:	ab03      	add	r3, sp, #12
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	462a      	mov	r2, r5
 8008494:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <_vfiprintf_r+0x228>)
 8008496:	a904      	add	r1, sp, #16
 8008498:	4630      	mov	r0, r6
 800849a:	f7fd fd6d 	bl	8005f78 <_printf_float>
 800849e:	4607      	mov	r7, r0
 80084a0:	1c78      	adds	r0, r7, #1
 80084a2:	d1d6      	bne.n	8008452 <_vfiprintf_r+0x19a>
 80084a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	d405      	bmi.n	80084b6 <_vfiprintf_r+0x1fe>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	059a      	lsls	r2, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <_vfiprintf_r+0x1fe>
 80084b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084b2:	f7fe fbf7 	bl	8006ca4 <__retarget_lock_release_recursive>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	065b      	lsls	r3, r3, #25
 80084ba:	f53f af1f 	bmi.w	80082fc <_vfiprintf_r+0x44>
 80084be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084c0:	e71e      	b.n	8008300 <_vfiprintf_r+0x48>
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	462a      	mov	r2, r5
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <_vfiprintf_r+0x228>)
 80084ca:	a904      	add	r1, sp, #16
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7fd ffeb 	bl	80064a8 <_printf_i>
 80084d2:	e7e4      	b.n	800849e <_vfiprintf_r+0x1e6>
 80084d4:	080095f8 	.word	0x080095f8
 80084d8:	08009602 	.word	0x08009602
 80084dc:	08005f79 	.word	0x08005f79
 80084e0:	08008293 	.word	0x08008293
 80084e4:	080095fe 	.word	0x080095fe

080084e8 <__sflush_r>:
 80084e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	0716      	lsls	r6, r2, #28
 80084f2:	4605      	mov	r5, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	d454      	bmi.n	80085a2 <__sflush_r+0xba>
 80084f8:	684b      	ldr	r3, [r1, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dc02      	bgt.n	8008504 <__sflush_r+0x1c>
 80084fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd48      	ble.n	8008596 <__sflush_r+0xae>
 8008504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008506:	2e00      	cmp	r6, #0
 8008508:	d045      	beq.n	8008596 <__sflush_r+0xae>
 800850a:	2300      	movs	r3, #0
 800850c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008510:	682f      	ldr	r7, [r5, #0]
 8008512:	6a21      	ldr	r1, [r4, #32]
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	d030      	beq.n	800857a <__sflush_r+0x92>
 8008518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	0759      	lsls	r1, r3, #29
 800851e:	d505      	bpl.n	800852c <__sflush_r+0x44>
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008526:	b10b      	cbz	r3, 800852c <__sflush_r+0x44>
 8008528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	2300      	movs	r3, #0
 800852e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008530:	6a21      	ldr	r1, [r4, #32]
 8008532:	4628      	mov	r0, r5
 8008534:	47b0      	blx	r6
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	d106      	bne.n	800854a <__sflush_r+0x62>
 800853c:	6829      	ldr	r1, [r5, #0]
 800853e:	291d      	cmp	r1, #29
 8008540:	d82b      	bhi.n	800859a <__sflush_r+0xb2>
 8008542:	4a2a      	ldr	r2, [pc, #168]	@ (80085ec <__sflush_r+0x104>)
 8008544:	410a      	asrs	r2, r1
 8008546:	07d6      	lsls	r6, r2, #31
 8008548:	d427      	bmi.n	800859a <__sflush_r+0xb2>
 800854a:	2200      	movs	r2, #0
 800854c:	6062      	str	r2, [r4, #4]
 800854e:	04d9      	lsls	r1, r3, #19
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	6022      	str	r2, [r4, #0]
 8008554:	d504      	bpl.n	8008560 <__sflush_r+0x78>
 8008556:	1c42      	adds	r2, r0, #1
 8008558:	d101      	bne.n	800855e <__sflush_r+0x76>
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	b903      	cbnz	r3, 8008560 <__sflush_r+0x78>
 800855e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008562:	602f      	str	r7, [r5, #0]
 8008564:	b1b9      	cbz	r1, 8008596 <__sflush_r+0xae>
 8008566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800856a:	4299      	cmp	r1, r3
 800856c:	d002      	beq.n	8008574 <__sflush_r+0x8c>
 800856e:	4628      	mov	r0, r5
 8008570:	f7ff f9f6 	bl	8007960 <_free_r>
 8008574:	2300      	movs	r3, #0
 8008576:	6363      	str	r3, [r4, #52]	@ 0x34
 8008578:	e00d      	b.n	8008596 <__sflush_r+0xae>
 800857a:	2301      	movs	r3, #1
 800857c:	4628      	mov	r0, r5
 800857e:	47b0      	blx	r6
 8008580:	4602      	mov	r2, r0
 8008582:	1c50      	adds	r0, r2, #1
 8008584:	d1c9      	bne.n	800851a <__sflush_r+0x32>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0c6      	beq.n	800851a <__sflush_r+0x32>
 800858c:	2b1d      	cmp	r3, #29
 800858e:	d001      	beq.n	8008594 <__sflush_r+0xac>
 8008590:	2b16      	cmp	r3, #22
 8008592:	d11e      	bne.n	80085d2 <__sflush_r+0xea>
 8008594:	602f      	str	r7, [r5, #0]
 8008596:	2000      	movs	r0, #0
 8008598:	e022      	b.n	80085e0 <__sflush_r+0xf8>
 800859a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800859e:	b21b      	sxth	r3, r3
 80085a0:	e01b      	b.n	80085da <__sflush_r+0xf2>
 80085a2:	690f      	ldr	r7, [r1, #16]
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	d0f6      	beq.n	8008596 <__sflush_r+0xae>
 80085a8:	0793      	lsls	r3, r2, #30
 80085aa:	680e      	ldr	r6, [r1, #0]
 80085ac:	bf08      	it	eq
 80085ae:	694b      	ldreq	r3, [r1, #20]
 80085b0:	600f      	str	r7, [r1, #0]
 80085b2:	bf18      	it	ne
 80085b4:	2300      	movne	r3, #0
 80085b6:	eba6 0807 	sub.w	r8, r6, r7
 80085ba:	608b      	str	r3, [r1, #8]
 80085bc:	f1b8 0f00 	cmp.w	r8, #0
 80085c0:	dde9      	ble.n	8008596 <__sflush_r+0xae>
 80085c2:	6a21      	ldr	r1, [r4, #32]
 80085c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085c6:	4643      	mov	r3, r8
 80085c8:	463a      	mov	r2, r7
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b0      	blx	r6
 80085ce:	2800      	cmp	r0, #0
 80085d0:	dc08      	bgt.n	80085e4 <__sflush_r+0xfc>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	4407      	add	r7, r0
 80085e6:	eba8 0800 	sub.w	r8, r8, r0
 80085ea:	e7e7      	b.n	80085bc <__sflush_r+0xd4>
 80085ec:	dfbffffe 	.word	0xdfbffffe

080085f0 <_fflush_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	690b      	ldr	r3, [r1, #16]
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	b913      	cbnz	r3, 8008600 <_fflush_r+0x10>
 80085fa:	2500      	movs	r5, #0
 80085fc:	4628      	mov	r0, r5
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	b118      	cbz	r0, 800860a <_fflush_r+0x1a>
 8008602:	6a03      	ldr	r3, [r0, #32]
 8008604:	b90b      	cbnz	r3, 800860a <_fflush_r+0x1a>
 8008606:	f7fe f8fb 	bl	8006800 <__sinit>
 800860a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0f3      	beq.n	80085fa <_fflush_r+0xa>
 8008612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008614:	07d0      	lsls	r0, r2, #31
 8008616:	d404      	bmi.n	8008622 <_fflush_r+0x32>
 8008618:	0599      	lsls	r1, r3, #22
 800861a:	d402      	bmi.n	8008622 <_fflush_r+0x32>
 800861c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861e:	f7fe fb40 	bl	8006ca2 <__retarget_lock_acquire_recursive>
 8008622:	4628      	mov	r0, r5
 8008624:	4621      	mov	r1, r4
 8008626:	f7ff ff5f 	bl	80084e8 <__sflush_r>
 800862a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800862c:	07da      	lsls	r2, r3, #31
 800862e:	4605      	mov	r5, r0
 8008630:	d4e4      	bmi.n	80085fc <_fflush_r+0xc>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	059b      	lsls	r3, r3, #22
 8008636:	d4e1      	bmi.n	80085fc <_fflush_r+0xc>
 8008638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800863a:	f7fe fb33 	bl	8006ca4 <__retarget_lock_release_recursive>
 800863e:	e7dd      	b.n	80085fc <_fflush_r+0xc>

08008640 <__swhatbuf_r>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	2900      	cmp	r1, #0
 800864a:	b096      	sub	sp, #88	@ 0x58
 800864c:	4615      	mov	r5, r2
 800864e:	461e      	mov	r6, r3
 8008650:	da0d      	bge.n	800866e <__swhatbuf_r+0x2e>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008658:	f04f 0100 	mov.w	r1, #0
 800865c:	bf14      	ite	ne
 800865e:	2340      	movne	r3, #64	@ 0x40
 8008660:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008664:	2000      	movs	r0, #0
 8008666:	6031      	str	r1, [r6, #0]
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	b016      	add	sp, #88	@ 0x58
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	466a      	mov	r2, sp
 8008670:	f000 f848 	bl	8008704 <_fstat_r>
 8008674:	2800      	cmp	r0, #0
 8008676:	dbec      	blt.n	8008652 <__swhatbuf_r+0x12>
 8008678:	9901      	ldr	r1, [sp, #4]
 800867a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800867e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008682:	4259      	negs	r1, r3
 8008684:	4159      	adcs	r1, r3
 8008686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800868a:	e7eb      	b.n	8008664 <__swhatbuf_r+0x24>

0800868c <__smakebuf_r>:
 800868c:	898b      	ldrh	r3, [r1, #12]
 800868e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008690:	079d      	lsls	r5, r3, #30
 8008692:	4606      	mov	r6, r0
 8008694:	460c      	mov	r4, r1
 8008696:	d507      	bpl.n	80086a8 <__smakebuf_r+0x1c>
 8008698:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	6123      	str	r3, [r4, #16]
 80086a0:	2301      	movs	r3, #1
 80086a2:	6163      	str	r3, [r4, #20]
 80086a4:	b003      	add	sp, #12
 80086a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a8:	ab01      	add	r3, sp, #4
 80086aa:	466a      	mov	r2, sp
 80086ac:	f7ff ffc8 	bl	8008640 <__swhatbuf_r>
 80086b0:	9f00      	ldr	r7, [sp, #0]
 80086b2:	4605      	mov	r5, r0
 80086b4:	4639      	mov	r1, r7
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7ff f9c6 	bl	8007a48 <_malloc_r>
 80086bc:	b948      	cbnz	r0, 80086d2 <__smakebuf_r+0x46>
 80086be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c2:	059a      	lsls	r2, r3, #22
 80086c4:	d4ee      	bmi.n	80086a4 <__smakebuf_r+0x18>
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	f043 0302 	orr.w	r3, r3, #2
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	e7e2      	b.n	8008698 <__smakebuf_r+0xc>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	6020      	str	r0, [r4, #0]
 80086d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086e2:	b15b      	cbz	r3, 80086fc <__smakebuf_r+0x70>
 80086e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 f81d 	bl	8008728 <_isatty_r>
 80086ee:	b128      	cbz	r0, 80086fc <__smakebuf_r+0x70>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	f043 0301 	orr.w	r3, r3, #1
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	431d      	orrs	r5, r3
 8008700:	81a5      	strh	r5, [r4, #12]
 8008702:	e7cf      	b.n	80086a4 <__smakebuf_r+0x18>

08008704 <_fstat_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d07      	ldr	r5, [pc, #28]	@ (8008724 <_fstat_r+0x20>)
 8008708:	2300      	movs	r3, #0
 800870a:	4604      	mov	r4, r0
 800870c:	4608      	mov	r0, r1
 800870e:	4611      	mov	r1, r2
 8008710:	602b      	str	r3, [r5, #0]
 8008712:	f7f9 f9c2 	bl	8001a9a <_fstat>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	d102      	bne.n	8008720 <_fstat_r+0x1c>
 800871a:	682b      	ldr	r3, [r5, #0]
 800871c:	b103      	cbz	r3, 8008720 <_fstat_r+0x1c>
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	bd38      	pop	{r3, r4, r5, pc}
 8008722:	bf00      	nop
 8008724:	200015d4 	.word	0x200015d4

08008728 <_isatty_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d06      	ldr	r5, [pc, #24]	@ (8008744 <_isatty_r+0x1c>)
 800872c:	2300      	movs	r3, #0
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	f7f9 f9b6 	bl	8001aa4 <_isatty>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_isatty_r+0x1a>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_isatty_r+0x1a>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	200015d4 	.word	0x200015d4

08008748 <_sbrk_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d06      	ldr	r5, [pc, #24]	@ (8008764 <_sbrk_r+0x1c>)
 800874c:	2300      	movs	r3, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	f7f9 f9aa 	bl	8001aac <_sbrk>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_sbrk_r+0x1a>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_sbrk_r+0x1a>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	200015d4 	.word	0x200015d4

08008768 <__assert_func>:
 8008768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800876a:	4614      	mov	r4, r2
 800876c:	461a      	mov	r2, r3
 800876e:	4b09      	ldr	r3, [pc, #36]	@ (8008794 <__assert_func+0x2c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4605      	mov	r5, r0
 8008774:	68d8      	ldr	r0, [r3, #12]
 8008776:	b954      	cbnz	r4, 800878e <__assert_func+0x26>
 8008778:	4b07      	ldr	r3, [pc, #28]	@ (8008798 <__assert_func+0x30>)
 800877a:	461c      	mov	r4, r3
 800877c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008780:	9100      	str	r1, [sp, #0]
 8008782:	462b      	mov	r3, r5
 8008784:	4905      	ldr	r1, [pc, #20]	@ (800879c <__assert_func+0x34>)
 8008786:	f000 f841 	bl	800880c <fiprintf>
 800878a:	f000 f851 	bl	8008830 <abort>
 800878e:	4b04      	ldr	r3, [pc, #16]	@ (80087a0 <__assert_func+0x38>)
 8008790:	e7f4      	b.n	800877c <__assert_func+0x14>
 8008792:	bf00      	nop
 8008794:	2000003c 	.word	0x2000003c
 8008798:	0800964e 	.word	0x0800964e
 800879c:	08009620 	.word	0x08009620
 80087a0:	08009613 	.word	0x08009613

080087a4 <_calloc_r>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	fba1 5402 	umull	r5, r4, r1, r2
 80087aa:	b93c      	cbnz	r4, 80087bc <_calloc_r+0x18>
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7ff f94b 	bl	8007a48 <_malloc_r>
 80087b2:	4606      	mov	r6, r0
 80087b4:	b928      	cbnz	r0, 80087c2 <_calloc_r+0x1e>
 80087b6:	2600      	movs	r6, #0
 80087b8:	4630      	mov	r0, r6
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	220c      	movs	r2, #12
 80087be:	6002      	str	r2, [r0, #0]
 80087c0:	e7f9      	b.n	80087b6 <_calloc_r+0x12>
 80087c2:	462a      	mov	r2, r5
 80087c4:	4621      	mov	r1, r4
 80087c6:	f7fe f999 	bl	8006afc <memset>
 80087ca:	e7f5      	b.n	80087b8 <_calloc_r+0x14>

080087cc <__ascii_mbtowc>:
 80087cc:	b082      	sub	sp, #8
 80087ce:	b901      	cbnz	r1, 80087d2 <__ascii_mbtowc+0x6>
 80087d0:	a901      	add	r1, sp, #4
 80087d2:	b142      	cbz	r2, 80087e6 <__ascii_mbtowc+0x1a>
 80087d4:	b14b      	cbz	r3, 80087ea <__ascii_mbtowc+0x1e>
 80087d6:	7813      	ldrb	r3, [r2, #0]
 80087d8:	600b      	str	r3, [r1, #0]
 80087da:	7812      	ldrb	r2, [r2, #0]
 80087dc:	1e10      	subs	r0, r2, #0
 80087de:	bf18      	it	ne
 80087e0:	2001      	movne	r0, #1
 80087e2:	b002      	add	sp, #8
 80087e4:	4770      	bx	lr
 80087e6:	4610      	mov	r0, r2
 80087e8:	e7fb      	b.n	80087e2 <__ascii_mbtowc+0x16>
 80087ea:	f06f 0001 	mvn.w	r0, #1
 80087ee:	e7f8      	b.n	80087e2 <__ascii_mbtowc+0x16>

080087f0 <__ascii_wctomb>:
 80087f0:	4603      	mov	r3, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	b141      	cbz	r1, 8008808 <__ascii_wctomb+0x18>
 80087f6:	2aff      	cmp	r2, #255	@ 0xff
 80087f8:	d904      	bls.n	8008804 <__ascii_wctomb+0x14>
 80087fa:	228a      	movs	r2, #138	@ 0x8a
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008802:	4770      	bx	lr
 8008804:	700a      	strb	r2, [r1, #0]
 8008806:	2001      	movs	r0, #1
 8008808:	4770      	bx	lr
	...

0800880c <fiprintf>:
 800880c:	b40e      	push	{r1, r2, r3}
 800880e:	b503      	push	{r0, r1, lr}
 8008810:	4601      	mov	r1, r0
 8008812:	ab03      	add	r3, sp, #12
 8008814:	4805      	ldr	r0, [pc, #20]	@ (800882c <fiprintf+0x20>)
 8008816:	f853 2b04 	ldr.w	r2, [r3], #4
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	f7ff fd4b 	bl	80082b8 <_vfiprintf_r>
 8008822:	b002      	add	sp, #8
 8008824:	f85d eb04 	ldr.w	lr, [sp], #4
 8008828:	b003      	add	sp, #12
 800882a:	4770      	bx	lr
 800882c:	2000003c 	.word	0x2000003c

08008830 <abort>:
 8008830:	b508      	push	{r3, lr}
 8008832:	2006      	movs	r0, #6
 8008834:	f000 f82c 	bl	8008890 <raise>
 8008838:	2001      	movs	r0, #1
 800883a:	f7f9 f915 	bl	8001a68 <_exit>

0800883e <_raise_r>:
 800883e:	291f      	cmp	r1, #31
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4605      	mov	r5, r0
 8008844:	460c      	mov	r4, r1
 8008846:	d904      	bls.n	8008852 <_raise_r+0x14>
 8008848:	2316      	movs	r3, #22
 800884a:	6003      	str	r3, [r0, #0]
 800884c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008854:	b112      	cbz	r2, 800885c <_raise_r+0x1e>
 8008856:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800885a:	b94b      	cbnz	r3, 8008870 <_raise_r+0x32>
 800885c:	4628      	mov	r0, r5
 800885e:	f000 f831 	bl	80088c4 <_getpid_r>
 8008862:	4622      	mov	r2, r4
 8008864:	4601      	mov	r1, r0
 8008866:	4628      	mov	r0, r5
 8008868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886c:	f000 b818 	b.w	80088a0 <_kill_r>
 8008870:	2b01      	cmp	r3, #1
 8008872:	d00a      	beq.n	800888a <_raise_r+0x4c>
 8008874:	1c59      	adds	r1, r3, #1
 8008876:	d103      	bne.n	8008880 <_raise_r+0x42>
 8008878:	2316      	movs	r3, #22
 800887a:	6003      	str	r3, [r0, #0]
 800887c:	2001      	movs	r0, #1
 800887e:	e7e7      	b.n	8008850 <_raise_r+0x12>
 8008880:	2100      	movs	r1, #0
 8008882:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008886:	4620      	mov	r0, r4
 8008888:	4798      	blx	r3
 800888a:	2000      	movs	r0, #0
 800888c:	e7e0      	b.n	8008850 <_raise_r+0x12>
	...

08008890 <raise>:
 8008890:	4b02      	ldr	r3, [pc, #8]	@ (800889c <raise+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f7ff bfd2 	b.w	800883e <_raise_r>
 800889a:	bf00      	nop
 800889c:	2000003c 	.word	0x2000003c

080088a0 <_kill_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4d07      	ldr	r5, [pc, #28]	@ (80088c0 <_kill_r+0x20>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	f7f9 f8d3 	bl	8001a58 <_kill>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d102      	bne.n	80088bc <_kill_r+0x1c>
 80088b6:	682b      	ldr	r3, [r5, #0]
 80088b8:	b103      	cbz	r3, 80088bc <_kill_r+0x1c>
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	200015d4 	.word	0x200015d4

080088c4 <_getpid_r>:
 80088c4:	f7f9 b8c6 	b.w	8001a54 <_getpid>

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
