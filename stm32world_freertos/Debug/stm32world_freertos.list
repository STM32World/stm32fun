
stm32world_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004868  08004868  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004870  08004870  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004874  08004874  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004878  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          00008ae8  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008b54  20008b54  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaa5  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003789  00000000  00000000  00024b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  000282d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a8  00000000  00000000  00029748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022436  00000000  00000000  0002a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1e6  00000000  00000000  0004cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc85a  00000000  00000000  0006ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137666  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041e4  00000000  00000000  001376ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000e7c6  00000000  00000000  0013b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0014a056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800476c 	.word	0x0800476c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800476c 	.word	0x0800476c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8000560:	4770      	bx	lr

08000562 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8000562:	2000      	movs	r0, #0
 8000564:	4770      	bx	lr
	...

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2400      	movs	r4, #0
 800056e:	9405      	str	r4, [sp, #20]
 8000570:	9406      	str	r4, [sp, #24]
 8000572:	9407      	str	r4, [sp, #28]
 8000574:	9408      	str	r4, [sp, #32]
 8000576:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	9401      	str	r4, [sp, #4]
 800057a:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <MX_GPIO_Init+0x8c>)
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	f042 0204 	orr.w	r2, r2, #4
 8000582:	631a      	str	r2, [r3, #48]	@ 0x30
 8000584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000586:	f002 0204 	and.w	r2, r2, #4
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	9402      	str	r4, [sp, #8]
 8000590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000592:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000596:	631a      	str	r2, [r3, #48]	@ 0x30
 8000598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800059e:	9202      	str	r2, [sp, #8]
 80005a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	9403      	str	r4, [sp, #12]
 80005a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a6:	f042 0201 	orr.w	r2, r2, #1
 80005aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f002 0201 	and.w	r2, r2, #1
 80005b2:	9203      	str	r2, [sp, #12]
 80005b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	9404      	str	r4, [sp, #16]
 80005b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ba:	f042 0202 	orr.w	r2, r2, #2
 80005be:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	9304      	str	r3, [sp, #16]
 80005c8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ca:	4d0b      	ldr	r5, [pc, #44]	@ (80005f8 <MX_GPIO_Init+0x90>)
 80005cc:	4622      	mov	r2, r4
 80005ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d2:	4628      	mov	r0, r5
 80005d4:	f000 fbae 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005e6:	a905      	add	r1, sp, #20
 80005e8:	4628      	mov	r0, r5
 80005ea:	f000 faad 	bl	8000b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	b00b      	add	sp, #44	@ 0x2c
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020800 	.word	0x40020800

080005fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000602:	f001 fac5 	bl	8001b90 <osDelay>
    printf("Tick %lu\n", osKernelGetTickCount()/1000);
 8000606:	f001 fa5b 	bl	8001ac0 <osKernelGetTickCount>
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <StartDefaultTask+0x20>)
 800060c:	fba3 3100 	umull	r3, r1, r3, r0
 8000610:	0989      	lsrs	r1, r1, #6
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <StartDefaultTask+0x24>)
 8000614:	f003 f97a 	bl	800390c <iprintf>
  for(;;)
 8000618:	e7f1      	b.n	80005fe <StartDefaultTask+0x2>
 800061a:	bf00      	nop
 800061c:	10624dd3 	.word	0x10624dd3
 8000620:	08004784 	.word	0x08004784

08000624 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000624:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000626:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800062a:	f001 fab1 	bl	8001b90 <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800062e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000632:	4802      	ldr	r0, [pc, #8]	@ (800063c <StartLedTask+0x18>)
 8000634:	f000 fb84 	bl	8000d40 <HAL_GPIO_TogglePin>
  for(;;)
 8000638:	e7f5      	b.n	8000626 <StartLedTask+0x2>
 800063a:	bf00      	nop
 800063c:	40020800 	.word	0x40020800

08000640 <_write>:
    if (fd == 1 || fd == 2) {
 8000640:	3801      	subs	r0, #1
 8000642:	2801      	cmp	r0, #1
 8000644:	d80a      	bhi.n	800065c <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000646:	b510      	push	{r4, lr}
 8000648:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064e:	b292      	uxth	r2, r2
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <_write+0x28>)
 8000652:	f001 f994 	bl	800197e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000656:	b920      	cbnz	r0, 8000662 <_write+0x22>
            return len;
 8000658:	4620      	mov	r0, r4
}
 800065a:	bd10      	pop	{r4, pc}
    return -1;
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000660:	4770      	bx	lr
            return -1;
 8000662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000666:	e7f8      	b.n	800065a <_write+0x1a>
 8000668:	20000090 	.word	0x20000090

0800066c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800066c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800066e:	6802      	ldr	r2, [r0, #0]
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000672:	429a      	cmp	r2, r3
 8000674:	d000      	beq.n	8000678 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000676:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000678:	f000 f9ec 	bl	8000a54 <HAL_IncTick>
}
 800067c:	e7fb      	b.n	8000676 <HAL_TIM_PeriodElapsedCallback+0xa>
 800067e:	bf00      	nop
 8000680:	40002000 	.word	0x40002000

08000684 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000686:	e7fe      	b.n	8000686 <Error_Handler+0x2>

08000688 <MX_USART1_UART_Init>:
{
 8000688:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800068a:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <MX_USART1_UART_Init+0x2c>)
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_USART1_UART_Init+0x30>)
 800068e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000690:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000694:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	2300      	movs	r3, #0
 8000698:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069e:	220c      	movs	r2, #12
 80006a0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a6:	f001 f93a 	bl	800191e <HAL_UART_Init>
 80006aa:	b900      	cbnz	r0, 80006ae <MX_USART1_UART_Init+0x26>
}
 80006ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006ae:	f7ff ffe9 	bl	8000684 <Error_Handler>
 80006b2:	bf00      	nop
 80006b4:	20000090 	.word	0x20000090
 80006b8:	40011000 	.word	0x40011000

080006bc <SystemClock_Config>:
{
 80006bc:	b500      	push	{lr}
 80006be:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c0:	2230      	movs	r2, #48	@ 0x30
 80006c2:	2100      	movs	r1, #0
 80006c4:	a808      	add	r0, sp, #32
 80006c6:	f003 fa69 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	2300      	movs	r3, #0
 80006cc:	9303      	str	r3, [sp, #12]
 80006ce:	9304      	str	r3, [sp, #16]
 80006d0:	9305      	str	r3, [sp, #20]
 80006d2:	9306      	str	r3, [sp, #24]
 80006d4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	4a20      	ldr	r2, [pc, #128]	@ (800075c <SystemClock_Config+0xa0>)
 80006da:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80006dc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80006e0:	6411      	str	r1, [r2, #64]	@ 0x40
 80006e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80006e4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <SystemClock_Config+0xa4>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000710:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000714:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000716:	2208      	movs	r2, #8
 8000718:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800071a:	22a8      	movs	r2, #168	@ 0xa8
 800071c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	a808      	add	r0, sp, #32
 8000726:	f000 fb15 	bl	8000d54 <HAL_RCC_OscConfig>
 800072a:	b998      	cbnz	r0, 8000754 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	2105      	movs	r1, #5
 8000746:	a803      	add	r0, sp, #12
 8000748:	f000 fd68 	bl	800121c <HAL_RCC_ClockConfig>
 800074c:	b920      	cbnz	r0, 8000758 <SystemClock_Config+0x9c>
}
 800074e:	b015      	add	sp, #84	@ 0x54
 8000750:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000754:	f7ff ff96 	bl	8000684 <Error_Handler>
    Error_Handler();
 8000758:	f7ff ff94 	bl	8000684 <Error_Handler>
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <main>:
{
 8000764:	b508      	push	{r3, lr}
  HAL_Init();
 8000766:	f000 f95b 	bl	8000a20 <HAL_Init>
  SystemClock_Config();
 800076a:	f7ff ffa7 	bl	80006bc <SystemClock_Config>
  MX_GPIO_Init();
 800076e:	f7ff fefb 	bl	8000568 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000772:	f7ff ff89 	bl	8000688 <MX_USART1_UART_Init>
  printf("\n\n\n--------\nStarting\n");
 8000776:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <main+0x40>)
 8000778:	f003 f930 	bl	80039dc <puts>
  osKernelInitialize();
 800077c:	f001 f972 	bl	8001a64 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <main+0x44>)
 8000782:	2100      	movs	r1, #0
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <main+0x48>)
 8000786:	f001 f9a5 	bl	8001ad4 <osThreadNew>
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <main+0x4c>)
 800078c:	6018      	str	r0, [r3, #0]
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <main+0x50>)
 8000790:	2100      	movs	r1, #0
 8000792:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <main+0x54>)
 8000794:	f001 f99e 	bl	8001ad4 <osThreadNew>
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <main+0x58>)
 800079a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800079c:	f001 f974 	bl	8001a88 <osKernelStart>
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x3c>
 80007a2:	bf00      	nop
 80007a4:	08004790 	.word	0x08004790
 80007a8:	080047e0 	.word	0x080047e0
 80007ac:	080005fd 	.word	0x080005fd
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	080047bc 	.word	0x080047bc
 80007b8:	08000625 	.word	0x08000625
 80007bc:	20000088 	.word	0x20000088

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b500      	push	{lr}
 80007c2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c4:	2200      	movs	r2, #0
 80007c6:	9200      	str	r2, [sp, #0]
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <HAL_MspInit+0x40>)
 80007ca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80007cc:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80007d0:	6459      	str	r1, [r3, #68]	@ 0x44
 80007d2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80007d4:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80007d8:	9100      	str	r1, [sp, #0]
 80007da:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	9201      	str	r2, [sp, #4]
 80007de:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007e0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007e4:	6419      	str	r1, [r3, #64]	@ 0x40
 80007e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 f993 	bl	8000b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	b003      	add	sp, #12
 80007fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b500      	push	{lr}
 8000806:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	9303      	str	r3, [sp, #12]
 800080c:	9304      	str	r3, [sp, #16]
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	9306      	str	r3, [sp, #24]
 8000812:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000814:	6802      	ldr	r2, [r0, #0]
 8000816:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800081a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800081e:	429a      	cmp	r2, r3
 8000820:	d002      	beq.n	8000828 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000822:	b009      	add	sp, #36	@ 0x24
 8000824:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000828:	2100      	movs	r1, #0
 800082a:	9101      	str	r1, [sp, #4]
 800082c:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000832:	f042 0210 	orr.w	r2, r2, #16
 8000836:	645a      	str	r2, [r3, #68]	@ 0x44
 8000838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800083a:	f002 0210 	and.w	r2, r2, #16
 800083e:	9201      	str	r2, [sp, #4]
 8000840:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	9102      	str	r1, [sp, #8]
 8000844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000846:	f042 0201 	orr.w	r2, r2, #1
 800084a:	631a      	str	r2, [r3, #48]	@ 0x30
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	9302      	str	r3, [sp, #8]
 8000854:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000856:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800085a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000864:	2307      	movs	r3, #7
 8000866:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	a903      	add	r1, sp, #12
 800086a:	4802      	ldr	r0, [pc, #8]	@ (8000874 <HAL_UART_MspInit+0x70>)
 800086c:	f000 f96c 	bl	8000b48 <HAL_GPIO_Init>
}
 8000870:	e7d7      	b.n	8000822 <HAL_UART_MspInit+0x1e>
 8000872:	bf00      	nop
 8000874:	40020000 	.word	0x40020000

08000878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b530      	push	{r4, r5, lr}
 800087a:	b089      	sub	sp, #36	@ 0x24
 800087c:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <HAL_InitTick+0x90>)
 8000884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800088a:	641a      	str	r2, [r3, #64]	@ 0x40
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000896:	a902      	add	r1, sp, #8
 8000898:	a803      	add	r0, sp, #12
 800089a:	f000 fd95 	bl	80013c8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800089e:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008a0:	b9cb      	cbnz	r3, 80008d6 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008a2:	f000 fd71 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 80008a6:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a8:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_InitTick+0x94>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	0c9b      	lsrs	r3, r3, #18
 80008b0:	3b01      	subs	r3, #1

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008b2:	4817      	ldr	r0, [pc, #92]	@ (8000910 <HAL_InitTick+0x98>)
 80008b4:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_InitTick+0x9c>)
 80008b6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80008b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008bc:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80008be:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	6083      	str	r3, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80008c8:	f000 ff02 	bl	80016d0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80008cc:	4605      	mov	r5, r0
 80008ce:	b130      	cbz	r0, 80008de <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80008d0:	4628      	mov	r0, r5
 80008d2:	b009      	add	sp, #36	@ 0x24
 80008d4:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008d6:	f000 fd57 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 80008da:	0043      	lsls	r3, r0, #1
 80008dc:	e7e4      	b.n	80008a8 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim14);
 80008de:	480c      	ldr	r0, [pc, #48]	@ (8000910 <HAL_InitTick+0x98>)
 80008e0:	f000 fd92 	bl	8001408 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80008e4:	4605      	mov	r5, r0
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d1f2      	bne.n	80008d0 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80008ea:	202d      	movs	r0, #45	@ 0x2d
 80008ec:	f000 f928 	bl	8000b40 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	2c0f      	cmp	r4, #15
 80008f2:	d901      	bls.n	80008f8 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80008f4:	2501      	movs	r5, #1
 80008f6:	e7eb      	b.n	80008d0 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	4621      	mov	r1, r4
 80008fc:	202d      	movs	r0, #45	@ 0x2d
 80008fe:	f000 f90f 	bl	8000b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_InitTick+0xa0>)
 8000904:	601c      	str	r4, [r3, #0]
 8000906:	e7e3      	b.n	80008d0 <HAL_InitTick+0x58>
 8000908:	40023800 	.word	0x40023800
 800090c:	431bde83 	.word	0x431bde83
 8000910:	200000d8 	.word	0x200000d8
 8000914:	40002000 	.word	0x40002000
 8000918:	20000008 	.word	0x20000008

0800091c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler>

0800091e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler>

08000920 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler>

08000922 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler>

08000924 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler>

08000926 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	4770      	bx	lr

08000928 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000928:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800092a:	4802      	ldr	r0, [pc, #8]	@ (8000934 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 800092c:	f000 fdb4 	bl	8001498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000930:	bd08      	pop	{r3, pc}
 8000932:	bf00      	nop
 8000934:	200000d8 	.word	0x200000d8

08000938 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	460c      	mov	r4, r1
 800093c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	2500      	movs	r5, #0
 8000940:	e006      	b.n	8000950 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000942:	f3af 8000 	nop.w
 8000946:	4621      	mov	r1, r4
 8000948:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800094e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	42b5      	cmp	r5, r6
 8000952:	dbf6      	blt.n	8000942 <_read+0xa>
  }

  return len;
}
 8000954:	4630      	mov	r0, r6
 8000956:	bd70      	pop	{r4, r5, r6, pc}

08000958 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800095e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000962:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000964:	2000      	movs	r0, #0
 8000966:	4770      	bx	lr

08000968 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000968:	2001      	movs	r0, #1
 800096a:	4770      	bx	lr

0800096c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800096c:	2000      	movs	r0, #0
 800096e:	4770      	bx	lr

08000970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000970:	b510      	push	{r4, lr}
 8000972:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <_sbrk+0x38>)
 8000976:	490d      	ldr	r1, [pc, #52]	@ (80009ac <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <_sbrk+0x40>)
 800097a:	6800      	ldr	r0, [r0, #0]
 800097c:	b140      	cbz	r0, 8000990 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <_sbrk+0x40>)
 8000980:	6800      	ldr	r0, [r0, #0]
 8000982:	4403      	add	r3, r0
 8000984:	1a52      	subs	r2, r2, r1
 8000986:	4293      	cmp	r3, r2
 8000988:	d806      	bhi.n	8000998 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800098a:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <_sbrk+0x40>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800098e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000990:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <_sbrk+0x40>)
 8000992:	4c08      	ldr	r4, [pc, #32]	@ (80009b4 <_sbrk+0x44>)
 8000994:	6004      	str	r4, [r0, #0]
 8000996:	e7f2      	b.n	800097e <_sbrk+0xe>
    errno = ENOMEM;
 8000998:	f003 f9a4 	bl	8003ce4 <__errno>
 800099c:	230c      	movs	r3, #12
 800099e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009a4:	e7f3      	b.n	800098e <_sbrk+0x1e>
 80009a6:	bf00      	nop
 80009a8:	20020000 	.word	0x20020000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	20000120 	.word	0x20000120
 80009b4:	20008b58 	.word	0x20008b58

080009b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <SystemInit+0x10>)
 80009ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80009be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d0:	f7ff fff2 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f003 f979 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff feb1 	bl	8000764 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a10:	08004878 	.word	0x08004878
  ldr r2, =_sbss
 8000a14:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a18:	20008b54 	.word	0x20008b54

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_Init+0x30>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a2a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a32:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f85d 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f7ff ff18 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff feba 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	bd08      	pop	{r3, pc}
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a54:	4a03      	ldr	r2, [pc, #12]	@ (8000a64 <HAL_IncTick+0x10>)
 8000a56:	6811      	ldr	r1, [r2, #0]
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_IncTick+0x14>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000124 	.word	0x20000124
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a6c:	4b01      	ldr	r3, [pc, #4]	@ (8000a74 <HAL_GetTick+0x8>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000124 	.word	0x20000124

08000a78 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	db07      	blt.n	8000a8c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7c:	f000 021f 	and.w	r2, r0, #31
 8000a80:	0940      	lsrs	r0, r0, #5
 8000a82:	2301      	movs	r3, #1
 8000a84:	4093      	lsls	r3, r2
 8000a86:	4a02      	ldr	r2, [pc, #8]	@ (8000a90 <__NVIC_EnableIRQ+0x18>)
 8000a88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a94:	2800      	cmp	r0, #0
 8000a96:	db08      	blt.n	8000aaa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	0109      	lsls	r1, r1, #4
 8000a9a:	b2c9      	uxtb	r1, r1
 8000a9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000aa0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000aa4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000aa8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	f000 000f 	and.w	r0, r0, #15
 8000aae:	0109      	lsls	r1, r1, #4
 8000ab0:	b2c9      	uxtb	r1, r1
 8000ab2:	4b01      	ldr	r3, [pc, #4]	@ (8000ab8 <__NVIC_SetPriority+0x24>)
 8000ab4:	5419      	strb	r1, [r3, r0]
  }
}
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed14 	.word	0xe000ed14

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac2:	f1c0 0c07 	rsb	ip, r0, #7
 8000ac6:	f1bc 0f04 	cmp.w	ip, #4
 8000aca:	bf28      	it	cs
 8000acc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad0:	1d03      	adds	r3, r0, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d90f      	bls.n	8000af6 <NVIC_EncodePriority+0x3a>
 8000ad6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000adc:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ae0:	ea21 0100 	bic.w	r1, r1, r0
 8000ae4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000aea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000aee:	ea41 0002 	orr.w	r0, r1, r2
 8000af2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	2300      	movs	r3, #0
 8000af8:	e7ee      	b.n	8000ad8 <NVIC_EncodePriority+0x1c>
	...

08000afc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000afe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	0200      	lsls	r0, r0, #8
 8000b0a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b18:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_NVIC_SetPriority+0x1c>)
 8000b26:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b28:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b2c:	f7ff ffc6 	bl	8000abc <NVIC_EncodePriority>
 8000b30:	4601      	mov	r1, r0
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff ffae 	bl	8000a94 <__NVIC_SetPriority>
}
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b42:	f7ff ff99 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000b46:	bd08      	pop	{r3, pc}

08000b48 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	f200 80e9 	bhi.w	8000d22 <HAL_GPIO_Init+0x1da>
{
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	e065      	b.n	8000c22 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b56:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b58:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b5c:	2403      	movs	r4, #3
 8000b5e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b62:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b66:	68cc      	ldr	r4, [r1, #12]
 8000b68:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b6c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000b6e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b72:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b76:	684a      	ldr	r2, [r1, #4]
 8000b78:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000b80:	6042      	str	r2, [r0, #4]
 8000b82:	e05c      	b.n	8000c3e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b84:	08dc      	lsrs	r4, r3, #3
 8000b86:	3408      	adds	r4, #8
 8000b88:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b8c:	f003 0507 	and.w	r5, r3, #7
 8000b90:	00ad      	lsls	r5, r5, #2
 8000b92:	f04f 0e0f 	mov.w	lr, #15
 8000b96:	fa0e fe05 	lsl.w	lr, lr, r5
 8000b9a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b9e:	690a      	ldr	r2, [r1, #16]
 8000ba0:	40aa      	lsls	r2, r5
 8000ba2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000ba6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000baa:	e05c      	b.n	8000c66 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bac:	2207      	movs	r2, #7
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bb6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bb8:	3402      	adds	r4, #2
 8000bba:	4d5a      	ldr	r5, [pc, #360]	@ (8000d24 <HAL_GPIO_Init+0x1dc>)
 8000bbc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4a59      	ldr	r2, [pc, #356]	@ (8000d28 <HAL_GPIO_Init+0x1e0>)
 8000bc2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	ea6f 020c 	mvn.w	r2, ip
 8000bc8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bcc:	684e      	ldr	r6, [r1, #4]
 8000bce:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000bd2:	d001      	beq.n	8000bd8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000bd4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000bd8:	4c53      	ldr	r4, [pc, #332]	@ (8000d28 <HAL_GPIO_Init+0x1e0>)
 8000bda:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000bdc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bde:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000be2:	684e      	ldr	r6, [r1, #4]
 8000be4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000be8:	d001      	beq.n	8000bee <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000bea:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000bee:	4c4e      	ldr	r4, [pc, #312]	@ (8000d28 <HAL_GPIO_Init+0x1e0>)
 8000bf0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000bf2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bf8:	684e      	ldr	r6, [r1, #4]
 8000bfa:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000bfe:	d001      	beq.n	8000c04 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000c00:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c04:	4c48      	ldr	r4, [pc, #288]	@ (8000d28 <HAL_GPIO_Init+0x1e0>)
 8000c06:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c08:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c0a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c0c:	684d      	ldr	r5, [r1, #4]
 8000c0e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000c12:	d001      	beq.n	8000c18 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000c14:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000c18:	4c43      	ldr	r4, [pc, #268]	@ (8000d28 <HAL_GPIO_Init+0x1e0>)
 8000c1a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	2b0f      	cmp	r3, #15
 8000c20:	d87d      	bhi.n	8000d1e <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000c22:	2201      	movs	r2, #1
 8000c24:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	680c      	ldr	r4, [r1, #0]
 8000c28:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c2c:	ea32 0404 	bics.w	r4, r2, r4
 8000c30:	d1f4      	bne.n	8000c1c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c32:	684c      	ldr	r4, [r1, #4]
 8000c34:	f004 0403 	and.w	r4, r4, #3
 8000c38:	3c01      	subs	r4, #1
 8000c3a:	2c01      	cmp	r4, #1
 8000c3c:	d98b      	bls.n	8000b56 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	684a      	ldr	r2, [r1, #4]
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	2a03      	cmp	r2, #3
 8000c46:	d009      	beq.n	8000c5c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000c48:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4a:	005d      	lsls	r5, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	40aa      	lsls	r2, r5
 8000c50:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c54:	688a      	ldr	r2, [r1, #8]
 8000c56:	40aa      	lsls	r2, r5
 8000c58:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000c5a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5c:	684a      	ldr	r2, [r1, #4]
 8000c5e:	f002 0203 	and.w	r2, r2, #3
 8000c62:	2a02      	cmp	r2, #2
 8000c64:	d08e      	beq.n	8000b84 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000c66:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c68:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c72:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c76:	684a      	ldr	r2, [r1, #4]
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c80:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000c82:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c84:	684a      	ldr	r2, [r1, #4]
 8000c86:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000c8a:	d0c7      	beq.n	8000c1c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	4a26      	ldr	r2, [pc, #152]	@ (8000d2c <HAL_GPIO_Init+0x1e4>)
 8000c92:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000c94:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000c98:	6454      	str	r4, [r2, #68]	@ 0x44
 8000c9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000c9c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ca0:	9201      	str	r2, [sp, #4]
 8000ca2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca4:	089c      	lsrs	r4, r3, #2
 8000ca6:	1ca5      	adds	r5, r4, #2
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <HAL_GPIO_Init+0x1dc>)
 8000caa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cae:	f003 0e03 	and.w	lr, r3, #3
 8000cb2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cbc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <HAL_GPIO_Init+0x1e8>)
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f43f af74 	beq.w	8000bb0 <HAL_GPIO_Init+0x68>
 8000cc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d01a      	beq.n	8000d06 <HAL_GPIO_Init+0x1be>
 8000cd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d018      	beq.n	8000d0a <HAL_GPIO_Init+0x1c2>
 8000cd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	d016      	beq.n	8000d0e <HAL_GPIO_Init+0x1c6>
 8000ce0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d014      	beq.n	8000d12 <HAL_GPIO_Init+0x1ca>
 8000ce8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d012      	beq.n	8000d16 <HAL_GPIO_Init+0x1ce>
 8000cf0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	d010      	beq.n	8000d1a <HAL_GPIO_Init+0x1d2>
 8000cf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f43f af55 	beq.w	8000bac <HAL_GPIO_Init+0x64>
 8000d02:	2208      	movs	r2, #8
 8000d04:	e755      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000d06:	2201      	movs	r2, #1
 8000d08:	e753      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	e751      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000d0e:	2203      	movs	r2, #3
 8000d10:	e74f      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000d12:	2204      	movs	r2, #4
 8000d14:	e74d      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000d16:	2205      	movs	r2, #5
 8000d18:	e74b      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	e749      	b.n	8000bb2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
 8000d22:	4770      	bx	lr
 8000d24:	40013800 	.word	0x40013800
 8000d28:	40013c00 	.word	0x40013c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d34:	b10a      	cbz	r2, 8000d3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d36:	6181      	str	r1, [r0, #24]
 8000d38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d3a:	0409      	lsls	r1, r1, #16
 8000d3c:	6181      	str	r1, [r0, #24]
  }
}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d40:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d42:	ea01 0203 	and.w	r2, r1, r3
 8000d46:	ea21 0103 	bic.w	r1, r1, r3
 8000d4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d4e:	6181      	str	r1, [r0, #24]
}
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d54:	2800      	cmp	r0, #0
 8000d56:	f000 81e0 	beq.w	800111a <HAL_RCC_OscConfig+0x3c6>
{
 8000d5a:	b570      	push	{r4, r5, r6, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	f013 0f01 	tst.w	r3, #1
 8000d66:	d03b      	beq.n	8000de0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d68:	4b9f      	ldr	r3, [pc, #636]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d02c      	beq.n	8000dce <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d74:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d021      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d86:	d04f      	beq.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d8c:	d052      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe0>
 8000d8e:	4b96      	ldr	r3, [pc, #600]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000da0:	6863      	ldr	r3, [r4, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d050      	beq.n	8000e48 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fe61 	bl	8000a6c <HAL_GetTick>
 8000daa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dac:	4b8e      	ldr	r3, [pc, #568]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000db4:	d114      	bne.n	8000de0 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db6:	f7ff fe59 	bl	8000a6c <HAL_GetTick>
 8000dba:	1b40      	subs	r0, r0, r5
 8000dbc:	2864      	cmp	r0, #100	@ 0x64
 8000dbe:	d9f5      	bls.n	8000dac <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	e1b1      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc4:	4b88      	ldr	r3, [pc, #544]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000dcc:	d0d8      	beq.n	8000d80 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dce:	4b86      	ldr	r3, [pc, #536]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000dd6:	d003      	beq.n	8000de0 <HAL_RCC_OscConfig+0x8c>
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 819f 	beq.w	800111e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	f013 0f02 	tst.w	r3, #2
 8000de6:	d054      	beq.n	8000e92 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000de8:	4b7f      	ldr	r3, [pc, #508]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f013 0f0c 	tst.w	r3, #12
 8000df0:	d03e      	beq.n	8000e70 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000df2:	4b7d      	ldr	r3, [pc, #500]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d033      	beq.n	8000e66 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dfe:	68e3      	ldr	r3, [r4, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d068      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b79      	ldr	r3, [pc, #484]	@ (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fe2f 	bl	8000a6c <HAL_GetTick>
 8000e0e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	4b75      	ldr	r3, [pc, #468]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f013 0f02 	tst.w	r3, #2
 8000e18:	d154      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fe27 	bl	8000a6c <HAL_GetTick>
 8000e1e:	1b40      	subs	r0, r0, r5
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d9f5      	bls.n	8000e10 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000e24:	2003      	movs	r0, #3
 8000e26:	e17f      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e28:	4a6f      	ldr	r2, [pc, #444]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e7b5      	b.n	8000da0 <HAL_RCC_OscConfig+0x4c>
 8000e34:	4b6c      	ldr	r3, [pc, #432]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e7ab      	b.n	8000da0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000e48:	f7ff fe10 	bl	8000a6c <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	4b66      	ldr	r3, [pc, #408]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e56:	d0c3      	beq.n	8000de0 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fe08 	bl	8000a6c <HAL_GetTick>
 8000e5c:	1b40      	subs	r0, r0, r5
 8000e5e:	2864      	cmp	r0, #100	@ 0x64
 8000e60:	d9f5      	bls.n	8000e4e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000e62:	2003      	movs	r0, #3
 8000e64:	e160      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e66:	4b60      	ldr	r3, [pc, #384]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e6e:	d1c6      	bne.n	8000dfe <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e70:	4b5d      	ldr	r3, [pc, #372]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f013 0f02 	tst.w	r3, #2
 8000e78:	d003      	beq.n	8000e82 <HAL_RCC_OscConfig+0x12e>
 8000e7a:	68e3      	ldr	r3, [r4, #12]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	f040 8150 	bne.w	8001122 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e82:	4a59      	ldr	r2, [pc, #356]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e8a:	6921      	ldr	r1, [r4, #16]
 8000e8c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e90:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f013 0f08 	tst.w	r3, #8
 8000e98:	d042      	beq.n	8000f20 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e9a:	6963      	ldr	r3, [r4, #20]
 8000e9c:	b36b      	cbz	r3, 8000efa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <HAL_RCC_OscConfig+0x298>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fde1 	bl	8000a6c <HAL_GetTick>
 8000eaa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eac:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000eb0:	f013 0f02 	tst.w	r3, #2
 8000eb4:	d134      	bne.n	8000f20 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fdd9 	bl	8000a6c <HAL_GetTick>
 8000eba:	1b40      	subs	r0, r0, r5
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d9f5      	bls.n	8000eac <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	e131      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4a48      	ldr	r2, [pc, #288]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000ecc:	6921      	ldr	r1, [r4, #16]
 8000ece:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e7dd      	b.n	8000e92 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000ed6:	4b45      	ldr	r3, [pc, #276]	@ (8000fec <HAL_RCC_OscConfig+0x298>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000edc:	f7ff fdc6 	bl	8000a6c <HAL_GetTick>
 8000ee0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b41      	ldr	r3, [pc, #260]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f013 0f02 	tst.w	r3, #2
 8000eea:	d0d2      	beq.n	8000e92 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fdbe 	bl	8000a6c <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	d9f5      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e116      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efa:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <HAL_RCC_OscConfig+0x298>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fdb3 	bl	8000a6c <HAL_GetTick>
 8000f06:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f08:	4b37      	ldr	r3, [pc, #220]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f0c:	f013 0f02 	tst.w	r3, #2
 8000f10:	d006      	beq.n	8000f20 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f12:	f7ff fdab 	bl	8000a6c <HAL_GetTick>
 8000f16:	1b40      	subs	r0, r0, r5
 8000f18:	2802      	cmp	r0, #2
 8000f1a:	d9f5      	bls.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	e103      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	f013 0f04 	tst.w	r3, #4
 8000f26:	d077      	beq.n	8001018 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f28:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000f30:	d133      	bne.n	8000f9a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000f38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f3a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f4a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f54:	d023      	beq.n	8000f9e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f56:	68a3      	ldr	r3, [r4, #8]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d034      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x272>
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	d038      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x27e>
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000f62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000f6c:	f022 0204 	bic.w	r2, r2, #4
 8000f70:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f72:	68a3      	ldr	r3, [r4, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d03d      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f78:	f7ff fd78 	bl	8000a6c <HAL_GetTick>
 8000f7c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f82:	f013 0f02 	tst.w	r3, #2
 8000f86:	d146      	bne.n	8001016 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f88:	f7ff fd70 	bl	8000a6c <HAL_GetTick>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f92:	4298      	cmp	r0, r3
 8000f94:	d9f3      	bls.n	8000f7e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000f96:	2003      	movs	r0, #3
 8000f98:	e0c6      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	e7d6      	b.n	8000f4c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fd60 	bl	8000a6c <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000fb6:	d1ce      	bne.n	8000f56 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb8:	f7ff fd58 	bl	8000a6c <HAL_GetTick>
 8000fbc:	1b80      	subs	r0, r0, r6
 8000fbe:	2802      	cmp	r0, #2
 8000fc0:	d9f5      	bls.n	8000fae <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	e0b0      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc6:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000fc8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fd0:	e7cf      	b.n	8000f72 <HAL_RCC_OscConfig+0x21e>
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <HAL_RCC_OscConfig+0x294>)
 8000fd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000fd6:	f042 0204 	orr.w	r2, r2, #4
 8000fda:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fe4:	e7c5      	b.n	8000f72 <HAL_RCC_OscConfig+0x21e>
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	42470000 	.word	0x42470000
 8000ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fd3a 	bl	8000a6c <HAL_GetTick>
 8000ff8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffa:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 8000ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ffe:	f013 0f02 	tst.w	r3, #2
 8001002:	d008      	beq.n	8001016 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	f7ff fd32 	bl	8000a6c <HAL_GetTick>
 8001008:	1b80      	subs	r0, r0, r6
 800100a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800100e:	4298      	cmp	r0, r3
 8001010:	d9f3      	bls.n	8000ffa <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	e088      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001016:	b9ed      	cbnz	r5, 8001054 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001018:	69a3      	ldr	r3, [r4, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8083 	beq.w	8001126 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001020:	4a48      	ldr	r2, [pc, #288]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 8001022:	6892      	ldr	r2, [r2, #8]
 8001024:	f002 020c 	and.w	r2, r2, #12
 8001028:	2a08      	cmp	r2, #8
 800102a:	d051      	beq.n	80010d0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102c:	2b02      	cmp	r3, #2
 800102e:	d017      	beq.n	8001060 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001030:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <HAL_RCC_OscConfig+0x3f4>)
 8001032:	2200      	movs	r2, #0
 8001034:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fd19 	bl	8000a6c <HAL_GetTick>
 800103a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103c:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001044:	d042      	beq.n	80010cc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fd11 	bl	8000a6c <HAL_GetTick>
 800104a:	1b00      	subs	r0, r0, r4
 800104c:	2802      	cmp	r0, #2
 800104e:	d9f5      	bls.n	800103c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001050:	2003      	movs	r0, #3
 8001052:	e069      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001054:	4a3b      	ldr	r2, [pc, #236]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 8001056:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	e7db      	b.n	8001018 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <HAL_RCC_OscConfig+0x3f4>)
 8001062:	2200      	movs	r2, #0
 8001064:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001066:	f7ff fd01 	bl	8000a6c <HAL_GetTick>
 800106a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001074:	d006      	beq.n	8001084 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fcf9 	bl	8000a6c <HAL_GetTick>
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	2802      	cmp	r0, #2
 800107e:	d9f5      	bls.n	800106c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e051      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001084:	69e3      	ldr	r3, [r4, #28]
 8001086:	6a22      	ldr	r2, [r4, #32]
 8001088:	4313      	orrs	r3, r2
 800108a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800108c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001090:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001092:	0852      	lsrs	r2, r2, #1
 8001094:	3a01      	subs	r2, #1
 8001096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800109a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800109c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010a0:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 80010a2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <HAL_RCC_OscConfig+0x3f4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80010aa:	f7ff fcdf 	bl	8000a6c <HAL_GetTick>
 80010ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fcd7 	bl	8000a6c <HAL_GetTick>
 80010be:	1b00      	subs	r0, r0, r4
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d9f5      	bls.n	80010b0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80010c4:	2003      	movs	r0, #3
 80010c6:	e02f      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80010c8:	2000      	movs	r0, #0
 80010ca:	e02d      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 80010cc:	2000      	movs	r0, #0
 80010ce:	e02b      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d02b      	beq.n	800112c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_RCC_OscConfig+0x3f0>)
 80010d6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80010dc:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010de:	4291      	cmp	r1, r2
 80010e0:	d126      	bne.n	8001130 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80010e6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e8:	428a      	cmp	r2, r1
 80010ea:	d123      	bne.n	8001134 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010ee:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80010f2:	401a      	ands	r2, r3
 80010f4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80010f8:	d11e      	bne.n	8001138 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010fa:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80010fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001100:	0852      	lsrs	r2, r2, #1
 8001102:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001104:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001108:	d118      	bne.n	800113c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800110a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800110e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001110:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001114:	d114      	bne.n	8001140 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001116:	2000      	movs	r0, #0
 8001118:	e006      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
}
 800111c:	4770      	bx	lr
        return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e002      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001122:	2001      	movs	r0, #1
 8001124:	e000      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001126:	2000      	movs	r0, #0
}
 8001128:	b002      	add	sp, #8
 800112a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
 800112e:	e7fb      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
 8001132:	e7f9      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 8001134:	2001      	movs	r0, #1
 8001136:	e7f7      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 8001138:	2001      	movs	r0, #1
 800113a:	e7f5      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 800113c:	2001      	movs	r0, #1
 800113e:	e7f3      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 8001140:	2001      	movs	r0, #1
 8001142:	e7f1      	b.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 8001144:	40023800 	.word	0x40023800
 8001148:	42470000 	.word	0x42470000

0800114c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800114c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d001      	beq.n	800115e <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800115a:	482f      	ldr	r0, [pc, #188]	@ (8001218 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800115c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800115e:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800116c:	d02c      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001170:	6858      	ldr	r0, [r3, #4]
 8001172:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001176:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800117a:	ebbc 0c00 	subs.w	ip, ip, r0
 800117e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001182:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001186:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800118a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800118e:	ebb1 010c 	subs.w	r1, r1, ip
 8001192:	eb63 030e 	sbc.w	r3, r3, lr
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800119c:	00c9      	lsls	r1, r1, #3
 800119e:	eb11 0c00 	adds.w	ip, r1, r0
 80011a2:	f143 0300 	adc.w	r3, r3, #0
 80011a6:	0299      	lsls	r1, r3, #10
 80011a8:	2300      	movs	r3, #0
 80011aa:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80011ae:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80011b2:	f7ff f85d 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011be:	3301      	adds	r3, #1
 80011c0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80011c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80011c6:	e7c9      	b.n	800115c <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011ca:	6858      	ldr	r0, [r3, #4]
 80011cc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80011d0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80011d4:	ebbc 0c00 	subs.w	ip, ip, r0
 80011d8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80011dc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80011e0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80011e4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80011e8:	ebb1 010c 	subs.w	r1, r1, ip
 80011ec:	eb63 030e 	sbc.w	r3, r3, lr
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011f6:	00c9      	lsls	r1, r1, #3
 80011f8:	eb11 0c00 	adds.w	ip, r1, r0
 80011fc:	f143 0300 	adc.w	r3, r3, #0
 8001200:	0299      	lsls	r1, r3, #10
 8001202:	2300      	movs	r3, #0
 8001204:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001208:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800120c:	f7ff f830 	bl	8000270 <__aeabi_uldivmod>
 8001210:	e7d1      	b.n	80011b6 <HAL_RCC_GetSysClockFreq+0x6a>
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	00f42400 	.word	0x00f42400

0800121c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800121c:	2800      	cmp	r0, #0
 800121e:	f000 809b 	beq.w	8001358 <HAL_RCC_ClockConfig+0x13c>
{
 8001222:	b570      	push	{r4, r5, r6, lr}
 8001224:	460d      	mov	r5, r1
 8001226:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001228:	4b4f      	ldr	r3, [pc, #316]	@ (8001368 <HAL_RCC_ClockConfig+0x14c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	428b      	cmp	r3, r1
 8001232:	d208      	bcs.n	8001246 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001234:	b2cb      	uxtb	r3, r1
 8001236:	4a4c      	ldr	r2, [pc, #304]	@ (8001368 <HAL_RCC_ClockConfig+0x14c>)
 8001238:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	428b      	cmp	r3, r1
 8001242:	f040 808b 	bne.w	800135c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	f013 0f02 	tst.w	r3, #2
 800124c:	d017      	beq.n	800127e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124e:	f013 0f04 	tst.w	r3, #4
 8001252:	d004      	beq.n	800125e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001254:	4a45      	ldr	r2, [pc, #276]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 8001256:	6893      	ldr	r3, [r2, #8]
 8001258:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800125c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	f013 0f08 	tst.w	r3, #8
 8001264:	d004      	beq.n	8001270 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001266:	4a41      	ldr	r2, [pc, #260]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 8001268:	6893      	ldr	r3, [r2, #8]
 800126a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800126e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001270:	4a3e      	ldr	r2, [pc, #248]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 8001272:	6893      	ldr	r3, [r2, #8]
 8001274:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001278:	68a1      	ldr	r1, [r4, #8]
 800127a:	430b      	orrs	r3, r1
 800127c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f013 0f01 	tst.w	r3, #1
 8001284:	d032      	beq.n	80012ec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	6863      	ldr	r3, [r4, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d021      	beq.n	80012d0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128c:	1e9a      	subs	r2, r3, #2
 800128e:	2a01      	cmp	r2, #1
 8001290:	d925      	bls.n	80012de <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4a36      	ldr	r2, [pc, #216]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f012 0f02 	tst.w	r2, #2
 800129a:	d061      	beq.n	8001360 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129c:	4933      	ldr	r1, [pc, #204]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 800129e:	688a      	ldr	r2, [r1, #8]
 80012a0:	f022 0203 	bic.w	r2, r2, #3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80012a8:	f7ff fbe0 	bl	8000a6c <HAL_GetTick>
 80012ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	6862      	ldr	r2, [r4, #4]
 80012b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012bc:	d016      	beq.n	80012ec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012be:	f7ff fbd5 	bl	8000a6c <HAL_GetTick>
 80012c2:	1b80      	subs	r0, r0, r6
 80012c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012c8:	4298      	cmp	r0, r3
 80012ca:	d9f0      	bls.n	80012ae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80012cc:	2003      	movs	r0, #3
 80012ce:	e042      	b.n	8001356 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d0:	4a26      	ldr	r2, [pc, #152]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80012d8:	d1e0      	bne.n	800129c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
 80012dc:	e03b      	b.n	8001356 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80012e6:	d1d9      	bne.n	800129c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e034      	b.n	8001356 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <HAL_RCC_ClockConfig+0x14c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	42ab      	cmp	r3, r5
 80012f6:	d907      	bls.n	8001308 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f8:	b2ea      	uxtb	r2, r5
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <HAL_RCC_ClockConfig+0x14c>)
 80012fc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	42ab      	cmp	r3, r5
 8001306:	d12d      	bne.n	8001364 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	f013 0f04 	tst.w	r3, #4
 800130e:	d006      	beq.n	800131e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001310:	4a16      	ldr	r2, [pc, #88]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 8001312:	6893      	ldr	r3, [r2, #8]
 8001314:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001318:	68e1      	ldr	r1, [r4, #12]
 800131a:	430b      	orrs	r3, r1
 800131c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f013 0f08 	tst.w	r3, #8
 8001324:	d007      	beq.n	8001336 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 8001328:	6893      	ldr	r3, [r2, #8]
 800132a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800132e:	6921      	ldr	r1, [r4, #16]
 8001330:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001334:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001336:	f7ff ff09 	bl	800114c <HAL_RCC_GetSysClockFreq>
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <HAL_RCC_ClockConfig+0x150>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001342:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <HAL_RCC_ClockConfig+0x154>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	40d8      	lsrs	r0, r3
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_RCC_ClockConfig+0x158>)
 800134a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_RCC_ClockConfig+0x15c>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	f7ff fa92 	bl	8000878 <HAL_InitTick>
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
}
 8001356:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
}
 800135a:	4770      	bx	lr
      return HAL_ERROR;
 800135c:	2001      	movs	r0, #1
 800135e:	e7fa      	b.n	8001356 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001360:	2001      	movs	r0, #1
 8001362:	e7f8      	b.n	8001356 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
 8001366:	e7f6      	b.n	8001356 <HAL_RCC_ClockConfig+0x13a>
 8001368:	40023c00 	.word	0x40023c00
 800136c:	40023800 	.word	0x40023800
 8001370:	0800480c 	.word	0x0800480c
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008

0800137c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800137c:	4b01      	ldr	r3, [pc, #4]	@ (8001384 <HAL_RCC_GetHCLKFreq+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001388:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800138a:	f7ff fff7 	bl	800137c <HAL_RCC_GetHCLKFreq>
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001396:	4a03      	ldr	r2, [pc, #12]	@ (80013a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
}
 800139a:	40d8      	lsrs	r0, r3
 800139c:	bd08      	pop	{r3, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08004804 	.word	0x08004804

080013a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013aa:	f7ff ffe7 	bl	800137c <HAL_RCC_GetHCLKFreq>
 80013ae:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80013b6:	4a03      	ldr	r2, [pc, #12]	@ (80013c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80013ba:	40d8      	lsrs	r0, r3
 80013bc:	bd08      	pop	{r3, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	08004804 	.word	0x08004804

080013c8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c8:	230f      	movs	r3, #15
 80013ca:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_RCC_GetClockConfig+0x34>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	f002 0203 	and.w	r2, r2, #3
 80013d4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80013dc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80013e4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80013ee:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <HAL_RCC_GetClockConfig+0x38>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	600b      	str	r3, [r1, #0]
}
 80013fa:	4770      	bx	lr
 80013fc:	40023800 	.word	0x40023800
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001404:	4770      	bx	lr
	...

08001408 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001408:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d137      	bne.n	8001482 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001412:	2302      	movs	r3, #2
 8001414:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001418:	6802      	ldr	r2, [r0, #0]
 800141a:	68d3      	ldr	r3, [r2, #12]
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001422:	6803      	ldr	r3, [r0, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_TIM_Base_Start_IT+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d020      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 800142a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800142e:	d01d      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 8001430:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001434:	4293      	cmp	r3, r2
 8001436:	d019      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 8001438:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800143c:	4293      	cmp	r3, r2
 800143e:	d015      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 8001440:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001444:	4293      	cmp	r3, r2
 8001446:	d011      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 8001448:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800144c:	4293      	cmp	r3, r2
 800144e:	d00d      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 8001450:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001454:	4293      	cmp	r3, r2
 8001456:	d009      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
 8001458:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800145c:	4293      	cmp	r3, r2
 800145e:	d005      	beq.n	800146c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001468:	2000      	movs	r0, #0
 800146a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001472:	2a06      	cmp	r2, #6
 8001474:	d007      	beq.n	8001486 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800147e:	2000      	movs	r0, #0
 8001480:	4770      	bx	lr
    return HAL_ERROR;
 8001482:	2001      	movs	r0, #1
 8001484:	4770      	bx	lr
  return HAL_OK;
 8001486:	2000      	movs	r0, #0
}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40010000 	.word	0x40010000

08001490 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001490:	4770      	bx	lr

08001492 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001492:	4770      	bx	lr

08001494 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001494:	4770      	bx	lr

08001496 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001496:	4770      	bx	lr

08001498 <HAL_TIM_IRQHandler>:
{
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80014a0:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014a2:	f015 0f02 	tst.w	r5, #2
 80014a6:	d010      	beq.n	80014ca <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014a8:	f016 0f02 	tst.w	r6, #2
 80014ac:	d00d      	beq.n	80014ca <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014ae:	f06f 0202 	mvn.w	r2, #2
 80014b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f013 0f03 	tst.w	r3, #3
 80014c0:	d05e      	beq.n	8001580 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80014c2:	f7ff ffe6 	bl	8001492 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c6:	2300      	movs	r3, #0
 80014c8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014ca:	f015 0f04 	tst.w	r5, #4
 80014ce:	d012      	beq.n	80014f6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014d0:	f016 0f04 	tst.w	r6, #4
 80014d4:	d00f      	beq.n	80014f6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	f06f 0204 	mvn.w	r2, #4
 80014dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014de:	2302      	movs	r3, #2
 80014e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80014ea:	d04f      	beq.n	800158c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ffd0 	bl	8001492 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f2:	2300      	movs	r3, #0
 80014f4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80014f6:	f015 0f08 	tst.w	r5, #8
 80014fa:	d012      	beq.n	8001522 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80014fc:	f016 0f08 	tst.w	r6, #8
 8001500:	d00f      	beq.n	8001522 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	f06f 0208 	mvn.w	r2, #8
 8001508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800150a:	2304      	movs	r3, #4
 800150c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f013 0f03 	tst.w	r3, #3
 8001516:	d040      	beq.n	800159a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff ffba 	bl	8001492 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800151e:	2300      	movs	r3, #0
 8001520:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001522:	f015 0f10 	tst.w	r5, #16
 8001526:	d012      	beq.n	800154e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001528:	f016 0f10 	tst.w	r6, #16
 800152c:	d00f      	beq.n	800154e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	f06f 0210 	mvn.w	r2, #16
 8001534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001536:	2308      	movs	r3, #8
 8001538:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001542:	d031      	beq.n	80015a8 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff ffa4 	bl	8001492 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154a:	2300      	movs	r3, #0
 800154c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800154e:	f015 0f01 	tst.w	r5, #1
 8001552:	d002      	beq.n	800155a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001554:	f016 0f01 	tst.w	r6, #1
 8001558:	d12d      	bne.n	80015b6 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800155a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800155e:	d002      	beq.n	8001566 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001560:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001564:	d12f      	bne.n	80015c6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001566:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800156a:	d002      	beq.n	8001572 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800156c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001570:	d131      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001572:	f015 0f20 	tst.w	r5, #32
 8001576:	d002      	beq.n	800157e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001578:	f016 0f20 	tst.w	r6, #32
 800157c:	d133      	bne.n	80015e6 <HAL_TIM_IRQHandler+0x14e>
}
 800157e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001580:	f7ff ff86 	bl	8001490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff ff85 	bl	8001494 <HAL_TIM_PWM_PulseFinishedCallback>
 800158a:	e79c      	b.n	80014c6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff7f 	bl	8001490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff ff7e 	bl	8001494 <HAL_TIM_PWM_PulseFinishedCallback>
 8001598:	e7ab      	b.n	80014f2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff ff78 	bl	8001490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff ff77 	bl	8001494 <HAL_TIM_PWM_PulseFinishedCallback>
 80015a6:	e7ba      	b.n	800151e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff ff71 	bl	8001490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff ff70 	bl	8001494 <HAL_TIM_PWM_PulseFinishedCallback>
 80015b4:	e7c9      	b.n	800154a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	f06f 0201 	mvn.w	r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff f854 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
 80015c4:	e7c9      	b.n	800155a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80015cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 f8ab 	bl	800172a <HAL_TIMEx_BreakCallback>
 80015d4:	e7c7      	b.n	8001566 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80015dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff ff59 	bl	8001496 <HAL_TIM_TriggerCallback>
 80015e4:	e7c5      	b.n	8001572 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	f06f 0220 	mvn.w	r2, #32
 80015ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80015ee:	4620      	mov	r0, r4
 80015f0:	f000 f89a 	bl	8001728 <HAL_TIMEx_CommutCallback>
}
 80015f4:	e7c3      	b.n	800157e <HAL_TIM_IRQHandler+0xe6>
	...

080015f8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015f8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015fa:	4a34      	ldr	r2, [pc, #208]	@ (80016cc <TIM_Base_SetConfig+0xd4>)
 80015fc:	4290      	cmp	r0, r2
 80015fe:	d012      	beq.n	8001626 <TIM_Base_SetConfig+0x2e>
 8001600:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001604:	d00f      	beq.n	8001626 <TIM_Base_SetConfig+0x2e>
 8001606:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800160a:	4290      	cmp	r0, r2
 800160c:	d00b      	beq.n	8001626 <TIM_Base_SetConfig+0x2e>
 800160e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001612:	4290      	cmp	r0, r2
 8001614:	d007      	beq.n	8001626 <TIM_Base_SetConfig+0x2e>
 8001616:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800161a:	4290      	cmp	r0, r2
 800161c:	d003      	beq.n	8001626 <TIM_Base_SetConfig+0x2e>
 800161e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001622:	4290      	cmp	r0, r2
 8001624:	d103      	bne.n	800162e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800162a:	684a      	ldr	r2, [r1, #4]
 800162c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800162e:	4a27      	ldr	r2, [pc, #156]	@ (80016cc <TIM_Base_SetConfig+0xd4>)
 8001630:	4290      	cmp	r0, r2
 8001632:	d02a      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 8001634:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001638:	d027      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 800163a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800163e:	4290      	cmp	r0, r2
 8001640:	d023      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 8001642:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001646:	4290      	cmp	r0, r2
 8001648:	d01f      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 800164a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800164e:	4290      	cmp	r0, r2
 8001650:	d01b      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 8001652:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001656:	4290      	cmp	r0, r2
 8001658:	d017      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 800165a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800165e:	4290      	cmp	r0, r2
 8001660:	d013      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 8001662:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001666:	4290      	cmp	r0, r2
 8001668:	d00f      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 800166a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800166e:	4290      	cmp	r0, r2
 8001670:	d00b      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 8001672:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001676:	4290      	cmp	r0, r2
 8001678:	d007      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 800167a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800167e:	4290      	cmp	r0, r2
 8001680:	d003      	beq.n	800168a <TIM_Base_SetConfig+0x92>
 8001682:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001686:	4290      	cmp	r0, r2
 8001688:	d103      	bne.n	8001692 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800168a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800168e:	68ca      	ldr	r2, [r1, #12]
 8001690:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001696:	694a      	ldr	r2, [r1, #20]
 8001698:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800169a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800169c:	688b      	ldr	r3, [r1, #8]
 800169e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016a0:	680b      	ldr	r3, [r1, #0]
 80016a2:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <TIM_Base_SetConfig+0xd4>)
 80016a6:	4298      	cmp	r0, r3
 80016a8:	d003      	beq.n	80016b2 <TIM_Base_SetConfig+0xba>
 80016aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d101      	bne.n	80016b6 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016b2:	690b      	ldr	r3, [r1, #16]
 80016b4:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016b6:	2301      	movs	r3, #1
 80016b8:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80016ba:	6903      	ldr	r3, [r0, #16]
 80016bc:	f013 0f01 	tst.w	r3, #1
 80016c0:	d003      	beq.n	80016ca <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80016c2:	6903      	ldr	r3, [r0, #16]
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6103      	str	r3, [r0, #16]
  }
}
 80016ca:	4770      	bx	lr
 80016cc:	40010000 	.word	0x40010000

080016d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80016d0:	b340      	cbz	r0, 8001724 <HAL_TIM_Base_Init+0x54>
{
 80016d2:	b510      	push	{r4, lr}
 80016d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80016d6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80016da:	b1f3      	cbz	r3, 800171a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80016dc:	2302      	movs	r3, #2
 80016de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e2:	4621      	mov	r1, r4
 80016e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80016e8:	f7ff ff86 	bl	80015f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80016f6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80016fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80016fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001702:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800170a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800170e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001712:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001716:	2000      	movs	r0, #0
}
 8001718:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800171a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800171e:	f7ff fe71 	bl	8001404 <HAL_TIM_Base_MspInit>
 8001722:	e7db      	b.n	80016dc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001724:	2001      	movs	r0, #1
}
 8001726:	4770      	bx	lr

08001728 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001728:	4770      	bx	lr

0800172a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800172a:	4770      	bx	lr

0800172c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800172c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800172e:	f102 030c 	add.w	r3, r2, #12
 8001732:	e853 3f00 	ldrex	r3, [r3]
 8001736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800173a:	320c      	adds	r2, #12
 800173c:	e842 3100 	strex	r1, r3, [r2]
 8001740:	2900      	cmp	r1, #0
 8001742:	d1f3      	bne.n	800172c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001744:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001746:	f102 0314 	add.w	r3, r2, #20
 800174a:	e853 3f00 	ldrex	r3, [r3]
 800174e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001752:	3214      	adds	r2, #20
 8001754:	e842 3100 	strex	r1, r3, [r2]
 8001758:	2900      	cmp	r1, #0
 800175a:	d1f3      	bne.n	8001744 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800175c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001762:	2320      	movs	r3, #32
 8001764:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001768:	2300      	movs	r3, #0
 800176a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800176c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800176e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001770:	f102 030c 	add.w	r3, r2, #12
 8001774:	e853 3f00 	ldrex	r3, [r3]
 8001778:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800177c:	320c      	adds	r2, #12
 800177e:	e842 3100 	strex	r1, r3, [r2]
 8001782:	2900      	cmp	r1, #0
 8001784:	d1f3      	bne.n	800176e <UART_EndRxTransfer+0x42>
 8001786:	e7ec      	b.n	8001762 <UART_EndRxTransfer+0x36>

08001788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001788:	b510      	push	{r4, lr}
 800178a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800178c:	6802      	ldr	r2, [r0, #0]
 800178e:	6913      	ldr	r3, [r2, #16]
 8001790:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001794:	68c1      	ldr	r1, [r0, #12]
 8001796:	430b      	orrs	r3, r1
 8001798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800179a:	6883      	ldr	r3, [r0, #8]
 800179c:	6902      	ldr	r2, [r0, #16]
 800179e:	431a      	orrs	r2, r3
 80017a0:	6943      	ldr	r3, [r0, #20]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	69c3      	ldr	r3, [r0, #28]
 80017a6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80017a8:	6801      	ldr	r1, [r0, #0]
 80017aa:	68cb      	ldr	r3, [r1, #12]
 80017ac:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80017b0:	f023 030c 	bic.w	r3, r3, #12
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017b8:	6802      	ldr	r2, [r0, #0]
 80017ba:	6953      	ldr	r3, [r2, #20]
 80017bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017c0:	6981      	ldr	r1, [r0, #24]
 80017c2:	430b      	orrs	r3, r1
 80017c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017c6:	6803      	ldr	r3, [r0, #0]
 80017c8:	4a31      	ldr	r2, [pc, #196]	@ (8001890 <UART_SetConfig+0x108>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d006      	beq.n	80017dc <UART_SetConfig+0x54>
 80017ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d002      	beq.n	80017dc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80017d6:	f7ff fdd7 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 80017da:	e001      	b.n	80017e0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80017dc:	f7ff fde4 	bl	80013a8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017e0:	69e3      	ldr	r3, [r4, #28]
 80017e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017e6:	d029      	beq.n	800183c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017e8:	2100      	movs	r1, #0
 80017ea:	1803      	adds	r3, r0, r0
 80017ec:	4149      	adcs	r1, r1
 80017ee:	181b      	adds	r3, r3, r0
 80017f0:	f141 0100 	adc.w	r1, r1, #0
 80017f4:	00c9      	lsls	r1, r1, #3
 80017f6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	1818      	adds	r0, r3, r0
 80017fe:	6863      	ldr	r3, [r4, #4]
 8001800:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001804:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001808:	f141 0100 	adc.w	r1, r1, #0
 800180c:	f7fe fd30 	bl	8000270 <__aeabi_uldivmod>
 8001810:	4a20      	ldr	r2, [pc, #128]	@ (8001894 <UART_SetConfig+0x10c>)
 8001812:	fba2 3100 	umull	r3, r1, r2, r0
 8001816:	0949      	lsrs	r1, r1, #5
 8001818:	2364      	movs	r3, #100	@ 0x64
 800181a:	fb03 0311 	mls	r3, r3, r1, r0
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	3332      	adds	r3, #50	@ 0x32
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800182c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	6821      	ldr	r1, [r4, #0]
 8001836:	4413      	add	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }
}
 800183a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800183c:	2300      	movs	r3, #0
 800183e:	1802      	adds	r2, r0, r0
 8001840:	eb43 0103 	adc.w	r1, r3, r3
 8001844:	1812      	adds	r2, r2, r0
 8001846:	f141 0100 	adc.w	r1, r1, #0
 800184a:	00c9      	lsls	r1, r1, #3
 800184c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	1810      	adds	r0, r2, r0
 8001854:	f141 0100 	adc.w	r1, r1, #0
 8001858:	6862      	ldr	r2, [r4, #4]
 800185a:	1892      	adds	r2, r2, r2
 800185c:	415b      	adcs	r3, r3
 800185e:	f7fe fd07 	bl	8000270 <__aeabi_uldivmod>
 8001862:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <UART_SetConfig+0x10c>)
 8001864:	fba2 3100 	umull	r3, r1, r2, r0
 8001868:	0949      	lsrs	r1, r1, #5
 800186a:	2364      	movs	r3, #100	@ 0x64
 800186c:	fb03 0311 	mls	r3, r3, r1, r0
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	3332      	adds	r3, #50	@ 0x32
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	005a      	lsls	r2, r3, #1
 800187c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001880:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	6821      	ldr	r1, [r4, #0]
 800188a:	4413      	add	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
 800188e:	e7d4      	b.n	800183a <UART_SetConfig+0xb2>
 8001890:	40011000 	.word	0x40011000
 8001894:	51eb851f 	.word	0x51eb851f

08001898 <UART_WaitOnFlagUntilTimeout>:
{
 8001898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800189c:	b083      	sub	sp, #12
 800189e:	4605      	mov	r5, r0
 80018a0:	460e      	mov	r6, r1
 80018a2:	4617      	mov	r7, r2
 80018a4:	4699      	mov	r9, r3
 80018a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	681c      	ldr	r4, [r3, #0]
 80018ae:	ea36 0404 	bics.w	r4, r6, r4
 80018b2:	bf0c      	ite	eq
 80018b4:	2401      	moveq	r4, #1
 80018b6:	2400      	movne	r4, #0
 80018b8:	42bc      	cmp	r4, r7
 80018ba:	d128      	bne.n	800190e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80018bc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80018c0:	d0f3      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c2:	f7ff f8d3 	bl	8000a6c <HAL_GetTick>
 80018c6:	eba0 0009 	sub.w	r0, r0, r9
 80018ca:	4540      	cmp	r0, r8
 80018cc:	d823      	bhi.n	8001916 <UART_WaitOnFlagUntilTimeout+0x7e>
 80018ce:	f1b8 0f00 	cmp.w	r8, #0
 80018d2:	d022      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80018d4:	682b      	ldr	r3, [r5, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	f012 0f04 	tst.w	r2, #4
 80018dc:	d0e5      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x12>
 80018de:	2e80      	cmp	r6, #128	@ 0x80
 80018e0:	d0e3      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x12>
 80018e2:	2e40      	cmp	r6, #64	@ 0x40
 80018e4:	d0e1      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f012 0f08 	tst.w	r2, #8
 80018ec:	d0dd      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80018ee:	2400      	movs	r4, #0
 80018f0:	9401      	str	r4, [sp, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	9201      	str	r2, [sp, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80018fc:	4628      	mov	r0, r5
 80018fe:	f7ff ff15 	bl	800172c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001902:	2308      	movs	r3, #8
 8001904:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001906:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800190a:	2001      	movs	r0, #1
 800190c:	e000      	b.n	8001910 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800190e:	2000      	movs	r0, #0
}
 8001910:	b003      	add	sp, #12
 8001912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001916:	2003      	movs	r0, #3
 8001918:	e7fa      	b.n	8001910 <UART_WaitOnFlagUntilTimeout+0x78>
 800191a:	2003      	movs	r0, #3
 800191c:	e7f8      	b.n	8001910 <UART_WaitOnFlagUntilTimeout+0x78>

0800191e <HAL_UART_Init>:
  if (huart == NULL)
 800191e:	b360      	cbz	r0, 800197a <HAL_UART_Init+0x5c>
{
 8001920:	b510      	push	{r4, lr}
 8001922:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001924:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001928:	b313      	cbz	r3, 8001970 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800192a:	2324      	movs	r3, #36	@ 0x24
 800192c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001930:	6822      	ldr	r2, [r4, #0]
 8001932:	68d3      	ldr	r3, [r2, #12]
 8001934:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001938:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff ff24 	bl	8001788 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	6913      	ldr	r3, [r2, #16]
 8001944:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001948:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	6953      	ldr	r3, [r2, #20]
 800194e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001952:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	68d3      	ldr	r3, [r2, #12]
 8001958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800195c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195e:	2000      	movs	r0, #0
 8001960:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001962:	2320      	movs	r3, #32
 8001964:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001968:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800196c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800196e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001970:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001974:	f7fe ff46 	bl	8000804 <HAL_UART_MspInit>
 8001978:	e7d7      	b.n	800192a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800197a:	2001      	movs	r0, #1
}
 800197c:	4770      	bx	lr

0800197e <HAL_UART_Transmit>:
{
 800197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001986:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b20      	cmp	r3, #32
 800198e:	d156      	bne.n	8001a3e <HAL_UART_Transmit+0xc0>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
 8001994:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001996:	2900      	cmp	r1, #0
 8001998:	d055      	beq.n	8001a46 <HAL_UART_Transmit+0xc8>
 800199a:	b90a      	cbnz	r2, 80019a0 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e04f      	b.n	8001a40 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019a4:	2321      	movs	r3, #33	@ 0x21
 80019a6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80019aa:	f7ff f85f 	bl	8000a6c <HAL_GetTick>
 80019ae:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80019b0:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80019b4:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019b8:	68a3      	ldr	r3, [r4, #8]
 80019ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019be:	d002      	beq.n	80019c6 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80019c0:	f04f 0800 	mov.w	r8, #0
 80019c4:	e014      	b.n	80019f0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019c6:	6923      	ldr	r3, [r4, #16]
 80019c8:	b32b      	cbz	r3, 8001a16 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80019ca:	f04f 0800 	mov.w	r8, #0
 80019ce:	e00f      	b.n	80019f0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80019d0:	2320      	movs	r3, #32
 80019d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
 80019d8:	e032      	b.n	8001a40 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019da:	f838 3b02 	ldrh.w	r3, [r8], #2
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80019e6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80019e8:	b292      	uxth	r2, r2
 80019ea:	3a01      	subs	r2, #1
 80019ec:	b292      	uxth	r2, r2
 80019ee:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80019f0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b193      	cbz	r3, 8001a1c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019f6:	9600      	str	r6, [sp, #0]
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ff4a 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d1e3      	bne.n	80019d0 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001a08:	2d00      	cmp	r5, #0
 8001a0a:	d0e6      	beq.n	80019da <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a0c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a14:	e7e7      	b.n	80019e6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001a16:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001a18:	2500      	movs	r5, #0
 8001a1a:	e7e9      	b.n	80019f0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a1c:	9600      	str	r6, [sp, #0]
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	2140      	movs	r1, #64	@ 0x40
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff37 	bl	8001898 <UART_WaitOnFlagUntilTimeout>
 8001a2a:	b918      	cbnz	r0, 8001a34 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001a32:	e005      	b.n	8001a40 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001a34:	2320      	movs	r3, #32
 8001a36:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	e000      	b.n	8001a40 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001a3e:	2002      	movs	r0, #2
}
 8001a40:	b002      	add	sp, #8
 8001a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001a46:	2001      	movs	r0, #1
 8001a48:	e7fa      	b.n	8001a40 <HAL_UART_Transmit+0xc2>

08001a4a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001a4a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8001a4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001a50:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001a52:	f001 f937 	bl	8002cc4 <xTaskGetSchedulerState>
 8001a56:	2801      	cmp	r0, #1
 8001a58:	d100      	bne.n	8001a5c <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8001a5a:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8001a5c:	f001 fc8a 	bl	8003374 <xPortSysTickHandler>
}
 8001a60:	e7fb      	b.n	8001a5a <SysTick_Handler+0x10>
	...

08001a64 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a64:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a68:	b92b      	cbnz	r3, 8001a76 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <osKernelInitialize+0x20>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	b928      	cbnz	r0, 8001a7c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a74:	4770      	bx	lr
    stat = osErrorISR;
 8001a76:	f06f 0005 	mvn.w	r0, #5
 8001a7a:	4770      	bx	lr
    } else {
      stat = osError;
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000580 	.word	0x20000580

08001a88 <osKernelStart>:
 8001a88:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a8c:	b973      	cbnz	r3, 8001aac <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <osKernelStart+0x30>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10d      	bne.n	8001ab2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8001a96:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	2400      	movs	r4, #0
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <osKernelStart+0x34>)
 8001a9c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <osKernelStart+0x30>)
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001aa4:	f000 fe3e 	bl	8002724 <vTaskStartScheduler>
      stat = osOK;
 8001aa8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8001aaa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8001aac:	f06f 0005 	mvn.w	r0, #5
 8001ab0:	4770      	bx	lr
      stat = osError;
 8001ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000580 	.word	0x20000580
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8001ac0:	b508      	push	{r3, lr}
 8001ac2:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8001ac6:	b113      	cbz	r3, 8001ace <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8001ac8:	f000 fe92 	bl	80027f0 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8001acc:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 8001ace:	f000 fe89 	bl	80027e4 <xTaskGetTickCount>
  return (ticks);
 8001ad2:	e7fb      	b.n	8001acc <osKernelGetTickCount+0xc>

08001ad4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ad8:	2400      	movs	r4, #0
 8001ada:	9405      	str	r4, [sp, #20]
 8001adc:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8001ae0:	bb74      	cbnz	r4, 8001b40 <osThreadNew+0x6c>
 8001ae2:	b368      	cbz	r0, 8001b40 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8001ae4:	b322      	cbz	r2, 8001b30 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 8001ae6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8001ae8:	6993      	ldr	r3, [r2, #24]
 8001aea:	b903      	cbnz	r3, 8001aee <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8001aec:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001aee:	1e5c      	subs	r4, r3, #1
 8001af0:	2c37      	cmp	r4, #55	@ 0x37
 8001af2:	d849      	bhi.n	8001b88 <osThreadNew+0xb4>
 8001af4:	6854      	ldr	r4, [r2, #4]
 8001af6:	f014 0f01 	tst.w	r4, #1
 8001afa:	d147      	bne.n	8001b8c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001afc:	6956      	ldr	r6, [r2, #20]
 8001afe:	b16e      	cbz	r6, 8001b1c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b00:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b04:	6894      	ldr	r4, [r2, #8]
 8001b06:	b12c      	cbz	r4, 8001b14 <osThreadNew+0x40>
 8001b08:	68d7      	ldr	r7, [r2, #12]
 8001b0a:	2fab      	cmp	r7, #171	@ 0xab
 8001b0c:	d902      	bls.n	8001b14 <osThreadNew+0x40>
 8001b0e:	6917      	ldr	r7, [r2, #16]
 8001b10:	b107      	cbz	r7, 8001b14 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b12:	b9c6      	cbnz	r6, 8001b46 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b14:	b12c      	cbz	r4, 8001b22 <osThreadNew+0x4e>
    mem  = -1;
 8001b16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b1a:	e00e      	b.n	8001b3a <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8001b1c:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8001b20:	e7f0      	b.n	8001b04 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b22:	68d4      	ldr	r4, [r2, #12]
 8001b24:	b98c      	cbnz	r4, 8001b4a <osThreadNew+0x76>
 8001b26:	6914      	ldr	r4, [r2, #16]
 8001b28:	b194      	cbz	r4, 8001b50 <osThreadNew+0x7c>
    mem  = -1;
 8001b2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b2e:	e004      	b.n	8001b3a <osThreadNew+0x66>
    name = NULL;
 8001b30:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001b32:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8001b34:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8001b36:	f04f 0c40 	mov.w	ip, #64	@ 0x40
    }

    if (mem == 1) {
 8001b3a:	2c01      	cmp	r4, #1
 8001b3c:	d00a      	beq.n	8001b54 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8001b3e:	b1ac      	cbz	r4, 8001b6c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b40:	9805      	ldr	r0, [sp, #20]
}
 8001b42:	b007      	add	sp, #28
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8001b46:	2401      	movs	r4, #1
 8001b48:	e7f7      	b.n	8001b3a <osThreadNew+0x66>
    mem  = -1;
 8001b4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b4e:	e7f4      	b.n	8001b3a <osThreadNew+0x66>
          mem = 0;
 8001b50:	2400      	movs	r4, #0
 8001b52:	e7f2      	b.n	8001b3a <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b54:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001b56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b58:	9202      	str	r2, [sp, #8]
 8001b5a:	9401      	str	r4, [sp, #4]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4662      	mov	r2, ip
 8001b62:	4629      	mov	r1, r5
 8001b64:	f000 fd70 	bl	8002648 <xTaskCreateStatic>
 8001b68:	9005      	str	r0, [sp, #20]
 8001b6a:	e7e9      	b.n	8001b40 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b6c:	aa05      	add	r2, sp, #20
 8001b6e:	9201      	str	r2, [sp, #4]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	460b      	mov	r3, r1
 8001b74:	fa1f f28c 	uxth.w	r2, ip
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f000 fda0 	bl	80026be <xTaskCreate>
 8001b7e:	2801      	cmp	r0, #1
 8001b80:	d0de      	beq.n	8001b40 <osThreadNew+0x6c>
            hTask = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	9305      	str	r3, [sp, #20]
 8001b86:	e7db      	b.n	8001b40 <osThreadNew+0x6c>
        return (NULL);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e7da      	b.n	8001b42 <osThreadNew+0x6e>
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e7d8      	b.n	8001b42 <osThreadNew+0x6e>

08001b90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b90:	b508      	push	{r3, lr}
 8001b92:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b96:	b933      	cbnz	r3, 8001ba6 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001b98:	b908      	cbnz	r0, 8001b9e <osDelay+0xe>
    stat = osOK;
 8001b9a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8001b9c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8001b9e:	f000 ff37 	bl	8002a10 <vTaskDelay>
    stat = osOK;
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e7fa      	b.n	8001b9c <osDelay+0xc>
    stat = osErrorISR;
 8001ba6:	f06f 0005 	mvn.w	r0, #5
 8001baa:	e7f7      	b.n	8001b9c <osDelay+0xc>

08001bac <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <vApplicationGetIdleTaskMemory+0x10>)
 8001bae:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <vApplicationGetIdleTaskMemory+0x14>)
 8001bb2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001bb4:	2340      	movs	r3, #64	@ 0x40
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200004d4 	.word	0x200004d4
 8001bc0:	200003d4 	.word	0x200003d4

08001bc4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <vApplicationGetTimerTaskMemory+0x10>)
 8001bc6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <vApplicationGetTimerTaskMemory+0x14>)
 8001bca:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000328 	.word	0x20000328
 8001bd8:	20000128 	.word	0x20000128

08001bdc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bdc:	f100 0308 	add.w	r3, r0, #8
 8001be0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001be6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001be8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bf0:	4770      	bx	lr

08001bf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bf6:	4770      	bx	lr

08001bf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bf8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c00:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c02:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001c06:	6803      	ldr	r3, [r0, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	6003      	str	r3, [r0, #0]
}
 8001c0c:	4770      	bx	lr

08001c0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c0e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c10:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c12:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001c16:	d011      	beq.n	8001c3c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c18:	f100 0308 	add.w	r3, r0, #8
 8001c1c:	461c      	mov	r4, r3
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	42aa      	cmp	r2, r5
 8001c24:	d9fa      	bls.n	8001c1c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c26:	6863      	ldr	r3, [r4, #4]
 8001c28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c2a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c2c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c2e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	6003      	str	r3, [r0, #0]
}
 8001c38:	bc30      	pop	{r4, r5}
 8001c3a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c3c:	6904      	ldr	r4, [r0, #16]
 8001c3e:	e7f2      	b.n	8001c26 <vListInsert+0x18>

08001c40 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c40:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c42:	6841      	ldr	r1, [r0, #4]
 8001c44:	6882      	ldr	r2, [r0, #8]
 8001c46:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c48:	6841      	ldr	r1, [r0, #4]
 8001c4a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4282      	cmp	r2, r0
 8001c50:	d006      	beq.n	8001c60 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c52:	2200      	movs	r2, #0
 8001c54:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c5c:	6818      	ldr	r0, [r3, #0]
}
 8001c5e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c60:	6882      	ldr	r2, [r0, #8]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	e7f5      	b.n	8001c52 <uxListRemove+0x12>

08001c66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001c66:	b510      	push	{r4, lr}
 8001c68:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c6a:	f001 fb13 	bl	8003294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c6e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d004      	beq.n	8001c80 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8001c76:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001c78:	f001 fb2e 	bl	80032d8 <vPortExitCritical>

	return xReturn;
}
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001c80:	2401      	movs	r4, #1
 8001c82:	e7f9      	b.n	8001c78 <prvIsQueueFull+0x12>

08001c84 <prvIsQueueEmpty>:
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001c88:	f001 fb04 	bl	8003294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c8e:	b923      	cbnz	r3, 8001c9a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001c90:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001c92:	f001 fb21 	bl	80032d8 <vPortExitCritical>
}
 8001c96:	4620      	mov	r0, r4
 8001c98:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001c9a:	2400      	movs	r4, #0
 8001c9c:	e7f9      	b.n	8001c92 <prvIsQueueEmpty+0xe>

08001c9e <prvCopyDataToQueue>:
{
 8001c9e:	b570      	push	{r4, r5, r6, lr}
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ca4:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ca6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001ca8:	b95a      	cbnz	r2, 8001cc2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001caa:	6803      	ldr	r3, [r0, #0]
 8001cac:	b11b      	cbz	r3, 8001cb6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001cae:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001cb0:	3601      	adds	r6, #1
 8001cb2:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001cb6:	6880      	ldr	r0, [r0, #8]
 8001cb8:	f001 f814 	bl	8002ce4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60a3      	str	r3, [r4, #8]
 8001cc0:	e7f6      	b.n	8001cb0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8001cc2:	b96d      	cbnz	r5, 8001ce0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001cc4:	6840      	ldr	r0, [r0, #4]
 8001cc6:	f002 f83a 	bl	8003d3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001cca:	6863      	ldr	r3, [r4, #4]
 8001ccc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001cce:	4413      	add	r3, r2
 8001cd0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001cd2:	68a2      	ldr	r2, [r4, #8]
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d319      	bcc.n	8001d0c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001cdc:	4628      	mov	r0, r5
 8001cde:	e7e7      	b.n	8001cb0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001ce0:	68c0      	ldr	r0, [r0, #12]
 8001ce2:	f002 f82c 	bl	8003d3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001ce6:	68e3      	ldr	r3, [r4, #12]
 8001ce8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001cea:	4251      	negs	r1, r2
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001cf0:	6822      	ldr	r2, [r4, #0]
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d202      	bcs.n	8001cfc <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001cf6:	68a3      	ldr	r3, [r4, #8]
 8001cf8:	440b      	add	r3, r1
 8001cfa:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001cfc:	2d02      	cmp	r5, #2
 8001cfe:	d001      	beq.n	8001d04 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001d00:	2000      	movs	r0, #0
 8001d02:	e7d5      	b.n	8001cb0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d04:	b126      	cbz	r6, 8001d10 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8001d06:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001d08:	2000      	movs	r0, #0
 8001d0a:	e7d1      	b.n	8001cb0 <prvCopyDataToQueue+0x12>
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	e7cf      	b.n	8001cb0 <prvCopyDataToQueue+0x12>
 8001d10:	2000      	movs	r0, #0
 8001d12:	e7cd      	b.n	8001cb0 <prvCopyDataToQueue+0x12>

08001d14 <prvCopyDataFromQueue>:
{
 8001d14:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001d16:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001d18:	b16a      	cbz	r2, 8001d36 <prvCopyDataFromQueue+0x22>
{
 8001d1a:	b510      	push	{r4, lr}
 8001d1c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	4411      	add	r1, r2
 8001d22:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001d24:	689c      	ldr	r4, [r3, #8]
 8001d26:	42a1      	cmp	r1, r4
 8001d28:	d301      	bcc.n	8001d2e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	f002 f805 	bl	8003d3e <memcpy>
}
 8001d34:	bd10      	pop	{r4, pc}
 8001d36:	4770      	bx	lr

08001d38 <prvUnlockQueue>:
{
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001d3c:	f001 faaa 	bl	8003294 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001d40:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8001d44:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d46:	e001      	b.n	8001d4c <prvUnlockQueue+0x14>
			--cTxLock;
 8001d48:	3c01      	subs	r4, #1
 8001d4a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d4c:	2c00      	cmp	r4, #0
 8001d4e:	dd0a      	ble.n	8001d66 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d50:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001d52:	b143      	cbz	r3, 8001d66 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d54:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8001d58:	f000 ff1a 	bl	8002b90 <xTaskRemoveFromEventList>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d0f3      	beq.n	8001d48 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001d60:	f000 ffaa 	bl	8002cb8 <vTaskMissedYield>
 8001d64:	e7f0      	b.n	8001d48 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8001d66:	23ff      	movs	r3, #255	@ 0xff
 8001d68:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001d6c:	f001 fab4 	bl	80032d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001d70:	f001 fa90 	bl	8003294 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001d74:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8001d78:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d7a:	e001      	b.n	8001d80 <prvUnlockQueue+0x48>
				--cRxLock;
 8001d7c:	3c01      	subs	r4, #1
 8001d7e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	dd0a      	ble.n	8001d9a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d84:	692b      	ldr	r3, [r5, #16]
 8001d86:	b143      	cbz	r3, 8001d9a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d88:	f105 0010 	add.w	r0, r5, #16
 8001d8c:	f000 ff00 	bl	8002b90 <xTaskRemoveFromEventList>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d0f3      	beq.n	8001d7c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8001d94:	f000 ff90 	bl	8002cb8 <vTaskMissedYield>
 8001d98:	e7f0      	b.n	8001d7c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001d9a:	23ff      	movs	r3, #255	@ 0xff
 8001d9c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8001da0:	f001 fa9a 	bl	80032d8 <vPortExitCritical>
}
 8001da4:	bd38      	pop	{r3, r4, r5, pc}

08001da6 <xQueueGenericReset>:
{
 8001da6:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8001da8:	b1e0      	cbz	r0, 8001de4 <xQueueGenericReset+0x3e>
 8001daa:	460d      	mov	r5, r1
 8001dac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001dae:	f001 fa71 	bl	8003294 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001db6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001db8:	fb01 3002 	mla	r0, r1, r2, r3
 8001dbc:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dc2:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dc4:	3a01      	subs	r2, #1
 8001dc6:	fb02 3301 	mla	r3, r2, r1, r3
 8001dca:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001dd2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8001dd6:	b9fd      	cbnz	r5, 8001e18 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dd8:	6923      	ldr	r3, [r4, #16]
 8001dda:	b963      	cbnz	r3, 8001df6 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8001ddc:	f001 fa7c 	bl	80032d8 <vPortExitCritical>
}
 8001de0:	2001      	movs	r0, #1
 8001de2:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001df4:	e7fe      	b.n	8001df4 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001df6:	f104 0010 	add.w	r0, r4, #16
 8001dfa:	f000 fec9 	bl	8002b90 <xTaskRemoveFromEventList>
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d0ec      	beq.n	8001ddc <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8001e02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	e7e1      	b.n	8001ddc <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e18:	f104 0010 	add.w	r0, r4, #16
 8001e1c:	f7ff fede 	bl	8001bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e20:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001e24:	f7ff feda 	bl	8001bdc <vListInitialise>
 8001e28:	e7d8      	b.n	8001ddc <xQueueGenericReset+0x36>

08001e2a <prvInitialiseNewQueue>:
{
 8001e2a:	b538      	push	{r3, r4, r5, lr}
 8001e2c:	461d      	mov	r5, r3
 8001e2e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e30:	460b      	mov	r3, r1
 8001e32:	b949      	cbnz	r1, 8001e48 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e34:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001e36:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e38:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ffb2 	bl	8001da6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001e42:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e48:	6022      	str	r2, [r4, #0]
 8001e4a:	e7f4      	b.n	8001e36 <prvInitialiseNewQueue+0xc>

08001e4c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e4c:	b940      	cbnz	r0, 8001e60 <xQueueGenericCreateStatic+0x14>
 8001e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	e7fe      	b.n	8001e5e <xQueueGenericCreateStatic+0x12>
	{
 8001e60:	b510      	push	{r4, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	461c      	mov	r4, r3
 8001e66:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8001e68:	b153      	cbz	r3, 8001e80 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e6a:	b192      	cbz	r2, 8001e92 <xQueueGenericCreateStatic+0x46>
 8001e6c:	b989      	cbnz	r1, 8001e92 <xQueueGenericCreateStatic+0x46>
 8001e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e72:	f383 8811 	msr	BASEPRI, r3
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	e7fe      	b.n	8001e7e <xQueueGenericCreateStatic+0x32>
 8001e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001e90:	e7fe      	b.n	8001e90 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e92:	b16a      	cbz	r2, 8001eb0 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e94:	2350      	movs	r3, #80	@ 0x50
 8001e96:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e98:	9b03      	ldr	r3, [sp, #12]
 8001e9a:	2b50      	cmp	r3, #80	@ 0x50
 8001e9c:	d013      	beq.n	8001ec6 <xQueueGenericCreateStatic+0x7a>
 8001e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	e7fe      	b.n	8001eae <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	d0ef      	beq.n	8001e94 <xQueueGenericCreateStatic+0x48>
 8001eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	e7fe      	b.n	8001ec4 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ec6:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ece:	9400      	str	r4, [sp, #0]
 8001ed0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001ed4:	4660      	mov	r0, ip
 8001ed6:	f7ff ffa8 	bl	8001e2a <prvInitialiseNewQueue>
	}
 8001eda:	4620      	mov	r0, r4
 8001edc:	b004      	add	sp, #16
 8001ede:	bd10      	pop	{r4, pc}

08001ee0 <xQueueGenericSend>:
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001ee6:	b188      	cbz	r0, 8001f0c <xQueueGenericSend+0x2c>
 8001ee8:	460f      	mov	r7, r1
 8001eea:	461d      	mov	r5, r3
 8001eec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001eee:	b1b1      	cbz	r1, 8001f1e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ef0:	2d02      	cmp	r5, #2
 8001ef2:	d120      	bne.n	8001f36 <xQueueGenericSend+0x56>
 8001ef4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d01d      	beq.n	8001f36 <xQueueGenericSend+0x56>
 8001efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	e7fe      	b.n	8001f0a <xQueueGenericSend+0x2a>
 8001f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001f1c:	e7fe      	b.n	8001f1c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f1e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0e5      	beq.n	8001ef0 <xQueueGenericSend+0x10>
 8001f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
 8001f34:	e7fe      	b.n	8001f34 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f36:	f000 fec5 	bl	8002cc4 <xTaskGetSchedulerState>
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	b958      	cbnz	r0, 8001f56 <xQueueGenericSend+0x76>
 8001f3e:	9b01      	ldr	r3, [sp, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d048      	beq.n	8001fd6 <xQueueGenericSend+0xf6>
 8001f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	e7fe      	b.n	8001f54 <xQueueGenericSend+0x74>
 8001f56:	2600      	movs	r6, #0
 8001f58:	e03d      	b.n	8001fd6 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	4639      	mov	r1, r7
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff fe9d 	bl	8001c9e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f66:	b97b      	cbnz	r3, 8001f88 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8001f68:	b148      	cbz	r0, 8001f7e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8001f6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001f7e:	f001 f9ab 	bl	80032d8 <vPortExitCritical>
				return pdPASS;
 8001f82:	2001      	movs	r0, #1
}
 8001f84:	b005      	add	sp, #20
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f88:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001f8c:	f000 fe00 	bl	8002b90 <xTaskRemoveFromEventList>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d0f4      	beq.n	8001f7e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8001f94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	e7e9      	b.n	8001f7e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8001faa:	f001 f995 	bl	80032d8 <vPortExitCritical>
					return errQUEUE_FULL;
 8001fae:	2000      	movs	r0, #0
 8001fb0:	e7e8      	b.n	8001f84 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fb2:	a802      	add	r0, sp, #8
 8001fb4:	f000 fe32 	bl	8002c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fb8:	2601      	movs	r6, #1
 8001fba:	e019      	b.n	8001ff0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001fc2:	e021      	b.n	8002008 <xQueueGenericSend+0x128>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001fca:	e023      	b.n	8002014 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff feb3 	bl	8001d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fd2:	f000 fca1 	bl	8002918 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001fd6:	f001 f95d 	bl	8003294 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fda:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001fdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3bb      	bcc.n	8001f5a <xQueueGenericSend+0x7a>
 8001fe2:	2d02      	cmp	r5, #2
 8001fe4:	d0b9      	beq.n	8001f5a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fe6:	9b01      	ldr	r3, [sp, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0de      	beq.n	8001faa <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8001fec:	2e00      	cmp	r6, #0
 8001fee:	d0e0      	beq.n	8001fb2 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8001ff0:	f001 f972 	bl	80032d8 <vPortExitCritical>
		vTaskSuspendAll();
 8001ff4:	f000 fbee 	bl	80027d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ff8:	f001 f94c 	bl	8003294 <vPortEnterCritical>
 8001ffc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002000:	b252      	sxtb	r2, r2
 8002002:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8002006:	d0d9      	beq.n	8001fbc <xQueueGenericSend+0xdc>
 8002008:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800200c:	b252      	sxtb	r2, r2
 800200e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8002012:	d0d7      	beq.n	8001fc4 <xQueueGenericSend+0xe4>
 8002014:	f001 f960 	bl	80032d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002018:	a901      	add	r1, sp, #4
 800201a:	a802      	add	r0, sp, #8
 800201c:	f000 fe0a 	bl	8002c34 <xTaskCheckForTimeOut>
 8002020:	b9d8      	cbnz	r0, 800205a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff fe1f 	bl	8001c66 <prvIsQueueFull>
 8002028:	2800      	cmp	r0, #0
 800202a:	d0cf      	beq.n	8001fcc <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800202c:	9901      	ldr	r1, [sp, #4]
 800202e:	f104 0010 	add.w	r0, r4, #16
 8002032:	f000 fd79 	bl	8002b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff fe7e 	bl	8001d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800203c:	f000 fc6c 	bl	8002918 <xTaskResumeAll>
 8002040:	2800      	cmp	r0, #0
 8002042:	d1c8      	bne.n	8001fd6 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8002044:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800204c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	e7bd      	b.n	8001fd6 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff fe6c 	bl	8001d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002060:	f000 fc5a 	bl	8002918 <xTaskResumeAll>
			return errQUEUE_FULL;
 8002064:	2000      	movs	r0, #0
 8002066:	e78d      	b.n	8001f84 <xQueueGenericSend+0xa4>

08002068 <xQueueGenericSendFromISR>:
{
 8002068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800206c:	b190      	cbz	r0, 8002094 <xQueueGenericSendFromISR+0x2c>
 800206e:	460f      	mov	r7, r1
 8002070:	4616      	mov	r6, r2
 8002072:	461c      	mov	r4, r3
 8002074:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002076:	b1b1      	cbz	r1, 80020a6 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002078:	2c02      	cmp	r4, #2
 800207a:	d120      	bne.n	80020be <xQueueGenericSendFromISR+0x56>
 800207c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800207e:	2b01      	cmp	r3, #1
 8002080:	d01d      	beq.n	80020be <xQueueGenericSendFromISR+0x56>
 8002082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	e7fe      	b.n	8002092 <xQueueGenericSendFromISR+0x2a>
 8002094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80020a4:	e7fe      	b.n	80020a4 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020a6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0e5      	beq.n	8002078 <xQueueGenericSendFromISR+0x10>
 80020ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	e7fe      	b.n	80020bc <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020be:	f001 fa0f 	bl	80034e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020c2:	f3ef 8811 	mrs	r8, BASEPRI
 80020c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020d6:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80020d8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80020da:	429a      	cmp	r2, r3
 80020dc:	d306      	bcc.n	80020ec <xQueueGenericSendFromISR+0x84>
 80020de:	2c02      	cmp	r4, #2
 80020e0:	d004      	beq.n	80020ec <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80020e2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020e4:	f388 8811 	msr	BASEPRI, r8
}
 80020e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80020ec:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80020f0:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020f6:	4622      	mov	r2, r4
 80020f8:	4639      	mov	r1, r7
 80020fa:	4628      	mov	r0, r5
 80020fc:	f7ff fdcf 	bl	8001c9e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002100:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8002104:	d006      	beq.n	8002114 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002106:	f109 0301 	add.w	r3, r9, #1
 800210a:	b25b      	sxtb	r3, r3
 800210c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8002110:	2001      	movs	r0, #1
 8002112:	e7e7      	b.n	80020e4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002114:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002116:	b90b      	cbnz	r3, 800211c <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8002118:	2001      	movs	r0, #1
 800211a:	e7e3      	b.n	80020e4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800211c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002120:	f000 fd36 	bl	8002b90 <xTaskRemoveFromEventList>
 8002124:	b118      	cbz	r0, 800212e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002126:	b126      	cbz	r6, 8002132 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002128:	2001      	movs	r0, #1
 800212a:	6030      	str	r0, [r6, #0]
 800212c:	e7da      	b.n	80020e4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800212e:	2001      	movs	r0, #1
 8002130:	e7d8      	b.n	80020e4 <xQueueGenericSendFromISR+0x7c>
 8002132:	2001      	movs	r0, #1
 8002134:	e7d6      	b.n	80020e4 <xQueueGenericSendFromISR+0x7c>

08002136 <xQueueReceive>:
{
 8002136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002138:	b085      	sub	sp, #20
 800213a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800213c:	b190      	cbz	r0, 8002164 <xQueueReceive+0x2e>
 800213e:	460f      	mov	r7, r1
 8002140:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002142:	b1c1      	cbz	r1, 8002176 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002144:	f000 fdbe 	bl	8002cc4 <xTaskGetSchedulerState>
 8002148:	4606      	mov	r6, r0
 800214a:	bb00      	cbnz	r0, 800218e <xQueueReceive+0x58>
 800214c:	9b01      	ldr	r3, [sp, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d05e      	beq.n	8002210 <xQueueReceive+0xda>
	__asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	e7fe      	b.n	8002162 <xQueueReceive+0x2c>
 8002164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002174:	e7fe      	b.n	8002174 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002176:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0e3      	beq.n	8002144 <xQueueReceive+0xe>
 800217c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	e7fe      	b.n	800218c <xQueueReceive+0x56>
 800218e:	2600      	movs	r6, #0
 8002190:	e03e      	b.n	8002210 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002192:	4639      	mov	r1, r7
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff fdbd 	bl	8001d14 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800219a:	3d01      	subs	r5, #1
 800219c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	b923      	cbnz	r3, 80021ac <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80021a2:	f001 f899 	bl	80032d8 <vPortExitCritical>
				return pdPASS;
 80021a6:	2001      	movs	r0, #1
}
 80021a8:	b005      	add	sp, #20
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ac:	f104 0010 	add.w	r0, r4, #16
 80021b0:	f000 fcee 	bl	8002b90 <xTaskRemoveFromEventList>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d0f4      	beq.n	80021a2 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80021b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80021bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	e7e9      	b.n	80021a2 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80021ce:	f001 f883 	bl	80032d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80021d2:	2000      	movs	r0, #0
 80021d4:	e7e8      	b.n	80021a8 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021d6:	a802      	add	r0, sp, #8
 80021d8:	f000 fd20 	bl	8002c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021dc:	2601      	movs	r6, #1
 80021de:	e021      	b.n	8002224 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80021e0:	2300      	movs	r3, #0
 80021e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80021e6:	e029      	b.n	800223c <xQueueReceive+0x106>
 80021e8:	2300      	movs	r3, #0
 80021ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80021ee:	e02b      	b.n	8002248 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff fda1 	bl	8001d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021f6:	f000 fb8f 	bl	8002918 <xTaskResumeAll>
 80021fa:	e009      	b.n	8002210 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff fd9b 	bl	8001d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002202:	f000 fb89 	bl	8002918 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff fd3c 	bl	8001c84 <prvIsQueueEmpty>
 800220c:	2800      	cmp	r0, #0
 800220e:	d13f      	bne.n	8002290 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002210:	f001 f840 	bl	8003294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002214:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002216:	2d00      	cmp	r5, #0
 8002218:	d1bb      	bne.n	8002192 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0d6      	beq.n	80021ce <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8002220:	2e00      	cmp	r6, #0
 8002222:	d0d8      	beq.n	80021d6 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8002224:	f001 f858 	bl	80032d8 <vPortExitCritical>
		vTaskSuspendAll();
 8002228:	f000 fad4 	bl	80027d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800222c:	f001 f832 	bl	8003294 <vPortEnterCritical>
 8002230:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002234:	b25b      	sxtb	r3, r3
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800223a:	d0d1      	beq.n	80021e0 <xQueueReceive+0xaa>
 800223c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002240:	b25b      	sxtb	r3, r3
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002246:	d0cf      	beq.n	80021e8 <xQueueReceive+0xb2>
 8002248:	f001 f846 	bl	80032d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800224c:	a901      	add	r1, sp, #4
 800224e:	a802      	add	r0, sp, #8
 8002250:	f000 fcf0 	bl	8002c34 <xTaskCheckForTimeOut>
 8002254:	2800      	cmp	r0, #0
 8002256:	d1d1      	bne.n	80021fc <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff fd13 	bl	8001c84 <prvIsQueueEmpty>
 800225e:	2800      	cmp	r0, #0
 8002260:	d0c6      	beq.n	80021f0 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002262:	9901      	ldr	r1, [sp, #4]
 8002264:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002268:	f000 fc5e 	bl	8002b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fd63 	bl	8001d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002272:	f000 fb51 	bl	8002918 <xTaskResumeAll>
 8002276:	2800      	cmp	r0, #0
 8002278:	d1ca      	bne.n	8002210 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800227a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800227e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002282:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	e7bf      	b.n	8002210 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8002290:	2000      	movs	r0, #0
 8002292:	e789      	b.n	80021a8 <xQueueReceive+0x72>

08002294 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002294:	2300      	movs	r3, #0
 8002296:	2b07      	cmp	r3, #7
 8002298:	d80c      	bhi.n	80022b4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800229a:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <vQueueAddToRegistry+0x24>)
 800229c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80022a0:	b10a      	cbz	r2, 80022a6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022a2:	3301      	adds	r3, #1
 80022a4:	e7f7      	b.n	8002296 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022a6:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <vQueueAddToRegistry+0x24>)
 80022a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80022ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80022b0:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80022b2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000584 	.word	0x20000584

080022bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
 80022c2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80022c4:	f000 ffe6 	bl	8003294 <vPortEnterCritical>
 80022c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022d2:	d00d      	beq.n	80022f0 <vQueueWaitForMessageRestricted+0x34>
 80022d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022de:	d00b      	beq.n	80022f8 <vQueueWaitForMessageRestricted+0x3c>
 80022e0:	f000 fffa 	bl	80032d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80022e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022e6:	b15b      	cbz	r3, 8002300 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff fd25 	bl	8001d38 <prvUnlockQueue>
	}
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80022f0:	2300      	movs	r3, #0
 80022f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80022f6:	e7ed      	b.n	80022d4 <vQueueWaitForMessageRestricted+0x18>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80022fe:	e7ef      	b.n	80022e0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002300:	4632      	mov	r2, r6
 8002302:	4629      	mov	r1, r5
 8002304:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002308:	f000 fc26 	bl	8002b58 <vTaskPlaceOnEventListRestricted>
 800230c:	e7ec      	b.n	80022e8 <vQueueWaitForMessageRestricted+0x2c>
	...

08002310 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <prvResetNextTaskUnblockTime+0x24>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b923      	cbnz	r3, 8002322 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002318:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <prvResetNextTaskUnblockTime+0x28>)
 800231a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002322:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <prvResetNextTaskUnblockTime+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4b02      	ldr	r3, [pc, #8]	@ (8002338 <prvResetNextTaskUnblockTime+0x28>)
 800232e:	601a      	str	r2, [r3, #0]
	}
}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	2000063c 	.word	0x2000063c
 8002338:	200005d4 	.word	0x200005d4

0800233c <prvInitialiseNewTask>:
{
 800233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	4680      	mov	r8, r0
 8002342:	460d      	mov	r5, r1
 8002344:	4617      	mov	r7, r2
 8002346:	4699      	mov	r9, r3
 8002348:	9e08      	ldr	r6, [sp, #32]
 800234a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800234e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	21a5      	movs	r1, #165	@ 0xa5
 8002354:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002356:	f001 fc21 	bl	8003b9c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800235a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800235c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8002360:	3a01      	subs	r2, #1
 8002362:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002366:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800236a:	6427      	str	r7, [r4, #64]	@ 0x40
	if( pcName != NULL )
 800236c:	2d00      	cmp	r5, #0
 800236e:	d043      	beq.n	80023f8 <prvInitialiseNewTask+0xbc>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002370:	f04f 0c00 	mov.w	ip, #0
 8002374:	f1bc 0f0b 	cmp.w	ip, #11
 8002378:	d809      	bhi.n	800238e <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800237a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800237e:	eb04 020c 	add.w	r2, r4, ip
 8002382:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8002386:	b113      	cbz	r3, 800238e <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002388:	f10c 0c01 	add.w	ip, ip, #1
 800238c:	e7f2      	b.n	8002374 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800238e:	2300      	movs	r3, #0
 8002390:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002394:	2e37      	cmp	r6, #55	@ 0x37
 8002396:	d900      	bls.n	800239a <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002398:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800239a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800239c:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800239e:	2500      	movs	r5, #0
 80023a0:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023a2:	1d20      	adds	r0, r4, #4
 80023a4:	f7ff fc25 	bl	8001bf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023a8:	f104 0018 	add.w	r0, r4, #24
 80023ac:	f7ff fc21 	bl	8001bf2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b2:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 80023b6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023b8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80023ba:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 80023bc:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023c0:	f884 50a8 	strb.w	r5, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80023c4:	224c      	movs	r2, #76	@ 0x4c
 80023c6:	4629      	mov	r1, r5
 80023c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023cc:	f001 fbe6 	bl	8003b9c <memset>
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <prvInitialiseNewTask+0xc4>)
 80023d2:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80023d4:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023d8:	6622      	str	r2, [r4, #96]	@ 0x60
 80023da:	33d0      	adds	r3, #208	@ 0xd0
 80023dc:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023de:	464a      	mov	r2, r9
 80023e0:	4641      	mov	r1, r8
 80023e2:	4638      	mov	r0, r7
 80023e4:	f000 ff2e 	bl	8003244 <pxPortInitialiseStack>
 80023e8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80023ea:	f1ba 0f00 	cmp.w	sl, #0
 80023ee:	d001      	beq.n	80023f4 <prvInitialiseNewTask+0xb8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023f0:	f8ca 4000 	str.w	r4, [sl]
}
 80023f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80023fe:	e7c9      	b.n	8002394 <prvInitialiseNewTask+0x58>
 8002400:	20008a08 	.word	0x20008a08

08002404 <prvInitialiseTaskLists>:
{
 8002404:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002406:	2400      	movs	r4, #0
 8002408:	e007      	b.n	800241a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800240a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800240e:	0093      	lsls	r3, r2, #2
 8002410:	480e      	ldr	r0, [pc, #56]	@ (800244c <prvInitialiseTaskLists+0x48>)
 8002412:	4418      	add	r0, r3
 8002414:	f7ff fbe2 	bl	8001bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002418:	3401      	adds	r4, #1
 800241a:	2c37      	cmp	r4, #55	@ 0x37
 800241c:	d9f5      	bls.n	800240a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800241e:	4d0c      	ldr	r5, [pc, #48]	@ (8002450 <prvInitialiseTaskLists+0x4c>)
 8002420:	4628      	mov	r0, r5
 8002422:	f7ff fbdb 	bl	8001bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002426:	4c0b      	ldr	r4, [pc, #44]	@ (8002454 <prvInitialiseTaskLists+0x50>)
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff fbd7 	bl	8001bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800242e:	480a      	ldr	r0, [pc, #40]	@ (8002458 <prvInitialiseTaskLists+0x54>)
 8002430:	f7ff fbd4 	bl	8001bdc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002434:	4809      	ldr	r0, [pc, #36]	@ (800245c <prvInitialiseTaskLists+0x58>)
 8002436:	f7ff fbd1 	bl	8001bdc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800243a:	4809      	ldr	r0, [pc, #36]	@ (8002460 <prvInitialiseTaskLists+0x5c>)
 800243c:	f7ff fbce 	bl	8001bdc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <prvInitialiseTaskLists+0x60>)
 8002442:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <prvInitialiseTaskLists+0x64>)
 8002446:	601c      	str	r4, [r3, #0]
}
 8002448:	bd38      	pop	{r3, r4, r5, pc}
 800244a:	bf00      	nop
 800244c:	20000668 	.word	0x20000668
 8002450:	20000654 	.word	0x20000654
 8002454:	20000640 	.word	0x20000640
 8002458:	20000624 	.word	0x20000624
 800245c:	20000610 	.word	0x20000610
 8002460:	200005f8 	.word	0x200005f8
 8002464:	2000063c 	.word	0x2000063c
 8002468:	20000638 	.word	0x20000638

0800246c <prvAddNewTaskToReadyList>:
{
 800246c:	b510      	push	{r4, lr}
 800246e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002470:	f000 ff10 	bl	8003294 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002474:	4a22      	ldr	r2, [pc, #136]	@ (8002500 <prvAddNewTaskToReadyList+0x94>)
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800247c:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <prvAddNewTaskToReadyList+0x98>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b15b      	cbz	r3, 800249a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <prvAddNewTaskToReadyList+0x9c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b96b      	cbnz	r3, 80024a4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002488:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <prvAddNewTaskToReadyList+0x98>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002490:	429a      	cmp	r2, r3
 8002492:	d807      	bhi.n	80024a4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <prvAddNewTaskToReadyList+0x98>)
 8002496:	601c      	str	r4, [r3, #0]
 8002498:	e004      	b.n	80024a4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <prvAddNewTaskToReadyList+0x98>)
 800249c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d029      	beq.n	80024f8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80024a4:	4a19      	ldr	r2, [pc, #100]	@ (800250c <prvAddNewTaskToReadyList+0xa0>)
 80024a6:	6813      	ldr	r3, [r2, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024ac:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80024ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80024b0:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <prvAddNewTaskToReadyList+0xa4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4298      	cmp	r0, r3
 80024b6:	d901      	bls.n	80024bc <prvAddNewTaskToReadyList+0x50>
 80024b8:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <prvAddNewTaskToReadyList+0xa4>)
 80024ba:	6018      	str	r0, [r3, #0]
 80024bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024c0:	1d21      	adds	r1, r4, #4
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <prvAddNewTaskToReadyList+0xa8>)
 80024c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024c8:	f7ff fb96 	bl	8001bf8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80024cc:	f000 ff04 	bl	80032d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80024d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <prvAddNewTaskToReadyList+0x9c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b17b      	cbz	r3, 80024f6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <prvAddNewTaskToReadyList+0x98>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80024de:	429a      	cmp	r2, r3
 80024e0:	d209      	bcs.n	80024f6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80024e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80024e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	f3bf 8f6f 	isb	sy
}
 80024f6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80024f8:	f7ff ff84 	bl	8002404 <prvInitialiseTaskLists>
 80024fc:	e7d2      	b.n	80024a4 <prvAddNewTaskToReadyList+0x38>
 80024fe:	bf00      	nop
 8002500:	200005f4 	.word	0x200005f4
 8002504:	20000ac8 	.word	0x20000ac8
 8002508:	200005e8 	.word	0x200005e8
 800250c:	200005d8 	.word	0x200005d8
 8002510:	200005ec 	.word	0x200005ec
 8002514:	20000668 	.word	0x20000668

08002518 <prvDeleteTCB>:
	{
 8002518:	b510      	push	{r4, lr}
 800251a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800251c:	3058      	adds	r0, #88	@ 0x58
 800251e:	f001 fb55 	bl	8003bcc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002522:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8002526:	b163      	cbz	r3, 8002542 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002528:	2b01      	cmp	r3, #1
 800252a:	d011      	beq.n	8002550 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800252c:	2b02      	cmp	r3, #2
 800252e:	d00e      	beq.n	800254e <prvDeleteTCB+0x36>
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	e7fe      	b.n	8002540 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8002542:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002544:	f001 f8e2 	bl	800370c <vPortFree>
				vPortFree( pxTCB );
 8002548:	4620      	mov	r0, r4
 800254a:	f001 f8df 	bl	800370c <vPortFree>
	}
 800254e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8002550:	4620      	mov	r0, r4
 8002552:	f001 f8db 	bl	800370c <vPortFree>
 8002556:	e7fa      	b.n	800254e <prvDeleteTCB+0x36>

08002558 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <prvCheckTasksWaitingTermination+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b1d3      	cbz	r3, 8002594 <prvCheckTasksWaitingTermination+0x3c>
{
 800255e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8002560:	f000 fe98 	bl	8003294 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002564:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <prvCheckTasksWaitingTermination+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800256a:	1d20      	adds	r0, r4, #4
 800256c:	f7ff fb68 	bl	8001c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002570:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <prvCheckTasksWaitingTermination+0x48>)
 8002572:	6813      	ldr	r3, [r2, #0]
 8002574:	3b01      	subs	r3, #1
 8002576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002578:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <prvCheckTasksWaitingTermination+0x40>)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8002580:	f000 feaa 	bl	80032d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff ffc7 	bl	8002518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800258a:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <prvCheckTasksWaitingTermination+0x40>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e6      	bne.n	8002560 <prvCheckTasksWaitingTermination+0x8>
}
 8002592:	bd10      	pop	{r4, pc}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000060c 	.word	0x2000060c
 800259c:	20000610 	.word	0x20000610
 80025a0:	200005f4 	.word	0x200005f4

080025a4 <prvIdleTask>:
{
 80025a4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80025a6:	f7ff ffd7 	bl	8002558 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <prvIdleTask+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d9f9      	bls.n	80025a6 <prvIdleTask+0x2>
				taskYIELD();
 80025b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025be:	f3bf 8f4f 	dsb	sy
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	e7ee      	b.n	80025a6 <prvIdleTask+0x2>
 80025c8:	20000668 	.word	0x20000668

080025cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4604      	mov	r4, r0
 80025d0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025d2:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <prvAddCurrentTaskToDelayedList+0x64>)
 80025d4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <prvAddCurrentTaskToDelayedList+0x68>)
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	3004      	adds	r0, #4
 80025dc:	f7ff fb30 	bl	8001c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025e0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80025e4:	d00d      	beq.n	8002602 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80025e6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <prvAddCurrentTaskToDelayedList+0x68>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80025ee:	42a6      	cmp	r6, r4
 80025f0:	d910      	bls.n	8002614 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025f2:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <prvAddCurrentTaskToDelayedList+0x6c>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <prvAddCurrentTaskToDelayedList+0x68>)
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	3104      	adds	r1, #4
 80025fc:	f7ff fb07 	bl	8001c0e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002600:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002602:	2d00      	cmp	r5, #0
 8002604:	d0ef      	beq.n	80025e6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <prvAddCurrentTaskToDelayedList+0x68>)
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	3104      	adds	r1, #4
 800260c:	480b      	ldr	r0, [pc, #44]	@ (800263c <prvAddCurrentTaskToDelayedList+0x70>)
 800260e:	f7ff faf3 	bl	8001bf8 <vListInsertEnd>
 8002612:	e7f5      	b.n	8002600 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002614:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <prvAddCurrentTaskToDelayedList+0x74>)
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <prvAddCurrentTaskToDelayedList+0x68>)
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	3104      	adds	r1, #4
 800261e:	f7ff faf6 	bl	8001c0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <prvAddCurrentTaskToDelayedList+0x78>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	42a3      	cmp	r3, r4
 8002628:	d9ea      	bls.n	8002600 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <prvAddCurrentTaskToDelayedList+0x78>)
 800262c:	601c      	str	r4, [r3, #0]
}
 800262e:	e7e7      	b.n	8002600 <prvAddCurrentTaskToDelayedList+0x34>
 8002630:	200005f0 	.word	0x200005f0
 8002634:	20000ac8 	.word	0x20000ac8
 8002638:	20000638 	.word	0x20000638
 800263c:	200005f8 	.word	0x200005f8
 8002640:	2000063c 	.word	0x2000063c
 8002644:	200005d4 	.word	0x200005d4

08002648 <xTaskCreateStatic>:
	{
 8002648:	b530      	push	{r4, r5, lr}
 800264a:	b087      	sub	sp, #28
 800264c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800264e:	b17c      	cbz	r4, 8002670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002650:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8002652:	b1b5      	cbz	r5, 8002682 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002654:	25ac      	movs	r5, #172	@ 0xac
 8002656:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002658:	9d04      	ldr	r5, [sp, #16]
 800265a:	2dac      	cmp	r5, #172	@ 0xac
 800265c:	d01a      	beq.n	8002694 <xTaskCreateStatic+0x4c>
 800265e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	e7fe      	b.n	800266e <xTaskCreateStatic+0x26>
 8002670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002680:	e7fe      	b.n	8002680 <xTaskCreateStatic+0x38>
 8002682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002692:	e7fe      	b.n	8002692 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002694:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002696:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8002698:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800269a:	2402      	movs	r4, #2
 800269c:	f885 40a9 	strb.w	r4, [r5, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026a0:	2400      	movs	r4, #0
 80026a2:	9403      	str	r4, [sp, #12]
 80026a4:	9502      	str	r5, [sp, #8]
 80026a6:	ac05      	add	r4, sp, #20
 80026a8:	9401      	str	r4, [sp, #4]
 80026aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80026ac:	9400      	str	r4, [sp, #0]
 80026ae:	f7ff fe45 	bl	800233c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026b2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80026b4:	f7ff feda 	bl	800246c <prvAddNewTaskToReadyList>
	}
 80026b8:	9805      	ldr	r0, [sp, #20]
 80026ba:	b007      	add	sp, #28
 80026bc:	bd30      	pop	{r4, r5, pc}

080026be <xTaskCreate>:
	{
 80026be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c2:	b085      	sub	sp, #20
 80026c4:	4607      	mov	r7, r0
 80026c6:	4688      	mov	r8, r1
 80026c8:	4614      	mov	r4, r2
 80026ca:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026cc:	0090      	lsls	r0, r2, #2
 80026ce:	f000 ff9b 	bl	8003608 <pvPortMalloc>
			if( pxStack != NULL )
 80026d2:	b308      	cbz	r0, 8002718 <xTaskCreate+0x5a>
 80026d4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026d6:	20ac      	movs	r0, #172	@ 0xac
 80026d8:	f000 ff96 	bl	8003608 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80026dc:	4605      	mov	r5, r0
 80026de:	b1a8      	cbz	r0, 800270c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80026e0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	9002      	str	r0, [sp, #8]
 80026ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	4633      	mov	r3, r6
 80026f8:	4622      	mov	r2, r4
 80026fa:	4641      	mov	r1, r8
 80026fc:	4638      	mov	r0, r7
 80026fe:	f7ff fe1d 	bl	800233c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002702:	4628      	mov	r0, r5
 8002704:	f7ff feb2 	bl	800246c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002708:	2001      	movs	r0, #1
 800270a:	e007      	b.n	800271c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800270c:	4648      	mov	r0, r9
 800270e:	f000 fffd 	bl	800370c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002716:	e001      	b.n	800271c <xTaskCreate+0x5e>
 8002718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 800271c:	b005      	add	sp, #20
 800271e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002724 <vTaskStartScheduler>:
{
 8002724:	b510      	push	{r4, lr}
 8002726:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002728:	2400      	movs	r4, #0
 800272a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800272c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800272e:	aa07      	add	r2, sp, #28
 8002730:	a906      	add	r1, sp, #24
 8002732:	a805      	add	r0, sp, #20
 8002734:	f7ff fa3a 	bl	8001bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002738:	9b05      	ldr	r3, [sp, #20]
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	9b06      	ldr	r3, [sp, #24]
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	9400      	str	r4, [sp, #0]
 8002742:	4623      	mov	r3, r4
 8002744:	9a07      	ldr	r2, [sp, #28]
 8002746:	491b      	ldr	r1, [pc, #108]	@ (80027b4 <vTaskStartScheduler+0x90>)
 8002748:	481b      	ldr	r0, [pc, #108]	@ (80027b8 <vTaskStartScheduler+0x94>)
 800274a:	f7ff ff7d 	bl	8002648 <xTaskCreateStatic>
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <vTaskStartScheduler+0x98>)
 8002750:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8002752:	b1f8      	cbz	r0, 8002794 <vTaskStartScheduler+0x70>
			xReturn = xTimerCreateTimerTask();
 8002754:	f000 fb7a 	bl	8002e4c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002758:	2801      	cmp	r0, #1
 800275a:	d11c      	bne.n	8002796 <vTaskStartScheduler+0x72>
 800275c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800276c:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <vTaskStartScheduler+0x9c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3358      	adds	r3, #88	@ 0x58
 8002772:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <vTaskStartScheduler+0xa0>)
 8002774:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <vTaskStartScheduler+0xa4>)
 8002778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800277c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <vTaskStartScheduler+0xa8>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002784:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <vTaskStartScheduler+0xac>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800278a:	f7fd fee9 	bl	8000560 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800278e:	f000 fe1b 	bl	80033c8 <xPortStartScheduler>
 8002792:	e003      	b.n	800279c <vTaskStartScheduler+0x78>
			xReturn = pdFAIL;
 8002794:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002796:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800279a:	d001      	beq.n	80027a0 <vTaskStartScheduler+0x7c>
}
 800279c:	b008      	add	sp, #32
 800279e:	bd10      	pop	{r4, pc}
 80027a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027b0:	e7fe      	b.n	80027b0 <vTaskStartScheduler+0x8c>
 80027b2:	bf00      	nop
 80027b4:	0800481c 	.word	0x0800481c
 80027b8:	080025a5 	.word	0x080025a5
 80027bc:	200005d0 	.word	0x200005d0
 80027c0:	20000ac8 	.word	0x20000ac8
 80027c4:	2000001c 	.word	0x2000001c
 80027c8:	200005d4 	.word	0x200005d4
 80027cc:	200005e8 	.word	0x200005e8
 80027d0:	200005f0 	.word	0x200005f0

080027d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80027d4:	4a02      	ldr	r2, [pc, #8]	@ (80027e0 <vTaskSuspendAll+0xc>)
 80027d6:	6813      	ldr	r3, [r2, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	200005cc 	.word	0x200005cc

080027e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80027e4:	4b01      	ldr	r3, [pc, #4]	@ (80027ec <xTaskGetTickCount+0x8>)
 80027e6:	6818      	ldr	r0, [r3, #0]
}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	200005f0 	.word	0x200005f0

080027f0 <xTaskGetTickCountFromISR>:
{
 80027f0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027f2:	f000 fe75 	bl	80034e0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80027f6:	4b01      	ldr	r3, [pc, #4]	@ (80027fc <xTaskGetTickCountFromISR+0xc>)
 80027f8:	6818      	ldr	r0, [r3, #0]
}
 80027fa:	bd08      	pop	{r3, pc}
 80027fc:	200005f0 	.word	0x200005f0

08002800 <xTaskIncrementTick>:
{
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002802:	4b3a      	ldr	r3, [pc, #232]	@ (80028ec <xTaskIncrementTick+0xec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d169      	bne.n	80028de <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800280a:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <xTaskIncrementTick+0xf0>)
 800280c:	681d      	ldr	r5, [r3, #0]
 800280e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002810:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002812:	b9c5      	cbnz	r5, 8002846 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002814:	4b37      	ldr	r3, [pc, #220]	@ (80028f4 <xTaskIncrementTick+0xf4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b143      	cbz	r3, 800282e <xTaskIncrementTick+0x2e>
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	e7fe      	b.n	800282c <xTaskIncrementTick+0x2c>
 800282e:	4a31      	ldr	r2, [pc, #196]	@ (80028f4 <xTaskIncrementTick+0xf4>)
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <xTaskIncrementTick+0xf8>)
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	6010      	str	r0, [r2, #0]
 8002838:	6019      	str	r1, [r3, #0]
 800283a:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <xTaskIncrementTick+0xfc>)
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	f7ff fd65 	bl	8002310 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002846:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <xTaskIncrementTick+0x100>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	42ab      	cmp	r3, r5
 800284c:	d93d      	bls.n	80028ca <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800284e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002850:	4b2c      	ldr	r3, [pc, #176]	@ (8002904 <xTaskIncrementTick+0x104>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <xTaskIncrementTick+0x108>)
 800285e:	589b      	ldr	r3, [r3, r2]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d900      	bls.n	8002866 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8002864:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8002866:	4b29      	ldr	r3, [pc, #164]	@ (800290c <xTaskIncrementTick+0x10c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03c      	beq.n	80028e8 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800286e:	2701      	movs	r7, #1
	return xSwitchRequired;
 8002870:	e03a      	b.n	80028e8 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8002872:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <xTaskIncrementTick+0xf4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b343      	cbz	r3, 80028ce <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800287c:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <xTaskIncrementTick+0xf4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002884:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8002886:	429d      	cmp	r5, r3
 8002888:	d326      	bcc.n	80028d8 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800288a:	1d26      	adds	r6, r4, #4
 800288c:	4630      	mov	r0, r6
 800288e:	f7ff f9d7 	bl	8001c40 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002892:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002894:	b11b      	cbz	r3, 800289e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002896:	f104 0018 	add.w	r0, r4, #24
 800289a:	f7ff f9d1 	bl	8001c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800289e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80028a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <xTaskIncrementTick+0x110>)
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <xTaskIncrementTick+0xac>
 80028a8:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <xTaskIncrementTick+0x110>)
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028b0:	009a      	lsls	r2, r3, #2
 80028b2:	4631      	mov	r1, r6
 80028b4:	4814      	ldr	r0, [pc, #80]	@ (8002908 <xTaskIncrementTick+0x108>)
 80028b6:	4410      	add	r0, r2
 80028b8:	f7ff f99e 	bl	8001bf8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <xTaskIncrementTick+0x104>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d2d4      	bcs.n	8002872 <xTaskIncrementTick+0x72>
 80028c8:	e7d4      	b.n	8002874 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80028ca:	2700      	movs	r7, #0
 80028cc:	e7d2      	b.n	8002874 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <xTaskIncrementTick+0x100>)
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028d4:	601a      	str	r2, [r3, #0]
					break;
 80028d6:	e7bb      	b.n	8002850 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80028d8:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <xTaskIncrementTick+0x100>)
 80028da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028dc:	e7b8      	b.n	8002850 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80028de:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <xTaskIncrementTick+0x114>)
 80028e0:	6813      	ldr	r3, [r2, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80028e6:	2700      	movs	r7, #0
}
 80028e8:	4638      	mov	r0, r7
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ec:	200005cc 	.word	0x200005cc
 80028f0:	200005f0 	.word	0x200005f0
 80028f4:	2000063c 	.word	0x2000063c
 80028f8:	20000638 	.word	0x20000638
 80028fc:	200005dc 	.word	0x200005dc
 8002900:	200005d4 	.word	0x200005d4
 8002904:	20000ac8 	.word	0x20000ac8
 8002908:	20000668 	.word	0x20000668
 800290c:	200005e0 	.word	0x200005e0
 8002910:	200005ec 	.word	0x200005ec
 8002914:	200005e4 	.word	0x200005e4

08002918 <xTaskResumeAll>:
{
 8002918:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800291a:	4b35      	ldr	r3, [pc, #212]	@ (80029f0 <xTaskResumeAll+0xd8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b943      	cbnz	r3, 8002932 <xTaskResumeAll+0x1a>
 8002920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	e7fe      	b.n	8002930 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8002932:	f000 fcaf 	bl	8003294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002936:	4b2e      	ldr	r3, [pc, #184]	@ (80029f0 <xTaskResumeAll+0xd8>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	3a01      	subs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d14f      	bne.n	80029e4 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <xTaskResumeAll+0xdc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	b90b      	cbnz	r3, 800294e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800294a:	2400      	movs	r4, #0
 800294c:	e04b      	b.n	80029e6 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800294e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002950:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <xTaskResumeAll+0xe0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b31b      	cbz	r3, 800299e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002956:	4b28      	ldr	r3, [pc, #160]	@ (80029f8 <xTaskResumeAll+0xe0>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800295c:	f104 0018 	add.w	r0, r4, #24
 8002960:	f7ff f96e 	bl	8001c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002964:	1d25      	adds	r5, r4, #4
 8002966:	4628      	mov	r0, r5
 8002968:	f7ff f96a 	bl	8001c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800296c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <xTaskResumeAll+0xe4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4298      	cmp	r0, r3
 8002974:	d901      	bls.n	800297a <xTaskResumeAll+0x62>
 8002976:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <xTaskResumeAll+0xe4>)
 8002978:	6018      	str	r0, [r3, #0]
 800297a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800297e:	4629      	mov	r1, r5
 8002980:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <xTaskResumeAll+0xe8>)
 8002982:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002986:	f7ff f937 	bl	8001bf8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800298a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <xTaskResumeAll+0xec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002992:	429a      	cmp	r2, r3
 8002994:	d3dc      	bcc.n	8002950 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8002996:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <xTaskResumeAll+0xf0>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e7d8      	b.n	8002950 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800299e:	b10c      	cbz	r4, 80029a4 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80029a0:	f7ff fcb6 	bl	8002310 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029a4:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <xTaskResumeAll+0xf4>)
 80029a6:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80029a8:	b984      	cbnz	r4, 80029cc <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80029aa:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <xTaskResumeAll+0xf0>)
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	b1d4      	cbz	r4, 80029e6 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80029b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80029b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80029c4:	2401      	movs	r4, #1
 80029c6:	e00e      	b.n	80029e6 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029c8:	3c01      	subs	r4, #1
 80029ca:	d007      	beq.n	80029dc <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80029cc:	f7ff ff18 	bl	8002800 <xTaskIncrementTick>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d0f9      	beq.n	80029c8 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <xTaskResumeAll+0xf0>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e7f5      	b.n	80029c8 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <xTaskResumeAll+0xf4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e7e2      	b.n	80029aa <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80029e4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80029e6:	f000 fc77 	bl	80032d8 <vPortExitCritical>
}
 80029ea:	4620      	mov	r0, r4
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	200005cc 	.word	0x200005cc
 80029f4:	200005f4 	.word	0x200005f4
 80029f8:	20000624 	.word	0x20000624
 80029fc:	200005ec 	.word	0x200005ec
 8002a00:	20000668 	.word	0x20000668
 8002a04:	20000ac8 	.word	0x20000ac8
 8002a08:	200005e0 	.word	0x200005e0
 8002a0c:	200005e4 	.word	0x200005e4

08002a10 <vTaskDelay>:
	{
 8002a10:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a12:	b1a8      	cbz	r0, 8002a40 <vTaskDelay+0x30>
 8002a14:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <vTaskDelay+0x48>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	b143      	cbz	r3, 8002a2e <vTaskDelay+0x1e>
 8002a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	e7fe      	b.n	8002a2c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002a2e:	f7ff fed1 	bl	80027d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a32:	2100      	movs	r1, #0
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff fdc9 	bl	80025cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002a3a:	f7ff ff6d 	bl	8002918 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002a3e:	b948      	cbnz	r0, 8002a54 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8002a40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
	}
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	bf00      	nop
 8002a58:	200005cc 	.word	0x200005cc

08002a5c <vTaskSwitchContext>:
{
 8002a5c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <vTaskSwitchContext+0xac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b11b      	cbz	r3, 8002a6c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002a64:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <vTaskSwitchContext+0xb0>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 8002a6c:	4b27      	ldr	r3, [pc, #156]	@ (8002b0c <vTaskSwitchContext+0xb0>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002a72:	f7fd fd76 	bl	8000562 <getRunTimeCounterValue>
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <vTaskSwitchContext+0xb4>)
 8002a78:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8002a7a:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <vTaskSwitchContext+0xb8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4298      	cmp	r0, r3
 8002a80:	d905      	bls.n	8002a8e <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8002a82:	4a25      	ldr	r2, [pc, #148]	@ (8002b18 <vTaskSwitchContext+0xbc>)
 8002a84:	6811      	ldr	r1, [r2, #0]
 8002a86:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8002a88:	1ac3      	subs	r3, r0, r3
 8002a8a:	441a      	add	r2, r3
 8002a8c:	654a      	str	r2, [r1, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8002a8e:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <vTaskSwitchContext+0xb8>)
 8002a90:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <vTaskSwitchContext+0xc0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4920      	ldr	r1, [pc, #128]	@ (8002b20 <vTaskSwitchContext+0xc4>)
 8002a9e:	588a      	ldr	r2, [r1, r2]
 8002aa0:	b95a      	cbnz	r2, 8002aba <vTaskSwitchContext+0x5e>
 8002aa2:	b10b      	cbz	r3, 8002aa8 <vTaskSwitchContext+0x4c>
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	e7f6      	b.n	8002a96 <vTaskSwitchContext+0x3a>
 8002aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	e7fe      	b.n	8002ab8 <vTaskSwitchContext+0x5c>
 8002aba:	4608      	mov	r0, r1
 8002abc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002ac0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002ac4:	6851      	ldr	r1, [r2, #4]
 8002ac6:	6849      	ldr	r1, [r1, #4]
 8002ac8:	6051      	str	r1, [r2, #4]
 8002aca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	4402      	add	r2, r0
 8002ad4:	4291      	cmp	r1, r2
 8002ad6:	d00f      	beq.n	8002af8 <vTaskSwitchContext+0x9c>
 8002ad8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002adc:	4a10      	ldr	r2, [pc, #64]	@ (8002b20 <vTaskSwitchContext+0xc4>)
 8002ade:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002ae2:	6852      	ldr	r2, [r2, #4]
 8002ae4:	68d1      	ldr	r1, [r2, #12]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <vTaskSwitchContext+0xbc>)
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <vTaskSwitchContext+0xc0>)
 8002aec:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	3358      	adds	r3, #88	@ 0x58
 8002af2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <vTaskSwitchContext+0xc8>)
 8002af4:	6013      	str	r3, [r2, #0]
}
 8002af6:	e7b8      	b.n	8002a6a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af8:	6848      	ldr	r0, [r1, #4]
 8002afa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <vTaskSwitchContext+0xc4>)
 8002b00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002b04:	6050      	str	r0, [r2, #4]
 8002b06:	e7e7      	b.n	8002ad8 <vTaskSwitchContext+0x7c>
 8002b08:	200005cc 	.word	0x200005cc
 8002b0c:	200005e0 	.word	0x200005e0
 8002b10:	200005c4 	.word	0x200005c4
 8002b14:	200005c8 	.word	0x200005c8
 8002b18:	20000ac8 	.word	0x20000ac8
 8002b1c:	200005ec 	.word	0x200005ec
 8002b20:	20000668 	.word	0x20000668
 8002b24:	2000001c 	.word	0x2000001c

08002b28 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002b28:	b158      	cbz	r0, 8002b42 <vTaskPlaceOnEventList+0x1a>
{
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b2e:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <vTaskPlaceOnEventList+0x2c>)
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	3118      	adds	r1, #24
 8002b34:	f7ff f86b 	bl	8001c0e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff fd46 	bl	80025cc <prvAddCurrentTaskToDelayedList>
}
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8002b52:	e7fe      	b.n	8002b52 <vTaskPlaceOnEventList+0x2a>
 8002b54:	20000ac8 	.word	0x20000ac8

08002b58 <vTaskPlaceOnEventListRestricted>:
	{
 8002b58:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8002b5a:	b170      	cbz	r0, 8002b7a <vTaskPlaceOnEventListRestricted+0x22>
 8002b5c:	460d      	mov	r5, r1
 8002b5e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b60:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <vTaskPlaceOnEventListRestricted+0x34>)
 8002b62:	6811      	ldr	r1, [r2, #0]
 8002b64:	3118      	adds	r1, #24
 8002b66:	f7ff f847 	bl	8001bf8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8002b6a:	b10c      	cbz	r4, 8002b70 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8002b6c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b70:	4621      	mov	r1, r4
 8002b72:	4628      	mov	r0, r5
 8002b74:	f7ff fd2a 	bl	80025cc <prvAddCurrentTaskToDelayedList>
	}
 8002b78:	bd38      	pop	{r3, r4, r5, pc}
 8002b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8002b8a:	e7fe      	b.n	8002b8a <vTaskPlaceOnEventListRestricted+0x32>
 8002b8c:	20000ac8 	.word	0x20000ac8

08002b90 <xTaskRemoveFromEventList>:
{
 8002b90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b92:	68c3      	ldr	r3, [r0, #12]
 8002b94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002b96:	b324      	cbz	r4, 8002be2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b98:	f104 0518 	add.w	r5, r4, #24
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f7ff f84f 	bl	8001c40 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba2:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <xTaskRemoveFromEventList+0x74>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	bb2b      	cbnz	r3, 8002bf4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ba8:	1d25      	adds	r5, r4, #4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f7ff f848 	bl	8001c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002bb0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <xTaskRemoveFromEventList+0x78>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4298      	cmp	r0, r3
 8002bb8:	d901      	bls.n	8002bbe <xTaskRemoveFromEventList+0x2e>
 8002bba:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <xTaskRemoveFromEventList+0x78>)
 8002bbc:	6018      	str	r0, [r3, #0]
 8002bbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <xTaskRemoveFromEventList+0x7c>)
 8002bc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bca:	f7ff f815 	bl	8001bf8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002bce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <xTaskRemoveFromEventList+0x80>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d911      	bls.n	8002bfe <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8002bda:	2001      	movs	r0, #1
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <xTaskRemoveFromEventList+0x84>)
 8002bde:	6018      	str	r0, [r3, #0]
}
 8002be0:	bd38      	pop	{r3, r4, r5, pc}
 8002be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8002bf2:	e7fe      	b.n	8002bf2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	4808      	ldr	r0, [pc, #32]	@ (8002c18 <xTaskRemoveFromEventList+0x88>)
 8002bf8:	f7fe fffe 	bl	8001bf8 <vListInsertEnd>
 8002bfc:	e7e7      	b.n	8002bce <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8002bfe:	2000      	movs	r0, #0
	return xReturn;
 8002c00:	e7ee      	b.n	8002be0 <xTaskRemoveFromEventList+0x50>
 8002c02:	bf00      	nop
 8002c04:	200005cc 	.word	0x200005cc
 8002c08:	200005ec 	.word	0x200005ec
 8002c0c:	20000668 	.word	0x20000668
 8002c10:	20000ac8 	.word	0x20000ac8
 8002c14:	200005e0 	.word	0x200005e0
 8002c18:	20000624 	.word	0x20000624

08002c1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <vTaskInternalSetTimeOutState+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c22:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <vTaskInternalSetTimeOutState+0x14>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6043      	str	r3, [r0, #4]
}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200005dc 	.word	0x200005dc
 8002c30:	200005f0 	.word	0x200005f0

08002c34 <xTaskCheckForTimeOut>:
{
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8002c36:	b1c8      	cbz	r0, 8002c6c <xTaskCheckForTimeOut+0x38>
 8002c38:	460c      	mov	r4, r1
 8002c3a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002c3c:	b1f9      	cbz	r1, 8002c7e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8002c3e:	f000 fb29 	bl	8003294 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002c42:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <xTaskCheckForTimeOut+0x7c>)
 8002c44:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c46:	686b      	ldr	r3, [r5, #4]
 8002c48:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8002c50:	d026      	beq.n	8002ca0 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c52:	4e18      	ldr	r6, [pc, #96]	@ (8002cb4 <xTaskCheckForTimeOut+0x80>)
 8002c54:	6836      	ldr	r6, [r6, #0]
 8002c56:	682f      	ldr	r7, [r5, #0]
 8002c58:	42b7      	cmp	r7, r6
 8002c5a:	d001      	beq.n	8002c60 <xTaskCheckForTimeOut+0x2c>
 8002c5c:	428b      	cmp	r3, r1
 8002c5e:	d924      	bls.n	8002caa <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c60:	4282      	cmp	r2, r0
 8002c62:	d815      	bhi.n	8002c90 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002c68:	2401      	movs	r4, #1
 8002c6a:	e01a      	b.n	8002ca2 <xTaskCheckForTimeOut+0x6e>
 8002c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8002c7c:	e7fe      	b.n	8002c7c <xTaskCheckForTimeOut+0x48>
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8002c8e:	e7fe      	b.n	8002c8e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8002c90:	1a5b      	subs	r3, r3, r1
 8002c92:	4413      	add	r3, r2
 8002c94:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c96:	4628      	mov	r0, r5
 8002c98:	f7ff ffc0 	bl	8002c1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	e000      	b.n	8002ca2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8002ca0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ca2:	f000 fb19 	bl	80032d8 <vPortExitCritical>
}
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8002caa:	2401      	movs	r4, #1
 8002cac:	e7f9      	b.n	8002ca2 <xTaskCheckForTimeOut+0x6e>
 8002cae:	bf00      	nop
 8002cb0:	200005f0 	.word	0x200005f0
 8002cb4:	200005dc 	.word	0x200005dc

08002cb8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002cb8:	4b01      	ldr	r3, [pc, #4]	@ (8002cc0 <vTaskMissedYield+0x8>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	4770      	bx	lr
 8002cc0:	200005e0 	.word	0x200005e0

08002cc4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <xTaskGetSchedulerState+0x18>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b133      	cbz	r3, 8002cd8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <xTaskGetSchedulerState+0x1c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b10b      	cbz	r3, 8002cd4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8002cd0:	2000      	movs	r0, #0
	}
 8002cd2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cd8:	2001      	movs	r0, #1
 8002cda:	4770      	bx	lr
 8002cdc:	200005e8 	.word	0x200005e8
 8002ce0:	200005cc 	.word	0x200005cc

08002ce4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d03b      	beq.n	8002d60 <xTaskPriorityDisinherit+0x7c>
	{
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002cec:	4b1e      	ldr	r3, [pc, #120]	@ (8002d68 <xTaskPriorityDisinherit+0x84>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4283      	cmp	r3, r0
 8002cf2:	d008      	beq.n	8002d06 <xTaskPriorityDisinherit+0x22>
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	e7fe      	b.n	8002d04 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d06:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002d08:	b943      	cbnz	r3, 8002d1c <xTaskPriorityDisinherit+0x38>
 8002d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	e7fe      	b.n	8002d1a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d20:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002d22:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002d24:	4291      	cmp	r1, r2
 8002d26:	d01d      	beq.n	8002d64 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d28:	b10b      	cbz	r3, 8002d2e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8002d2a:	2000      	movs	r0, #0
	}
 8002d2c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d2e:	1d05      	adds	r5, r0, #4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7fe ff85 	bl	8001c40 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d36:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002d38:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8002d3e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <xTaskPriorityDisinherit+0x88>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4298      	cmp	r0, r3
 8002d46:	d901      	bls.n	8002d4c <xTaskPriorityDisinherit+0x68>
 8002d48:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <xTaskPriorityDisinherit+0x88>)
 8002d4a:	6018      	str	r0, [r3, #0]
 8002d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d50:	4629      	mov	r1, r5
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <xTaskPriorityDisinherit+0x8c>)
 8002d54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002d58:	f7fe ff4e 	bl	8001bf8 <vListInsertEnd>
					xReturn = pdTRUE;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	e7e5      	b.n	8002d2c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8002d60:	2000      	movs	r0, #0
	}
 8002d62:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8002d64:	2000      	movs	r0, #0
 8002d66:	e7e1      	b.n	8002d2c <xTaskPriorityDisinherit+0x48>
 8002d68:	20000ac8 	.word	0x20000ac8
 8002d6c:	200005ec 	.word	0x200005ec
 8002d70:	20000668 	.word	0x20000668

08002d74 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <prvGetNextExpireTime+0x1c>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	b92b      	cbnz	r3, 8002d88 <prvGetNextExpireTime+0x14>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002d80:	b923      	cbnz	r3, 8002d8c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d82:	68d3      	ldr	r3, [r2, #12]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e7f8      	b.n	8002d7e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002d8c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8002d8e:	4770      	bx	lr
 8002d90:	20000bcc 	.word	0x20000bcc

08002d94 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002d94:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d96:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d98:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002d9a:	4291      	cmp	r1, r2
 8002d9c:	d80c      	bhi.n	8002db8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d9e:	1ad2      	subs	r2, r2, r3
 8002da0:	6983      	ldr	r3, [r0, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d301      	bcc.n	8002daa <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002da6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8002da8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002daa:	1d01      	adds	r1, r0, #4
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <prvInsertTimerInActiveList+0x40>)
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	f7fe ff2d 	bl	8001c0e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7f7      	b.n	8002da8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d201      	bcs.n	8002dc0 <prvInsertTimerInActiveList+0x2c>
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	d206      	bcs.n	8002dce <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002dc0:	1d01      	adds	r1, r0, #4
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <prvInsertTimerInActiveList+0x44>)
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f7fe ff22 	bl	8001c0e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e7ec      	b.n	8002da8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8002dce:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002dd0:	e7ea      	b.n	8002da8 <prvInsertTimerInActiveList+0x14>
 8002dd2:	bf00      	nop
 8002dd4:	20000bc8 	.word	0x20000bc8
 8002dd8:	20000bcc 	.word	0x20000bcc

08002ddc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ddc:	b530      	push	{r4, r5, lr}
 8002dde:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002de0:	f000 fa58 	bl	8003294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <prvCheckForValidListAndQueue+0x50>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b11b      	cbz	r3, 8002df2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dea:	f000 fa75 	bl	80032d8 <vPortExitCritical>
}
 8002dee:	b003      	add	sp, #12
 8002df0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8002df2:	4d0f      	ldr	r5, [pc, #60]	@ (8002e30 <prvCheckForValidListAndQueue+0x54>)
 8002df4:	4628      	mov	r0, r5
 8002df6:	f7fe fef1 	bl	8001bdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002dfa:	4c0e      	ldr	r4, [pc, #56]	@ (8002e34 <prvCheckForValidListAndQueue+0x58>)
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7fe feed 	bl	8001bdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <prvCheckForValidListAndQueue+0x5c>)
 8002e04:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e06:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <prvCheckForValidListAndQueue+0x60>)
 8002e08:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <prvCheckForValidListAndQueue+0x64>)
 8002e10:	4a0c      	ldr	r2, [pc, #48]	@ (8002e44 <prvCheckForValidListAndQueue+0x68>)
 8002e12:	2110      	movs	r1, #16
 8002e14:	200a      	movs	r0, #10
 8002e16:	f7ff f819 	bl	8001e4c <xQueueGenericCreateStatic>
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <prvCheckForValidListAndQueue+0x50>)
 8002e1c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d0e3      	beq.n	8002dea <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e22:	4909      	ldr	r1, [pc, #36]	@ (8002e48 <prvCheckForValidListAndQueue+0x6c>)
 8002e24:	f7ff fa36 	bl	8002294 <vQueueAddToRegistry>
 8002e28:	e7df      	b.n	8002dea <prvCheckForValidListAndQueue+0xe>
 8002e2a:	bf00      	nop
 8002e2c:	20000bc4 	.word	0x20000bc4
 8002e30:	20000be4 	.word	0x20000be4
 8002e34:	20000bd0 	.word	0x20000bd0
 8002e38:	20000bcc 	.word	0x20000bcc
 8002e3c:	20000bc8 	.word	0x20000bc8
 8002e40:	20000acc 	.word	0x20000acc
 8002e44:	20000b1c 	.word	0x20000b1c
 8002e48:	08004824 	.word	0x08004824

08002e4c <xTimerCreateTimerTask>:
{
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002e50:	f7ff ffc4 	bl	8002ddc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <xTimerCreateTimerTask+0x54>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b1cb      	cbz	r3, 8002e8e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e5a:	2400      	movs	r4, #0
 8002e5c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002e5e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e60:	aa07      	add	r2, sp, #28
 8002e62:	a906      	add	r1, sp, #24
 8002e64:	a805      	add	r0, sp, #20
 8002e66:	f7fe fead 	bl	8001bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e6a:	9b05      	ldr	r3, [sp, #20]
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	9b06      	ldr	r3, [sp, #24]
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	2302      	movs	r3, #2
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4623      	mov	r3, r4
 8002e78:	9a07      	ldr	r2, [sp, #28]
 8002e7a:	490a      	ldr	r1, [pc, #40]	@ (8002ea4 <xTimerCreateTimerTask+0x58>)
 8002e7c:	480a      	ldr	r0, [pc, #40]	@ (8002ea8 <xTimerCreateTimerTask+0x5c>)
 8002e7e:	f7ff fbe3 	bl	8002648 <xTaskCreateStatic>
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <xTimerCreateTimerTask+0x60>)
 8002e84:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8002e86:	b110      	cbz	r0, 8002e8e <xTimerCreateTimerTask+0x42>
}
 8002e88:	2001      	movs	r0, #1
 8002e8a:	b008      	add	sp, #32
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8002e9e:	e7fe      	b.n	8002e9e <xTimerCreateTimerTask+0x52>
 8002ea0:	20000bc4 	.word	0x20000bc4
 8002ea4:	0800482c 	.word	0x0800482c
 8002ea8:	080031b1 	.word	0x080031b1
 8002eac:	20000bc0 	.word	0x20000bc0

08002eb0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8002eb0:	b1b8      	cbz	r0, 8002ee2 <xTimerGenericCommand+0x32>
 8002eb2:	469c      	mov	ip, r3
 8002eb4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8002eb6:	4818      	ldr	r0, [pc, #96]	@ (8002f18 <xTimerGenericCommand+0x68>)
 8002eb8:	6800      	ldr	r0, [r0, #0]
 8002eba:	b358      	cbz	r0, 8002f14 <xTimerGenericCommand+0x64>
{
 8002ebc:	b500      	push	{lr}
 8002ebe:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8002ec0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ec2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002ec4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ec6:	2905      	cmp	r1, #5
 8002ec8:	dc1c      	bgt.n	8002f04 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002eca:	f7ff fefb 	bl	8002cc4 <xTaskGetSchedulerState>
 8002ece:	2802      	cmp	r0, #2
 8002ed0:	d010      	beq.n	8002ef4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4669      	mov	r1, sp
 8002ed8:	480f      	ldr	r0, [pc, #60]	@ (8002f18 <xTimerGenericCommand+0x68>)
 8002eda:	6800      	ldr	r0, [r0, #0]
 8002edc:	f7ff f800 	bl	8001ee0 <xQueueGenericSend>
 8002ee0:	e015      	b.n	8002f0e <xTimerGenericCommand+0x5e>
 8002ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8002ef2:	e7fe      	b.n	8002ef2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9a06      	ldr	r2, [sp, #24]
 8002ef8:	4669      	mov	r1, sp
 8002efa:	4807      	ldr	r0, [pc, #28]	@ (8002f18 <xTimerGenericCommand+0x68>)
 8002efc:	6800      	ldr	r0, [r0, #0]
 8002efe:	f7fe ffef 	bl	8001ee0 <xQueueGenericSend>
 8002f02:	e004      	b.n	8002f0e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f04:	2300      	movs	r3, #0
 8002f06:	4662      	mov	r2, ip
 8002f08:	4669      	mov	r1, sp
 8002f0a:	f7ff f8ad 	bl	8002068 <xQueueGenericSendFromISR>
}
 8002f0e:	b005      	add	sp, #20
 8002f10:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8002f14:	2000      	movs	r0, #0
}
 8002f16:	4770      	bx	lr
 8002f18:	20000bc4 	.word	0x20000bc4

08002f1c <prvSwitchTimerLists>:
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <prvSwitchTimerLists+0x74>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	b362      	cbz	r2, 8002f82 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f2c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f2e:	1d25      	adds	r5, r4, #4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7fe fe85 	bl	8001c40 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f36:	6a23      	ldr	r3, [r4, #32]
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f3c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002f40:	f013 0f04 	tst.w	r3, #4
 8002f44:	d0ec      	beq.n	8002f20 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f46:	69a3      	ldr	r3, [r4, #24]
 8002f48:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002f4a:	429e      	cmp	r6, r3
 8002f4c:	d207      	bcs.n	8002f5e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f4e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f50:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f52:	4629      	mov	r1, r5
 8002f54:	4b0e      	ldr	r3, [pc, #56]	@ (8002f90 <prvSwitchTimerLists+0x74>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	f7fe fe59 	bl	8001c0e <vListInsert>
 8002f5c:	e7e0      	b.n	8002f20 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f5e:	2100      	movs	r1, #0
 8002f60:	9100      	str	r1, [sp, #0]
 8002f62:	460b      	mov	r3, r1
 8002f64:	4632      	mov	r2, r6
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff ffa2 	bl	8002eb0 <xTimerGenericCommand>
				configASSERT( xResult );
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d1d7      	bne.n	8002f20 <prvSwitchTimerLists+0x4>
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	e7fe      	b.n	8002f80 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8002f82:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <prvSwitchTimerLists+0x78>)
 8002f84:	6810      	ldr	r0, [r2, #0]
 8002f86:	4902      	ldr	r1, [pc, #8]	@ (8002f90 <prvSwitchTimerLists+0x74>)
 8002f88:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	20000bcc 	.word	0x20000bcc
 8002f94:	20000bc8 	.word	0x20000bc8

08002f98 <prvSampleTimeNow>:
{
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8002f9c:	f7ff fc22 	bl	80027e4 <xTaskGetTickCount>
 8002fa0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8002fa2:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <prvSampleTimeNow+0x28>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4283      	cmp	r3, r0
 8002fa8:	d805      	bhi.n	8002fb6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <prvSampleTimeNow+0x28>)
 8002fb0:	601c      	str	r4, [r3, #0]
}
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8002fb6:	f7ff ffb1 	bl	8002f1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	602b      	str	r3, [r5, #0]
 8002fbe:	e7f6      	b.n	8002fae <prvSampleTimeNow+0x16>
 8002fc0:	20000bbc 	.word	0x20000bbc

08002fc4 <prvProcessExpiredTimer>:
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	4606      	mov	r6, r0
 8002fca:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fcc:	4917      	ldr	r1, [pc, #92]	@ (800302c <prvProcessExpiredTimer+0x68>)
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	68c9      	ldr	r1, [r1, #12]
 8002fd2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fd4:	1d20      	adds	r0, r4, #4
 8002fd6:	f7fe fe33 	bl	8001c40 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002fda:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8002fde:	f01c 0f04 	tst.w	ip, #4
 8002fe2:	d108      	bne.n	8002ff6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002fe4:	f02c 0c01 	bic.w	ip, ip, #1
 8002fe8:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fec:	6a23      	ldr	r3, [r4, #32]
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4798      	blx	r3
}
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ff6:	69a1      	ldr	r1, [r4, #24]
 8002ff8:	4633      	mov	r3, r6
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	4431      	add	r1, r6
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fec8 	bl	8002d94 <prvInsertTimerInActiveList>
 8003004:	2800      	cmp	r0, #0
 8003006:	d0f1      	beq.n	8002fec <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003008:	2100      	movs	r1, #0
 800300a:	9100      	str	r1, [sp, #0]
 800300c:	460b      	mov	r3, r1
 800300e:	4632      	mov	r2, r6
 8003010:	4620      	mov	r0, r4
 8003012:	f7ff ff4d 	bl	8002eb0 <xTimerGenericCommand>
			configASSERT( xResult );
 8003016:	2800      	cmp	r0, #0
 8003018:	d1e8      	bne.n	8002fec <prvProcessExpiredTimer+0x28>
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	e7fe      	b.n	800302a <prvProcessExpiredTimer+0x66>
 800302c:	20000bcc 	.word	0x20000bcc

08003030 <prvProcessTimerOrBlockTask>:
{
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	4606      	mov	r6, r0
 8003036:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8003038:	f7ff fbcc 	bl	80027d4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800303c:	a801      	add	r0, sp, #4
 800303e:	f7ff ffab 	bl	8002f98 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	bb33      	cbnz	r3, 8003094 <prvProcessTimerOrBlockTask+0x64>
 8003046:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003048:	b9e4      	cbnz	r4, 8003084 <prvProcessTimerOrBlockTask+0x54>
 800304a:	42b0      	cmp	r0, r6
 800304c:	d213      	bcs.n	8003076 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800304e:	4622      	mov	r2, r4
 8003050:	1b71      	subs	r1, r6, r5
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <prvProcessTimerOrBlockTask+0x6c>)
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	f7ff f931 	bl	80022bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800305a:	f7ff fc5d 	bl	8002918 <xTaskResumeAll>
 800305e:	b9d8      	cbnz	r0, 8003098 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8003060:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003068:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	e010      	b.n	8003098 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8003076:	f7ff fc4f 	bl	8002918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800307a:	4629      	mov	r1, r5
 800307c:	4630      	mov	r0, r6
 800307e:	f7ff ffa1 	bl	8002fc4 <prvProcessExpiredTimer>
 8003082:	e009      	b.n	8003098 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003084:	4a06      	ldr	r2, [pc, #24]	@ (80030a0 <prvProcessTimerOrBlockTask+0x70>)
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	b90a      	cbnz	r2, 8003090 <prvProcessTimerOrBlockTask+0x60>
 800308c:	2401      	movs	r4, #1
 800308e:	e7de      	b.n	800304e <prvProcessTimerOrBlockTask+0x1e>
 8003090:	461c      	mov	r4, r3
 8003092:	e7dc      	b.n	800304e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8003094:	f7ff fc40 	bl	8002918 <xTaskResumeAll>
}
 8003098:	b002      	add	sp, #8
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	20000bc4 	.word	0x20000bc4
 80030a0:	20000bc8 	.word	0x20000bc8

080030a4 <prvProcessReceivedCommands>:
{
 80030a4:	b510      	push	{r4, lr}
 80030a6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030a8:	e002      	b.n	80030b0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80030aa:	9b04      	ldr	r3, [sp, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da0f      	bge.n	80030d0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030b0:	2200      	movs	r2, #0
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	4b3d      	ldr	r3, [pc, #244]	@ (80031ac <prvProcessReceivedCommands+0x108>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	f7ff f83d 	bl	8002136 <xQueueReceive>
 80030bc:	2800      	cmp	r0, #0
 80030be:	d073      	beq.n	80031a8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80030c0:	9b04      	ldr	r3, [sp, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	daf1      	bge.n	80030aa <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80030c6:	9907      	ldr	r1, [sp, #28]
 80030c8:	9806      	ldr	r0, [sp, #24]
 80030ca:	9b05      	ldr	r3, [sp, #20]
 80030cc:	4798      	blx	r3
 80030ce:	e7ec      	b.n	80030aa <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80030d0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80030d2:	6963      	ldr	r3, [r4, #20]
 80030d4:	b113      	cbz	r3, 80030dc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030d6:	1d20      	adds	r0, r4, #4
 80030d8:	f7fe fdb2 	bl	8001c40 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030dc:	a803      	add	r0, sp, #12
 80030de:	f7ff ff5b 	bl	8002f98 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80030e2:	9b04      	ldr	r3, [sp, #16]
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d8e3      	bhi.n	80030b0 <prvProcessReceivedCommands+0xc>
 80030e8:	e8df f003 	tbb	[pc, r3]
 80030ec:	30050505 	.word	0x30050505
 80030f0:	05055037 	.word	0x05055037
 80030f4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80030f6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003102:	9b05      	ldr	r3, [sp, #20]
 8003104:	69a1      	ldr	r1, [r4, #24]
 8003106:	4602      	mov	r2, r0
 8003108:	4419      	add	r1, r3
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff fe42 	bl	8002d94 <prvInsertTimerInActiveList>
 8003110:	2800      	cmp	r0, #0
 8003112:	d0cd      	beq.n	80030b0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003114:	6a23      	ldr	r3, [r4, #32]
 8003116:	4620      	mov	r0, r4
 8003118:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800311a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800311e:	f013 0f04 	tst.w	r3, #4
 8003122:	d0c5      	beq.n	80030b0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003124:	69a2      	ldr	r2, [r4, #24]
 8003126:	2100      	movs	r1, #0
 8003128:	9100      	str	r1, [sp, #0]
 800312a:	460b      	mov	r3, r1
 800312c:	9805      	ldr	r0, [sp, #20]
 800312e:	4402      	add	r2, r0
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff febd 	bl	8002eb0 <xTimerGenericCommand>
							configASSERT( xResult );
 8003136:	2800      	cmp	r0, #0
 8003138:	d1ba      	bne.n	80030b0 <prvProcessReceivedCommands+0xc>
 800313a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	e7fe      	b.n	800314a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800314c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8003158:	e7aa      	b.n	80030b0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800315a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003166:	9905      	ldr	r1, [sp, #20]
 8003168:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800316a:	b131      	cbz	r1, 800317a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800316c:	4603      	mov	r3, r0
 800316e:	4602      	mov	r2, r0
 8003170:	4401      	add	r1, r0
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff fe0e 	bl	8002d94 <prvInsertTimerInActiveList>
					break;
 8003178:	e79a      	b.n	80030b0 <prvProcessReceivedCommands+0xc>
 800317a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800318a:	e7fe      	b.n	800318a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800318c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003190:	f013 0f02 	tst.w	r3, #2
 8003194:	d004      	beq.n	80031a0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800319e:	e787      	b.n	80030b0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80031a0:	4620      	mov	r0, r4
 80031a2:	f000 fab3 	bl	800370c <vPortFree>
 80031a6:	e783      	b.n	80030b0 <prvProcessReceivedCommands+0xc>
}
 80031a8:	b008      	add	sp, #32
 80031aa:	bd10      	pop	{r4, pc}
 80031ac:	20000bc4 	.word	0x20000bc4

080031b0 <prvTimerTask>:
{
 80031b0:	b500      	push	{lr}
 80031b2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031b4:	a801      	add	r0, sp, #4
 80031b6:	f7ff fddd 	bl	8002d74 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031ba:	9901      	ldr	r1, [sp, #4]
 80031bc:	f7ff ff38 	bl	8003030 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80031c0:	f7ff ff70 	bl	80030a4 <prvProcessReceivedCommands>
	for( ;; )
 80031c4:	e7f6      	b.n	80031b4 <prvTimerTask+0x4>
	...

080031c8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80031ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <prvTaskExitError+0x3c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031d6:	d008      	beq.n	80031ea <prvTaskExitError+0x22>
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	e7fe      	b.n	80031e8 <prvTaskExitError+0x20>
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80031fa:	9b01      	ldr	r3, [sp, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0fc      	beq.n	80031fa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003200:	b002      	add	sp, #8
 8003202:	4770      	bx	lr
 8003204:	2000000c 	.word	0x2000000c

08003208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003208:	4808      	ldr	r0, [pc, #32]	@ (800322c <prvPortStartFirstTask+0x24>)
 800320a:	6800      	ldr	r0, [r0, #0]
 800320c:	6800      	ldr	r0, [r0, #0]
 800320e:	f380 8808 	msr	MSP, r0
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f380 8814 	msr	CONTROL, r0
 800321a:	b662      	cpsie	i
 800321c:	b661      	cpsie	f
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	df00      	svc	0
 8003228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800322a:	0000      	.short	0x0000
 800322c:	e000ed08 	.word	0xe000ed08

08003230 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003230:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003240 <vPortEnableVFP+0x10>
 8003234:	6801      	ldr	r1, [r0, #0]
 8003236:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800323a:	6001      	str	r1, [r0, #0]
 800323c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800323e:	0000      	.short	0x0000
 8003240:	e000ed88 	.word	0xe000ed88

08003244 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003248:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800324c:	f021 0101 	bic.w	r1, r1, #1
 8003250:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <pxPortInitialiseStack+0x28>)
 8003256:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800325a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800325e:	f06f 0302 	mvn.w	r3, #2
 8003262:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003266:	3844      	subs	r0, #68	@ 0x44
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	080031c9 	.word	0x080031c9

08003270 <SVC_Handler>:
	__asm volatile (
 8003270:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <pxCurrentTCBConst2>)
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	6808      	ldr	r0, [r1, #0]
 8003276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327a:	f380 8809 	msr	PSP, r0
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f380 8811 	msr	BASEPRI, r0
 800328a:	4770      	bx	lr
 800328c:	f3af 8000 	nop.w

08003290 <pxCurrentTCBConst2>:
 8003290:	20000ac8 	.word	0x20000ac8

08003294 <vPortEnterCritical>:
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80032a4:	4a0b      	ldr	r2, [pc, #44]	@ (80032d4 <vPortEnterCritical+0x40>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d000      	beq.n	80032b2 <vPortEnterCritical+0x1e>
}
 80032b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80032b6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80032ba:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80032be:	d0f7      	beq.n	80032b0 <vPortEnterCritical+0x1c>
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	e7fe      	b.n	80032d0 <vPortEnterCritical+0x3c>
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <vPortExitCritical+0x28>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b943      	cbnz	r3, 80032f0 <vPortExitCritical+0x18>
 80032de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	e7fe      	b.n	80032ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a03      	ldr	r2, [pc, #12]	@ (8003300 <vPortExitCritical+0x28>)
 80032f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80032f6:	b90b      	cbnz	r3, 80032fc <vPortExitCritical+0x24>
	__asm volatile
 80032f8:	f383 8811 	msr	BASEPRI, r3
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000000c 	.word	0x2000000c
	...

08003310 <PendSV_Handler>:
	__asm volatile
 8003310:	f3ef 8009 	mrs	r0, PSP
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	f01e 0f10 	tst.w	lr, #16
 8003320:	bf08      	it	eq
 8003322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332a:	6010      	str	r0, [r2, #0]
 800332c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003334:	f380 8811 	msr	BASEPRI, r0
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f7ff fb8c 	bl	8002a5c <vTaskSwitchContext>
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f380 8811 	msr	BASEPRI, r0
 800334c:	bc09      	pop	{r0, r3}
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	6808      	ldr	r0, [r1, #0]
 8003352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003356:	f01e 0f10 	tst.w	lr, #16
 800335a:	bf08      	it	eq
 800335c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003360:	f380 8809 	msr	PSP, r0
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	f3af 8000 	nop.w

08003370 <pxCurrentTCBConst>:
 8003370:	20000ac8 	.word	0x20000ac8

08003374 <xPortSysTickHandler>:
{
 8003374:	b508      	push	{r3, lr}
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003386:	f7ff fa3b 	bl	8002800 <xTaskIncrementTick>
 800338a:	b128      	cbz	r0, 8003398 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800338c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003394:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003398:	2300      	movs	r3, #0
 800339a:	f383 8811 	msr	BASEPRI, r3
}
 800339e:	bd08      	pop	{r3, pc}

080033a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033a0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80033a4:	2300      	movs	r3, #0
 80033a6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033a8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <vPortSetupTimerInterrupt+0x20>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4905      	ldr	r1, [pc, #20]	@ (80033c4 <vPortSetupTimerInterrupt+0x24>)
 80033b0:	fba1 1303 	umull	r1, r3, r1, r3
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ba:	2307      	movs	r3, #7
 80033bc:	6113      	str	r3, [r2, #16]
}
 80033be:	4770      	bx	lr
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033cc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80033d0:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <xPortStartScheduler+0x100>)
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d01c      	beq.n	8003410 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <xPortStartScheduler+0x104>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d01e      	beq.n	8003422 <xPortStartScheduler+0x5a>
{
 80033e4:	b530      	push	{r4, r5, lr}
 80033e6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033e8:	4b39      	ldr	r3, [pc, #228]	@ (80034d0 <xPortStartScheduler+0x108>)
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033f0:	22ff      	movs	r2, #255	@ 0xff
 80033f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003400:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003404:	4a33      	ldr	r2, [pc, #204]	@ (80034d4 <xPortStartScheduler+0x10c>)
 8003406:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003408:	4b33      	ldr	r3, [pc, #204]	@ (80034d8 <xPortStartScheduler+0x110>)
 800340a:	2207      	movs	r2, #7
 800340c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800340e:	e01b      	b.n	8003448 <xPortStartScheduler+0x80>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003420:	e7fe      	b.n	8003420 <xPortStartScheduler+0x58>
 8003422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003432:	e7fe      	b.n	8003432 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8003434:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <xPortStartScheduler+0x110>)
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	3b01      	subs	r3, #1
 800343a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800343c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003448:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800344c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003450:	d1f0      	bne.n	8003434 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003452:	4b21      	ldr	r3, [pc, #132]	@ (80034d8 <xPortStartScheduler+0x110>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d008      	beq.n	800346c <xPortStartScheduler+0xa4>
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	e7fe      	b.n	800346a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <xPortStartScheduler+0x110>)
 8003470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003472:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003476:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003478:	9b01      	ldr	r3, [sp, #4]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <xPortStartScheduler+0x108>)
 800347e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003480:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8003484:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800348c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003490:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003494:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003498:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800349c:	f7ff ff80 	bl	80033a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80034a0:	2500      	movs	r5, #0
 80034a2:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <xPortStartScheduler+0x114>)
 80034a4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80034a6:	f7ff fec3 	bl	8003230 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034aa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80034ae:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80034b2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80034b6:	f7ff fea7 	bl	8003208 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80034ba:	f7ff facf 	bl	8002a5c <vTaskSwitchContext>
	prvTaskExitError();
 80034be:	f7ff fe83 	bl	80031c8 <prvTaskExitError>
}
 80034c2:	4628      	mov	r0, r5
 80034c4:	b003      	add	sp, #12
 80034c6:	bd30      	pop	{r4, r5, pc}
 80034c8:	410fc271 	.word	0x410fc271
 80034cc:	410fc270 	.word	0x410fc270
 80034d0:	e000e400 	.word	0xe000e400
 80034d4:	20000bfc 	.word	0x20000bfc
 80034d8:	20000bf8 	.word	0x20000bf8
 80034dc:	2000000c 	.word	0x2000000c

080034e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80034e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d90f      	bls.n	8003508 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80034e8:	4a11      	ldr	r2, [pc, #68]	@ (8003530 <vPortValidateInterruptPriority+0x50>)
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034ee:	4a11      	ldr	r2, [pc, #68]	@ (8003534 <vPortValidateInterruptPriority+0x54>)
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d908      	bls.n	8003508 <vPortValidateInterruptPriority+0x28>
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	e7fe      	b.n	8003506 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003508:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800350c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8003510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003514:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <vPortValidateInterruptPriority+0x58>)
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	4293      	cmp	r3, r2
 800351a:	d908      	bls.n	800352e <vPortValidateInterruptPriority+0x4e>
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	e7fe      	b.n	800352c <vPortValidateInterruptPriority+0x4c>
	}
 800352e:	4770      	bx	lr
 8003530:	e000e3f0 	.word	0xe000e3f0
 8003534:	20000bfc 	.word	0x20000bfc
 8003538:	20000bf8 	.word	0x20000bf8

0800353c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800353c:	4a13      	ldr	r2, [pc, #76]	@ (800358c <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800353e:	f012 0f07 	tst.w	r2, #7
 8003542:	d01f      	beq.n	8003584 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003544:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003546:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800354a:	f5c1 43fb 	rsb	r3, r1, #32128	@ 0x7d80
 800354e:	3368      	adds	r3, #104	@ 0x68
 8003550:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003552:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003554:	480e      	ldr	r0, [pc, #56]	@ (8003590 <prvHeapInit+0x54>)
 8003556:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003558:	2100      	movs	r1, #0
 800355a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800355c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800355e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003560:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8003564:	480b      	ldr	r0, [pc, #44]	@ (8003594 <prvHeapInit+0x58>)
 8003566:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8003568:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800356a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800356c:	1a99      	subs	r1, r3, r2
 800356e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003570:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <prvHeapInit+0x5c>)
 8003574:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <prvHeapInit+0x60>)
 8003578:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800357a:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <prvHeapInit+0x64>)
 800357c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003584:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 8003588:	e7e4      	b.n	8003554 <prvHeapInit+0x18>
 800358a:	bf00      	nop
 800358c:	20000c20 	.word	0x20000c20
 8003590:	20000c18 	.word	0x20000c18
 8003594:	20000c14 	.word	0x20000c14
 8003598:	20000c0c 	.word	0x20000c0c
 800359c:	20000c10 	.word	0x20000c10
 80035a0:	20000c00 	.word	0x20000c00

080035a4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035a4:	4b16      	ldr	r3, [pc, #88]	@ (8003600 <prvInsertBlockIntoFreeList+0x5c>)
 80035a6:	461a      	mov	r2, r3
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4283      	cmp	r3, r0
 80035ac:	d3fb      	bcc.n	80035a6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035ae:	6851      	ldr	r1, [r2, #4]
 80035b0:	eb02 0c01 	add.w	ip, r2, r1
 80035b4:	4584      	cmp	ip, r0
 80035b6:	d009      	beq.n	80035cc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035b8:	6841      	ldr	r1, [r0, #4]
 80035ba:	eb00 0c01 	add.w	ip, r0, r1
 80035be:	4563      	cmp	r3, ip
 80035c0:	d009      	beq.n	80035d6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035c2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035c4:	4290      	cmp	r0, r2
 80035c6:	d019      	beq.n	80035fc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035c8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80035ca:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035cc:	6840      	ldr	r0, [r0, #4]
 80035ce:	4401      	add	r1, r0
 80035d0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80035d2:	4610      	mov	r0, r2
 80035d4:	e7f0      	b.n	80035b8 <prvInsertBlockIntoFreeList+0x14>
{
 80035d6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003604 <prvInsertBlockIntoFreeList+0x60>)
 80035da:	6824      	ldr	r4, [r4, #0]
 80035dc:	42a3      	cmp	r3, r4
 80035de:	d00b      	beq.n	80035f8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4419      	add	r1, r3
 80035e4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80035ec:	4290      	cmp	r0, r2
 80035ee:	d000      	beq.n	80035f2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035f0:	6010      	str	r0, [r2, #0]
	}
}
 80035f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035f8:	6004      	str	r4, [r0, #0]
 80035fa:	e7f7      	b.n	80035ec <prvInsertBlockIntoFreeList+0x48>
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000c18 	.word	0x20000c18
 8003604:	20000c14 	.word	0x20000c14

08003608 <pvPortMalloc>:
{
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800360c:	f7ff f8e2 	bl	80027d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <pvPortMalloc+0xec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b1b3      	cbz	r3, 8003644 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003616:	4b38      	ldr	r3, [pc, #224]	@ (80036f8 <pvPortMalloc+0xf0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	421c      	tst	r4, r3
 800361c:	d150      	bne.n	80036c0 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800361e:	2c00      	cmp	r4, #0
 8003620:	d050      	beq.n	80036c4 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8003622:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003626:	f014 0f07 	tst.w	r4, #7
 800362a:	d002      	beq.n	8003632 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800362c:	f022 0207 	bic.w	r2, r2, #7
 8003630:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003632:	2a00      	cmp	r2, #0
 8003634:	d055      	beq.n	80036e2 <pvPortMalloc+0xda>
 8003636:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <pvPortMalloc+0xf4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4293      	cmp	r3, r2
 800363c:	d353      	bcc.n	80036e6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800363e:	4930      	ldr	r1, [pc, #192]	@ (8003700 <pvPortMalloc+0xf8>)
 8003640:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003642:	e004      	b.n	800364e <pvPortMalloc+0x46>
			prvHeapInit();
 8003644:	f7ff ff7a 	bl	800353c <prvHeapInit>
 8003648:	e7e5      	b.n	8003616 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800364a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800364c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	4293      	cmp	r3, r2
 8003652:	d202      	bcs.n	800365a <pvPortMalloc+0x52>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f7      	bne.n	800364a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <pvPortMalloc+0xec>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	42a3      	cmp	r3, r4
 8003660:	d043      	beq.n	80036ea <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003662:	680d      	ldr	r5, [r1, #0]
 8003664:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800366a:	6863      	ldr	r3, [r4, #4]
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	2b10      	cmp	r3, #16
 8003670:	d910      	bls.n	8003694 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003672:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003674:	f010 0f07 	tst.w	r0, #7
 8003678:	d008      	beq.n	800368c <pvPortMalloc+0x84>
 800367a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	e7fe      	b.n	800368a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800368c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800368e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003690:	f7ff ff88 	bl	80035a4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	4919      	ldr	r1, [pc, #100]	@ (80036fc <pvPortMalloc+0xf4>)
 8003698:	680b      	ldr	r3, [r1, #0]
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800369e:	4919      	ldr	r1, [pc, #100]	@ (8003704 <pvPortMalloc+0xfc>)
 80036a0:	6809      	ldr	r1, [r1, #0]
 80036a2:	428b      	cmp	r3, r1
 80036a4:	d201      	bcs.n	80036aa <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036a6:	4917      	ldr	r1, [pc, #92]	@ (8003704 <pvPortMalloc+0xfc>)
 80036a8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036aa:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <pvPortMalloc+0xf0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80036b6:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <pvPortMalloc+0x100>)
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e002      	b.n	80036c6 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80036c0:	2500      	movs	r5, #0
 80036c2:	e000      	b.n	80036c6 <pvPortMalloc+0xbe>
 80036c4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80036c6:	f7ff f927 	bl	8002918 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036ca:	f015 0f07 	tst.w	r5, #7
 80036ce:	d00e      	beq.n	80036ee <pvPortMalloc+0xe6>
 80036d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	e7fe      	b.n	80036e0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80036e2:	2500      	movs	r5, #0
 80036e4:	e7ef      	b.n	80036c6 <pvPortMalloc+0xbe>
 80036e6:	2500      	movs	r5, #0
 80036e8:	e7ed      	b.n	80036c6 <pvPortMalloc+0xbe>
 80036ea:	2500      	movs	r5, #0
 80036ec:	e7eb      	b.n	80036c6 <pvPortMalloc+0xbe>
}
 80036ee:	4628      	mov	r0, r5
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
 80036f2:	bf00      	nop
 80036f4:	20000c14 	.word	0x20000c14
 80036f8:	20000c00 	.word	0x20000c00
 80036fc:	20000c10 	.word	0x20000c10
 8003700:	20000c18 	.word	0x20000c18
 8003704:	20000c0c 	.word	0x20000c0c
 8003708:	20000c08 	.word	0x20000c08

0800370c <vPortFree>:
	if( pv != NULL )
 800370c:	2800      	cmp	r0, #0
 800370e:	d034      	beq.n	800377a <vPortFree+0x6e>
{
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003714:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003718:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800371c:	4a17      	ldr	r2, [pc, #92]	@ (800377c <vPortFree+0x70>)
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	4213      	tst	r3, r2
 8003722:	d108      	bne.n	8003736 <vPortFree+0x2a>
 8003724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	e7fe      	b.n	8003734 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003736:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800373a:	b141      	cbz	r1, 800374e <vPortFree+0x42>
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	e7fe      	b.n	800374c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800374e:	ea23 0302 	bic.w	r3, r3, r2
 8003752:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003756:	f7ff f83d 	bl	80027d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800375a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800375e:	4a08      	ldr	r2, [pc, #32]	@ (8003780 <vPortFree+0x74>)
 8003760:	6813      	ldr	r3, [r2, #0]
 8003762:	440b      	add	r3, r1
 8003764:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003766:	4628      	mov	r0, r5
 8003768:	f7ff ff1c 	bl	80035a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800376c:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <vPortFree+0x78>)
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8003774:	f7ff f8d0 	bl	8002918 <xTaskResumeAll>
}
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	4770      	bx	lr
 800377c:	20000c00 	.word	0x20000c00
 8003780:	20000c10 	.word	0x20000c10
 8003784:	20000c04 	.word	0x20000c04

08003788 <std>:
 8003788:	2300      	movs	r3, #0
 800378a:	b510      	push	{r4, lr}
 800378c:	4604      	mov	r4, r0
 800378e:	e9c0 3300 	strd	r3, r3, [r0]
 8003792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003796:	6083      	str	r3, [r0, #8]
 8003798:	8181      	strh	r1, [r0, #12]
 800379a:	6643      	str	r3, [r0, #100]	@ 0x64
 800379c:	81c2      	strh	r2, [r0, #14]
 800379e:	6183      	str	r3, [r0, #24]
 80037a0:	4619      	mov	r1, r3
 80037a2:	2208      	movs	r2, #8
 80037a4:	305c      	adds	r0, #92	@ 0x5c
 80037a6:	f000 f9f9 	bl	8003b9c <memset>
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <std+0x58>)
 80037ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80037ae:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <std+0x5c>)
 80037b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <std+0x60>)
 80037b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037b6:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <std+0x64>)
 80037b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <std+0x68>)
 80037bc:	6224      	str	r4, [r4, #32]
 80037be:	429c      	cmp	r4, r3
 80037c0:	d006      	beq.n	80037d0 <std+0x48>
 80037c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037c6:	4294      	cmp	r4, r2
 80037c8:	d002      	beq.n	80037d0 <std+0x48>
 80037ca:	33d0      	adds	r3, #208	@ 0xd0
 80037cc:	429c      	cmp	r4, r3
 80037ce:	d105      	bne.n	80037dc <std+0x54>
 80037d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d8:	f000 baae 	b.w	8003d38 <__retarget_lock_init_recursive>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	bf00      	nop
 80037e0:	080039ed 	.word	0x080039ed
 80037e4:	08003a0f 	.word	0x08003a0f
 80037e8:	08003a47 	.word	0x08003a47
 80037ec:	08003a6b 	.word	0x08003a6b
 80037f0:	20008a08 	.word	0x20008a08

080037f4 <stdio_exit_handler>:
 80037f4:	4a02      	ldr	r2, [pc, #8]	@ (8003800 <stdio_exit_handler+0xc>)
 80037f6:	4903      	ldr	r1, [pc, #12]	@ (8003804 <stdio_exit_handler+0x10>)
 80037f8:	4803      	ldr	r0, [pc, #12]	@ (8003808 <stdio_exit_handler+0x14>)
 80037fa:	f000 b869 	b.w	80038d0 <_fwalk_sglue>
 80037fe:	bf00      	nop
 8003800:	20000010 	.word	0x20000010
 8003804:	080045f5 	.word	0x080045f5
 8003808:	20000020 	.word	0x20000020

0800380c <cleanup_stdio>:
 800380c:	6841      	ldr	r1, [r0, #4]
 800380e:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <cleanup_stdio+0x34>)
 8003810:	4299      	cmp	r1, r3
 8003812:	b510      	push	{r4, lr}
 8003814:	4604      	mov	r4, r0
 8003816:	d001      	beq.n	800381c <cleanup_stdio+0x10>
 8003818:	f000 feec 	bl	80045f4 <_fflush_r>
 800381c:	68a1      	ldr	r1, [r4, #8]
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <cleanup_stdio+0x38>)
 8003820:	4299      	cmp	r1, r3
 8003822:	d002      	beq.n	800382a <cleanup_stdio+0x1e>
 8003824:	4620      	mov	r0, r4
 8003826:	f000 fee5 	bl	80045f4 <_fflush_r>
 800382a:	68e1      	ldr	r1, [r4, #12]
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <cleanup_stdio+0x3c>)
 800382e:	4299      	cmp	r1, r3
 8003830:	d004      	beq.n	800383c <cleanup_stdio+0x30>
 8003832:	4620      	mov	r0, r4
 8003834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003838:	f000 bedc 	b.w	80045f4 <_fflush_r>
 800383c:	bd10      	pop	{r4, pc}
 800383e:	bf00      	nop
 8003840:	20008a08 	.word	0x20008a08
 8003844:	20008a70 	.word	0x20008a70
 8003848:	20008ad8 	.word	0x20008ad8

0800384c <global_stdio_init.part.0>:
 800384c:	b510      	push	{r4, lr}
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <global_stdio_init.part.0+0x30>)
 8003850:	4c0b      	ldr	r4, [pc, #44]	@ (8003880 <global_stdio_init.part.0+0x34>)
 8003852:	4a0c      	ldr	r2, [pc, #48]	@ (8003884 <global_stdio_init.part.0+0x38>)
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	4620      	mov	r0, r4
 8003858:	2200      	movs	r2, #0
 800385a:	2104      	movs	r1, #4
 800385c:	f7ff ff94 	bl	8003788 <std>
 8003860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003864:	2201      	movs	r2, #1
 8003866:	2109      	movs	r1, #9
 8003868:	f7ff ff8e 	bl	8003788 <std>
 800386c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003870:	2202      	movs	r2, #2
 8003872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003876:	2112      	movs	r1, #18
 8003878:	f7ff bf86 	b.w	8003788 <std>
 800387c:	20008b40 	.word	0x20008b40
 8003880:	20008a08 	.word	0x20008a08
 8003884:	080037f5 	.word	0x080037f5

08003888 <__sfp_lock_acquire>:
 8003888:	4801      	ldr	r0, [pc, #4]	@ (8003890 <__sfp_lock_acquire+0x8>)
 800388a:	f000 ba56 	b.w	8003d3a <__retarget_lock_acquire_recursive>
 800388e:	bf00      	nop
 8003890:	20008b49 	.word	0x20008b49

08003894 <__sfp_lock_release>:
 8003894:	4801      	ldr	r0, [pc, #4]	@ (800389c <__sfp_lock_release+0x8>)
 8003896:	f000 ba51 	b.w	8003d3c <__retarget_lock_release_recursive>
 800389a:	bf00      	nop
 800389c:	20008b49 	.word	0x20008b49

080038a0 <__sinit>:
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4604      	mov	r4, r0
 80038a4:	f7ff fff0 	bl	8003888 <__sfp_lock_acquire>
 80038a8:	6a23      	ldr	r3, [r4, #32]
 80038aa:	b11b      	cbz	r3, 80038b4 <__sinit+0x14>
 80038ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b0:	f7ff bff0 	b.w	8003894 <__sfp_lock_release>
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <__sinit+0x28>)
 80038b6:	6223      	str	r3, [r4, #32]
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <__sinit+0x2c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f5      	bne.n	80038ac <__sinit+0xc>
 80038c0:	f7ff ffc4 	bl	800384c <global_stdio_init.part.0>
 80038c4:	e7f2      	b.n	80038ac <__sinit+0xc>
 80038c6:	bf00      	nop
 80038c8:	0800380d 	.word	0x0800380d
 80038cc:	20008b40 	.word	0x20008b40

080038d0 <_fwalk_sglue>:
 80038d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d4:	4607      	mov	r7, r0
 80038d6:	4688      	mov	r8, r1
 80038d8:	4614      	mov	r4, r2
 80038da:	2600      	movs	r6, #0
 80038dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038e0:	f1b9 0901 	subs.w	r9, r9, #1
 80038e4:	d505      	bpl.n	80038f2 <_fwalk_sglue+0x22>
 80038e6:	6824      	ldr	r4, [r4, #0]
 80038e8:	2c00      	cmp	r4, #0
 80038ea:	d1f7      	bne.n	80038dc <_fwalk_sglue+0xc>
 80038ec:	4630      	mov	r0, r6
 80038ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d907      	bls.n	8003908 <_fwalk_sglue+0x38>
 80038f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038fc:	3301      	adds	r3, #1
 80038fe:	d003      	beq.n	8003908 <_fwalk_sglue+0x38>
 8003900:	4629      	mov	r1, r5
 8003902:	4638      	mov	r0, r7
 8003904:	47c0      	blx	r8
 8003906:	4306      	orrs	r6, r0
 8003908:	3568      	adds	r5, #104	@ 0x68
 800390a:	e7e9      	b.n	80038e0 <_fwalk_sglue+0x10>

0800390c <iprintf>:
 800390c:	b40f      	push	{r0, r1, r2, r3}
 800390e:	b507      	push	{r0, r1, r2, lr}
 8003910:	4906      	ldr	r1, [pc, #24]	@ (800392c <iprintf+0x20>)
 8003912:	ab04      	add	r3, sp, #16
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	f853 2b04 	ldr.w	r2, [r3], #4
 800391a:	6881      	ldr	r1, [r0, #8]
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	f000 fb3f 	bl	8003fa0 <_vfiprintf_r>
 8003922:	b003      	add	sp, #12
 8003924:	f85d eb04 	ldr.w	lr, [sp], #4
 8003928:	b004      	add	sp, #16
 800392a:	4770      	bx	lr
 800392c:	2000001c 	.word	0x2000001c

08003930 <_puts_r>:
 8003930:	6a03      	ldr	r3, [r0, #32]
 8003932:	b570      	push	{r4, r5, r6, lr}
 8003934:	6884      	ldr	r4, [r0, #8]
 8003936:	4605      	mov	r5, r0
 8003938:	460e      	mov	r6, r1
 800393a:	b90b      	cbnz	r3, 8003940 <_puts_r+0x10>
 800393c:	f7ff ffb0 	bl	80038a0 <__sinit>
 8003940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003942:	07db      	lsls	r3, r3, #31
 8003944:	d405      	bmi.n	8003952 <_puts_r+0x22>
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	0598      	lsls	r0, r3, #22
 800394a:	d402      	bmi.n	8003952 <_puts_r+0x22>
 800394c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800394e:	f000 f9f4 	bl	8003d3a <__retarget_lock_acquire_recursive>
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	0719      	lsls	r1, r3, #28
 8003956:	d502      	bpl.n	800395e <_puts_r+0x2e>
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d135      	bne.n	80039ca <_puts_r+0x9a>
 800395e:	4621      	mov	r1, r4
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f8c5 	bl	8003af0 <__swsetup_r>
 8003966:	b380      	cbz	r0, 80039ca <_puts_r+0x9a>
 8003968:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800396c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800396e:	07da      	lsls	r2, r3, #31
 8003970:	d405      	bmi.n	800397e <_puts_r+0x4e>
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	059b      	lsls	r3, r3, #22
 8003976:	d402      	bmi.n	800397e <_puts_r+0x4e>
 8003978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800397a:	f000 f9df 	bl	8003d3c <__retarget_lock_release_recursive>
 800397e:	4628      	mov	r0, r5
 8003980:	bd70      	pop	{r4, r5, r6, pc}
 8003982:	2b00      	cmp	r3, #0
 8003984:	da04      	bge.n	8003990 <_puts_r+0x60>
 8003986:	69a2      	ldr	r2, [r4, #24]
 8003988:	429a      	cmp	r2, r3
 800398a:	dc17      	bgt.n	80039bc <_puts_r+0x8c>
 800398c:	290a      	cmp	r1, #10
 800398e:	d015      	beq.n	80039bc <_puts_r+0x8c>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	7019      	strb	r1, [r3, #0]
 8003998:	68a3      	ldr	r3, [r4, #8]
 800399a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800399e:	3b01      	subs	r3, #1
 80039a0:	60a3      	str	r3, [r4, #8]
 80039a2:	2900      	cmp	r1, #0
 80039a4:	d1ed      	bne.n	8003982 <_puts_r+0x52>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da11      	bge.n	80039ce <_puts_r+0x9e>
 80039aa:	4622      	mov	r2, r4
 80039ac:	210a      	movs	r1, #10
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f85f 	bl	8003a72 <__swbuf_r>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d0d7      	beq.n	8003968 <_puts_r+0x38>
 80039b8:	250a      	movs	r5, #10
 80039ba:	e7d7      	b.n	800396c <_puts_r+0x3c>
 80039bc:	4622      	mov	r2, r4
 80039be:	4628      	mov	r0, r5
 80039c0:	f000 f857 	bl	8003a72 <__swbuf_r>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d1e7      	bne.n	8003998 <_puts_r+0x68>
 80039c8:	e7ce      	b.n	8003968 <_puts_r+0x38>
 80039ca:	3e01      	subs	r6, #1
 80039cc:	e7e4      	b.n	8003998 <_puts_r+0x68>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	6022      	str	r2, [r4, #0]
 80039d4:	220a      	movs	r2, #10
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e7ee      	b.n	80039b8 <_puts_r+0x88>
	...

080039dc <puts>:
 80039dc:	4b02      	ldr	r3, [pc, #8]	@ (80039e8 <puts+0xc>)
 80039de:	4601      	mov	r1, r0
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	f7ff bfa5 	b.w	8003930 <_puts_r>
 80039e6:	bf00      	nop
 80039e8:	2000001c 	.word	0x2000001c

080039ec <__sread>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	460c      	mov	r4, r1
 80039f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f4:	f000 f952 	bl	8003c9c <_read_r>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	bfab      	itete	ge
 80039fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003a00:	181b      	addge	r3, r3, r0
 8003a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a06:	bfac      	ite	ge
 8003a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a0a:	81a3      	strhlt	r3, [r4, #12]
 8003a0c:	bd10      	pop	{r4, pc}

08003a0e <__swrite>:
 8003a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a12:	461f      	mov	r7, r3
 8003a14:	898b      	ldrh	r3, [r1, #12]
 8003a16:	05db      	lsls	r3, r3, #23
 8003a18:	4605      	mov	r5, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	4616      	mov	r6, r2
 8003a1e:	d505      	bpl.n	8003a2c <__swrite+0x1e>
 8003a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a24:	2302      	movs	r3, #2
 8003a26:	2200      	movs	r2, #0
 8003a28:	f000 f926 	bl	8003c78 <_lseek_r>
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a36:	81a3      	strh	r3, [r4, #12]
 8003a38:	4632      	mov	r2, r6
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a42:	f000 b93d 	b.w	8003cc0 <_write_r>

08003a46 <__sseek>:
 8003a46:	b510      	push	{r4, lr}
 8003a48:	460c      	mov	r4, r1
 8003a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4e:	f000 f913 	bl	8003c78 <_lseek_r>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	bf15      	itete	ne
 8003a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a62:	81a3      	strheq	r3, [r4, #12]
 8003a64:	bf18      	it	ne
 8003a66:	81a3      	strhne	r3, [r4, #12]
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <__sclose>:
 8003a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6e:	f000 b89d 	b.w	8003bac <_close_r>

08003a72 <__swbuf_r>:
 8003a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a74:	460e      	mov	r6, r1
 8003a76:	4614      	mov	r4, r2
 8003a78:	4605      	mov	r5, r0
 8003a7a:	b118      	cbz	r0, 8003a84 <__swbuf_r+0x12>
 8003a7c:	6a03      	ldr	r3, [r0, #32]
 8003a7e:	b90b      	cbnz	r3, 8003a84 <__swbuf_r+0x12>
 8003a80:	f7ff ff0e 	bl	80038a0 <__sinit>
 8003a84:	69a3      	ldr	r3, [r4, #24]
 8003a86:	60a3      	str	r3, [r4, #8]
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	071a      	lsls	r2, r3, #28
 8003a8c:	d501      	bpl.n	8003a92 <__swbuf_r+0x20>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	b943      	cbnz	r3, 8003aa4 <__swbuf_r+0x32>
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 f82b 	bl	8003af0 <__swsetup_r>
 8003a9a:	b118      	cbz	r0, 8003aa4 <__swbuf_r+0x32>
 8003a9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	6922      	ldr	r2, [r4, #16]
 8003aa8:	1a98      	subs	r0, r3, r2
 8003aaa:	6963      	ldr	r3, [r4, #20]
 8003aac:	b2f6      	uxtb	r6, r6
 8003aae:	4283      	cmp	r3, r0
 8003ab0:	4637      	mov	r7, r6
 8003ab2:	dc05      	bgt.n	8003ac0 <__swbuf_r+0x4e>
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fd9c 	bl	80045f4 <_fflush_r>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d1ed      	bne.n	8003a9c <__swbuf_r+0x2a>
 8003ac0:	68a3      	ldr	r3, [r4, #8]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	60a3      	str	r3, [r4, #8]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	6022      	str	r2, [r4, #0]
 8003acc:	701e      	strb	r6, [r3, #0]
 8003ace:	6962      	ldr	r2, [r4, #20]
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d004      	beq.n	8003ae0 <__swbuf_r+0x6e>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	07db      	lsls	r3, r3, #31
 8003ada:	d5e1      	bpl.n	8003aa0 <__swbuf_r+0x2e>
 8003adc:	2e0a      	cmp	r6, #10
 8003ade:	d1df      	bne.n	8003aa0 <__swbuf_r+0x2e>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 fd86 	bl	80045f4 <_fflush_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d0d9      	beq.n	8003aa0 <__swbuf_r+0x2e>
 8003aec:	e7d6      	b.n	8003a9c <__swbuf_r+0x2a>
	...

08003af0 <__swsetup_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <__swsetup_r+0xa8>)
 8003af4:	4605      	mov	r5, r0
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	460c      	mov	r4, r1
 8003afa:	b118      	cbz	r0, 8003b04 <__swsetup_r+0x14>
 8003afc:	6a03      	ldr	r3, [r0, #32]
 8003afe:	b90b      	cbnz	r3, 8003b04 <__swsetup_r+0x14>
 8003b00:	f7ff fece 	bl	80038a0 <__sinit>
 8003b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b08:	0719      	lsls	r1, r3, #28
 8003b0a:	d422      	bmi.n	8003b52 <__swsetup_r+0x62>
 8003b0c:	06da      	lsls	r2, r3, #27
 8003b0e:	d407      	bmi.n	8003b20 <__swsetup_r+0x30>
 8003b10:	2209      	movs	r2, #9
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b1e:	e033      	b.n	8003b88 <__swsetup_r+0x98>
 8003b20:	0758      	lsls	r0, r3, #29
 8003b22:	d512      	bpl.n	8003b4a <__swsetup_r+0x5a>
 8003b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b26:	b141      	cbz	r1, 8003b3a <__swsetup_r+0x4a>
 8003b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	d002      	beq.n	8003b36 <__swsetup_r+0x46>
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f913 	bl	8003d5c <_free_r>
 8003b36:	2300      	movs	r3, #0
 8003b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	2300      	movs	r3, #0
 8003b44:	6063      	str	r3, [r4, #4]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f043 0308 	orr.w	r3, r3, #8
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	b94b      	cbnz	r3, 8003b6a <__swsetup_r+0x7a>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b60:	d003      	beq.n	8003b6a <__swsetup_r+0x7a>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 fd93 	bl	8004690 <__smakebuf_r>
 8003b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b6e:	f013 0201 	ands.w	r2, r3, #1
 8003b72:	d00a      	beq.n	8003b8a <__swsetup_r+0x9a>
 8003b74:	2200      	movs	r2, #0
 8003b76:	60a2      	str	r2, [r4, #8]
 8003b78:	6962      	ldr	r2, [r4, #20]
 8003b7a:	4252      	negs	r2, r2
 8003b7c:	61a2      	str	r2, [r4, #24]
 8003b7e:	6922      	ldr	r2, [r4, #16]
 8003b80:	b942      	cbnz	r2, 8003b94 <__swsetup_r+0xa4>
 8003b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b86:	d1c5      	bne.n	8003b14 <__swsetup_r+0x24>
 8003b88:	bd38      	pop	{r3, r4, r5, pc}
 8003b8a:	0799      	lsls	r1, r3, #30
 8003b8c:	bf58      	it	pl
 8003b8e:	6962      	ldrpl	r2, [r4, #20]
 8003b90:	60a2      	str	r2, [r4, #8]
 8003b92:	e7f4      	b.n	8003b7e <__swsetup_r+0x8e>
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7f7      	b.n	8003b88 <__swsetup_r+0x98>
 8003b98:	2000001c 	.word	0x2000001c

08003b9c <memset>:
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <_close_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4d06      	ldr	r5, [pc, #24]	@ (8003bc8 <_close_r+0x1c>)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	f7fc fece 	bl	8000958 <_close>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_close_r+0x1a>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_close_r+0x1a>
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	20008b44 	.word	0x20008b44

08003bcc <_reclaim_reent>:
 8003bcc:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <_reclaim_reent+0xa8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	d04b      	beq.n	8003c70 <_reclaim_reent+0xa4>
 8003bd8:	69c3      	ldr	r3, [r0, #28]
 8003bda:	b1ab      	cbz	r3, 8003c08 <_reclaim_reent+0x3c>
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	b16b      	cbz	r3, 8003bfc <_reclaim_reent+0x30>
 8003be0:	2500      	movs	r5, #0
 8003be2:	69e3      	ldr	r3, [r4, #28]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	5959      	ldr	r1, [r3, r5]
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d13b      	bne.n	8003c64 <_reclaim_reent+0x98>
 8003bec:	3504      	adds	r5, #4
 8003bee:	2d80      	cmp	r5, #128	@ 0x80
 8003bf0:	d1f7      	bne.n	8003be2 <_reclaim_reent+0x16>
 8003bf2:	69e3      	ldr	r3, [r4, #28]
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	68d9      	ldr	r1, [r3, #12]
 8003bf8:	f000 f8b0 	bl	8003d5c <_free_r>
 8003bfc:	69e3      	ldr	r3, [r4, #28]
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	b111      	cbz	r1, 8003c08 <_reclaim_reent+0x3c>
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 f8aa 	bl	8003d5c <_free_r>
 8003c08:	6961      	ldr	r1, [r4, #20]
 8003c0a:	b111      	cbz	r1, 8003c12 <_reclaim_reent+0x46>
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f000 f8a5 	bl	8003d5c <_free_r>
 8003c12:	69e1      	ldr	r1, [r4, #28]
 8003c14:	b111      	cbz	r1, 8003c1c <_reclaim_reent+0x50>
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f8a0 	bl	8003d5c <_free_r>
 8003c1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c1e:	b111      	cbz	r1, 8003c26 <_reclaim_reent+0x5a>
 8003c20:	4620      	mov	r0, r4
 8003c22:	f000 f89b 	bl	8003d5c <_free_r>
 8003c26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c28:	b111      	cbz	r1, 8003c30 <_reclaim_reent+0x64>
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f000 f896 	bl	8003d5c <_free_r>
 8003c30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003c32:	b111      	cbz	r1, 8003c3a <_reclaim_reent+0x6e>
 8003c34:	4620      	mov	r0, r4
 8003c36:	f000 f891 	bl	8003d5c <_free_r>
 8003c3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003c3c:	b111      	cbz	r1, 8003c44 <_reclaim_reent+0x78>
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 f88c 	bl	8003d5c <_free_r>
 8003c44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003c46:	b111      	cbz	r1, 8003c4e <_reclaim_reent+0x82>
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f000 f887 	bl	8003d5c <_free_r>
 8003c4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003c50:	b111      	cbz	r1, 8003c58 <_reclaim_reent+0x8c>
 8003c52:	4620      	mov	r0, r4
 8003c54:	f000 f882 	bl	8003d5c <_free_r>
 8003c58:	6a23      	ldr	r3, [r4, #32]
 8003c5a:	b14b      	cbz	r3, 8003c70 <_reclaim_reent+0xa4>
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c62:	4718      	bx	r3
 8003c64:	680e      	ldr	r6, [r1, #0]
 8003c66:	4620      	mov	r0, r4
 8003c68:	f000 f878 	bl	8003d5c <_free_r>
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	e7bb      	b.n	8003be8 <_reclaim_reent+0x1c>
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
 8003c72:	bf00      	nop
 8003c74:	2000001c 	.word	0x2000001c

08003c78 <_lseek_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d07      	ldr	r5, [pc, #28]	@ (8003c98 <_lseek_r+0x20>)
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4608      	mov	r0, r1
 8003c80:	4611      	mov	r1, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7fc fe70 	bl	800096c <_lseek>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_lseek_r+0x1e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_lseek_r+0x1e>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20008b44 	.word	0x20008b44

08003c9c <_read_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4d07      	ldr	r5, [pc, #28]	@ (8003cbc <_read_r+0x20>)
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7fc fe44 	bl	8000938 <_read>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_read_r+0x1e>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_read_r+0x1e>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	20008b44 	.word	0x20008b44

08003cc0 <_write_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4d07      	ldr	r5, [pc, #28]	@ (8003ce0 <_write_r+0x20>)
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fc fcb6 	bl	8000640 <_write>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_write_r+0x1e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_write_r+0x1e>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20008b44 	.word	0x20008b44

08003ce4 <__errno>:
 8003ce4:	4b01      	ldr	r3, [pc, #4]	@ (8003cec <__errno+0x8>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000001c 	.word	0x2000001c

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d28 <__libc_init_array+0x38>)
 8003cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d2c <__libc_init_array+0x3c>)
 8003cf6:	1b64      	subs	r4, r4, r5
 8003cf8:	10a4      	asrs	r4, r4, #2
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	4d0b      	ldr	r5, [pc, #44]	@ (8003d30 <__libc_init_array+0x40>)
 8003d02:	4c0c      	ldr	r4, [pc, #48]	@ (8003d34 <__libc_init_array+0x44>)
 8003d04:	f000 fd32 	bl	800476c <_init>
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	08004870 	.word	0x08004870
 8003d2c:	08004870 	.word	0x08004870
 8003d30:	08004870 	.word	0x08004870
 8003d34:	08004874 	.word	0x08004874

08003d38 <__retarget_lock_init_recursive>:
 8003d38:	4770      	bx	lr

08003d3a <__retarget_lock_acquire_recursive>:
 8003d3a:	4770      	bx	lr

08003d3c <__retarget_lock_release_recursive>:
 8003d3c:	4770      	bx	lr

08003d3e <memcpy>:
 8003d3e:	440a      	add	r2, r1
 8003d40:	4291      	cmp	r1, r2
 8003d42:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003d46:	d100      	bne.n	8003d4a <memcpy+0xc>
 8003d48:	4770      	bx	lr
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d54:	4291      	cmp	r1, r2
 8003d56:	d1f9      	bne.n	8003d4c <memcpy+0xe>
 8003d58:	bd10      	pop	{r4, pc}
	...

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d041      	beq.n	8003de8 <_free_r+0x8c>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f000 f8e0 	bl	8003f34 <__malloc_lock>
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <_free_r+0x90>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	b933      	cbnz	r3, 8003d88 <_free_r+0x2c>
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6014      	str	r4, [r2, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d84:	f000 b8dc 	b.w	8003f40 <__malloc_unlock>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d908      	bls.n	8003d9e <_free_r+0x42>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	1821      	adds	r1, r4, r0
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	e7ed      	b.n	8003d7a <_free_r+0x1e>
 8003d9e:	461a      	mov	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b10b      	cbz	r3, 8003da8 <_free_r+0x4c>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d9fa      	bls.n	8003d9e <_free_r+0x42>
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	1850      	adds	r0, r2, r1
 8003dac:	42a0      	cmp	r0, r4
 8003dae:	d10b      	bne.n	8003dc8 <_free_r+0x6c>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4401      	add	r1, r0
 8003db4:	1850      	adds	r0, r2, r1
 8003db6:	4283      	cmp	r3, r0
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	d1e0      	bne.n	8003d7e <_free_r+0x22>
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	4408      	add	r0, r1
 8003dc4:	6010      	str	r0, [r2, #0]
 8003dc6:	e7da      	b.n	8003d7e <_free_r+0x22>
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x74>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e7d6      	b.n	8003d7e <_free_r+0x22>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	1821      	adds	r1, r4, r0
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf04      	itt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	bf04      	itt	eq
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	6054      	str	r4, [r2, #4]
 8003de6:	e7ca      	b.n	8003d7e <_free_r+0x22>
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	bf00      	nop
 8003dec:	20008b50 	.word	0x20008b50

08003df0 <sbrk_aligned>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e30 <sbrk_aligned+0x40>)
 8003df4:	460c      	mov	r4, r1
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b911      	cbnz	r1, 8003e02 <sbrk_aligned+0x12>
 8003dfc:	f000 fca6 	bl	800474c <_sbrk_r>
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 fca1 	bl	800474c <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d103      	bne.n	8003e16 <sbrk_aligned+0x26>
 8003e0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003e12:	4620      	mov	r0, r4
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d0f8      	beq.n	8003e12 <sbrk_aligned+0x22>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 fc92 	bl	800474c <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1f2      	bne.n	8003e12 <sbrk_aligned+0x22>
 8003e2c:	e7ef      	b.n	8003e0e <sbrk_aligned+0x1e>
 8003e2e:	bf00      	nop
 8003e30:	20008b4c 	.word	0x20008b4c

08003e34 <_malloc_r>:
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e38:	1ccd      	adds	r5, r1, #3
 8003e3a:	f025 0503 	bic.w	r5, r5, #3
 8003e3e:	3508      	adds	r5, #8
 8003e40:	2d0c      	cmp	r5, #12
 8003e42:	bf38      	it	cc
 8003e44:	250c      	movcc	r5, #12
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	4606      	mov	r6, r0
 8003e4a:	db01      	blt.n	8003e50 <_malloc_r+0x1c>
 8003e4c:	42a9      	cmp	r1, r5
 8003e4e:	d904      	bls.n	8003e5a <_malloc_r+0x26>
 8003e50:	230c      	movs	r3, #12
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	2000      	movs	r0, #0
 8003e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f30 <_malloc_r+0xfc>
 8003e5e:	f000 f869 	bl	8003f34 <__malloc_lock>
 8003e62:	f8d8 3000 	ldr.w	r3, [r8]
 8003e66:	461c      	mov	r4, r3
 8003e68:	bb44      	cbnz	r4, 8003ebc <_malloc_r+0x88>
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff ffbf 	bl	8003df0 <sbrk_aligned>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	4604      	mov	r4, r0
 8003e76:	d158      	bne.n	8003f2a <_malloc_r+0xf6>
 8003e78:	f8d8 4000 	ldr.w	r4, [r8]
 8003e7c:	4627      	mov	r7, r4
 8003e7e:	2f00      	cmp	r7, #0
 8003e80:	d143      	bne.n	8003f0a <_malloc_r+0xd6>
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	d04b      	beq.n	8003f1e <_malloc_r+0xea>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	eb04 0903 	add.w	r9, r4, r3
 8003e90:	f000 fc5c 	bl	800474c <_sbrk_r>
 8003e94:	4581      	cmp	r9, r0
 8003e96:	d142      	bne.n	8003f1e <_malloc_r+0xea>
 8003e98:	6821      	ldr	r1, [r4, #0]
 8003e9a:	1a6d      	subs	r5, r5, r1
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff ffa6 	bl	8003df0 <sbrk_aligned>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d03a      	beq.n	8003f1e <_malloc_r+0xea>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	442b      	add	r3, r5
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	bb62      	cbnz	r2, 8003f10 <_malloc_r+0xdc>
 8003eb6:	f8c8 7000 	str.w	r7, [r8]
 8003eba:	e00f      	b.n	8003edc <_malloc_r+0xa8>
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	1b52      	subs	r2, r2, r5
 8003ec0:	d420      	bmi.n	8003f04 <_malloc_r+0xd0>
 8003ec2:	2a0b      	cmp	r2, #11
 8003ec4:	d917      	bls.n	8003ef6 <_malloc_r+0xc2>
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	6025      	str	r5, [r4, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	6059      	strne	r1, [r3, #4]
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	bf08      	it	eq
 8003ed4:	f8c8 1000 	streq.w	r1, [r8]
 8003ed8:	5162      	str	r2, [r4, r5]
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f82f 	bl	8003f40 <__malloc_unlock>
 8003ee2:	f104 000b 	add.w	r0, r4, #11
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	f020 0007 	bic.w	r0, r0, #7
 8003eec:	1ac2      	subs	r2, r0, r3
 8003eee:	bf1c      	itt	ne
 8003ef0:	1a1b      	subne	r3, r3, r0
 8003ef2:	50a3      	strne	r3, [r4, r2]
 8003ef4:	e7af      	b.n	8003e56 <_malloc_r+0x22>
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	bf0c      	ite	eq
 8003efc:	f8c8 2000 	streq.w	r2, [r8]
 8003f00:	605a      	strne	r2, [r3, #4]
 8003f02:	e7eb      	b.n	8003edc <_malloc_r+0xa8>
 8003f04:	4623      	mov	r3, r4
 8003f06:	6864      	ldr	r4, [r4, #4]
 8003f08:	e7ae      	b.n	8003e68 <_malloc_r+0x34>
 8003f0a:	463c      	mov	r4, r7
 8003f0c:	687f      	ldr	r7, [r7, #4]
 8003f0e:	e7b6      	b.n	8003e7e <_malloc_r+0x4a>
 8003f10:	461a      	mov	r2, r3
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d1fb      	bne.n	8003f10 <_malloc_r+0xdc>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6053      	str	r3, [r2, #4]
 8003f1c:	e7de      	b.n	8003edc <_malloc_r+0xa8>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f80c 	bl	8003f40 <__malloc_unlock>
 8003f28:	e794      	b.n	8003e54 <_malloc_r+0x20>
 8003f2a:	6005      	str	r5, [r0, #0]
 8003f2c:	e7d6      	b.n	8003edc <_malloc_r+0xa8>
 8003f2e:	bf00      	nop
 8003f30:	20008b50 	.word	0x20008b50

08003f34 <__malloc_lock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__malloc_lock+0x8>)
 8003f36:	f7ff bf00 	b.w	8003d3a <__retarget_lock_acquire_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	20008b48 	.word	0x20008b48

08003f40 <__malloc_unlock>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__malloc_unlock+0x8>)
 8003f42:	f7ff befb 	b.w	8003d3c <__retarget_lock_release_recursive>
 8003f46:	bf00      	nop
 8003f48:	20008b48 	.word	0x20008b48

08003f4c <__sfputc_r>:
 8003f4c:	6893      	ldr	r3, [r2, #8]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	b410      	push	{r4}
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	da08      	bge.n	8003f6a <__sfputc_r+0x1e>
 8003f58:	6994      	ldr	r4, [r2, #24]
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	db01      	blt.n	8003f62 <__sfputc_r+0x16>
 8003f5e:	290a      	cmp	r1, #10
 8003f60:	d103      	bne.n	8003f6a <__sfputc_r+0x1e>
 8003f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f66:	f7ff bd84 	b.w	8003a72 <__swbuf_r>
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	1c58      	adds	r0, r3, #1
 8003f6e:	6010      	str	r0, [r2, #0]
 8003f70:	7019      	strb	r1, [r3, #0]
 8003f72:	4608      	mov	r0, r1
 8003f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <__sfputs_r>:
 8003f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	460f      	mov	r7, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	18d5      	adds	r5, r2, r3
 8003f84:	42ac      	cmp	r4, r5
 8003f86:	d101      	bne.n	8003f8c <__sfputs_r+0x12>
 8003f88:	2000      	movs	r0, #0
 8003f8a:	e007      	b.n	8003f9c <__sfputs_r+0x22>
 8003f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f90:	463a      	mov	r2, r7
 8003f92:	4630      	mov	r0, r6
 8003f94:	f7ff ffda 	bl	8003f4c <__sfputc_r>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d1f3      	bne.n	8003f84 <__sfputs_r+0xa>
 8003f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fa0 <_vfiprintf_r>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	460d      	mov	r5, r1
 8003fa6:	b09d      	sub	sp, #116	@ 0x74
 8003fa8:	4614      	mov	r4, r2
 8003faa:	4698      	mov	r8, r3
 8003fac:	4606      	mov	r6, r0
 8003fae:	b118      	cbz	r0, 8003fb8 <_vfiprintf_r+0x18>
 8003fb0:	6a03      	ldr	r3, [r0, #32]
 8003fb2:	b90b      	cbnz	r3, 8003fb8 <_vfiprintf_r+0x18>
 8003fb4:	f7ff fc74 	bl	80038a0 <__sinit>
 8003fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fba:	07d9      	lsls	r1, r3, #31
 8003fbc:	d405      	bmi.n	8003fca <_vfiprintf_r+0x2a>
 8003fbe:	89ab      	ldrh	r3, [r5, #12]
 8003fc0:	059a      	lsls	r2, r3, #22
 8003fc2:	d402      	bmi.n	8003fca <_vfiprintf_r+0x2a>
 8003fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fc6:	f7ff feb8 	bl	8003d3a <__retarget_lock_acquire_recursive>
 8003fca:	89ab      	ldrh	r3, [r5, #12]
 8003fcc:	071b      	lsls	r3, r3, #28
 8003fce:	d501      	bpl.n	8003fd4 <_vfiprintf_r+0x34>
 8003fd0:	692b      	ldr	r3, [r5, #16]
 8003fd2:	b99b      	cbnz	r3, 8003ffc <_vfiprintf_r+0x5c>
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f7ff fd8a 	bl	8003af0 <__swsetup_r>
 8003fdc:	b170      	cbz	r0, 8003ffc <_vfiprintf_r+0x5c>
 8003fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fe0:	07dc      	lsls	r4, r3, #31
 8003fe2:	d504      	bpl.n	8003fee <_vfiprintf_r+0x4e>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fe8:	b01d      	add	sp, #116	@ 0x74
 8003fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fee:	89ab      	ldrh	r3, [r5, #12]
 8003ff0:	0598      	lsls	r0, r3, #22
 8003ff2:	d4f7      	bmi.n	8003fe4 <_vfiprintf_r+0x44>
 8003ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ff6:	f7ff fea1 	bl	8003d3c <__retarget_lock_release_recursive>
 8003ffa:	e7f3      	b.n	8003fe4 <_vfiprintf_r+0x44>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004000:	2320      	movs	r3, #32
 8004002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004006:	f8cd 800c 	str.w	r8, [sp, #12]
 800400a:	2330      	movs	r3, #48	@ 0x30
 800400c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041bc <_vfiprintf_r+0x21c>
 8004010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004014:	f04f 0901 	mov.w	r9, #1
 8004018:	4623      	mov	r3, r4
 800401a:	469a      	mov	sl, r3
 800401c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004020:	b10a      	cbz	r2, 8004026 <_vfiprintf_r+0x86>
 8004022:	2a25      	cmp	r2, #37	@ 0x25
 8004024:	d1f9      	bne.n	800401a <_vfiprintf_r+0x7a>
 8004026:	ebba 0b04 	subs.w	fp, sl, r4
 800402a:	d00b      	beq.n	8004044 <_vfiprintf_r+0xa4>
 800402c:	465b      	mov	r3, fp
 800402e:	4622      	mov	r2, r4
 8004030:	4629      	mov	r1, r5
 8004032:	4630      	mov	r0, r6
 8004034:	f7ff ffa1 	bl	8003f7a <__sfputs_r>
 8004038:	3001      	adds	r0, #1
 800403a:	f000 80a7 	beq.w	800418c <_vfiprintf_r+0x1ec>
 800403e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004040:	445a      	add	r2, fp
 8004042:	9209      	str	r2, [sp, #36]	@ 0x24
 8004044:	f89a 3000 	ldrb.w	r3, [sl]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 809f 	beq.w	800418c <_vfiprintf_r+0x1ec>
 800404e:	2300      	movs	r3, #0
 8004050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004058:	f10a 0a01 	add.w	sl, sl, #1
 800405c:	9304      	str	r3, [sp, #16]
 800405e:	9307      	str	r3, [sp, #28]
 8004060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004064:	931a      	str	r3, [sp, #104]	@ 0x68
 8004066:	4654      	mov	r4, sl
 8004068:	2205      	movs	r2, #5
 800406a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406e:	4853      	ldr	r0, [pc, #332]	@ (80041bc <_vfiprintf_r+0x21c>)
 8004070:	f7fc f8ae 	bl	80001d0 <memchr>
 8004074:	9a04      	ldr	r2, [sp, #16]
 8004076:	b9d8      	cbnz	r0, 80040b0 <_vfiprintf_r+0x110>
 8004078:	06d1      	lsls	r1, r2, #27
 800407a:	bf44      	itt	mi
 800407c:	2320      	movmi	r3, #32
 800407e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004082:	0713      	lsls	r3, r2, #28
 8004084:	bf44      	itt	mi
 8004086:	232b      	movmi	r3, #43	@ 0x2b
 8004088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800408c:	f89a 3000 	ldrb.w	r3, [sl]
 8004090:	2b2a      	cmp	r3, #42	@ 0x2a
 8004092:	d015      	beq.n	80040c0 <_vfiprintf_r+0x120>
 8004094:	9a07      	ldr	r2, [sp, #28]
 8004096:	4654      	mov	r4, sl
 8004098:	2000      	movs	r0, #0
 800409a:	f04f 0c0a 	mov.w	ip, #10
 800409e:	4621      	mov	r1, r4
 80040a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040a4:	3b30      	subs	r3, #48	@ 0x30
 80040a6:	2b09      	cmp	r3, #9
 80040a8:	d94b      	bls.n	8004142 <_vfiprintf_r+0x1a2>
 80040aa:	b1b0      	cbz	r0, 80040da <_vfiprintf_r+0x13a>
 80040ac:	9207      	str	r2, [sp, #28]
 80040ae:	e014      	b.n	80040da <_vfiprintf_r+0x13a>
 80040b0:	eba0 0308 	sub.w	r3, r0, r8
 80040b4:	fa09 f303 	lsl.w	r3, r9, r3
 80040b8:	4313      	orrs	r3, r2
 80040ba:	9304      	str	r3, [sp, #16]
 80040bc:	46a2      	mov	sl, r4
 80040be:	e7d2      	b.n	8004066 <_vfiprintf_r+0xc6>
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	1d19      	adds	r1, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	9103      	str	r1, [sp, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bfbb      	ittet	lt
 80040cc:	425b      	neglt	r3, r3
 80040ce:	f042 0202 	orrlt.w	r2, r2, #2
 80040d2:	9307      	strge	r3, [sp, #28]
 80040d4:	9307      	strlt	r3, [sp, #28]
 80040d6:	bfb8      	it	lt
 80040d8:	9204      	strlt	r2, [sp, #16]
 80040da:	7823      	ldrb	r3, [r4, #0]
 80040dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80040de:	d10a      	bne.n	80040f6 <_vfiprintf_r+0x156>
 80040e0:	7863      	ldrb	r3, [r4, #1]
 80040e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e4:	d132      	bne.n	800414c <_vfiprintf_r+0x1ac>
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	1d1a      	adds	r2, r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	9203      	str	r2, [sp, #12]
 80040ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040f2:	3402      	adds	r4, #2
 80040f4:	9305      	str	r3, [sp, #20]
 80040f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80041cc <_vfiprintf_r+0x22c>
 80040fa:	7821      	ldrb	r1, [r4, #0]
 80040fc:	2203      	movs	r2, #3
 80040fe:	4650      	mov	r0, sl
 8004100:	f7fc f866 	bl	80001d0 <memchr>
 8004104:	b138      	cbz	r0, 8004116 <_vfiprintf_r+0x176>
 8004106:	9b04      	ldr	r3, [sp, #16]
 8004108:	eba0 000a 	sub.w	r0, r0, sl
 800410c:	2240      	movs	r2, #64	@ 0x40
 800410e:	4082      	lsls	r2, r0
 8004110:	4313      	orrs	r3, r2
 8004112:	3401      	adds	r4, #1
 8004114:	9304      	str	r3, [sp, #16]
 8004116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411a:	4829      	ldr	r0, [pc, #164]	@ (80041c0 <_vfiprintf_r+0x220>)
 800411c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004120:	2206      	movs	r2, #6
 8004122:	f7fc f855 	bl	80001d0 <memchr>
 8004126:	2800      	cmp	r0, #0
 8004128:	d03f      	beq.n	80041aa <_vfiprintf_r+0x20a>
 800412a:	4b26      	ldr	r3, [pc, #152]	@ (80041c4 <_vfiprintf_r+0x224>)
 800412c:	bb1b      	cbnz	r3, 8004176 <_vfiprintf_r+0x1d6>
 800412e:	9b03      	ldr	r3, [sp, #12]
 8004130:	3307      	adds	r3, #7
 8004132:	f023 0307 	bic.w	r3, r3, #7
 8004136:	3308      	adds	r3, #8
 8004138:	9303      	str	r3, [sp, #12]
 800413a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800413c:	443b      	add	r3, r7
 800413e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004140:	e76a      	b.n	8004018 <_vfiprintf_r+0x78>
 8004142:	fb0c 3202 	mla	r2, ip, r2, r3
 8004146:	460c      	mov	r4, r1
 8004148:	2001      	movs	r0, #1
 800414a:	e7a8      	b.n	800409e <_vfiprintf_r+0xfe>
 800414c:	2300      	movs	r3, #0
 800414e:	3401      	adds	r4, #1
 8004150:	9305      	str	r3, [sp, #20]
 8004152:	4619      	mov	r1, r3
 8004154:	f04f 0c0a 	mov.w	ip, #10
 8004158:	4620      	mov	r0, r4
 800415a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800415e:	3a30      	subs	r2, #48	@ 0x30
 8004160:	2a09      	cmp	r2, #9
 8004162:	d903      	bls.n	800416c <_vfiprintf_r+0x1cc>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0c6      	beq.n	80040f6 <_vfiprintf_r+0x156>
 8004168:	9105      	str	r1, [sp, #20]
 800416a:	e7c4      	b.n	80040f6 <_vfiprintf_r+0x156>
 800416c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004170:	4604      	mov	r4, r0
 8004172:	2301      	movs	r3, #1
 8004174:	e7f0      	b.n	8004158 <_vfiprintf_r+0x1b8>
 8004176:	ab03      	add	r3, sp, #12
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	462a      	mov	r2, r5
 800417c:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <_vfiprintf_r+0x228>)
 800417e:	a904      	add	r1, sp, #16
 8004180:	4630      	mov	r0, r6
 8004182:	f3af 8000 	nop.w
 8004186:	4607      	mov	r7, r0
 8004188:	1c78      	adds	r0, r7, #1
 800418a:	d1d6      	bne.n	800413a <_vfiprintf_r+0x19a>
 800418c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800418e:	07d9      	lsls	r1, r3, #31
 8004190:	d405      	bmi.n	800419e <_vfiprintf_r+0x1fe>
 8004192:	89ab      	ldrh	r3, [r5, #12]
 8004194:	059a      	lsls	r2, r3, #22
 8004196:	d402      	bmi.n	800419e <_vfiprintf_r+0x1fe>
 8004198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800419a:	f7ff fdcf 	bl	8003d3c <__retarget_lock_release_recursive>
 800419e:	89ab      	ldrh	r3, [r5, #12]
 80041a0:	065b      	lsls	r3, r3, #25
 80041a2:	f53f af1f 	bmi.w	8003fe4 <_vfiprintf_r+0x44>
 80041a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041a8:	e71e      	b.n	8003fe8 <_vfiprintf_r+0x48>
 80041aa:	ab03      	add	r3, sp, #12
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	462a      	mov	r2, r5
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <_vfiprintf_r+0x228>)
 80041b2:	a904      	add	r1, sp, #16
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f879 	bl	80042ac <_printf_i>
 80041ba:	e7e4      	b.n	8004186 <_vfiprintf_r+0x1e6>
 80041bc:	08004834 	.word	0x08004834
 80041c0:	0800483e 	.word	0x0800483e
 80041c4:	00000000 	.word	0x00000000
 80041c8:	08003f7b 	.word	0x08003f7b
 80041cc:	0800483a 	.word	0x0800483a

080041d0 <_printf_common>:
 80041d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	4616      	mov	r6, r2
 80041d6:	4698      	mov	r8, r3
 80041d8:	688a      	ldr	r2, [r1, #8]
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bfb8      	it	lt
 80041e4:	4613      	movlt	r3, r2
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041ec:	4607      	mov	r7, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b10a      	cbz	r2, 80041f6 <_printf_common+0x26>
 80041f2:	3301      	adds	r3, #1
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	0699      	lsls	r1, r3, #26
 80041fa:	bf42      	ittt	mi
 80041fc:	6833      	ldrmi	r3, [r6, #0]
 80041fe:	3302      	addmi	r3, #2
 8004200:	6033      	strmi	r3, [r6, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	f015 0506 	ands.w	r5, r5, #6
 8004208:	d106      	bne.n	8004218 <_printf_common+0x48>
 800420a:	f104 0a19 	add.w	sl, r4, #25
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	6832      	ldr	r2, [r6, #0]
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	42ab      	cmp	r3, r5
 8004216:	dc26      	bgt.n	8004266 <_printf_common+0x96>
 8004218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	3b00      	subs	r3, #0
 8004220:	bf18      	it	ne
 8004222:	2301      	movne	r3, #1
 8004224:	0692      	lsls	r2, r2, #26
 8004226:	d42b      	bmi.n	8004280 <_printf_common+0xb0>
 8004228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800422c:	4641      	mov	r1, r8
 800422e:	4638      	mov	r0, r7
 8004230:	47c8      	blx	r9
 8004232:	3001      	adds	r0, #1
 8004234:	d01e      	beq.n	8004274 <_printf_common+0xa4>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	f003 0306 	and.w	r3, r3, #6
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf02      	ittt	eq
 8004242:	68e5      	ldreq	r5, [r4, #12]
 8004244:	6833      	ldreq	r3, [r6, #0]
 8004246:	1aed      	subeq	r5, r5, r3
 8004248:	68a3      	ldr	r3, [r4, #8]
 800424a:	bf0c      	ite	eq
 800424c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004250:	2500      	movne	r5, #0
 8004252:	4293      	cmp	r3, r2
 8004254:	bfc4      	itt	gt
 8004256:	1a9b      	subgt	r3, r3, r2
 8004258:	18ed      	addgt	r5, r5, r3
 800425a:	2600      	movs	r6, #0
 800425c:	341a      	adds	r4, #26
 800425e:	42b5      	cmp	r5, r6
 8004260:	d11a      	bne.n	8004298 <_printf_common+0xc8>
 8004262:	2000      	movs	r0, #0
 8004264:	e008      	b.n	8004278 <_printf_common+0xa8>
 8004266:	2301      	movs	r3, #1
 8004268:	4652      	mov	r2, sl
 800426a:	4641      	mov	r1, r8
 800426c:	4638      	mov	r0, r7
 800426e:	47c8      	blx	r9
 8004270:	3001      	adds	r0, #1
 8004272:	d103      	bne.n	800427c <_printf_common+0xac>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	3501      	adds	r5, #1
 800427e:	e7c6      	b.n	800420e <_printf_common+0x3e>
 8004280:	18e1      	adds	r1, r4, r3
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	2030      	movs	r0, #48	@ 0x30
 8004286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800428a:	4422      	add	r2, r4
 800428c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004294:	3302      	adds	r3, #2
 8004296:	e7c7      	b.n	8004228 <_printf_common+0x58>
 8004298:	2301      	movs	r3, #1
 800429a:	4622      	mov	r2, r4
 800429c:	4641      	mov	r1, r8
 800429e:	4638      	mov	r0, r7
 80042a0:	47c8      	blx	r9
 80042a2:	3001      	adds	r0, #1
 80042a4:	d0e6      	beq.n	8004274 <_printf_common+0xa4>
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7d9      	b.n	800425e <_printf_common+0x8e>
	...

080042ac <_printf_i>:
 80042ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	7e0f      	ldrb	r7, [r1, #24]
 80042b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042b4:	2f78      	cmp	r7, #120	@ 0x78
 80042b6:	4691      	mov	r9, r2
 80042b8:	4680      	mov	r8, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	469a      	mov	sl, r3
 80042be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042c2:	d807      	bhi.n	80042d4 <_printf_i+0x28>
 80042c4:	2f62      	cmp	r7, #98	@ 0x62
 80042c6:	d80a      	bhi.n	80042de <_printf_i+0x32>
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	f000 80d2 	beq.w	8004472 <_printf_i+0x1c6>
 80042ce:	2f58      	cmp	r7, #88	@ 0x58
 80042d0:	f000 80b9 	beq.w	8004446 <_printf_i+0x19a>
 80042d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042dc:	e03a      	b.n	8004354 <_printf_i+0xa8>
 80042de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042e2:	2b15      	cmp	r3, #21
 80042e4:	d8f6      	bhi.n	80042d4 <_printf_i+0x28>
 80042e6:	a101      	add	r1, pc, #4	@ (adr r1, 80042ec <_printf_i+0x40>)
 80042e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004359 	.word	0x08004359
 80042f4:	080042d5 	.word	0x080042d5
 80042f8:	080042d5 	.word	0x080042d5
 80042fc:	080042d5 	.word	0x080042d5
 8004300:	080042d5 	.word	0x080042d5
 8004304:	08004359 	.word	0x08004359
 8004308:	080042d5 	.word	0x080042d5
 800430c:	080042d5 	.word	0x080042d5
 8004310:	080042d5 	.word	0x080042d5
 8004314:	080042d5 	.word	0x080042d5
 8004318:	08004459 	.word	0x08004459
 800431c:	08004383 	.word	0x08004383
 8004320:	08004413 	.word	0x08004413
 8004324:	080042d5 	.word	0x080042d5
 8004328:	080042d5 	.word	0x080042d5
 800432c:	0800447b 	.word	0x0800447b
 8004330:	080042d5 	.word	0x080042d5
 8004334:	08004383 	.word	0x08004383
 8004338:	080042d5 	.word	0x080042d5
 800433c:	080042d5 	.word	0x080042d5
 8004340:	0800441b 	.word	0x0800441b
 8004344:	6833      	ldr	r3, [r6, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6032      	str	r2, [r6, #0]
 800434c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004354:	2301      	movs	r3, #1
 8004356:	e09d      	b.n	8004494 <_printf_i+0x1e8>
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	6820      	ldr	r0, [r4, #0]
 800435c:	1d19      	adds	r1, r3, #4
 800435e:	6031      	str	r1, [r6, #0]
 8004360:	0606      	lsls	r6, r0, #24
 8004362:	d501      	bpl.n	8004368 <_printf_i+0xbc>
 8004364:	681d      	ldr	r5, [r3, #0]
 8004366:	e003      	b.n	8004370 <_printf_i+0xc4>
 8004368:	0645      	lsls	r5, r0, #25
 800436a:	d5fb      	bpl.n	8004364 <_printf_i+0xb8>
 800436c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004370:	2d00      	cmp	r5, #0
 8004372:	da03      	bge.n	800437c <_printf_i+0xd0>
 8004374:	232d      	movs	r3, #45	@ 0x2d
 8004376:	426d      	negs	r5, r5
 8004378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800437c:	4859      	ldr	r0, [pc, #356]	@ (80044e4 <_printf_i+0x238>)
 800437e:	230a      	movs	r3, #10
 8004380:	e011      	b.n	80043a6 <_printf_i+0xfa>
 8004382:	6821      	ldr	r1, [r4, #0]
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	0608      	lsls	r0, r1, #24
 8004388:	f853 5b04 	ldr.w	r5, [r3], #4
 800438c:	d402      	bmi.n	8004394 <_printf_i+0xe8>
 800438e:	0649      	lsls	r1, r1, #25
 8004390:	bf48      	it	mi
 8004392:	b2ad      	uxthmi	r5, r5
 8004394:	2f6f      	cmp	r7, #111	@ 0x6f
 8004396:	4853      	ldr	r0, [pc, #332]	@ (80044e4 <_printf_i+0x238>)
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	bf14      	ite	ne
 800439c:	230a      	movne	r3, #10
 800439e:	2308      	moveq	r3, #8
 80043a0:	2100      	movs	r1, #0
 80043a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043a6:	6866      	ldr	r6, [r4, #4]
 80043a8:	60a6      	str	r6, [r4, #8]
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	bfa2      	ittt	ge
 80043ae:	6821      	ldrge	r1, [r4, #0]
 80043b0:	f021 0104 	bicge.w	r1, r1, #4
 80043b4:	6021      	strge	r1, [r4, #0]
 80043b6:	b90d      	cbnz	r5, 80043bc <_printf_i+0x110>
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	d04b      	beq.n	8004454 <_printf_i+0x1a8>
 80043bc:	4616      	mov	r6, r2
 80043be:	fbb5 f1f3 	udiv	r1, r5, r3
 80043c2:	fb03 5711 	mls	r7, r3, r1, r5
 80043c6:	5dc7      	ldrb	r7, [r0, r7]
 80043c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043cc:	462f      	mov	r7, r5
 80043ce:	42bb      	cmp	r3, r7
 80043d0:	460d      	mov	r5, r1
 80043d2:	d9f4      	bls.n	80043be <_printf_i+0x112>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10b      	bne.n	80043f0 <_printf_i+0x144>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	07df      	lsls	r7, r3, #31
 80043dc:	d508      	bpl.n	80043f0 <_printf_i+0x144>
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	6861      	ldr	r1, [r4, #4]
 80043e2:	4299      	cmp	r1, r3
 80043e4:	bfde      	ittt	le
 80043e6:	2330      	movle	r3, #48	@ 0x30
 80043e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80043f0:	1b92      	subs	r2, r2, r6
 80043f2:	6122      	str	r2, [r4, #16]
 80043f4:	f8cd a000 	str.w	sl, [sp]
 80043f8:	464b      	mov	r3, r9
 80043fa:	aa03      	add	r2, sp, #12
 80043fc:	4621      	mov	r1, r4
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff fee6 	bl	80041d0 <_printf_common>
 8004404:	3001      	adds	r0, #1
 8004406:	d14a      	bne.n	800449e <_printf_i+0x1f2>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800440c:	b004      	add	sp, #16
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f043 0320 	orr.w	r3, r3, #32
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	4833      	ldr	r0, [pc, #204]	@ (80044e8 <_printf_i+0x23c>)
 800441c:	2778      	movs	r7, #120	@ 0x78
 800441e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6831      	ldr	r1, [r6, #0]
 8004426:	061f      	lsls	r7, r3, #24
 8004428:	f851 5b04 	ldr.w	r5, [r1], #4
 800442c:	d402      	bmi.n	8004434 <_printf_i+0x188>
 800442e:	065f      	lsls	r7, r3, #25
 8004430:	bf48      	it	mi
 8004432:	b2ad      	uxthmi	r5, r5
 8004434:	6031      	str	r1, [r6, #0]
 8004436:	07d9      	lsls	r1, r3, #31
 8004438:	bf44      	itt	mi
 800443a:	f043 0320 	orrmi.w	r3, r3, #32
 800443e:	6023      	strmi	r3, [r4, #0]
 8004440:	b11d      	cbz	r5, 800444a <_printf_i+0x19e>
 8004442:	2310      	movs	r3, #16
 8004444:	e7ac      	b.n	80043a0 <_printf_i+0xf4>
 8004446:	4827      	ldr	r0, [pc, #156]	@ (80044e4 <_printf_i+0x238>)
 8004448:	e7e9      	b.n	800441e <_printf_i+0x172>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	f023 0320 	bic.w	r3, r3, #32
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	e7f6      	b.n	8004442 <_printf_i+0x196>
 8004454:	4616      	mov	r6, r2
 8004456:	e7bd      	b.n	80043d4 <_printf_i+0x128>
 8004458:	6833      	ldr	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	6961      	ldr	r1, [r4, #20]
 800445e:	1d18      	adds	r0, r3, #4
 8004460:	6030      	str	r0, [r6, #0]
 8004462:	062e      	lsls	r6, r5, #24
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	d501      	bpl.n	800446c <_printf_i+0x1c0>
 8004468:	6019      	str	r1, [r3, #0]
 800446a:	e002      	b.n	8004472 <_printf_i+0x1c6>
 800446c:	0668      	lsls	r0, r5, #25
 800446e:	d5fb      	bpl.n	8004468 <_printf_i+0x1bc>
 8004470:	8019      	strh	r1, [r3, #0]
 8004472:	2300      	movs	r3, #0
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	4616      	mov	r6, r2
 8004478:	e7bc      	b.n	80043f4 <_printf_i+0x148>
 800447a:	6833      	ldr	r3, [r6, #0]
 800447c:	1d1a      	adds	r2, r3, #4
 800447e:	6032      	str	r2, [r6, #0]
 8004480:	681e      	ldr	r6, [r3, #0]
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	2100      	movs	r1, #0
 8004486:	4630      	mov	r0, r6
 8004488:	f7fb fea2 	bl	80001d0 <memchr>
 800448c:	b108      	cbz	r0, 8004492 <_printf_i+0x1e6>
 800448e:	1b80      	subs	r0, r0, r6
 8004490:	6060      	str	r0, [r4, #4]
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	2300      	movs	r3, #0
 8004498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800449c:	e7aa      	b.n	80043f4 <_printf_i+0x148>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	4632      	mov	r2, r6
 80044a2:	4649      	mov	r1, r9
 80044a4:	4640      	mov	r0, r8
 80044a6:	47d0      	blx	sl
 80044a8:	3001      	adds	r0, #1
 80044aa:	d0ad      	beq.n	8004408 <_printf_i+0x15c>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	079b      	lsls	r3, r3, #30
 80044b0:	d413      	bmi.n	80044da <_printf_i+0x22e>
 80044b2:	68e0      	ldr	r0, [r4, #12]
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	4298      	cmp	r0, r3
 80044b8:	bfb8      	it	lt
 80044ba:	4618      	movlt	r0, r3
 80044bc:	e7a6      	b.n	800440c <_printf_i+0x160>
 80044be:	2301      	movs	r3, #1
 80044c0:	4632      	mov	r2, r6
 80044c2:	4649      	mov	r1, r9
 80044c4:	4640      	mov	r0, r8
 80044c6:	47d0      	blx	sl
 80044c8:	3001      	adds	r0, #1
 80044ca:	d09d      	beq.n	8004408 <_printf_i+0x15c>
 80044cc:	3501      	adds	r5, #1
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	9903      	ldr	r1, [sp, #12]
 80044d2:	1a5b      	subs	r3, r3, r1
 80044d4:	42ab      	cmp	r3, r5
 80044d6:	dcf2      	bgt.n	80044be <_printf_i+0x212>
 80044d8:	e7eb      	b.n	80044b2 <_printf_i+0x206>
 80044da:	2500      	movs	r5, #0
 80044dc:	f104 0619 	add.w	r6, r4, #25
 80044e0:	e7f5      	b.n	80044ce <_printf_i+0x222>
 80044e2:	bf00      	nop
 80044e4:	08004845 	.word	0x08004845
 80044e8:	08004856 	.word	0x08004856

080044ec <__sflush_r>:
 80044ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f4:	0716      	lsls	r6, r2, #28
 80044f6:	4605      	mov	r5, r0
 80044f8:	460c      	mov	r4, r1
 80044fa:	d454      	bmi.n	80045a6 <__sflush_r+0xba>
 80044fc:	684b      	ldr	r3, [r1, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dc02      	bgt.n	8004508 <__sflush_r+0x1c>
 8004502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	dd48      	ble.n	800459a <__sflush_r+0xae>
 8004508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800450a:	2e00      	cmp	r6, #0
 800450c:	d045      	beq.n	800459a <__sflush_r+0xae>
 800450e:	2300      	movs	r3, #0
 8004510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004514:	682f      	ldr	r7, [r5, #0]
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	d030      	beq.n	800457e <__sflush_r+0x92>
 800451c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	0759      	lsls	r1, r3, #29
 8004522:	d505      	bpl.n	8004530 <__sflush_r+0x44>
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	1ad2      	subs	r2, r2, r3
 8004528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800452a:	b10b      	cbz	r3, 8004530 <__sflush_r+0x44>
 800452c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004534:	6a21      	ldr	r1, [r4, #32]
 8004536:	4628      	mov	r0, r5
 8004538:	47b0      	blx	r6
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	d106      	bne.n	800454e <__sflush_r+0x62>
 8004540:	6829      	ldr	r1, [r5, #0]
 8004542:	291d      	cmp	r1, #29
 8004544:	d82b      	bhi.n	800459e <__sflush_r+0xb2>
 8004546:	4a2a      	ldr	r2, [pc, #168]	@ (80045f0 <__sflush_r+0x104>)
 8004548:	410a      	asrs	r2, r1
 800454a:	07d6      	lsls	r6, r2, #31
 800454c:	d427      	bmi.n	800459e <__sflush_r+0xb2>
 800454e:	2200      	movs	r2, #0
 8004550:	6062      	str	r2, [r4, #4]
 8004552:	04d9      	lsls	r1, r3, #19
 8004554:	6922      	ldr	r2, [r4, #16]
 8004556:	6022      	str	r2, [r4, #0]
 8004558:	d504      	bpl.n	8004564 <__sflush_r+0x78>
 800455a:	1c42      	adds	r2, r0, #1
 800455c:	d101      	bne.n	8004562 <__sflush_r+0x76>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	b903      	cbnz	r3, 8004564 <__sflush_r+0x78>
 8004562:	6560      	str	r0, [r4, #84]	@ 0x54
 8004564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004566:	602f      	str	r7, [r5, #0]
 8004568:	b1b9      	cbz	r1, 800459a <__sflush_r+0xae>
 800456a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800456e:	4299      	cmp	r1, r3
 8004570:	d002      	beq.n	8004578 <__sflush_r+0x8c>
 8004572:	4628      	mov	r0, r5
 8004574:	f7ff fbf2 	bl	8003d5c <_free_r>
 8004578:	2300      	movs	r3, #0
 800457a:	6363      	str	r3, [r4, #52]	@ 0x34
 800457c:	e00d      	b.n	800459a <__sflush_r+0xae>
 800457e:	2301      	movs	r3, #1
 8004580:	4628      	mov	r0, r5
 8004582:	47b0      	blx	r6
 8004584:	4602      	mov	r2, r0
 8004586:	1c50      	adds	r0, r2, #1
 8004588:	d1c9      	bne.n	800451e <__sflush_r+0x32>
 800458a:	682b      	ldr	r3, [r5, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0c6      	beq.n	800451e <__sflush_r+0x32>
 8004590:	2b1d      	cmp	r3, #29
 8004592:	d001      	beq.n	8004598 <__sflush_r+0xac>
 8004594:	2b16      	cmp	r3, #22
 8004596:	d11e      	bne.n	80045d6 <__sflush_r+0xea>
 8004598:	602f      	str	r7, [r5, #0]
 800459a:	2000      	movs	r0, #0
 800459c:	e022      	b.n	80045e4 <__sflush_r+0xf8>
 800459e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a2:	b21b      	sxth	r3, r3
 80045a4:	e01b      	b.n	80045de <__sflush_r+0xf2>
 80045a6:	690f      	ldr	r7, [r1, #16]
 80045a8:	2f00      	cmp	r7, #0
 80045aa:	d0f6      	beq.n	800459a <__sflush_r+0xae>
 80045ac:	0793      	lsls	r3, r2, #30
 80045ae:	680e      	ldr	r6, [r1, #0]
 80045b0:	bf08      	it	eq
 80045b2:	694b      	ldreq	r3, [r1, #20]
 80045b4:	600f      	str	r7, [r1, #0]
 80045b6:	bf18      	it	ne
 80045b8:	2300      	movne	r3, #0
 80045ba:	eba6 0807 	sub.w	r8, r6, r7
 80045be:	608b      	str	r3, [r1, #8]
 80045c0:	f1b8 0f00 	cmp.w	r8, #0
 80045c4:	dde9      	ble.n	800459a <__sflush_r+0xae>
 80045c6:	6a21      	ldr	r1, [r4, #32]
 80045c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045ca:	4643      	mov	r3, r8
 80045cc:	463a      	mov	r2, r7
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b0      	blx	r6
 80045d2:	2800      	cmp	r0, #0
 80045d4:	dc08      	bgt.n	80045e8 <__sflush_r+0xfc>
 80045d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e8:	4407      	add	r7, r0
 80045ea:	eba8 0800 	sub.w	r8, r8, r0
 80045ee:	e7e7      	b.n	80045c0 <__sflush_r+0xd4>
 80045f0:	dfbffffe 	.word	0xdfbffffe

080045f4 <_fflush_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	690b      	ldr	r3, [r1, #16]
 80045f8:	4605      	mov	r5, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	b913      	cbnz	r3, 8004604 <_fflush_r+0x10>
 80045fe:	2500      	movs	r5, #0
 8004600:	4628      	mov	r0, r5
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	b118      	cbz	r0, 800460e <_fflush_r+0x1a>
 8004606:	6a03      	ldr	r3, [r0, #32]
 8004608:	b90b      	cbnz	r3, 800460e <_fflush_r+0x1a>
 800460a:	f7ff f949 	bl	80038a0 <__sinit>
 800460e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f3      	beq.n	80045fe <_fflush_r+0xa>
 8004616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004618:	07d0      	lsls	r0, r2, #31
 800461a:	d404      	bmi.n	8004626 <_fflush_r+0x32>
 800461c:	0599      	lsls	r1, r3, #22
 800461e:	d402      	bmi.n	8004626 <_fflush_r+0x32>
 8004620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004622:	f7ff fb8a 	bl	8003d3a <__retarget_lock_acquire_recursive>
 8004626:	4628      	mov	r0, r5
 8004628:	4621      	mov	r1, r4
 800462a:	f7ff ff5f 	bl	80044ec <__sflush_r>
 800462e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004630:	07da      	lsls	r2, r3, #31
 8004632:	4605      	mov	r5, r0
 8004634:	d4e4      	bmi.n	8004600 <_fflush_r+0xc>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	059b      	lsls	r3, r3, #22
 800463a:	d4e1      	bmi.n	8004600 <_fflush_r+0xc>
 800463c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800463e:	f7ff fb7d 	bl	8003d3c <__retarget_lock_release_recursive>
 8004642:	e7dd      	b.n	8004600 <_fflush_r+0xc>

08004644 <__swhatbuf_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464c:	2900      	cmp	r1, #0
 800464e:	b096      	sub	sp, #88	@ 0x58
 8004650:	4615      	mov	r5, r2
 8004652:	461e      	mov	r6, r3
 8004654:	da0d      	bge.n	8004672 <__swhatbuf_r+0x2e>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	bf14      	ite	ne
 8004662:	2340      	movne	r3, #64	@ 0x40
 8004664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004668:	2000      	movs	r0, #0
 800466a:	6031      	str	r1, [r6, #0]
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	b016      	add	sp, #88	@ 0x58
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	466a      	mov	r2, sp
 8004674:	f000 f848 	bl	8004708 <_fstat_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	dbec      	blt.n	8004656 <__swhatbuf_r+0x12>
 800467c:	9901      	ldr	r1, [sp, #4]
 800467e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004686:	4259      	negs	r1, r3
 8004688:	4159      	adcs	r1, r3
 800468a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800468e:	e7eb      	b.n	8004668 <__swhatbuf_r+0x24>

08004690 <__smakebuf_r>:
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004694:	079d      	lsls	r5, r3, #30
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	d507      	bpl.n	80046ac <__smakebuf_r+0x1c>
 800469c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	2301      	movs	r3, #1
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	b003      	add	sp, #12
 80046aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ac:	ab01      	add	r3, sp, #4
 80046ae:	466a      	mov	r2, sp
 80046b0:	f7ff ffc8 	bl	8004644 <__swhatbuf_r>
 80046b4:	9f00      	ldr	r7, [sp, #0]
 80046b6:	4605      	mov	r5, r0
 80046b8:	4639      	mov	r1, r7
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff fbba 	bl	8003e34 <_malloc_r>
 80046c0:	b948      	cbnz	r0, 80046d6 <__smakebuf_r+0x46>
 80046c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c6:	059a      	lsls	r2, r3, #22
 80046c8:	d4ee      	bmi.n	80046a8 <__smakebuf_r+0x18>
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	f043 0302 	orr.w	r3, r3, #2
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	e7e2      	b.n	800469c <__smakebuf_r+0xc>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	6020      	str	r0, [r4, #0]
 80046da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	9b01      	ldr	r3, [sp, #4]
 80046e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046e6:	b15b      	cbz	r3, 8004700 <__smakebuf_r+0x70>
 80046e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ec:	4630      	mov	r0, r6
 80046ee:	f000 f81d 	bl	800472c <_isatty_r>
 80046f2:	b128      	cbz	r0, 8004700 <__smakebuf_r+0x70>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	431d      	orrs	r5, r3
 8004704:	81a5      	strh	r5, [r4, #12]
 8004706:	e7cf      	b.n	80046a8 <__smakebuf_r+0x18>

08004708 <_fstat_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d07      	ldr	r5, [pc, #28]	@ (8004728 <_fstat_r+0x20>)
 800470c:	2300      	movs	r3, #0
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	f7fc f922 	bl	800095e <_fstat>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d102      	bne.n	8004724 <_fstat_r+0x1c>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	b103      	cbz	r3, 8004724 <_fstat_r+0x1c>
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	bf00      	nop
 8004728:	20008b44 	.word	0x20008b44

0800472c <_isatty_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	@ (8004748 <_isatty_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc f916 	bl	8000968 <_isatty>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_isatty_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_isatty_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	20008b44 	.word	0x20008b44

0800474c <_sbrk_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	@ (8004768 <_sbrk_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fc f90a 	bl	8000970 <_sbrk>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_sbrk_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_sbrk_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	20008b44 	.word	0x20008b44

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
