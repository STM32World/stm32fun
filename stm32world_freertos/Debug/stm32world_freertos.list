
stm32world_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00005be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00005bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004bf8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          00001524  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001590  20001590  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b01a  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003430  00000000  00000000  000210b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  000244e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0f  00000000  00000000  00025768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021df1  00000000  00000000  00026677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ada2  00000000  00000000  00048468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1da  00000000  00000000  0006320a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e3e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a7c  00000000  00000000  0012e428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000b40f  00000000  00000000  00131ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0013d2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ad8 	.word	0x08004ad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004ad8 	.word	0x08004ad8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8000560:	4770      	bx	lr

08000562 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8000562:	2000      	movs	r0, #0
 8000564:	4770      	bx	lr
	...

08000568 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000568:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <vApplicationGetIdleTaskMemory+0x10>)
 800056a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <vApplicationGetIdleTaskMemory+0x14>)
 800056e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000570:	2340      	movs	r3, #64	@ 0x40
 8000572:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000188 	.word	0x20000188
 800057c:	20000088 	.word	0x20000088

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	2400      	movs	r4, #0
 8000586:	9405      	str	r4, [sp, #20]
 8000588:	9406      	str	r4, [sp, #24]
 800058a:	9407      	str	r4, [sp, #28]
 800058c:	9408      	str	r4, [sp, #32]
 800058e:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000590:	9401      	str	r4, [sp, #4]
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_GPIO_Init+0x8c>)
 8000594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000596:	f042 0204 	orr.w	r2, r2, #4
 800059a:	631a      	str	r2, [r3, #48]	@ 0x30
 800059c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800059e:	f002 0204 	and.w	r2, r2, #4
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	9402      	str	r4, [sp, #8]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005b6:	9202      	str	r2, [sp, #8]
 80005b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	9403      	str	r4, [sp, #12]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005be:	f042 0201 	orr.w	r2, r2, #1
 80005c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c6:	f002 0201 	and.w	r2, r2, #1
 80005ca:	9203      	str	r2, [sp, #12]
 80005cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	9404      	str	r4, [sp, #16]
 80005d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d2:	f042 0202 	orr.w	r2, r2, #2
 80005d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	9304      	str	r3, [sp, #16]
 80005e0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005e2:	4d0b      	ldr	r5, [pc, #44]	@ (8000610 <MX_GPIO_Init+0x90>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ea:	4628      	mov	r0, r5
 80005ec:	f000 fc3e 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005fe:	a905      	add	r1, sp, #20
 8000600:	4628      	mov	r0, r5
 8000602:	f000 fb3d 	bl	8000c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	b00b      	add	sp, #44	@ 0x2c
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40020800 	.word	0x40020800

08000614 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000614:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN 5 */

    uint8_t toggle = 0;
 8000616:	2500      	movs	r5, #0
 8000618:	e000      	b.n	800061c <StartDefaultTask+0x8>
{
 800061a:	4625      	mov	r5, r4

    /* Infinite loop */
    for (;;)
            {
        osDelay(500);
 800061c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000620:	f001 fafd 	bl	8001c1e <osDelay>

        toggle = !toggle;
 8000624:	fab5 f485 	clz	r4, r5
 8000628:	0964      	lsrs	r4, r4, #5

        osSemaphoreRelease(ledSemaphoreHandle);
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <StartDefaultTask+0x38>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	f001 fbb8 	bl	8001da2 <osSemaphoreRelease>

        if (!toggle) { // Only every second time
 8000632:	2d00      	cmp	r5, #0
 8000634:	d0f1      	beq.n	800061a <StartDefaultTask+0x6>
            osMessagePut(tickQueueHandle, osKernelSysTick(), osWaitForever);
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <StartDefaultTask+0x3c>)
 8000638:	681d      	ldr	r5, [r3, #0]
 800063a:	f001 fab3 	bl	8001ba4 <osKernelSysTick>
 800063e:	4601      	mov	r1, r0
 8000640:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000644:	4628      	mov	r0, r5
 8000646:	f001 fbee 	bl	8001e26 <osMessagePut>
 800064a:	e7e6      	b.n	800061a <StartDefaultTask+0x6>
 800064c:	20000234 	.word	0x20000234
 8000650:	20000240 	.word	0x20000240

08000654 <StartLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8000654:	b510      	push	{r4, lr}
    osStatus ret;

    /* Infinite loop */
    for (;;) {

        ret = osSemaphoreWait(ledSemaphoreHandle, osWaitForever);
 8000656:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <StartLedTask+0x30>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	f001 fb71 	bl	8001d44 <osSemaphoreWait>
        if (!ret) {
 8000662:	2800      	cmp	r0, #0
 8000664:	d1f7      	bne.n	8000656 <StartLedTask+0x2>
            osMutexWait(ledMutexHandle, osWaitForever);
 8000666:	4c08      	ldr	r4, [pc, #32]	@ (8000688 <StartLedTask+0x34>)
 8000668:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800066c:	6820      	ldr	r0, [r4, #0]
 800066e:	f001 fae8 	bl	8001c42 <osMutexWait>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000672:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <StartLedTask+0x38>)
 8000678:	f000 fbfe 	bl	8000e78 <HAL_GPIO_TogglePin>
            osMutexRelease(ledMutexHandle);
 800067c:	6820      	ldr	r0, [r4, #0]
 800067e:	f001 fb10 	bl	8001ca2 <osMutexRelease>
 8000682:	e7e8      	b.n	8000656 <StartLedTask+0x2>
 8000684:	20000234 	.word	0x20000234
 8000688:	20000238 	.word	0x20000238
 800068c:	40020800 	.word	0x40020800

08000690 <StartTickTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTickTask */
void StartTickTask(void const * argument)
{
 8000690:	b500      	push	{lr}
 8000692:	b085      	sub	sp, #20
    osEvent ret;

    /* Infinite loop */
    for (;;) {

        ret = osMessageGet(tickQueueHandle, osWaitForever);
 8000694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <StartTickTask+0x3c>)
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	a801      	add	r0, sp, #4
 800069e:	f001 fbf5 	bl	8001e8c <osMessageGet>
        if (!ret.status) {
 80006a2:	9b01      	ldr	r3, [sp, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f5      	bne.n	8000694 <StartTickTask+0x4>

            osMutexWait(printMutexHandle, osWaitForever);
 80006a8:	4c09      	ldr	r4, [pc, #36]	@ (80006d0 <StartTickTask+0x40>)
 80006aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006ae:	6820      	ldr	r0, [r4, #0]
 80006b0:	f001 fac7 	bl	8001c42 <osMutexWait>
            printf("Tick %lu\n", ret.value.v / 1000);
 80006b4:	9902      	ldr	r1, [sp, #8]
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <StartTickTask+0x44>)
 80006b8:	fba3 3101 	umull	r3, r1, r3, r1
 80006bc:	0989      	lsrs	r1, r1, #6
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <StartTickTask+0x48>)
 80006c0:	f003 fada 	bl	8003c78 <iprintf>
            osMutexRelease(printMutexHandle);
 80006c4:	6820      	ldr	r0, [r4, #0]
 80006c6:	f001 faec 	bl	8001ca2 <osMutexRelease>
 80006ca:	e7e3      	b.n	8000694 <StartTickTask+0x4>
 80006cc:	20000240 	.word	0x20000240
 80006d0:	2000023c 	.word	0x2000023c
 80006d4:	10624dd3 	.word	0x10624dd3
 80006d8:	08004b54 	.word	0x08004b54

080006dc <_write>:
    if (fd == 1 || fd == 2) {
 80006dc:	3801      	subs	r0, #1
 80006de:	2801      	cmp	r0, #1
 80006e0:	d80a      	bhi.n	80006f8 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80006e2:	b510      	push	{r4, lr}
 80006e4:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ea:	b292      	uxth	r2, r2
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <_write+0x28>)
 80006ee:	f001 f9e2 	bl	8001ab6 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80006f2:	b920      	cbnz	r0, 80006fe <_write+0x22>
            return len;
 80006f4:	4620      	mov	r0, r4
}
 80006f6:	bd10      	pop	{r4, pc}
    return -1;
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80006fc:	4770      	bx	lr
            return -1;
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000702:	e7f8      	b.n	80006f6 <_write+0x1a>
 8000704:	20000250 	.word	0x20000250

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800070a:	6802      	ldr	r2, [r0, #0]
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800070e:	429a      	cmp	r2, r3
 8000710:	d000      	beq.n	8000714 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000712:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000714:	f000 fa3a 	bl	8000b8c <HAL_IncTick>
}
 8000718:	e7fb      	b.n	8000712 <HAL_TIM_PeriodElapsedCallback+0xa>
 800071a:	bf00      	nop
 800071c:	40002000 	.word	0x40002000

08000720 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000722:	e7fe      	b.n	8000722 <Error_Handler+0x2>

08000724 <MX_USART1_UART_Init>:
{
 8000724:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000726:	480a      	ldr	r0, [pc, #40]	@ (8000750 <MX_USART1_UART_Init+0x2c>)
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_USART1_UART_Init+0x30>)
 800072a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800072c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000730:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	2300      	movs	r3, #0
 8000734:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000736:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000738:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073a:	220c      	movs	r2, #12
 800073c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000742:	f001 f988 	bl	8001a56 <HAL_UART_Init>
 8000746:	b900      	cbnz	r0, 800074a <MX_USART1_UART_Init+0x26>
}
 8000748:	bd08      	pop	{r3, pc}
    Error_Handler();
 800074a:	f7ff ffe9 	bl	8000720 <Error_Handler>
 800074e:	bf00      	nop
 8000750:	20000250 	.word	0x20000250
 8000754:	40011000 	.word	0x40011000

08000758 <SystemClock_Config>:
{
 8000758:	b500      	push	{lr}
 800075a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075c:	2230      	movs	r2, #48	@ 0x30
 800075e:	2100      	movs	r1, #0
 8000760:	a808      	add	r0, sp, #32
 8000762:	f003 fbd1 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	9303      	str	r3, [sp, #12]
 800076a:	9304      	str	r3, [sp, #16]
 800076c:	9305      	str	r3, [sp, #20]
 800076e:	9306      	str	r3, [sp, #24]
 8000770:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	4a20      	ldr	r2, [pc, #128]	@ (80007f8 <SystemClock_Config+0xa0>)
 8000776:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000778:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800077c:	6411      	str	r1, [r2, #64]	@ 0x40
 800077e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000780:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <SystemClock_Config+0xa4>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079e:	2301      	movs	r3, #1
 80007a0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007b0:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b2:	2208      	movs	r2, #8
 80007b4:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b6:	22a8      	movs	r2, #168	@ 0xa8
 80007b8:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	a808      	add	r0, sp, #32
 80007c2:	f000 fb63 	bl	8000e8c <HAL_RCC_OscConfig>
 80007c6:	b998      	cbnz	r0, 80007f0 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e0:	2105      	movs	r1, #5
 80007e2:	a803      	add	r0, sp, #12
 80007e4:	f000 fdb6 	bl	8001354 <HAL_RCC_ClockConfig>
 80007e8:	b920      	cbnz	r0, 80007f4 <SystemClock_Config+0x9c>
}
 80007ea:	b015      	add	sp, #84	@ 0x54
 80007ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007f0:	f7ff ff96 	bl	8000720 <Error_Handler>
    Error_Handler();
 80007f4:	f7ff ff94 	bl	8000720 <Error_Handler>
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <main>:
{
 8000800:	b500      	push	{lr}
 8000802:	b0a1      	sub	sp, #132	@ 0x84
  HAL_Init();
 8000804:	f000 f9a8 	bl	8000b58 <HAL_Init>
  SystemClock_Config();
 8000808:	f7ff ffa6 	bl	8000758 <SystemClock_Config>
  MX_GPIO_Init();
 800080c:	f7ff feb8 	bl	8000580 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000810:	f7ff ff88 	bl	8000724 <MX_USART1_UART_Init>
    printf("\n\n\n--------\nStarting\n");
 8000814:	482f      	ldr	r0, [pc, #188]	@ (80008d4 <main+0xd4>)
 8000816:	f003 fa97 	bl	8003d48 <puts>
  osMutexDef(printMutex);
 800081a:	2500      	movs	r5, #0
 800081c:	951e      	str	r5, [sp, #120]	@ 0x78
 800081e:	951f      	str	r5, [sp, #124]	@ 0x7c
  printMutexHandle = osMutexCreate(osMutex(printMutex));
 8000820:	a81e      	add	r0, sp, #120	@ 0x78
 8000822:	f001 fa03 	bl	8001c2c <osMutexCreate>
 8000826:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <main+0xd8>)
 8000828:	6018      	str	r0, [r3, #0]
  osMutexDef(ledMutex);
 800082a:	951c      	str	r5, [sp, #112]	@ 0x70
 800082c:	951d      	str	r5, [sp, #116]	@ 0x74
  ledMutexHandle = osMutexCreate(osMutex(ledMutex));
 800082e:	a81c      	add	r0, sp, #112	@ 0x70
 8000830:	f001 f9fc 	bl	8001c2c <osMutexCreate>
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <main+0xdc>)
 8000836:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(ledSemaphore);
 8000838:	951a      	str	r5, [sp, #104]	@ 0x68
 800083a:	951b      	str	r5, [sp, #108]	@ 0x6c
  ledSemaphoreHandle = osSemaphoreCreate(osSemaphore(ledSemaphore), 1);
 800083c:	2101      	movs	r1, #1
 800083e:	a81a      	add	r0, sp, #104	@ 0x68
 8000840:	f001 fa5c 	bl	8001cfc <osSemaphoreCreate>
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <main+0xe0>)
 8000846:	6018      	str	r0, [r3, #0]
  osMessageQDef(tickQueue, 16, uint32_t);
 8000848:	4c26      	ldr	r4, [pc, #152]	@ (80008e4 <main+0xe4>)
 800084a:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 800084e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000852:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  tickQueueHandle = osMessageCreate(osMessageQ(tickQueue), NULL);
 8000856:	4629      	mov	r1, r5
 8000858:	4660      	mov	r0, ip
 800085a:	f001 facf 	bl	8001dfc <osMessageCreate>
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <main+0xe8>)
 8000860:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000862:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8000866:	f104 0e10 	add.w	lr, r4, #16
 800086a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800086e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000872:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000876:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800087a:	4629      	mov	r1, r5
 800087c:	a80f      	add	r0, sp, #60	@ 0x3c
 800087e:	f001 f99b 	bl	8001bb8 <osThreadCreate>
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <main+0xec>)
 8000884:	6018      	str	r0, [r3, #0]
  osThreadDef(ledTask, StartLedTask, osPriorityLow, 0, 128);
 8000886:	f10d 0c20 	add.w	ip, sp, #32
 800088a:	f104 0e2c 	add.w	lr, r4, #44	@ 0x2c
 800088e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000896:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800089a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 800089e:	4629      	mov	r1, r5
 80008a0:	a808      	add	r0, sp, #32
 80008a2:	f001 f989 	bl	8001bb8 <osThreadCreate>
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <main+0xf0>)
 80008a8:	6018      	str	r0, [r3, #0]
  osThreadDef(tickTask, StartTickTask, osPriorityLow, 0, 128);
 80008aa:	f10d 0e04 	add.w	lr, sp, #4
 80008ae:	f104 0c48 	add.w	ip, r4, #72	@ 0x48
 80008b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80008b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80008ba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80008be:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  tickTaskHandle = osThreadCreate(osThread(tickTask), NULL);
 80008c2:	4629      	mov	r1, r5
 80008c4:	a801      	add	r0, sp, #4
 80008c6:	f001 f977 	bl	8001bb8 <osThreadCreate>
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <main+0xf4>)
 80008cc:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80008ce:	f001 f964 	bl	8001b9a <osKernelStart>
    while (1)
 80008d2:	e7fe      	b.n	80008d2 <main+0xd2>
 80008d4:	08004b60 	.word	0x08004b60
 80008d8:	2000023c 	.word	0x2000023c
 80008dc:	20000238 	.word	0x20000238
 80008e0:	20000234 	.word	0x20000234
 80008e4:	08004af0 	.word	0x08004af0
 80008e8:	20000240 	.word	0x20000240
 80008ec:	2000024c 	.word	0x2000024c
 80008f0:	20000248 	.word	0x20000248
 80008f4:	20000244 	.word	0x20000244

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b500      	push	{lr}
 80008fa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	2200      	movs	r2, #0
 80008fe:	9200      	str	r2, [sp, #0]
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_MspInit+0x40>)
 8000902:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000904:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000908:	6459      	str	r1, [r3, #68]	@ 0x44
 800090a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800090c:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8000910:	9100      	str	r1, [sp, #0]
 8000912:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	9201      	str	r2, [sp, #4]
 8000916:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000918:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800091c:	6419      	str	r1, [r3, #64]	@ 0x40
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 f993 	bl	8000c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	b003      	add	sp, #12
 8000934:	f85d fb04 	ldr.w	pc, [sp], #4
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b500      	push	{lr}
 800093e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	2300      	movs	r3, #0
 8000942:	9303      	str	r3, [sp, #12]
 8000944:	9304      	str	r3, [sp, #16]
 8000946:	9305      	str	r3, [sp, #20]
 8000948:	9306      	str	r3, [sp, #24]
 800094a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800094c:	6802      	ldr	r2, [r0, #0]
 800094e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000952:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000956:	429a      	cmp	r2, r3
 8000958:	d002      	beq.n	8000960 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800095a:	b009      	add	sp, #36	@ 0x24
 800095c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000960:	2100      	movs	r1, #0
 8000962:	9101      	str	r1, [sp, #4]
 8000964:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800096a:	f042 0210 	orr.w	r2, r2, #16
 800096e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000972:	f002 0210 	and.w	r2, r2, #16
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	9102      	str	r1, [sp, #8]
 800097c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800098e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000992:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099c:	2307      	movs	r3, #7
 800099e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	a903      	add	r1, sp, #12
 80009a2:	4802      	ldr	r0, [pc, #8]	@ (80009ac <HAL_UART_MspInit+0x70>)
 80009a4:	f000 f96c 	bl	8000c80 <HAL_GPIO_Init>
}
 80009a8:	e7d7      	b.n	800095a <HAL_UART_MspInit+0x1e>
 80009aa:	bf00      	nop
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b530      	push	{r4, r5, lr}
 80009b2:	b089      	sub	sp, #36	@ 0x24
 80009b4:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <HAL_InitTick+0x90>)
 80009bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	a902      	add	r1, sp, #8
 80009d0:	a803      	add	r0, sp, #12
 80009d2:	f000 fd95 	bl	8001500 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d6:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d8:	b9cb      	cbnz	r3, 8000a0e <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009da:	f000 fd71 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 80009de:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e0:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <HAL_InitTick+0x94>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	0c9b      	lsrs	r3, r3, #18
 80009e8:	3b01      	subs	r3, #1

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009ea:	4817      	ldr	r0, [pc, #92]	@ (8000a48 <HAL_InitTick+0x98>)
 80009ec:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <HAL_InitTick+0x9c>)
 80009ee:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009f4:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009f6:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	6083      	str	r3, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a00:	f000 ff02 	bl	8001808 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000a04:	4605      	mov	r5, r0
 8000a06:	b130      	cbz	r0, 8000a16 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8000a08:	4628      	mov	r0, r5
 8000a0a:	b009      	add	sp, #36	@ 0x24
 8000a0c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0e:	f000 fd57 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 8000a12:	0043      	lsls	r3, r0, #1
 8000a14:	e7e4      	b.n	80009e0 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a16:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <HAL_InitTick+0x98>)
 8000a18:	f000 fd92 	bl	8001540 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d1f2      	bne.n	8000a08 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a22:	202d      	movs	r0, #45	@ 0x2d
 8000a24:	f000 f928 	bl	8000c78 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	2c0f      	cmp	r4, #15
 8000a2a:	d901      	bls.n	8000a30 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	e7eb      	b.n	8000a08 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	4621      	mov	r1, r4
 8000a34:	202d      	movs	r0, #45	@ 0x2d
 8000a36:	f000 f90f 	bl	8000c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_InitTick+0xa0>)
 8000a3c:	601c      	str	r4, [r3, #0]
 8000a3e:	e7e3      	b.n	8000a08 <HAL_InitTick+0x58>
 8000a40:	40023800 	.word	0x40023800
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	20000298 	.word	0x20000298
 8000a4c:	40002000 	.word	0x40002000
 8000a50:	20000008 	.word	0x20000008

08000a54 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler>

08000a56 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler>

08000a58 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler>

08000a5a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler>

08000a5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler>

08000a5e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	4770      	bx	lr

08000a60 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a62:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8000a64:	f000 fdb4 	bl	80015d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000298 	.word	0x20000298

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	460c      	mov	r4, r1
 8000a74:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	2500      	movs	r5, #0
 8000a78:	e006      	b.n	8000a88 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4621      	mov	r1, r4
 8000a80:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000a86:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	dbf6      	blt.n	8000a7a <_read+0xa>
  }

  return len;
}
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}

08000a90 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	4770      	bx	lr

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <_sbrk+0x38>)
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <_sbrk+0x40>)
 8000ab2:	6800      	ldr	r0, [r0, #0]
 8000ab4:	b140      	cbz	r0, 8000ac8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <_sbrk+0x40>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	4403      	add	r3, r0
 8000abc:	1a52      	subs	r2, r2, r1
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d806      	bhi.n	8000ad0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ac2:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <_sbrk+0x40>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ac6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <_sbrk+0x40>)
 8000aca:	4c08      	ldr	r4, [pc, #32]	@ (8000aec <_sbrk+0x44>)
 8000acc:	6004      	str	r4, [r0, #0]
 8000ace:	e7f2      	b.n	8000ab6 <_sbrk+0xe>
    errno = ENOMEM;
 8000ad0:	f003 fabe 	bl	8004050 <__errno>
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000adc:	e7f3      	b.n	8000ac6 <_sbrk+0x1e>
 8000ade:	bf00      	nop
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200002e0 	.word	0x200002e0
 8000aec:	20001590 	.word	0x20001590

08000af0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4a03      	ldr	r2, [pc, #12]	@ (8000b00 <SystemInit+0x10>)
 8000af2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000af6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000afa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b08:	f7ff fff2 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fa93 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fe63 	bl	8000800 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b48:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8000b4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b50:	20001590 	.word	0x20001590

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_Init+0x30>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b62:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b6a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f85d 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff ff18 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff feba 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000b84:	2000      	movs	r0, #0
 8000b86:	bd08      	pop	{r3, pc}
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b8c:	4a03      	ldr	r2, [pc, #12]	@ (8000b9c <HAL_IncTick+0x10>)
 8000b8e:	6811      	ldr	r1, [r2, #0]
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <HAL_IncTick+0x14>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200002e4 	.word	0x200002e4
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	@ (8000bac <HAL_GetTick+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200002e4 	.word	0x200002e4

08000bb0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	db07      	blt.n	8000bc4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb4:	f000 021f 	and.w	r2, r0, #31
 8000bb8:	0940      	lsrs	r0, r0, #5
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4093      	lsls	r3, r2
 8000bbe:	4a02      	ldr	r2, [pc, #8]	@ (8000bc8 <__NVIC_EnableIRQ+0x18>)
 8000bc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	db08      	blt.n	8000be2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	0109      	lsls	r1, r1, #4
 8000bd2:	b2c9      	uxtb	r1, r1
 8000bd4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000bd8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000bdc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000be0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	f000 000f 	and.w	r0, r0, #15
 8000be6:	0109      	lsls	r1, r1, #4
 8000be8:	b2c9      	uxtb	r1, r1
 8000bea:	4b01      	ldr	r3, [pc, #4]	@ (8000bf0 <__NVIC_SetPriority+0x24>)
 8000bec:	5419      	strb	r1, [r3, r0]
  }
}
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed14 	.word	0xe000ed14

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfa:	f1c0 0c07 	rsb	ip, r0, #7
 8000bfe:	f1bc 0f04 	cmp.w	ip, #4
 8000c02:	bf28      	it	cs
 8000c04:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c08:	1d03      	adds	r3, r0, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d90f      	bls.n	8000c2e <NVIC_EncodePriority+0x3a>
 8000c0e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000c14:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c18:	ea21 0100 	bic.w	r1, r1, r0
 8000c1c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c22:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000c26:	ea41 0002 	orr.w	r0, r1, r2
 8000c2a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e7ee      	b.n	8000c10 <NVIC_EncodePriority+0x1c>
	...

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	0200      	lsls	r0, r0, #8
 8000c42:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c46:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000c50:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_NVIC_SetPriority+0x1c>)
 8000c5e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000c64:	f7ff ffc6 	bl	8000bf4 <NVIC_EncodePriority>
 8000c68:	4601      	mov	r1, r0
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ffae 	bl	8000bcc <__NVIC_SetPriority>
}
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7a:	f7ff ff99 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000c7e:	bd08      	pop	{r3, pc}

08000c80 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	f200 80e9 	bhi.w	8000e5a <HAL_GPIO_Init+0x1da>
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	e065      	b.n	8000d5a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c90:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c94:	2403      	movs	r4, #3
 8000c96:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c9a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	68cc      	ldr	r4, [r1, #12]
 8000ca0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ca4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000ca6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000caa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	684a      	ldr	r2, [r1, #4]
 8000cb0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000cb8:	6042      	str	r2, [r0, #4]
 8000cba:	e05c      	b.n	8000d76 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	08dc      	lsrs	r4, r3, #3
 8000cbe:	3408      	adds	r4, #8
 8000cc0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc4:	f003 0507 	and.w	r5, r3, #7
 8000cc8:	00ad      	lsls	r5, r5, #2
 8000cca:	f04f 0e0f 	mov.w	lr, #15
 8000cce:	fa0e fe05 	lsl.w	lr, lr, r5
 8000cd2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd6:	690a      	ldr	r2, [r1, #16]
 8000cd8:	40aa      	lsls	r2, r5
 8000cda:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000cde:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ce2:	e05c      	b.n	8000d9e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	e000      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cee:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf0:	3402      	adds	r4, #2
 8000cf2:	4d5a      	ldr	r5, [pc, #360]	@ (8000e5c <HAL_GPIO_Init+0x1dc>)
 8000cf4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf8:	4a59      	ldr	r2, [pc, #356]	@ (8000e60 <HAL_GPIO_Init+0x1e0>)
 8000cfa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	ea6f 020c 	mvn.w	r2, ip
 8000d00:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d04:	684e      	ldr	r6, [r1, #4]
 8000d06:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000d0a:	d001      	beq.n	8000d10 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000d0c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000d10:	4c53      	ldr	r4, [pc, #332]	@ (8000e60 <HAL_GPIO_Init+0x1e0>)
 8000d12:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000d14:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d16:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1a:	684e      	ldr	r6, [r1, #4]
 8000d1c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000d20:	d001      	beq.n	8000d26 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000d22:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000d26:	4c4e      	ldr	r4, [pc, #312]	@ (8000e60 <HAL_GPIO_Init+0x1e0>)
 8000d28:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000d2a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d2c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d30:	684e      	ldr	r6, [r1, #4]
 8000d32:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000d36:	d001      	beq.n	8000d3c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d38:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d3c:	4c48      	ldr	r4, [pc, #288]	@ (8000e60 <HAL_GPIO_Init+0x1e0>)
 8000d3e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d40:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d44:	684d      	ldr	r5, [r1, #4]
 8000d46:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d4a:	d001      	beq.n	8000d50 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d4c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d50:	4c43      	ldr	r4, [pc, #268]	@ (8000e60 <HAL_GPIO_Init+0x1e0>)
 8000d52:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d54:	3301      	adds	r3, #1
 8000d56:	2b0f      	cmp	r3, #15
 8000d58:	d87d      	bhi.n	8000e56 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	680c      	ldr	r4, [r1, #0]
 8000d60:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d64:	ea32 0404 	bics.w	r4, r2, r4
 8000d68:	d1f4      	bne.n	8000d54 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	684c      	ldr	r4, [r1, #4]
 8000d6c:	f004 0403 	and.w	r4, r4, #3
 8000d70:	3c01      	subs	r4, #1
 8000d72:	2c01      	cmp	r4, #1
 8000d74:	d98b      	bls.n	8000c8e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	684a      	ldr	r2, [r1, #4]
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	2a03      	cmp	r2, #3
 8000d7e:	d009      	beq.n	8000d94 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000d80:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d82:	005d      	lsls	r5, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	40aa      	lsls	r2, r5
 8000d88:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	688a      	ldr	r2, [r1, #8]
 8000d8e:	40aa      	lsls	r2, r5
 8000d90:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d92:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d94:	684a      	ldr	r2, [r1, #4]
 8000d96:	f002 0203 	and.w	r2, r2, #3
 8000d9a:	2a02      	cmp	r2, #2
 8000d9c:	d08e      	beq.n	8000cbc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000d9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000daa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dae:	684a      	ldr	r2, [r1, #4]
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000db8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000dba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbc:	684a      	ldr	r2, [r1, #4]
 8000dbe:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000dc2:	d0c7      	beq.n	8000d54 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	4a26      	ldr	r2, [pc, #152]	@ (8000e64 <HAL_GPIO_Init+0x1e4>)
 8000dca:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000dcc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000dd0:	6454      	str	r4, [r2, #68]	@ 0x44
 8000dd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000dd4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000dd8:	9201      	str	r2, [sp, #4]
 8000dda:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ddc:	089c      	lsrs	r4, r3, #2
 8000dde:	1ca5      	adds	r5, r4, #2
 8000de0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <HAL_GPIO_Init+0x1dc>)
 8000de2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de6:	f003 0e03 	and.w	lr, r3, #3
 8000dea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000df4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <HAL_GPIO_Init+0x1e8>)
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f43f af74 	beq.w	8000ce8 <HAL_GPIO_Init+0x68>
 8000e00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d01a      	beq.n	8000e3e <HAL_GPIO_Init+0x1be>
 8000e08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	d018      	beq.n	8000e42 <HAL_GPIO_Init+0x1c2>
 8000e10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d016      	beq.n	8000e46 <HAL_GPIO_Init+0x1c6>
 8000e18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d014      	beq.n	8000e4a <HAL_GPIO_Init+0x1ca>
 8000e20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e24:	4290      	cmp	r0, r2
 8000e26:	d012      	beq.n	8000e4e <HAL_GPIO_Init+0x1ce>
 8000e28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	d010      	beq.n	8000e52 <HAL_GPIO_Init+0x1d2>
 8000e30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f43f af55 	beq.w	8000ce4 <HAL_GPIO_Init+0x64>
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	e755      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e3e:	2201      	movs	r2, #1
 8000e40:	e753      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e42:	2202      	movs	r2, #2
 8000e44:	e751      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e46:	2203      	movs	r2, #3
 8000e48:	e74f      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	e74d      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e4e:	2205      	movs	r2, #5
 8000e50:	e74b      	b.n	8000cea <HAL_GPIO_Init+0x6a>
 8000e52:	2206      	movs	r2, #6
 8000e54:	e749      	b.n	8000cea <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e56:	b002      	add	sp, #8
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
 8000e5a:	4770      	bx	lr
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40013c00 	.word	0x40013c00
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e6c:	b10a      	cbz	r2, 8000e72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	6181      	str	r1, [r0, #24]
 8000e70:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e72:	0409      	lsls	r1, r1, #16
 8000e74:	6181      	str	r1, [r0, #24]
  }
}
 8000e76:	4770      	bx	lr

08000e78 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e78:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e7a:	ea01 0203 	and.w	r2, r1, r3
 8000e7e:	ea21 0103 	bic.w	r1, r1, r3
 8000e82:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e86:	6181      	str	r1, [r0, #24]
}
 8000e88:	4770      	bx	lr
	...

08000e8c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	f000 81e0 	beq.w	8001252 <HAL_RCC_OscConfig+0x3c6>
{
 8000e92:	b570      	push	{r4, r5, r6, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e98:	6803      	ldr	r3, [r0, #0]
 8000e9a:	f013 0f01 	tst.w	r3, #1
 8000e9e:	d03b      	beq.n	8000f18 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ea0:	4b9f      	ldr	r3, [pc, #636]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d02c      	beq.n	8000f06 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eac:	4b9c      	ldr	r3, [pc, #624]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d021      	beq.n	8000efc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb8:	6863      	ldr	r3, [r4, #4]
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ebe:	d04f      	beq.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ec4:	d052      	beq.n	8000f6c <HAL_RCC_OscConfig+0xe0>
 8000ec6:	4b96      	ldr	r3, [pc, #600]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ed8:	6863      	ldr	r3, [r4, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d050      	beq.n	8000f80 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fe61 	bl	8000ba4 <HAL_GetTick>
 8000ee2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000eec:	d114      	bne.n	8000f18 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff fe59 	bl	8000ba4 <HAL_GetTick>
 8000ef2:	1b40      	subs	r0, r0, r5
 8000ef4:	2864      	cmp	r0, #100	@ 0x64
 8000ef6:	d9f5      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000ef8:	2003      	movs	r0, #3
 8000efa:	e1b1      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efc:	4b88      	ldr	r3, [pc, #544]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000f04:	d0d8      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	4b86      	ldr	r3, [pc, #536]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f0e:	d003      	beq.n	8000f18 <HAL_RCC_OscConfig+0x8c>
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 819f 	beq.w	8001256 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	f013 0f02 	tst.w	r3, #2
 8000f1e:	d054      	beq.n	8000fca <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f20:	4b7f      	ldr	r3, [pc, #508]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f013 0f0c 	tst.w	r3, #12
 8000f28:	d03e      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d033      	beq.n	8000f9e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f36:	68e3      	ldr	r3, [r4, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d068      	beq.n	800100e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f3c:	4b79      	ldr	r3, [pc, #484]	@ (8001124 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f42:	f7ff fe2f 	bl	8000ba4 <HAL_GetTick>
 8000f46:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	4b75      	ldr	r3, [pc, #468]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f013 0f02 	tst.w	r3, #2
 8000f50:	d154      	bne.n	8000ffc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f52:	f7ff fe27 	bl	8000ba4 <HAL_GetTick>
 8000f56:	1b40      	subs	r0, r0, r5
 8000f58:	2802      	cmp	r0, #2
 8000f5a:	d9f5      	bls.n	8000f48 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	e17f      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f60:	4a6f      	ldr	r2, [pc, #444]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e7b5      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4c>
 8000f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e7ab      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000f80:	f7ff fe10 	bl	8000ba4 <HAL_GetTick>
 8000f84:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	4b66      	ldr	r3, [pc, #408]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f8e:	d0c3      	beq.n	8000f18 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fe08 	bl	8000ba4 <HAL_GetTick>
 8000f94:	1b40      	subs	r0, r0, r5
 8000f96:	2864      	cmp	r0, #100	@ 0x64
 8000f98:	d9f5      	bls.n	8000f86 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	e160      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9e:	4b60      	ldr	r3, [pc, #384]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000fa6:	d1c6      	bne.n	8000f36 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f013 0f02 	tst.w	r3, #2
 8000fb0:	d003      	beq.n	8000fba <HAL_RCC_OscConfig+0x12e>
 8000fb2:	68e3      	ldr	r3, [r4, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 8150 	bne.w	800125a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fba:	4a59      	ldr	r2, [pc, #356]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000fc2:	6921      	ldr	r1, [r4, #16]
 8000fc4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fc8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f013 0f08 	tst.w	r3, #8
 8000fd0:	d042      	beq.n	8001058 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fd2:	6963      	ldr	r3, [r4, #20]
 8000fd4:	b36b      	cbz	r3, 8001032 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd6:	4b53      	ldr	r3, [pc, #332]	@ (8001124 <HAL_RCC_OscConfig+0x298>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fde:	f7ff fde1 	bl	8000ba4 <HAL_GetTick>
 8000fe2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fe8:	f013 0f02 	tst.w	r3, #2
 8000fec:	d134      	bne.n	8001058 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fee:	f7ff fdd9 	bl	8000ba4 <HAL_GetTick>
 8000ff2:	1b40      	subs	r0, r0, r5
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d9f5      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	e131      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4a48      	ldr	r2, [pc, #288]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001004:	6921      	ldr	r1, [r4, #16]
 8001006:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e7dd      	b.n	8000fca <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800100e:	4b45      	ldr	r3, [pc, #276]	@ (8001124 <HAL_RCC_OscConfig+0x298>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001014:	f7ff fdc6 	bl	8000ba4 <HAL_GetTick>
 8001018:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f013 0f02 	tst.w	r3, #2
 8001022:	d0d2      	beq.n	8000fca <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fdbe 	bl	8000ba4 <HAL_GetTick>
 8001028:	1b40      	subs	r0, r0, r5
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f5      	bls.n	800101a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
 8001030:	e116      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001032:	4b3c      	ldr	r3, [pc, #240]	@ (8001124 <HAL_RCC_OscConfig+0x298>)
 8001034:	2200      	movs	r2, #0
 8001036:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fdb3 	bl	8000ba4 <HAL_GetTick>
 800103e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	4b37      	ldr	r3, [pc, #220]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8001042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001044:	f013 0f02 	tst.w	r3, #2
 8001048:	d006      	beq.n	8001058 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fdab 	bl	8000ba4 <HAL_GetTick>
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	2802      	cmp	r0, #2
 8001052:	d9f5      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001054:	2003      	movs	r0, #3
 8001056:	e103      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	f013 0f04 	tst.w	r3, #4
 800105e:	d077      	beq.n	8001150 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001060:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001068:	d133      	bne.n	80010d2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8001070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001072:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001082:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <HAL_RCC_OscConfig+0x29c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800108c:	d023      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	68a3      	ldr	r3, [r4, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d034      	beq.n	80010fe <HAL_RCC_OscConfig+0x272>
 8001094:	2b05      	cmp	r3, #5
 8001096:	d038      	beq.n	800110a <HAL_RCC_OscConfig+0x27e>
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 800109a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80010a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80010a4:	f022 0204 	bic.w	r2, r2, #4
 80010a8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010aa:	68a3      	ldr	r3, [r4, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d03d      	beq.n	800112c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b0:	f7ff fd78 	bl	8000ba4 <HAL_GetTick>
 80010b4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 80010b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010ba:	f013 0f02 	tst.w	r3, #2
 80010be:	d146      	bne.n	800114e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f7ff fd70 	bl	8000ba4 <HAL_GetTick>
 80010c4:	1b80      	subs	r0, r0, r6
 80010c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010ca:	4298      	cmp	r0, r3
 80010cc:	d9f3      	bls.n	80010b6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80010ce:	2003      	movs	r0, #3
 80010d0:	e0c6      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2500      	movs	r5, #0
 80010d4:	e7d6      	b.n	8001084 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d6:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <HAL_RCC_OscConfig+0x29c>)
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80010e0:	f7ff fd60 	bl	8000ba4 <HAL_GetTick>
 80010e4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <HAL_RCC_OscConfig+0x29c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80010ee:	d1ce      	bne.n	800108e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f0:	f7ff fd58 	bl	8000ba4 <HAL_GetTick>
 80010f4:	1b80      	subs	r0, r0, r6
 80010f6:	2802      	cmp	r0, #2
 80010f8:	d9f5      	bls.n	80010e6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80010fa:	2003      	movs	r0, #3
 80010fc:	e0b0      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fe:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 8001100:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6713      	str	r3, [r2, #112]	@ 0x70
 8001108:	e7cf      	b.n	80010aa <HAL_RCC_OscConfig+0x21e>
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_RCC_OscConfig+0x294>)
 800110c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800110e:	f042 0204 	orr.w	r2, r2, #4
 8001112:	671a      	str	r2, [r3, #112]	@ 0x70
 8001114:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	671a      	str	r2, [r3, #112]	@ 0x70
 800111c:	e7c5      	b.n	80010aa <HAL_RCC_OscConfig+0x21e>
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	42470000 	.word	0x42470000
 8001128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fd3a 	bl	8000ba4 <HAL_GetTick>
 8001130:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001132:	4b52      	ldr	r3, [pc, #328]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 8001134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001136:	f013 0f02 	tst.w	r3, #2
 800113a:	d008      	beq.n	800114e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113c:	f7ff fd32 	bl	8000ba4 <HAL_GetTick>
 8001140:	1b80      	subs	r0, r0, r6
 8001142:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001146:	4298      	cmp	r0, r3
 8001148:	d9f3      	bls.n	8001132 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800114a:	2003      	movs	r0, #3
 800114c:	e088      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800114e:	b9ed      	cbnz	r5, 800118c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001150:	69a3      	ldr	r3, [r4, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8083 	beq.w	800125e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001158:	4a48      	ldr	r2, [pc, #288]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 800115a:	6892      	ldr	r2, [r2, #8]
 800115c:	f002 020c 	and.w	r2, r2, #12
 8001160:	2a08      	cmp	r2, #8
 8001162:	d051      	beq.n	8001208 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001164:	2b02      	cmp	r3, #2
 8001166:	d017      	beq.n	8001198 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001168:	4b45      	ldr	r3, [pc, #276]	@ (8001280 <HAL_RCC_OscConfig+0x3f4>)
 800116a:	2200      	movs	r2, #0
 800116c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fd19 	bl	8000ba4 <HAL_GetTick>
 8001172:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001174:	4b41      	ldr	r3, [pc, #260]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800117c:	d042      	beq.n	8001204 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fd11 	bl	8000ba4 <HAL_GetTick>
 8001182:	1b00      	subs	r0, r0, r4
 8001184:	2802      	cmp	r0, #2
 8001186:	d9f5      	bls.n	8001174 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001188:	2003      	movs	r0, #3
 800118a:	e069      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800118c:	4a3b      	ldr	r2, [pc, #236]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 800118e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	@ 0x40
 8001196:	e7db      	b.n	8001150 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <HAL_RCC_OscConfig+0x3f4>)
 800119a:	2200      	movs	r2, #0
 800119c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800119e:	f7ff fd01 	bl	8000ba4 <HAL_GetTick>
 80011a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80011ac:	d006      	beq.n	80011bc <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fcf9 	bl	8000ba4 <HAL_GetTick>
 80011b2:	1b40      	subs	r0, r0, r5
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f5      	bls.n	80011a4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80011b8:	2003      	movs	r0, #3
 80011ba:	e051      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011bc:	69e3      	ldr	r3, [r4, #28]
 80011be:	6a22      	ldr	r2, [r4, #32]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80011c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011c8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80011ca:	0852      	lsrs	r2, r2, #1
 80011cc:	3a01      	subs	r2, #1
 80011ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80011d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011d8:	4a28      	ldr	r2, [pc, #160]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 80011da:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80011dc:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <HAL_RCC_OscConfig+0x3f4>)
 80011de:	2201      	movs	r2, #1
 80011e0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcdf 	bl	8000ba4 <HAL_GetTick>
 80011e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff fcd7 	bl	8000ba4 <HAL_GetTick>
 80011f6:	1b00      	subs	r0, r0, r4
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d9f5      	bls.n	80011e8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80011fc:	2003      	movs	r0, #3
 80011fe:	e02f      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001200:	2000      	movs	r0, #0
 8001202:	e02d      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
 8001204:	2000      	movs	r0, #0
 8001206:	e02b      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	2b01      	cmp	r3, #1
 800120a:	d02b      	beq.n	8001264 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_RCC_OscConfig+0x3f0>)
 800120e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001210:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001214:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001216:	4291      	cmp	r1, r2
 8001218:	d126      	bne.n	8001268 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800121a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800121e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001220:	428a      	cmp	r2, r1
 8001222:	d123      	bne.n	800126c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001224:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001226:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800122a:	401a      	ands	r2, r3
 800122c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001230:	d11e      	bne.n	8001270 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001232:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001236:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001238:	0852      	lsrs	r2, r2, #1
 800123a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800123c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001242:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001246:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001248:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800124c:	d114      	bne.n	8001278 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800124e:	2000      	movs	r0, #0
 8001250:	e006      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001252:	2001      	movs	r0, #1
}
 8001254:	4770      	bx	lr
        return HAL_ERROR;
 8001256:	2001      	movs	r0, #1
 8001258:	e002      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800125a:	2001      	movs	r0, #1
 800125c:	e000      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800125e:	2000      	movs	r0, #0
}
 8001260:	b002      	add	sp, #8
 8001262:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001264:	2001      	movs	r0, #1
 8001266:	e7fb      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
 800126a:	e7f9      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
 800126c:	2001      	movs	r0, #1
 800126e:	e7f7      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
 8001270:	2001      	movs	r0, #1
 8001272:	e7f5      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
 8001274:	2001      	movs	r0, #1
 8001276:	e7f3      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
 8001278:	2001      	movs	r0, #1
 800127a:	e7f1      	b.n	8001260 <HAL_RCC_OscConfig+0x3d4>
 800127c:	40023800 	.word	0x40023800
 8001280:	42470000 	.word	0x42470000

08001284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001284:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001286:	4b31      	ldr	r3, [pc, #196]	@ (800134c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d001      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001292:	482f      	ldr	r0, [pc, #188]	@ (8001350 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001294:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001296:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80012a4:	d02c      	beq.n	8001300 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a6:	4b29      	ldr	r3, [pc, #164]	@ (800134c <HAL_RCC_GetSysClockFreq+0xc8>)
 80012a8:	6858      	ldr	r0, [r3, #4]
 80012aa:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80012ae:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80012b2:	ebbc 0c00 	subs.w	ip, ip, r0
 80012b6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80012ba:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80012be:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80012c2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80012c6:	ebb1 010c 	subs.w	r1, r1, ip
 80012ca:	eb63 030e 	sbc.w	r3, r3, lr
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012d4:	00c9      	lsls	r1, r1, #3
 80012d6:	eb11 0c00 	adds.w	ip, r1, r0
 80012da:	f143 0300 	adc.w	r3, r3, #0
 80012de:	0299      	lsls	r1, r3, #10
 80012e0:	2300      	movs	r3, #0
 80012e2:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80012e6:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80012ea:	f7fe ffc1 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_RCC_GetSysClockFreq+0xc8>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012f6:	3301      	adds	r3, #1
 80012f8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80012fa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80012fe:	e7c9      	b.n	8001294 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001302:	6858      	ldr	r0, [r3, #4]
 8001304:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001308:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800130c:	ebbc 0c00 	subs.w	ip, ip, r0
 8001310:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001314:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001318:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800131c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001320:	ebb1 010c 	subs.w	r1, r1, ip
 8001324:	eb63 030e 	sbc.w	r3, r3, lr
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800132e:	00c9      	lsls	r1, r1, #3
 8001330:	eb11 0c00 	adds.w	ip, r1, r0
 8001334:	f143 0300 	adc.w	r3, r3, #0
 8001338:	0299      	lsls	r1, r3, #10
 800133a:	2300      	movs	r3, #0
 800133c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001340:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001344:	f7fe ff94 	bl	8000270 <__aeabi_uldivmod>
 8001348:	e7d1      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x6a>
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	00f42400 	.word	0x00f42400

08001354 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001354:	2800      	cmp	r0, #0
 8001356:	f000 809b 	beq.w	8001490 <HAL_RCC_ClockConfig+0x13c>
{
 800135a:	b570      	push	{r4, r5, r6, lr}
 800135c:	460d      	mov	r5, r1
 800135e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001360:	4b4f      	ldr	r3, [pc, #316]	@ (80014a0 <HAL_RCC_ClockConfig+0x14c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	428b      	cmp	r3, r1
 800136a:	d208      	bcs.n	800137e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136c:	b2cb      	uxtb	r3, r1
 800136e:	4a4c      	ldr	r2, [pc, #304]	@ (80014a0 <HAL_RCC_ClockConfig+0x14c>)
 8001370:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	428b      	cmp	r3, r1
 800137a:	f040 808b 	bne.w	8001494 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	f013 0f02 	tst.w	r3, #2
 8001384:	d017      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001386:	f013 0f04 	tst.w	r3, #4
 800138a:	d004      	beq.n	8001396 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138c:	4a45      	ldr	r2, [pc, #276]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 800138e:	6893      	ldr	r3, [r2, #8]
 8001390:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001394:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	f013 0f08 	tst.w	r3, #8
 800139c:	d004      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139e:	4a41      	ldr	r2, [pc, #260]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 80013a0:	6893      	ldr	r3, [r2, #8]
 80013a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013a6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4a3e      	ldr	r2, [pc, #248]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 80013aa:	6893      	ldr	r3, [r2, #8]
 80013ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013b0:	68a1      	ldr	r1, [r4, #8]
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	f013 0f01 	tst.w	r3, #1
 80013bc:	d032      	beq.n	8001424 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	6863      	ldr	r3, [r4, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d021      	beq.n	8001408 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c4:	1e9a      	subs	r2, r3, #2
 80013c6:	2a01      	cmp	r2, #1
 80013c8:	d925      	bls.n	8001416 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	4a36      	ldr	r2, [pc, #216]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f012 0f02 	tst.w	r2, #2
 80013d2:	d061      	beq.n	8001498 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d4:	4933      	ldr	r1, [pc, #204]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 80013d6:	688a      	ldr	r2, [r1, #8]
 80013d8:	f022 0203 	bic.w	r2, r2, #3
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80013e0:	f7ff fbe0 	bl	8000ba4 <HAL_GetTick>
 80013e4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	6862      	ldr	r2, [r4, #4]
 80013f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013f4:	d016      	beq.n	8001424 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f6:	f7ff fbd5 	bl	8000ba4 <HAL_GetTick>
 80013fa:	1b80      	subs	r0, r0, r6
 80013fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001400:	4298      	cmp	r0, r3
 8001402:	d9f0      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001404:	2003      	movs	r0, #3
 8001406:	e042      	b.n	800148e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001408:	4a26      	ldr	r2, [pc, #152]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001410:	d1e0      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
 8001414:	e03b      	b.n	800148e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800141e:	d1d9      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001420:	2001      	movs	r0, #1
 8001422:	e034      	b.n	800148e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001424:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <HAL_RCC_ClockConfig+0x14c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	42ab      	cmp	r3, r5
 800142e:	d907      	bls.n	8001440 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001430:	b2ea      	uxtb	r2, r5
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_RCC_ClockConfig+0x14c>)
 8001434:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	42ab      	cmp	r3, r5
 800143e:	d12d      	bne.n	800149c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	f013 0f04 	tst.w	r3, #4
 8001446:	d006      	beq.n	8001456 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 800144a:	6893      	ldr	r3, [r2, #8]
 800144c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001450:	68e1      	ldr	r1, [r4, #12]
 8001452:	430b      	orrs	r3, r1
 8001454:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	f013 0f08 	tst.w	r3, #8
 800145c:	d007      	beq.n	800146e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800145e:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 8001460:	6893      	ldr	r3, [r2, #8]
 8001462:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001466:	6921      	ldr	r1, [r4, #16]
 8001468:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800146c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146e:	f7ff ff09 	bl	8001284 <HAL_RCC_GetSysClockFreq>
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <HAL_RCC_ClockConfig+0x150>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800147a:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <HAL_RCC_ClockConfig+0x154>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	40d8      	lsrs	r0, r3
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_RCC_ClockConfig+0x158>)
 8001482:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_RCC_ClockConfig+0x15c>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	f7ff fa92 	bl	80009b0 <HAL_InitTick>
  return HAL_OK;
 800148c:	2000      	movs	r0, #0
}
 800148e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
}
 8001492:	4770      	bx	lr
      return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
 8001496:	e7fa      	b.n	800148e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
 800149a:	e7f8      	b.n	800148e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
 800149e:	e7f6      	b.n	800148e <HAL_RCC_ClockConfig+0x13a>
 80014a0:	40023c00 	.word	0x40023c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	08004ba0 	.word	0x08004ba0
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000008 	.word	0x20000008

080014b4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014b4:	4b01      	ldr	r3, [pc, #4]	@ (80014bc <HAL_RCC_GetHCLKFreq+0x8>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000000 	.word	0x20000000

080014c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c2:	f7ff fff7 	bl	80014b4 <HAL_RCC_GetHCLKFreq>
 80014c6:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014ce:	4a03      	ldr	r2, [pc, #12]	@ (80014dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80014d2:	40d8      	lsrs	r0, r3
 80014d4:	bd08      	pop	{r3, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	08004b98 	.word	0x08004b98

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e2:	f7ff ffe7 	bl	80014b4 <HAL_RCC_GetHCLKFreq>
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80014f2:	40d8      	lsrs	r0, r3
 80014f4:	bd08      	pop	{r3, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	08004b98 	.word	0x08004b98

08001500 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001500:	230f      	movs	r3, #15
 8001502:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_RCC_GetClockConfig+0x34>)
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001514:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800151c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001526:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_RCC_GetClockConfig+0x38>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	600b      	str	r3, [r1, #0]
}
 8001532:	4770      	bx	lr
 8001534:	40023800 	.word	0x40023800
 8001538:	40023c00 	.word	0x40023c00

0800153c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800153c:	4770      	bx	lr
	...

08001540 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001540:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d137      	bne.n	80015ba <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800154a:	2302      	movs	r3, #2
 800154c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001550:	6802      	ldr	r2, [r0, #0]
 8001552:	68d3      	ldr	r3, [r2, #12]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800155a:	6803      	ldr	r3, [r0, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_TIM_Base_Start_IT+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d020      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001566:	d01d      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001568:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800156c:	4293      	cmp	r3, r2
 800156e:	d019      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001570:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001574:	4293      	cmp	r3, r2
 8001576:	d015      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001578:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800157c:	4293      	cmp	r3, r2
 800157e:	d011      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001580:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001584:	4293      	cmp	r3, r2
 8001586:	d00d      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001588:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800158c:	4293      	cmp	r3, r2
 800158e:	d009      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
 8001590:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001594:	4293      	cmp	r3, r2
 8001596:	d005      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015a0:	2000      	movs	r0, #0
 80015a2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015aa:	2a06      	cmp	r2, #6
 80015ac:	d007      	beq.n	80015be <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80015b6:	2000      	movs	r0, #0
 80015b8:	4770      	bx	lr
    return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
 80015bc:	4770      	bx	lr
  return HAL_OK;
 80015be:	2000      	movs	r0, #0
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40010000 	.word	0x40010000

080015c8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015ca:	4770      	bx	lr

080015cc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015cc:	4770      	bx	lr

080015ce <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015ce:	4770      	bx	lr

080015d0 <HAL_TIM_IRQHandler>:
{
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80015d4:	6803      	ldr	r3, [r0, #0]
 80015d6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80015d8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015da:	f015 0f02 	tst.w	r5, #2
 80015de:	d010      	beq.n	8001602 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80015e0:	f016 0f02 	tst.w	r6, #2
 80015e4:	d00d      	beq.n	8001602 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015e6:	f06f 0202 	mvn.w	r2, #2
 80015ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015f0:	6803      	ldr	r3, [r0, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f013 0f03 	tst.w	r3, #3
 80015f8:	d05e      	beq.n	80016b8 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	f7ff ffe6 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	2300      	movs	r3, #0
 8001600:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001602:	f015 0f04 	tst.w	r5, #4
 8001606:	d012      	beq.n	800162e <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001608:	f016 0f04 	tst.w	r6, #4
 800160c:	d00f      	beq.n	800162e <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	f06f 0204 	mvn.w	r2, #4
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001616:	2302      	movs	r3, #2
 8001618:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001622:	d04f      	beq.n	80016c4 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff ffd0 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162a:	2300      	movs	r3, #0
 800162c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800162e:	f015 0f08 	tst.w	r5, #8
 8001632:	d012      	beq.n	800165a <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001634:	f016 0f08 	tst.w	r6, #8
 8001638:	d00f      	beq.n	800165a <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	f06f 0208 	mvn.w	r2, #8
 8001640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001642:	2304      	movs	r3, #4
 8001644:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f013 0f03 	tst.w	r3, #3
 800164e:	d040      	beq.n	80016d2 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff ffba 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001656:	2300      	movs	r3, #0
 8001658:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800165a:	f015 0f10 	tst.w	r5, #16
 800165e:	d012      	beq.n	8001686 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001660:	f016 0f10 	tst.w	r6, #16
 8001664:	d00f      	beq.n	8001686 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f06f 0210 	mvn.w	r2, #16
 800166c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800166e:	2308      	movs	r3, #8
 8001670:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800167a:	d031      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ffa4 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	2300      	movs	r3, #0
 8001684:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001686:	f015 0f01 	tst.w	r5, #1
 800168a:	d002      	beq.n	8001692 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800168c:	f016 0f01 	tst.w	r6, #1
 8001690:	d12d      	bne.n	80016ee <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001692:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001696:	d002      	beq.n	800169e <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001698:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800169c:	d12f      	bne.n	80016fe <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800169e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80016a2:	d002      	beq.n	80016aa <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80016a4:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80016a8:	d131      	bne.n	800170e <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80016aa:	f015 0f20 	tst.w	r5, #32
 80016ae:	d002      	beq.n	80016b6 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80016b0:	f016 0f20 	tst.w	r6, #32
 80016b4:	d133      	bne.n	800171e <HAL_TIM_IRQHandler+0x14e>
}
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b8:	f7ff ff86 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff ff85 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
 80016c2:	e79c      	b.n	80015fe <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c4:	4620      	mov	r0, r4
 80016c6:	f7ff ff7f 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff ff7e 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
 80016d0:	e7ab      	b.n	800162a <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ff78 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff ff77 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
 80016de:	e7ba      	b.n	8001656 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff ff71 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ff70 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
 80016ec:	e7c9      	b.n	8001682 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	f06f 0201 	mvn.w	r2, #1
 80016f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff f806 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
 80016fc:	e7c9      	b.n	8001692 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001704:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001706:	4620      	mov	r0, r4
 8001708:	f000 f8ab 	bl	8001862 <HAL_TIMEx_BreakCallback>
 800170c:	e7c7      	b.n	800169e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001714:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff ff59 	bl	80015ce <HAL_TIM_TriggerCallback>
 800171c:	e7c5      	b.n	80016aa <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	f06f 0220 	mvn.w	r2, #32
 8001724:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001726:	4620      	mov	r0, r4
 8001728:	f000 f89a 	bl	8001860 <HAL_TIMEx_CommutCallback>
}
 800172c:	e7c3      	b.n	80016b6 <HAL_TIM_IRQHandler+0xe6>
	...

08001730 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001730:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001732:	4a34      	ldr	r2, [pc, #208]	@ (8001804 <TIM_Base_SetConfig+0xd4>)
 8001734:	4290      	cmp	r0, r2
 8001736:	d012      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 8001738:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800173c:	d00f      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 800173e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001742:	4290      	cmp	r0, r2
 8001744:	d00b      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 8001746:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800174a:	4290      	cmp	r0, r2
 800174c:	d007      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 800174e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001752:	4290      	cmp	r0, r2
 8001754:	d003      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 8001756:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800175a:	4290      	cmp	r0, r2
 800175c:	d103      	bne.n	8001766 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800175e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001762:	684a      	ldr	r2, [r1, #4]
 8001764:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001766:	4a27      	ldr	r2, [pc, #156]	@ (8001804 <TIM_Base_SetConfig+0xd4>)
 8001768:	4290      	cmp	r0, r2
 800176a:	d02a      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 800176c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001770:	d027      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 8001772:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001776:	4290      	cmp	r0, r2
 8001778:	d023      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 800177a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800177e:	4290      	cmp	r0, r2
 8001780:	d01f      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 8001782:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001786:	4290      	cmp	r0, r2
 8001788:	d01b      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 800178a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800178e:	4290      	cmp	r0, r2
 8001790:	d017      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 8001792:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001796:	4290      	cmp	r0, r2
 8001798:	d013      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 800179a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800179e:	4290      	cmp	r0, r2
 80017a0:	d00f      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 80017a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017a6:	4290      	cmp	r0, r2
 80017a8:	d00b      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 80017aa:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80017ae:	4290      	cmp	r0, r2
 80017b0:	d007      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 80017b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017b6:	4290      	cmp	r0, r2
 80017b8:	d003      	beq.n	80017c2 <TIM_Base_SetConfig+0x92>
 80017ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017be:	4290      	cmp	r0, r2
 80017c0:	d103      	bne.n	80017ca <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c6:	68ca      	ldr	r2, [r1, #12]
 80017c8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017ce:	694a      	ldr	r2, [r1, #20]
 80017d0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d4:	688b      	ldr	r3, [r1, #8]
 80017d6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017d8:	680b      	ldr	r3, [r1, #0]
 80017da:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <TIM_Base_SetConfig+0xd4>)
 80017de:	4298      	cmp	r0, r3
 80017e0:	d003      	beq.n	80017ea <TIM_Base_SetConfig+0xba>
 80017e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d101      	bne.n	80017ee <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017ea:	690b      	ldr	r3, [r1, #16]
 80017ec:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017ee:	2301      	movs	r3, #1
 80017f0:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80017f2:	6903      	ldr	r3, [r0, #16]
 80017f4:	f013 0f01 	tst.w	r3, #1
 80017f8:	d003      	beq.n	8001802 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80017fa:	6903      	ldr	r3, [r0, #16]
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6103      	str	r3, [r0, #16]
  }
}
 8001802:	4770      	bx	lr
 8001804:	40010000 	.word	0x40010000

08001808 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001808:	b340      	cbz	r0, 800185c <HAL_TIM_Base_Init+0x54>
{
 800180a:	b510      	push	{r4, lr}
 800180c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800180e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001812:	b1f3      	cbz	r3, 8001852 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001814:	2302      	movs	r3, #2
 8001816:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800181a:	4621      	mov	r1, r4
 800181c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001820:	f7ff ff86 	bl	8001730 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001824:	2301      	movs	r3, #1
 8001826:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800182a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800182e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001832:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001836:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800183a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800183e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001842:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001846:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800184a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800184e:	2000      	movs	r0, #0
}
 8001850:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001852:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001856:	f7ff fe71 	bl	800153c <HAL_TIM_Base_MspInit>
 800185a:	e7db      	b.n	8001814 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800185c:	2001      	movs	r0, #1
}
 800185e:	4770      	bx	lr

08001860 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001860:	4770      	bx	lr

08001862 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001862:	4770      	bx	lr

08001864 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001864:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001866:	f102 030c 	add.w	r3, r2, #12
 800186a:	e853 3f00 	ldrex	r3, [r3]
 800186e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001872:	320c      	adds	r2, #12
 8001874:	e842 3100 	strex	r1, r3, [r2]
 8001878:	2900      	cmp	r1, #0
 800187a:	d1f3      	bne.n	8001864 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800187c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800187e:	f102 0314 	add.w	r3, r2, #20
 8001882:	e853 3f00 	ldrex	r3, [r3]
 8001886:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188a:	3214      	adds	r2, #20
 800188c:	e842 3100 	strex	r1, r3, [r2]
 8001890:	2900      	cmp	r1, #0
 8001892:	d1f3      	bne.n	800187c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001894:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800189a:	2320      	movs	r3, #32
 800189c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018a0:	2300      	movs	r3, #0
 80018a2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80018a4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a8:	f102 030c 	add.w	r3, r2, #12
 80018ac:	e853 3f00 	ldrex	r3, [r3]
 80018b0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b4:	320c      	adds	r2, #12
 80018b6:	e842 3100 	strex	r1, r3, [r2]
 80018ba:	2900      	cmp	r1, #0
 80018bc:	d1f3      	bne.n	80018a6 <UART_EndRxTransfer+0x42>
 80018be:	e7ec      	b.n	800189a <UART_EndRxTransfer+0x36>

080018c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018c4:	6802      	ldr	r2, [r0, #0]
 80018c6:	6913      	ldr	r3, [r2, #16]
 80018c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018cc:	68c1      	ldr	r1, [r0, #12]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018d2:	6883      	ldr	r3, [r0, #8]
 80018d4:	6902      	ldr	r2, [r0, #16]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	6943      	ldr	r3, [r0, #20]
 80018da:	431a      	orrs	r2, r3
 80018dc:	69c3      	ldr	r3, [r0, #28]
 80018de:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80018e0:	6801      	ldr	r1, [r0, #0]
 80018e2:	68cb      	ldr	r3, [r1, #12]
 80018e4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80018e8:	f023 030c 	bic.w	r3, r3, #12
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018f0:	6802      	ldr	r2, [r0, #0]
 80018f2:	6953      	ldr	r3, [r2, #20]
 80018f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018f8:	6981      	ldr	r1, [r0, #24]
 80018fa:	430b      	orrs	r3, r1
 80018fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	4a31      	ldr	r2, [pc, #196]	@ (80019c8 <UART_SetConfig+0x108>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d006      	beq.n	8001914 <UART_SetConfig+0x54>
 8001906:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800190a:	4293      	cmp	r3, r2
 800190c:	d002      	beq.n	8001914 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800190e:	f7ff fdd7 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 8001912:	e001      	b.n	8001918 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001914:	f7ff fde4 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001918:	69e3      	ldr	r3, [r4, #28]
 800191a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800191e:	d029      	beq.n	8001974 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001920:	2100      	movs	r1, #0
 8001922:	1803      	adds	r3, r0, r0
 8001924:	4149      	adcs	r1, r1
 8001926:	181b      	adds	r3, r3, r0
 8001928:	f141 0100 	adc.w	r1, r1, #0
 800192c:	00c9      	lsls	r1, r1, #3
 800192e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1818      	adds	r0, r3, r0
 8001936:	6863      	ldr	r3, [r4, #4]
 8001938:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800193c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001940:	f141 0100 	adc.w	r1, r1, #0
 8001944:	f7fe fc94 	bl	8000270 <__aeabi_uldivmod>
 8001948:	4a20      	ldr	r2, [pc, #128]	@ (80019cc <UART_SetConfig+0x10c>)
 800194a:	fba2 3100 	umull	r3, r1, r2, r0
 800194e:	0949      	lsrs	r1, r1, #5
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	fb03 0311 	mls	r3, r3, r1, r0
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	3332      	adds	r3, #50	@ 0x32
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001964:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	6821      	ldr	r1, [r4, #0]
 800196e:	4413      	add	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }
}
 8001972:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001974:	2300      	movs	r3, #0
 8001976:	1802      	adds	r2, r0, r0
 8001978:	eb43 0103 	adc.w	r1, r3, r3
 800197c:	1812      	adds	r2, r2, r0
 800197e:	f141 0100 	adc.w	r1, r1, #0
 8001982:	00c9      	lsls	r1, r1, #3
 8001984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	1810      	adds	r0, r2, r0
 800198c:	f141 0100 	adc.w	r1, r1, #0
 8001990:	6862      	ldr	r2, [r4, #4]
 8001992:	1892      	adds	r2, r2, r2
 8001994:	415b      	adcs	r3, r3
 8001996:	f7fe fc6b 	bl	8000270 <__aeabi_uldivmod>
 800199a:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <UART_SetConfig+0x10c>)
 800199c:	fba2 3100 	umull	r3, r1, r2, r0
 80019a0:	0949      	lsrs	r1, r1, #5
 80019a2:	2364      	movs	r3, #100	@ 0x64
 80019a4:	fb03 0311 	mls	r3, r3, r1, r0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	3332      	adds	r3, #50	@ 0x32
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	005a      	lsls	r2, r3, #1
 80019b4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80019b8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	6821      	ldr	r1, [r4, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
 80019c6:	e7d4      	b.n	8001972 <UART_SetConfig+0xb2>
 80019c8:	40011000 	.word	0x40011000
 80019cc:	51eb851f 	.word	0x51eb851f

080019d0 <UART_WaitOnFlagUntilTimeout>:
{
 80019d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019d4:	b083      	sub	sp, #12
 80019d6:	4605      	mov	r5, r0
 80019d8:	460e      	mov	r6, r1
 80019da:	4617      	mov	r7, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	681c      	ldr	r4, [r3, #0]
 80019e6:	ea36 0404 	bics.w	r4, r6, r4
 80019ea:	bf0c      	ite	eq
 80019ec:	2401      	moveq	r4, #1
 80019ee:	2400      	movne	r4, #0
 80019f0:	42bc      	cmp	r4, r7
 80019f2:	d128      	bne.n	8001a46 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80019f4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80019f8:	d0f3      	beq.n	80019e2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fa:	f7ff f8d3 	bl	8000ba4 <HAL_GetTick>
 80019fe:	eba0 0009 	sub.w	r0, r0, r9
 8001a02:	4540      	cmp	r0, r8
 8001a04:	d823      	bhi.n	8001a4e <UART_WaitOnFlagUntilTimeout+0x7e>
 8001a06:	f1b8 0f00 	cmp.w	r8, #0
 8001a0a:	d022      	beq.n	8001a52 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	f012 0f04 	tst.w	r2, #4
 8001a14:	d0e5      	beq.n	80019e2 <UART_WaitOnFlagUntilTimeout+0x12>
 8001a16:	2e80      	cmp	r6, #128	@ 0x80
 8001a18:	d0e3      	beq.n	80019e2 <UART_WaitOnFlagUntilTimeout+0x12>
 8001a1a:	2e40      	cmp	r6, #64	@ 0x40
 8001a1c:	d0e1      	beq.n	80019e2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	f012 0f08 	tst.w	r2, #8
 8001a24:	d0dd      	beq.n	80019e2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001a26:	2400      	movs	r4, #0
 8001a28:	9401      	str	r4, [sp, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001a34:	4628      	mov	r0, r5
 8001a36:	f7ff ff15 	bl	8001864 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001a3e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
 8001a44:	e000      	b.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001a46:	2000      	movs	r0, #0
}
 8001a48:	b003      	add	sp, #12
 8001a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001a4e:	2003      	movs	r0, #3
 8001a50:	e7fa      	b.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x78>
 8001a52:	2003      	movs	r0, #3
 8001a54:	e7f8      	b.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x78>

08001a56 <HAL_UART_Init>:
  if (huart == NULL)
 8001a56:	b360      	cbz	r0, 8001ab2 <HAL_UART_Init+0x5c>
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a5c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001a60:	b313      	cbz	r3, 8001aa8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a62:	2324      	movs	r3, #36	@ 0x24
 8001a64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	68d3      	ldr	r3, [r2, #12]
 8001a6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a70:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff ff24 	bl	80018c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	6913      	ldr	r3, [r2, #16]
 8001a7c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001a80:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a82:	6822      	ldr	r2, [r4, #0]
 8001a84:	6953      	ldr	r3, [r2, #20]
 8001a86:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001a8a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001a8c:	6822      	ldr	r2, [r4, #0]
 8001a8e:	68d3      	ldr	r3, [r2, #12]
 8001a90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a94:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a96:	2000      	movs	r0, #0
 8001a98:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aa4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001aa6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001aa8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001aac:	f7fe ff46 	bl	800093c <HAL_UART_MspInit>
 8001ab0:	e7d7      	b.n	8001a62 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_UART_Transmit>:
{
 8001ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001abe:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d156      	bne.n	8001b76 <HAL_UART_Transmit+0xc0>
 8001ac8:	4604      	mov	r4, r0
 8001aca:	460d      	mov	r5, r1
 8001acc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d055      	beq.n	8001b7e <HAL_UART_Transmit+0xc8>
 8001ad2:	b90a      	cbnz	r2, 8001ad8 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	e04f      	b.n	8001b78 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001adc:	2321      	movs	r3, #33	@ 0x21
 8001ade:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001ae2:	f7ff f85f 	bl	8000ba4 <HAL_GetTick>
 8001ae6:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001ae8:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001aec:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af0:	68a3      	ldr	r3, [r4, #8]
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af6:	d002      	beq.n	8001afe <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001af8:	f04f 0800 	mov.w	r8, #0
 8001afc:	e014      	b.n	8001b28 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001afe:	6923      	ldr	r3, [r4, #16]
 8001b00:	b32b      	cbz	r3, 8001b4e <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8001b02:	f04f 0800 	mov.w	r8, #0
 8001b06:	e00f      	b.n	8001b28 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001b0e:	2003      	movs	r0, #3
 8001b10:	e032      	b.n	8001b78 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b12:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001b1e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001b20:	b292      	uxth	r2, r2
 8001b22:	3a01      	subs	r2, #1
 8001b24:	b292      	uxth	r2, r2
 8001b26:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b28:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b193      	cbz	r3, 8001b54 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b2e:	9600      	str	r6, [sp, #0]
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	2180      	movs	r1, #128	@ 0x80
 8001b36:	4620      	mov	r0, r4
 8001b38:	f7ff ff4a 	bl	80019d0 <UART_WaitOnFlagUntilTimeout>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d1e3      	bne.n	8001b08 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8001b40:	2d00      	cmp	r5, #0
 8001b42:	d0e6      	beq.n	8001b12 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b44:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b4c:	e7e7      	b.n	8001b1e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8001b4e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001b50:	2500      	movs	r5, #0
 8001b52:	e7e9      	b.n	8001b28 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b54:	9600      	str	r6, [sp, #0]
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	@ 0x40
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff ff37 	bl	80019d0 <UART_WaitOnFlagUntilTimeout>
 8001b62:	b918      	cbnz	r0, 8001b6c <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001b64:	2320      	movs	r3, #32
 8001b66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001b6a:	e005      	b.n	8001b78 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001b72:	2003      	movs	r0, #3
 8001b74:	e000      	b.n	8001b78 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001b76:	2002      	movs	r0, #2
}
 8001b78:	b002      	add	sp, #8
 8001b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e7fa      	b.n	8001b78 <HAL_UART_Transmit+0xc2>

08001b82 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001b82:	2884      	cmp	r0, #132	@ 0x84
 8001b84:	d001      	beq.n	8001b8a <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8001b86:	3003      	adds	r0, #3
 8001b88:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b8a:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8001b8c:	4770      	bx	lr

08001b8e <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b8e:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8001b92:	3800      	subs	r0, #0
 8001b94:	bf18      	it	ne
 8001b96:	2001      	movne	r0, #1
 8001b98:	4770      	bx	lr

08001b9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b9a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001b9c:	f001 f904 	bl	8002da8 <vTaskStartScheduler>
  
  return osOK;
}
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	bd08      	pop	{r3, pc}

08001ba4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001ba4:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8001ba6:	f7ff fff2 	bl	8001b8e <inHandlerMode>
 8001baa:	b110      	cbz	r0, 8001bb2 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 8001bac:	f001 f94e 	bl	8002e4c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 8001bb0:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 8001bb2:	f001 f945 	bl	8002e40 <xTaskGetTickCount>
 8001bb6:	e7fb      	b.n	8001bb0 <osKernelSysTick+0xc>

08001bb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bbc:	b087      	sub	sp, #28
 8001bbe:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001bc0:	6944      	ldr	r4, [r0, #20]
 8001bc2:	b1c4      	cbz	r4, 8001bf6 <osThreadCreate+0x3e>
 8001bc4:	6985      	ldr	r5, [r0, #24]
 8001bc6:	b1b5      	cbz	r5, 8001bf6 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc8:	6847      	ldr	r7, [r0, #4]
 8001bca:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bce:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bd2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8001bd6:	f7ff ffd4 	bl	8001b82 <makeFreeRtosPriority>
 8001bda:	9502      	str	r5, [sp, #8]
 8001bdc:	9401      	str	r4, [sp, #4]
 8001bde:	9000      	str	r0, [sp, #0]
 8001be0:	4633      	mov	r3, r6
 8001be2:	464a      	mov	r2, r9
 8001be4:	4641      	mov	r1, r8
 8001be6:	4638      	mov	r0, r7
 8001be8:	f001 f870 	bl	8002ccc <xTaskCreateStatic>
 8001bec:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001bee:	9805      	ldr	r0, [sp, #20]
}
 8001bf0:	b007      	add	sp, #28
 8001bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bf6:	6844      	ldr	r4, [r0, #4]
 8001bf8:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bfa:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bfc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8001c00:	f7ff ffbf 	bl	8001b82 <makeFreeRtosPriority>
 8001c04:	ab05      	add	r3, sp, #20
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	9000      	str	r0, [sp, #0]
 8001c0a:	4633      	mov	r3, r6
 8001c0c:	b2ba      	uxth	r2, r7
 8001c0e:	4629      	mov	r1, r5
 8001c10:	4620      	mov	r0, r4
 8001c12:	f001 f896 	bl	8002d42 <xTaskCreate>
 8001c16:	2801      	cmp	r0, #1
 8001c18:	d0e9      	beq.n	8001bee <osThreadCreate+0x36>
      return NULL;
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	e7e8      	b.n	8001bf0 <osThreadCreate+0x38>

08001c1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c1e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c20:	b900      	cbnz	r0, 8001c24 <osDelay+0x6>
 8001c22:	2001      	movs	r0, #1
 8001c24:	f001 fa22 	bl	800306c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c28:	2000      	movs	r0, #0
 8001c2a:	bd08      	pop	{r3, pc}

08001c2c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001c2c:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001c2e:	6841      	ldr	r1, [r0, #4]
 8001c30:	b119      	cbz	r1, 8001c3a <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 fbf7 	bl	8002426 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8001c38:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f000 fbe8 	bl	8002410 <xQueueCreateMutex>
 8001c40:	e7fa      	b.n	8001c38 <osMutexCreate+0xc>

08001c42 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001c42:	b530      	push	{r4, r5, lr}
 8001c44:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001c46:	2300      	movs	r3, #0
 8001c48:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001c4a:	b310      	cbz	r0, 8001c92 <osMutexWait+0x50>
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4605      	mov	r5, r0
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001c50:	f7ff ff9d 	bl	8001b8e <inHandlerMode>
 8001c54:	b1a0      	cbz	r0, 8001c80 <osMutexWait+0x3e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001c56:	aa01      	add	r2, sp, #4
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f000 fe34 	bl	80028c8 <xQueueReceiveFromISR>
 8001c60:	2801      	cmp	r0, #1
 8001c62:	d118      	bne.n	8001c96 <osMutexWait+0x54>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001c64:	9b01      	ldr	r3, [sp, #4]
 8001c66:	b1c3      	cbz	r3, 8001c9a <osMutexWait+0x58>
 8001c68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e006      	b.n	8001c8e <osMutexWait+0x4c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001c80:	4621      	mov	r1, r4
 8001c82:	4628      	mov	r0, r5
 8001c84:	f000 fd4d 	bl	8002722 <xQueueSemaphoreTake>
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d108      	bne.n	8001c9e <osMutexWait+0x5c>
  return osOK;
 8001c8c:	2000      	movs	r0, #0
}
 8001c8e:	b003      	add	sp, #12
 8001c90:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8001c92:	2080      	movs	r0, #128	@ 0x80
 8001c94:	e7fb      	b.n	8001c8e <osMutexWait+0x4c>
      return osErrorOS;
 8001c96:	20ff      	movs	r0, #255	@ 0xff
 8001c98:	e7f9      	b.n	8001c8e <osMutexWait+0x4c>
  return osOK;
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e7f7      	b.n	8001c8e <osMutexWait+0x4c>
    return osErrorOS;
 8001c9e:	20ff      	movs	r0, #255	@ 0xff
 8001ca0:	e7f5      	b.n	8001c8e <osMutexWait+0x4c>

08001ca2 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8001cac:	f7ff ff6f 	bl	8001b8e <inHandlerMode>
 8001cb0:	b198      	cbz	r0, 8001cda <osMutexRelease+0x38>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001cb2:	a901      	add	r1, sp, #4
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f000 fc2c 	bl	8002512 <xQueueGiveFromISR>
 8001cba:	2801      	cmp	r0, #1
 8001cbc:	d11a      	bne.n	8001cf4 <osMutexRelease+0x52>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001cbe:	9b01      	ldr	r3, [sp, #4]
 8001cc0:	b1d3      	cbz	r3, 8001cf8 <osMutexRelease+0x56>
 8001cc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	e008      	b.n	8001cec <osMutexRelease+0x4a>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8001cda:	2300      	movs	r3, #0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f000 fac5 	bl	8002270 <xQueueGenericSend>
 8001ce6:	2801      	cmp	r0, #1
 8001ce8:	d002      	beq.n	8001cf0 <osMutexRelease+0x4e>
  {
    result = osErrorOS;
 8001cea:	20ff      	movs	r0, #255	@ 0xff
  }
  return result;
}
 8001cec:	b002      	add	sp, #8
 8001cee:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e7fb      	b.n	8001cec <osMutexRelease+0x4a>
      return osErrorOS;
 8001cf4:	20ff      	movs	r0, #255	@ 0xff
 8001cf6:	e7f9      	b.n	8001cec <osMutexRelease+0x4a>
  osStatus result = osOK;
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e7f7      	b.n	8001cec <osMutexRelease+0x4a>

08001cfc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001d00:	6844      	ldr	r4, [r0, #4]
 8001d02:	b17c      	cbz	r4, 8001d24 <osSemaphoreCreate+0x28>
    if (count == 1) {
 8001d04:	2901      	cmp	r1, #1
 8001d06:	d003      	beq.n	8001d10 <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001d08:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001d10:	2303      	movs	r3, #3
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4623      	mov	r3, r4
 8001d16:	2200      	movs	r2, #0
 8001d18:	4611      	mov	r1, r2
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 fa3a 	bl	8002194 <xQueueGenericCreateStatic>
 8001d20:	4604      	mov	r4, r0
 8001d22:	e7f2      	b.n	8001d0a <osSemaphoreCreate+0xe>
    if (count == 1) {
 8001d24:	2901      	cmp	r1, #1
 8001d26:	d1f0      	bne.n	8001d0a <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8001d28:	2203      	movs	r2, #3
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f000 fa7b 	bl	8002228 <xQueueGenericCreate>
 8001d32:	4604      	mov	r4, r0
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d0e8      	beq.n	8001d0a <osSemaphoreCreate+0xe>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f000 fa97 	bl	8002270 <xQueueGenericSend>
      return sema;
 8001d42:	e7e2      	b.n	8001d0a <osSemaphoreCreate+0xe>

08001d44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001d4c:	b318      	cbz	r0, 8001d96 <osSemaphoreWait+0x52>
 8001d4e:	460c      	mov	r4, r1
 8001d50:	4606      	mov	r6, r0
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001d52:	f7ff ff1c 	bl	8001b8e <inHandlerMode>
 8001d56:	4605      	mov	r5, r0
 8001d58:	b1a0      	cbz	r0, 8001d84 <osSemaphoreWait+0x40>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001d5a:	aa01      	add	r2, sp, #4
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f000 fdb2 	bl	80028c8 <xQueueReceiveFromISR>
 8001d64:	2801      	cmp	r0, #1
 8001d66:	d118      	bne.n	8001d9a <osSemaphoreWait+0x56>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001d68:	9d01      	ldr	r5, [sp, #4]
 8001d6a:	b18d      	cbz	r5, 8001d90 <osSemaphoreWait+0x4c>
 8001d6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d74:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8001d80:	2500      	movs	r5, #0
 8001d82:	e005      	b.n	8001d90 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001d84:	4621      	mov	r1, r4
 8001d86:	4630      	mov	r0, r6
 8001d88:	f000 fccb 	bl	8002722 <xQueueSemaphoreTake>
 8001d8c:	2801      	cmp	r0, #1
 8001d8e:	d106      	bne.n	8001d9e <osSemaphoreWait+0x5a>
}
 8001d90:	4628      	mov	r0, r5
 8001d92:	b002      	add	sp, #8
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 8001d96:	2580      	movs	r5, #128	@ 0x80
 8001d98:	e7fa      	b.n	8001d90 <osSemaphoreWait+0x4c>
      return osErrorOS;
 8001d9a:	25ff      	movs	r5, #255	@ 0xff
 8001d9c:	e7f8      	b.n	8001d90 <osSemaphoreWait+0x4c>
    return osErrorOS;
 8001d9e:	25ff      	movs	r5, #255	@ 0xff
 8001da0:	e7f6      	b.n	8001d90 <osSemaphoreWait+0x4c>

08001da2 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001da2:	b510      	push	{r4, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8001dac:	f7ff feef 	bl	8001b8e <inHandlerMode>
 8001db0:	b198      	cbz	r0, 8001dda <osSemaphoreRelease+0x38>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001db2:	a901      	add	r1, sp, #4
 8001db4:	4620      	mov	r0, r4
 8001db6:	f000 fbac 	bl	8002512 <xQueueGiveFromISR>
 8001dba:	2801      	cmp	r0, #1
 8001dbc:	d11a      	bne.n	8001df4 <osSemaphoreRelease+0x52>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001dbe:	9b01      	ldr	r3, [sp, #4]
 8001dc0:	b1d3      	cbz	r3, 8001df8 <osSemaphoreRelease+0x56>
 8001dc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	e008      	b.n	8001dec <osSemaphoreRelease+0x4a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	4620      	mov	r0, r4
 8001de2:	f000 fa45 	bl	8002270 <xQueueGenericSend>
 8001de6:	2801      	cmp	r0, #1
 8001de8:	d002      	beq.n	8001df0 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8001dea:	20ff      	movs	r0, #255	@ 0xff
    }
  }
  
  return result;
}
 8001dec:	b002      	add	sp, #8
 8001dee:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8001df0:	2000      	movs	r0, #0
 8001df2:	e7fb      	b.n	8001dec <osSemaphoreRelease+0x4a>
      return osErrorOS;
 8001df4:	20ff      	movs	r0, #255	@ 0xff
 8001df6:	e7f9      	b.n	8001dec <osSemaphoreRelease+0x4a>
  osStatus result = osOK;
 8001df8:	2000      	movs	r0, #0
 8001dfa:	e7f7      	b.n	8001dec <osSemaphoreRelease+0x4a>

08001dfc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001dfc:	b500      	push	{lr}
 8001dfe:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001e00:	6882      	ldr	r2, [r0, #8]
 8001e02:	b142      	cbz	r2, 8001e16 <osMessageCreate+0x1a>
 8001e04:	68c3      	ldr	r3, [r0, #12]
 8001e06:	b133      	cbz	r3, 8001e16 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	9100      	str	r1, [sp, #0]
 8001e0c:	6841      	ldr	r1, [r0, #4]
 8001e0e:	6800      	ldr	r0, [r0, #0]
 8001e10:	f000 f9c0 	bl	8002194 <xQueueGenericCreateStatic>
 8001e14:	e004      	b.n	8001e20 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001e16:	2200      	movs	r2, #0
 8001e18:	6841      	ldr	r1, [r0, #4]
 8001e1a:	6800      	ldr	r0, [r0, #0]
 8001e1c:	f000 fa04 	bl	8002228 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001e20:	b003      	add	sp, #12
 8001e22:	f85d fb04 	ldr.w	pc, [sp], #4

08001e26 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001e26:	b530      	push	{r4, r5, lr}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8001e32:	4615      	mov	r5, r2
 8001e34:	b902      	cbnz	r2, 8001e38 <osMessagePut+0x12>
    ticks = 1;
 8001e36:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8001e38:	f7ff fea9 	bl	8001b8e <inHandlerMode>
 8001e3c:	b1a8      	cbz	r0, 8001e6a <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001e3e:	2300      	movs	r3, #0
 8001e40:	aa03      	add	r2, sp, #12
 8001e42:	a901      	add	r1, sp, #4
 8001e44:	4620      	mov	r0, r4
 8001e46:	f000 fafd 	bl	8002444 <xQueueGenericSendFromISR>
 8001e4a:	2801      	cmp	r0, #1
 8001e4c:	d118      	bne.n	8001e80 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001e4e:	9b03      	ldr	r3, [sp, #12]
 8001e50:	b1c3      	cbz	r3, 8001e84 <osMessagePut+0x5e>
 8001e52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001e5e:	f3bf 8f4f 	dsb	sy
 8001e62:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8001e66:	2000      	movs	r0, #0
 8001e68:	e008      	b.n	8001e7c <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	462a      	mov	r2, r5
 8001e6e:	a901      	add	r1, sp, #4
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 f9fd 	bl	8002270 <xQueueGenericSend>
 8001e76:	2801      	cmp	r0, #1
 8001e78:	d106      	bne.n	8001e88 <osMessagePut+0x62>
  return osOK;
 8001e7a:	2000      	movs	r0, #0
}
 8001e7c:	b005      	add	sp, #20
 8001e7e:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8001e80:	20ff      	movs	r0, #255	@ 0xff
 8001e82:	e7fb      	b.n	8001e7c <osMessagePut+0x56>
  return osOK;
 8001e84:	2000      	movs	r0, #0
 8001e86:	e7f9      	b.n	8001e7c <osMessagePut+0x56>
      return osErrorOS;
 8001e88:	20ff      	movs	r0, #255	@ 0xff
 8001e8a:	e7f7      	b.n	8001e7c <osMessagePut+0x56>

08001e8c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001e92:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8001e98:	b1e1      	cbz	r1, 8001ed4 <osMessageGet+0x48>
 8001e9a:	460d      	mov	r5, r1
 8001e9c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001ea2:	f7ff fe74 	bl	8001b8e <inHandlerMode>
 8001ea6:	b300      	cbz	r0, 8001eea <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001ea8:	aa03      	add	r2, sp, #12
 8001eaa:	a901      	add	r1, sp, #4
 8001eac:	4628      	mov	r0, r5
 8001eae:	f000 fd0b 	bl	80028c8 <xQueueReceiveFromISR>
 8001eb2:	2801      	cmp	r0, #1
 8001eb4:	d016      	beq.n	8001ee4 <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001eba:	9b03      	ldr	r3, [sp, #12]
 8001ebc:	b1fb      	cbz	r3, 8001efe <osMessageGet+0x72>
 8001ebe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ec6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	e014      	b.n	8001efe <osMessageGet+0x72>
    event.status = osErrorParameter;
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	9300      	str	r3, [sp, #0]
    return event;
 8001ed8:	466b      	mov	r3, sp
 8001eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ee2:	e011      	b.n	8001f08 <osMessageGet+0x7c>
      event.status = osEventMessage;
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	e7e7      	b.n	8001eba <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001eea:	4632      	mov	r2, r6
 8001eec:	a901      	add	r1, sp, #4
 8001eee:	4628      	mov	r0, r5
 8001ef0:	f000 fb68 	bl	80025c4 <xQueueReceive>
 8001ef4:	2801      	cmp	r0, #1
 8001ef6:	d00a      	beq.n	8001f0e <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001ef8:	b106      	cbz	r6, 8001efc <osMessageGet+0x70>
 8001efa:	2640      	movs	r6, #64	@ 0x40
 8001efc:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8001efe:	466b      	mov	r3, sp
 8001f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f08:	4620      	mov	r0, r4
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	e7f4      	b.n	8001efe <osMessageGet+0x72>

08001f14 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f14:	f100 0308 	add.w	r3, r0, #8
 8001f18:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f1e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f20:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f22:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f28:	4770      	bx	lr

08001f2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f2e:	4770      	bx	lr

08001f30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f30:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f32:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f38:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f3a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f3c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	6003      	str	r3, [r0, #0]
}
 8001f44:	4770      	bx	lr

08001f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f46:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f48:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f4a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001f4e:	d011      	beq.n	8001f74 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f50:	f100 0308 	add.w	r3, r0, #8
 8001f54:	461c      	mov	r4, r3
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	42aa      	cmp	r2, r5
 8001f5c:	d9fa      	bls.n	8001f54 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f5e:	6863      	ldr	r3, [r4, #4]
 8001f60:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f62:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f64:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f66:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f68:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001f6a:	6803      	ldr	r3, [r0, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	6003      	str	r3, [r0, #0]
}
 8001f70:	bc30      	pop	{r4, r5}
 8001f72:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f74:	6904      	ldr	r4, [r0, #16]
 8001f76:	e7f2      	b.n	8001f5e <vListInsert+0x18>

08001f78 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f78:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f7a:	6841      	ldr	r1, [r0, #4]
 8001f7c:	6882      	ldr	r2, [r0, #8]
 8001f7e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f80:	6841      	ldr	r1, [r0, #4]
 8001f82:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4282      	cmp	r2, r0
 8001f88:	d006      	beq.n	8001f98 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	3a01      	subs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f94:	6818      	ldr	r0, [r3, #0]
}
 8001f96:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f98:	6882      	ldr	r2, [r0, #8]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	e7f5      	b.n	8001f8a <uxListRemove+0x12>

08001f9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001f9e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001fa0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001fa2:	b118      	cbz	r0, 8001fac <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8001fac:	4770      	bx	lr

08001fae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001fb2:	f001 fb27 	bl	8003604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001fb6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001fb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d004      	beq.n	8001fc8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8001fbe:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001fc0:	f001 fb42 	bl	8003648 <vPortExitCritical>

	return xReturn;
}
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001fc8:	2401      	movs	r4, #1
 8001fca:	e7f9      	b.n	8001fc0 <prvIsQueueFull+0x12>

08001fcc <prvIsQueueEmpty>:
{
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001fd0:	f001 fb18 	bl	8003604 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001fd4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001fd6:	b923      	cbnz	r3, 8001fe2 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001fd8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001fda:	f001 fb35 	bl	8003648 <vPortExitCritical>
}
 8001fde:	4620      	mov	r0, r4
 8001fe0:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001fe2:	2400      	movs	r4, #0
 8001fe4:	e7f9      	b.n	8001fda <prvIsQueueEmpty+0xe>

08001fe6 <prvCopyDataToQueue>:
{
 8001fe6:	b570      	push	{r4, r5, r6, lr}
 8001fe8:	4604      	mov	r4, r0
 8001fea:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fec:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001fee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001ff0:	b95a      	cbnz	r2, 800200a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ff2:	6803      	ldr	r3, [r0, #0]
 8001ff4:	b11b      	cbz	r3, 8001ffe <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001ff6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001ff8:	3601      	adds	r6, #1
 8001ffa:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ffe:	6880      	ldr	r0, [r0, #8]
 8002000:	f001 f9d8 	bl	80033b4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	60a3      	str	r3, [r4, #8]
 8002008:	e7f6      	b.n	8001ff8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800200a:	b96d      	cbnz	r5, 8002028 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800200c:	6840      	ldr	r0, [r0, #4]
 800200e:	f002 f84c 	bl	80040aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002012:	6863      	ldr	r3, [r4, #4]
 8002014:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002016:	4413      	add	r3, r2
 8002018:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800201a:	68a2      	ldr	r2, [r4, #8]
 800201c:	4293      	cmp	r3, r2
 800201e:	d319      	bcc.n	8002054 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002024:	4628      	mov	r0, r5
 8002026:	e7e7      	b.n	8001ff8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002028:	68c0      	ldr	r0, [r0, #12]
 800202a:	f002 f83e 	bl	80040aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800202e:	68e3      	ldr	r3, [r4, #12]
 8002030:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002032:	4251      	negs	r1, r2
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002038:	6822      	ldr	r2, [r4, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d202      	bcs.n	8002044 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800203e:	68a3      	ldr	r3, [r4, #8]
 8002040:	440b      	add	r3, r1
 8002042:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002044:	2d02      	cmp	r5, #2
 8002046:	d001      	beq.n	800204c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002048:	2000      	movs	r0, #0
 800204a:	e7d5      	b.n	8001ff8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800204c:	b126      	cbz	r6, 8002058 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800204e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002050:	2000      	movs	r0, #0
 8002052:	e7d1      	b.n	8001ff8 <prvCopyDataToQueue+0x12>
 8002054:	4628      	mov	r0, r5
 8002056:	e7cf      	b.n	8001ff8 <prvCopyDataToQueue+0x12>
 8002058:	2000      	movs	r0, #0
 800205a:	e7cd      	b.n	8001ff8 <prvCopyDataToQueue+0x12>

0800205c <prvCopyDataFromQueue>:
{
 800205c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800205e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002060:	b16a      	cbz	r2, 800207e <prvCopyDataFromQueue+0x22>
{
 8002062:	b510      	push	{r4, lr}
 8002064:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	4411      	add	r1, r2
 800206a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800206c:	689c      	ldr	r4, [r3, #8]
 800206e:	42a1      	cmp	r1, r4
 8002070:	d301      	bcc.n	8002076 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002076:	68d9      	ldr	r1, [r3, #12]
 8002078:	f002 f817 	bl	80040aa <memcpy>
}
 800207c:	bd10      	pop	{r4, pc}
 800207e:	4770      	bx	lr

08002080 <prvUnlockQueue>:
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002084:	f001 fabe 	bl	8003604 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002088:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800208c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800208e:	e001      	b.n	8002094 <prvUnlockQueue+0x14>
			--cTxLock;
 8002090:	3c01      	subs	r4, #1
 8002092:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002094:	2c00      	cmp	r4, #0
 8002096:	dd0a      	ble.n	80020ae <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002098:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800209a:	b143      	cbz	r3, 80020ae <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800209c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80020a0:	f001 f888 	bl	80031b4 <xTaskRemoveFromEventList>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d0f3      	beq.n	8002090 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80020a8:	f001 f918 	bl	80032dc <vTaskMissedYield>
 80020ac:	e7f0      	b.n	8002090 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80020ae:	23ff      	movs	r3, #255	@ 0xff
 80020b0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80020b4:	f001 fac8 	bl	8003648 <vPortExitCritical>
	taskENTER_CRITICAL();
 80020b8:	f001 faa4 	bl	8003604 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80020bc:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80020c0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020c2:	e001      	b.n	80020c8 <prvUnlockQueue+0x48>
				--cRxLock;
 80020c4:	3c01      	subs	r4, #1
 80020c6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	dd0a      	ble.n	80020e2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020cc:	692b      	ldr	r3, [r5, #16]
 80020ce:	b143      	cbz	r3, 80020e2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020d0:	f105 0010 	add.w	r0, r5, #16
 80020d4:	f001 f86e 	bl	80031b4 <xTaskRemoveFromEventList>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d0f3      	beq.n	80020c4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80020dc:	f001 f8fe 	bl	80032dc <vTaskMissedYield>
 80020e0:	e7f0      	b.n	80020c4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80020e2:	23ff      	movs	r3, #255	@ 0xff
 80020e4:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80020e8:	f001 faae 	bl	8003648 <vPortExitCritical>
}
 80020ec:	bd38      	pop	{r3, r4, r5, pc}

080020ee <xQueueGenericReset>:
{
 80020ee:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80020f0:	b1e0      	cbz	r0, 800212c <xQueueGenericReset+0x3e>
 80020f2:	460d      	mov	r5, r1
 80020f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80020f6:	f001 fa85 	bl	8003604 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80020fe:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002100:	fb01 3002 	mla	r0, r1, r2, r3
 8002104:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002106:	2000      	movs	r0, #0
 8002108:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800210a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800210c:	3a01      	subs	r2, #1
 800210e:	fb02 3301 	mla	r3, r2, r1, r3
 8002112:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002114:	23ff      	movs	r3, #255	@ 0xff
 8002116:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800211a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800211e:	b9fd      	cbnz	r5, 8002160 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	b963      	cbnz	r3, 800213e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002124:	f001 fa90 	bl	8003648 <vPortExitCritical>
}
 8002128:	2001      	movs	r0, #1
 800212a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800212c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800213c:	e7fe      	b.n	800213c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800213e:	f104 0010 	add.w	r0, r4, #16
 8002142:	f001 f837 	bl	80031b4 <xTaskRemoveFromEventList>
 8002146:	2800      	cmp	r0, #0
 8002148:	d0ec      	beq.n	8002124 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800214a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800214e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002152:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	e7e1      	b.n	8002124 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002160:	f104 0010 	add.w	r0, r4, #16
 8002164:	f7ff fed6 	bl	8001f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002168:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800216c:	f7ff fed2 	bl	8001f14 <vListInitialise>
 8002170:	e7d8      	b.n	8002124 <xQueueGenericReset+0x36>

08002172 <prvInitialiseNewQueue>:
{
 8002172:	b538      	push	{r3, r4, r5, lr}
 8002174:	461d      	mov	r5, r3
 8002176:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002178:	460b      	mov	r3, r1
 800217a:	b949      	cbnz	r1, 8002190 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800217c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800217e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002180:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002182:	2101      	movs	r1, #1
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ffb2 	bl	80020ee <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800218a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800218e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002190:	6022      	str	r2, [r4, #0]
 8002192:	e7f4      	b.n	800217e <prvInitialiseNewQueue+0xc>

08002194 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002194:	b940      	cbnz	r0, 80021a8 <xQueueGenericCreateStatic+0x14>
 8002196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	e7fe      	b.n	80021a6 <xQueueGenericCreateStatic+0x12>
	{
 80021a8:	b510      	push	{r4, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	461c      	mov	r4, r3
 80021ae:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80021b0:	b153      	cbz	r3, 80021c8 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021b2:	b192      	cbz	r2, 80021da <xQueueGenericCreateStatic+0x46>
 80021b4:	b989      	cbnz	r1, 80021da <xQueueGenericCreateStatic+0x46>
 80021b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	e7fe      	b.n	80021c6 <xQueueGenericCreateStatic+0x32>
 80021c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80021d8:	e7fe      	b.n	80021d8 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021da:	b16a      	cbz	r2, 80021f8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021dc:	2350      	movs	r3, #80	@ 0x50
 80021de:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021e0:	9b03      	ldr	r3, [sp, #12]
 80021e2:	2b50      	cmp	r3, #80	@ 0x50
 80021e4:	d013      	beq.n	800220e <xQueueGenericCreateStatic+0x7a>
 80021e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	e7fe      	b.n	80021f6 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021f8:	2900      	cmp	r1, #0
 80021fa:	d0ef      	beq.n	80021dc <xQueueGenericCreateStatic+0x48>
 80021fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	e7fe      	b.n	800220c <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800220e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002210:	2301      	movs	r3, #1
 8002212:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002216:	9400      	str	r4, [sp, #0]
 8002218:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800221c:	4660      	mov	r0, ip
 800221e:	f7ff ffa8 	bl	8002172 <prvInitialiseNewQueue>
	}
 8002222:	4620      	mov	r0, r4
 8002224:	b004      	add	sp, #16
 8002226:	bd10      	pop	{r4, pc}

08002228 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002228:	b940      	cbnz	r0, 800223c <xQueueGenericCreate+0x14>
 800222a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	e7fe      	b.n	800223a <xQueueGenericCreate+0x12>
	{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	b083      	sub	sp, #12
 8002240:	460d      	mov	r5, r1
 8002242:	4614      	mov	r4, r2
 8002244:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002246:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800224a:	3050      	adds	r0, #80	@ 0x50
 800224c:	f001 fb92 	bl	8003974 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002250:	4607      	mov	r7, r0
 8002252:	b150      	cbz	r0, 800226a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002254:	2300      	movs	r3, #0
 8002256:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800225a:	9000      	str	r0, [sp, #0]
 800225c:	4623      	mov	r3, r4
 800225e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8002262:	4629      	mov	r1, r5
 8002264:	4630      	mov	r0, r6
 8002266:	f7ff ff84 	bl	8002172 <prvInitialiseNewQueue>
	}
 800226a:	4638      	mov	r0, r7
 800226c:	b003      	add	sp, #12
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002270 <xQueueGenericSend>:
{
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002272:	b085      	sub	sp, #20
 8002274:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002276:	b188      	cbz	r0, 800229c <xQueueGenericSend+0x2c>
 8002278:	460f      	mov	r7, r1
 800227a:	461d      	mov	r5, r3
 800227c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800227e:	b1b1      	cbz	r1, 80022ae <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002280:	2d02      	cmp	r5, #2
 8002282:	d120      	bne.n	80022c6 <xQueueGenericSend+0x56>
 8002284:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d01d      	beq.n	80022c6 <xQueueGenericSend+0x56>
 800228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	e7fe      	b.n	800229a <xQueueGenericSend+0x2a>
 800229c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80022ac:	e7fe      	b.n	80022ac <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022ae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0e5      	beq.n	8002280 <xQueueGenericSend+0x10>
 80022b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	e7fe      	b.n	80022c4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022c6:	f001 f80f 	bl	80032e8 <xTaskGetSchedulerState>
 80022ca:	4606      	mov	r6, r0
 80022cc:	b958      	cbnz	r0, 80022e6 <xQueueGenericSend+0x76>
 80022ce:	9b01      	ldr	r3, [sp, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d048      	beq.n	8002366 <xQueueGenericSend+0xf6>
 80022d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericSend+0x74>
 80022e6:	2600      	movs	r6, #0
 80022e8:	e03d      	b.n	8002366 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022ea:	462a      	mov	r2, r5
 80022ec:	4639      	mov	r1, r7
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff fe79 	bl	8001fe6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80022f6:	b97b      	cbnz	r3, 8002318 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80022f8:	b148      	cbz	r0, 800230e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80022fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80022fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002302:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800230e:	f001 f99b 	bl	8003648 <vPortExitCritical>
				return pdPASS;
 8002312:	2001      	movs	r0, #1
}
 8002314:	b005      	add	sp, #20
 8002316:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002318:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800231c:	f000 ff4a 	bl	80031b4 <xTaskRemoveFromEventList>
 8002320:	2800      	cmp	r0, #0
 8002322:	d0f4      	beq.n	800230e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8002324:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800232c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	e7e9      	b.n	800230e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800233a:	f001 f985 	bl	8003648 <vPortExitCritical>
					return errQUEUE_FULL;
 800233e:	2000      	movs	r0, #0
 8002340:	e7e8      	b.n	8002314 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002342:	a802      	add	r0, sp, #8
 8002344:	f000 ff7c 	bl	8003240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002348:	2601      	movs	r6, #1
 800234a:	e019      	b.n	8002380 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800234c:	2300      	movs	r3, #0
 800234e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002352:	e021      	b.n	8002398 <xQueueGenericSend+0x128>
 8002354:	2300      	movs	r3, #0
 8002356:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800235a:	e023      	b.n	80023a4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fe8f 	bl	8002080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002362:	f000 fe07 	bl	8002f74 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002366:	f001 f94d 	bl	8003604 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800236a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800236c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800236e:	429a      	cmp	r2, r3
 8002370:	d3bb      	bcc.n	80022ea <xQueueGenericSend+0x7a>
 8002372:	2d02      	cmp	r5, #2
 8002374:	d0b9      	beq.n	80022ea <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002376:	9b01      	ldr	r3, [sp, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0de      	beq.n	800233a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800237c:	2e00      	cmp	r6, #0
 800237e:	d0e0      	beq.n	8002342 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8002380:	f001 f962 	bl	8003648 <vPortExitCritical>
		vTaskSuspendAll();
 8002384:	f000 fd54 	bl	8002e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002388:	f001 f93c 	bl	8003604 <vPortEnterCritical>
 800238c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002390:	b252      	sxtb	r2, r2
 8002392:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8002396:	d0d9      	beq.n	800234c <xQueueGenericSend+0xdc>
 8002398:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800239c:	b252      	sxtb	r2, r2
 800239e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80023a2:	d0d7      	beq.n	8002354 <xQueueGenericSend+0xe4>
 80023a4:	f001 f950 	bl	8003648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023a8:	a901      	add	r1, sp, #4
 80023aa:	a802      	add	r0, sp, #8
 80023ac:	f000 ff54 	bl	8003258 <xTaskCheckForTimeOut>
 80023b0:	b9d8      	cbnz	r0, 80023ea <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fdfb 	bl	8001fae <prvIsQueueFull>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d0cf      	beq.n	800235c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023bc:	9901      	ldr	r1, [sp, #4]
 80023be:	f104 0010 	add.w	r0, r4, #16
 80023c2:	f000 fedf 	bl	8003184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7ff fe5a 	bl	8002080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023cc:	f000 fdd2 	bl	8002f74 <xTaskResumeAll>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d1c8      	bne.n	8002366 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80023d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80023d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	e7bd      	b.n	8002366 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff fe48 	bl	8002080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023f0:	f000 fdc0 	bl	8002f74 <xTaskResumeAll>
			return errQUEUE_FULL;
 80023f4:	2000      	movs	r0, #0
 80023f6:	e78d      	b.n	8002314 <xQueueGenericSend+0xa4>

080023f8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80023f8:	b148      	cbz	r0, 800240e <prvInitialiseMutex+0x16>
	{
 80023fa:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80023fc:	2100      	movs	r1, #0
 80023fe:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002400:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002402:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002404:	460b      	mov	r3, r1
 8002406:	460a      	mov	r2, r1
 8002408:	f7ff ff32 	bl	8002270 <xQueueGenericSend>
	}
 800240c:	bd08      	pop	{r3, pc}
 800240e:	4770      	bx	lr

08002410 <xQueueCreateMutex>:
	{
 8002410:	b510      	push	{r4, lr}
 8002412:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002414:	2100      	movs	r1, #0
 8002416:	2001      	movs	r0, #1
 8002418:	f7ff ff06 	bl	8002228 <xQueueGenericCreate>
 800241c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800241e:	f7ff ffeb 	bl	80023f8 <prvInitialiseMutex>
	}
 8002422:	4620      	mov	r0, r4
 8002424:	bd10      	pop	{r4, pc}

08002426 <xQueueCreateMutexStatic>:
	{
 8002426:	b510      	push	{r4, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800242c:	9000      	str	r0, [sp, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	4611      	mov	r1, r2
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff feae 	bl	8002194 <xQueueGenericCreateStatic>
 8002438:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800243a:	f7ff ffdd 	bl	80023f8 <prvInitialiseMutex>
	}
 800243e:	4620      	mov	r0, r4
 8002440:	b002      	add	sp, #8
 8002442:	bd10      	pop	{r4, pc}

08002444 <xQueueGenericSendFromISR>:
{
 8002444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002448:	b190      	cbz	r0, 8002470 <xQueueGenericSendFromISR+0x2c>
 800244a:	460f      	mov	r7, r1
 800244c:	4616      	mov	r6, r2
 800244e:	461c      	mov	r4, r3
 8002450:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002452:	b1b1      	cbz	r1, 8002482 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002454:	2c02      	cmp	r4, #2
 8002456:	d120      	bne.n	800249a <xQueueGenericSendFromISR+0x56>
 8002458:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d01d      	beq.n	800249a <xQueueGenericSendFromISR+0x56>
 800245e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	e7fe      	b.n	800246e <xQueueGenericSendFromISR+0x2a>
 8002470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002480:	e7fe      	b.n	8002480 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002482:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0e5      	beq.n	8002454 <xQueueGenericSendFromISR+0x10>
 8002488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	e7fe      	b.n	8002498 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800249a:	f001 f9d9 	bl	8003850 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800249e:	f3ef 8811 	mrs	r8, BASEPRI
 80024a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024b2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80024b4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d306      	bcc.n	80024c8 <xQueueGenericSendFromISR+0x84>
 80024ba:	2c02      	cmp	r4, #2
 80024bc:	d004      	beq.n	80024c8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80024be:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024c0:	f388 8811 	msr	BASEPRI, r8
}
 80024c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80024c8:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80024cc:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024d0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024d2:	4622      	mov	r2, r4
 80024d4:	4639      	mov	r1, r7
 80024d6:	4628      	mov	r0, r5
 80024d8:	f7ff fd85 	bl	8001fe6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80024dc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80024e0:	d006      	beq.n	80024f0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024e2:	f109 0301 	add.w	r3, r9, #1
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80024ec:	2001      	movs	r0, #1
 80024ee:	e7e7      	b.n	80024c0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80024f2:	b90b      	cbnz	r3, 80024f8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80024f4:	2001      	movs	r0, #1
 80024f6:	e7e3      	b.n	80024c0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80024fc:	f000 fe5a 	bl	80031b4 <xTaskRemoveFromEventList>
 8002500:	b118      	cbz	r0, 800250a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002502:	b126      	cbz	r6, 800250e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002504:	2001      	movs	r0, #1
 8002506:	6030      	str	r0, [r6, #0]
 8002508:	e7da      	b.n	80024c0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800250a:	2001      	movs	r0, #1
 800250c:	e7d8      	b.n	80024c0 <xQueueGenericSendFromISR+0x7c>
 800250e:	2001      	movs	r0, #1
 8002510:	e7d6      	b.n	80024c0 <xQueueGenericSendFromISR+0x7c>

08002512 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8002512:	b168      	cbz	r0, 8002530 <xQueueGiveFromISR+0x1e>
{
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	460c      	mov	r4, r1
 8002518:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800251a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800251c:	b18b      	cbz	r3, 8002542 <xQueueGiveFromISR+0x30>
	__asm volatile
 800251e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	e7fe      	b.n	800252e <xQueueGiveFromISR+0x1c>
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002540:	e7fe      	b.n	8002540 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002542:	6803      	ldr	r3, [r0, #0]
 8002544:	b1eb      	cbz	r3, 8002582 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002546:	f001 f983 	bl	8003850 <vPortValidateInterruptPriority>
	__asm volatile
 800254a:	f3ef 8611 	mrs	r6, BASEPRI
 800254e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800255e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002560:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002562:	4293      	cmp	r3, r2
 8002564:	d926      	bls.n	80025b4 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002566:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800256a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800256c:	3201      	adds	r2, #1
 800256e:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002574:	d011      	beq.n	800259a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002576:	3301      	adds	r3, #1
 8002578:	b25b      	sxtb	r3, r3
 800257a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800257e:	2001      	movs	r0, #1
 8002580:	e019      	b.n	80025b6 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002582:	6883      	ldr	r3, [r0, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0de      	beq.n	8002546 <xQueueGiveFromISR+0x34>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	e7fe      	b.n	8002598 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800259a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800259c:	b90b      	cbnz	r3, 80025a2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800259e:	2001      	movs	r0, #1
 80025a0:	e009      	b.n	80025b6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80025a6:	f000 fe05 	bl	80031b4 <xTaskRemoveFromEventList>
 80025aa:	b138      	cbz	r0, 80025bc <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80025ac:	b144      	cbz	r4, 80025c0 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025ae:	2001      	movs	r0, #1
 80025b0:	6020      	str	r0, [r4, #0]
 80025b2:	e000      	b.n	80025b6 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80025b4:	2000      	movs	r0, #0
	__asm volatile
 80025b6:	f386 8811 	msr	BASEPRI, r6
}
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80025bc:	2001      	movs	r0, #1
 80025be:	e7fa      	b.n	80025b6 <xQueueGiveFromISR+0xa4>
 80025c0:	2001      	movs	r0, #1
 80025c2:	e7f8      	b.n	80025b6 <xQueueGiveFromISR+0xa4>

080025c4 <xQueueReceive>:
{
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80025ca:	b190      	cbz	r0, 80025f2 <xQueueReceive+0x2e>
 80025cc:	460f      	mov	r7, r1
 80025ce:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025d0:	b1c1      	cbz	r1, 8002604 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025d2:	f000 fe89 	bl	80032e8 <xTaskGetSchedulerState>
 80025d6:	4606      	mov	r6, r0
 80025d8:	bb00      	cbnz	r0, 800261c <xQueueReceive+0x58>
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05e      	beq.n	800269e <xQueueReceive+0xda>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	e7fe      	b.n	80025f0 <xQueueReceive+0x2c>
 80025f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002602:	e7fe      	b.n	8002602 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002604:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0e3      	beq.n	80025d2 <xQueueReceive+0xe>
 800260a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	e7fe      	b.n	800261a <xQueueReceive+0x56>
 800261c:	2600      	movs	r6, #0
 800261e:	e03e      	b.n	800269e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002620:	4639      	mov	r1, r7
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff fd1a 	bl	800205c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002628:	3d01      	subs	r5, #1
 800262a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262c:	6923      	ldr	r3, [r4, #16]
 800262e:	b923      	cbnz	r3, 800263a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8002630:	f001 f80a 	bl	8003648 <vPortExitCritical>
				return pdPASS;
 8002634:	2001      	movs	r0, #1
}
 8002636:	b005      	add	sp, #20
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800263a:	f104 0010 	add.w	r0, r4, #16
 800263e:	f000 fdb9 	bl	80031b4 <xTaskRemoveFromEventList>
 8002642:	2800      	cmp	r0, #0
 8002644:	d0f4      	beq.n	8002630 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8002646:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800264a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800264e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	e7e9      	b.n	8002630 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800265c:	f000 fff4 	bl	8003648 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002660:	2000      	movs	r0, #0
 8002662:	e7e8      	b.n	8002636 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002664:	a802      	add	r0, sp, #8
 8002666:	f000 fdeb 	bl	8003240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800266a:	2601      	movs	r6, #1
 800266c:	e021      	b.n	80026b2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800266e:	2300      	movs	r3, #0
 8002670:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002674:	e029      	b.n	80026ca <xQueueReceive+0x106>
 8002676:	2300      	movs	r3, #0
 8002678:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800267c:	e02b      	b.n	80026d6 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff fcfe 	bl	8002080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002684:	f000 fc76 	bl	8002f74 <xTaskResumeAll>
 8002688:	e009      	b.n	800269e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff fcf8 	bl	8002080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002690:	f000 fc70 	bl	8002f74 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff fc99 	bl	8001fcc <prvIsQueueEmpty>
 800269a:	2800      	cmp	r0, #0
 800269c:	d13f      	bne.n	800271e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800269e:	f000 ffb1 	bl	8003604 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026a2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	d1bb      	bne.n	8002620 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80026a8:	9b01      	ldr	r3, [sp, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0d6      	beq.n	800265c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80026ae:	2e00      	cmp	r6, #0
 80026b0:	d0d8      	beq.n	8002664 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80026b2:	f000 ffc9 	bl	8003648 <vPortExitCritical>
		vTaskSuspendAll();
 80026b6:	f000 fbbb 	bl	8002e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026ba:	f000 ffa3 	bl	8003604 <vPortEnterCritical>
 80026be:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026c8:	d0d1      	beq.n	800266e <xQueueReceive+0xaa>
 80026ca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026d4:	d0cf      	beq.n	8002676 <xQueueReceive+0xb2>
 80026d6:	f000 ffb7 	bl	8003648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026da:	a901      	add	r1, sp, #4
 80026dc:	a802      	add	r0, sp, #8
 80026de:	f000 fdbb 	bl	8003258 <xTaskCheckForTimeOut>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d1d1      	bne.n	800268a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff fc70 	bl	8001fcc <prvIsQueueEmpty>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d0c6      	beq.n	800267e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026f0:	9901      	ldr	r1, [sp, #4]
 80026f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80026f6:	f000 fd45 	bl	8003184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff fcc0 	bl	8002080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002700:	f000 fc38 	bl	8002f74 <xTaskResumeAll>
 8002704:	2800      	cmp	r0, #0
 8002706:	d1ca      	bne.n	800269e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8002708:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800270c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002710:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	e7bf      	b.n	800269e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800271e:	2000      	movs	r0, #0
 8002720:	e789      	b.n	8002636 <xQueueReceive+0x72>

08002722 <xQueueSemaphoreTake>:
{
 8002722:	b570      	push	{r4, r5, r6, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002728:	b158      	cbz	r0, 8002742 <xQueueSemaphoreTake+0x20>
 800272a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800272c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800272e:	b18b      	cbz	r3, 8002754 <xQueueSemaphoreTake+0x32>
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	e7fe      	b.n	8002740 <xQueueSemaphoreTake+0x1e>
 8002742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002752:	e7fe      	b.n	8002752 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002754:	f000 fdc8 	bl	80032e8 <xTaskGetSchedulerState>
 8002758:	4605      	mov	r5, r0
 800275a:	b950      	cbnz	r0, 8002772 <xQueueSemaphoreTake+0x50>
 800275c:	9b01      	ldr	r3, [sp, #4]
 800275e:	b15b      	cbz	r3, 8002778 <xQueueSemaphoreTake+0x56>
 8002760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	e7fe      	b.n	8002770 <xQueueSemaphoreTake+0x4e>
 8002772:	2600      	movs	r6, #0
 8002774:	4635      	mov	r5, r6
 8002776:	e055      	b.n	8002824 <xQueueSemaphoreTake+0x102>
 8002778:	4606      	mov	r6, r0
 800277a:	e053      	b.n	8002824 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800277c:	3b01      	subs	r3, #1
 800277e:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	b13b      	cbz	r3, 8002794 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002784:	6923      	ldr	r3, [r4, #16]
 8002786:	b94b      	cbnz	r3, 800279c <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8002788:	f000 ff5e 	bl	8003648 <vPortExitCritical>
				return pdPASS;
 800278c:	2601      	movs	r6, #1
}
 800278e:	4630      	mov	r0, r6
 8002790:	b004      	add	sp, #16
 8002792:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002794:	f000 fec0 	bl	8003518 <pvTaskIncrementMutexHeldCount>
 8002798:	60a0      	str	r0, [r4, #8]
 800279a:	e7f3      	b.n	8002784 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800279c:	f104 0010 	add.w	r0, r4, #16
 80027a0:	f000 fd08 	bl	80031b4 <xTaskRemoveFromEventList>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d0ef      	beq.n	8002788 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80027a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80027ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	e7e4      	b.n	8002788 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80027be:	b146      	cbz	r6, 80027d2 <xQueueSemaphoreTake+0xb0>
 80027c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	e7fe      	b.n	80027d0 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 80027d2:	f000 ff39 	bl	8003648 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80027d6:	e7da      	b.n	800278e <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d8:	a802      	add	r0, sp, #8
 80027da:	f000 fd31 	bl	8003240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027de:	2501      	movs	r5, #1
 80027e0:	e02a      	b.n	8002838 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 80027e2:	2300      	movs	r3, #0
 80027e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80027e8:	e032      	b.n	8002850 <xQueueSemaphoreTake+0x12e>
 80027ea:	2300      	movs	r3, #0
 80027ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80027f0:	e034      	b.n	800285c <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80027f2:	f000 ff07 	bl	8003604 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027f6:	68a0      	ldr	r0, [r4, #8]
 80027f8:	f000 fd86 	bl	8003308 <xTaskPriorityInherit>
 80027fc:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80027fe:	f000 ff23 	bl	8003648 <vPortExitCritical>
 8002802:	e03b      	b.n	800287c <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff fc3b 	bl	8002080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800280a:	f000 fbb3 	bl	8002f74 <xTaskResumeAll>
 800280e:	e009      	b.n	8002824 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fc35 	bl	8002080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002816:	f000 fbad 	bl	8002f74 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff fbd6 	bl	8001fcc <prvIsQueueEmpty>
 8002820:	2800      	cmp	r0, #0
 8002822:	d142      	bne.n	80028aa <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8002824:	f000 feee 	bl	8003604 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002828:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1a6      	bne.n	800277c <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800282e:	9b01      	ldr	r3, [sp, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0c4      	beq.n	80027be <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8002834:	2d00      	cmp	r5, #0
 8002836:	d0cf      	beq.n	80027d8 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8002838:	f000 ff06 	bl	8003648 <vPortExitCritical>
		vTaskSuspendAll();
 800283c:	f000 faf8 	bl	8002e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002840:	f000 fee0 	bl	8003604 <vPortEnterCritical>
 8002844:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002848:	b25b      	sxtb	r3, r3
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800284e:	d0c8      	beq.n	80027e2 <xQueueSemaphoreTake+0xc0>
 8002850:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800285a:	d0c6      	beq.n	80027ea <xQueueSemaphoreTake+0xc8>
 800285c:	f000 fef4 	bl	8003648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002860:	a901      	add	r1, sp, #4
 8002862:	a802      	add	r0, sp, #8
 8002864:	f000 fcf8 	bl	8003258 <xTaskCheckForTimeOut>
 8002868:	2800      	cmp	r0, #0
 800286a:	d1d1      	bne.n	8002810 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800286c:	4620      	mov	r0, r4
 800286e:	f7ff fbad 	bl	8001fcc <prvIsQueueEmpty>
 8002872:	2800      	cmp	r0, #0
 8002874:	d0c6      	beq.n	8002804 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ba      	beq.n	80027f2 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800287c:	9901      	ldr	r1, [sp, #4]
 800287e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002882:	f000 fc7f 	bl	8003184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002886:	4620      	mov	r0, r4
 8002888:	f7ff fbfa 	bl	8002080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800288c:	f000 fb72 	bl	8002f74 <xTaskResumeAll>
 8002890:	2800      	cmp	r0, #0
 8002892:	d1c7      	bne.n	8002824 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8002894:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800289c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	e7bc      	b.n	8002824 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80028aa:	b90e      	cbnz	r6, 80028b0 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80028ac:	2600      	movs	r6, #0
 80028ae:	e76e      	b.n	800278e <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80028b0:	f000 fea8 	bl	8003604 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff fb72 	bl	8001f9e <prvGetDisinheritPriorityAfterTimeout>
 80028ba:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80028bc:	68a0      	ldr	r0, [r4, #8]
 80028be:	f000 fdd1 	bl	8003464 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80028c2:	f000 fec1 	bl	8003648 <vPortExitCritical>
 80028c6:	e7f1      	b.n	80028ac <xQueueSemaphoreTake+0x18a>

080028c8 <xQueueReceiveFromISR>:
{
 80028c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80028cc:	b1b0      	cbz	r0, 80028fc <xQueueReceiveFromISR+0x34>
 80028ce:	460d      	mov	r5, r1
 80028d0:	4690      	mov	r8, r2
 80028d2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028d4:	b1d9      	cbz	r1, 800290e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d6:	f000 ffbb 	bl	8003850 <vPortValidateInterruptPriority>
	__asm volatile
 80028da:	f3ef 8711 	mrs	r7, BASEPRI
 80028de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028f0:	b9ce      	cbnz	r6, 8002926 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80028f2:	2000      	movs	r0, #0
	__asm volatile
 80028f4:	f387 8811 	msr	BASEPRI, r7
}
 80028f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800290c:	e7fe      	b.n	800290c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0e0      	beq.n	80028d6 <xQueueReceiveFromISR+0xe>
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	e7fe      	b.n	8002924 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002926:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800292a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800292e:	4629      	mov	r1, r5
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fb93 	bl	800205c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002936:	1e73      	subs	r3, r6, #1
 8002938:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800293a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 800293e:	d006      	beq.n	800294e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002940:	f109 0301 	add.w	r3, r9, #1
 8002944:	b25b      	sxtb	r3, r3
 8002946:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800294a:	2001      	movs	r0, #1
 800294c:	e7d2      	b.n	80028f4 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	b90b      	cbnz	r3, 8002956 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8002952:	2001      	movs	r0, #1
 8002954:	e7ce      	b.n	80028f4 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002956:	f104 0010 	add.w	r0, r4, #16
 800295a:	f000 fc2b 	bl	80031b4 <xTaskRemoveFromEventList>
 800295e:	b130      	cbz	r0, 800296e <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8002960:	f1b8 0f00 	cmp.w	r8, #0
 8002964:	d005      	beq.n	8002972 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002966:	2001      	movs	r0, #1
 8002968:	f8c8 0000 	str.w	r0, [r8]
 800296c:	e7c2      	b.n	80028f4 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800296e:	2001      	movs	r0, #1
 8002970:	e7c0      	b.n	80028f4 <xQueueReceiveFromISR+0x2c>
 8002972:	2001      	movs	r0, #1
 8002974:	e7be      	b.n	80028f4 <xQueueReceiveFromISR+0x2c>
	...

08002978 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <prvResetNextTaskUnblockTime+0x24>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	b923      	cbnz	r3, 800298a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <prvResetNextTaskUnblockTime+0x28>)
 8002982:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <prvResetNextTaskUnblockTime+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4b02      	ldr	r3, [pc, #8]	@ (80029a0 <prvResetNextTaskUnblockTime+0x28>)
 8002996:	601a      	str	r2, [r3, #0]
	}
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000360 	.word	0x20000360
 80029a0:	200002f8 	.word	0x200002f8

080029a4 <prvInitialiseNewTask>:
{
 80029a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a8:	4680      	mov	r8, r0
 80029aa:	460d      	mov	r5, r1
 80029ac:	4617      	mov	r7, r2
 80029ae:	4699      	mov	r9, r3
 80029b0:	9e08      	ldr	r6, [sp, #32]
 80029b2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80029b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	21a5      	movs	r1, #165	@ 0xa5
 80029bc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80029be:	f001 faa3 	bl	8003f08 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029c4:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 80029c8:	3a01      	subs	r2, #1
 80029ca:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029ce:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80029d2:	6427      	str	r7, [r4, #64]	@ 0x40
	if( pcName != NULL )
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	d043      	beq.n	8002a60 <prvInitialiseNewTask+0xbc>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029d8:	f04f 0c00 	mov.w	ip, #0
 80029dc:	f1bc 0f0b 	cmp.w	ip, #11
 80029e0:	d809      	bhi.n	80029f6 <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029e2:	f815 300c 	ldrb.w	r3, [r5, ip]
 80029e6:	eb04 020c 	add.w	r2, r4, ip
 80029ea:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80029ee:	b113      	cbz	r3, 80029f6 <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f0:	f10c 0c01 	add.w	ip, ip, #1
 80029f4:	e7f2      	b.n	80029dc <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029f6:	2300      	movs	r3, #0
 80029f8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029fc:	2e06      	cmp	r6, #6
 80029fe:	d900      	bls.n	8002a02 <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a00:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8002a02:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002a04:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002a06:	2500      	movs	r5, #0
 8002a08:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a0a:	1d20      	adds	r0, r4, #4
 8002a0c:	f7ff fa8d 	bl	8001f2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a10:	f104 0018 	add.w	r0, r4, #24
 8002a14:	f7ff fa89 	bl	8001f2a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a18:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a1a:	f1c6 0607 	rsb	r6, r6, #7
 8002a1e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a20:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002a22:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8002a24:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a28:	f884 50a8 	strb.w	r5, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002a2c:	224c      	movs	r2, #76	@ 0x4c
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a34:	f001 fa68 	bl	8003f08 <memset>
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <prvInitialiseNewTask+0xc4>)
 8002a3a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002a3c:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a40:	6622      	str	r2, [r4, #96]	@ 0x60
 8002a42:	33d0      	adds	r3, #208	@ 0xd0
 8002a44:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a46:	464a      	mov	r2, r9
 8002a48:	4641      	mov	r1, r8
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f000 fdb0 	bl	80035b0 <pxPortInitialiseStack>
 8002a50:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8002a52:	f1ba 0f00 	cmp.w	sl, #0
 8002a56:	d001      	beq.n	8002a5c <prvInitialiseNewTask+0xb8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a58:	f8ca 4000 	str.w	r4, [sl]
}
 8002a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8002a66:	e7c9      	b.n	80029fc <prvInitialiseNewTask+0x58>
 8002a68:	20001444 	.word	0x20001444

08002a6c <prvInitialiseTaskLists>:
{
 8002a6c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a6e:	2400      	movs	r4, #0
 8002a70:	e007      	b.n	8002a82 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a72:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002a76:	0093      	lsls	r3, r2, #2
 8002a78:	480e      	ldr	r0, [pc, #56]	@ (8002ab4 <prvInitialiseTaskLists+0x48>)
 8002a7a:	4418      	add	r0, r3
 8002a7c:	f7ff fa4a 	bl	8001f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a80:	3401      	adds	r4, #1
 8002a82:	2c06      	cmp	r4, #6
 8002a84:	d9f5      	bls.n	8002a72 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002a86:	4d0c      	ldr	r5, [pc, #48]	@ (8002ab8 <prvInitialiseTaskLists+0x4c>)
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f7ff fa43 	bl	8001f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a8e:	4c0b      	ldr	r4, [pc, #44]	@ (8002abc <prvInitialiseTaskLists+0x50>)
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff fa3f 	bl	8001f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a96:	480a      	ldr	r0, [pc, #40]	@ (8002ac0 <prvInitialiseTaskLists+0x54>)
 8002a98:	f7ff fa3c 	bl	8001f14 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002a9c:	4809      	ldr	r0, [pc, #36]	@ (8002ac4 <prvInitialiseTaskLists+0x58>)
 8002a9e:	f7ff fa39 	bl	8001f14 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002aa2:	4809      	ldr	r0, [pc, #36]	@ (8002ac8 <prvInitialiseTaskLists+0x5c>)
 8002aa4:	f7ff fa36 	bl	8001f14 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <prvInitialiseTaskLists+0x60>)
 8002aaa:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002aae:	601c      	str	r4, [r3, #0]
}
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000038c 	.word	0x2000038c
 8002ab8:	20000378 	.word	0x20000378
 8002abc:	20000364 	.word	0x20000364
 8002ac0:	20000348 	.word	0x20000348
 8002ac4:	20000334 	.word	0x20000334
 8002ac8:	2000031c 	.word	0x2000031c
 8002acc:	20000360 	.word	0x20000360
 8002ad0:	2000035c 	.word	0x2000035c

08002ad4 <prvAddNewTaskToReadyList>:
{
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002ad8:	f000 fd94 	bl	8003604 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002adc:	4a22      	ldr	r2, [pc, #136]	@ (8002b68 <prvAddNewTaskToReadyList+0x94>)
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <prvAddNewTaskToReadyList+0x98>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b15b      	cbz	r3, 8002b02 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8002aea:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <prvAddNewTaskToReadyList+0x9c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b96b      	cbnz	r3, 8002b0c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002af0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <prvAddNewTaskToReadyList+0x98>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d807      	bhi.n	8002b0c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <prvAddNewTaskToReadyList+0x98>)
 8002afe:	601c      	str	r4, [r3, #0]
 8002b00:	e004      	b.n	8002b0c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <prvAddNewTaskToReadyList+0x98>)
 8002b04:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d029      	beq.n	8002b60 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8002b0c:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <prvAddNewTaskToReadyList+0xa0>)
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b14:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002b16:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4083      	lsls	r3, r0
 8002b1c:	4a16      	ldr	r2, [pc, #88]	@ (8002b78 <prvAddNewTaskToReadyList+0xa4>)
 8002b1e:	6811      	ldr	r1, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b28:	1d21      	adds	r1, r4, #4
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <prvAddNewTaskToReadyList+0xa8>)
 8002b2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002b30:	f7ff f9fe 	bl	8001f30 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002b34:	f000 fd88 	bl	8003648 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002b38:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <prvAddNewTaskToReadyList+0x9c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b17b      	cbz	r3, 8002b5e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <prvAddNewTaskToReadyList+0x98>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d209      	bcs.n	8002b5e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8002b4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	f3bf 8f6f 	isb	sy
}
 8002b5e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8002b60:	f7ff ff84 	bl	8002a6c <prvInitialiseTaskLists>
 8002b64:	e7d2      	b.n	8002b0c <prvAddNewTaskToReadyList+0x38>
 8002b66:	bf00      	nop
 8002b68:	20000318 	.word	0x20000318
 8002b6c:	20000418 	.word	0x20000418
 8002b70:	2000030c 	.word	0x2000030c
 8002b74:	200002fc 	.word	0x200002fc
 8002b78:	20000310 	.word	0x20000310
 8002b7c:	2000038c 	.word	0x2000038c

08002b80 <prvDeleteTCB>:
	{
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002b84:	3058      	adds	r0, #88	@ 0x58
 8002b86:	f001 f9d7 	bl	8003f38 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b8a:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8002b8e:	b163      	cbz	r3, 8002baa <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d011      	beq.n	8002bb8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d00e      	beq.n	8002bb6 <prvDeleteTCB+0x36>
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	e7fe      	b.n	8002ba8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8002baa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002bac:	f000 ff64 	bl	8003a78 <vPortFree>
				vPortFree( pxTCB );
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f000 ff61 	bl	8003a78 <vPortFree>
	}
 8002bb6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f000 ff5d 	bl	8003a78 <vPortFree>
 8002bbe:	e7fa      	b.n	8002bb6 <prvDeleteTCB+0x36>

08002bc0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <prvCheckTasksWaitingTermination+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b1d3      	cbz	r3, 8002bfc <prvCheckTasksWaitingTermination+0x3c>
{
 8002bc6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8002bc8:	f000 fd1c 	bl	8003604 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <prvCheckTasksWaitingTermination+0x44>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd2:	1d20      	adds	r0, r4, #4
 8002bd4:	f7ff f9d0 	bl	8001f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <prvCheckTasksWaitingTermination+0x48>)
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002be0:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <prvCheckTasksWaitingTermination+0x40>)
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8002be8:	f000 fd2e 	bl	8003648 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff ffc7 	bl	8002b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bf2:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <prvCheckTasksWaitingTermination+0x40>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e6      	bne.n	8002bc8 <prvCheckTasksWaitingTermination+0x8>
}
 8002bfa:	bd10      	pop	{r4, pc}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000330 	.word	0x20000330
 8002c04:	20000334 	.word	0x20000334
 8002c08:	20000318 	.word	0x20000318

08002c0c <prvIdleTask>:
{
 8002c0c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002c0e:	f7ff ffd7 	bl	8002bc0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <prvIdleTask+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d9f9      	bls.n	8002c0e <prvIdleTask+0x2>
				taskYIELD();
 8002c1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	e7ee      	b.n	8002c0e <prvIdleTask+0x2>
 8002c30:	2000038c 	.word	0x2000038c

08002c34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	4604      	mov	r4, r0
 8002c38:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002c3c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	3004      	adds	r0, #4
 8002c44:	f7ff f998 	bl	8001f78 <uxListRemove>
 8002c48:	b948      	cbnz	r0, 8002c5e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	4918      	ldr	r1, [pc, #96]	@ (8002cb8 <prvAddCurrentTaskToDelayedList+0x84>)
 8002c56:	680b      	ldr	r3, [r1, #0]
 8002c58:	ea23 0302 	bic.w	r3, r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c5e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8002c62:	d00d      	beq.n	8002c80 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c64:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c66:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d910      	bls.n	8002c92 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <prvAddCurrentTaskToDelayedList+0x88>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	3104      	adds	r1, #4
 8002c7a:	f7ff f964 	bl	8001f46 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	d0ef      	beq.n	8002c64 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	3104      	adds	r1, #4
 8002c8a:	480d      	ldr	r0, [pc, #52]	@ (8002cc0 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002c8c:	f7ff f950 	bl	8001f30 <vListInsertEnd>
 8002c90:	e7f5      	b.n	8002c7e <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c92:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	3104      	adds	r1, #4
 8002c9c:	f7ff f953 	bl	8001f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	d9ea      	bls.n	8002c7e <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002caa:	601c      	str	r4, [r3, #0]
}
 8002cac:	e7e7      	b.n	8002c7e <prvAddCurrentTaskToDelayedList+0x4a>
 8002cae:	bf00      	nop
 8002cb0:	20000314 	.word	0x20000314
 8002cb4:	20000418 	.word	0x20000418
 8002cb8:	20000310 	.word	0x20000310
 8002cbc:	2000035c 	.word	0x2000035c
 8002cc0:	2000031c 	.word	0x2000031c
 8002cc4:	20000360 	.word	0x20000360
 8002cc8:	200002f8 	.word	0x200002f8

08002ccc <xTaskCreateStatic>:
	{
 8002ccc:	b530      	push	{r4, r5, lr}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002cd2:	b17c      	cbz	r4, 8002cf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cd4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8002cd6:	b1b5      	cbz	r5, 8002d06 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cd8:	25ac      	movs	r5, #172	@ 0xac
 8002cda:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cdc:	9d04      	ldr	r5, [sp, #16]
 8002cde:	2dac      	cmp	r5, #172	@ 0xac
 8002ce0:	d01a      	beq.n	8002d18 <xTaskCreateStatic+0x4c>
 8002ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	e7fe      	b.n	8002cf2 <xTaskCreateStatic+0x26>
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002d04:	e7fe      	b.n	8002d04 <xTaskCreateStatic+0x38>
 8002d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002d16:	e7fe      	b.n	8002d16 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d18:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d1a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8002d1c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d1e:	2402      	movs	r4, #2
 8002d20:	f885 40a9 	strb.w	r4, [r5, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d24:	2400      	movs	r4, #0
 8002d26:	9403      	str	r4, [sp, #12]
 8002d28:	9502      	str	r5, [sp, #8]
 8002d2a:	ac05      	add	r4, sp, #20
 8002d2c:	9401      	str	r4, [sp, #4]
 8002d2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002d30:	9400      	str	r4, [sp, #0]
 8002d32:	f7ff fe37 	bl	80029a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d36:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002d38:	f7ff fecc 	bl	8002ad4 <prvAddNewTaskToReadyList>
	}
 8002d3c:	9805      	ldr	r0, [sp, #20]
 8002d3e:	b007      	add	sp, #28
 8002d40:	bd30      	pop	{r4, r5, pc}

08002d42 <xTaskCreate>:
	{
 8002d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d46:	b085      	sub	sp, #20
 8002d48:	4607      	mov	r7, r0
 8002d4a:	4688      	mov	r8, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d50:	0090      	lsls	r0, r2, #2
 8002d52:	f000 fe0f 	bl	8003974 <pvPortMalloc>
			if( pxStack != NULL )
 8002d56:	b308      	cbz	r0, 8002d9c <xTaskCreate+0x5a>
 8002d58:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d5a:	20ac      	movs	r0, #172	@ 0xac
 8002d5c:	f000 fe0a 	bl	8003974 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002d60:	4605      	mov	r5, r0
 8002d62:	b1a8      	cbz	r0, 8002d90 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8002d64:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d6e:	9303      	str	r3, [sp, #12]
 8002d70:	9002      	str	r0, [sp, #8]
 8002d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4633      	mov	r3, r6
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	4641      	mov	r1, r8
 8002d80:	4638      	mov	r0, r7
 8002d82:	f7ff fe0f 	bl	80029a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d86:	4628      	mov	r0, r5
 8002d88:	f7ff fea4 	bl	8002ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	e007      	b.n	8002da0 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8002d90:	4648      	mov	r0, r9
 8002d92:	f000 fe71 	bl	8003a78 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d9a:	e001      	b.n	8002da0 <xTaskCreate+0x5e>
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8002da0:	b005      	add	sp, #20
 8002da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002da8 <vTaskStartScheduler>:
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dac:	2400      	movs	r4, #0
 8002dae:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002db0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002db2:	aa07      	add	r2, sp, #28
 8002db4:	a906      	add	r1, sp, #24
 8002db6:	a805      	add	r0, sp, #20
 8002db8:	f7fd fbd6 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dbc:	9b05      	ldr	r3, [sp, #20]
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	9b06      	ldr	r3, [sp, #24]
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	9400      	str	r4, [sp, #0]
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	9a07      	ldr	r2, [sp, #28]
 8002dca:	4911      	ldr	r1, [pc, #68]	@ (8002e10 <vTaskStartScheduler+0x68>)
 8002dcc:	4811      	ldr	r0, [pc, #68]	@ (8002e14 <vTaskStartScheduler+0x6c>)
 8002dce:	f7ff ff7d 	bl	8002ccc <xTaskCreateStatic>
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <vTaskStartScheduler+0x70>)
 8002dd4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8002dd6:	b1c8      	cbz	r0, 8002e0c <vTaskStartScheduler+0x64>
 8002dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002de8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <vTaskStartScheduler+0x74>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3358      	adds	r3, #88	@ 0x58
 8002dee:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <vTaskStartScheduler+0x78>)
 8002df0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <vTaskStartScheduler+0x7c>)
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <vTaskStartScheduler+0x80>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <vTaskStartScheduler+0x84>)
 8002e02:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002e04:	f7fd fbac 	bl	8000560 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8002e08:	f000 fc96 	bl	8003738 <xPortStartScheduler>
}
 8002e0c:	b008      	add	sp, #32
 8002e0e:	bd10      	pop	{r4, pc}
 8002e10:	08004bb0 	.word	0x08004bb0
 8002e14:	08002c0d 	.word	0x08002c0d
 8002e18:	200002f4 	.word	0x200002f4
 8002e1c:	20000418 	.word	0x20000418
 8002e20:	2000001c 	.word	0x2000001c
 8002e24:	200002f8 	.word	0x200002f8
 8002e28:	2000030c 	.word	0x2000030c
 8002e2c:	20000314 	.word	0x20000314

08002e30 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002e30:	4a02      	ldr	r2, [pc, #8]	@ (8002e3c <vTaskSuspendAll+0xc>)
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	200002f0 	.word	0x200002f0

08002e40 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002e40:	4b01      	ldr	r3, [pc, #4]	@ (8002e48 <xTaskGetTickCount+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000314 	.word	0x20000314

08002e4c <xTaskGetTickCountFromISR>:
{
 8002e4c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e4e:	f000 fcff 	bl	8003850 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8002e52:	4b01      	ldr	r3, [pc, #4]	@ (8002e58 <xTaskGetTickCountFromISR+0xc>)
 8002e54:	6818      	ldr	r0, [r3, #0]
}
 8002e56:	bd08      	pop	{r3, pc}
 8002e58:	20000314 	.word	0x20000314

08002e5c <xTaskIncrementTick>:
{
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f48 <xTaskIncrementTick+0xec>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d169      	bne.n	8002f3a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e66:	4b39      	ldr	r3, [pc, #228]	@ (8002f4c <xTaskIncrementTick+0xf0>)
 8002e68:	681d      	ldr	r5, [r3, #0]
 8002e6a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002e6c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e6e:	b9c5      	cbnz	r5, 8002ea2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002e70:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <xTaskIncrementTick+0xf4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b143      	cbz	r3, 8002e8a <xTaskIncrementTick+0x2e>
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	e7fe      	b.n	8002e88 <xTaskIncrementTick+0x2c>
 8002e8a:	4a31      	ldr	r2, [pc, #196]	@ (8002f50 <xTaskIncrementTick+0xf4>)
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <xTaskIncrementTick+0xf8>)
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	6010      	str	r0, [r2, #0]
 8002e94:	6019      	str	r1, [r3, #0]
 8002e96:	4a30      	ldr	r2, [pc, #192]	@ (8002f58 <xTaskIncrementTick+0xfc>)
 8002e98:	6813      	ldr	r3, [r2, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	f7ff fd6b 	bl	8002978 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8002f5c <xTaskIncrementTick+0x100>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	42ab      	cmp	r3, r5
 8002ea8:	d93d      	bls.n	8002f26 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8002eaa:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eac:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <xTaskIncrementTick+0x104>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <xTaskIncrementTick+0x108>)
 8002eba:	589b      	ldr	r3, [r3, r2]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d900      	bls.n	8002ec2 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8002ec0:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8002ec2:	4b29      	ldr	r3, [pc, #164]	@ (8002f68 <xTaskIncrementTick+0x10c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03c      	beq.n	8002f44 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8002eca:	2701      	movs	r7, #1
	return xSwitchRequired;
 8002ecc:	e03a      	b.n	8002f44 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8002ece:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <xTaskIncrementTick+0xf4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b343      	cbz	r3, 8002f2a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <xTaskIncrementTick+0xf4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ee0:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8002ee2:	429d      	cmp	r5, r3
 8002ee4:	d326      	bcc.n	8002f34 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee6:	1d26      	adds	r6, r4, #4
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f7ff f845 	bl	8001f78 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002eee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ef0:	b11b      	cbz	r3, 8002efa <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ef2:	f104 0018 	add.w	r0, r4, #24
 8002ef6:	f7ff f83f 	bl	8001f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002efa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002efc:	2201      	movs	r2, #1
 8002efe:	409a      	lsls	r2, r3
 8002f00:	491a      	ldr	r1, [pc, #104]	@ (8002f6c <xTaskIncrementTick+0x110>)
 8002f02:	6808      	ldr	r0, [r1, #0]
 8002f04:	4302      	orrs	r2, r0
 8002f06:	600a      	str	r2, [r1, #0]
 8002f08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f0c:	009a      	lsls	r2, r3, #2
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4814      	ldr	r0, [pc, #80]	@ (8002f64 <xTaskIncrementTick+0x108>)
 8002f12:	4410      	add	r0, r2
 8002f14:	f7ff f80c 	bl	8001f30 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f18:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <xTaskIncrementTick+0x104>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d2d4      	bcs.n	8002ece <xTaskIncrementTick+0x72>
 8002f24:	e7d4      	b.n	8002ed0 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8002f26:	2700      	movs	r7, #0
 8002f28:	e7d2      	b.n	8002ed0 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <xTaskIncrementTick+0x100>)
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f30:	601a      	str	r2, [r3, #0]
					break;
 8002f32:	e7bb      	b.n	8002eac <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8002f34:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <xTaskIncrementTick+0x100>)
 8002f36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f38:	e7b8      	b.n	8002eac <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8002f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <xTaskIncrementTick+0x114>)
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002f42:	2700      	movs	r7, #0
}
 8002f44:	4638      	mov	r0, r7
 8002f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f48:	200002f0 	.word	0x200002f0
 8002f4c:	20000314 	.word	0x20000314
 8002f50:	20000360 	.word	0x20000360
 8002f54:	2000035c 	.word	0x2000035c
 8002f58:	20000300 	.word	0x20000300
 8002f5c:	200002f8 	.word	0x200002f8
 8002f60:	20000418 	.word	0x20000418
 8002f64:	2000038c 	.word	0x2000038c
 8002f68:	20000304 	.word	0x20000304
 8002f6c:	20000310 	.word	0x20000310
 8002f70:	20000308 	.word	0x20000308

08002f74 <xTaskResumeAll>:
{
 8002f74:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8002f76:	4b35      	ldr	r3, [pc, #212]	@ (800304c <xTaskResumeAll+0xd8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b943      	cbnz	r3, 8002f8e <xTaskResumeAll+0x1a>
 8002f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	e7fe      	b.n	8002f8c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8002f8e:	f000 fb39 	bl	8003604 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002f92:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <xTaskResumeAll+0xd8>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	3a01      	subs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d14f      	bne.n	8003040 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <xTaskResumeAll+0xdc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b90b      	cbnz	r3, 8002faa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002fa6:	2400      	movs	r4, #0
 8002fa8:	e04b      	b.n	8003042 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8002faa:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <xTaskResumeAll+0xe0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b31b      	cbz	r3, 8002ffa <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb2:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <xTaskResumeAll+0xe0>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fb8:	f104 0018 	add.w	r0, r4, #24
 8002fbc:	f7fe ffdc 	bl	8001f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc0:	1d25      	adds	r5, r4, #4
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f7fe ffd8 	bl	8001f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fc8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4083      	lsls	r3, r0
 8002fce:	4a22      	ldr	r2, [pc, #136]	@ (8003058 <xTaskResumeAll+0xe4>)
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002fda:	4629      	mov	r1, r5
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <xTaskResumeAll+0xe8>)
 8002fde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002fe2:	f7fe ffa5 	bl	8001f30 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <xTaskResumeAll+0xec>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3dc      	bcc.n	8002fac <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <xTaskResumeAll+0xf0>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e7d8      	b.n	8002fac <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8002ffa:	b10c      	cbz	r4, 8003000 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8002ffc:	f7ff fcbc 	bl	8002978 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <xTaskResumeAll+0xf4>)
 8003002:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8003004:	b984      	cbnz	r4, 8003028 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8003006:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <xTaskResumeAll+0xf0>)
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	b1d4      	cbz	r4, 8003042 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800300c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003014:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003020:	2401      	movs	r4, #1
 8003022:	e00e      	b.n	8003042 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003024:	3c01      	subs	r4, #1
 8003026:	d007      	beq.n	8003038 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8003028:	f7ff ff18 	bl	8002e5c <xTaskIncrementTick>
 800302c:	2800      	cmp	r0, #0
 800302e:	d0f9      	beq.n	8003024 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8003030:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <xTaskResumeAll+0xf0>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e7f5      	b.n	8003024 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <xTaskResumeAll+0xf4>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e7e2      	b.n	8003006 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8003040:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003042:	f000 fb01 	bl	8003648 <vPortExitCritical>
}
 8003046:	4620      	mov	r0, r4
 8003048:	bd38      	pop	{r3, r4, r5, pc}
 800304a:	bf00      	nop
 800304c:	200002f0 	.word	0x200002f0
 8003050:	20000318 	.word	0x20000318
 8003054:	20000348 	.word	0x20000348
 8003058:	20000310 	.word	0x20000310
 800305c:	2000038c 	.word	0x2000038c
 8003060:	20000418 	.word	0x20000418
 8003064:	20000304 	.word	0x20000304
 8003068:	20000308 	.word	0x20000308

0800306c <vTaskDelay>:
	{
 800306c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800306e:	b1a8      	cbz	r0, 800309c <vTaskDelay+0x30>
 8003070:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <vTaskDelay+0x48>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	b143      	cbz	r3, 800308a <vTaskDelay+0x1e>
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	e7fe      	b.n	8003088 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800308a:	f7ff fed1 	bl	8002e30 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800308e:	2100      	movs	r1, #0
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff fdcf 	bl	8002c34 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003096:	f7ff ff6d 	bl	8002f74 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800309a:	b948      	cbnz	r0, 80030b0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800309c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
	}
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	bf00      	nop
 80030b4:	200002f0 	.word	0x200002f0

080030b8 <vTaskSwitchContext>:
{
 80030b8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <vTaskSwitchContext+0xac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b11b      	cbz	r3, 80030c8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80030c0:	4b29      	ldr	r3, [pc, #164]	@ (8003168 <vTaskSwitchContext+0xb0>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 80030c8:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <vTaskSwitchContext+0xb0>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80030ce:	f7fd fa48 	bl	8000562 <getRunTimeCounterValue>
 80030d2:	4b26      	ldr	r3, [pc, #152]	@ (800316c <vTaskSwitchContext+0xb4>)
 80030d4:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80030d6:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <vTaskSwitchContext+0xb8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4298      	cmp	r0, r3
 80030dc:	d905      	bls.n	80030ea <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80030de:	4a25      	ldr	r2, [pc, #148]	@ (8003174 <vTaskSwitchContext+0xbc>)
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80030e4:	1ac3      	subs	r3, r0, r3
 80030e6:	441a      	add	r2, r3
 80030e8:	654a      	str	r2, [r1, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80030ea:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <vTaskSwitchContext+0xb8>)
 80030ec:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ee:	4b22      	ldr	r3, [pc, #136]	@ (8003178 <vTaskSwitchContext+0xc0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f1c3 031f 	rsb	r3, r3, #31
 80030fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003100:	0092      	lsls	r2, r2, #2
 8003102:	491e      	ldr	r1, [pc, #120]	@ (800317c <vTaskSwitchContext+0xc4>)
 8003104:	588a      	ldr	r2, [r1, r2]
 8003106:	b942      	cbnz	r2, 800311a <vTaskSwitchContext+0x62>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	e7fe      	b.n	8003118 <vTaskSwitchContext+0x60>
 800311a:	4818      	ldr	r0, [pc, #96]	@ (800317c <vTaskSwitchContext+0xc4>)
 800311c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003120:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003124:	6851      	ldr	r1, [r2, #4]
 8003126:	6849      	ldr	r1, [r1, #4]
 8003128:	6051      	str	r1, [r2, #4]
 800312a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	3208      	adds	r2, #8
 8003132:	4402      	add	r2, r0
 8003134:	4291      	cmp	r1, r2
 8003136:	d00d      	beq.n	8003154 <vTaskSwitchContext+0x9c>
 8003138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800313c:	4a0f      	ldr	r2, [pc, #60]	@ (800317c <vTaskSwitchContext+0xc4>)
 800313e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <vTaskSwitchContext+0xbc>)
 8003148:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3358      	adds	r3, #88	@ 0x58
 800314e:	4a0c      	ldr	r2, [pc, #48]	@ (8003180 <vTaskSwitchContext+0xc8>)
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	e7b8      	b.n	80030c6 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003154:	6848      	ldr	r0, [r1, #4]
 8003156:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <vTaskSwitchContext+0xc4>)
 800315c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003160:	6050      	str	r0, [r2, #4]
 8003162:	e7e9      	b.n	8003138 <vTaskSwitchContext+0x80>
 8003164:	200002f0 	.word	0x200002f0
 8003168:	20000304 	.word	0x20000304
 800316c:	200002e8 	.word	0x200002e8
 8003170:	200002ec 	.word	0x200002ec
 8003174:	20000418 	.word	0x20000418
 8003178:	20000310 	.word	0x20000310
 800317c:	2000038c 	.word	0x2000038c
 8003180:	2000001c 	.word	0x2000001c

08003184 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003184:	b158      	cbz	r0, 800319e <vTaskPlaceOnEventList+0x1a>
{
 8003186:	b510      	push	{r4, lr}
 8003188:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800318a:	4a09      	ldr	r2, [pc, #36]	@ (80031b0 <vTaskPlaceOnEventList+0x2c>)
 800318c:	6811      	ldr	r1, [r2, #0]
 800318e:	3118      	adds	r1, #24
 8003190:	f7fe fed9 	bl	8001f46 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003194:	2101      	movs	r1, #1
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff fd4c 	bl	8002c34 <prvAddCurrentTaskToDelayedList>
}
 800319c:	bd10      	pop	{r4, pc}
 800319e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80031ae:	e7fe      	b.n	80031ae <vTaskPlaceOnEventList+0x2a>
 80031b0:	20000418 	.word	0x20000418

080031b4 <xTaskRemoveFromEventList>:
{
 80031b4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b6:	68c3      	ldr	r3, [r0, #12]
 80031b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80031ba:	b324      	cbz	r4, 8003206 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031bc:	f104 0518 	add.w	r5, r4, #24
 80031c0:	4628      	mov	r0, r5
 80031c2:	f7fe fed9 	bl	8001f78 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031c6:	4b18      	ldr	r3, [pc, #96]	@ (8003228 <xTaskRemoveFromEventList+0x74>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	bb2b      	cbnz	r3, 8003218 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031cc:	1d25      	adds	r5, r4, #4
 80031ce:	4628      	mov	r0, r5
 80031d0:	f7fe fed2 	bl	8001f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80031d6:	2301      	movs	r3, #1
 80031d8:	4083      	lsls	r3, r0
 80031da:	4a14      	ldr	r2, [pc, #80]	@ (800322c <xTaskRemoveFromEventList+0x78>)
 80031dc:	6811      	ldr	r1, [r2, #0]
 80031de:	430b      	orrs	r3, r1
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031e6:	4629      	mov	r1, r5
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <xTaskRemoveFromEventList+0x7c>)
 80031ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80031ee:	f7fe fe9f 	bl	8001f30 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80031f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <xTaskRemoveFromEventList+0x80>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d911      	bls.n	8003222 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80031fe:	2001      	movs	r0, #1
 8003200:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <xTaskRemoveFromEventList+0x84>)
 8003202:	6018      	str	r0, [r3, #0]
}
 8003204:	bd38      	pop	{r3, r4, r5, pc}
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003216:	e7fe      	b.n	8003216 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003218:	4629      	mov	r1, r5
 800321a:	4808      	ldr	r0, [pc, #32]	@ (800323c <xTaskRemoveFromEventList+0x88>)
 800321c:	f7fe fe88 	bl	8001f30 <vListInsertEnd>
 8003220:	e7e7      	b.n	80031f2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003222:	2000      	movs	r0, #0
	return xReturn;
 8003224:	e7ee      	b.n	8003204 <xTaskRemoveFromEventList+0x50>
 8003226:	bf00      	nop
 8003228:	200002f0 	.word	0x200002f0
 800322c:	20000310 	.word	0x20000310
 8003230:	2000038c 	.word	0x2000038c
 8003234:	20000418 	.word	0x20000418
 8003238:	20000304 	.word	0x20000304
 800323c:	20000348 	.word	0x20000348

08003240 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <vTaskInternalSetTimeOutState+0x10>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003246:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <vTaskInternalSetTimeOutState+0x14>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6043      	str	r3, [r0, #4]
}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000300 	.word	0x20000300
 8003254:	20000314 	.word	0x20000314

08003258 <xTaskCheckForTimeOut>:
{
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800325a:	b1c8      	cbz	r0, 8003290 <xTaskCheckForTimeOut+0x38>
 800325c:	460c      	mov	r4, r1
 800325e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8003260:	b1f9      	cbz	r1, 80032a2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8003262:	f000 f9cf 	bl	8003604 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003266:	4b1b      	ldr	r3, [pc, #108]	@ (80032d4 <xTaskCheckForTimeOut+0x7c>)
 8003268:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800326a:	686b      	ldr	r3, [r5, #4]
 800326c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003274:	d026      	beq.n	80032c4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003276:	4e18      	ldr	r6, [pc, #96]	@ (80032d8 <xTaskCheckForTimeOut+0x80>)
 8003278:	6836      	ldr	r6, [r6, #0]
 800327a:	682f      	ldr	r7, [r5, #0]
 800327c:	42b7      	cmp	r7, r6
 800327e:	d001      	beq.n	8003284 <xTaskCheckForTimeOut+0x2c>
 8003280:	428b      	cmp	r3, r1
 8003282:	d924      	bls.n	80032ce <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003284:	4282      	cmp	r2, r0
 8003286:	d815      	bhi.n	80032b4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800328c:	2401      	movs	r4, #1
 800328e:	e01a      	b.n	80032c6 <xTaskCheckForTimeOut+0x6e>
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80032a0:	e7fe      	b.n	80032a0 <xTaskCheckForTimeOut+0x48>
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80032b2:	e7fe      	b.n	80032b2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80032b4:	1a5b      	subs	r3, r3, r1
 80032b6:	4413      	add	r3, r2
 80032b8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032ba:	4628      	mov	r0, r5
 80032bc:	f7ff ffc0 	bl	8003240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032c0:	2400      	movs	r4, #0
 80032c2:	e000      	b.n	80032c6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80032c4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80032c6:	f000 f9bf 	bl	8003648 <vPortExitCritical>
}
 80032ca:	4620      	mov	r0, r4
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80032ce:	2401      	movs	r4, #1
 80032d0:	e7f9      	b.n	80032c6 <xTaskCheckForTimeOut+0x6e>
 80032d2:	bf00      	nop
 80032d4:	20000314 	.word	0x20000314
 80032d8:	20000300 	.word	0x20000300

080032dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80032dc:	4b01      	ldr	r3, [pc, #4]	@ (80032e4 <vTaskMissedYield+0x8>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
}
 80032e2:	4770      	bx	lr
 80032e4:	20000304 	.word	0x20000304

080032e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <xTaskGetSchedulerState+0x18>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b133      	cbz	r3, 80032fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <xTaskGetSchedulerState+0x1c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b10b      	cbz	r3, 80032f8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80032f4:	2000      	movs	r0, #0
	}
 80032f6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80032f8:	2002      	movs	r0, #2
 80032fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032fc:	2001      	movs	r0, #1
 80032fe:	4770      	bx	lr
 8003300:	2000030c 	.word	0x2000030c
 8003304:	200002f0 	.word	0x200002f0

08003308 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003308:	2800      	cmp	r0, #0
 800330a:	d048      	beq.n	800339e <xTaskPriorityInherit+0x96>
	{
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003310:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003312:	4a25      	ldr	r2, [pc, #148]	@ (80033a8 <xTaskPriorityInherit+0xa0>)
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003318:	4293      	cmp	r3, r2
 800331a:	d238      	bcs.n	800338e <xTaskPriorityInherit+0x86>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800331c:	6982      	ldr	r2, [r0, #24]
 800331e:	2a00      	cmp	r2, #0
 8003320:	db05      	blt.n	800332e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003322:	4a21      	ldr	r2, [pc, #132]	@ (80033a8 <xTaskPriorityInherit+0xa0>)
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003328:	f1c2 0207 	rsb	r2, r2, #7
 800332c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800332e:	6961      	ldr	r1, [r4, #20]
 8003330:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003334:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <xTaskPriorityInherit+0xa4>)
 8003336:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800333a:	4299      	cmp	r1, r3
 800333c:	d005      	beq.n	800334a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800333e:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <xTaskPriorityInherit+0xa0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8003346:	2001      	movs	r0, #1
	}
 8003348:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800334a:	1d25      	adds	r5, r4, #4
 800334c:	4628      	mov	r0, r5
 800334e:	f7fe fe13 	bl	8001f78 <uxListRemove>
 8003352:	b938      	cbnz	r0, 8003364 <xTaskPriorityInherit+0x5c>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003354:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003356:	2201      	movs	r2, #1
 8003358:	409a      	lsls	r2, r3
 800335a:	4915      	ldr	r1, [pc, #84]	@ (80033b0 <xTaskPriorityInherit+0xa8>)
 800335c:	680b      	ldr	r3, [r1, #0]
 800335e:	ea23 0302 	bic.w	r3, r3, r2
 8003362:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003364:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <xTaskPriorityInherit+0xa0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800336a:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800336c:	2401      	movs	r4, #1
 800336e:	fa04 f300 	lsl.w	r3, r4, r0
 8003372:	4a0f      	ldr	r2, [pc, #60]	@ (80033b0 <xTaskPriorityInherit+0xa8>)
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	430b      	orrs	r3, r1
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800337e:	4629      	mov	r1, r5
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <xTaskPriorityInherit+0xa4>)
 8003382:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003386:	f7fe fdd3 	bl	8001f30 <vListInsertEnd>
				xReturn = pdTRUE;
 800338a:	4620      	mov	r0, r4
 800338c:	e7dc      	b.n	8003348 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800338e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <xTaskPriorityInherit+0xa0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	429a      	cmp	r2, r3
 8003398:	d303      	bcc.n	80033a2 <xTaskPriorityInherit+0x9a>
	BaseType_t xReturn = pdFALSE;
 800339a:	2000      	movs	r0, #0
 800339c:	e7d4      	b.n	8003348 <xTaskPriorityInherit+0x40>
 800339e:	2000      	movs	r0, #0
	}
 80033a0:	4770      	bx	lr
					xReturn = pdTRUE;
 80033a2:	2001      	movs	r0, #1
		return xReturn;
 80033a4:	e7d0      	b.n	8003348 <xTaskPriorityInherit+0x40>
 80033a6:	bf00      	nop
 80033a8:	20000418 	.word	0x20000418
 80033ac:	2000038c 	.word	0x2000038c
 80033b0:	20000310 	.word	0x20000310

080033b4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d04b      	beq.n	8003450 <xTaskPriorityDisinherit+0x9c>
	{
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80033bc:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <xTaskPriorityDisinherit+0xa4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4283      	cmp	r3, r0
 80033c2:	d008      	beq.n	80033d6 <xTaskPriorityDisinherit+0x22>
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	e7fe      	b.n	80033d4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80033d6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80033d8:	b943      	cbnz	r3, 80033ec <xTaskPriorityDisinherit+0x38>
 80033da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	e7fe      	b.n	80033ea <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80033ec:	3b01      	subs	r3, #1
 80033ee:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033f0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80033f2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80033f4:	4291      	cmp	r1, r2
 80033f6:	d02d      	beq.n	8003454 <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033f8:	b10b      	cbz	r3, 80033fe <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80033fa:	2000      	movs	r0, #0
	}
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033fe:	1d05      	adds	r5, r0, #4
 8003400:	4628      	mov	r0, r5
 8003402:	f7fe fdb9 	bl	8001f78 <uxListRemove>
 8003406:	b968      	cbnz	r0, 8003424 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003408:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800340a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4912      	ldr	r1, [pc, #72]	@ (800345c <xTaskPriorityDisinherit+0xa8>)
 8003412:	588a      	ldr	r2, [r1, r2]
 8003414:	b932      	cbnz	r2, 8003424 <xTaskPriorityDisinherit+0x70>
 8003416:	2201      	movs	r2, #1
 8003418:	409a      	lsls	r2, r3
 800341a:	4911      	ldr	r1, [pc, #68]	@ (8003460 <xTaskPriorityDisinherit+0xac>)
 800341c:	680b      	ldr	r3, [r1, #0]
 800341e:	ea23 0302 	bic.w	r3, r3, r2
 8003422:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003424:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003426:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003428:	f1c0 0307 	rsb	r3, r0, #7
 800342c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800342e:	2401      	movs	r4, #1
 8003430:	fa04 f300 	lsl.w	r3, r4, r0
 8003434:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <xTaskPriorityDisinherit+0xac>)
 8003436:	6811      	ldr	r1, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003440:	4629      	mov	r1, r5
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <xTaskPriorityDisinherit+0xa8>)
 8003444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003448:	f7fe fd72 	bl	8001f30 <vListInsertEnd>
					xReturn = pdTRUE;
 800344c:	4620      	mov	r0, r4
 800344e:	e7d5      	b.n	80033fc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003450:	2000      	movs	r0, #0
	}
 8003452:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8003454:	2000      	movs	r0, #0
 8003456:	e7d1      	b.n	80033fc <xTaskPriorityDisinherit+0x48>
 8003458:	20000418 	.word	0x20000418
 800345c:	2000038c 	.word	0x2000038c
 8003460:	20000310 	.word	0x20000310

08003464 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003464:	2800      	cmp	r0, #0
 8003466:	d04f      	beq.n	8003508 <vTaskPriorityDisinheritAfterTimeout+0xa4>
	{
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800346c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800346e:	b943      	cbnz	r3, 8003482 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	e7fe      	b.n	8003480 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003482:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003484:	428a      	cmp	r2, r1
 8003486:	d200      	bcs.n	800348a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003488:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800348a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800348c:	4291      	cmp	r1, r2
 800348e:	d001      	beq.n	8003494 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003490:	2b01      	cmp	r3, #1
 8003492:	d000      	beq.n	8003496 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8003494:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8003496:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	42a3      	cmp	r3, r4
 800349c:	d02b      	beq.n	80034f6 <vTaskPriorityDisinheritAfterTimeout+0x92>
					pxTCB->uxPriority = uxPriorityToUse;
 800349e:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034a0:	69a3      	ldr	r3, [r4, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	db02      	blt.n	80034ac <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a6:	f1c2 0207 	rsb	r2, r2, #7
 80034aa:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034ac:	6962      	ldr	r2, [r4, #20]
 80034ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80034b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034bc:	1d25      	adds	r5, r4, #4
 80034be:	4628      	mov	r0, r5
 80034c0:	f7fe fd5a 	bl	8001f78 <uxListRemove>
 80034c4:	b938      	cbnz	r0, 80034d6 <vTaskPriorityDisinheritAfterTimeout+0x72>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80034c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80034c8:	2201      	movs	r2, #1
 80034ca:	409a      	lsls	r2, r3
 80034cc:	4911      	ldr	r1, [pc, #68]	@ (8003514 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80034ce:	680b      	ldr	r3, [r1, #0]
 80034d0:	ea23 0302 	bic.w	r3, r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 80034d6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80034d8:	2301      	movs	r3, #1
 80034da:	4083      	lsls	r3, r0
 80034dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034e8:	4629      	mov	r1, r5
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80034ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80034f0:	f7fe fd1e 	bl	8001f30 <vListInsertEnd>
	}
 80034f4:	e7ce      	b.n	8003494 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8003506:	e7fe      	b.n	8003506 <vTaskPriorityDisinheritAfterTimeout+0xa2>
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000418 	.word	0x20000418
 8003510:	2000038c 	.word	0x2000038c
 8003514:	20000310 	.word	0x20000310

08003518 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <pvTaskIncrementMutexHeldCount+0x18>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b123      	cbz	r3, 8003528 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800351e:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <pvTaskIncrementMutexHeldCount+0x18>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003524:	3301      	adds	r3, #1
 8003526:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8003528:	4b01      	ldr	r3, [pc, #4]	@ (8003530 <pvTaskIncrementMutexHeldCount+0x18>)
 800352a:	6818      	ldr	r0, [r3, #0]
	}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000418 	.word	0x20000418

08003534 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003534:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <prvTaskExitError+0x3c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003542:	d008      	beq.n	8003556 <prvTaskExitError+0x22>
 8003544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	e7fe      	b.n	8003554 <prvTaskExitError+0x20>
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0fc      	beq.n	8003566 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800356c:	b002      	add	sp, #8
 800356e:	4770      	bx	lr
 8003570:	2000000c 	.word	0x2000000c

08003574 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003574:	4808      	ldr	r0, [pc, #32]	@ (8003598 <prvPortStartFirstTask+0x24>)
 8003576:	6800      	ldr	r0, [r0, #0]
 8003578:	6800      	ldr	r0, [r0, #0]
 800357a:	f380 8808 	msr	MSP, r0
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f380 8814 	msr	CONTROL, r0
 8003586:	b662      	cpsie	i
 8003588:	b661      	cpsie	f
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	df00      	svc	0
 8003594:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003596:	0000      	.short	0x0000
 8003598:	e000ed08 	.word	0xe000ed08

0800359c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800359c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80035ac <vPortEnableVFP+0x10>
 80035a0:	6801      	ldr	r1, [r0, #0]
 80035a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80035a6:	6001      	str	r1, [r0, #0]
 80035a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035aa:	0000      	.short	0x0000
 80035ac:	e000ed88 	.word	0xe000ed88

080035b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035b8:	f021 0101 	bic.w	r1, r1, #1
 80035bc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <pxPortInitialiseStack+0x28>)
 80035c2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035c6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035ca:	f06f 0302 	mvn.w	r3, #2
 80035ce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80035d2:	3844      	subs	r0, #68	@ 0x44
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	08003535 	.word	0x08003535
 80035dc:	00000000 	.word	0x00000000

080035e0 <SVC_Handler>:
	__asm volatile (
 80035e0:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <pxCurrentTCBConst2>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ea:	f380 8809 	msr	PSP, r0
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	4770      	bx	lr
 80035fc:	f3af 8000 	nop.w

08003600 <pxCurrentTCBConst2>:
 8003600:	20000418 	.word	0x20000418

08003604 <vPortEnterCritical>:
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003614:	4a0b      	ldr	r2, [pc, #44]	@ (8003644 <vPortEnterCritical+0x40>)
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800361c:	2b01      	cmp	r3, #1
 800361e:	d000      	beq.n	8003622 <vPortEnterCritical+0x1e>
}
 8003620:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003622:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003626:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800362a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800362e:	d0f7      	beq.n	8003620 <vPortEnterCritical+0x1c>
 8003630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	e7fe      	b.n	8003640 <vPortEnterCritical+0x3c>
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c

08003648 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003648:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <vPortExitCritical+0x28>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	b943      	cbnz	r3, 8003660 <vPortExitCritical+0x18>
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	e7fe      	b.n	800365e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003660:	3b01      	subs	r3, #1
 8003662:	4a03      	ldr	r2, [pc, #12]	@ (8003670 <vPortExitCritical+0x28>)
 8003664:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003666:	b90b      	cbnz	r3, 800366c <vPortExitCritical+0x24>
	__asm volatile
 8003668:	f383 8811 	msr	BASEPRI, r3
}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	2000000c 	.word	0x2000000c
	...

08003680 <PendSV_Handler>:
	__asm volatile
 8003680:	f3ef 8009 	mrs	r0, PSP
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <pxCurrentTCBConst>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	f01e 0f10 	tst.w	lr, #16
 8003690:	bf08      	it	eq
 8003692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369a:	6010      	str	r0, [r2, #0]
 800369c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036a4:	f380 8811 	msr	BASEPRI, r0
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f7ff fd02 	bl	80030b8 <vTaskSwitchContext>
 80036b4:	f04f 0000 	mov.w	r0, #0
 80036b8:	f380 8811 	msr	BASEPRI, r0
 80036bc:	bc09      	pop	{r0, r3}
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	6808      	ldr	r0, [r1, #0]
 80036c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c6:	f01e 0f10 	tst.w	lr, #16
 80036ca:	bf08      	it	eq
 80036cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036d0:	f380 8809 	msr	PSP, r0
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	f3af 8000 	nop.w

080036e0 <pxCurrentTCBConst>:
 80036e0:	20000418 	.word	0x20000418

080036e4 <SysTick_Handler>:
{
 80036e4:	b508      	push	{r3, lr}
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80036f6:	f7ff fbb1 	bl	8002e5c <xTaskIncrementTick>
 80036fa:	b128      	cbz	r0, 8003708 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003704:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003708:	2300      	movs	r3, #0
 800370a:	f383 8811 	msr	BASEPRI, r3
}
 800370e:	bd08      	pop	{r3, pc}

08003710 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003710:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003714:	2300      	movs	r3, #0
 8003716:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003718:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800371a:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <vPortSetupTimerInterrupt+0x20>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4905      	ldr	r1, [pc, #20]	@ (8003734 <vPortSetupTimerInterrupt+0x24>)
 8003720:	fba1 1303 	umull	r1, r3, r1, r3
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	3b01      	subs	r3, #1
 8003728:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800372a:	2307      	movs	r3, #7
 800372c:	6113      	str	r3, [r2, #16]
}
 800372e:	4770      	bx	lr
 8003730:	20000000 	.word	0x20000000
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800373c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003740:	4b3d      	ldr	r3, [pc, #244]	@ (8003838 <xPortStartScheduler+0x100>)
 8003742:	429a      	cmp	r2, r3
 8003744:	d01c      	beq.n	8003780 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003746:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800374a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800374e:	4b3b      	ldr	r3, [pc, #236]	@ (800383c <xPortStartScheduler+0x104>)
 8003750:	429a      	cmp	r2, r3
 8003752:	d01e      	beq.n	8003792 <xPortStartScheduler+0x5a>
{
 8003754:	b530      	push	{r4, r5, lr}
 8003756:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003758:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <xPortStartScheduler+0x108>)
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003760:	22ff      	movs	r2, #255	@ 0xff
 8003762:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800376c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003770:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003774:	4a33      	ldr	r2, [pc, #204]	@ (8003844 <xPortStartScheduler+0x10c>)
 8003776:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003778:	4b33      	ldr	r3, [pc, #204]	@ (8003848 <xPortStartScheduler+0x110>)
 800377a:	2207      	movs	r2, #7
 800377c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800377e:	e01b      	b.n	80037b8 <xPortStartScheduler+0x80>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003790:	e7fe      	b.n	8003790 <xPortStartScheduler+0x58>
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037a2:	e7fe      	b.n	80037a2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80037a4:	4a28      	ldr	r2, [pc, #160]	@ (8003848 <xPortStartScheduler+0x110>)
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80037bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037c0:	d1f0      	bne.n	80037a4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037c2:	4b21      	ldr	r3, [pc, #132]	@ (8003848 <xPortStartScheduler+0x110>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d008      	beq.n	80037dc <xPortStartScheduler+0xa4>
 80037ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	e7fe      	b.n	80037da <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	4a1a      	ldr	r2, [pc, #104]	@ (8003848 <xPortStartScheduler+0x110>)
 80037e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <xPortStartScheduler+0x108>)
 80037ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037f0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80037f4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80037f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037fc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003800:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003804:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003808:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800380c:	f7ff ff80 	bl	8003710 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003810:	2500      	movs	r5, #0
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <xPortStartScheduler+0x114>)
 8003814:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8003816:	f7ff fec1 	bl	800359c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800381a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800381e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003822:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8003826:	f7ff fea5 	bl	8003574 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800382a:	f7ff fc45 	bl	80030b8 <vTaskSwitchContext>
	prvTaskExitError();
 800382e:	f7ff fe81 	bl	8003534 <prvTaskExitError>
}
 8003832:	4628      	mov	r0, r5
 8003834:	b003      	add	sp, #12
 8003836:	bd30      	pop	{r4, r5, pc}
 8003838:	410fc271 	.word	0x410fc271
 800383c:	410fc270 	.word	0x410fc270
 8003840:	e000e400 	.word	0xe000e400
 8003844:	20000420 	.word	0x20000420
 8003848:	2000041c 	.word	0x2000041c
 800384c:	2000000c 	.word	0x2000000c

08003850 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003850:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d90f      	bls.n	8003878 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003858:	4a11      	ldr	r2, [pc, #68]	@ (80038a0 <vPortValidateInterruptPriority+0x50>)
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800385e:	4a11      	ldr	r2, [pc, #68]	@ (80038a4 <vPortValidateInterruptPriority+0x54>)
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d908      	bls.n	8003878 <vPortValidateInterruptPriority+0x28>
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	e7fe      	b.n	8003876 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003878:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800387c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8003880:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003884:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <vPortValidateInterruptPriority+0x58>)
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	4293      	cmp	r3, r2
 800388a:	d908      	bls.n	800389e <vPortValidateInterruptPriority+0x4e>
 800388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	e7fe      	b.n	800389c <vPortValidateInterruptPriority+0x4c>
	}
 800389e:	4770      	bx	lr
 80038a0:	e000e3f0 	.word	0xe000e3f0
 80038a4:	20000420 	.word	0x20000420
 80038a8:	2000041c 	.word	0x2000041c

080038ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038ac:	4a12      	ldr	r2, [pc, #72]	@ (80038f8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038ae:	f012 0f07 	tst.w	r2, #7
 80038b2:	d01e      	beq.n	80038f2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038ba:	f5c1 5380 	rsb	r3, r1, #4096	@ 0x1000
 80038be:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038c0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038c2:	480e      	ldr	r0, [pc, #56]	@ (80038fc <prvHeapInit+0x50>)
 80038c4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038c6:	2100      	movs	r1, #0
 80038c8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038ca:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80038cc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038ce:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80038d2:	480b      	ldr	r0, [pc, #44]	@ (8003900 <prvHeapInit+0x54>)
 80038d4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80038d6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038d8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038da:	1a99      	subs	r1, r3, r2
 80038dc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038de:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038e0:	4b08      	ldr	r3, [pc, #32]	@ (8003904 <prvHeapInit+0x58>)
 80038e2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038e4:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <prvHeapInit+0x5c>)
 80038e6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <prvHeapInit+0x60>)
 80038ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038f6:	e7e4      	b.n	80038c2 <prvHeapInit+0x16>
 80038f8:	20000444 	.word	0x20000444
 80038fc:	2000043c 	.word	0x2000043c
 8003900:	20000438 	.word	0x20000438
 8003904:	20000430 	.word	0x20000430
 8003908:	20000434 	.word	0x20000434
 800390c:	20000424 	.word	0x20000424

08003910 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003910:	4b16      	ldr	r3, [pc, #88]	@ (800396c <prvInsertBlockIntoFreeList+0x5c>)
 8003912:	461a      	mov	r2, r3
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4283      	cmp	r3, r0
 8003918:	d3fb      	bcc.n	8003912 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800391a:	6851      	ldr	r1, [r2, #4]
 800391c:	eb02 0c01 	add.w	ip, r2, r1
 8003920:	4584      	cmp	ip, r0
 8003922:	d009      	beq.n	8003938 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003924:	6841      	ldr	r1, [r0, #4]
 8003926:	eb00 0c01 	add.w	ip, r0, r1
 800392a:	4563      	cmp	r3, ip
 800392c:	d009      	beq.n	8003942 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800392e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003930:	4290      	cmp	r0, r2
 8003932:	d019      	beq.n	8003968 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003934:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8003936:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003938:	6840      	ldr	r0, [r0, #4]
 800393a:	4401      	add	r1, r0
 800393c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800393e:	4610      	mov	r0, r2
 8003940:	e7f0      	b.n	8003924 <prvInsertBlockIntoFreeList+0x14>
{
 8003942:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003944:	4c0a      	ldr	r4, [pc, #40]	@ (8003970 <prvInsertBlockIntoFreeList+0x60>)
 8003946:	6824      	ldr	r4, [r4, #0]
 8003948:	42a3      	cmp	r3, r4
 800394a:	d00b      	beq.n	8003964 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4419      	add	r1, r3
 8003950:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003958:	4290      	cmp	r0, r2
 800395a:	d000      	beq.n	800395e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800395c:	6010      	str	r0, [r2, #0]
	}
}
 800395e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003962:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003964:	6004      	str	r4, [r0, #0]
 8003966:	e7f7      	b.n	8003958 <prvInsertBlockIntoFreeList+0x48>
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	2000043c 	.word	0x2000043c
 8003970:	20000438 	.word	0x20000438

08003974 <pvPortMalloc>:
{
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003978:	f7ff fa5a 	bl	8002e30 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800397c:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <pvPortMalloc+0xec>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b1b3      	cbz	r3, 80039b0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003982:	4b38      	ldr	r3, [pc, #224]	@ (8003a64 <pvPortMalloc+0xf0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	421c      	tst	r4, r3
 8003988:	d150      	bne.n	8003a2c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800398a:	2c00      	cmp	r4, #0
 800398c:	d050      	beq.n	8003a30 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800398e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003992:	f014 0f07 	tst.w	r4, #7
 8003996:	d002      	beq.n	800399e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003998:	f022 0207 	bic.w	r2, r2, #7
 800399c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800399e:	2a00      	cmp	r2, #0
 80039a0:	d055      	beq.n	8003a4e <pvPortMalloc+0xda>
 80039a2:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <pvPortMalloc+0xf4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d353      	bcc.n	8003a52 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80039aa:	4930      	ldr	r1, [pc, #192]	@ (8003a6c <pvPortMalloc+0xf8>)
 80039ac:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ae:	e004      	b.n	80039ba <pvPortMalloc+0x46>
			prvHeapInit();
 80039b0:	f7ff ff7c 	bl	80038ac <prvHeapInit>
 80039b4:	e7e5      	b.n	8003982 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80039b6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80039b8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ba:	6863      	ldr	r3, [r4, #4]
 80039bc:	4293      	cmp	r3, r2
 80039be:	d202      	bcs.n	80039c6 <pvPortMalloc+0x52>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f7      	bne.n	80039b6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80039c6:	4b26      	ldr	r3, [pc, #152]	@ (8003a60 <pvPortMalloc+0xec>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	d043      	beq.n	8003a56 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039ce:	680d      	ldr	r5, [r1, #0]
 80039d0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d910      	bls.n	8003a00 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039de:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039e0:	f010 0f07 	tst.w	r0, #7
 80039e4:	d008      	beq.n	80039f8 <pvPortMalloc+0x84>
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	e7fe      	b.n	80039f6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039f8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039fa:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039fc:	f7ff ff88 	bl	8003910 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a00:	6862      	ldr	r2, [r4, #4]
 8003a02:	4919      	ldr	r1, [pc, #100]	@ (8003a68 <pvPortMalloc+0xf4>)
 8003a04:	680b      	ldr	r3, [r1, #0]
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a0a:	4919      	ldr	r1, [pc, #100]	@ (8003a70 <pvPortMalloc+0xfc>)
 8003a0c:	6809      	ldr	r1, [r1, #0]
 8003a0e:	428b      	cmp	r3, r1
 8003a10:	d201      	bcs.n	8003a16 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a12:	4917      	ldr	r1, [pc, #92]	@ (8003a70 <pvPortMalloc+0xfc>)
 8003a14:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <pvPortMalloc+0xf0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8003a22:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <pvPortMalloc+0x100>)
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e002      	b.n	8003a32 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8003a2c:	2500      	movs	r5, #0
 8003a2e:	e000      	b.n	8003a32 <pvPortMalloc+0xbe>
 8003a30:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8003a32:	f7ff fa9f 	bl	8002f74 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a36:	f015 0f07 	tst.w	r5, #7
 8003a3a:	d00e      	beq.n	8003a5a <pvPortMalloc+0xe6>
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	e7fe      	b.n	8003a4c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8003a4e:	2500      	movs	r5, #0
 8003a50:	e7ef      	b.n	8003a32 <pvPortMalloc+0xbe>
 8003a52:	2500      	movs	r5, #0
 8003a54:	e7ed      	b.n	8003a32 <pvPortMalloc+0xbe>
 8003a56:	2500      	movs	r5, #0
 8003a58:	e7eb      	b.n	8003a32 <pvPortMalloc+0xbe>
}
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	bd38      	pop	{r3, r4, r5, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000438 	.word	0x20000438
 8003a64:	20000424 	.word	0x20000424
 8003a68:	20000434 	.word	0x20000434
 8003a6c:	2000043c 	.word	0x2000043c
 8003a70:	20000430 	.word	0x20000430
 8003a74:	2000042c 	.word	0x2000042c

08003a78 <vPortFree>:
	if( pv != NULL )
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d034      	beq.n	8003ae6 <vPortFree+0x6e>
{
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003a80:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003a88:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <vPortFree+0x70>)
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	4213      	tst	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <vPortFree+0x2a>
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	e7fe      	b.n	8003aa0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aa2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003aa6:	b141      	cbz	r1, 8003aba <vPortFree+0x42>
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	e7fe      	b.n	8003ab8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003aba:	ea23 0302 	bic.w	r3, r3, r2
 8003abe:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003ac2:	f7ff f9b5 	bl	8002e30 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ac6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003aca:	4a08      	ldr	r2, [pc, #32]	@ (8003aec <vPortFree+0x74>)
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	440b      	add	r3, r1
 8003ad0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f7ff ff1c 	bl	8003910 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ad8:	4a05      	ldr	r2, [pc, #20]	@ (8003af0 <vPortFree+0x78>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8003ae0:	f7ff fa48 	bl	8002f74 <xTaskResumeAll>
}
 8003ae4:	bd38      	pop	{r3, r4, r5, pc}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000424 	.word	0x20000424
 8003aec:	20000434 	.word	0x20000434
 8003af0:	20000428 	.word	0x20000428

08003af4 <std>:
 8003af4:	2300      	movs	r3, #0
 8003af6:	b510      	push	{r4, lr}
 8003af8:	4604      	mov	r4, r0
 8003afa:	e9c0 3300 	strd	r3, r3, [r0]
 8003afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b02:	6083      	str	r3, [r0, #8]
 8003b04:	8181      	strh	r1, [r0, #12]
 8003b06:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b08:	81c2      	strh	r2, [r0, #14]
 8003b0a:	6183      	str	r3, [r0, #24]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	2208      	movs	r2, #8
 8003b10:	305c      	adds	r0, #92	@ 0x5c
 8003b12:	f000 f9f9 	bl	8003f08 <memset>
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <std+0x58>)
 8003b18:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b50 <std+0x5c>)
 8003b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <std+0x60>)
 8003b20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <std+0x64>)
 8003b24:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <std+0x68>)
 8003b28:	6224      	str	r4, [r4, #32]
 8003b2a:	429c      	cmp	r4, r3
 8003b2c:	d006      	beq.n	8003b3c <std+0x48>
 8003b2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b32:	4294      	cmp	r4, r2
 8003b34:	d002      	beq.n	8003b3c <std+0x48>
 8003b36:	33d0      	adds	r3, #208	@ 0xd0
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	d105      	bne.n	8003b48 <std+0x54>
 8003b3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b44:	f000 baae 	b.w	80040a4 <__retarget_lock_init_recursive>
 8003b48:	bd10      	pop	{r4, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08003d59 	.word	0x08003d59
 8003b50:	08003d7b 	.word	0x08003d7b
 8003b54:	08003db3 	.word	0x08003db3
 8003b58:	08003dd7 	.word	0x08003dd7
 8003b5c:	20001444 	.word	0x20001444

08003b60 <stdio_exit_handler>:
 8003b60:	4a02      	ldr	r2, [pc, #8]	@ (8003b6c <stdio_exit_handler+0xc>)
 8003b62:	4903      	ldr	r1, [pc, #12]	@ (8003b70 <stdio_exit_handler+0x10>)
 8003b64:	4803      	ldr	r0, [pc, #12]	@ (8003b74 <stdio_exit_handler+0x14>)
 8003b66:	f000 b869 	b.w	8003c3c <_fwalk_sglue>
 8003b6a:	bf00      	nop
 8003b6c:	20000010 	.word	0x20000010
 8003b70:	08004961 	.word	0x08004961
 8003b74:	20000020 	.word	0x20000020

08003b78 <cleanup_stdio>:
 8003b78:	6841      	ldr	r1, [r0, #4]
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <cleanup_stdio+0x34>)
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	4604      	mov	r4, r0
 8003b82:	d001      	beq.n	8003b88 <cleanup_stdio+0x10>
 8003b84:	f000 feec 	bl	8004960 <_fflush_r>
 8003b88:	68a1      	ldr	r1, [r4, #8]
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <cleanup_stdio+0x38>)
 8003b8c:	4299      	cmp	r1, r3
 8003b8e:	d002      	beq.n	8003b96 <cleanup_stdio+0x1e>
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 fee5 	bl	8004960 <_fflush_r>
 8003b96:	68e1      	ldr	r1, [r4, #12]
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <cleanup_stdio+0x3c>)
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	d004      	beq.n	8003ba8 <cleanup_stdio+0x30>
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba4:	f000 bedc 	b.w	8004960 <_fflush_r>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	20001444 	.word	0x20001444
 8003bb0:	200014ac 	.word	0x200014ac
 8003bb4:	20001514 	.word	0x20001514

08003bb8 <global_stdio_init.part.0>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <global_stdio_init.part.0+0x30>)
 8003bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8003bec <global_stdio_init.part.0+0x34>)
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf0 <global_stdio_init.part.0+0x38>)
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	f7ff ff94 	bl	8003af4 <std>
 8003bcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2109      	movs	r1, #9
 8003bd4:	f7ff ff8e 	bl	8003af4 <std>
 8003bd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bdc:	2202      	movs	r2, #2
 8003bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be2:	2112      	movs	r1, #18
 8003be4:	f7ff bf86 	b.w	8003af4 <std>
 8003be8:	2000157c 	.word	0x2000157c
 8003bec:	20001444 	.word	0x20001444
 8003bf0:	08003b61 	.word	0x08003b61

08003bf4 <__sfp_lock_acquire>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	@ (8003bfc <__sfp_lock_acquire+0x8>)
 8003bf6:	f000 ba56 	b.w	80040a6 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	20001585 	.word	0x20001585

08003c00 <__sfp_lock_release>:
 8003c00:	4801      	ldr	r0, [pc, #4]	@ (8003c08 <__sfp_lock_release+0x8>)
 8003c02:	f000 ba51 	b.w	80040a8 <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	20001585 	.word	0x20001585

08003c0c <__sinit>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
 8003c10:	f7ff fff0 	bl	8003bf4 <__sfp_lock_acquire>
 8003c14:	6a23      	ldr	r3, [r4, #32]
 8003c16:	b11b      	cbz	r3, 8003c20 <__sinit+0x14>
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	f7ff bff0 	b.w	8003c00 <__sfp_lock_release>
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <__sinit+0x28>)
 8003c22:	6223      	str	r3, [r4, #32]
 8003c24:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <__sinit+0x2c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f5      	bne.n	8003c18 <__sinit+0xc>
 8003c2c:	f7ff ffc4 	bl	8003bb8 <global_stdio_init.part.0>
 8003c30:	e7f2      	b.n	8003c18 <__sinit+0xc>
 8003c32:	bf00      	nop
 8003c34:	08003b79 	.word	0x08003b79
 8003c38:	2000157c 	.word	0x2000157c

08003c3c <_fwalk_sglue>:
 8003c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c40:	4607      	mov	r7, r0
 8003c42:	4688      	mov	r8, r1
 8003c44:	4614      	mov	r4, r2
 8003c46:	2600      	movs	r6, #0
 8003c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8003c50:	d505      	bpl.n	8003c5e <_fwalk_sglue+0x22>
 8003c52:	6824      	ldr	r4, [r4, #0]
 8003c54:	2c00      	cmp	r4, #0
 8003c56:	d1f7      	bne.n	8003c48 <_fwalk_sglue+0xc>
 8003c58:	4630      	mov	r0, r6
 8003c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d907      	bls.n	8003c74 <_fwalk_sglue+0x38>
 8003c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	d003      	beq.n	8003c74 <_fwalk_sglue+0x38>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4638      	mov	r0, r7
 8003c70:	47c0      	blx	r8
 8003c72:	4306      	orrs	r6, r0
 8003c74:	3568      	adds	r5, #104	@ 0x68
 8003c76:	e7e9      	b.n	8003c4c <_fwalk_sglue+0x10>

08003c78 <iprintf>:
 8003c78:	b40f      	push	{r0, r1, r2, r3}
 8003c7a:	b507      	push	{r0, r1, r2, lr}
 8003c7c:	4906      	ldr	r1, [pc, #24]	@ (8003c98 <iprintf+0x20>)
 8003c7e:	ab04      	add	r3, sp, #16
 8003c80:	6808      	ldr	r0, [r1, #0]
 8003c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c86:	6881      	ldr	r1, [r0, #8]
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	f000 fb3f 	bl	800430c <_vfiprintf_r>
 8003c8e:	b003      	add	sp, #12
 8003c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c94:	b004      	add	sp, #16
 8003c96:	4770      	bx	lr
 8003c98:	2000001c 	.word	0x2000001c

08003c9c <_puts_r>:
 8003c9c:	6a03      	ldr	r3, [r0, #32]
 8003c9e:	b570      	push	{r4, r5, r6, lr}
 8003ca0:	6884      	ldr	r4, [r0, #8]
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	460e      	mov	r6, r1
 8003ca6:	b90b      	cbnz	r3, 8003cac <_puts_r+0x10>
 8003ca8:	f7ff ffb0 	bl	8003c0c <__sinit>
 8003cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cae:	07db      	lsls	r3, r3, #31
 8003cb0:	d405      	bmi.n	8003cbe <_puts_r+0x22>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	0598      	lsls	r0, r3, #22
 8003cb6:	d402      	bmi.n	8003cbe <_puts_r+0x22>
 8003cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cba:	f000 f9f4 	bl	80040a6 <__retarget_lock_acquire_recursive>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	0719      	lsls	r1, r3, #28
 8003cc2:	d502      	bpl.n	8003cca <_puts_r+0x2e>
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d135      	bne.n	8003d36 <_puts_r+0x9a>
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 f8c5 	bl	8003e5c <__swsetup_r>
 8003cd2:	b380      	cbz	r0, 8003d36 <_puts_r+0x9a>
 8003cd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cda:	07da      	lsls	r2, r3, #31
 8003cdc:	d405      	bmi.n	8003cea <_puts_r+0x4e>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	059b      	lsls	r3, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_puts_r+0x4e>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ce6:	f000 f9df 	bl	80040a8 <__retarget_lock_release_recursive>
 8003cea:	4628      	mov	r0, r5
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da04      	bge.n	8003cfc <_puts_r+0x60>
 8003cf2:	69a2      	ldr	r2, [r4, #24]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dc17      	bgt.n	8003d28 <_puts_r+0x8c>
 8003cf8:	290a      	cmp	r1, #10
 8003cfa:	d015      	beq.n	8003d28 <_puts_r+0x8c>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	6022      	str	r2, [r4, #0]
 8003d02:	7019      	strb	r1, [r3, #0]
 8003d04:	68a3      	ldr	r3, [r4, #8]
 8003d06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	2900      	cmp	r1, #0
 8003d10:	d1ed      	bne.n	8003cee <_puts_r+0x52>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da11      	bge.n	8003d3a <_puts_r+0x9e>
 8003d16:	4622      	mov	r2, r4
 8003d18:	210a      	movs	r1, #10
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f000 f85f 	bl	8003dde <__swbuf_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d0d7      	beq.n	8003cd4 <_puts_r+0x38>
 8003d24:	250a      	movs	r5, #10
 8003d26:	e7d7      	b.n	8003cd8 <_puts_r+0x3c>
 8003d28:	4622      	mov	r2, r4
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f000 f857 	bl	8003dde <__swbuf_r>
 8003d30:	3001      	adds	r0, #1
 8003d32:	d1e7      	bne.n	8003d04 <_puts_r+0x68>
 8003d34:	e7ce      	b.n	8003cd4 <_puts_r+0x38>
 8003d36:	3e01      	subs	r6, #1
 8003d38:	e7e4      	b.n	8003d04 <_puts_r+0x68>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	220a      	movs	r2, #10
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e7ee      	b.n	8003d24 <_puts_r+0x88>
	...

08003d48 <puts>:
 8003d48:	4b02      	ldr	r3, [pc, #8]	@ (8003d54 <puts+0xc>)
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f7ff bfa5 	b.w	8003c9c <_puts_r>
 8003d52:	bf00      	nop
 8003d54:	2000001c 	.word	0x2000001c

08003d58 <__sread>:
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d60:	f000 f952 	bl	8004008 <_read_r>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	bfab      	itete	ge
 8003d68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d6c:	181b      	addge	r3, r3, r0
 8003d6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d72:	bfac      	ite	ge
 8003d74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d76:	81a3      	strhlt	r3, [r4, #12]
 8003d78:	bd10      	pop	{r4, pc}

08003d7a <__swrite>:
 8003d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7e:	461f      	mov	r7, r3
 8003d80:	898b      	ldrh	r3, [r1, #12]
 8003d82:	05db      	lsls	r3, r3, #23
 8003d84:	4605      	mov	r5, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	4616      	mov	r6, r2
 8003d8a:	d505      	bpl.n	8003d98 <__swrite+0x1e>
 8003d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d90:	2302      	movs	r3, #2
 8003d92:	2200      	movs	r2, #0
 8003d94:	f000 f926 	bl	8003fe4 <_lseek_r>
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	4632      	mov	r2, r6
 8003da6:	463b      	mov	r3, r7
 8003da8:	4628      	mov	r0, r5
 8003daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dae:	f000 b93d 	b.w	800402c <_write_r>

08003db2 <__sseek>:
 8003db2:	b510      	push	{r4, lr}
 8003db4:	460c      	mov	r4, r1
 8003db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dba:	f000 f913 	bl	8003fe4 <_lseek_r>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	bf15      	itete	ne
 8003dc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dce:	81a3      	strheq	r3, [r4, #12]
 8003dd0:	bf18      	it	ne
 8003dd2:	81a3      	strhne	r3, [r4, #12]
 8003dd4:	bd10      	pop	{r4, pc}

08003dd6 <__sclose>:
 8003dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dda:	f000 b89d 	b.w	8003f18 <_close_r>

08003dde <__swbuf_r>:
 8003dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de0:	460e      	mov	r6, r1
 8003de2:	4614      	mov	r4, r2
 8003de4:	4605      	mov	r5, r0
 8003de6:	b118      	cbz	r0, 8003df0 <__swbuf_r+0x12>
 8003de8:	6a03      	ldr	r3, [r0, #32]
 8003dea:	b90b      	cbnz	r3, 8003df0 <__swbuf_r+0x12>
 8003dec:	f7ff ff0e 	bl	8003c0c <__sinit>
 8003df0:	69a3      	ldr	r3, [r4, #24]
 8003df2:	60a3      	str	r3, [r4, #8]
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	071a      	lsls	r2, r3, #28
 8003df8:	d501      	bpl.n	8003dfe <__swbuf_r+0x20>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	b943      	cbnz	r3, 8003e10 <__swbuf_r+0x32>
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 f82b 	bl	8003e5c <__swsetup_r>
 8003e06:	b118      	cbz	r0, 8003e10 <__swbuf_r+0x32>
 8003e08:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	6922      	ldr	r2, [r4, #16]
 8003e14:	1a98      	subs	r0, r3, r2
 8003e16:	6963      	ldr	r3, [r4, #20]
 8003e18:	b2f6      	uxtb	r6, r6
 8003e1a:	4283      	cmp	r3, r0
 8003e1c:	4637      	mov	r7, r6
 8003e1e:	dc05      	bgt.n	8003e2c <__swbuf_r+0x4e>
 8003e20:	4621      	mov	r1, r4
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 fd9c 	bl	8004960 <_fflush_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d1ed      	bne.n	8003e08 <__swbuf_r+0x2a>
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60a3      	str	r3, [r4, #8]
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	6022      	str	r2, [r4, #0]
 8003e38:	701e      	strb	r6, [r3, #0]
 8003e3a:	6962      	ldr	r2, [r4, #20]
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d004      	beq.n	8003e4c <__swbuf_r+0x6e>
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	07db      	lsls	r3, r3, #31
 8003e46:	d5e1      	bpl.n	8003e0c <__swbuf_r+0x2e>
 8003e48:	2e0a      	cmp	r6, #10
 8003e4a:	d1df      	bne.n	8003e0c <__swbuf_r+0x2e>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 fd86 	bl	8004960 <_fflush_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d0d9      	beq.n	8003e0c <__swbuf_r+0x2e>
 8003e58:	e7d6      	b.n	8003e08 <__swbuf_r+0x2a>
	...

08003e5c <__swsetup_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <__swsetup_r+0xa8>)
 8003e60:	4605      	mov	r5, r0
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	460c      	mov	r4, r1
 8003e66:	b118      	cbz	r0, 8003e70 <__swsetup_r+0x14>
 8003e68:	6a03      	ldr	r3, [r0, #32]
 8003e6a:	b90b      	cbnz	r3, 8003e70 <__swsetup_r+0x14>
 8003e6c:	f7ff fece 	bl	8003c0c <__sinit>
 8003e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e74:	0719      	lsls	r1, r3, #28
 8003e76:	d422      	bmi.n	8003ebe <__swsetup_r+0x62>
 8003e78:	06da      	lsls	r2, r3, #27
 8003e7a:	d407      	bmi.n	8003e8c <__swsetup_r+0x30>
 8003e7c:	2209      	movs	r2, #9
 8003e7e:	602a      	str	r2, [r5, #0]
 8003e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e8a:	e033      	b.n	8003ef4 <__swsetup_r+0x98>
 8003e8c:	0758      	lsls	r0, r3, #29
 8003e8e:	d512      	bpl.n	8003eb6 <__swsetup_r+0x5a>
 8003e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e92:	b141      	cbz	r1, 8003ea6 <__swsetup_r+0x4a>
 8003e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <__swsetup_r+0x46>
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f000 f913 	bl	80040c8 <_free_r>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6063      	str	r3, [r4, #4]
 8003eb2:	6923      	ldr	r3, [r4, #16]
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	b94b      	cbnz	r3, 8003ed6 <__swsetup_r+0x7a>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ecc:	d003      	beq.n	8003ed6 <__swsetup_r+0x7a>
 8003ece:	4621      	mov	r1, r4
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f000 fd93 	bl	80049fc <__smakebuf_r>
 8003ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eda:	f013 0201 	ands.w	r2, r3, #1
 8003ede:	d00a      	beq.n	8003ef6 <__swsetup_r+0x9a>
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60a2      	str	r2, [r4, #8]
 8003ee4:	6962      	ldr	r2, [r4, #20]
 8003ee6:	4252      	negs	r2, r2
 8003ee8:	61a2      	str	r2, [r4, #24]
 8003eea:	6922      	ldr	r2, [r4, #16]
 8003eec:	b942      	cbnz	r2, 8003f00 <__swsetup_r+0xa4>
 8003eee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ef2:	d1c5      	bne.n	8003e80 <__swsetup_r+0x24>
 8003ef4:	bd38      	pop	{r3, r4, r5, pc}
 8003ef6:	0799      	lsls	r1, r3, #30
 8003ef8:	bf58      	it	pl
 8003efa:	6962      	ldrpl	r2, [r4, #20]
 8003efc:	60a2      	str	r2, [r4, #8]
 8003efe:	e7f4      	b.n	8003eea <__swsetup_r+0x8e>
 8003f00:	2000      	movs	r0, #0
 8003f02:	e7f7      	b.n	8003ef4 <__swsetup_r+0x98>
 8003f04:	2000001c 	.word	0x2000001c

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_close_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d06      	ldr	r5, [pc, #24]	@ (8003f34 <_close_r+0x1c>)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc fdb4 	bl	8000a90 <_close>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_close_r+0x1a>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_close_r+0x1a>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	20001580 	.word	0x20001580

08003f38 <_reclaim_reent>:
 8003f38:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <_reclaim_reent+0xa8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4283      	cmp	r3, r0
 8003f3e:	b570      	push	{r4, r5, r6, lr}
 8003f40:	4604      	mov	r4, r0
 8003f42:	d04b      	beq.n	8003fdc <_reclaim_reent+0xa4>
 8003f44:	69c3      	ldr	r3, [r0, #28]
 8003f46:	b1ab      	cbz	r3, 8003f74 <_reclaim_reent+0x3c>
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	b16b      	cbz	r3, 8003f68 <_reclaim_reent+0x30>
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	69e3      	ldr	r3, [r4, #28]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	5959      	ldr	r1, [r3, r5]
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d13b      	bne.n	8003fd0 <_reclaim_reent+0x98>
 8003f58:	3504      	adds	r5, #4
 8003f5a:	2d80      	cmp	r5, #128	@ 0x80
 8003f5c:	d1f7      	bne.n	8003f4e <_reclaim_reent+0x16>
 8003f5e:	69e3      	ldr	r3, [r4, #28]
 8003f60:	4620      	mov	r0, r4
 8003f62:	68d9      	ldr	r1, [r3, #12]
 8003f64:	f000 f8b0 	bl	80040c8 <_free_r>
 8003f68:	69e3      	ldr	r3, [r4, #28]
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	b111      	cbz	r1, 8003f74 <_reclaim_reent+0x3c>
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f000 f8aa 	bl	80040c8 <_free_r>
 8003f74:	6961      	ldr	r1, [r4, #20]
 8003f76:	b111      	cbz	r1, 8003f7e <_reclaim_reent+0x46>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 f8a5 	bl	80040c8 <_free_r>
 8003f7e:	69e1      	ldr	r1, [r4, #28]
 8003f80:	b111      	cbz	r1, 8003f88 <_reclaim_reent+0x50>
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 f8a0 	bl	80040c8 <_free_r>
 8003f88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003f8a:	b111      	cbz	r1, 8003f92 <_reclaim_reent+0x5a>
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 f89b 	bl	80040c8 <_free_r>
 8003f92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f94:	b111      	cbz	r1, 8003f9c <_reclaim_reent+0x64>
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 f896 	bl	80040c8 <_free_r>
 8003f9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003f9e:	b111      	cbz	r1, 8003fa6 <_reclaim_reent+0x6e>
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 f891 	bl	80040c8 <_free_r>
 8003fa6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003fa8:	b111      	cbz	r1, 8003fb0 <_reclaim_reent+0x78>
 8003faa:	4620      	mov	r0, r4
 8003fac:	f000 f88c 	bl	80040c8 <_free_r>
 8003fb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003fb2:	b111      	cbz	r1, 8003fba <_reclaim_reent+0x82>
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f000 f887 	bl	80040c8 <_free_r>
 8003fba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003fbc:	b111      	cbz	r1, 8003fc4 <_reclaim_reent+0x8c>
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 f882 	bl	80040c8 <_free_r>
 8003fc4:	6a23      	ldr	r3, [r4, #32]
 8003fc6:	b14b      	cbz	r3, 8003fdc <_reclaim_reent+0xa4>
 8003fc8:	4620      	mov	r0, r4
 8003fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003fce:	4718      	bx	r3
 8003fd0:	680e      	ldr	r6, [r1, #0]
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 f878 	bl	80040c8 <_free_r>
 8003fd8:	4631      	mov	r1, r6
 8003fda:	e7bb      	b.n	8003f54 <_reclaim_reent+0x1c>
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000001c 	.word	0x2000001c

08003fe4 <_lseek_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	@ (8004004 <_lseek_r+0x20>)
 8003fe8:	4604      	mov	r4, r0
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fc fd56 	bl	8000aa4 <_lseek>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_lseek_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_lseek_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20001580 	.word	0x20001580

08004008 <_read_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d07      	ldr	r5, [pc, #28]	@ (8004028 <_read_r+0x20>)
 800400c:	4604      	mov	r4, r0
 800400e:	4608      	mov	r0, r1
 8004010:	4611      	mov	r1, r2
 8004012:	2200      	movs	r2, #0
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fc fd2a 	bl	8000a70 <_read>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_read_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_read_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20001580 	.word	0x20001580

0800402c <_write_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d07      	ldr	r5, [pc, #28]	@ (800404c <_write_r+0x20>)
 8004030:	4604      	mov	r4, r0
 8004032:	4608      	mov	r0, r1
 8004034:	4611      	mov	r1, r2
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fc fb4e 	bl	80006dc <_write>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_write_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_write_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20001580 	.word	0x20001580

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	@ (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2000001c 	.word	0x2000001c

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	@ (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	@ (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	@ (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	@ (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 fd32 	bl	8004ad8 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08004bf0 	.word	0x08004bf0
 8004098:	08004bf0 	.word	0x08004bf0
 800409c:	08004bf0 	.word	0x08004bf0
 80040a0:	08004bf4 	.word	0x08004bf4

080040a4 <__retarget_lock_init_recursive>:
 80040a4:	4770      	bx	lr

080040a6 <__retarget_lock_acquire_recursive>:
 80040a6:	4770      	bx	lr

080040a8 <__retarget_lock_release_recursive>:
 80040a8:	4770      	bx	lr

080040aa <memcpy>:
 80040aa:	440a      	add	r2, r1
 80040ac:	4291      	cmp	r1, r2
 80040ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80040b2:	d100      	bne.n	80040b6 <memcpy+0xc>
 80040b4:	4770      	bx	lr
 80040b6:	b510      	push	{r4, lr}
 80040b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040c0:	4291      	cmp	r1, r2
 80040c2:	d1f9      	bne.n	80040b8 <memcpy+0xe>
 80040c4:	bd10      	pop	{r4, pc}
	...

080040c8 <_free_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4605      	mov	r5, r0
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d041      	beq.n	8004154 <_free_r+0x8c>
 80040d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d4:	1f0c      	subs	r4, r1, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bfb8      	it	lt
 80040da:	18e4      	addlt	r4, r4, r3
 80040dc:	f000 f8e0 	bl	80042a0 <__malloc_lock>
 80040e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <_free_r+0x90>)
 80040e2:	6813      	ldr	r3, [r2, #0]
 80040e4:	b933      	cbnz	r3, 80040f4 <_free_r+0x2c>
 80040e6:	6063      	str	r3, [r4, #4]
 80040e8:	6014      	str	r4, [r2, #0]
 80040ea:	4628      	mov	r0, r5
 80040ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f0:	f000 b8dc 	b.w	80042ac <__malloc_unlock>
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d908      	bls.n	800410a <_free_r+0x42>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	1821      	adds	r1, r4, r0
 80040fc:	428b      	cmp	r3, r1
 80040fe:	bf01      	itttt	eq
 8004100:	6819      	ldreq	r1, [r3, #0]
 8004102:	685b      	ldreq	r3, [r3, #4]
 8004104:	1809      	addeq	r1, r1, r0
 8004106:	6021      	streq	r1, [r4, #0]
 8004108:	e7ed      	b.n	80040e6 <_free_r+0x1e>
 800410a:	461a      	mov	r2, r3
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	b10b      	cbz	r3, 8004114 <_free_r+0x4c>
 8004110:	42a3      	cmp	r3, r4
 8004112:	d9fa      	bls.n	800410a <_free_r+0x42>
 8004114:	6811      	ldr	r1, [r2, #0]
 8004116:	1850      	adds	r0, r2, r1
 8004118:	42a0      	cmp	r0, r4
 800411a:	d10b      	bne.n	8004134 <_free_r+0x6c>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	4401      	add	r1, r0
 8004120:	1850      	adds	r0, r2, r1
 8004122:	4283      	cmp	r3, r0
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	d1e0      	bne.n	80040ea <_free_r+0x22>
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	6053      	str	r3, [r2, #4]
 800412e:	4408      	add	r0, r1
 8004130:	6010      	str	r0, [r2, #0]
 8004132:	e7da      	b.n	80040ea <_free_r+0x22>
 8004134:	d902      	bls.n	800413c <_free_r+0x74>
 8004136:	230c      	movs	r3, #12
 8004138:	602b      	str	r3, [r5, #0]
 800413a:	e7d6      	b.n	80040ea <_free_r+0x22>
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	1821      	adds	r1, r4, r0
 8004140:	428b      	cmp	r3, r1
 8004142:	bf04      	itt	eq
 8004144:	6819      	ldreq	r1, [r3, #0]
 8004146:	685b      	ldreq	r3, [r3, #4]
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	bf04      	itt	eq
 800414c:	1809      	addeq	r1, r1, r0
 800414e:	6021      	streq	r1, [r4, #0]
 8004150:	6054      	str	r4, [r2, #4]
 8004152:	e7ca      	b.n	80040ea <_free_r+0x22>
 8004154:	bd38      	pop	{r3, r4, r5, pc}
 8004156:	bf00      	nop
 8004158:	2000158c 	.word	0x2000158c

0800415c <sbrk_aligned>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4e0f      	ldr	r6, [pc, #60]	@ (800419c <sbrk_aligned+0x40>)
 8004160:	460c      	mov	r4, r1
 8004162:	6831      	ldr	r1, [r6, #0]
 8004164:	4605      	mov	r5, r0
 8004166:	b911      	cbnz	r1, 800416e <sbrk_aligned+0x12>
 8004168:	f000 fca6 	bl	8004ab8 <_sbrk_r>
 800416c:	6030      	str	r0, [r6, #0]
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	f000 fca1 	bl	8004ab8 <_sbrk_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d103      	bne.n	8004182 <sbrk_aligned+0x26>
 800417a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800417e:	4620      	mov	r0, r4
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	1cc4      	adds	r4, r0, #3
 8004184:	f024 0403 	bic.w	r4, r4, #3
 8004188:	42a0      	cmp	r0, r4
 800418a:	d0f8      	beq.n	800417e <sbrk_aligned+0x22>
 800418c:	1a21      	subs	r1, r4, r0
 800418e:	4628      	mov	r0, r5
 8004190:	f000 fc92 	bl	8004ab8 <_sbrk_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d1f2      	bne.n	800417e <sbrk_aligned+0x22>
 8004198:	e7ef      	b.n	800417a <sbrk_aligned+0x1e>
 800419a:	bf00      	nop
 800419c:	20001588 	.word	0x20001588

080041a0 <_malloc_r>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	1ccd      	adds	r5, r1, #3
 80041a6:	f025 0503 	bic.w	r5, r5, #3
 80041aa:	3508      	adds	r5, #8
 80041ac:	2d0c      	cmp	r5, #12
 80041ae:	bf38      	it	cc
 80041b0:	250c      	movcc	r5, #12
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	4606      	mov	r6, r0
 80041b6:	db01      	blt.n	80041bc <_malloc_r+0x1c>
 80041b8:	42a9      	cmp	r1, r5
 80041ba:	d904      	bls.n	80041c6 <_malloc_r+0x26>
 80041bc:	230c      	movs	r3, #12
 80041be:	6033      	str	r3, [r6, #0]
 80041c0:	2000      	movs	r0, #0
 80041c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800429c <_malloc_r+0xfc>
 80041ca:	f000 f869 	bl	80042a0 <__malloc_lock>
 80041ce:	f8d8 3000 	ldr.w	r3, [r8]
 80041d2:	461c      	mov	r4, r3
 80041d4:	bb44      	cbnz	r4, 8004228 <_malloc_r+0x88>
 80041d6:	4629      	mov	r1, r5
 80041d8:	4630      	mov	r0, r6
 80041da:	f7ff ffbf 	bl	800415c <sbrk_aligned>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	4604      	mov	r4, r0
 80041e2:	d158      	bne.n	8004296 <_malloc_r+0xf6>
 80041e4:	f8d8 4000 	ldr.w	r4, [r8]
 80041e8:	4627      	mov	r7, r4
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	d143      	bne.n	8004276 <_malloc_r+0xd6>
 80041ee:	2c00      	cmp	r4, #0
 80041f0:	d04b      	beq.n	800428a <_malloc_r+0xea>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	4639      	mov	r1, r7
 80041f6:	4630      	mov	r0, r6
 80041f8:	eb04 0903 	add.w	r9, r4, r3
 80041fc:	f000 fc5c 	bl	8004ab8 <_sbrk_r>
 8004200:	4581      	cmp	r9, r0
 8004202:	d142      	bne.n	800428a <_malloc_r+0xea>
 8004204:	6821      	ldr	r1, [r4, #0]
 8004206:	1a6d      	subs	r5, r5, r1
 8004208:	4629      	mov	r1, r5
 800420a:	4630      	mov	r0, r6
 800420c:	f7ff ffa6 	bl	800415c <sbrk_aligned>
 8004210:	3001      	adds	r0, #1
 8004212:	d03a      	beq.n	800428a <_malloc_r+0xea>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	442b      	add	r3, r5
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	f8d8 3000 	ldr.w	r3, [r8]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	bb62      	cbnz	r2, 800427c <_malloc_r+0xdc>
 8004222:	f8c8 7000 	str.w	r7, [r8]
 8004226:	e00f      	b.n	8004248 <_malloc_r+0xa8>
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	1b52      	subs	r2, r2, r5
 800422c:	d420      	bmi.n	8004270 <_malloc_r+0xd0>
 800422e:	2a0b      	cmp	r2, #11
 8004230:	d917      	bls.n	8004262 <_malloc_r+0xc2>
 8004232:	1961      	adds	r1, r4, r5
 8004234:	42a3      	cmp	r3, r4
 8004236:	6025      	str	r5, [r4, #0]
 8004238:	bf18      	it	ne
 800423a:	6059      	strne	r1, [r3, #4]
 800423c:	6863      	ldr	r3, [r4, #4]
 800423e:	bf08      	it	eq
 8004240:	f8c8 1000 	streq.w	r1, [r8]
 8004244:	5162      	str	r2, [r4, r5]
 8004246:	604b      	str	r3, [r1, #4]
 8004248:	4630      	mov	r0, r6
 800424a:	f000 f82f 	bl	80042ac <__malloc_unlock>
 800424e:	f104 000b 	add.w	r0, r4, #11
 8004252:	1d23      	adds	r3, r4, #4
 8004254:	f020 0007 	bic.w	r0, r0, #7
 8004258:	1ac2      	subs	r2, r0, r3
 800425a:	bf1c      	itt	ne
 800425c:	1a1b      	subne	r3, r3, r0
 800425e:	50a3      	strne	r3, [r4, r2]
 8004260:	e7af      	b.n	80041c2 <_malloc_r+0x22>
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	42a3      	cmp	r3, r4
 8004266:	bf0c      	ite	eq
 8004268:	f8c8 2000 	streq.w	r2, [r8]
 800426c:	605a      	strne	r2, [r3, #4]
 800426e:	e7eb      	b.n	8004248 <_malloc_r+0xa8>
 8004270:	4623      	mov	r3, r4
 8004272:	6864      	ldr	r4, [r4, #4]
 8004274:	e7ae      	b.n	80041d4 <_malloc_r+0x34>
 8004276:	463c      	mov	r4, r7
 8004278:	687f      	ldr	r7, [r7, #4]
 800427a:	e7b6      	b.n	80041ea <_malloc_r+0x4a>
 800427c:	461a      	mov	r2, r3
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	42a3      	cmp	r3, r4
 8004282:	d1fb      	bne.n	800427c <_malloc_r+0xdc>
 8004284:	2300      	movs	r3, #0
 8004286:	6053      	str	r3, [r2, #4]
 8004288:	e7de      	b.n	8004248 <_malloc_r+0xa8>
 800428a:	230c      	movs	r3, #12
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	4630      	mov	r0, r6
 8004290:	f000 f80c 	bl	80042ac <__malloc_unlock>
 8004294:	e794      	b.n	80041c0 <_malloc_r+0x20>
 8004296:	6005      	str	r5, [r0, #0]
 8004298:	e7d6      	b.n	8004248 <_malloc_r+0xa8>
 800429a:	bf00      	nop
 800429c:	2000158c 	.word	0x2000158c

080042a0 <__malloc_lock>:
 80042a0:	4801      	ldr	r0, [pc, #4]	@ (80042a8 <__malloc_lock+0x8>)
 80042a2:	f7ff bf00 	b.w	80040a6 <__retarget_lock_acquire_recursive>
 80042a6:	bf00      	nop
 80042a8:	20001584 	.word	0x20001584

080042ac <__malloc_unlock>:
 80042ac:	4801      	ldr	r0, [pc, #4]	@ (80042b4 <__malloc_unlock+0x8>)
 80042ae:	f7ff befb 	b.w	80040a8 <__retarget_lock_release_recursive>
 80042b2:	bf00      	nop
 80042b4:	20001584 	.word	0x20001584

080042b8 <__sfputc_r>:
 80042b8:	6893      	ldr	r3, [r2, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	b410      	push	{r4}
 80042c0:	6093      	str	r3, [r2, #8]
 80042c2:	da08      	bge.n	80042d6 <__sfputc_r+0x1e>
 80042c4:	6994      	ldr	r4, [r2, #24]
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	db01      	blt.n	80042ce <__sfputc_r+0x16>
 80042ca:	290a      	cmp	r1, #10
 80042cc:	d103      	bne.n	80042d6 <__sfputc_r+0x1e>
 80042ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d2:	f7ff bd84 	b.w	8003dde <__swbuf_r>
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	1c58      	adds	r0, r3, #1
 80042da:	6010      	str	r0, [r2, #0]
 80042dc:	7019      	strb	r1, [r3, #0]
 80042de:	4608      	mov	r0, r1
 80042e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <__sfputs_r>:
 80042e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e8:	4606      	mov	r6, r0
 80042ea:	460f      	mov	r7, r1
 80042ec:	4614      	mov	r4, r2
 80042ee:	18d5      	adds	r5, r2, r3
 80042f0:	42ac      	cmp	r4, r5
 80042f2:	d101      	bne.n	80042f8 <__sfputs_r+0x12>
 80042f4:	2000      	movs	r0, #0
 80042f6:	e007      	b.n	8004308 <__sfputs_r+0x22>
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	463a      	mov	r2, r7
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff ffda 	bl	80042b8 <__sfputc_r>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d1f3      	bne.n	80042f0 <__sfputs_r+0xa>
 8004308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800430c <_vfiprintf_r>:
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	460d      	mov	r5, r1
 8004312:	b09d      	sub	sp, #116	@ 0x74
 8004314:	4614      	mov	r4, r2
 8004316:	4698      	mov	r8, r3
 8004318:	4606      	mov	r6, r0
 800431a:	b118      	cbz	r0, 8004324 <_vfiprintf_r+0x18>
 800431c:	6a03      	ldr	r3, [r0, #32]
 800431e:	b90b      	cbnz	r3, 8004324 <_vfiprintf_r+0x18>
 8004320:	f7ff fc74 	bl	8003c0c <__sinit>
 8004324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004326:	07d9      	lsls	r1, r3, #31
 8004328:	d405      	bmi.n	8004336 <_vfiprintf_r+0x2a>
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	059a      	lsls	r2, r3, #22
 800432e:	d402      	bmi.n	8004336 <_vfiprintf_r+0x2a>
 8004330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004332:	f7ff feb8 	bl	80040a6 <__retarget_lock_acquire_recursive>
 8004336:	89ab      	ldrh	r3, [r5, #12]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	d501      	bpl.n	8004340 <_vfiprintf_r+0x34>
 800433c:	692b      	ldr	r3, [r5, #16]
 800433e:	b99b      	cbnz	r3, 8004368 <_vfiprintf_r+0x5c>
 8004340:	4629      	mov	r1, r5
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff fd8a 	bl	8003e5c <__swsetup_r>
 8004348:	b170      	cbz	r0, 8004368 <_vfiprintf_r+0x5c>
 800434a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800434c:	07dc      	lsls	r4, r3, #31
 800434e:	d504      	bpl.n	800435a <_vfiprintf_r+0x4e>
 8004350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004354:	b01d      	add	sp, #116	@ 0x74
 8004356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435a:	89ab      	ldrh	r3, [r5, #12]
 800435c:	0598      	lsls	r0, r3, #22
 800435e:	d4f7      	bmi.n	8004350 <_vfiprintf_r+0x44>
 8004360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004362:	f7ff fea1 	bl	80040a8 <__retarget_lock_release_recursive>
 8004366:	e7f3      	b.n	8004350 <_vfiprintf_r+0x44>
 8004368:	2300      	movs	r3, #0
 800436a:	9309      	str	r3, [sp, #36]	@ 0x24
 800436c:	2320      	movs	r3, #32
 800436e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004372:	f8cd 800c 	str.w	r8, [sp, #12]
 8004376:	2330      	movs	r3, #48	@ 0x30
 8004378:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004528 <_vfiprintf_r+0x21c>
 800437c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004380:	f04f 0901 	mov.w	r9, #1
 8004384:	4623      	mov	r3, r4
 8004386:	469a      	mov	sl, r3
 8004388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800438c:	b10a      	cbz	r2, 8004392 <_vfiprintf_r+0x86>
 800438e:	2a25      	cmp	r2, #37	@ 0x25
 8004390:	d1f9      	bne.n	8004386 <_vfiprintf_r+0x7a>
 8004392:	ebba 0b04 	subs.w	fp, sl, r4
 8004396:	d00b      	beq.n	80043b0 <_vfiprintf_r+0xa4>
 8004398:	465b      	mov	r3, fp
 800439a:	4622      	mov	r2, r4
 800439c:	4629      	mov	r1, r5
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff ffa1 	bl	80042e6 <__sfputs_r>
 80043a4:	3001      	adds	r0, #1
 80043a6:	f000 80a7 	beq.w	80044f8 <_vfiprintf_r+0x1ec>
 80043aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ac:	445a      	add	r2, fp
 80043ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80043b0:	f89a 3000 	ldrb.w	r3, [sl]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 809f 	beq.w	80044f8 <_vfiprintf_r+0x1ec>
 80043ba:	2300      	movs	r3, #0
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043c4:	f10a 0a01 	add.w	sl, sl, #1
 80043c8:	9304      	str	r3, [sp, #16]
 80043ca:	9307      	str	r3, [sp, #28]
 80043cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80043d2:	4654      	mov	r4, sl
 80043d4:	2205      	movs	r2, #5
 80043d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043da:	4853      	ldr	r0, [pc, #332]	@ (8004528 <_vfiprintf_r+0x21c>)
 80043dc:	f7fb fef8 	bl	80001d0 <memchr>
 80043e0:	9a04      	ldr	r2, [sp, #16]
 80043e2:	b9d8      	cbnz	r0, 800441c <_vfiprintf_r+0x110>
 80043e4:	06d1      	lsls	r1, r2, #27
 80043e6:	bf44      	itt	mi
 80043e8:	2320      	movmi	r3, #32
 80043ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043ee:	0713      	lsls	r3, r2, #28
 80043f0:	bf44      	itt	mi
 80043f2:	232b      	movmi	r3, #43	@ 0x2b
 80043f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043f8:	f89a 3000 	ldrb.w	r3, [sl]
 80043fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80043fe:	d015      	beq.n	800442c <_vfiprintf_r+0x120>
 8004400:	9a07      	ldr	r2, [sp, #28]
 8004402:	4654      	mov	r4, sl
 8004404:	2000      	movs	r0, #0
 8004406:	f04f 0c0a 	mov.w	ip, #10
 800440a:	4621      	mov	r1, r4
 800440c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004410:	3b30      	subs	r3, #48	@ 0x30
 8004412:	2b09      	cmp	r3, #9
 8004414:	d94b      	bls.n	80044ae <_vfiprintf_r+0x1a2>
 8004416:	b1b0      	cbz	r0, 8004446 <_vfiprintf_r+0x13a>
 8004418:	9207      	str	r2, [sp, #28]
 800441a:	e014      	b.n	8004446 <_vfiprintf_r+0x13a>
 800441c:	eba0 0308 	sub.w	r3, r0, r8
 8004420:	fa09 f303 	lsl.w	r3, r9, r3
 8004424:	4313      	orrs	r3, r2
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	46a2      	mov	sl, r4
 800442a:	e7d2      	b.n	80043d2 <_vfiprintf_r+0xc6>
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	1d19      	adds	r1, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	9103      	str	r1, [sp, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfbb      	ittet	lt
 8004438:	425b      	neglt	r3, r3
 800443a:	f042 0202 	orrlt.w	r2, r2, #2
 800443e:	9307      	strge	r3, [sp, #28]
 8004440:	9307      	strlt	r3, [sp, #28]
 8004442:	bfb8      	it	lt
 8004444:	9204      	strlt	r2, [sp, #16]
 8004446:	7823      	ldrb	r3, [r4, #0]
 8004448:	2b2e      	cmp	r3, #46	@ 0x2e
 800444a:	d10a      	bne.n	8004462 <_vfiprintf_r+0x156>
 800444c:	7863      	ldrb	r3, [r4, #1]
 800444e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004450:	d132      	bne.n	80044b8 <_vfiprintf_r+0x1ac>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	1d1a      	adds	r2, r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	9203      	str	r2, [sp, #12]
 800445a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800445e:	3402      	adds	r4, #2
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004538 <_vfiprintf_r+0x22c>
 8004466:	7821      	ldrb	r1, [r4, #0]
 8004468:	2203      	movs	r2, #3
 800446a:	4650      	mov	r0, sl
 800446c:	f7fb feb0 	bl	80001d0 <memchr>
 8004470:	b138      	cbz	r0, 8004482 <_vfiprintf_r+0x176>
 8004472:	9b04      	ldr	r3, [sp, #16]
 8004474:	eba0 000a 	sub.w	r0, r0, sl
 8004478:	2240      	movs	r2, #64	@ 0x40
 800447a:	4082      	lsls	r2, r0
 800447c:	4313      	orrs	r3, r2
 800447e:	3401      	adds	r4, #1
 8004480:	9304      	str	r3, [sp, #16]
 8004482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004486:	4829      	ldr	r0, [pc, #164]	@ (800452c <_vfiprintf_r+0x220>)
 8004488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800448c:	2206      	movs	r2, #6
 800448e:	f7fb fe9f 	bl	80001d0 <memchr>
 8004492:	2800      	cmp	r0, #0
 8004494:	d03f      	beq.n	8004516 <_vfiprintf_r+0x20a>
 8004496:	4b26      	ldr	r3, [pc, #152]	@ (8004530 <_vfiprintf_r+0x224>)
 8004498:	bb1b      	cbnz	r3, 80044e2 <_vfiprintf_r+0x1d6>
 800449a:	9b03      	ldr	r3, [sp, #12]
 800449c:	3307      	adds	r3, #7
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	3308      	adds	r3, #8
 80044a4:	9303      	str	r3, [sp, #12]
 80044a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044a8:	443b      	add	r3, r7
 80044aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ac:	e76a      	b.n	8004384 <_vfiprintf_r+0x78>
 80044ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80044b2:	460c      	mov	r4, r1
 80044b4:	2001      	movs	r0, #1
 80044b6:	e7a8      	b.n	800440a <_vfiprintf_r+0xfe>
 80044b8:	2300      	movs	r3, #0
 80044ba:	3401      	adds	r4, #1
 80044bc:	9305      	str	r3, [sp, #20]
 80044be:	4619      	mov	r1, r3
 80044c0:	f04f 0c0a 	mov.w	ip, #10
 80044c4:	4620      	mov	r0, r4
 80044c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ca:	3a30      	subs	r2, #48	@ 0x30
 80044cc:	2a09      	cmp	r2, #9
 80044ce:	d903      	bls.n	80044d8 <_vfiprintf_r+0x1cc>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0c6      	beq.n	8004462 <_vfiprintf_r+0x156>
 80044d4:	9105      	str	r1, [sp, #20]
 80044d6:	e7c4      	b.n	8004462 <_vfiprintf_r+0x156>
 80044d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80044dc:	4604      	mov	r4, r0
 80044de:	2301      	movs	r3, #1
 80044e0:	e7f0      	b.n	80044c4 <_vfiprintf_r+0x1b8>
 80044e2:	ab03      	add	r3, sp, #12
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <_vfiprintf_r+0x228>)
 80044ea:	a904      	add	r1, sp, #16
 80044ec:	4630      	mov	r0, r6
 80044ee:	f3af 8000 	nop.w
 80044f2:	4607      	mov	r7, r0
 80044f4:	1c78      	adds	r0, r7, #1
 80044f6:	d1d6      	bne.n	80044a6 <_vfiprintf_r+0x19a>
 80044f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	d405      	bmi.n	800450a <_vfiprintf_r+0x1fe>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	059a      	lsls	r2, r3, #22
 8004502:	d402      	bmi.n	800450a <_vfiprintf_r+0x1fe>
 8004504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004506:	f7ff fdcf 	bl	80040a8 <__retarget_lock_release_recursive>
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	065b      	lsls	r3, r3, #25
 800450e:	f53f af1f 	bmi.w	8004350 <_vfiprintf_r+0x44>
 8004512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004514:	e71e      	b.n	8004354 <_vfiprintf_r+0x48>
 8004516:	ab03      	add	r3, sp, #12
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	462a      	mov	r2, r5
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <_vfiprintf_r+0x228>)
 800451e:	a904      	add	r1, sp, #16
 8004520:	4630      	mov	r0, r6
 8004522:	f000 f879 	bl	8004618 <_printf_i>
 8004526:	e7e4      	b.n	80044f2 <_vfiprintf_r+0x1e6>
 8004528:	08004bb5 	.word	0x08004bb5
 800452c:	08004bbf 	.word	0x08004bbf
 8004530:	00000000 	.word	0x00000000
 8004534:	080042e7 	.word	0x080042e7
 8004538:	08004bbb 	.word	0x08004bbb

0800453c <_printf_common>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	4616      	mov	r6, r2
 8004542:	4698      	mov	r8, r3
 8004544:	688a      	ldr	r2, [r1, #8]
 8004546:	690b      	ldr	r3, [r1, #16]
 8004548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800454c:	4293      	cmp	r3, r2
 800454e:	bfb8      	it	lt
 8004550:	4613      	movlt	r3, r2
 8004552:	6033      	str	r3, [r6, #0]
 8004554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004558:	4607      	mov	r7, r0
 800455a:	460c      	mov	r4, r1
 800455c:	b10a      	cbz	r2, 8004562 <_printf_common+0x26>
 800455e:	3301      	adds	r3, #1
 8004560:	6033      	str	r3, [r6, #0]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	0699      	lsls	r1, r3, #26
 8004566:	bf42      	ittt	mi
 8004568:	6833      	ldrmi	r3, [r6, #0]
 800456a:	3302      	addmi	r3, #2
 800456c:	6033      	strmi	r3, [r6, #0]
 800456e:	6825      	ldr	r5, [r4, #0]
 8004570:	f015 0506 	ands.w	r5, r5, #6
 8004574:	d106      	bne.n	8004584 <_printf_common+0x48>
 8004576:	f104 0a19 	add.w	sl, r4, #25
 800457a:	68e3      	ldr	r3, [r4, #12]
 800457c:	6832      	ldr	r2, [r6, #0]
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	42ab      	cmp	r3, r5
 8004582:	dc26      	bgt.n	80045d2 <_printf_common+0x96>
 8004584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	3b00      	subs	r3, #0
 800458c:	bf18      	it	ne
 800458e:	2301      	movne	r3, #1
 8004590:	0692      	lsls	r2, r2, #26
 8004592:	d42b      	bmi.n	80045ec <_printf_common+0xb0>
 8004594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004598:	4641      	mov	r1, r8
 800459a:	4638      	mov	r0, r7
 800459c:	47c8      	blx	r9
 800459e:	3001      	adds	r0, #1
 80045a0:	d01e      	beq.n	80045e0 <_printf_common+0xa4>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	6922      	ldr	r2, [r4, #16]
 80045a6:	f003 0306 	and.w	r3, r3, #6
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	bf02      	ittt	eq
 80045ae:	68e5      	ldreq	r5, [r4, #12]
 80045b0:	6833      	ldreq	r3, [r6, #0]
 80045b2:	1aed      	subeq	r5, r5, r3
 80045b4:	68a3      	ldr	r3, [r4, #8]
 80045b6:	bf0c      	ite	eq
 80045b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045bc:	2500      	movne	r5, #0
 80045be:	4293      	cmp	r3, r2
 80045c0:	bfc4      	itt	gt
 80045c2:	1a9b      	subgt	r3, r3, r2
 80045c4:	18ed      	addgt	r5, r5, r3
 80045c6:	2600      	movs	r6, #0
 80045c8:	341a      	adds	r4, #26
 80045ca:	42b5      	cmp	r5, r6
 80045cc:	d11a      	bne.n	8004604 <_printf_common+0xc8>
 80045ce:	2000      	movs	r0, #0
 80045d0:	e008      	b.n	80045e4 <_printf_common+0xa8>
 80045d2:	2301      	movs	r3, #1
 80045d4:	4652      	mov	r2, sl
 80045d6:	4641      	mov	r1, r8
 80045d8:	4638      	mov	r0, r7
 80045da:	47c8      	blx	r9
 80045dc:	3001      	adds	r0, #1
 80045de:	d103      	bne.n	80045e8 <_printf_common+0xac>
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e8:	3501      	adds	r5, #1
 80045ea:	e7c6      	b.n	800457a <_printf_common+0x3e>
 80045ec:	18e1      	adds	r1, r4, r3
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	2030      	movs	r0, #48	@ 0x30
 80045f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045f6:	4422      	add	r2, r4
 80045f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004600:	3302      	adds	r3, #2
 8004602:	e7c7      	b.n	8004594 <_printf_common+0x58>
 8004604:	2301      	movs	r3, #1
 8004606:	4622      	mov	r2, r4
 8004608:	4641      	mov	r1, r8
 800460a:	4638      	mov	r0, r7
 800460c:	47c8      	blx	r9
 800460e:	3001      	adds	r0, #1
 8004610:	d0e6      	beq.n	80045e0 <_printf_common+0xa4>
 8004612:	3601      	adds	r6, #1
 8004614:	e7d9      	b.n	80045ca <_printf_common+0x8e>
	...

08004618 <_printf_i>:
 8004618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	7e0f      	ldrb	r7, [r1, #24]
 800461e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004620:	2f78      	cmp	r7, #120	@ 0x78
 8004622:	4691      	mov	r9, r2
 8004624:	4680      	mov	r8, r0
 8004626:	460c      	mov	r4, r1
 8004628:	469a      	mov	sl, r3
 800462a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800462e:	d807      	bhi.n	8004640 <_printf_i+0x28>
 8004630:	2f62      	cmp	r7, #98	@ 0x62
 8004632:	d80a      	bhi.n	800464a <_printf_i+0x32>
 8004634:	2f00      	cmp	r7, #0
 8004636:	f000 80d2 	beq.w	80047de <_printf_i+0x1c6>
 800463a:	2f58      	cmp	r7, #88	@ 0x58
 800463c:	f000 80b9 	beq.w	80047b2 <_printf_i+0x19a>
 8004640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004648:	e03a      	b.n	80046c0 <_printf_i+0xa8>
 800464a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800464e:	2b15      	cmp	r3, #21
 8004650:	d8f6      	bhi.n	8004640 <_printf_i+0x28>
 8004652:	a101      	add	r1, pc, #4	@ (adr r1, 8004658 <_printf_i+0x40>)
 8004654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004658:	080046b1 	.word	0x080046b1
 800465c:	080046c5 	.word	0x080046c5
 8004660:	08004641 	.word	0x08004641
 8004664:	08004641 	.word	0x08004641
 8004668:	08004641 	.word	0x08004641
 800466c:	08004641 	.word	0x08004641
 8004670:	080046c5 	.word	0x080046c5
 8004674:	08004641 	.word	0x08004641
 8004678:	08004641 	.word	0x08004641
 800467c:	08004641 	.word	0x08004641
 8004680:	08004641 	.word	0x08004641
 8004684:	080047c5 	.word	0x080047c5
 8004688:	080046ef 	.word	0x080046ef
 800468c:	0800477f 	.word	0x0800477f
 8004690:	08004641 	.word	0x08004641
 8004694:	08004641 	.word	0x08004641
 8004698:	080047e7 	.word	0x080047e7
 800469c:	08004641 	.word	0x08004641
 80046a0:	080046ef 	.word	0x080046ef
 80046a4:	08004641 	.word	0x08004641
 80046a8:	08004641 	.word	0x08004641
 80046ac:	08004787 	.word	0x08004787
 80046b0:	6833      	ldr	r3, [r6, #0]
 80046b2:	1d1a      	adds	r2, r3, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6032      	str	r2, [r6, #0]
 80046b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046c0:	2301      	movs	r3, #1
 80046c2:	e09d      	b.n	8004800 <_printf_i+0x1e8>
 80046c4:	6833      	ldr	r3, [r6, #0]
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	1d19      	adds	r1, r3, #4
 80046ca:	6031      	str	r1, [r6, #0]
 80046cc:	0606      	lsls	r6, r0, #24
 80046ce:	d501      	bpl.n	80046d4 <_printf_i+0xbc>
 80046d0:	681d      	ldr	r5, [r3, #0]
 80046d2:	e003      	b.n	80046dc <_printf_i+0xc4>
 80046d4:	0645      	lsls	r5, r0, #25
 80046d6:	d5fb      	bpl.n	80046d0 <_printf_i+0xb8>
 80046d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046dc:	2d00      	cmp	r5, #0
 80046de:	da03      	bge.n	80046e8 <_printf_i+0xd0>
 80046e0:	232d      	movs	r3, #45	@ 0x2d
 80046e2:	426d      	negs	r5, r5
 80046e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e8:	4859      	ldr	r0, [pc, #356]	@ (8004850 <_printf_i+0x238>)
 80046ea:	230a      	movs	r3, #10
 80046ec:	e011      	b.n	8004712 <_printf_i+0xfa>
 80046ee:	6821      	ldr	r1, [r4, #0]
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	0608      	lsls	r0, r1, #24
 80046f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046f8:	d402      	bmi.n	8004700 <_printf_i+0xe8>
 80046fa:	0649      	lsls	r1, r1, #25
 80046fc:	bf48      	it	mi
 80046fe:	b2ad      	uxthmi	r5, r5
 8004700:	2f6f      	cmp	r7, #111	@ 0x6f
 8004702:	4853      	ldr	r0, [pc, #332]	@ (8004850 <_printf_i+0x238>)
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	bf14      	ite	ne
 8004708:	230a      	movne	r3, #10
 800470a:	2308      	moveq	r3, #8
 800470c:	2100      	movs	r1, #0
 800470e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004712:	6866      	ldr	r6, [r4, #4]
 8004714:	60a6      	str	r6, [r4, #8]
 8004716:	2e00      	cmp	r6, #0
 8004718:	bfa2      	ittt	ge
 800471a:	6821      	ldrge	r1, [r4, #0]
 800471c:	f021 0104 	bicge.w	r1, r1, #4
 8004720:	6021      	strge	r1, [r4, #0]
 8004722:	b90d      	cbnz	r5, 8004728 <_printf_i+0x110>
 8004724:	2e00      	cmp	r6, #0
 8004726:	d04b      	beq.n	80047c0 <_printf_i+0x1a8>
 8004728:	4616      	mov	r6, r2
 800472a:	fbb5 f1f3 	udiv	r1, r5, r3
 800472e:	fb03 5711 	mls	r7, r3, r1, r5
 8004732:	5dc7      	ldrb	r7, [r0, r7]
 8004734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004738:	462f      	mov	r7, r5
 800473a:	42bb      	cmp	r3, r7
 800473c:	460d      	mov	r5, r1
 800473e:	d9f4      	bls.n	800472a <_printf_i+0x112>
 8004740:	2b08      	cmp	r3, #8
 8004742:	d10b      	bne.n	800475c <_printf_i+0x144>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07df      	lsls	r7, r3, #31
 8004748:	d508      	bpl.n	800475c <_printf_i+0x144>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	4299      	cmp	r1, r3
 8004750:	bfde      	ittt	le
 8004752:	2330      	movle	r3, #48	@ 0x30
 8004754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004758:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800475c:	1b92      	subs	r2, r2, r6
 800475e:	6122      	str	r2, [r4, #16]
 8004760:	f8cd a000 	str.w	sl, [sp]
 8004764:	464b      	mov	r3, r9
 8004766:	aa03      	add	r2, sp, #12
 8004768:	4621      	mov	r1, r4
 800476a:	4640      	mov	r0, r8
 800476c:	f7ff fee6 	bl	800453c <_printf_common>
 8004770:	3001      	adds	r0, #1
 8004772:	d14a      	bne.n	800480a <_printf_i+0x1f2>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004778:	b004      	add	sp, #16
 800477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f043 0320 	orr.w	r3, r3, #32
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	4833      	ldr	r0, [pc, #204]	@ (8004854 <_printf_i+0x23c>)
 8004788:	2778      	movs	r7, #120	@ 0x78
 800478a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	6831      	ldr	r1, [r6, #0]
 8004792:	061f      	lsls	r7, r3, #24
 8004794:	f851 5b04 	ldr.w	r5, [r1], #4
 8004798:	d402      	bmi.n	80047a0 <_printf_i+0x188>
 800479a:	065f      	lsls	r7, r3, #25
 800479c:	bf48      	it	mi
 800479e:	b2ad      	uxthmi	r5, r5
 80047a0:	6031      	str	r1, [r6, #0]
 80047a2:	07d9      	lsls	r1, r3, #31
 80047a4:	bf44      	itt	mi
 80047a6:	f043 0320 	orrmi.w	r3, r3, #32
 80047aa:	6023      	strmi	r3, [r4, #0]
 80047ac:	b11d      	cbz	r5, 80047b6 <_printf_i+0x19e>
 80047ae:	2310      	movs	r3, #16
 80047b0:	e7ac      	b.n	800470c <_printf_i+0xf4>
 80047b2:	4827      	ldr	r0, [pc, #156]	@ (8004850 <_printf_i+0x238>)
 80047b4:	e7e9      	b.n	800478a <_printf_i+0x172>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f023 0320 	bic.w	r3, r3, #32
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	e7f6      	b.n	80047ae <_printf_i+0x196>
 80047c0:	4616      	mov	r6, r2
 80047c2:	e7bd      	b.n	8004740 <_printf_i+0x128>
 80047c4:	6833      	ldr	r3, [r6, #0]
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	6961      	ldr	r1, [r4, #20]
 80047ca:	1d18      	adds	r0, r3, #4
 80047cc:	6030      	str	r0, [r6, #0]
 80047ce:	062e      	lsls	r6, r5, #24
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	d501      	bpl.n	80047d8 <_printf_i+0x1c0>
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	e002      	b.n	80047de <_printf_i+0x1c6>
 80047d8:	0668      	lsls	r0, r5, #25
 80047da:	d5fb      	bpl.n	80047d4 <_printf_i+0x1bc>
 80047dc:	8019      	strh	r1, [r3, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	4616      	mov	r6, r2
 80047e4:	e7bc      	b.n	8004760 <_printf_i+0x148>
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	6032      	str	r2, [r6, #0]
 80047ec:	681e      	ldr	r6, [r3, #0]
 80047ee:	6862      	ldr	r2, [r4, #4]
 80047f0:	2100      	movs	r1, #0
 80047f2:	4630      	mov	r0, r6
 80047f4:	f7fb fcec 	bl	80001d0 <memchr>
 80047f8:	b108      	cbz	r0, 80047fe <_printf_i+0x1e6>
 80047fa:	1b80      	subs	r0, r0, r6
 80047fc:	6060      	str	r0, [r4, #4]
 80047fe:	6863      	ldr	r3, [r4, #4]
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	2300      	movs	r3, #0
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004808:	e7aa      	b.n	8004760 <_printf_i+0x148>
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	4632      	mov	r2, r6
 800480e:	4649      	mov	r1, r9
 8004810:	4640      	mov	r0, r8
 8004812:	47d0      	blx	sl
 8004814:	3001      	adds	r0, #1
 8004816:	d0ad      	beq.n	8004774 <_printf_i+0x15c>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	079b      	lsls	r3, r3, #30
 800481c:	d413      	bmi.n	8004846 <_printf_i+0x22e>
 800481e:	68e0      	ldr	r0, [r4, #12]
 8004820:	9b03      	ldr	r3, [sp, #12]
 8004822:	4298      	cmp	r0, r3
 8004824:	bfb8      	it	lt
 8004826:	4618      	movlt	r0, r3
 8004828:	e7a6      	b.n	8004778 <_printf_i+0x160>
 800482a:	2301      	movs	r3, #1
 800482c:	4632      	mov	r2, r6
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d09d      	beq.n	8004774 <_printf_i+0x15c>
 8004838:	3501      	adds	r5, #1
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	9903      	ldr	r1, [sp, #12]
 800483e:	1a5b      	subs	r3, r3, r1
 8004840:	42ab      	cmp	r3, r5
 8004842:	dcf2      	bgt.n	800482a <_printf_i+0x212>
 8004844:	e7eb      	b.n	800481e <_printf_i+0x206>
 8004846:	2500      	movs	r5, #0
 8004848:	f104 0619 	add.w	r6, r4, #25
 800484c:	e7f5      	b.n	800483a <_printf_i+0x222>
 800484e:	bf00      	nop
 8004850:	08004bc6 	.word	0x08004bc6
 8004854:	08004bd7 	.word	0x08004bd7

08004858 <__sflush_r>:
 8004858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004860:	0716      	lsls	r6, r2, #28
 8004862:	4605      	mov	r5, r0
 8004864:	460c      	mov	r4, r1
 8004866:	d454      	bmi.n	8004912 <__sflush_r+0xba>
 8004868:	684b      	ldr	r3, [r1, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	dc02      	bgt.n	8004874 <__sflush_r+0x1c>
 800486e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	dd48      	ble.n	8004906 <__sflush_r+0xae>
 8004874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004876:	2e00      	cmp	r6, #0
 8004878:	d045      	beq.n	8004906 <__sflush_r+0xae>
 800487a:	2300      	movs	r3, #0
 800487c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004880:	682f      	ldr	r7, [r5, #0]
 8004882:	6a21      	ldr	r1, [r4, #32]
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	d030      	beq.n	80048ea <__sflush_r+0x92>
 8004888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	0759      	lsls	r1, r3, #29
 800488e:	d505      	bpl.n	800489c <__sflush_r+0x44>
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004896:	b10b      	cbz	r3, 800489c <__sflush_r+0x44>
 8004898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	2300      	movs	r3, #0
 800489e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048a0:	6a21      	ldr	r1, [r4, #32]
 80048a2:	4628      	mov	r0, r5
 80048a4:	47b0      	blx	r6
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	d106      	bne.n	80048ba <__sflush_r+0x62>
 80048ac:	6829      	ldr	r1, [r5, #0]
 80048ae:	291d      	cmp	r1, #29
 80048b0:	d82b      	bhi.n	800490a <__sflush_r+0xb2>
 80048b2:	4a2a      	ldr	r2, [pc, #168]	@ (800495c <__sflush_r+0x104>)
 80048b4:	410a      	asrs	r2, r1
 80048b6:	07d6      	lsls	r6, r2, #31
 80048b8:	d427      	bmi.n	800490a <__sflush_r+0xb2>
 80048ba:	2200      	movs	r2, #0
 80048bc:	6062      	str	r2, [r4, #4]
 80048be:	04d9      	lsls	r1, r3, #19
 80048c0:	6922      	ldr	r2, [r4, #16]
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	d504      	bpl.n	80048d0 <__sflush_r+0x78>
 80048c6:	1c42      	adds	r2, r0, #1
 80048c8:	d101      	bne.n	80048ce <__sflush_r+0x76>
 80048ca:	682b      	ldr	r3, [r5, #0]
 80048cc:	b903      	cbnz	r3, 80048d0 <__sflush_r+0x78>
 80048ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80048d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048d2:	602f      	str	r7, [r5, #0]
 80048d4:	b1b9      	cbz	r1, 8004906 <__sflush_r+0xae>
 80048d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048da:	4299      	cmp	r1, r3
 80048dc:	d002      	beq.n	80048e4 <__sflush_r+0x8c>
 80048de:	4628      	mov	r0, r5
 80048e0:	f7ff fbf2 	bl	80040c8 <_free_r>
 80048e4:	2300      	movs	r3, #0
 80048e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80048e8:	e00d      	b.n	8004906 <__sflush_r+0xae>
 80048ea:	2301      	movs	r3, #1
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b0      	blx	r6
 80048f0:	4602      	mov	r2, r0
 80048f2:	1c50      	adds	r0, r2, #1
 80048f4:	d1c9      	bne.n	800488a <__sflush_r+0x32>
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0c6      	beq.n	800488a <__sflush_r+0x32>
 80048fc:	2b1d      	cmp	r3, #29
 80048fe:	d001      	beq.n	8004904 <__sflush_r+0xac>
 8004900:	2b16      	cmp	r3, #22
 8004902:	d11e      	bne.n	8004942 <__sflush_r+0xea>
 8004904:	602f      	str	r7, [r5, #0]
 8004906:	2000      	movs	r0, #0
 8004908:	e022      	b.n	8004950 <__sflush_r+0xf8>
 800490a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490e:	b21b      	sxth	r3, r3
 8004910:	e01b      	b.n	800494a <__sflush_r+0xf2>
 8004912:	690f      	ldr	r7, [r1, #16]
 8004914:	2f00      	cmp	r7, #0
 8004916:	d0f6      	beq.n	8004906 <__sflush_r+0xae>
 8004918:	0793      	lsls	r3, r2, #30
 800491a:	680e      	ldr	r6, [r1, #0]
 800491c:	bf08      	it	eq
 800491e:	694b      	ldreq	r3, [r1, #20]
 8004920:	600f      	str	r7, [r1, #0]
 8004922:	bf18      	it	ne
 8004924:	2300      	movne	r3, #0
 8004926:	eba6 0807 	sub.w	r8, r6, r7
 800492a:	608b      	str	r3, [r1, #8]
 800492c:	f1b8 0f00 	cmp.w	r8, #0
 8004930:	dde9      	ble.n	8004906 <__sflush_r+0xae>
 8004932:	6a21      	ldr	r1, [r4, #32]
 8004934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004936:	4643      	mov	r3, r8
 8004938:	463a      	mov	r2, r7
 800493a:	4628      	mov	r0, r5
 800493c:	47b0      	blx	r6
 800493e:	2800      	cmp	r0, #0
 8004940:	dc08      	bgt.n	8004954 <__sflush_r+0xfc>
 8004942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004954:	4407      	add	r7, r0
 8004956:	eba8 0800 	sub.w	r8, r8, r0
 800495a:	e7e7      	b.n	800492c <__sflush_r+0xd4>
 800495c:	dfbffffe 	.word	0xdfbffffe

08004960 <_fflush_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	4605      	mov	r5, r0
 8004966:	460c      	mov	r4, r1
 8004968:	b913      	cbnz	r3, 8004970 <_fflush_r+0x10>
 800496a:	2500      	movs	r5, #0
 800496c:	4628      	mov	r0, r5
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	b118      	cbz	r0, 800497a <_fflush_r+0x1a>
 8004972:	6a03      	ldr	r3, [r0, #32]
 8004974:	b90b      	cbnz	r3, 800497a <_fflush_r+0x1a>
 8004976:	f7ff f949 	bl	8003c0c <__sinit>
 800497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f3      	beq.n	800496a <_fflush_r+0xa>
 8004982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004984:	07d0      	lsls	r0, r2, #31
 8004986:	d404      	bmi.n	8004992 <_fflush_r+0x32>
 8004988:	0599      	lsls	r1, r3, #22
 800498a:	d402      	bmi.n	8004992 <_fflush_r+0x32>
 800498c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800498e:	f7ff fb8a 	bl	80040a6 <__retarget_lock_acquire_recursive>
 8004992:	4628      	mov	r0, r5
 8004994:	4621      	mov	r1, r4
 8004996:	f7ff ff5f 	bl	8004858 <__sflush_r>
 800499a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800499c:	07da      	lsls	r2, r3, #31
 800499e:	4605      	mov	r5, r0
 80049a0:	d4e4      	bmi.n	800496c <_fflush_r+0xc>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	059b      	lsls	r3, r3, #22
 80049a6:	d4e1      	bmi.n	800496c <_fflush_r+0xc>
 80049a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049aa:	f7ff fb7d 	bl	80040a8 <__retarget_lock_release_recursive>
 80049ae:	e7dd      	b.n	800496c <_fflush_r+0xc>

080049b0 <__swhatbuf_r>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	460c      	mov	r4, r1
 80049b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b8:	2900      	cmp	r1, #0
 80049ba:	b096      	sub	sp, #88	@ 0x58
 80049bc:	4615      	mov	r5, r2
 80049be:	461e      	mov	r6, r3
 80049c0:	da0d      	bge.n	80049de <__swhatbuf_r+0x2e>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2340      	movne	r3, #64	@ 0x40
 80049d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80049d4:	2000      	movs	r0, #0
 80049d6:	6031      	str	r1, [r6, #0]
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	b016      	add	sp, #88	@ 0x58
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
 80049de:	466a      	mov	r2, sp
 80049e0:	f000 f848 	bl	8004a74 <_fstat_r>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	dbec      	blt.n	80049c2 <__swhatbuf_r+0x12>
 80049e8:	9901      	ldr	r1, [sp, #4]
 80049ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049f2:	4259      	negs	r1, r3
 80049f4:	4159      	adcs	r1, r3
 80049f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049fa:	e7eb      	b.n	80049d4 <__swhatbuf_r+0x24>

080049fc <__smakebuf_r>:
 80049fc:	898b      	ldrh	r3, [r1, #12]
 80049fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a00:	079d      	lsls	r5, r3, #30
 8004a02:	4606      	mov	r6, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	d507      	bpl.n	8004a18 <__smakebuf_r+0x1c>
 8004a08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	6123      	str	r3, [r4, #16]
 8004a10:	2301      	movs	r3, #1
 8004a12:	6163      	str	r3, [r4, #20]
 8004a14:	b003      	add	sp, #12
 8004a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a18:	ab01      	add	r3, sp, #4
 8004a1a:	466a      	mov	r2, sp
 8004a1c:	f7ff ffc8 	bl	80049b0 <__swhatbuf_r>
 8004a20:	9f00      	ldr	r7, [sp, #0]
 8004a22:	4605      	mov	r5, r0
 8004a24:	4639      	mov	r1, r7
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7ff fbba 	bl	80041a0 <_malloc_r>
 8004a2c:	b948      	cbnz	r0, 8004a42 <__smakebuf_r+0x46>
 8004a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a32:	059a      	lsls	r2, r3, #22
 8004a34:	d4ee      	bmi.n	8004a14 <__smakebuf_r+0x18>
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	e7e2      	b.n	8004a08 <__smakebuf_r+0xc>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	6020      	str	r0, [r4, #0]
 8004a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	9b01      	ldr	r3, [sp, #4]
 8004a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a52:	b15b      	cbz	r3, 8004a6c <__smakebuf_r+0x70>
 8004a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 f81d 	bl	8004a98 <_isatty_r>
 8004a5e:	b128      	cbz	r0, 8004a6c <__smakebuf_r+0x70>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	431d      	orrs	r5, r3
 8004a70:	81a5      	strh	r5, [r4, #12]
 8004a72:	e7cf      	b.n	8004a14 <__smakebuf_r+0x18>

08004a74 <_fstat_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	@ (8004a94 <_fstat_r+0x20>)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	f7fc f808 	bl	8000a96 <_fstat>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d102      	bne.n	8004a90 <_fstat_r+0x1c>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b103      	cbz	r3, 8004a90 <_fstat_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	20001580 	.word	0x20001580

08004a98 <_isatty_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d06      	ldr	r5, [pc, #24]	@ (8004ab4 <_isatty_r+0x1c>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fb fffc 	bl	8000aa0 <_isatty>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_isatty_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_isatty_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20001580 	.word	0x20001580

08004ab8 <_sbrk_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d06      	ldr	r5, [pc, #24]	@ (8004ad4 <_sbrk_r+0x1c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7fb fff0 	bl	8000aa8 <_sbrk>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_sbrk_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_sbrk_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20001580 	.word	0x20001580

08004ad8 <_init>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr

08004ae4 <_fini>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr
