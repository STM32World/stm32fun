
stm32world_trng.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800bc08  0800bc08  0000cc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdbc  0800bdbc  0000d158  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdbc  0800bdbc  0000cdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdc4  0800bdc4  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdc8  0800bdc8  0000cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800bdcc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d158  2**0
                  CONTENTS
 10 .bss          00000f7c  20000158  20000158  0000d158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010d4  200010d4  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a191  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004374  00000000  00000000  00027319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a6  00000000  00000000  0002cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aec  00000000  00000000  0002df46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d73a  00000000  00000000  00053a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d483f  00000000  00000000  0007116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001459ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a30  00000000  00000000  001459f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0014c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbf0 	.word	0x0800bbf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	0800bbf0 	.word	0x0800bbf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d002      	beq.n	8000578 <_write+0x18>
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d111      	bne.n	800059c <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <_write+0x48>)
 8000584:	f004 fbfe 	bl	8004d84 <HAL_UART_Transmit>
 8000588:	4603      	mov	r3, r0
 800058a:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <_write+0x36>
            return len;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	e004      	b.n	80005a0 <_write+0x40>
        else
            return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800059a:	e001      	b.n	80005a0 <_write+0x40>
    }
    return -1;
 800059c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000274 	.word	0x20000274

080005ac <do_adc>:

void do_adc(uint16_t *buf) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

    uint32_t seed = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < BUFFER_SIZE; ++i) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	e012      	b.n	80005e4 <do_adc+0x38>
        seed |= (uint32_t)(buf[i] & 0x01); // Use only the least significant bit
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
        if (i != BUFFER_SIZE - 1) seed = seed << 1;
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	2b1f      	cmp	r3, #31
 80005d6:	d002      	beq.n	80005de <do_adc+0x32>
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < BUFFER_SIZE; ++i) {
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	dde9      	ble.n	80005be <do_adc+0x12>
    }

    //printf("New seed: 0x%08lx\n", seed);
    srandom(seed);
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	f00a fa82 	bl	800aaf4 <srandom>
    last_adc = buf[0];
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	881a      	ldrh	r2, [r3, #0]
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <do_adc+0x5c>)
 80005f6:	801a      	strh	r2, [r3, #0]
    last_seed = seed;
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <do_adc+0x60>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6013      	str	r3, [r2, #0]

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000033c 	.word	0x2000033c
 800060c:	20000340 	.word	0x20000340

08000610 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    do_adc(&buffer[BUFFER_SIZE]);
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <HAL_ADC_ConvCpltCallback+0x18>)
 800061a:	f7ff ffc7 	bl	80005ac <do_adc>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200002fc 	.word	0x200002fc

0800062c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    do_adc(&buffer[0]);
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000636:	f7ff ffb9 	bl	80005ac <do_adc>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200002bc 	.word	0x200002bc

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	@ 0x2c
 800064c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fc81 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f871 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f9db 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 800065a:	f000 f9b9 	bl	80009d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800065e:	f000 f98d 	bl	800097c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000662:	f009 fd59 	bl	800a118 <MX_USB_DEVICE_Init>
  MX_RNG_Init();
 8000666:	f000 f923 	bl	80008b0 <MX_RNG_Init>
  MX_ADC3_Init();
 800066a:	f000 f8cf 	bl	800080c <MX_ADC3_Init>
  MX_TIM8_Init();
 800066e:	f000 f933 	bl	80008d8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  printf("\n\n\n\nStarting trng\n");
 8000672:	4826      	ldr	r0, [pc, #152]	@ (800070c <main+0xc4>)
 8000674:	f00a fbd4 	bl	800ae20 <puts>

  HAL_TIM_Base_Start_IT(&htim8);
 8000678:	4825      	ldr	r0, [pc, #148]	@ (8000710 <main+0xc8>)
 800067a:	f003 ff03 	bl	8004484 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&buffer, 2 * BUFFER_SIZE);
 800067e:	2240      	movs	r2, #64	@ 0x40
 8000680:	4924      	ldr	r1, [pc, #144]	@ (8000714 <main+0xcc>)
 8000682:	4825      	ldr	r0, [pc, #148]	@ (8000718 <main+0xd0>)
 8000684:	f000 fd40 	bl	8001108 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t loop_cnt = 0, now = 0, next_tick = 1100;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	f240 434c 	movw	r3, #1100	@ 0x44c
 8000694:	613b      	str	r3, [r7, #16]

  while (1) {

      now = uwTick;
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <main+0xd4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	60fb      	str	r3, [r7, #12]

      if (now >= next_tick) {
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d32f      	bcc.n	8000704 <main+0xbc>

          uint32_t r1;

          if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	481d      	ldr	r0, [pc, #116]	@ (8000720 <main+0xd8>)
 80006aa:	f003 fe45 	bl	8004338 <HAL_RNG_GenerateRandomNumber>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <main+0x72>
              printf("RNG Error\n");
 80006b4:	481b      	ldr	r0, [pc, #108]	@ (8000724 <main+0xdc>)
 80006b6:	f00a fbb3 	bl	800ae20 <puts>
          }

          // To get the full 32 bit we only use the lower 16 bit but use it twice - RAND_MAX is 0x7fffffff
          uint32_t r2 = (uint32_t)( ((random() & 0xffff) << 16) | ( random() & 0xffff) );
 80006ba:	f00a fa49 	bl	800ab50 <random>
 80006be:	4603      	mov	r3, r0
 80006c0:	041c      	lsls	r4, r3, #16
 80006c2:	f00a fa45 	bl	800ab50 <random>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4323      	orrs	r3, r4
 80006cc:	60bb      	str	r3, [r7, #8]

          printf("Tick %5lu loop=%7lu la=0x%04x ls=0x%08lx r1=0x%08lx r2=0x%08lx\n", now / 1000, loop_cnt, last_adc, last_seed, r1, r2);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <main+0xe0>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	0998      	lsrs	r0, r3, #6
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <main+0xe4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	461c      	mov	r4, r3
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <main+0xe8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	9102      	str	r1, [sp, #8]
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4623      	mov	r3, r4
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	4601      	mov	r1, r0
 80006f2:	4810      	ldr	r0, [pc, #64]	@ (8000734 <main+0xec>)
 80006f4:	f00a fb2c 	bl	800ad50 <iprintf>

          loop_cnt = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
          next_tick = now + 1000;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000702:	613b      	str	r3, [r7, #16]
      }

      ++loop_cnt;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	3301      	adds	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
      now = uwTick;
 800070a:	e7c4      	b.n	8000696 <main+0x4e>
 800070c:	0800bc08 	.word	0x0800bc08
 8000710:	2000022c 	.word	0x2000022c
 8000714:	200002bc 	.word	0x200002bc
 8000718:	20000174 	.word	0x20000174
 800071c:	20000348 	.word	0x20000348
 8000720:	2000021c 	.word	0x2000021c
 8000724:	0800bc1c 	.word	0x0800bc1c
 8000728:	10624dd3 	.word	0x10624dd3
 800072c:	2000033c 	.word	0x2000033c
 8000730:	20000340 	.word	0x20000340
 8000734:	0800bc28 	.word	0x0800bc28

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00a fc4a 	bl	800afe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	@ (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <SystemClock_Config+0xd0>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ac:	23a8      	movs	r3, #168	@ 0xa8
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b4:	2307      	movs	r3, #7
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f8fb 	bl	80039b8 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f958 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2105      	movs	r1, #5
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fb5c 	bl	8003ea8 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f6:	f000 f941 	bl	8000a7c <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000820:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <MX_ADC3_Init+0xa0>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800082a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000850:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000864:	2201      	movs	r2, #1
 8000866:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 800086c:	2201      	movs	r2, #1
 800086e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000872:	f000 fc05 	bl	8001080 <HAL_ADC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800087c:	f000 f8fe 	bl	8000a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_ADC3_Init+0x9c>)
 8000892:	f000 fd53 	bl	800133c <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800089c:	f000 f8ee 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000174 	.word	0x20000174
 80008ac:	40012200 	.word	0x40012200

080008b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_RNG_Init+0x20>)
 80008b6:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <MX_RNG_Init+0x24>)
 80008b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_RNG_Init+0x20>)
 80008bc:	f003 fd12 	bl	80042e4 <HAL_RNG_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008c6:	f000 f8d9 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000021c 	.word	0x2000021c
 80008d4:	50060800 	.word	0x50060800

080008d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_TIM8_Init+0x9c>)
 80008f6:	4a20      	ldr	r2, [pc, #128]	@ (8000978 <MX_TIM8_Init+0xa0>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2624;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_TIM8_Init+0x9c>)
 80008fc:	f44f 6224 	mov.w	r2, #2624	@ 0xa40
 8000900:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800090a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800090e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000922:	4814      	ldr	r0, [pc, #80]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000924:	f003 fd5e 	bl	80043e4 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800092e:	f000 f8a5 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM8_Init+0x9c>)
 8000940:	f003 ff00 	bl	8004744 <HAL_TIM_ConfigClockSource>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800094a:	f000 f897 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800094e:	2320      	movs	r3, #32
 8000950:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <MX_TIM8_Init+0x9c>)
 800095c:	f004 f932 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000966:	f000 f889 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000022c 	.word	0x2000022c
 8000978:	40010400 	.word	0x40010400

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART1_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000988:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f004 f996 	bl	8004ce4 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f85d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000274 	.word	0x20000274
 80009cc:	40011000 	.word	0x40011000

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_DMA_Init+0x3c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <MX_DMA_Init+0x3c>)
 80009e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_DMA_Init+0x3c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2038      	movs	r0, #56	@ 0x38
 80009f8:	f001 f81b 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009fc:	2038      	movs	r0, #56	@ 0x38
 80009fe:	f001 f834 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a16      	ldr	r2, [pc, #88]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_GPIO_Init+0x68>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d158      	bne.n	8000bac <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b32:	2301      	movs	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481d      	ldr	r0, [pc, #116]	@ (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b46:	f001 fb1b 	bl	8002180 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc4 <HAL_ADC_MspInit+0xec>)
 8000b4e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b56:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b6a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b72:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b7a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b90:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b92:	f000 ff85 	bl	8001aa0 <HAL_DMA_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b9c:	f7ff ff6e 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ba6:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	@ 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40012200 	.word	0x40012200
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	200001bc 	.word	0x200001bc
 8000bc4:	40026410 	.word	0x40026410

08000bc8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <HAL_RNG_MspInit+0x3c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10d      	bne.n	8000bf6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_RNG_MspInit+0x40>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be2:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <HAL_RNG_MspInit+0x40>)
 8000be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be8:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <HAL_RNG_MspInit+0x40>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	50060800 	.word	0x50060800
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <HAL_TIM_Base_MspInit+0x48>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d115      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_TIM_Base_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <HAL_TIM_Base_MspInit+0x4c>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_Base_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	202c      	movs	r0, #44	@ 0x2c
 8000c40:	f000 fef7 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000c44:	202c      	movs	r0, #44	@ 0x2c
 8000c46:	f000 ff10 	bl	8001a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010400 	.word	0x40010400
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12c      	bne.n	8000cd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <HAL_UART_MspInit+0x8c>)
 8000cd4:	f001 fa54 	bl	8002180 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	@ 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d42:	f000 f959 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000d52:	f003 fc07 	bl	8004564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000022c 	.word	0x2000022c

08000d60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <DMA2_Stream0_IRQHandler+0x10>)
 8000d66:	f000 ffa1 	bl	8001cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001bc 	.word	0x200001bc

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f001 fce1 	bl	8002740 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000082c 	.word	0x2000082c

08000d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_kill>:

int _kill(int pid, int sig)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da2:	f00a f96b 	bl	800b07c <__errno>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2216      	movs	r2, #22
 8000daa:	601a      	str	r2, [r3, #0]
  return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe7 	bl	8000d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dca:	bf00      	nop
 8000dcc:	e7fd      	b.n	8000dca <_exit+0x12>

08000dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e00a      	b.n	8000df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de0:	f3af 8000 	nop.w
 8000de4:	4601      	mov	r1, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf0      	blt.n	8000de0 <_read+0x12>
  }

  return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
  return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f00a f8ec 	bl	800b07c <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20020000 	.word	0x20020000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	20000344 	.word	0x20000344
 8000ed8:	200010d8 	.word	0x200010d8

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f04:	f7ff ffea 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	@ (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f00a f8ab 	bl	800b088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb89 	bl	8000648 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f44:	0800bdcc 	.word	0x0800bdcc
  ldr r2, =_sbss
 8000f48:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f4c:	200010d4 	.word	0x200010d4

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 fd4d 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	200f      	movs	r0, #15
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fd7e 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd65 	bl	8001a86 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fd4:	f000 fd2d 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000348 	.word	0x20000348

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000348 	.word	0x20000348

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e033      	b.n	80010fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fd1a 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d118      	bne.n	80010f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010c6:	f023 0302 	bic.w	r3, r3, #2
 80010ca:	f043 0202 	orr.w	r2, r3, #2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fa54 	bl	8001580 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ee:	e001      	b.n	80010f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start_DMA+0x1e>
 8001122:	2302      	movs	r3, #2
 8001124:	e0e9      	b.n	80012fa <HAL_ADC_Start_DMA+0x1f2>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d018      	beq.n	800116e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114c:	4b6d      	ldr	r3, [pc, #436]	@ (8001304 <HAL_ADC_Start_DMA+0x1fc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a6d      	ldr	r2, [pc, #436]	@ (8001308 <HAL_ADC_Start_DMA+0x200>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	3b01      	subs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117c:	d107      	bne.n	800118e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800118c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	f040 80a1 	bne.w	80012e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011dc:	d106      	bne.n	80011ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f023 0206 	bic.w	r2, r3, #6
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80011ea:	e002      	b.n	80011f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fa:	4b44      	ldr	r3, [pc, #272]	@ (800130c <HAL_ADC_Start_DMA+0x204>)
 80011fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001202:	4a43      	ldr	r2, [pc, #268]	@ (8001310 <HAL_ADC_Start_DMA+0x208>)
 8001204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120a:	4a42      	ldr	r2, [pc, #264]	@ (8001314 <HAL_ADC_Start_DMA+0x20c>)
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	4a41      	ldr	r2, [pc, #260]	@ (8001318 <HAL_ADC_Start_DMA+0x210>)
 8001214:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800121e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800122e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800123e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	334c      	adds	r3, #76	@ 0x4c
 800124a:	4619      	mov	r1, r3
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f000 fcd4 	bl	8001bfc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2b00      	cmp	r3, #0
 800125e:	d12a      	bne.n	80012b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2d      	ldr	r2, [pc, #180]	@ (800131c <HAL_ADC_Start_DMA+0x214>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d015      	beq.n	8001296 <HAL_ADC_Start_DMA+0x18e>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2c      	ldr	r2, [pc, #176]	@ (8001320 <HAL_ADC_Start_DMA+0x218>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d105      	bne.n	8001280 <HAL_ADC_Start_DMA+0x178>
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <HAL_ADC_Start_DMA+0x204>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <HAL_ADC_Start_DMA+0x21c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d136      	bne.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_ADC_Start_DMA+0x204>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d130      	bne.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d129      	bne.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e020      	b.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <HAL_ADC_Start_DMA+0x214>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d11b      	bne.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d114      	bne.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	e00b      	b.n	80012f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f043 0210 	orr.w	r2, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	f043 0201 	orr.w	r2, r3, #1
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000
 8001308:	431bde83 	.word	0x431bde83
 800130c:	40012300 	.word	0x40012300
 8001310:	08001779 	.word	0x08001779
 8001314:	08001833 	.word	0x08001833
 8001318:	0800184f 	.word	0x0800184f
 800131c:	40012000 	.word	0x40012000
 8001320:	40012100 	.word	0x40012100
 8001324:	40012200 	.word	0x40012200

08001328 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1c>
 8001354:	2302      	movs	r3, #2
 8001356:	e105      	b.n	8001564 <HAL_ADC_ConfigChannel+0x228>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d925      	bls.n	80013b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68d9      	ldr	r1, [r3, #12]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	3b1e      	subs	r3, #30
 800137e:	2207      	movs	r2, #7
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43da      	mvns	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	400a      	ands	r2, r1
 800138c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68d9      	ldr	r1, [r3, #12]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	4603      	mov	r3, r0
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4403      	add	r3, r0
 80013a6:	3b1e      	subs	r3, #30
 80013a8:	409a      	lsls	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	e022      	b.n	80013fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	2207      	movs	r2, #7
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	400a      	ands	r2, r1
 80013d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6919      	ldr	r1, [r3, #16]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4403      	add	r3, r0
 80013f0:	409a      	lsls	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d824      	bhi.n	800144c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3b05      	subs	r3, #5
 8001414:	221f      	movs	r2, #31
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	400a      	ands	r2, r1
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b05      	subs	r3, #5
 800143e:	fa00 f203 	lsl.w	r2, r0, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
 800144a:	e04c      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d824      	bhi.n	800149e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b23      	subs	r3, #35	@ 0x23
 8001466:	221f      	movs	r2, #31
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43da      	mvns	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b23      	subs	r3, #35	@ 0x23
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	631a      	str	r2, [r3, #48]	@ 0x30
 800149c:	e023      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	3b41      	subs	r3, #65	@ 0x41
 80014b0:	221f      	movs	r2, #31
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	400a      	ands	r2, r1
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b41      	subs	r3, #65	@ 0x41
 80014da:	fa00 f203 	lsl.w	r2, r0, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <HAL_ADC_ConfigChannel+0x234>)
 80014e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <HAL_ADC_ConfigChannel+0x238>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d109      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1cc>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b12      	cmp	r3, #18
 80014fa:	d105      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <HAL_ADC_ConfigChannel+0x238>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d123      	bne.n	800155a <HAL_ADC_ConfigChannel+0x21e>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d003      	beq.n	8001522 <HAL_ADC_ConfigChannel+0x1e6>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b11      	cmp	r3, #17
 8001520:	d11b      	bne.n	800155a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b10      	cmp	r3, #16
 8001534:	d111      	bne.n	800155a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_ADC_ConfigChannel+0x23c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_ADC_ConfigChannel+0x240>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9a      	lsrs	r2, r3, #18
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800154c:	e002      	b.n	8001554 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3b01      	subs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40012300 	.word	0x40012300
 8001574:	40012000 	.word	0x40012000
 8001578:	20000000 	.word	0x20000000
 800157c:	431bde83 	.word	0x431bde83

08001580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001588:	4b79      	ldr	r3, [pc, #484]	@ (8001770 <ADC_Init+0x1f0>)
 800158a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	021a      	lsls	r2, r3, #8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	4a58      	ldr	r2, [pc, #352]	@ (8001774 <ADC_Init+0x1f4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d022      	beq.n	800165e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	e00f      	b.n	800167e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800166c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800167c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0202 	bic.w	r2, r2, #2
 800168c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7e1b      	ldrb	r3, [r3, #24]
 8001698:	005a      	lsls	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6859      	ldr	r1, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	3b01      	subs	r3, #1
 80016d8:	035a      	lsls	r2, r3, #13
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e007      	b.n	80016f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	3b01      	subs	r3, #1
 8001710:	051a      	lsls	r2, r3, #20
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800174e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	029a      	lsls	r2, r3, #10
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40012300 	.word	0x40012300
 8001774:	0f000001 	.word	0x0f000001

08001778 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001784:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800178e:	2b00      	cmp	r3, #0
 8001790:	d13c      	bne.n	800180c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d12b      	bne.n	8001804 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d127      	bne.n	8001804 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d119      	bne.n	8001804 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0220 	bic.w	r2, r2, #32
 80017de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7fe ff03 	bl	8000610 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800180a:	e00e      	b.n	800182a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff fd85 	bl	8001328 <HAL_ADC_ErrorCallback>
}
 800181e:	e004      	b.n	800182a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7fe fef3 	bl	800062c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2240      	movs	r2, #64	@ 0x40
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f043 0204 	orr.w	r2, r3, #4
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f7ff fd5a 	bl	8001328 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	@ (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff3e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff31 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fab8 	bl	8001020 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e099      	b.n	8001bf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001adc:	e00f      	b.n	8001afe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ade:	f7ff fa9f 	bl	8001020 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d908      	bls.n	8001afe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e078      	b.n	8001bf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e8      	bne.n	8001ade <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <HAL_DMA_Init+0x158>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d107      	bne.n	8001b68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	4313      	orrs	r3, r2
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d117      	bne.n	8001bc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00e      	beq.n	8001bc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fa6f 	bl	8002088 <DMA_CheckFifoParam>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2240      	movs	r2, #64	@ 0x40
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e016      	b.n	8001bf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fa26 	bl	800201c <DMA_CalcBaseAndBitshift>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd8:	223f      	movs	r2, #63	@ 0x3f
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	f010803f 	.word	0xf010803f

08001bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_DMA_Start_IT+0x26>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e040      	b.n	8001ca4 <HAL_DMA_Start_IT+0xa8>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d12f      	bne.n	8001c96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f9b8 	bl	8001fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	223f      	movs	r2, #63	@ 0x3f
 8001c56:	409a      	lsls	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0216 	orr.w	r2, r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0208 	orr.w	r2, r2, #8
 8001c82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e005      	b.n	8001ca2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ef4 <HAL_DMA_IRQHandler+0x248>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8001ef8 <HAL_DMA_IRQHandler+0x24c>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	2208      	movs	r2, #8
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2204      	movs	r2, #4
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	2204      	movs	r2, #4
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	2210      	movs	r2, #16
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d043      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03c      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da6:	2210      	movs	r2, #16
 8001da8:	409a      	lsls	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d018      	beq.n	8001dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d108      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
 8001dda:	e01f      	b.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0208 	bic.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e20:	2220      	movs	r2, #32
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 808f 	beq.w	8001f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8087 	beq.w	8001f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e42:	2220      	movs	r2, #32
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d136      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0216 	bic.w	r2, r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_DMA_IRQHandler+0x1da>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	223f      	movs	r2, #63	@ 0x3f
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d07e      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
        }
        return;
 8001ec2:	e079      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01d      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d031      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e02c      	b.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d023      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e01e      	b.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10f      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0210 	bic.w	r2, r2, #16
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d032      	beq.n	8001fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2205      	movs	r2, #5
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d307      	bcc.n	8001f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f2      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x2cc>
 8001f92:	e000      	b.n	8001f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
 8001fb6:	e000      	b.n	8001fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fb8:	bf00      	nop
    }
  }
}
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b40      	cmp	r3, #64	@ 0x40
 8001fec:	d108      	bne.n	8002000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ffe:	e007      	b.n	8002010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3b10      	subs	r3, #16
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <DMA_CalcBaseAndBitshift+0x64>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002036:	4a13      	ldr	r2, [pc, #76]	@ (8002084 <DMA_CalcBaseAndBitshift+0x68>)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d909      	bls.n	800205e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	1d1a      	adds	r2, r3, #4
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	@ 0x58
 800205c:	e007      	b.n	800206e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	aaaaaaab 	.word	0xaaaaaaab
 8002084:	0800bcb0 	.word	0x0800bcb0

08002088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11f      	bne.n	80020e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d856      	bhi.n	8002156 <DMA_CheckFifoParam+0xce>
 80020a8:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <DMA_CheckFifoParam+0x28>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	080020d3 	.word	0x080020d3
 80020b8:	080020c1 	.word	0x080020c1
 80020bc:	08002157 	.word	0x08002157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d046      	beq.n	800215a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d0:	e043      	b.n	800215a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020da:	d140      	bne.n	800215e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e0:	e03d      	b.n	800215e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ea:	d121      	bne.n	8002130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d837      	bhi.n	8002162 <DMA_CheckFifoParam+0xda>
 80020f2:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <DMA_CheckFifoParam+0x70>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002109 	.word	0x08002109
 80020fc:	0800210f 	.word	0x0800210f
 8002100:	08002109 	.word	0x08002109
 8002104:	08002121 	.word	0x08002121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      break;
 800210c:	e030      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d025      	beq.n	8002166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211e:	e022      	b.n	8002166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800212e:	e01c      	b.n	800216a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d903      	bls.n	800213e <DMA_CheckFifoParam+0xb6>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d003      	beq.n	8002144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800213c:	e018      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
      break;
 8002142:	e015      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      break;
 8002154:	e00b      	b.n	800216e <DMA_CheckFifoParam+0xe6>
      break;
 8002156:	bf00      	nop
 8002158:	e00a      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
 800215c:	e008      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      break;
 800215e:	bf00      	nop
 8002160:	e006      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
 8002164:	e004      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e002      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      break;   
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
    }
  } 
  
  return status; 
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e16b      	b.n	8002474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 815a 	bne.w	800246e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d005      	beq.n	80021d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b03      	cmp	r3, #3
 800223e:	d017      	beq.n	8002270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d123      	bne.n	80022c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80b4 	beq.w	800246e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b60      	ldr	r3, [pc, #384]	@ (800248c <HAL_GPIO_Init+0x30c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a5f      	ldr	r2, [pc, #380]	@ (800248c <HAL_GPIO_Init+0x30c>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <HAL_GPIO_Init+0x30c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002322:	4a5b      	ldr	r2, [pc, #364]	@ (8002490 <HAL_GPIO_Init+0x310>)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_GPIO_Init+0x314>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a51      	ldr	r2, [pc, #324]	@ (8002498 <HAL_GPIO_Init+0x318>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x222>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a50      	ldr	r2, [pc, #320]	@ (800249c <HAL_GPIO_Init+0x31c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x21e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	@ (80024a0 <HAL_GPIO_Init+0x320>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x21a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4e      	ldr	r2, [pc, #312]	@ (80024a4 <HAL_GPIO_Init+0x324>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x216>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_GPIO_Init+0x328>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x212>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4c      	ldr	r2, [pc, #304]	@ (80024ac <HAL_GPIO_Init+0x32c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4b      	ldr	r2, [pc, #300]	@ (80024b0 <HAL_GPIO_Init+0x330>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x20a>
 8002386:	2307      	movs	r3, #7
 8002388:	e00e      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800238a:	2308      	movs	r3, #8
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800238e:	2306      	movs	r3, #6
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x228>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	@ (8002490 <HAL_GPIO_Init+0x310>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a32      	ldr	r2, [pc, #200]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241a:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243e:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_GPIO_Init+0x334>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae90 	bls.w	800219c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40021c00 	.word	0x40021c00
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e101      	b.n	80026ce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d106      	bne.n	80024ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f007 ffd1 	bl	800a48c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f8:	d102      	bne.n	8002500 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f910 	bl	800572a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7c1a      	ldrb	r2, [r3, #16]
 8002512:	f88d 2000 	strb.w	r2, [sp]
 8002516:	3304      	adds	r3, #4
 8002518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251a:	f002 ffef 	bl	80054fc <USB_CoreInit>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0ce      	b.n	80026ce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f003 f908 	bl	800574c <USB_SetCurrentMode>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0bf      	b.n	80026ce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e04a      	b.n	80025ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3315      	adds	r3, #21
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3314      	adds	r3, #20
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	b298      	uxth	r0, r3
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	332e      	adds	r3, #46	@ 0x2e
 8002590:	4602      	mov	r2, r0
 8002592:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3318      	adds	r3, #24
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	331c      	adds	r3, #28
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3320      	adds	r3, #32
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3324      	adds	r3, #36	@ 0x24
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	3301      	adds	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3af      	bcc.n	8002554 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	e044      	b.n	8002684 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	3301      	adds	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	429a      	cmp	r2, r3
 800268c:	d3b5      	bcc.n	80025fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7c1a      	ldrb	r2, [r3, #16]
 8002696:	f88d 2000 	strb.w	r2, [sp]
 800269a:	3304      	adds	r3, #4
 800269c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800269e:	f003 f8a1 	bl	80057e4 <USB_DevInit>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e00c      	b.n	80026ce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 f8eb 	bl	80068a2 <USB_DevDisconnect>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_PCD_Start+0x1c>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e022      	b.n	8002738 <HAL_PCD_Start+0x62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002712:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fff2 	bl	8005708 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f004 f899 	bl	8006860 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b08d      	sub	sp, #52	@ 0x34
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f957 	bl	8006a0a <USB_GetMode>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 848c 	bne.w	800307c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f004 f8bb 	bl	80068e4 <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8482 	beq.w	800307a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f8a8 	bl	80068e4 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f002 0202 	and.w	r2, r2, #2
 80027ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 f896 	bl	80068e4 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d161      	bne.n	8002886 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0210 	bic.w	r2, r2, #16
 80027d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	3304      	adds	r3, #4
 80027f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	0c5b      	lsrs	r3, r3, #17
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d124      	bne.n	8002848 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d035      	beq.n	8002876 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6a38      	ldr	r0, [r7, #32]
 800281e:	f003 fecd 	bl	80065bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282e:	441a      	add	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002840:	441a      	add	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	615a      	str	r2, [r3, #20]
 8002846:	e016      	b.n	8002876 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	0c5b      	lsrs	r3, r3, #17
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2b06      	cmp	r3, #6
 8002852:	d110      	bne.n	8002876 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800285a:	2208      	movs	r2, #8
 800285c:	4619      	mov	r1, r3
 800285e:	6a38      	ldr	r0, [r7, #32]
 8002860:	f003 feac 	bl	80065bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002870:	441a      	add	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0210 	orr.w	r2, r2, #16
 8002884:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f82a 	bl	80068e4 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002896:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800289a:	f040 80a7 	bne.w	80029ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 f82f 	bl	800690a <USB_ReadDevAllOutEpInterrupt>
 80028ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028ae:	e099      	b.n	80029e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808e 	beq.w	80029d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 f853 	bl	8006972 <USB_ReadDevOutEPInterrupt>
 80028cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2301      	movs	r3, #1
 80028e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fed1 	bl	8003694 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002908:	461a      	mov	r2, r3
 800290a:	2308      	movs	r3, #8
 800290c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800290e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 ffa7 	bl	8003864 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	2310      	movs	r3, #16
 8002930:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d030      	beq.n	800299e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	2b80      	cmp	r3, #128	@ 0x80
 8002946:	d109      	bne.n	800295c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800295c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d108      	bne.n	800298c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f007 fe86 	bl	800a698 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002998:	461a      	mov	r2, r3
 800299a:	2302      	movs	r3, #2
 800299c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b4:	461a      	mov	r2, r3
 80029b6:	2320      	movs	r3, #32
 80029b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	3301      	adds	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f47f af62 	bne.w	80028b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 ff77 	bl	80068e4 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a00:	f040 80db 	bne.w	8002bba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 ff98 	bl	800693e <USB_ReadDevAllInEpInterrupt>
 8002a0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a14:	e0cd      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80c2 	beq.w	8002ba6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 ffbe 	bl	80069ae <USB_ReadDevInEPInterrupt>
 8002a32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d057      	beq.n	8002aee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	2201      	movs	r2, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69f9      	ldr	r1, [r7, #28]
 8002a5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a5e:	4013      	ands	r3, r2
 8002a60:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2301      	movs	r3, #1
 8002a72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	799b      	ldrb	r3, [r3, #6]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d132      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3320      	adds	r3, #32
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4403      	add	r3, r0
 8002a9c:	331c      	adds	r3, #28
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4419      	add	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	3320      	adds	r3, #32
 8002ab2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d113      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x3a2>
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3324      	adds	r3, #36	@ 0x24
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ada:	461a      	mov	r2, r3
 8002adc:	2101      	movs	r1, #1
 8002ade:	f003 ffc5 	bl	8006a6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f007 fd50 	bl	800a58e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b04:	461a      	mov	r2, r3
 8002b06:	2308      	movs	r3, #8
 8002b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b20:	461a      	mov	r2, r3
 8002b22:	2310      	movs	r3, #16
 8002b24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2340      	movs	r3, #64	@ 0x40
 8002b40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d023      	beq.n	8002b94 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b4e:	6a38      	ldr	r0, [r7, #32]
 8002b50:	f002 ffac 	bl	8005aac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3310      	adds	r3, #16
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	78db      	ldrb	r3, [r3, #3]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d108      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f007 fd9d 	bl	800a6bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2302      	movs	r3, #2
 8002b92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fcea 	bl	800357a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	3301      	adds	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f af2e 	bne.w	8002a16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fe90 	bl	80068e4 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bce:	d122      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fed1 	bl	80039a0 <HAL_PCDEx_LPM_Callback>
 8002bfe:	e002      	b.n	8002c06 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f007 fd3b 	bl	800a67c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fe62 	bl	80068e4 <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c2a:	d112      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f007 fcf7 	bl	800a630 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c50:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fe44 	bl	80068e4 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c66:	f040 80b7 	bne.w	8002dd8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2110      	movs	r1, #16
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 ff11 	bl	8005aac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c8e:	e046      	b.n	8002d1e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ca2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002cbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cd6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d08:	0151      	lsls	r1, r2, #5
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d3b2      	bcc.n	8002c90 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d38:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7bdb      	ldrb	r3, [r3, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d56:	f043 030b 	orr.w	r3, r3, #11
 8002d5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d6c:	f043 030b 	orr.w	r3, r3, #11
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	e015      	b.n	8002da0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d86:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9a:	f043 030b 	orr.w	r3, r3, #11
 8002d9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002db2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f003 fe52 	bl	8006a6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fd81 	bl	80068e4 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dec:	d123      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fe17 	bl	8006a26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fece 	bl	8005b9e <USB_GetDevSpeed>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681c      	ldr	r4, [r3, #0]
 8002e0e:	f001 fa35 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8002e12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f002 fbd2 	bl	80055c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f007 fbdc 	bl	800a5de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fd52 	bl	80068e4 <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d10a      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f007 fbb9 	bl	800a5c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f002 0208 	and.w	r2, r2, #8
 8002e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 fd3d 	bl	80068e4 <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b80      	cmp	r3, #128	@ 0x80
 8002e72:	d123      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e84:	e014      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb0a 	bl	80034be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	3301      	adds	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	791b      	ldrb	r3, [r3, #4]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d3e4      	bcc.n	8002e86 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fd0f 	bl	80068e4 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed0:	d13c      	bne.n	8002f4c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	e02b      	b.n	8002f30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d115      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002efe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	da12      	bge.n	8002f2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3317      	adds	r3, #23
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 faca 	bl	80034be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	791b      	ldrb	r3, [r3, #4]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d3cd      	bcc.n	8002ed8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 fcc7 	bl	80068e4 <USB_ReadInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f60:	d156      	bne.n	8003010 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f66:	e045      	b.n	8002ff4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d12e      	bne.n	8002fee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da2b      	bge.n	8002fee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002fa2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d121      	bne.n	8002fee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fea:	6053      	str	r3, [r2, #4]
            break;
 8002fec:	e008      	b.n	8003000 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	791b      	ldrb	r3, [r3, #4]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d3b3      	bcc.n	8002f68 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800300e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fc65 	bl	80068e4 <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003024:	d10a      	bne.n	800303c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f007 fb5a 	bl	800a6e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800303a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fc4f 	bl	80068e4 <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d115      	bne.n	800307c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f007 fb4a 	bl	800a6fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	e000      	b.n	800307c <HAL_PCD_IRQHandler+0x93c>
      return;
 800307a:	bf00      	nop
    }
  }
}
 800307c:	3734      	adds	r7, #52	@ 0x34
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_SetAddress+0x1a>
 8003098:	2302      	movs	r3, #2
 800309a:	e012      	b.n	80030c2 <HAL_PCD_SetAddress+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fbae 	bl	8006814 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	4608      	mov	r0, r1
 80030d4:	4611      	mov	r1, r2
 80030d6:	461a      	mov	r2, r3
 80030d8:	4603      	mov	r3, r0
 80030da:	70fb      	strb	r3, [r7, #3]
 80030dc:	460b      	mov	r3, r1
 80030de:	803b      	strh	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da0f      	bge.n	8003110 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	3310      	adds	r3, #16
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	705a      	strb	r2, [r3, #1]
 800310e:	e00f      	b.n	8003130 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800313c:	883b      	ldrh	r3, [r7, #0]
 800313e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	78ba      	ldrb	r2, [r7, #2]
 800314a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800315e:	78bb      	ldrb	r3, [r7, #2]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d102      	bne.n	800316a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_PCD_EP_Open+0xae>
 8003174:	2302      	movs	r3, #2
 8003176:	e00e      	b.n	8003196 <HAL_PCD_EP_Open+0xcc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	4618      	mov	r0, r3
 8003188:	f002 fd2e 	bl	8005be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003194:	7afb      	ldrb	r3, [r7, #11]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0f      	bge.n	80031d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	3310      	adds	r3, #16
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
 80031d0:	e00f      	b.n	80031f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 020f 	and.w	r2, r3, #15
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_PCD_EP_Close+0x6e>
 8003208:	2302      	movs	r3, #2
 800320a:	e00e      	b.n	800322a <HAL_PCD_EP_Close+0x8c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68f9      	ldr	r1, [r7, #12]
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fd6c 	bl	8005cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	460b      	mov	r3, r1
 8003240:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003242:	7afb      	ldrb	r3, [r7, #11]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	3304      	adds	r3, #4
 800325a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003274:	7afb      	ldrb	r3, [r7, #11]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	b2da      	uxtb	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	799b      	ldrb	r3, [r3, #6]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d102      	bne.n	800328e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	799b      	ldrb	r3, [r3, #6]
 8003296:	461a      	mov	r2, r3
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	f002 fe09 	bl	8005eb0 <USB_EPStartXfer>

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	460b      	mov	r3, r1
 80032e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	7afb      	ldrb	r3, [r7, #11]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3310      	adds	r3, #16
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	b2da      	uxtb	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	799b      	ldrb	r3, [r3, #6]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	799b      	ldrb	r3, [r3, #6]
 800333a:	461a      	mov	r2, r3
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	f002 fdb7 	bl	8005eb0 <USB_EPStartXfer>

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	7912      	ldrb	r2, [r2, #4]
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e04f      	b.n	800340a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800336a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da0f      	bge.n	8003392 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	3310      	adds	r3, #16
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	705a      	strb	r2, [r3, #1]
 8003390:	e00d      	b.n	80033ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_PCD_EP_SetStall+0x82>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e01d      	b.n	800340a <HAL_PCD_EP_SetStall+0xbe>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 f945 	bl	800666c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7999      	ldrb	r1, [r3, #6]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033fa:	461a      	mov	r2, r3
 80033fc:	f003 fb36 	bl	8006a6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	7912      	ldrb	r2, [r2, #4]
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e042      	b.n	80034b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	da0f      	bge.n	8003458 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	3310      	adds	r3, #16
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	3304      	adds	r3, #4
 800344e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	705a      	strb	r2, [r3, #1]
 8003456:	e00f      	b.n	8003478 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 020f 	and.w	r2, r3, #15
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_PCD_EP_ClrStall+0x86>
 8003494:	2302      	movs	r3, #2
 8003496:	e00e      	b.n	80034b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 f94e 	bl	8006748 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da0c      	bge.n	80034ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	3310      	adds	r3, #16
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e00c      	b.n	8003506 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 020f 	and.w	r2, r3, #15
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f002 ff6d 	bl	80063ec <USB_EPStopXfer>
 8003512:	4603      	mov	r3, r0
 8003514:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003516:	7afb      	ldrb	r3, [r7, #11]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_PCD_EP_Flush+0x1a>
 8003536:	2302      	movs	r3, #2
 8003538:	e01b      	b.n	8003572 <HAL_PCD_EP_Flush+0x52>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da09      	bge.n	800355e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f002 faa8 	bl	8005aac <USB_FlushTxFifo>
 800355c:	e004      	b.n	8003568 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fad4 	bl	8005b10 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	@ 0x28
 800357e:	af02      	add	r7, sp, #8
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	3310      	adds	r3, #16
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d901      	bls.n	80035b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06b      	b.n	800368a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d902      	bls.n	80035ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3303      	adds	r3, #3
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d6:	e02a      	b.n	800362e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d902      	bls.n	80035f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3303      	adds	r3, #3
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68d9      	ldr	r1, [r3, #12]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4603      	mov	r3, r0
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f002 ff95 	bl	8006540 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	d809      	bhi.n	8003658 <PCD_WriteEmptyTxFifo+0xde>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364c:	429a      	cmp	r2, r3
 800364e:	d203      	bcs.n	8003658 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1bf      	bne.n	80035d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d811      	bhi.n	8003688 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	2201      	movs	r2, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	43db      	mvns	r3, r3
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003684:	4013      	ands	r3, r2
 8003686:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	333c      	adds	r3, #60	@ 0x3c
 80036ac:	3304      	adds	r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	799b      	ldrb	r3, [r3, #6]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d17b      	bne.n	80037c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a61      	ldr	r2, [pc, #388]	@ (800385c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	f240 80b9 	bls.w	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80b3 	beq.w	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f6:	461a      	mov	r2, r3
 80036f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fc:	6093      	str	r3, [r2, #8]
 80036fe:	e0a7      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	2320      	movs	r3, #32
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	e098      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 8093 	bne.w	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a4b      	ldr	r2, [pc, #300]	@ (800385c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d90f      	bls.n	8003752 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374e:	6093      	str	r3, [r2, #8]
 8003750:	e07e      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	0159      	lsls	r1, r3, #5
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	440b      	add	r3, r1
 8003774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d114      	bne.n	80037b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800379c:	461a      	mov	r2, r3
 800379e:	2101      	movs	r1, #1
 80037a0:	f003 f964 	bl	8006a6c <USB_EP0_OutStart>
 80037a4:	e006      	b.n	80037b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f006 fecc 	bl	800a558 <HAL_PCD_DataOutStageCallback>
 80037c0:	e046      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a26      	ldr	r2, [pc, #152]	@ (8003860 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d124      	bne.n	8003814 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e0:	461a      	mov	r2, r3
 80037e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	e032      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003800:	461a      	mov	r2, r3
 8003802:	2320      	movs	r3, #32
 8003804:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f006 fea3 	bl	800a558 <HAL_PCD_DataOutStageCallback>
 8003812:	e01d      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d114      	bne.n	8003844 <PCD_EP_OutXfrComplete_int+0x1b0>
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800383c:	461a      	mov	r2, r3
 800383e:	2100      	movs	r1, #0
 8003840:	f003 f914 	bl	8006a6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f006 fe84 	bl	800a558 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	4f54300a 	.word	0x4f54300a
 8003860:	4f54310a 	.word	0x4f54310a

08003864 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	333c      	adds	r3, #60	@ 0x3c
 800387c:	3304      	adds	r3, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a15      	ldr	r2, [pc, #84]	@ (80038ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d90e      	bls.n	80038b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f006 fe3b 	bl	800a534 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <PCD_EP_OutSetupPacket_int+0x88>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d90c      	bls.n	80038e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	799b      	ldrb	r3, [r3, #6]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d108      	bne.n	80038e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038d8:	461a      	mov	r2, r3
 80038da:	2101      	movs	r1, #1
 80038dc:	f003 f8c6 	bl	8006a6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	4f54300a 	.word	0x4f54300a

080038f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
 80038fc:	4613      	mov	r3, r2
 80038fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800390e:	883b      	ldrh	r3, [r7, #0]
 8003910:	0419      	lsls	r1, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	430a      	orrs	r2, r1
 800391a:	629a      	str	r2, [r3, #40]	@ 0x28
 800391c:	e028      	b.n	8003970 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	e00d      	b.n	800394e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	3340      	adds	r3, #64	@ 0x40
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4413      	add	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	3301      	adds	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	3b01      	subs	r3, #1
 8003954:	429a      	cmp	r2, r3
 8003956:	d3ec      	bcc.n	8003932 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003958:	883b      	ldrh	r3, [r7, #0]
 800395a:	0418      	lsls	r0, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	3b01      	subs	r3, #1
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4302      	orrs	r2, r0
 8003968:	3340      	adds	r3, #64	@ 0x40
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e267      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d075      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039d6:	4b88      	ldr	r3, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00c      	beq.n	80039fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d112      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b82      	ldr	r3, [pc, #520]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05b      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d157      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e242      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_OscConfig+0x74>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a75      	ldr	r2, [pc, #468]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x98>
 8003a36:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a50:	4b69      	ldr	r3, [pc, #420]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b66      	ldr	r3, [pc, #408]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a65      	ldr	r2, [pc, #404]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fd fad6 	bl	8001020 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fd fad2 	bl	8001020 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e207      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd fac2 	bl	8001020 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fabe 	bl	8001020 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1f3      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b51      	ldr	r3, [pc, #324]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ace:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b47      	ldr	r3, [pc, #284]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b44      	ldr	r3, [pc, #272]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c7      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4937      	ldr	r1, [pc, #220]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fd fa77 	bl	8001020 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fd fa73 	bl	8001020 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a8      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4925      	ldr	r1, [pc, #148]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b24      	ldr	r3, [pc, #144]	@ (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fa56 	bl	8001020 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fd fa52 	bl	8001020 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e187      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fa36 	bl	8001020 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7fd fa32 	bl	8001020 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e167      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x200>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fd fa1f 	bl	8001020 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e00e      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be6:	f7fd fa1b 	bl	8001020 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d907      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e150      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b88      	ldr	r3, [pc, #544]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ea      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8097 	beq.w	8003d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b81      	ldr	r3, [pc, #516]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b7d      	ldr	r3, [pc, #500]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4a7c      	ldr	r2, [pc, #496]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b77      	ldr	r3, [pc, #476]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b74      	ldr	r3, [pc, #464]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fd f9db 	bl	8001020 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fd f9d7 	bl	8001020 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e10c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b6a      	ldr	r3, [pc, #424]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2ea>
 8003c94:	4b64      	ldr	r3, [pc, #400]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c98:	4a63      	ldr	r2, [pc, #396]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x30c>
 8003caa:	4b5f      	ldr	r3, [pc, #380]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	4a5e      	ldr	r2, [pc, #376]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	4a5b      	ldr	r2, [pc, #364]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003cc4:	4b58      	ldr	r3, [pc, #352]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc8:	4a57      	ldr	r2, [pc, #348]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd0:	4b55      	ldr	r3, [pc, #340]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd4:	4a54      	ldr	r2, [pc, #336]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0304 	bic.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd f99c 	bl	8001020 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fd f998 	bl	8001020 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0cb      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b49      	ldr	r3, [pc, #292]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCC_OscConfig+0x334>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fd f986 	bl	8001020 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fd f982 	bl	8001020 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0b5      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b39      	ldr	r3, [pc, #228]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	4a38      	ldr	r2, [pc, #224]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a1 	beq.w	8003e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d56:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d05c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d141      	bne.n	8003dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd f956 	bl	8001020 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd f952 	bl	8001020 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e087      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	491b      	ldr	r1, [pc, #108]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fd f92b 	bl	8001020 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fd f927 	bl	8001020 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e05c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x416>
 8003dec:	e054      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fd f914 	bl	8001020 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd f910 	bl	8001020 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x444>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e038      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <HAL_RCC_OscConfig+0x4ec>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d028      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d121      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cc      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b68      	ldr	r3, [pc, #416]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b65      	ldr	r3, [pc, #404]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3b      	ldr	r3, [pc, #236]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e067      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b37      	ldr	r3, [pc, #220]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4934      	ldr	r1, [pc, #208]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fd f842 	bl	8001020 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd f83e 	bl	8001020 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b25      	ldr	r3, [pc, #148]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d20c      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	@ (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc ffa2 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	0800bc98 	.word	0x0800bc98
 800406c:	20000000 	.word	0x20000000
 8004070:	20000004 	.word	0x20000004

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b094      	sub	sp, #80	@ 0x50
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4b79      	ldr	r3, [pc, #484]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d00d      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004098:	2b08      	cmp	r3, #8
 800409a:	f200 80e1 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x34>
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e0db      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b73      	ldr	r3, [pc, #460]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 80040aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ac:	e0db      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4b72      	ldr	r3, [pc, #456]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b2:	e0d8      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040be:	4b6d      	ldr	r3, [pc, #436]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	2200      	movs	r2, #0
 80040d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	f04f 0000 	mov.w	r0, #0
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f8:	0150      	lsls	r0, r2, #5
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4621      	mov	r1, r4
 8004100:	1a51      	subs	r1, r2, r1
 8004102:	6139      	str	r1, [r7, #16]
 8004104:	4629      	mov	r1, r5
 8004106:	eb63 0301 	sbc.w	r3, r3, r1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004118:	4659      	mov	r1, fp
 800411a:	018b      	lsls	r3, r1, #6
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004122:	4651      	mov	r1, sl
 8004124:	018a      	lsls	r2, r1, #6
 8004126:	4651      	mov	r1, sl
 8004128:	ebb2 0801 	subs.w	r8, r2, r1
 800412c:	4659      	mov	r1, fp
 800412e:	eb63 0901 	sbc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	462b      	mov	r3, r5
 8004154:	eb49 0303 	adc.w	r3, r9, r3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004166:	4629      	mov	r1, r5
 8004168:	028b      	lsls	r3, r1, #10
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004170:	4621      	mov	r1, r4
 8004172:	028a      	lsls	r2, r1, #10
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800417e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004184:	f7fc f874 	bl	8000270 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004190:	e058      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	4618      	mov	r0, r3
 800419c:	4611      	mov	r1, r2
 800419e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	0159      	lsls	r1, r3, #5
 80041ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041be:	0150      	lsls	r0, r2, #5
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4641      	mov	r1, r8
 80041c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ca:	4649      	mov	r1, r9
 80041cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e4:	ebb2 040a 	subs.w	r4, r2, sl
 80041e8:	eb63 050b 	sbc.w	r5, r3, fp
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	464b      	mov	r3, r9
 8004208:	eb45 0303 	adc.w	r3, r5, r3
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800421a:	4629      	mov	r1, r5
 800421c:	028b      	lsls	r3, r1, #10
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004224:	4621      	mov	r1, r4
 8004226:	028a      	lsls	r2, r1, #10
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	f7fc f81a 	bl	8000270 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004254:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 8004262:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004268:	4618      	mov	r0, r3
 800426a:	3750      	adds	r7, #80	@ 0x50
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	0800bca8 	.word	0x0800bca8

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c0:	f7ff ffdc 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0b5b      	lsrs	r3, r3, #13
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	@ (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	0800bca8 	.word	0x0800bca8

080042e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e01c      	b.n	8004330 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	795b      	ldrb	r3, [r3, #5]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fc5e 	bl	8000bc8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0204 	orr.w	r2, r2, #4
 8004320:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_RNG_GenerateRandomNumber+0x1a>
 800434e:	2302      	movs	r3, #2
 8004350:	e044      	b.n	80043dc <HAL_RNG_GenerateRandomNumber+0xa4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	795b      	ldrb	r3, [r3, #5]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d133      	bne.n	80043ca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004368:	f7fc fe5a 	bl	8001020 <HAL_GetTick>
 800436c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800436e:	e018      	b.n	80043a2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004370:	f7fc fe56 	bl	8001020 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d911      	bls.n	80043a2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d00a      	beq.n	80043a2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e01c      	b.n	80043dc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d1df      	bne.n	8004370 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	715a      	strb	r2, [r3, #5]
 80043c8:	e004      	b.n	80043d4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	711a      	strb	r2, [r3, #4]

  return status;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e041      	b.n	800447a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fbfe 	bl	8000c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fa88 	bl	8004938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d001      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04e      	b.n	800453a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a23      	ldr	r2, [pc, #140]	@ (8004548 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c6:	d01d      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_TIM_Base_Start_IT+0xc8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004550 <HAL_TIM_Base_Start_IT+0xcc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <HAL_TIM_Base_Start_IT+0xd0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_TIM_Base_Start_IT+0xd4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a19      	ldr	r2, [pc, #100]	@ (800455c <HAL_TIM_Base_Start_IT+0xd8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_TIM_Base_Start_IT+0xdc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d010      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e007      	b.n	8004538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40001800 	.word	0x40001800

08004564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d020      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0202 	mvn.w	r2, #2
 8004598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9a3 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f995 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f9a6 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d020      	beq.n	8004614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01b      	beq.n	8004614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0204 	mvn.w	r2, #4
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f97d 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f96f 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f980 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0208 	mvn.w	r2, #8
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2204      	movs	r2, #4
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f957 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f949 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f95a 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0210 	mvn.w	r2, #16
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2208      	movs	r2, #8
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f931 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f923 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f934 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0201 	mvn.w	r2, #1
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f901 	bl	80048d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 faee 	bl	8004cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f905 	bl	8004922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fac0 	bl	8004cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIM_ConfigClockSource+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e0b4      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x186>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800477e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004798:	d03e      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xd4>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479e:	f200 8087 	bhi.w	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_TIM_ConfigClockSource+0x172>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ae:	d87f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d01a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xa6>
 80047b4:	2b70      	cmp	r3, #112	@ 0x70
 80047b6:	d87b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d050      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x11a>
 80047bc:	2b60      	cmp	r3, #96	@ 0x60
 80047be:	d877      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d03c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xfa>
 80047c4:	2b50      	cmp	r3, #80	@ 0x50
 80047c6:	d873      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d058      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x13a>
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d86f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d064      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	2b30      	cmp	r3, #48	@ 0x30
 80047d6:	d86b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d060      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d867      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d05a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e8:	e062      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047fa:	f000 f9c3 	bl	8004b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800480c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e04f      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004828:	f000 f9ac 	bl	8004b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e03c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	461a      	mov	r2, r3
 800484c:	f000 f920 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2150      	movs	r1, #80	@ 0x50
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f979 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 800485c:	e02c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800486a:	461a      	mov	r2, r3
 800486c:	f000 f93f 	bl	8004aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2160      	movs	r1, #96	@ 0x60
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f969 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 800487c:	e01c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f900 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2140      	movs	r1, #64	@ 0x40
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f959 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 f950 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80048ae:	e003      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a46      	ldr	r2, [pc, #280]	@ (8004a64 <TIM_Base_SetConfig+0x12c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d013      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004956:	d00f      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a43      	ldr	r2, [pc, #268]	@ (8004a68 <TIM_Base_SetConfig+0x130>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00b      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a42      	ldr	r2, [pc, #264]	@ (8004a6c <TIM_Base_SetConfig+0x134>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a41      	ldr	r2, [pc, #260]	@ (8004a70 <TIM_Base_SetConfig+0x138>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a40      	ldr	r2, [pc, #256]	@ (8004a74 <TIM_Base_SetConfig+0x13c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d108      	bne.n	800498a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a35      	ldr	r2, [pc, #212]	@ (8004a64 <TIM_Base_SetConfig+0x12c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02b      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004998:	d027      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a32      	ldr	r2, [pc, #200]	@ (8004a68 <TIM_Base_SetConfig+0x130>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d023      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a31      	ldr	r2, [pc, #196]	@ (8004a6c <TIM_Base_SetConfig+0x134>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a30      	ldr	r2, [pc, #192]	@ (8004a70 <TIM_Base_SetConfig+0x138>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01b      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a74 <TIM_Base_SetConfig+0x13c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d017      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <TIM_Base_SetConfig+0x140>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a7c <TIM_Base_SetConfig+0x144>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00f      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <TIM_Base_SetConfig+0x148>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004a84 <TIM_Base_SetConfig+0x14c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004a88 <TIM_Base_SetConfig+0x150>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a29      	ldr	r2, [pc, #164]	@ (8004a8c <TIM_Base_SetConfig+0x154>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a10      	ldr	r2, [pc, #64]	@ (8004a64 <TIM_Base_SetConfig+0x12c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_Base_SetConfig+0xf8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a12      	ldr	r2, [pc, #72]	@ (8004a74 <TIM_Base_SetConfig+0x13c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]
  }
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800
 8004a84:	40001800 	.word	0x40001800
 8004a88:	40001c00 	.word	0x40001c00
 8004a8c:	40002000 	.word	0x40002000

08004a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 030a 	bic.w	r3, r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f043 0307 	orr.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e05a      	b.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	@ (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d022      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c28:	d01d      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d018      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a17      	ldr	r2, [pc, #92]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10c      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40001800 	.word	0x40001800

08004cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fb ffa6 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	@ 0x24
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f973 	bl	8005014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	@ 0x28
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d175      	bne.n	8004e90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Transmit+0x2c>
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e06e      	b.n	8004e92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2221      	movs	r2, #33	@ 0x21
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc2:	f7fc f92d 	bl	8001020 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ddc:	d108      	bne.n	8004df0 <HAL_UART_Transmit+0x6c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	e003      	b.n	8004df8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df8:	e02e      	b.n	8004e58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	@ 0x80
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f848 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e03a      	b.n	8004e92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	3302      	adds	r3, #2
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	e007      	b.n	8004e4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	3301      	adds	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1cb      	bne.n	8004dfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2140      	movs	r1, #64	@ 0x40
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f814 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e006      	b.n	8004e92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eaa:	e03b      	b.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb2:	d037      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb4:	f7fc f8b4 	bl	8001020 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d302      	bcc.n	8004eca <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e03a      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d023      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b80      	cmp	r3, #128	@ 0x80
 8004ee0:	d020      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b40      	cmp	r3, #64	@ 0x40
 8004ee6:	d01d      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d116      	bne.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f81d 	bl	8004f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2208      	movs	r2, #8
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e00f      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d0b4      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b095      	sub	sp, #84	@ 0x54
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f74:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e5      	bne.n	8004f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d119      	bne.n	8004ff8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f023 0310 	bic.w	r3, r3, #16
 8004fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe4:	61ba      	str	r2, [r7, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005006:	bf00      	nop
 8005008:	3754      	adds	r7, #84	@ 0x54
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005018:	b0c0      	sub	sp, #256	@ 0x100
 800501a:	af00      	add	r7, sp, #0
 800501c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	ea40 0301 	orr.w	r3, r0, r1
 800503c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	431a      	orrs	r2, r3
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	431a      	orrs	r2, r3
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800506c:	f021 010c 	bic.w	r1, r1, #12
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800507a:	430b      	orrs	r3, r1
 800507c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	6999      	ldr	r1, [r3, #24]
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	ea40 0301 	orr.w	r3, r0, r1
 800509a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b8f      	ldr	r3, [pc, #572]	@ (80052e0 <UART_SetConfig+0x2cc>)
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d005      	beq.n	80050b4 <UART_SetConfig+0xa0>
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8d      	ldr	r3, [pc, #564]	@ (80052e4 <UART_SetConfig+0x2d0>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d104      	bne.n	80050be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7ff f902 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 80050b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050bc:	e003      	b.n	80050c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7ff f8e9 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 80050c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d0:	f040 810c 	bne.w	80052ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ee:	415b      	adcs	r3, r3
 80050f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050f6:	4621      	mov	r1, r4
 80050f8:	eb12 0801 	adds.w	r8, r2, r1
 80050fc:	4629      	mov	r1, r5
 80050fe:	eb43 0901 	adc.w	r9, r3, r1
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005116:	4690      	mov	r8, r2
 8005118:	4699      	mov	r9, r3
 800511a:	4623      	mov	r3, r4
 800511c:	eb18 0303 	adds.w	r3, r8, r3
 8005120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005124:	462b      	mov	r3, r5
 8005126:	eb49 0303 	adc.w	r3, r9, r3
 800512a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800513a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800513e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005142:	460b      	mov	r3, r1
 8005144:	18db      	adds	r3, r3, r3
 8005146:	653b      	str	r3, [r7, #80]	@ 0x50
 8005148:	4613      	mov	r3, r2
 800514a:	eb42 0303 	adc.w	r3, r2, r3
 800514e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005158:	f7fb f88a 	bl	8000270 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4b61      	ldr	r3, [pc, #388]	@ (80052e8 <UART_SetConfig+0x2d4>)
 8005162:	fba3 2302 	umull	r2, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	011c      	lsls	r4, r3, #4
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005174:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	1891      	adds	r1, r2, r2
 8005182:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005184:	415b      	adcs	r3, r3
 8005186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800518c:	4641      	mov	r1, r8
 800518e:	eb12 0a01 	adds.w	sl, r2, r1
 8005192:	4649      	mov	r1, r9
 8005194:	eb43 0b01 	adc.w	fp, r3, r1
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ac:	4692      	mov	sl, r2
 80051ae:	469b      	mov	fp, r3
 80051b0:	4643      	mov	r3, r8
 80051b2:	eb1a 0303 	adds.w	r3, sl, r3
 80051b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ba:	464b      	mov	r3, r9
 80051bc:	eb4b 0303 	adc.w	r3, fp, r3
 80051c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051d8:	460b      	mov	r3, r1
 80051da:	18db      	adds	r3, r3, r3
 80051dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051de:	4613      	mov	r3, r2
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ee:	f7fb f83f 	bl	8000270 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <UART_SetConfig+0x2d4>)
 80051fa:	fba3 2301 	umull	r2, r3, r3, r1
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2264      	movs	r2, #100	@ 0x64
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	1acb      	subs	r3, r1, r3
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800520e:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <UART_SetConfig+0x2d4>)
 8005210:	fba3 2302 	umull	r2, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800521c:	441c      	add	r4, r3
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005228:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800522c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	1891      	adds	r1, r2, r2
 8005236:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005238:	415b      	adcs	r3, r3
 800523a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800523c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005240:	4641      	mov	r1, r8
 8005242:	1851      	adds	r1, r2, r1
 8005244:	6339      	str	r1, [r7, #48]	@ 0x30
 8005246:	4649      	mov	r1, r9
 8005248:	414b      	adcs	r3, r1
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005258:	4659      	mov	r1, fp
 800525a:	00cb      	lsls	r3, r1, #3
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005262:	4651      	mov	r1, sl
 8005264:	00ca      	lsls	r2, r1, #3
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	4603      	mov	r3, r0
 800526c:	4642      	mov	r2, r8
 800526e:	189b      	adds	r3, r3, r2
 8005270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005274:	464b      	mov	r3, r9
 8005276:	460a      	mov	r2, r1
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800528c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005294:	460b      	mov	r3, r1
 8005296:	18db      	adds	r3, r3, r3
 8005298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529a:	4613      	mov	r3, r2
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052aa:	f7fa ffe1 	bl	8000270 <__aeabi_uldivmod>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <UART_SetConfig+0x2d4>)
 80052b4:	fba3 1302 	umull	r1, r3, r3, r2
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	2164      	movs	r1, #100	@ 0x64
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3332      	adds	r3, #50	@ 0x32
 80052c6:	4a08      	ldr	r2, [pc, #32]	@ (80052e8 <UART_SetConfig+0x2d4>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	f003 0207 	and.w	r2, r3, #7
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4422      	add	r2, r4
 80052da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052dc:	e106      	b.n	80054ec <UART_SetConfig+0x4d8>
 80052de:	bf00      	nop
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052fe:	4642      	mov	r2, r8
 8005300:	464b      	mov	r3, r9
 8005302:	1891      	adds	r1, r2, r2
 8005304:	6239      	str	r1, [r7, #32]
 8005306:	415b      	adcs	r3, r3
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
 800530a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800530e:	4641      	mov	r1, r8
 8005310:	1854      	adds	r4, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb43 0501 	adc.w	r5, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005334:	464b      	mov	r3, r9
 8005336:	eb45 0303 	adc.w	r3, r5, r3
 800533a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800534a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800535a:	4629      	mov	r1, r5
 800535c:	008b      	lsls	r3, r1, #2
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005364:	4621      	mov	r1, r4
 8005366:	008a      	lsls	r2, r1, #2
 8005368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800536c:	f7fa ff80 	bl	8000270 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b60      	ldr	r3, [pc, #384]	@ (80054f8 <UART_SetConfig+0x4e4>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	011c      	lsls	r4, r3, #4
 800537e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005388:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800538c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	61b9      	str	r1, [r7, #24]
 8005398:	415b      	adcs	r3, r3
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a0:	4641      	mov	r1, r8
 80053a2:	1851      	adds	r1, r2, r1
 80053a4:	6139      	str	r1, [r7, #16]
 80053a6:	4649      	mov	r1, r9
 80053a8:	414b      	adcs	r3, r1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b8:	4659      	mov	r1, fp
 80053ba:	00cb      	lsls	r3, r1, #3
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c2:	4651      	mov	r1, sl
 80053c4:	00ca      	lsls	r2, r1, #3
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	4642      	mov	r2, r8
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d4:	464b      	mov	r3, r9
 80053d6:	460a      	mov	r2, r1
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053f8:	4649      	mov	r1, r9
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	4641      	mov	r1, r8
 80053fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005402:	4641      	mov	r1, r8
 8005404:	008a      	lsls	r2, r1, #2
 8005406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800540a:	f7fa ff31 	bl	8000270 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4611      	mov	r1, r2
 8005414:	4b38      	ldr	r3, [pc, #224]	@ (80054f8 <UART_SetConfig+0x4e4>)
 8005416:	fba3 2301 	umull	r2, r3, r3, r1
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2264      	movs	r2, #100	@ 0x64
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	1acb      	subs	r3, r1, r3
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	3332      	adds	r3, #50	@ 0x32
 8005428:	4a33      	ldr	r2, [pc, #204]	@ (80054f8 <UART_SetConfig+0x4e4>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005434:	441c      	add	r4, r3
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	673b      	str	r3, [r7, #112]	@ 0x70
 800543e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	415b      	adcs	r3, r3
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005454:	4641      	mov	r1, r8
 8005456:	1851      	adds	r1, r2, r1
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	4649      	mov	r1, r9
 800545c:	414b      	adcs	r3, r1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800546c:	4659      	mov	r1, fp
 800546e:	00cb      	lsls	r3, r1, #3
 8005470:	4651      	mov	r1, sl
 8005472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005476:	4651      	mov	r1, sl
 8005478:	00ca      	lsls	r2, r1, #3
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	4603      	mov	r3, r0
 8005480:	4642      	mov	r2, r8
 8005482:	189b      	adds	r3, r3, r2
 8005484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005486:	464b      	mov	r3, r9
 8005488:	460a      	mov	r2, r1
 800548a:	eb42 0303 	adc.w	r3, r2, r3
 800548e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	663b      	str	r3, [r7, #96]	@ 0x60
 800549a:	667a      	str	r2, [r7, #100]	@ 0x64
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054a8:	4649      	mov	r1, r9
 80054aa:	008b      	lsls	r3, r1, #2
 80054ac:	4641      	mov	r1, r8
 80054ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b2:	4641      	mov	r1, r8
 80054b4:	008a      	lsls	r2, r1, #2
 80054b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054ba:	f7fa fed9 	bl	8000270 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <UART_SetConfig+0x4e4>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	@ 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	3332      	adds	r3, #50	@ 0x32
 80054d6:	4a08      	ldr	r2, [pc, #32]	@ (80054f8 <UART_SetConfig+0x4e4>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4422      	add	r2, r4
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f8:	51eb851f 	.word	0x51eb851f

080054fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fc:	b084      	sub	sp, #16
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	f107 001c 	add.w	r0, r7, #28
 800550a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800550e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005512:	2b01      	cmp	r3, #1
 8005514:	d123      	bne.n	800555e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800552a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800553e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fae8 	bl	8006b28 <USB_CoreReset>
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e01b      	b.n	8005596 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fadc 	bl	8006b28 <USB_CoreReset>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005574:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38
 8005588:	e005      	b.n	8005596 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005596:	7fbb      	ldrb	r3, [r7, #30]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10b      	bne.n	80055b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f043 0206 	orr.w	r2, r3, #6
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr

080055c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d165      	bne.n	80056a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a41      	ldr	r2, [pc, #260]	@ (80056e0 <USB_SetTurnaroundTime+0x11c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d906      	bls.n	80055ee <USB_SetTurnaroundTime+0x2a>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a40      	ldr	r2, [pc, #256]	@ (80056e4 <USB_SetTurnaroundTime+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d202      	bcs.n	80055ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055e8:	230f      	movs	r3, #15
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e062      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a3c      	ldr	r2, [pc, #240]	@ (80056e4 <USB_SetTurnaroundTime+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d306      	bcc.n	8005604 <USB_SetTurnaroundTime+0x40>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a3b      	ldr	r2, [pc, #236]	@ (80056e8 <USB_SetTurnaroundTime+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d202      	bcs.n	8005604 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055fe:	230e      	movs	r3, #14
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e057      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4a38      	ldr	r2, [pc, #224]	@ (80056e8 <USB_SetTurnaroundTime+0x124>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d306      	bcc.n	800561a <USB_SetTurnaroundTime+0x56>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a37      	ldr	r2, [pc, #220]	@ (80056ec <USB_SetTurnaroundTime+0x128>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d202      	bcs.n	800561a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005614:	230d      	movs	r3, #13
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e04c      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a33      	ldr	r2, [pc, #204]	@ (80056ec <USB_SetTurnaroundTime+0x128>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d306      	bcc.n	8005630 <USB_SetTurnaroundTime+0x6c>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4a32      	ldr	r2, [pc, #200]	@ (80056f0 <USB_SetTurnaroundTime+0x12c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d802      	bhi.n	8005630 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800562a:	230c      	movs	r3, #12
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	e041      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a2f      	ldr	r2, [pc, #188]	@ (80056f0 <USB_SetTurnaroundTime+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d906      	bls.n	8005646 <USB_SetTurnaroundTime+0x82>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <USB_SetTurnaroundTime+0x130>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d802      	bhi.n	8005646 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005640:	230b      	movs	r3, #11
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e036      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <USB_SetTurnaroundTime+0x130>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d906      	bls.n	800565c <USB_SetTurnaroundTime+0x98>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4a29      	ldr	r2, [pc, #164]	@ (80056f8 <USB_SetTurnaroundTime+0x134>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d802      	bhi.n	800565c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005656:	230a      	movs	r3, #10
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e02b      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <USB_SetTurnaroundTime+0x134>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d906      	bls.n	8005672 <USB_SetTurnaroundTime+0xae>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a25      	ldr	r2, [pc, #148]	@ (80056fc <USB_SetTurnaroundTime+0x138>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d202      	bcs.n	8005672 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800566c:	2309      	movs	r3, #9
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e020      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4a21      	ldr	r2, [pc, #132]	@ (80056fc <USB_SetTurnaroundTime+0x138>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d306      	bcc.n	8005688 <USB_SetTurnaroundTime+0xc4>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4a20      	ldr	r2, [pc, #128]	@ (8005700 <USB_SetTurnaroundTime+0x13c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d802      	bhi.n	8005688 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005682:	2308      	movs	r3, #8
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e015      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <USB_SetTurnaroundTime+0x13c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d906      	bls.n	800569e <USB_SetTurnaroundTime+0xda>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <USB_SetTurnaroundTime+0x140>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d202      	bcs.n	800569e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005698:	2307      	movs	r3, #7
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e00a      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800569e:	2306      	movs	r3, #6
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e007      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056aa:	2309      	movs	r3, #9
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e001      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056b0:	2309      	movs	r3, #9
 80056b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	00d8acbf 	.word	0x00d8acbf
 80056e4:	00e4e1c0 	.word	0x00e4e1c0
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	01067380 	.word	0x01067380
 80056f0:	011a499f 	.word	0x011a499f
 80056f4:	01312cff 	.word	0x01312cff
 80056f8:	014ca43f 	.word	0x014ca43f
 80056fc:	016e3600 	.word	0x016e3600
 8005700:	01a6ab1f 	.word	0x01a6ab1f
 8005704:	01e84800 	.word	0x01e84800

08005708 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d115      	bne.n	800579a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800577a:	200a      	movs	r0, #10
 800577c:	f7fb fc5c 	bl	8001038 <HAL_Delay>
      ms += 10U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	330a      	adds	r3, #10
 8005784:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 f93f 	bl	8006a0a <USB_GetMode>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d01e      	beq.n	80057d0 <USB_SetCurrentMode+0x84>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2bc7      	cmp	r3, #199	@ 0xc7
 8005796:	d9f0      	bls.n	800577a <USB_SetCurrentMode+0x2e>
 8005798:	e01a      	b.n	80057d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d115      	bne.n	80057cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057ac:	200a      	movs	r0, #10
 80057ae:	f7fb fc43 	bl	8001038 <HAL_Delay>
      ms += 10U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	330a      	adds	r3, #10
 80057b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f926 	bl	8006a0a <USB_GetMode>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <USB_SetCurrentMode+0x84>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80057c8:	d9f0      	bls.n	80057ac <USB_SetCurrentMode+0x60>
 80057ca:	e001      	b.n	80057d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e005      	b.n	80057dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80057d4:	d101      	bne.n	80057da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057e4:	b084      	sub	sp, #16
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e009      	b.n	8005818 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3340      	adds	r3, #64	@ 0x40
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b0e      	cmp	r3, #14
 800581c:	d9f2      	bls.n	8005804 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800581e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11c      	bne.n	8005860 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
 800585e:	e00b      	b.n	8005878 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800587e:	461a      	mov	r2, r3
 8005880:	2300      	movs	r3, #0
 8005882:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005884:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10d      	bne.n	80058a8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005894:	2100      	movs	r1, #0
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f968 	bl	8005b6c <USB_SetDevSpeed>
 800589c:	e008      	b.n	80058b0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800589e:	2101      	movs	r1, #1
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f963 	bl	8005b6c <USB_SetDevSpeed>
 80058a6:	e003      	b.n	80058b0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058a8:	2103      	movs	r1, #3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f95e 	bl	8005b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058b0:	2110      	movs	r1, #16
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8fa 	bl	8005aac <USB_FlushTxFifo>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f924 	bl	8005b10 <USB_FlushRxFifo>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d8:	461a      	mov	r2, r3
 80058da:	2300      	movs	r3, #0
 80058dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e4:	461a      	mov	r2, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	e043      	b.n	8005984 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800590e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005912:	d118      	bne.n	8005946 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005926:	461a      	mov	r2, r3
 8005928:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e013      	b.n	8005958 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e008      	b.n	8005958 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005976:	461a      	mov	r2, r3
 8005978:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800597c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3301      	adds	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005988:	461a      	mov	r2, r3
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4293      	cmp	r3, r2
 800598e:	d3b5      	bcc.n	80058fc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e043      	b.n	8005a1e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ac:	d118      	bne.n	80059e0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e013      	b.n	80059f2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d6:	461a      	mov	r2, r3
 80059d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e008      	b.n	80059f2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a10:	461a      	mov	r2, r3
 8005a12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a22:	461a      	mov	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d3b5      	bcc.n	8005996 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f043 0210 	orr.w	r2, r3, #16
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <USB_DevInit+0x2c4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f043 0208 	orr.w	r2, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa4:	b004      	add	sp, #16
 8005aa6:	4770      	bx	lr
 8005aa8:	803c3800 	.word	0x803c3800

08005aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac6:	d901      	bls.n	8005acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e01b      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	daf2      	bge.n	8005aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af0:	d901      	bls.n	8005af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e018      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	daf2      	bge.n	8005b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d0f0      	beq.n	8005b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b087      	sub	sp, #28
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0306 	and.w	r3, r3, #6
 8005bb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
 8005bc2:	e00a      	b.n	8005bda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d002      	beq.n	8005bd0 <USB_GetDevSpeed+0x32>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d102      	bne.n	8005bd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	75fb      	strb	r3, [r7, #23]
 8005bd4:	e001      	b.n	8005bda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bd6:	230f      	movs	r3, #15
 8005bd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d13a      	bne.n	8005c7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d155      	bne.n	8005ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	791b      	ldrb	r3, [r3, #4]
 8005c56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	059b      	lsls	r3, r3, #22
 8005c5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c60:	4313      	orrs	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e036      	b.n	8005ce8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	041b      	lsls	r3, r3, #16
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11a      	bne.n	8005ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d161      	bne.n	8005dd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d2a:	d11f      	bne.n	8005d6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db0:	4013      	ands	r3, r2
 8005db2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	0159      	lsls	r1, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	440b      	add	r3, r1
 8005dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4b35      	ldr	r3, [pc, #212]	@ (8005ea8 <USB_DeactivateEndpoint+0x1b0>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]
 8005dd6:	e060      	b.n	8005e9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dee:	d11f      	bne.n	8005e30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	2101      	movs	r1, #1
 8005e42:	fa01 f303 	lsl.w	r3, r1, r3
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e50:	4013      	ands	r3, r2
 8005e52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e74:	4013      	ands	r3, r2
 8005e76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	0159      	lsls	r1, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	440b      	add	r3, r1
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e92:	4619      	mov	r1, r3
 8005e94:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <USB_DeactivateEndpoint+0x1b4>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	ec337800 	.word	0xec337800
 8005eac:	eff37800 	.word	0xeff37800

08005eb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	f040 817f 	bne.w	80061d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d132      	bne.n	8005f40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ef8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f38:	0cdb      	lsrs	r3, r3, #19
 8005f3a:	04db      	lsls	r3, r3, #19
 8005f3c:	6113      	str	r3, [r2, #16]
 8005f3e:	e097      	b.n	8006070 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5a:	0cdb      	lsrs	r3, r3, #19
 8005f5c:	04db      	lsls	r3, r3, #19
 8005f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f82:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11a      	bne.n	8005fc0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d903      	bls.n	8005f9e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fbc:	6113      	str	r3, [r2, #16]
 8005fbe:	e044      	b.n	800604a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	8afb      	ldrh	r3, [r7, #22]
 8005fe6:	04d9      	lsls	r1, r3, #19
 8005fe8:	4ba4      	ldr	r3, [pc, #656]	@ (800627c <USB_EPStartXfer+0x3cc>)
 8005fea:	400b      	ands	r3, r1
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	0148      	lsls	r0, r1, #5
 8005ff0:	69f9      	ldr	r1, [r7, #28]
 8005ff2:	4401      	add	r1, r0
 8005ff4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	791b      	ldrb	r3, [r3, #4]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d122      	bne.n	800604a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800601e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006022:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	8afb      	ldrh	r3, [r7, #22]
 8006034:	075b      	lsls	r3, r3, #29
 8006036:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800603a:	69b9      	ldr	r1, [r7, #24]
 800603c:	0148      	lsls	r0, r1, #5
 800603e:	69f9      	ldr	r1, [r7, #28]
 8006040:	4401      	add	r1, r0
 8006042:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	4401      	add	r1, r0
 8006068:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d14b      	bne.n	800610e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d128      	bne.n	80060ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d110      	bne.n	80060cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e00f      	b.n	80060ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006106:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e166      	b.n	80063dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006128:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800612c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	791b      	ldrb	r3, [r3, #4]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d015      	beq.n	8006162 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 814e 	beq.w	80063dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	69f9      	ldr	r1, [r7, #28]
 8006158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800615c:	4313      	orrs	r3, r2
 800615e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006160:	e13c      	b.n	80063dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d110      	bne.n	8006194 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e00f      	b.n	80061b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	b298      	uxth	r0, r3
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	4603      	mov	r3, r0
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f9b9 	bl	8006540 <USB_WritePacket>
 80061ce:	e105      	b.n	80063dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ea:	0cdb      	lsrs	r3, r3, #19
 80061ec:	04db      	lsls	r3, r3, #19
 80061ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800620a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800620e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006212:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d132      	bne.n	8006280 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006248:	69b9      	ldr	r1, [r7, #24]
 800624a:	0148      	lsls	r0, r1, #5
 800624c:	69f9      	ldr	r1, [r7, #28]
 800624e:	4401      	add	r1, r0
 8006250:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006254:	4313      	orrs	r3, r2
 8006256:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006272:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006276:	6113      	str	r3, [r2, #16]
 8006278:	e062      	b.n	8006340 <USB_EPStartXfer+0x490>
 800627a:	bf00      	nop
 800627c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d123      	bne.n	80062d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629e:	69b9      	ldr	r1, [r7, #24]
 80062a0:	0148      	lsls	r0, r1, #5
 80062a2:	69f9      	ldr	r1, [r7, #28]
 80062a4:	4401      	add	r1, r0
 80062a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062aa:	4313      	orrs	r3, r2
 80062ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062cc:	6113      	str	r3, [r2, #16]
 80062ce:	e037      	b.n	8006340 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	fb03 f202 	mul.w	r2, r3, r2
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	8afb      	ldrh	r3, [r7, #22]
 8006304:	04d9      	lsls	r1, r3, #19
 8006306:	4b38      	ldr	r3, [pc, #224]	@ (80063e8 <USB_EPStartXfer+0x538>)
 8006308:	400b      	ands	r3, r1
 800630a:	69b9      	ldr	r1, [r7, #24]
 800630c:	0148      	lsls	r0, r1, #5
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	4401      	add	r1, r0
 8006312:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006316:	4313      	orrs	r3, r2
 8006318:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	0148      	lsls	r0, r1, #5
 8006334:	69f9      	ldr	r1, [r7, #28]
 8006336:	4401      	add	r1, r0
 8006338:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d10d      	bne.n	8006362 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635e:	460a      	mov	r2, r1
 8006360:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d128      	bne.n	80063bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006394:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00f      	b.n	80063bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	1ff80000 	.word	0x1ff80000

080063ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d14a      	bne.n	80064a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800641e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006422:	f040 8086 	bne.w	8006532 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006448:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800646c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f242 7210 	movw	r2, #10000	@ 0x2710
 800647a:	4293      	cmp	r3, r2
 800647c:	d902      	bls.n	8006484 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
          break;
 8006482:	e056      	b.n	8006532 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800649c:	d0e7      	beq.n	800646e <USB_EPStopXfer+0x82>
 800649e:	e048      	b.n	8006532 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b8:	d13b      	bne.n	8006532 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006500:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800650e:	4293      	cmp	r3, r2
 8006510:	d902      	bls.n	8006518 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
          break;
 8006516:	e00c      	b.n	8006532 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800652c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006530:	d0e7      	beq.n	8006502 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006540:	b480      	push	{r7}
 8006542:	b089      	sub	sp, #36	@ 0x24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	460b      	mov	r3, r1
 8006550:	71fb      	strb	r3, [r7, #7]
 8006552:	4613      	mov	r3, r2
 8006554:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800655e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	d123      	bne.n	80065ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006566:	88bb      	ldrh	r3, [r7, #4]
 8006568:	3303      	adds	r3, #3
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	e018      	b.n	80065a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	031a      	lsls	r2, r3, #12
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	461a      	mov	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3301      	adds	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3301      	adds	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3301      	adds	r3, #1
 800659e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	3301      	adds	r3, #1
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d3e2      	bcc.n	8006574 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3724      	adds	r7, #36	@ 0x24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065bc:	b480      	push	{r7}
 80065be:	b08b      	sub	sp, #44	@ 0x2c
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	089b      	lsrs	r3, r3, #2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	e014      	b.n	8006612 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	3301      	adds	r3, #1
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	3301      	adds	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	3301      	adds	r3, #1
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	3301      	adds	r3, #1
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	3301      	adds	r3, #1
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	429a      	cmp	r2, r3
 8006618:	d3e6      	bcc.n	80065e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800661a:	8bfb      	ldrh	r3, [r7, #30]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01e      	beq.n	800665e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662a:	461a      	mov	r2, r3
 800662c:	f107 0310 	add.w	r3, r7, #16
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	701a      	strb	r2, [r3, #0]
      i++;
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	3301      	adds	r3, #1
 800664a:	623b      	str	r3, [r7, #32]
      pDest++;
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	3301      	adds	r3, #1
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006652:	8bfb      	ldrh	r3, [r7, #30]
 8006654:	3b01      	subs	r3, #1
 8006656:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006658:	8bfb      	ldrh	r3, [r7, #30]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1ea      	bne.n	8006634 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006660:	4618      	mov	r0, r3
 8006662:	372c      	adds	r7, #44	@ 0x2c
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d12c      	bne.n	80066e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	db12      	blt.n	80066c0 <USB_EPSetStall+0x54>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00f      	beq.n	80066c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e02b      	b.n	800673a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db12      	blt.n	800671a <USB_EPSetStall+0xae>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00f      	beq.n	800671a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006714:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006718:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006738:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d128      	bne.n	80067b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	440a      	add	r2, r1
 800677a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800677e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006782:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	791b      	ldrb	r3, [r3, #4]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d003      	beq.n	8006794 <USB_EPClearStall+0x4c>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	791b      	ldrb	r3, [r3, #4]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d138      	bne.n	8006806 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e027      	b.n	8006806 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d003      	beq.n	80067e6 <USB_EPClearStall+0x9e>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d10f      	bne.n	8006806 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006804:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006832:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006836:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006848:	68f9      	ldr	r1, [r7, #12]
 800684a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800684e:	4313      	orrs	r3, r2
 8006850:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800688e:	f023 0302 	bic.w	r3, r3, #2
 8006892:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068bc:	f023 0303 	bic.w	r3, r3, #3
 80068c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d0:	f043 0302 	orr.w	r3, r3, #2
 80068d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068fc:	68fb      	ldr	r3, [r7, #12]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	4013      	ands	r3, r2
 800692c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	0c1b      	lsrs	r3, r3, #16
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	4013      	ands	r3, r2
 8006960:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	b29b      	uxth	r3, r3
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069a0:	68bb      	ldr	r3, [r7, #8]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b087      	sub	sp, #28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	01db      	lsls	r3, r3, #7
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069fc:	68bb      	ldr	r3, [r7, #8]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0301 	and.w	r3, r3, #1
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a44:	f023 0307 	bic.w	r3, r3, #7
 8006a48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	460b      	mov	r3, r1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	333c      	adds	r3, #60	@ 0x3c
 8006a82:	3304      	adds	r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4a26      	ldr	r2, [pc, #152]	@ (8006b24 <USB_EP0_OutStart+0xb8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d90a      	bls.n	8006aa6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa0:	d101      	bne.n	8006aa6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e037      	b.n	8006b16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ad4:	f043 0318 	orr.w	r3, r3, #24
 8006ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ae8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006aec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d10f      	bne.n	8006b14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006b12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	4f54300a 	.word	0x4f54300a

08006b28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b40:	d901      	bls.n	8006b46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e01b      	b.n	8006b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	daf2      	bge.n	8006b34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f043 0201 	orr.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b6a:	d901      	bls.n	8006b70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e006      	b.n	8006b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d0f0      	beq.n	8006b5e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006b98:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8006b9c:	f003 ff66 	bl	800aa6c <USBD_static_malloc>
 8006ba0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	32b0      	adds	r2, #176	@ 0xb0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e06e      	b.n	8006c9a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	32b0      	adds	r2, #176	@ 0xb0
 8006bc6:	68f9      	ldr	r1, [r7, #12]
 8006bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32b0      	adds	r2, #176	@ 0xb0
 8006bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7c1b      	ldrb	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d12b      	bne.n	8006c40 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006be8:	4b2e      	ldr	r3, [pc, #184]	@ (8006ca4 <USBD_MSC_Init+0x118>)
 8006bea:	7819      	ldrb	r1, [r3, #0]
 8006bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f003 fdf7 	bl	800a7e6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca4 <USBD_MSC_Init+0x118>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c10:	2201      	movs	r2, #1
 8006c12:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006c14:	4b24      	ldr	r3, [pc, #144]	@ (8006ca8 <USBD_MSC_Init+0x11c>)
 8006c16:	7819      	ldrb	r1, [r3, #0]
 8006c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f003 fde1 	bl	800a7e6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006c24:	4b20      	ldr	r3, [pc, #128]	@ (8006ca8 <USBD_MSC_Init+0x11c>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3324      	adds	r3, #36	@ 0x24
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	e028      	b.n	8006c92 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006c40:	4b18      	ldr	r3, [pc, #96]	@ (8006ca4 <USBD_MSC_Init+0x118>)
 8006c42:	7819      	ldrb	r1, [r3, #0]
 8006c44:	2340      	movs	r3, #64	@ 0x40
 8006c46:	2202      	movs	r2, #2
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f003 fdcc 	bl	800a7e6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006c4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ca4 <USBD_MSC_Init+0x118>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c66:	2201      	movs	r2, #1
 8006c68:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca8 <USBD_MSC_Init+0x11c>)
 8006c6c:	7819      	ldrb	r1, [r3, #0]
 8006c6e:	2340      	movs	r3, #64	@ 0x40
 8006c70:	2202      	movs	r2, #2
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f003 fdb7 	bl	800a7e6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006c78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <USBD_MSC_Init+0x11c>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3324      	adds	r3, #36	@ 0x24
 8006c8e:	2201      	movs	r2, #1
 8006c90:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa2c 	bl	80070f0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000006f 	.word	0x2000006f
 8006ca8:	2000006e 	.word	0x2000006e

08006cac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006cb8:	4b26      	ldr	r3, [pc, #152]	@ (8006d54 <USBD_MSC_DeInit+0xa8>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f003 fdb7 	bl	800a832 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8006cc4:	4b23      	ldr	r3, [pc, #140]	@ (8006d54 <USBD_MSC_DeInit+0xa8>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 020f 	and.w	r2, r3, #15
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006cdc:	2200      	movs	r2, #0
 8006cde:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <USBD_MSC_DeInit+0xac>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f003 fda3 	bl	800a832 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <USBD_MSC_DeInit+0xac>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3324      	adds	r3, #36	@ 0x24
 8006d02:	2200      	movs	r2, #0
 8006d04:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32b0      	adds	r2, #176	@ 0xb0
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa67 	bl	80071ec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	32b0      	adds	r2, #176	@ 0xb0
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f003 feab 	bl	800aa88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	32b0      	adds	r2, #176	@ 0xb0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000006f 	.word	0x2000006f
 8006d58:	2000006e 	.word	0x2000006e

08006d5c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	32b0      	adds	r2, #176	@ 0xb0
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e0e1      	b.n	8006f4c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d053      	beq.n	8006e3c <USBD_MSC_Setup+0xe0>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	f040 80d1 	bne.w	8006f3c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006da0:	d002      	beq.n	8006da8 <USBD_MSC_Setup+0x4c>
 8006da2:	2bff      	cmp	r3, #255	@ 0xff
 8006da4:	d02a      	beq.n	8006dfc <USBD_MSC_Setup+0xa0>
 8006da6:	e041      	b.n	8006e2c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	885b      	ldrh	r3, [r3, #2]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11e      	bne.n	8006dee <USBD_MSC_Setup+0x92>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	88db      	ldrh	r3, [r3, #6]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d11a      	bne.n	8006dee <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da15      	bge.n	8006dee <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	33b0      	adds	r3, #176	@ 0xb0
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	4798      	blx	r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	461a      	mov	r2, r3
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2201      	movs	r2, #1
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f003 f933 	bl	800a050 <USBD_CtlSendData>
 8006dea:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dec:	e025      	b.n	8006e3a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f003 f8b0 	bl	8009f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfa:	e01e      	b.n	8006e3a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	885b      	ldrh	r3, [r3, #2]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10c      	bne.n	8006e1e <USBD_MSC_Setup+0xc2>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	88db      	ldrh	r3, [r3, #6]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d108      	bne.n	8006e1e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db03      	blt.n	8006e1e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9b4 	bl	8007184 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e1c:	e00d      	b.n	8006e3a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f003 f898 	bl	8009f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2a:	e006      	b.n	8006e3a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f003 f891 	bl	8009f56 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	75fb      	strb	r3, [r7, #23]
          break;
 8006e38:	bf00      	nop
      }
      break;
 8006e3a:	e086      	b.n	8006f4a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b0b      	cmp	r3, #11
 8006e42:	d872      	bhi.n	8006f2a <USBD_MSC_Setup+0x1ce>
 8006e44:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <USBD_MSC_Setup+0xf0>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006ef9 	.word	0x08006ef9
 8006e54:	08006f2b 	.word	0x08006f2b
 8006e58:	08006f2b 	.word	0x08006f2b
 8006e5c:	08006f2b 	.word	0x08006f2b
 8006e60:	08006f2b 	.word	0x08006f2b
 8006e64:	08006f2b 	.word	0x08006f2b
 8006e68:	08006f2b 	.word	0x08006f2b
 8006e6c:	08006f2b 	.word	0x08006f2b
 8006e70:	08006f2b 	.word	0x08006f2b
 8006e74:	08006ea7 	.word	0x08006ea7
 8006e78:	08006ed1 	.word	0x08006ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d107      	bne.n	8006e98 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e88:	f107 030e 	add.w	r3, r7, #14
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f003 f8dd 	bl	800a050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e96:	e050      	b.n	8006f3a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f003 f85b 	bl	8009f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea4:	e049      	b.n	8006f3a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d107      	bne.n	8006ec2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f003 f8c8 	bl	800a050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec0:	e03b      	b.n	8006f3a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f003 f846 	bl	8009f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ece:	e034      	b.n	8006f3a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d106      	bne.n	8006eea <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	885b      	ldrh	r3, [r3, #2]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ee8:	e027      	b.n	8006f3a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f003 f832 	bl	8009f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ef6:	e020      	b.n	8006f3a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d119      	bne.n	8006f38 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	885b      	ldrh	r3, [r3, #2]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d115      	bne.n	8006f38 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	889b      	ldrh	r3, [r3, #4]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f003 fcab 	bl	800a870 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	889b      	ldrh	r3, [r3, #4]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fb2e 	bl	8007584 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006f28:	e006      	b.n	8006f38 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f003 f812 	bl	8009f56 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f32:	2303      	movs	r3, #3
 8006f34:	75fb      	strb	r3, [r7, #23]
          break;
 8006f36:	e000      	b.n	8006f3a <USBD_MSC_Setup+0x1de>
          break;
 8006f38:	bf00      	nop
      }
      break;
 8006f3a:	e006      	b.n	8006f4a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f003 f809 	bl	8009f56 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	75fb      	strb	r3, [r7, #23]
      break;
 8006f48:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f959 	bl	800721c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f983 	bl	8007290 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006f9c:	2181      	movs	r1, #129	@ 0x81
 8006f9e:	4812      	ldr	r0, [pc, #72]	@ (8006fe8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006fa0:	f002 f9a4 	bl	80092ec <USBD_GetEpDesc>
 8006fa4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	480f      	ldr	r0, [pc, #60]	@ (8006fe8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006faa:	f002 f99f 	bl	80092ec <USBD_GetEpDesc>
 8006fae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	711a      	strb	r2, [r3, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f042 0202 	orr.w	r2, r2, #2
 8006fc2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d006      	beq.n	8006fd8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	711a      	strb	r2, [r3, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f042 0202 	orr.w	r2, r2, #2
 8006fd6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006fde:	4b02      	ldr	r3, [pc, #8]	@ (8006fe8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000044 	.word	0x20000044

08006fec <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006ff4:	2181      	movs	r1, #129	@ 0x81
 8006ff6:	4812      	ldr	r0, [pc, #72]	@ (8007040 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006ff8:	f002 f978 	bl	80092ec <USBD_GetEpDesc>
 8006ffc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006ffe:	2101      	movs	r1, #1
 8007000:	480f      	ldr	r0, [pc, #60]	@ (8007040 <USBD_MSC_GetFSCfgDesc+0x54>)
 8007002:	f002 f973 	bl	80092ec <USBD_GetEpDesc>
 8007006:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d006      	beq.n	800701c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007016:	711a      	strb	r2, [r3, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800702a:	711a      	strb	r2, [r3, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007036:	4b02      	ldr	r3, [pc, #8]	@ (8007040 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000044 	.word	0x20000044

08007044 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800704c:	2181      	movs	r1, #129	@ 0x81
 800704e:	4812      	ldr	r0, [pc, #72]	@ (8007098 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8007050:	f002 f94c 	bl	80092ec <USBD_GetEpDesc>
 8007054:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007056:	2101      	movs	r1, #1
 8007058:	480f      	ldr	r0, [pc, #60]	@ (8007098 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800705a:	f002 f947 	bl	80092ec <USBD_GetEpDesc>
 800705e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800706e:	711a      	strb	r2, [r3, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d006      	beq.n	8007088 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007082:	711a      	strb	r2, [r3, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800708e:	4b02      	ldr	r3, [pc, #8]	@ (8007098 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000044 	.word	0x20000044

0800709c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	220a      	movs	r2, #10
 80070a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80070aa:	4b03      	ldr	r3, [pc, #12]	@ (80070b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	20000064 	.word	0x20000064

080070bc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e009      	b.n	80070e4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	33b0      	adds	r3, #176	@ 0xb0
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32b0      	adds	r2, #176	@ 0xb0
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d032      	beq.n	8007174 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	33b0      	adds	r3, #176	@ 0xb0
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2000      	movs	r0, #0
 8007146:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8007148:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <MSC_BOT_Init+0x8c>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f003 fb8e 	bl	800a870 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <MSC_BOT_Init+0x90>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f003 fb88 	bl	800a870 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007160:	4b06      	ldr	r3, [pc, #24]	@ (800717c <MSC_BOT_Init+0x8c>)
 8007162:	7819      	ldrb	r1, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800716a:	231f      	movs	r3, #31
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f003 fc48 	bl	800aa02 <USBD_LL_PrepareReceive>
 8007172:	e000      	b.n	8007176 <MSC_BOT_Init+0x86>
    return;
 8007174:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	2000006f 	.word	0x2000006f
 8007180:	2000006e 	.word	0x2000006e

08007184 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32b0      	adds	r2, #176	@ 0xb0
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01b      	beq.n	80071da <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80071ae:	4b0d      	ldr	r3, [pc, #52]	@ (80071e4 <MSC_BOT_Reset+0x60>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f003 fb99 	bl	800a8ec <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80071ba:	4b0b      	ldr	r3, [pc, #44]	@ (80071e8 <MSC_BOT_Reset+0x64>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f003 fb93 	bl	800a8ec <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80071c6:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <MSC_BOT_Reset+0x64>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80071d0:	231f      	movs	r3, #31
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f003 fc15 	bl	800aa02 <USBD_LL_PrepareReceive>
 80071d8:	e000      	b.n	80071dc <MSC_BOT_Reset+0x58>
    return;
 80071da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000006e 	.word	0x2000006e
 80071e8:	2000006f 	.word	0x2000006f

080071ec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32b0      	adds	r2, #176	@ 0xb0
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	721a      	strb	r2, [r3, #8]
  }
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	@ 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d020      	beq.n	8007280 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	7a1b      	ldrb	r3, [r3, #8]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d005      	beq.n	8007252 <MSC_BOT_DataIn+0x36>
 8007246:	2b02      	cmp	r3, #2
 8007248:	db1c      	blt.n	8007284 <MSC_BOT_DataIn+0x68>
 800724a:	3b03      	subs	r3, #3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d819      	bhi.n	8007284 <MSC_BOT_DataIn+0x68>
 8007250:	e011      	b.n	8007276 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800725e:	461a      	mov	r2, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9c9 	bl	80075f8 <SCSI_ProcessCmd>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	da0d      	bge.n	8007288 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800726c:	2101      	movs	r1, #1
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f90c 	bl	800748c <MSC_BOT_SendCSW>
      }
      break;
 8007274:	e008      	b.n	8007288 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f907 	bl	800748c <MSC_BOT_SendCSW>
      break;
 800727e:	e004      	b.n	800728a <MSC_BOT_DataIn+0x6e>
    return;
 8007280:	bf00      	nop
 8007282:	e002      	b.n	800728a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8007284:	bf00      	nop
 8007286:	e000      	b.n	800728a <MSC_BOT_DataIn+0x6e>
      break;
 8007288:	bf00      	nop
  }
}
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	32b0      	adds	r2, #176	@ 0xb0
 80072a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01c      	beq.n	80072ec <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	7a1b      	ldrb	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <MSC_BOT_DataOut+0x30>
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d004      	beq.n	80072c8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80072be:	e018      	b.n	80072f2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f819 	bl	80072f8 <MSC_BOT_CBW_Decode>
      break;
 80072c6:	e014      	b.n	80072f2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80072d4:	461a      	mov	r2, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f98e 	bl	80075f8 <SCSI_ProcessCmd>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da06      	bge.n	80072f0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80072e2:	2101      	movs	r1, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8d1 	bl	800748c <MSC_BOT_SendCSW>
      break;
 80072ea:	e001      	b.n	80072f0 <MSC_BOT_DataOut+0x60>
    return;
 80072ec:	bf00      	nop
 80072ee:	e000      	b.n	80072f2 <MSC_BOT_DataOut+0x62>
      break;
 80072f0:	bf00      	nop
  }
}
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32b0      	adds	r2, #176	@ 0xb0
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d079      	beq.n	800740a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800732e:	4b3a      	ldr	r3, [pc, #232]	@ (8007418 <MSC_BOT_CBW_Decode+0x120>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f003 fb85 	bl	800aa44 <USBD_LL_GetRxDataSize>
 800733a:	4603      	mov	r3, r0
 800733c:	2b1f      	cmp	r3, #31
 800733e:	d114      	bne.n	800736a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8007346:	4a35      	ldr	r2, [pc, #212]	@ (800741c <MSC_BOT_CBW_Decode+0x124>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d10e      	bne.n	800736a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007352:	2b01      	cmp	r3, #1
 8007354:	d809      	bhi.n	800736a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007366:	2b10      	cmp	r3, #16
 8007368:	d90e      	bls.n	8007388 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007370:	2320      	movs	r3, #32
 8007372:	2205      	movs	r2, #5
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fe54 	bl	8008022 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2202      	movs	r2, #2
 800737e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f8bd 	bl	8007500 <MSC_BOT_Abort>
 8007386:	e043      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8007394:	461a      	mov	r2, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f92e 	bl	80075f8 <SCSI_ProcessCmd>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da0c      	bge.n	80073bc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	7a1b      	ldrb	r3, [r3, #8]
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d104      	bne.n	80073b4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80073aa:	2101      	movs	r1, #1
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f86d 	bl	800748c <MSC_BOT_SendCSW>
 80073b2:	e02d      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f8a3 	bl	8007500 <MSC_BOT_Abort>
 80073ba:	e029      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	7a1b      	ldrb	r3, [r3, #8]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d024      	beq.n	800740e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d020      	beq.n	800740e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d01c      	beq.n	800740e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f103 0110 	add.w	r1, r3, #16
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f819 	bl	8007420 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80073ee:	e00f      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80073f8:	2100      	movs	r1, #0
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f846 	bl	800748c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007400:	e006      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f87c 	bl	8007500 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007408:	e002      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
    return;
 800740a:	bf00      	nop
 800740c:	e000      	b.n	8007410 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800740e:	bf00      	nop
    }
  }
}
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	2000006f 	.word	0x2000006f
 800741c:	43425355 	.word	0x43425355

08007420 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	32b0      	adds	r2, #176	@ 0xb0
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01e      	beq.n	8007480 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4293      	cmp	r3, r2
 800744c:	bf28      	it	cs
 800744e:	4613      	movcs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2204      	movs	r2, #4
 800746e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <MSC_BOT_SendData+0x68>)
 8007472:	7819      	ldrb	r1, [r3, #0]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f003 faa1 	bl	800a9c0 <USBD_LL_Transmit>
 800747e:	e000      	b.n	8007482 <MSC_BOT_SendData+0x62>
    return;
 8007480:	bf00      	nop
}
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	2000006e 	.word	0x2000006e

0800748c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32b0      	adds	r2, #176	@ 0xb0
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01d      	beq.n	80074ea <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4a10      	ldr	r2, [pc, #64]	@ (80074f4 <MSC_BOT_SendCSW+0x68>)
 80074b2:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80074c4:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <MSC_BOT_SendCSW+0x6c>)
 80074c6:	7819      	ldrb	r1, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80074ce:	230d      	movs	r3, #13
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f003 fa75 	bl	800a9c0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80074d6:	4b09      	ldr	r3, [pc, #36]	@ (80074fc <MSC_BOT_SendCSW+0x70>)
 80074d8:	7819      	ldrb	r1, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80074e0:	231f      	movs	r3, #31
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f003 fa8d 	bl	800aa02 <USBD_LL_PrepareReceive>
 80074e8:	e000      	b.n	80074ec <MSC_BOT_SendCSW+0x60>
    return;
 80074ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	53425355 	.word	0x53425355
 80074f8:	2000006e 	.word	0x2000006e
 80074fc:	2000006f 	.word	0x2000006f

08007500 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	32b0      	adds	r2, #176	@ 0xb0
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d02a      	beq.n	8007574 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10e      	bne.n	8007546 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <MSC_BOT_Abort+0x7c>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f003 f9b4 	bl	800a8ae <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007546:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <MSC_BOT_Abort+0x80>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f003 f9ae 	bl	800a8ae <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	7a5b      	ldrb	r3, [r3, #9]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d10d      	bne.n	8007576 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800755a:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <MSC_BOT_Abort+0x80>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f003 f9a4 	bl	800a8ae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8007566:	4b05      	ldr	r3, [pc, #20]	@ (800757c <MSC_BOT_Abort+0x7c>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f003 f99e 	bl	800a8ae <USBD_LL_StallEP>
 8007572:	e000      	b.n	8007576 <MSC_BOT_Abort+0x76>
    return;
 8007574:	bf00      	nop
  }
}
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	2000006f 	.word	0x2000006f
 8007580:	2000006e 	.word	0x2000006e

08007584 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32b0      	adds	r2, #176	@ 0xb0
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01d      	beq.n	80075e2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	7a5b      	ldrb	r3, [r3, #9]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d10c      	bne.n	80075c8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80075ae:	4b10      	ldr	r3, [pc, #64]	@ (80075f0 <MSC_BOT_CplClrFeature+0x6c>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f003 f97a 	bl	800a8ae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80075ba:	4b0e      	ldr	r3, [pc, #56]	@ (80075f4 <MSC_BOT_CplClrFeature+0x70>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f003 f974 	bl	800a8ae <USBD_LL_StallEP>
 80075c6:	e00f      	b.n	80075e8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80075c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da0a      	bge.n	80075e6 <MSC_BOT_CplClrFeature+0x62>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	7a5b      	ldrb	r3, [r3, #9]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d006      	beq.n	80075e6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80075d8:	2101      	movs	r1, #1
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ff56 	bl	800748c <MSC_BOT_SendCSW>
 80075e0:	e002      	b.n	80075e8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80075e6:	bf00      	nop
  }
}
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	2000006e 	.word	0x2000006e
 80075f4:	2000006f 	.word	0x2000006f

080075f8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	460b      	mov	r3, r1
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	32b0      	adds	r2, #176	@ 0xb0
 8007610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007614:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800761c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007620:	e168      	b.n	80078f4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2baa      	cmp	r3, #170	@ 0xaa
 8007628:	f000 8144 	beq.w	80078b4 <SCSI_ProcessCmd+0x2bc>
 800762c:	2baa      	cmp	r3, #170	@ 0xaa
 800762e:	f300 8153 	bgt.w	80078d8 <SCSI_ProcessCmd+0x2e0>
 8007632:	2ba8      	cmp	r3, #168	@ 0xa8
 8007634:	f000 812c 	beq.w	8007890 <SCSI_ProcessCmd+0x298>
 8007638:	2ba8      	cmp	r3, #168	@ 0xa8
 800763a:	f300 814d 	bgt.w	80078d8 <SCSI_ProcessCmd+0x2e0>
 800763e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007640:	f300 80c0 	bgt.w	80077c4 <SCSI_ProcessCmd+0x1cc>
 8007644:	2b00      	cmp	r3, #0
 8007646:	f2c0 8147 	blt.w	80078d8 <SCSI_ProcessCmd+0x2e0>
 800764a:	2b5a      	cmp	r3, #90	@ 0x5a
 800764c:	f200 8144 	bhi.w	80078d8 <SCSI_ProcessCmd+0x2e0>
 8007650:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <SCSI_ProcessCmd+0x60>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	080077cb 	.word	0x080077cb
 800765c:	080078d9 	.word	0x080078d9
 8007660:	080078d9 	.word	0x080078d9
 8007664:	080077dd 	.word	0x080077dd
 8007668:	080078d9 	.word	0x080078d9
 800766c:	080078d9 	.word	0x080078d9
 8007670:	080078d9 	.word	0x080078d9
 8007674:	080078d9 	.word	0x080078d9
 8007678:	080078d9 	.word	0x080078d9
 800767c:	080078d9 	.word	0x080078d9
 8007680:	080078d9 	.word	0x080078d9
 8007684:	080078d9 	.word	0x080078d9
 8007688:	080078d9 	.word	0x080078d9
 800768c:	080078d9 	.word	0x080078d9
 8007690:	080078d9 	.word	0x080078d9
 8007694:	080078d9 	.word	0x080078d9
 8007698:	080078d9 	.word	0x080078d9
 800769c:	080078d9 	.word	0x080078d9
 80076a0:	080077ef 	.word	0x080077ef
 80076a4:	080078d9 	.word	0x080078d9
 80076a8:	080078d9 	.word	0x080078d9
 80076ac:	080078d9 	.word	0x080078d9
 80076b0:	080078d9 	.word	0x080078d9
 80076b4:	080078d9 	.word	0x080078d9
 80076b8:	080078d9 	.word	0x080078d9
 80076bc:	080078d9 	.word	0x080078d9
 80076c0:	08007825 	.word	0x08007825
 80076c4:	08007801 	.word	0x08007801
 80076c8:	080078d9 	.word	0x080078d9
 80076cc:	080078d9 	.word	0x080078d9
 80076d0:	08007813 	.word	0x08007813
 80076d4:	080078d9 	.word	0x080078d9
 80076d8:	080078d9 	.word	0x080078d9
 80076dc:	080078d9 	.word	0x080078d9
 80076e0:	080078d9 	.word	0x080078d9
 80076e4:	08007849 	.word	0x08007849
 80076e8:	080078d9 	.word	0x080078d9
 80076ec:	0800785b 	.word	0x0800785b
 80076f0:	080078d9 	.word	0x080078d9
 80076f4:	080078d9 	.word	0x080078d9
 80076f8:	0800787f 	.word	0x0800787f
 80076fc:	080078d9 	.word	0x080078d9
 8007700:	080078a3 	.word	0x080078a3
 8007704:	080078d9 	.word	0x080078d9
 8007708:	080078d9 	.word	0x080078d9
 800770c:	080078d9 	.word	0x080078d9
 8007710:	080078d9 	.word	0x080078d9
 8007714:	080078c7 	.word	0x080078c7
 8007718:	080078d9 	.word	0x080078d9
 800771c:	080078d9 	.word	0x080078d9
 8007720:	080078d9 	.word	0x080078d9
 8007724:	080078d9 	.word	0x080078d9
 8007728:	080078d9 	.word	0x080078d9
 800772c:	080078d9 	.word	0x080078d9
 8007730:	080078d9 	.word	0x080078d9
 8007734:	080078d9 	.word	0x080078d9
 8007738:	080078d9 	.word	0x080078d9
 800773c:	080078d9 	.word	0x080078d9
 8007740:	080078d9 	.word	0x080078d9
 8007744:	080078d9 	.word	0x080078d9
 8007748:	080078d9 	.word	0x080078d9
 800774c:	080078d9 	.word	0x080078d9
 8007750:	080078d9 	.word	0x080078d9
 8007754:	080078d9 	.word	0x080078d9
 8007758:	080078d9 	.word	0x080078d9
 800775c:	080078d9 	.word	0x080078d9
 8007760:	080078d9 	.word	0x080078d9
 8007764:	080078d9 	.word	0x080078d9
 8007768:	080078d9 	.word	0x080078d9
 800776c:	080078d9 	.word	0x080078d9
 8007770:	080078d9 	.word	0x080078d9
 8007774:	080078d9 	.word	0x080078d9
 8007778:	080078d9 	.word	0x080078d9
 800777c:	080078d9 	.word	0x080078d9
 8007780:	080078d9 	.word	0x080078d9
 8007784:	080078d9 	.word	0x080078d9
 8007788:	080078d9 	.word	0x080078d9
 800778c:	080078d9 	.word	0x080078d9
 8007790:	080078d9 	.word	0x080078d9
 8007794:	080078d9 	.word	0x080078d9
 8007798:	080078d9 	.word	0x080078d9
 800779c:	080078d9 	.word	0x080078d9
 80077a0:	080078d9 	.word	0x080078d9
 80077a4:	080078d9 	.word	0x080078d9
 80077a8:	080078d9 	.word	0x080078d9
 80077ac:	080078d9 	.word	0x080078d9
 80077b0:	080078d9 	.word	0x080078d9
 80077b4:	080078d9 	.word	0x080078d9
 80077b8:	080078d9 	.word	0x080078d9
 80077bc:	080078d9 	.word	0x080078d9
 80077c0:	08007837 	.word	0x08007837
 80077c4:	2b9e      	cmp	r3, #158	@ 0x9e
 80077c6:	d051      	beq.n	800786c <SCSI_ProcessCmd+0x274>
 80077c8:	e086      	b.n	80078d8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4619      	mov	r1, r3
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f893 	bl	80078fc <SCSI_TestUnitReady>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]
      break;
 80077da:	e089      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	4619      	mov	r1, r3
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fb9a 	bl	8007f1c <SCSI_RequestSense>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]
      break;
 80077ec:	e080      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4619      	mov	r1, r3
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f8db 	bl	80079b0 <SCSI_Inquiry>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]
      break;
 80077fe:	e077      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4619      	mov	r1, r3
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fc56 	bl	80080b8 <SCSI_StartStopUnit>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	e06e      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4619      	mov	r1, r3
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 fca2 	bl	8008162 <SCSI_AllowPreventRemovable>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
      break;
 8007822:	e065      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 faea 	bl	8007e04 <SCSI_ModeSense6>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]
      break;
 8007834:	e05c      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fb27 	bl	8007e90 <SCSI_ModeSense10>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
      break;
 8007846:	e053      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fa5c 	bl	8007d0c <SCSI_ReadFormatCapacity>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	e04a      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4619      	mov	r1, r3
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f921 	bl	8007aa8 <SCSI_ReadCapacity10>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]
      break;
 800786a:	e041      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4619      	mov	r1, r3
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f996 	bl	8007ba4 <SCSI_ReadCapacity16>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]
      break;
 800787c:	e038      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fc99 	bl	80081bc <SCSI_Read10>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
      break;
 800788e:	e02f      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007890:	7afb      	ldrb	r3, [r7, #11]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4619      	mov	r1, r3
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fd3a 	bl	8008310 <SCSI_Read12>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]
      break;
 80078a0:	e026      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4619      	mov	r1, r3
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fde5 	bl	8008478 <SCSI_Write10>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]
      break;
 80078b2:	e01d      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4619      	mov	r1, r3
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 feb2 	bl	8008624 <SCSI_Write12>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]
      break;
 80078c4:	e014      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80078c6:	7afb      	ldrb	r3, [r7, #11]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 ff8f 	bl	80087f0 <SCSI_Verify10>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]
      break;
 80078d6:	e00b      	b.n	80078f0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80078d8:	7af9      	ldrb	r1, [r7, #11]
 80078da:	2320      	movs	r3, #32
 80078dc:	2205      	movs	r2, #5
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 fb9f 	bl	8008022 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2202      	movs	r2, #2
 80078e8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80078ea:	23ff      	movs	r3, #255	@ 0xff
 80078ec:	75fb      	strb	r3, [r7, #23]
      break;
 80078ee:	bf00      	nop
  }

  return ret;
 80078f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	460b      	mov	r3, r1
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	32b0      	adds	r2, #176	@ 0xb0
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007924:	e03f      	b.n	80079a6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007936:	2320      	movs	r3, #32
 8007938:	2205      	movs	r2, #5
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fb71 	bl	8008022 <SCSI_SenseCode>

    return -1;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007944:	e02f      	b.n	80079a6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800794c:	2b02      	cmp	r3, #2
 800794e:	d10b      	bne.n	8007968 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007950:	7af9      	ldrb	r1, [r7, #11]
 8007952:	233a      	movs	r3, #58	@ 0x3a
 8007954:	2202      	movs	r2, #2
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fb63 	bl	8008022 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2205      	movs	r2, #5
 8007960:	721a      	strb	r2, [r3, #8]
    return -1;
 8007962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007966:	e01e      	b.n	80079a6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	33b0      	adds	r3, #176	@ 0xb0
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	7afa      	ldrb	r2, [r7, #11]
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00b      	beq.n	800799e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007986:	7af9      	ldrb	r1, [r7, #11]
 8007988:	233a      	movs	r3, #58	@ 0x3a
 800798a:	2202      	movs	r2, #2
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fb48 	bl	8008022 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2205      	movs	r2, #5
 8007996:	721a      	strb	r2, [r3, #8]

    return -1;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800799c:	e003      	b.n	80079a6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2200      	movs	r2, #0
 80079a2:	60da      	str	r2, [r3, #12]

  return 0;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	460b      	mov	r3, r1
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	32b0      	adds	r2, #176	@ 0xb0
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d102      	bne.n	80079da <SCSI_Inquiry+0x2a>
  {
    return -1;
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079d8:	e05e      	b.n	8007a98 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80079ea:	2320      	movs	r3, #32
 80079ec:	2205      	movs	r2, #5
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 fb17 	bl	8008022 <SCSI_SenseCode>
    return -1;
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079f8:	e04e      	b.n	8007a98 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3301      	adds	r3, #1
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d020      	beq.n	8007a4a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3302      	adds	r3, #2
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007a12:	2206      	movs	r2, #6
 8007a14:	4922      	ldr	r1, [pc, #136]	@ (8007aa0 <SCSI_Inquiry+0xf0>)
 8007a16:	69b8      	ldr	r0, [r7, #24]
 8007a18:	f001 f870 	bl	8008afc <SCSI_UpdateBotData>
 8007a1c:	e03b      	b.n	8007a96 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3302      	adds	r3, #2
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b80      	cmp	r3, #128	@ 0x80
 8007a26:	d105      	bne.n	8007a34 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007a28:	2208      	movs	r2, #8
 8007a2a:	491e      	ldr	r1, [pc, #120]	@ (8007aa4 <SCSI_Inquiry+0xf4>)
 8007a2c:	69b8      	ldr	r0, [r7, #24]
 8007a2e:	f001 f865 	bl	8008afc <SCSI_UpdateBotData>
 8007a32:	e030      	b.n	8007a96 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007a3a:	2324      	movs	r3, #36	@ 0x24
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 faef 	bl	8008022 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a48:	e026      	b.n	8007a98 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	33b0      	adds	r3, #176	@ 0xb0
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007a5a:	69d9      	ldr	r1, [r3, #28]
 8007a5c:	7afa      	ldrb	r2, [r7, #11]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8007a66:	440b      	add	r3, r1
 8007a68:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	3305      	adds	r3, #5
 8007a72:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	8bfb      	ldrh	r3, [r7, #30]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d303      	bcc.n	8007a8a <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3304      	adds	r3, #4
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007a8a:	8bfb      	ldrh	r3, [r7, #30]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6979      	ldr	r1, [r7, #20]
 8007a90:	69b8      	ldr	r0, [r7, #24]
 8007a92:	f001 f833 	bl	8008afc <SCSI_UpdateBotData>
  }

  return 0;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000070 	.word	0x20000070
 8007aa4:	20000078 	.word	0x20000078

08007aa8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	32b0      	adds	r2, #176	@ 0xb0
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ad0:	e064      	b.n	8007b9c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	33b0      	adds	r3, #176	@ 0xb0
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8007af0:	7af8      	ldrb	r0, [r7, #11]
 8007af2:	4798      	blx	r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <SCSI_ReadCapacity10+0x62>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d108      	bne.n	8007b1c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b0a:	7af9      	ldrb	r1, [r7, #11]
 8007b0c:	233a      	movs	r3, #58	@ 0x3a
 8007b0e:	2202      	movs	r2, #2
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 fa86 	bl	8008022 <SCSI_SenseCode>
    return -1;
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b1a:	e03f      	b.n	8007b9c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007b22:	3b01      	subs	r3, #1
 8007b24:	0e1b      	lsrs	r3, r3, #24
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007b32:	3b01      	subs	r3, #1
 8007b34:	0c1b      	lsrs	r3, r3, #16
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007b42:	3b01      	subs	r3, #1
 8007b44:	0a1b      	lsrs	r3, r3, #8
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007b62:	161b      	asrs	r3, r3, #24
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007b70:	141b      	asrs	r3, r3, #16
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2208      	movs	r2, #8
 8007b98:	60da      	str	r2, [r3, #12]

  return 0;
 8007b9a:	2300      	movs	r3, #0

}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	460b      	mov	r3, r1
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	32b0      	adds	r2, #176	@ 0xb0
 8007bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bcc:	e09a      	b.n	8007d04 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	33b0      	adds	r3, #176	@ 0xb0
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8007bec:	7af8      	ldrb	r0, [r7, #11]
 8007bee:	4798      	blx	r3
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <SCSI_ReadCapacity16+0x62>
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d108      	bne.n	8007c18 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c06:	7af9      	ldrb	r1, [r7, #11]
 8007c08:	233a      	movs	r3, #58	@ 0x3a
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fa08 	bl	8008022 <SCSI_SenseCode>
    return -1;
 8007c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c16:	e075      	b.n	8007d04 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	330a      	adds	r3, #10
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	330b      	adds	r3, #11
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007c28:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007c32:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	320d      	adds	r2, #13
 8007c38:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007c3a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e008      	b.n	8007c58 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	3301      	adds	r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d3f1      	bcc.n	8007c46 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	0e1b      	lsrs	r3, r3, #24
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	0a1b      	lsrs	r3, r3, #8
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007ca8:	161b      	asrs	r3, r3, #24
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007cb6:	141b      	asrs	r3, r3, #16
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007cc4:	0a1b      	lsrs	r3, r3, #8
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	330a      	adds	r3, #10
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	330b      	adds	r3, #11
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007cea:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007cf4:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	320d      	adds	r2, #13
 8007cfa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007cfc:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	60da      	str	r2, [r3, #12]

  return 0;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	460b      	mov	r3, r1
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	32b0      	adds	r2, #176	@ 0xb0
 8007d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d28:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d34:	e061      	b.n	8007dfa <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	33b0      	adds	r3, #176	@ 0xb0
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f107 0214 	add.w	r2, r7, #20
 8007d4c:	f107 0110 	add.w	r1, r7, #16
 8007d50:	7af8      	ldrb	r0, [r7, #11]
 8007d52:	4798      	blx	r3
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <SCSI_ReadFormatCapacity+0x5e>
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d108      	bne.n	8007d7c <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d6a:	7af9      	ldrb	r1, [r7, #11]
 8007d6c:	233a      	movs	r3, #58	@ 0x3a
 8007d6e:	2202      	movs	r2, #2
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f956 	bl	8008022 <SCSI_SenseCode>
    return -1;
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d7a:	e03e      	b.n	8007dfa <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	83fb      	strh	r3, [r7, #30]
 8007d80:	e007      	b.n	8007d92 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8007d82:	8bfb      	ldrh	r3, [r7, #30]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	4413      	add	r3, r2
 8007d88:	2200      	movs	r2, #0
 8007d8a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007d8c:	8bfb      	ldrh	r3, [r7, #30]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	83fb      	strh	r3, [r7, #30]
 8007d92:	8bfb      	ldrh	r3, [r7, #30]
 8007d94:	2b0b      	cmp	r3, #11
 8007d96:	d9f4      	bls.n	8007d82 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	0e1b      	lsrs	r3, r3, #24
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007dd4:	8abb      	ldrh	r3, [r7, #20]
 8007dd6:	141b      	asrs	r3, r3, #16
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007dde:	8abb      	ldrh	r3, [r7, #20]
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007dea:	8abb      	ldrh	r3, [r7, #20]
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	220c      	movs	r2, #12
 8007df6:	60da      	str	r2, [r3, #12]

  return 0;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	32b0      	adds	r2, #176	@ 0xb0
 8007e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e20:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007e22:	2304      	movs	r3, #4
 8007e24:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e30:	e027      	b.n	8007e82 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	33b0      	adds	r3, #176	@ 0xb0
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	7afa      	ldrb	r2, [r7, #11]
 8007e46:	4610      	mov	r0, r2
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d006      	beq.n	8007e5e <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8007e50:	4b0e      	ldr	r3, [pc, #56]	@ (8007e8c <SCSI_ModeSense6+0x88>)
 8007e52:	789b      	ldrb	r3, [r3, #2]
 8007e54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e8c <SCSI_ModeSense6+0x88>)
 8007e5c:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3304      	adds	r3, #4
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	8afb      	ldrh	r3, [r7, #22]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d303      	bcc.n	8007e74 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007e74:	8afb      	ldrh	r3, [r7, #22]
 8007e76:	461a      	mov	r2, r3
 8007e78:	4904      	ldr	r1, [pc, #16]	@ (8007e8c <SCSI_ModeSense6+0x88>)
 8007e7a:	6938      	ldr	r0, [r7, #16]
 8007e7c:	f000 fe3e 	bl	8008afc <SCSI_UpdateBotData>

  return 0;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000080 	.word	0x20000080

08007e90 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	32b0      	adds	r2, #176	@ 0xb0
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007eae:	2308      	movs	r3, #8
 8007eb0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8007eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ebc:	e027      	b.n	8007f0e <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	33b0      	adds	r3, #176	@ 0xb0
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	7afa      	ldrb	r2, [r7, #11]
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8007edc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <SCSI_ModeSense10+0x88>)
 8007ede:	78db      	ldrb	r3, [r3, #3]
 8007ee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f18 <SCSI_ModeSense10+0x88>)
 8007ee8:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3308      	adds	r3, #8
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	8afb      	ldrh	r3, [r7, #22]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d303      	bcc.n	8007f00 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3308      	adds	r3, #8
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	461a      	mov	r2, r3
 8007f04:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <SCSI_ModeSense10+0x88>)
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f000 fdf8 	bl	8008afc <SCSI_UpdateBotData>

  return 0;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000084 	.word	0x20000084

08007f1c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	460b      	mov	r3, r1
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	32b0      	adds	r2, #176	@ 0xb0
 8007f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f38:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8007f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f44:	e069      	b.n	800801a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007f56:	2320      	movs	r3, #32
 8007f58:	2205      	movs	r2, #5
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f861 	bl	8008022 <SCSI_SenseCode>
    return -1;
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f64:	e059      	b.n	800801a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
 8007f6a:	e007      	b.n	8007f7c <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	2200      	movs	r2, #0
 8007f74:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	75fb      	strb	r3, [r7, #23]
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b11      	cmp	r3, #17
 8007f80:	d9f4      	bls.n	8007f6c <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2270      	movs	r2, #112	@ 0x70
 8007f86:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	220c      	movs	r2, #12
 8007f8c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d02e      	beq.n	8007ffc <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	3248      	adds	r2, #72	@ 0x48
 8007faa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	3348      	adds	r3, #72	@ 0x48
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	791a      	ldrb	r2, [r3, #4]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	3348      	adds	r3, #72	@ 0x48
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	795a      	ldrb	r2, [r3, #5]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d103      	bne.n	8007ffc <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2212      	movs	r2, #18
 8008000:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3304      	adds	r3, #4
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b12      	cmp	r3, #18
 800800a:	d805      	bhi.n	8008018 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	4608      	mov	r0, r1
 800802c:	4611      	mov	r1, r2
 800802e:	461a      	mov	r2, r3
 8008030:	4603      	mov	r3, r0
 8008032:	70fb      	strb	r3, [r7, #3]
 8008034:	460b      	mov	r3, r1
 8008036:	70bb      	strb	r3, [r7, #2]
 8008038:	4613      	mov	r3, r2
 800803a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	32b0      	adds	r2, #176	@ 0xb0
 8008046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d02c      	beq.n	80080ac <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008058:	461a      	mov	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3248      	adds	r2, #72	@ 0x48
 800805e:	78b9      	ldrb	r1, [r7, #2]
 8008060:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	3348      	adds	r3, #72	@ 0x48
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	787a      	ldrb	r2, [r7, #1]
 8008074:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	3348      	adds	r3, #72	@ 0x48
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4413      	add	r3, r2
 8008084:	2200      	movs	r2, #0
 8008086:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800808e:	3301      	adds	r3, #1
 8008090:	b2da      	uxtb	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d105      	bne.n	80080ae <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80080aa:	e000      	b.n	80080ae <SCSI_SenseCode+0x8c>
    return;
 80080ac:	bf00      	nop
  }
}
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	460b      	mov	r3, r1
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	32b0      	adds	r2, #176	@ 0xb0
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80080dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080e0:	e03b      	b.n	800815a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d10f      	bne.n	800810c <SCSI_StartStopUnit+0x54>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d108      	bne.n	800810c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80080fa:	7af9      	ldrb	r1, [r7, #11]
 80080fc:	2324      	movs	r3, #36	@ 0x24
 80080fe:	2205      	movs	r2, #5
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff ff8e 	bl	8008022 <SCSI_SenseCode>

    return -1;
 8008106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800810a:	e026      	b.n	800815a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d104      	bne.n	8008124 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8008122:	e016      	b.n	8008152 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d104      	bne.n	800813c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800813a:	e00a      	b.n	8008152 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d103      	bne.n	8008152 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2200      	movs	r2, #0
 8008156:	60da      	str	r2, [r3, #12]

  return 0;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008162:	b480      	push	{r7}
 8008164:	b087      	sub	sp, #28
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	460b      	mov	r3, r1
 800816c:	607a      	str	r2, [r7, #4]
 800816e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	32b0      	adds	r2, #176	@ 0xb0
 800817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800818a:	e011      	b.n	80081b0 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800819e:	e003      	b.n	80081a8 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2200      	movs	r2, #0
 80081ac:	60da      	str	r2, [r3, #12]

  return 0;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	460b      	mov	r3, r1
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	32b0      	adds	r2, #176	@ 0xb0
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <SCSI_Read10+0x2a>
  {
    return -1;
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081e4:	e090      	b.n	8008308 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	7a1b      	ldrb	r3, [r3, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 8082 	bne.w	80082f4 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80081f6:	b25b      	sxtb	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	db0a      	blt.n	8008212 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008202:	2320      	movs	r3, #32
 8008204:	2205      	movs	r2, #5
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff ff0b 	bl	8008022 <SCSI_SenseCode>
      return -1;
 800820c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008210:	e07a      	b.n	8008308 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008218:	2b02      	cmp	r3, #2
 800821a:	d108      	bne.n	800822e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800821c:	7af9      	ldrb	r1, [r7, #11]
 800821e:	233a      	movs	r3, #58	@ 0x3a
 8008220:	2202      	movs	r2, #2
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff fefd 	bl	8008022 <SCSI_SenseCode>

      return -1;
 8008228:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800822c:	e06c      	b.n	8008308 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	33b0      	adds	r3, #176	@ 0xb0
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	7afa      	ldrb	r2, [r7, #11]
 8008242:	4610      	mov	r0, r2
 8008244:	4798      	blx	r3
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d008      	beq.n	800825e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800824c:	7af9      	ldrb	r1, [r7, #11]
 800824e:	233a      	movs	r3, #58	@ 0x3a
 8008250:	2202      	movs	r2, #2
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fee5 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800825c:	e054      	b.n	8008308 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3302      	adds	r3, #2
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3303      	adds	r3, #3
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800826e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008278:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	3205      	adds	r2, #5
 800827e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008280:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3307      	adds	r3, #7
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	3208      	adds	r2, #8
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	431a      	orrs	r2, r3
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80082aa:	7af9      	ldrb	r1, [r7, #11]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fadc 	bl	800886a <SCSI_CheckAddressRange>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	da02      	bge.n	80082be <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082bc:	e024      	b.n	8008308 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80082ca:	6979      	ldr	r1, [r7, #20]
 80082cc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80082d0:	fb01 f303 	mul.w	r3, r1, r3
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d00a      	beq.n	80082ee <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80082de:	2320      	movs	r3, #32
 80082e0:	2205      	movs	r2, #5
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fe9d 	bl	8008022 <SCSI_SenseCode>
      return -1;
 80082e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082ec:	e00c      	b.n	8008308 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2202      	movs	r2, #2
 80082f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	4619      	mov	r1, r3
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fadf 	bl	80088c4 <SCSI_ProcessRead>
 8008306:	4603      	mov	r3, r0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	460b      	mov	r3, r1
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	32b0      	adds	r2, #176	@ 0xb0
 8008328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <SCSI_Read12+0x2a>
  {
    return -1;
 8008334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008338:	e09a      	b.n	8008470 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	7a1b      	ldrb	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f040 808c 	bne.w	800845c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800834a:	b25b      	sxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	db0a      	blt.n	8008366 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008356:	2320      	movs	r3, #32
 8008358:	2205      	movs	r2, #5
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fe61 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008364:	e084      	b.n	8008470 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800836c:	2b02      	cmp	r3, #2
 800836e:	d108      	bne.n	8008382 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008370:	7af9      	ldrb	r1, [r7, #11]
 8008372:	233a      	movs	r3, #58	@ 0x3a
 8008374:	2202      	movs	r2, #2
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff fe53 	bl	8008022 <SCSI_SenseCode>
      return -1;
 800837c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008380:	e076      	b.n	8008470 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	33b0      	adds	r3, #176	@ 0xb0
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	7afa      	ldrb	r2, [r7, #11]
 8008396:	4610      	mov	r0, r2
 8008398:	4798      	blx	r3
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80083a0:	7af9      	ldrb	r1, [r7, #11]
 80083a2:	233a      	movs	r3, #58	@ 0x3a
 80083a4:	2202      	movs	r2, #2
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff fe3b 	bl	8008022 <SCSI_SenseCode>
      return -1;
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083b0:	e05e      	b.n	8008470 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3302      	adds	r3, #2
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3303      	adds	r3, #3
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80083c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80083cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	3205      	adds	r2, #5
 80083d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80083d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3306      	adds	r3, #6
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3307      	adds	r3, #7
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80083ec:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3308      	adds	r3, #8
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80083f6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	3209      	adds	r2, #9
 80083fc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80083fe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008412:	7af9      	ldrb	r1, [r7, #11]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fa28 	bl	800886a <SCSI_CheckAddressRange>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	da02      	bge.n	8008426 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008424:	e024      	b.n	8008470 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	429a      	cmp	r2, r3
 800843e:	d00a      	beq.n	8008456 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008446:	2320      	movs	r3, #32
 8008448:	2205      	movs	r2, #5
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fde9 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008454:	e00c      	b.n	8008470 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2202      	movs	r2, #2
 800845a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008462:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fa2b 	bl	80088c4 <SCSI_ProcessRead>
 800846e:	4603      	mov	r3, r0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	460b      	mov	r3, r1
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	32b0      	adds	r2, #176	@ 0xb0
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <SCSI_Write10+0x2a>
  {
    return -1;
 800849c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084a0:	e0ba      	b.n	8008618 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	7a1b      	ldrb	r3, [r3, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f040 80b0 	bne.w	800860c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10a      	bne.n	80084cc <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80084bc:	2320      	movs	r3, #32
 80084be:	2205      	movs	r2, #5
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7ff fdae 	bl	8008022 <SCSI_SenseCode>
      return -1;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084ca:	e0a5      	b.n	8008618 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80084d2:	b25b      	sxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	da0a      	bge.n	80084ee <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80084de:	2320      	movs	r3, #32
 80084e0:	2205      	movs	r2, #5
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7ff fd9d 	bl	8008022 <SCSI_SenseCode>
      return -1;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084ec:	e094      	b.n	8008618 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	33b0      	adds	r3, #176	@ 0xb0
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	7afa      	ldrb	r2, [r7, #11]
 8008502:	4610      	mov	r0, r2
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800850c:	7af9      	ldrb	r1, [r7, #11]
 800850e:	233a      	movs	r3, #58	@ 0x3a
 8008510:	2202      	movs	r2, #2
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fd85 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800851c:	e07c      	b.n	8008618 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	33b0      	adds	r3, #176	@ 0xb0
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	7afa      	ldrb	r2, [r7, #11]
 8008532:	4610      	mov	r0, r2
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800853c:	7af9      	ldrb	r1, [r7, #11]
 800853e:	2327      	movs	r3, #39	@ 0x27
 8008540:	2202      	movs	r2, #2
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff fd6d 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800854c:	e064      	b.n	8008618 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3302      	adds	r3, #2
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3303      	adds	r3, #3
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800855e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008568:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	3205      	adds	r2, #5
 800856e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008570:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3307      	adds	r3, #7
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	3208      	adds	r2, #8
 8008584:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008586:	431a      	orrs	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800859a:	7af9      	ldrb	r1, [r7, #11]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f964 	bl	800886a <SCSI_CheckAddressRange>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da02      	bge.n	80085ae <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085ac:	e034      	b.n	8008618 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d00a      	beq.n	80085e2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80085d2:	2320      	movs	r3, #32
 80085d4:	2205      	movs	r2, #5
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fd23 	bl	8008022 <SCSI_SenseCode>
      return -1;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085e0:	e01a      	b.n	8008618 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e8:	bf28      	it	cs
 80085ea:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80085ee:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2201      	movs	r2, #1
 80085f4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80085f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008620 <SCSI_Write10+0x1a8>)
 80085f8:	7819      	ldrb	r1, [r3, #0]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f103 0210 	add.w	r2, r3, #16
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f002 f9fd 	bl	800aa02 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008608:	2300      	movs	r3, #0
 800860a:	e005      	b.n	8008618 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	4619      	mov	r1, r3
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f9dd 	bl	80089d0 <SCSI_ProcessWrite>
 8008616:	4603      	mov	r3, r0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	2000006f 	.word	0x2000006f

08008624 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	460b      	mov	r3, r1
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	32b0      	adds	r2, #176	@ 0xb0
 800863c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008640:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <SCSI_Write12+0x2a>
  {
    return -1;
 8008648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800864c:	e0ca      	b.n	80087e4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	7a1b      	ldrb	r3, [r3, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 80c0 	bne.w	80087d8 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008668:	2320      	movs	r3, #32
 800866a:	2205      	movs	r2, #5
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fcd8 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008676:	e0b5      	b.n	80087e4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800867e:	b25b      	sxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	da0a      	bge.n	800869a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800868a:	2320      	movs	r3, #32
 800868c:	2205      	movs	r2, #5
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fcc7 	bl	8008022 <SCSI_SenseCode>
      return -1;
 8008694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008698:	e0a4      	b.n	80087e4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	33b0      	adds	r3, #176	@ 0xb0
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	7afa      	ldrb	r2, [r7, #11]
 80086ae:	4610      	mov	r0, r2
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80086b8:	7af9      	ldrb	r1, [r7, #11]
 80086ba:	233a      	movs	r3, #58	@ 0x3a
 80086bc:	2202      	movs	r2, #2
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff fcaf 	bl	8008022 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2205      	movs	r2, #5
 80086c8:	721a      	strb	r2, [r3, #8]
      return -1;
 80086ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086ce:	e089      	b.n	80087e4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	33b0      	adds	r3, #176	@ 0xb0
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	7afa      	ldrb	r2, [r7, #11]
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80086ee:	7af9      	ldrb	r1, [r7, #11]
 80086f0:	2327      	movs	r3, #39	@ 0x27
 80086f2:	2202      	movs	r2, #2
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff fc94 	bl	8008022 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2205      	movs	r2, #5
 80086fe:	721a      	strb	r2, [r3, #8]
      return -1;
 8008700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008704:	e06e      	b.n	80087e4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3302      	adds	r3, #2
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3303      	adds	r3, #3
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008716:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3304      	adds	r3, #4
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008720:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	3205      	adds	r2, #5
 8008726:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008728:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3306      	adds	r3, #6
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3307      	adds	r3, #7
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008740:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3308      	adds	r3, #8
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800874a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	3209      	adds	r2, #9
 8008750:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008752:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008766:	7af9      	ldrb	r1, [r7, #11]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f87e 	bl	800886a <SCSI_CheckAddressRange>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	da02      	bge.n	800877a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008778:	e034      	b.n	80087e4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	429a      	cmp	r2, r3
 8008796:	d00a      	beq.n	80087ae <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800879e:	2320      	movs	r3, #32
 80087a0:	2205      	movs	r2, #5
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fc3d 	bl	8008022 <SCSI_SenseCode>
      return -1;
 80087a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087ac:	e01a      	b.n	80087e4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b4:	bf28      	it	cs
 80087b6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80087ba:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2201      	movs	r2, #1
 80087c0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80087c2:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <SCSI_Write12+0x1c8>)
 80087c4:	7819      	ldrb	r1, [r3, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f103 0210 	add.w	r2, r3, #16
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f002 f917 	bl	800aa02 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e005      	b.n	80087e4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	4619      	mov	r1, r3
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 f8f7 	bl	80089d0 <SCSI_ProcessWrite>
 80087e2:	4603      	mov	r3, r0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	2000006f 	.word	0x2000006f

080087f0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	460b      	mov	r3, r1
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	32b0      	adds	r2, #176	@ 0xb0
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <SCSI_Verify10+0x2a>
  {
    return -1;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008818:	e023      	b.n	8008862 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3301      	adds	r3, #1
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008828:	7af9      	ldrb	r1, [r7, #11]
 800882a:	2324      	movs	r3, #36	@ 0x24
 800882c:	2205      	movs	r2, #5
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff fbf7 	bl	8008022 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008838:	e013      	b.n	8008862 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008846:	7af9      	ldrb	r1, [r7, #11]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f80e 	bl	800886a <SCSI_CheckAddressRange>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	da02      	bge.n	800885a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8008854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008858:	e003      	b.n	8008862 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2200      	movs	r2, #0
 800885e:	60da      	str	r2, [r3, #12]

  return 0;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	460b      	mov	r3, r1
 8008878:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	32b0      	adds	r2, #176	@ 0xb0
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8008890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008894:	e011      	b.n	80088ba <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	441a      	add	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d908      	bls.n	80088b8 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80088a6:	7af9      	ldrb	r1, [r7, #11]
 80088a8:	2321      	movs	r3, #33	@ 0x21
 80088aa:	2205      	movs	r2, #5
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff fbb8 	bl	8008022 <SCSI_SenseCode>
    return -1;
 80088b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088b6:	e000      	b.n	80088ba <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	32b0      	adds	r2, #176	@ 0xb0
 80088da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088de:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <SCSI_ProcessRead+0x28>
  {
    return -1;
 80088e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088ea:	e06a      	b.n	80089c2 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80088f8:	fb02 f303 	mul.w	r3, r2, r3
 80088fc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008904:	bf28      	it	cs
 8008906:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800890a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	33b0      	adds	r3, #176	@ 0xb0
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	691c      	ldr	r4, [r3, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f103 0110 	add.w	r1, r3, #16
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008930:	4618      	mov	r0, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008938:	b29b      	uxth	r3, r3
 800893a:	78f8      	ldrb	r0, [r7, #3]
 800893c:	47a0      	blx	r4
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	da08      	bge.n	8008956 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008944:	78f9      	ldrb	r1, [r7, #3]
 8008946:	2311      	movs	r3, #17
 8008948:	2204      	movs	r2, #4
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fb69 	bl	8008022 <SCSI_SenseCode>
    return -1;
 8008950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008954:	e035      	b.n	80089c2 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8008956:	4b1d      	ldr	r3, [pc, #116]	@ (80089cc <SCSI_ProcessRead+0x108>)
 8008958:	7819      	ldrb	r1, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f103 0210 	add.w	r2, r3, #16
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f002 f82c 	bl	800a9c0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008974:	4619      	mov	r1, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	fbb3 f3f1 	udiv	r3, r3, r1
 800897c:	441a      	add	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008990:	4619      	mov	r1, r3
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	fbb3 f3f1 	udiv	r3, r3, r1
 8008998:	1ad2      	subs	r2, r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d102      	bne.n	80089c0 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2203      	movs	r2, #3
 80089be:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd90      	pop	{r4, r7, pc}
 80089ca:	bf00      	nop
 80089cc:	2000006e 	.word	0x2000006e

080089d0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32b0      	adds	r2, #176	@ 0xb0
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d102      	bne.n	80089f8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089f6:	e07a      	b.n	8008aee <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a10:	bf28      	it	cs
 8008a12:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008a16:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	33b0      	adds	r3, #176	@ 0xb0
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	695c      	ldr	r4, [r3, #20]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f103 0110 	add.w	r1, r3, #16
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	78f8      	ldrb	r0, [r7, #3]
 8008a48:	47a0      	blx	r4
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da08      	bge.n	8008a62 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008a50:	78f9      	ldrb	r1, [r7, #3]
 8008a52:	2303      	movs	r3, #3
 8008a54:	2204      	movs	r2, #4
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff fae3 	bl	8008022 <SCSI_SenseCode>
    return -1;
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a60:	e045      	b.n	8008aee <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008a6e:	4619      	mov	r1, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a76:	441a      	add	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a92:	1ad2      	subs	r2, r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d104      	bne.n	8008abe <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fe fce8 	bl	800748c <MSC_BOT_SendCSW>
 8008abc:	e016      	b.n	8008aec <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008aca:	fb02 f303 	mul.w	r3, r2, r3
 8008ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad2:	bf28      	it	cs
 8008ad4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008ad8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008ada:	4b07      	ldr	r3, [pc, #28]	@ (8008af8 <SCSI_ProcessWrite+0x128>)
 8008adc:	7819      	ldrb	r1, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f103 0210 	add.w	r2, r3, #16
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 ff8b 	bl	800aa02 <USBD_LL_PrepareReceive>
  }

  return 0;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd90      	pop	{r4, r7, pc}
 8008af6:	bf00      	nop
 8008af8:	2000006f 	.word	0x2000006f

08008afc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b18:	e013      	b.n	8008b42 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8008b1a:	8afa      	ldrh	r2, [r7, #22]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008b20:	e00b      	b.n	8008b3a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008b22:	8afb      	ldrh	r3, [r7, #22]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008b28:	8afb      	ldrh	r3, [r7, #22]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	441a      	add	r2, r3
 8008b2e:	8afb      	ldrh	r3, [r7, #22]
 8008b30:	7811      	ldrb	r1, [r2, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	460a      	mov	r2, r1
 8008b38:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008b3a:	8afb      	ldrh	r3, [r7, #22]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f0      	bne.n	8008b22 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	371c      	adds	r7, #28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b086      	sub	sp, #24
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e01f      	b.n	8008ba6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	79fa      	ldrb	r2, [r7, #7]
 8008b98:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f001 fdbc 	bl	800a718 <USBD_LL_Init>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e025      	b.n	8008c12 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	32ae      	adds	r2, #174	@ 0xae
 8008bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00f      	beq.n	8008c02 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	32ae      	adds	r2, #174	@ 0xae
 8008bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	f107 020e 	add.w	r2, r7, #14
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	4798      	blx	r3
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fdc4 	bl	800a7b0 <USBD_LL_Start>
 8008c28:	4603      	mov	r3, r0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d009      	beq.n	8008c76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
 8008c72:	4603      	mov	r3, r0
 8008c74:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	4798      	blx	r3
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 f90b 	bl	8009ee2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d01a      	beq.n	8008d26 <USBD_LL_SetupStage+0x72>
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d822      	bhi.n	8008d3a <USBD_LL_SetupStage+0x86>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <USBD_LL_SetupStage+0x4a>
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d00a      	beq.n	8008d12 <USBD_LL_SetupStage+0x5e>
 8008cfc:	e01d      	b.n	8008d3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fb62 	bl	80093d0 <USBD_StdDevReq>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	e020      	b.n	8008d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fbca 	bl	80094b4 <USBD_StdItfReq>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
      break;
 8008d24:	e016      	b.n	8008d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fc2c 	bl	800958c <USBD_StdEPReq>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	e00c      	b.n	8008d54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 fdb0 	bl	800a8ae <USBD_LL_StallEP>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]
      break;
 8008d52:	bf00      	nop
  }

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	460b      	mov	r3, r1
 8008d68:	607a      	str	r2, [r7, #4]
 8008d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d16e      	bne.n	8008e54 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	f040 8098 	bne.w	8008eba <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d913      	bls.n	8008dbe <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	68da      	ldr	r2, [r3, #12]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bf28      	it	cs
 8008db0:	4613      	movcs	r3, r2
 8008db2:	461a      	mov	r2, r3
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f001 f976 	bl	800a0a8 <USBD_CtlContinueRx>
 8008dbc:	e07d      	b.n	8008eba <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dc4:	f003 031f 	and.w	r3, r3, #31
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d014      	beq.n	8008df6 <USBD_LL_DataOutStage+0x98>
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d81d      	bhi.n	8008e0c <USBD_LL_DataOutStage+0xae>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <USBD_LL_DataOutStage+0x7c>
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d003      	beq.n	8008de0 <USBD_LL_DataOutStage+0x82>
 8008dd8:	e018      	b.n	8008e0c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8008dde:	e018      	b.n	8008e12 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	4619      	mov	r1, r3
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fa64 	bl	80092b8 <USBD_CoreFindIF>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75bb      	strb	r3, [r7, #22]
            break;
 8008df4:	e00d      	b.n	8008e12 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fa66 	bl	80092d2 <USBD_CoreFindEP>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75bb      	strb	r3, [r7, #22]
            break;
 8008e0a:	e002      	b.n	8008e12 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e10:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e12:	7dbb      	ldrb	r3, [r7, #22]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d119      	bne.n	8008e4c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d113      	bne.n	8008e4c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e24:	7dba      	ldrb	r2, [r7, #22]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	32ae      	adds	r2, #174	@ 0xae
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e34:	7dba      	ldrb	r2, [r7, #22]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e3c:	7dba      	ldrb	r2, [r7, #22]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	32ae      	adds	r2, #174	@ 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f001 f93c 	bl	800a0ca <USBD_CtlSendStatus>
 8008e52:	e032      	b.n	8008eba <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fa37 	bl	80092d2 <USBD_CoreFindEP>
 8008e64:	4603      	mov	r3, r0
 8008e66:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e68:	7dbb      	ldrb	r3, [r7, #22]
 8008e6a:	2bff      	cmp	r3, #255	@ 0xff
 8008e6c:	d025      	beq.n	8008eba <USBD_LL_DataOutStage+0x15c>
 8008e6e:	7dbb      	ldrb	r3, [r7, #22]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d122      	bne.n	8008eba <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d117      	bne.n	8008eb0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e80:	7dba      	ldrb	r2, [r7, #22]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	32ae      	adds	r2, #174	@ 0xae
 8008e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00f      	beq.n	8008eb0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e90:	7dba      	ldrb	r2, [r7, #22]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e98:	7dba      	ldrb	r2, [r7, #22]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	32ae      	adds	r2, #174	@ 0xae
 8008e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	7afa      	ldrb	r2, [r7, #11]
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	4798      	blx	r3
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	e000      	b.n	8008ebc <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d16f      	bne.n	8008fb8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3314      	adds	r3, #20
 8008edc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d15a      	bne.n	8008f9e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d914      	bls.n	8008f1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	1ad2      	subs	r2, r2, r3
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	461a      	mov	r2, r3
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f001 f8bb 	bl	800a086 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f10:	2300      	movs	r3, #0
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 fd73 	bl	800aa02 <USBD_LL_PrepareReceive>
 8008f1c:	e03f      	b.n	8008f9e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d11c      	bne.n	8008f64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d316      	bcc.n	8008f64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d20f      	bcs.n	8008f64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f44:	2200      	movs	r2, #0
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f001 f89c 	bl	800a086 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f56:	2300      	movs	r3, #0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f001 fd50 	bl	800aa02 <USBD_LL_PrepareReceive>
 8008f62:	e01c      	b.n	8008f9e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d10f      	bne.n	8008f90 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f90:	2180      	movs	r1, #128	@ 0x80
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f001 fc8b 	bl	800a8ae <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f001 f8a9 	bl	800a0f0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d03a      	beq.n	800901e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f7ff fe42 	bl	8008c32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fb6:	e032      	b.n	800901e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 f985 	bl	80092d2 <USBD_CoreFindEP>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	2bff      	cmp	r3, #255	@ 0xff
 8008fd0:	d025      	beq.n	800901e <USBD_LL_DataInStage+0x15a>
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d122      	bne.n	800901e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d11c      	bne.n	800901e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fe4:	7dfa      	ldrb	r2, [r7, #23]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	32ae      	adds	r2, #174	@ 0xae
 8008fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d014      	beq.n	800901e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ff4:	7dfa      	ldrb	r2, [r7, #23]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ffc:	7dfa      	ldrb	r2, [r7, #23]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	32ae      	adds	r2, #174	@ 0xae
 8009002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	7afa      	ldrb	r2, [r7, #11]
 800900a:	4611      	mov	r1, r2
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	4798      	blx	r3
 8009010:	4603      	mov	r3, r0
 8009012:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009014:	7dbb      	ldrb	r3, [r7, #22]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800901a:	7dbb      	ldrb	r3, [r7, #22]
 800901c:	e000      	b.n	8009020 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009060:	2b00      	cmp	r3, #0
 8009062:	d014      	beq.n	800908e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00e      	beq.n	800908e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6852      	ldr	r2, [r2, #4]
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	4611      	mov	r1, r2
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	4798      	blx	r3
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800908a:	2303      	movs	r3, #3
 800908c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800908e:	2340      	movs	r3, #64	@ 0x40
 8009090:	2200      	movs	r2, #0
 8009092:	2100      	movs	r1, #0
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fba6 	bl	800a7e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2240      	movs	r2, #64	@ 0x40
 80090a6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090aa:	2340      	movs	r3, #64	@ 0x40
 80090ac:	2200      	movs	r2, #0
 80090ae:	2180      	movs	r1, #128	@ 0x80
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fb98 	bl	800a7e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2240      	movs	r2, #64	@ 0x40
 80090c0:	621a      	str	r2, [r3, #32]

  return ret;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	d006      	beq.n	800910e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009106:	b2da      	uxtb	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2204      	movs	r2, #4
 8009112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b04      	cmp	r3, #4
 8009136:	d106      	bne.n	8009146 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800913e:	b2da      	uxtb	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b03      	cmp	r3, #3
 8009166:	d110      	bne.n	800918a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32ae      	adds	r2, #174	@ 0xae
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e01c      	b.n	80091f0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d115      	bne.n	80091ee <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	32ae      	adds	r2, #174	@ 0xae
 80091cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	32ae      	adds	r2, #174	@ 0xae
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	78fa      	ldrb	r2, [r7, #3]
 80091e8:	4611      	mov	r1, r2
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32ae      	adds	r2, #174	@ 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	e01c      	b.n	8009254 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b03      	cmp	r3, #3
 8009224:	d115      	bne.n	8009252 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32ae      	adds	r2, #174	@ 0xae
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	32ae      	adds	r2, #174	@ 0xae
 8009244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00e      	beq.n	80092ae <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6852      	ldr	r2, [r2, #4]
 800929c:	b2d2      	uxtb	r2, r2
 800929e:	4611      	mov	r1, r2
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	4798      	blx	r3
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80092aa:	2303      	movs	r3, #3
 80092ac:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	885b      	ldrh	r3, [r3, #2]
 8009308:	b29b      	uxth	r3, r3
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	7812      	ldrb	r2, [r2, #0]
 800930e:	4293      	cmp	r3, r2
 8009310:	d91f      	bls.n	8009352 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009318:	e013      	b.n	8009342 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800931a:	f107 030a 	add.w	r3, r7, #10
 800931e:	4619      	mov	r1, r3
 8009320:	6978      	ldr	r0, [r7, #20]
 8009322:	f000 f81b 	bl	800935c <USBD_GetNextDesc>
 8009326:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b05      	cmp	r3, #5
 800932e:	d108      	bne.n	8009342 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	789b      	ldrb	r3, [r3, #2]
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	429a      	cmp	r2, r3
 800933c:	d008      	beq.n	8009350 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	885b      	ldrh	r3, [r3, #2]
 8009346:	b29a      	uxth	r2, r3
 8009348:	897b      	ldrh	r3, [r7, #10]
 800934a:	429a      	cmp	r2, r3
 800934c:	d8e5      	bhi.n	800931a <USBD_GetEpDesc+0x2e>
 800934e:	e000      	b.n	8009352 <USBD_GetEpDesc+0x66>
          break;
 8009350:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009352:	693b      	ldr	r3, [r7, #16]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	7812      	ldrb	r2, [r2, #0]
 8009372:	4413      	add	r3, r2
 8009374:	b29a      	uxth	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009386:	68fb      	ldr	r3, [r7, #12]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	3301      	adds	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093b2:	8a3b      	ldrh	r3, [r7, #16]
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	b21a      	sxth	r2, r3
 80093b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093bc:	4313      	orrs	r3, r2
 80093be:	b21b      	sxth	r3, r3
 80093c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093c2:	89fb      	ldrh	r3, [r7, #14]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093e6:	2b40      	cmp	r3, #64	@ 0x40
 80093e8:	d005      	beq.n	80093f6 <USBD_StdDevReq+0x26>
 80093ea:	2b40      	cmp	r3, #64	@ 0x40
 80093ec:	d857      	bhi.n	800949e <USBD_StdDevReq+0xce>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <USBD_StdDevReq+0x42>
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	d153      	bne.n	800949e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	32ae      	adds	r2, #174	@ 0xae
 8009400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]
      break;
 8009410:	e04a      	b.n	80094a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b09      	cmp	r3, #9
 8009418:	d83b      	bhi.n	8009492 <USBD_StdDevReq+0xc2>
 800941a:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <USBD_StdDevReq+0x50>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009475 	.word	0x08009475
 8009424:	08009489 	.word	0x08009489
 8009428:	08009493 	.word	0x08009493
 800942c:	0800947f 	.word	0x0800947f
 8009430:	08009493 	.word	0x08009493
 8009434:	08009453 	.word	0x08009453
 8009438:	08009449 	.word	0x08009449
 800943c:	08009493 	.word	0x08009493
 8009440:	0800946b 	.word	0x0800946b
 8009444:	0800945d 	.word	0x0800945d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa3c 	bl	80098c8 <USBD_GetDescriptor>
          break;
 8009450:	e024      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fba1 	bl	8009b9c <USBD_SetAddress>
          break;
 800945a:	e01f      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fbe0 	bl	8009c24 <USBD_SetConfig>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
          break;
 8009468:	e018      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fc83 	bl	8009d78 <USBD_GetConfig>
          break;
 8009472:	e013      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fcb4 	bl	8009de4 <USBD_GetStatus>
          break;
 800947c:	e00e      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fce3 	bl	8009e4c <USBD_SetFeature>
          break;
 8009486:	e009      	b.n	800949c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fd07 	bl	8009e9e <USBD_ClrFeature>
          break;
 8009490:	e004      	b.n	800949c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fd5e 	bl	8009f56 <USBD_CtlError>
          break;
 800949a:	bf00      	nop
      }
      break;
 800949c:	e004      	b.n	80094a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fd58 	bl	8009f56 <USBD_CtlError>
      break;
 80094a6:	bf00      	nop
  }

  return ret;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop

080094b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094ca:	2b40      	cmp	r3, #64	@ 0x40
 80094cc:	d005      	beq.n	80094da <USBD_StdItfReq+0x26>
 80094ce:	2b40      	cmp	r3, #64	@ 0x40
 80094d0:	d852      	bhi.n	8009578 <USBD_StdItfReq+0xc4>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <USBD_StdItfReq+0x26>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d14e      	bne.n	8009578 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d840      	bhi.n	800956a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	889b      	ldrh	r3, [r3, #4]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d836      	bhi.n	8009560 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	889b      	ldrh	r3, [r3, #4]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fedc 	bl	80092b8 <USBD_CoreFindIF>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	2bff      	cmp	r3, #255	@ 0xff
 8009508:	d01d      	beq.n	8009546 <USBD_StdItfReq+0x92>
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d11a      	bne.n	8009546 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009510:	7bba      	ldrb	r2, [r7, #14]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	32ae      	adds	r2, #174	@ 0xae
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00f      	beq.n	8009540 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009520:	7bba      	ldrb	r2, [r7, #14]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009528:	7bba      	ldrb	r2, [r7, #14]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	32ae      	adds	r2, #174	@ 0xae
 800952e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800953e:	e004      	b.n	800954a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009544:	e001      	b.n	800954a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	88db      	ldrh	r3, [r3, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d110      	bne.n	8009574 <USBD_StdItfReq+0xc0>
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10d      	bne.n	8009574 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fdb6 	bl	800a0ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800955e:	e009      	b.n	8009574 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fcf7 	bl	8009f56 <USBD_CtlError>
          break;
 8009568:	e004      	b.n	8009574 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fcf2 	bl	8009f56 <USBD_CtlError>
          break;
 8009572:	e000      	b.n	8009576 <USBD_StdItfReq+0xc2>
          break;
 8009574:	bf00      	nop
      }
      break;
 8009576:	e004      	b.n	8009582 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fceb 	bl	8009f56 <USBD_CtlError>
      break;
 8009580:	bf00      	nop
  }

  return ret;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095a8:	2b40      	cmp	r3, #64	@ 0x40
 80095aa:	d007      	beq.n	80095bc <USBD_StdEPReq+0x30>
 80095ac:	2b40      	cmp	r3, #64	@ 0x40
 80095ae:	f200 817f 	bhi.w	80098b0 <USBD_StdEPReq+0x324>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d02a      	beq.n	800960c <USBD_StdEPReq+0x80>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	f040 817a 	bne.w	80098b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fe86 	bl	80092d2 <USBD_CoreFindEP>
 80095c6:	4603      	mov	r3, r0
 80095c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ca:	7b7b      	ldrb	r3, [r7, #13]
 80095cc:	2bff      	cmp	r3, #255	@ 0xff
 80095ce:	f000 8174 	beq.w	80098ba <USBD_StdEPReq+0x32e>
 80095d2:	7b7b      	ldrb	r3, [r7, #13]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 8170 	bne.w	80098ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095da:	7b7a      	ldrb	r2, [r7, #13]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095e2:	7b7a      	ldrb	r2, [r7, #13]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	32ae      	adds	r2, #174	@ 0xae
 80095e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8163 	beq.w	80098ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095f4:	7b7a      	ldrb	r2, [r7, #13]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32ae      	adds	r2, #174	@ 0xae
 80095fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800960a:	e156      	b.n	80098ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b03      	cmp	r3, #3
 8009612:	d008      	beq.n	8009626 <USBD_StdEPReq+0x9a>
 8009614:	2b03      	cmp	r3, #3
 8009616:	f300 8145 	bgt.w	80098a4 <USBD_StdEPReq+0x318>
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 809b 	beq.w	8009756 <USBD_StdEPReq+0x1ca>
 8009620:	2b01      	cmp	r3, #1
 8009622:	d03c      	beq.n	800969e <USBD_StdEPReq+0x112>
 8009624:	e13e      	b.n	80098a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b02      	cmp	r3, #2
 8009630:	d002      	beq.n	8009638 <USBD_StdEPReq+0xac>
 8009632:	2b03      	cmp	r3, #3
 8009634:	d016      	beq.n	8009664 <USBD_StdEPReq+0xd8>
 8009636:	e02c      	b.n	8009692 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <USBD_StdEPReq+0xce>
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b80      	cmp	r3, #128	@ 0x80
 8009642:	d00a      	beq.n	800965a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 f930 	bl	800a8ae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800964e:	2180      	movs	r1, #128	@ 0x80
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 f92c 	bl	800a8ae <USBD_LL_StallEP>
 8009656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009658:	e020      	b.n	800969c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc7a 	bl	8009f56 <USBD_CtlError>
              break;
 8009662:	e01b      	b.n	800969c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10e      	bne.n	800968a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <USBD_StdEPReq+0xfe>
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b80      	cmp	r3, #128	@ 0x80
 8009676:	d008      	beq.n	800968a <USBD_StdEPReq+0xfe>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	88db      	ldrh	r3, [r3, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f912 	bl	800a8ae <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fd1d 	bl	800a0ca <USBD_CtlSendStatus>

              break;
 8009690:	e004      	b.n	800969c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc5e 	bl	8009f56 <USBD_CtlError>
              break;
 800969a:	bf00      	nop
          }
          break;
 800969c:	e107      	b.n	80098ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d002      	beq.n	80096b0 <USBD_StdEPReq+0x124>
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d016      	beq.n	80096dc <USBD_StdEPReq+0x150>
 80096ae:	e04b      	b.n	8009748 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00d      	beq.n	80096d2 <USBD_StdEPReq+0x146>
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d00a      	beq.n	80096d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f8f4 	bl	800a8ae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096c6:	2180      	movs	r1, #128	@ 0x80
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 f8f0 	bl	800a8ae <USBD_LL_StallEP>
 80096ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096d0:	e040      	b.n	8009754 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc3e 	bl	8009f56 <USBD_CtlError>
              break;
 80096da:	e03b      	b.n	8009754 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	885b      	ldrh	r3, [r3, #2]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d136      	bne.n	8009752 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 f8fa 	bl	800a8ec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fce6 	bl	800a0ca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fde5 	bl	80092d2 <USBD_CoreFindEP>
 8009708:	4603      	mov	r3, r0
 800970a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800970c:	7b7b      	ldrb	r3, [r7, #13]
 800970e:	2bff      	cmp	r3, #255	@ 0xff
 8009710:	d01f      	beq.n	8009752 <USBD_StdEPReq+0x1c6>
 8009712:	7b7b      	ldrb	r3, [r7, #13]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d11c      	bne.n	8009752 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009718:	7b7a      	ldrb	r2, [r7, #13]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009720:	7b7a      	ldrb	r2, [r7, #13]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	32ae      	adds	r2, #174	@ 0xae
 8009726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d010      	beq.n	8009752 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009730:	7b7a      	ldrb	r2, [r7, #13]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32ae      	adds	r2, #174	@ 0xae
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	4798      	blx	r3
 8009742:	4603      	mov	r3, r0
 8009744:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009746:	e004      	b.n	8009752 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fc03 	bl	8009f56 <USBD_CtlError>
              break;
 8009750:	e000      	b.n	8009754 <USBD_StdEPReq+0x1c8>
              break;
 8009752:	bf00      	nop
          }
          break;
 8009754:	e0ab      	b.n	80098ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b02      	cmp	r3, #2
 8009760:	d002      	beq.n	8009768 <USBD_StdEPReq+0x1dc>
 8009762:	2b03      	cmp	r3, #3
 8009764:	d032      	beq.n	80097cc <USBD_StdEPReq+0x240>
 8009766:	e097      	b.n	8009898 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <USBD_StdEPReq+0x1f2>
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	2b80      	cmp	r3, #128	@ 0x80
 8009772:	d004      	beq.n	800977e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fbed 	bl	8009f56 <USBD_CtlError>
                break;
 800977c:	e091      	b.n	80098a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800977e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da0b      	bge.n	800979e <USBD_StdEPReq+0x212>
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	3310      	adds	r3, #16
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4413      	add	r3, r2
 800979a:	3304      	adds	r3, #4
 800979c:	e00b      	b.n	80097b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	3304      	adds	r3, #4
 80097b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2202      	movs	r2, #2
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fc43 	bl	800a050 <USBD_CtlSendData>
              break;
 80097ca:	e06a      	b.n	80098a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da11      	bge.n	80097f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	f003 020f 	and.w	r2, r3, #15
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	3324      	adds	r3, #36	@ 0x24
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d117      	bne.n	800981e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fbb0 	bl	8009f56 <USBD_CtlError>
                  break;
 80097f6:	e054      	b.n	80098a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	f003 020f 	and.w	r2, r3, #15
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fb9d 	bl	8009f56 <USBD_CtlError>
                  break;
 800981c:	e041      	b.n	80098a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800981e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009822:	2b00      	cmp	r3, #0
 8009824:	da0b      	bge.n	800983e <USBD_StdEPReq+0x2b2>
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	3310      	adds	r3, #16
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	4413      	add	r3, r2
 800983a:	3304      	adds	r3, #4
 800983c:	e00b      	b.n	8009856 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4413      	add	r3, r2
 8009854:	3304      	adds	r3, #4
 8009856:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <USBD_StdEPReq+0x2d8>
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b80      	cmp	r3, #128	@ 0x80
 8009862:	d103      	bne.n	800986c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e00e      	b.n	800988a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f85a 	bl	800a92a <USBD_LL_IsStallEP>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2201      	movs	r2, #1
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	e002      	b.n	800988a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2202      	movs	r2, #2
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fbdd 	bl	800a050 <USBD_CtlSendData>
              break;
 8009896:	e004      	b.n	80098a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fb5b 	bl	8009f56 <USBD_CtlError>
              break;
 80098a0:	bf00      	nop
          }
          break;
 80098a2:	e004      	b.n	80098ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fb55 	bl	8009f56 <USBD_CtlError>
          break;
 80098ac:	bf00      	nop
      }
      break;
 80098ae:	e005      	b.n	80098bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fb4f 	bl	8009f56 <USBD_CtlError>
      break;
 80098b8:	e000      	b.n	80098bc <USBD_StdEPReq+0x330>
      break;
 80098ba:	bf00      	nop
  }

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	0a1b      	lsrs	r3, r3, #8
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3b01      	subs	r3, #1
 80098e8:	2b06      	cmp	r3, #6
 80098ea:	f200 8128 	bhi.w	8009b3e <USBD_GetDescriptor+0x276>
 80098ee:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <USBD_GetDescriptor+0x2c>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009911 	.word	0x08009911
 80098f8:	08009929 	.word	0x08009929
 80098fc:	08009969 	.word	0x08009969
 8009900:	08009b3f 	.word	0x08009b3f
 8009904:	08009b3f 	.word	0x08009b3f
 8009908:	08009adf 	.word	0x08009adf
 800990c:	08009b0b 	.word	0x08009b0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	7c12      	ldrb	r2, [r2, #16]
 800991c:	f107 0108 	add.w	r1, r7, #8
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	60f8      	str	r0, [r7, #12]
      break;
 8009926:	e112      	b.n	8009b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	7c1b      	ldrb	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10d      	bne.n	800994c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009938:	f107 0208 	add.w	r2, r7, #8
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
 8009940:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	2202      	movs	r2, #2
 8009948:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800994a:	e100      	b.n	8009b4e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	f107 0208 	add.w	r2, r7, #8
 8009958:	4610      	mov	r0, r2
 800995a:	4798      	blx	r3
 800995c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3301      	adds	r3, #1
 8009962:	2202      	movs	r2, #2
 8009964:	701a      	strb	r2, [r3, #0]
      break;
 8009966:	e0f2      	b.n	8009b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	885b      	ldrh	r3, [r3, #2]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b05      	cmp	r3, #5
 8009970:	f200 80ac 	bhi.w	8009acc <USBD_GetDescriptor+0x204>
 8009974:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <USBD_GetDescriptor+0xb4>)
 8009976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997a:	bf00      	nop
 800997c:	08009995 	.word	0x08009995
 8009980:	080099c9 	.word	0x080099c9
 8009984:	080099fd 	.word	0x080099fd
 8009988:	08009a31 	.word	0x08009a31
 800998c:	08009a65 	.word	0x08009a65
 8009990:	08009a99 	.word	0x08009a99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	7c12      	ldrb	r2, [r2, #16]
 80099ac:	f107 0108 	add.w	r1, r7, #8
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b6:	e091      	b.n	8009adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 facb 	bl	8009f56 <USBD_CtlError>
            err++;
 80099c0:	7afb      	ldrb	r3, [r7, #11]
 80099c2:	3301      	adds	r3, #1
 80099c4:	72fb      	strb	r3, [r7, #11]
          break;
 80099c6:	e089      	b.n	8009adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ea:	e077      	b.n	8009adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fab1 	bl	8009f56 <USBD_CtlError>
            err++;
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	3301      	adds	r3, #1
 80099f8:	72fb      	strb	r3, [r7, #11]
          break;
 80099fa:	e06f      	b.n	8009adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1e:	e05d      	b.n	8009adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa97 	bl	8009f56 <USBD_CtlError>
            err++;
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2e:	e055      	b.n	8009adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	7c12      	ldrb	r2, [r2, #16]
 8009a48:	f107 0108 	add.w	r1, r7, #8
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a52:	e043      	b.n	8009adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fa7d 	bl	8009f56 <USBD_CtlError>
            err++;
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	72fb      	strb	r3, [r7, #11]
          break;
 8009a62:	e03b      	b.n	8009adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	7c12      	ldrb	r2, [r2, #16]
 8009a7c:	f107 0108 	add.w	r1, r7, #8
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
 8009a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a86:	e029      	b.n	8009adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa63 	bl	8009f56 <USBD_CtlError>
            err++;
 8009a90:	7afb      	ldrb	r3, [r7, #11]
 8009a92:	3301      	adds	r3, #1
 8009a94:	72fb      	strb	r3, [r7, #11]
          break;
 8009a96:	e021      	b.n	8009adc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7c12      	ldrb	r2, [r2, #16]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aba:	e00f      	b.n	8009adc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa49 	bl	8009f56 <USBD_CtlError>
            err++;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aca:	e007      	b.n	8009adc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa41 	bl	8009f56 <USBD_CtlError>
          err++;
 8009ad4:	7afb      	ldrb	r3, [r7, #11]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ada:	bf00      	nop
      }
      break;
 8009adc:	e037      	b.n	8009b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	7c1b      	ldrb	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aee:	f107 0208 	add.w	r2, r7, #8
 8009af2:	4610      	mov	r0, r2
 8009af4:	4798      	blx	r3
 8009af6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009af8:	e029      	b.n	8009b4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fa2a 	bl	8009f56 <USBD_CtlError>
        err++;
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	3301      	adds	r3, #1
 8009b06:	72fb      	strb	r3, [r7, #11]
      break;
 8009b08:	e021      	b.n	8009b4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	7c1b      	ldrb	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10d      	bne.n	8009b2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	f107 0208 	add.w	r2, r7, #8
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4798      	blx	r3
 8009b22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3301      	adds	r3, #1
 8009b28:	2207      	movs	r2, #7
 8009b2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b2c:	e00f      	b.n	8009b4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa10 	bl	8009f56 <USBD_CtlError>
        err++;
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b3c:	e007      	b.n	8009b4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fa08 	bl	8009f56 <USBD_CtlError>
      err++;
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b4c:	bf00      	nop
  }

  if (err != 0U)
 8009b4e:	7afb      	ldrb	r3, [r7, #11]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d11e      	bne.n	8009b92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	88db      	ldrh	r3, [r3, #6]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d016      	beq.n	8009b8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b5c:	893b      	ldrh	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00e      	beq.n	8009b80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	88da      	ldrh	r2, [r3, #6]
 8009b66:	893b      	ldrh	r3, [r7, #8]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	bf28      	it	cs
 8009b6c:	4613      	movcs	r3, r2
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b72:	893b      	ldrh	r3, [r7, #8]
 8009b74:	461a      	mov	r2, r3
 8009b76:	68f9      	ldr	r1, [r7, #12]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fa69 	bl	800a050 <USBD_CtlSendData>
 8009b7e:	e009      	b.n	8009b94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f9e7 	bl	8009f56 <USBD_CtlError>
 8009b88:	e004      	b.n	8009b94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa9d 	bl	800a0ca <USBD_CtlSendStatus>
 8009b90:	e000      	b.n	8009b94 <USBD_GetDescriptor+0x2cc>
    return;
 8009b92:	bf00      	nop
  }
}
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop

08009b9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	889b      	ldrh	r3, [r3, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d131      	bne.n	8009c12 <USBD_SetAddress+0x76>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d12d      	bne.n	8009c12 <USBD_SetAddress+0x76>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bbc:	d829      	bhi.n	8009c12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d104      	bne.n	8009be0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f9bc 	bl	8009f56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bde:	e01d      	b.n	8009c1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7bfa      	ldrb	r2, [r7, #15]
 8009be4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fec8 	bl	800a982 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa69 	bl	800a0ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d004      	beq.n	8009c08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2202      	movs	r2, #2
 8009c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c06:	e009      	b.n	8009c1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c10:	e004      	b.n	8009c1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f99e 	bl	8009f56 <USBD_CtlError>
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	885b      	ldrh	r3, [r3, #2]
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	4b4e      	ldr	r3, [pc, #312]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009c3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d905      	bls.n	8009c50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f985 	bl	8009f56 <USBD_CtlError>
    return USBD_FAIL;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e08c      	b.n	8009d6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d002      	beq.n	8009c62 <USBD_SetConfig+0x3e>
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d029      	beq.n	8009cb4 <USBD_SetConfig+0x90>
 8009c60:	e075      	b.n	8009d4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c62:	4b44      	ldr	r3, [pc, #272]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d020      	beq.n	8009cac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c6a:	4b42      	ldr	r3, [pc, #264]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c74:	4b3f      	ldr	r3, [pc, #252]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe ffe4 	bl	8008c48 <USBD_SetClassConfig>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d008      	beq.n	8009c9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f962 	bl	8009f56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c9a:	e065      	b.n	8009d68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa14 	bl	800a0ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009caa:	e05d      	b.n	8009d68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa0c 	bl	800a0ca <USBD_CtlSendStatus>
      break;
 8009cb2:	e059      	b.n	8009d68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d112      	bne.n	8009ce2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cce:	4b29      	ldr	r3, [pc, #164]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7fe ffd3 	bl	8008c80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f9f5 	bl	800a0ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ce0:	e042      	b.n	8009d68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009ce2:	4b24      	ldr	r3, [pc, #144]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d02a      	beq.n	8009d46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7fe ffc1 	bl	8008c80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d08:	4b1a      	ldr	r3, [pc, #104]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7fe ff9a 	bl	8008c48 <USBD_SetClassConfig>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00f      	beq.n	8009d3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f918 	bl	8009f56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7fe ffa6 	bl	8008c80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d3c:	e014      	b.n	8009d68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9c3 	bl	800a0ca <USBD_CtlSendStatus>
      break;
 8009d44:	e010      	b.n	8009d68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9bf 	bl	800a0ca <USBD_CtlSendStatus>
      break;
 8009d4c:	e00c      	b.n	8009d68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f900 	bl	8009f56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d56:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <USBD_SetConfig+0x150>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe ff8f 	bl	8008c80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d62:	2303      	movs	r3, #3
 8009d64:	73fb      	strb	r3, [r7, #15]
      break;
 8009d66:	bf00      	nop
  }

  return ret;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	2000034c 	.word	0x2000034c

08009d78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	88db      	ldrh	r3, [r3, #6]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d004      	beq.n	8009d94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f8e2 	bl	8009f56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d92:	e023      	b.n	8009ddc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	dc02      	bgt.n	8009da6 <USBD_GetConfig+0x2e>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	dc03      	bgt.n	8009dac <USBD_GetConfig+0x34>
 8009da4:	e015      	b.n	8009dd2 <USBD_GetConfig+0x5a>
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d00b      	beq.n	8009dc2 <USBD_GetConfig+0x4a>
 8009daa:	e012      	b.n	8009dd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3308      	adds	r3, #8
 8009db6:	2201      	movs	r2, #1
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f948 	bl	800a050 <USBD_CtlSendData>
        break;
 8009dc0:	e00c      	b.n	8009ddc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f940 	bl	800a050 <USBD_CtlSendData>
        break;
 8009dd0:	e004      	b.n	8009ddc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f8be 	bl	8009f56 <USBD_CtlError>
        break;
 8009dda:	bf00      	nop
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d81e      	bhi.n	8009e3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	88db      	ldrh	r3, [r3, #6]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d004      	beq.n	8009e0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f8a5 	bl	8009f56 <USBD_CtlError>
        break;
 8009e0c:	e01a      	b.n	8009e44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d005      	beq.n	8009e2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f043 0202 	orr.w	r2, r3, #2
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	330c      	adds	r3, #12
 8009e2e:	2202      	movs	r2, #2
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f90c 	bl	800a050 <USBD_CtlSendData>
      break;
 8009e38:	e004      	b.n	8009e44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f88a 	bl	8009f56 <USBD_CtlError>
      break;
 8009e42:	bf00      	nop
  }
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d107      	bne.n	8009e6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f92f 	bl	800a0ca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e6c:	e013      	b.n	8009e96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	885b      	ldrh	r3, [r3, #2]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d10b      	bne.n	8009e8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	889b      	ldrh	r3, [r3, #4]
 8009e7a:	0a1b      	lsrs	r3, r3, #8
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f91f 	bl	800a0ca <USBD_CtlSendStatus>
}
 8009e8c:	e003      	b.n	8009e96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f860 	bl	8009f56 <USBD_CtlError>
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d80b      	bhi.n	8009ece <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d10c      	bne.n	8009ed8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f8ff 	bl	800a0ca <USBD_CtlSendStatus>
      }
      break;
 8009ecc:	e004      	b.n	8009ed8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f840 	bl	8009f56 <USBD_CtlError>
      break;
 8009ed6:	e000      	b.n	8009eda <USBD_ClrFeature+0x3c>
      break;
 8009ed8:	bf00      	nop
  }
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	781a      	ldrb	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	781a      	ldrb	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f7ff fa41 	bl	8009394 <SWAPBYTE>
 8009f12:	4603      	mov	r3, r0
 8009f14:	461a      	mov	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fa34 	bl	8009394 <SWAPBYTE>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff fa27 	bl	8009394 <SWAPBYTE>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	80da      	strh	r2, [r3, #6]
}
 8009f4e:	bf00      	nop
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f60:	2180      	movs	r1, #128	@ 0x80
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fca3 	bl	800a8ae <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fc9f 	bl	800a8ae <USBD_LL_StallEP>
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d042      	beq.n	800a014 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009f92:	6938      	ldr	r0, [r7, #16]
 8009f94:	f000 f842 	bl	800a01c <USBD_GetLen>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fa2:	d808      	bhi.n	8009fb6 <USBD_GetString+0x3e>
 8009fa4:	6938      	ldr	r0, [r7, #16]
 8009fa6:	f000 f839 	bl	800a01c <USBD_GetLen>
 8009faa:	4603      	mov	r3, r0
 8009fac:	3301      	adds	r3, #1
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	e001      	b.n	8009fba <USBD_GetString+0x42>
 8009fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	7812      	ldrb	r2, [r2, #0]
 8009fc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	2203      	movs	r2, #3
 8009fd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fe0:	e013      	b.n	800a00a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	613b      	str	r3, [r7, #16]
    idx++;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	4413      	add	r3, r2
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
    idx++;
 800a004:	7dfb      	ldrb	r3, [r7, #23]
 800a006:	3301      	adds	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e7      	bne.n	8009fe2 <USBD_GetString+0x6a>
 800a012:	e000      	b.n	800a016 <USBD_GetString+0x9e>
    return;
 800a014:	bf00      	nop
  }
}
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a02c:	e005      	b.n	800a03a <USBD_GetLen+0x1e>
  {
    len++;
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	3301      	adds	r3, #1
 800a032:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	3301      	adds	r3, #1
 800a038:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f5      	bne.n	800a02e <USBD_GetLen+0x12>
  }

  return len;
 800a042:	7bfb      	ldrb	r3, [r7, #15]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2202      	movs	r2, #2
 800a060:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	2100      	movs	r1, #0
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fca2 	bl	800a9c0 <USBD_LL_Transmit>

  return USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	2100      	movs	r1, #0
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 fc91 	bl	800a9c0 <USBD_LL_Transmit>

  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 fca1 	bl	800aa02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fc6d 	bl	800a9c0 <USBD_LL_Transmit>

  return USBD_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a100:	2300      	movs	r3, #0
 800a102:	2200      	movs	r2, #0
 800a104:	2100      	movs	r1, #0
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fc7b 	bl	800aa02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a11c:	2200      	movs	r2, #0
 800a11e:	4912      	ldr	r1, [pc, #72]	@ (800a168 <MX_USB_DEVICE_Init+0x50>)
 800a120:	4812      	ldr	r0, [pc, #72]	@ (800a16c <MX_USB_DEVICE_Init+0x54>)
 800a122:	f7fe fd14 	bl	8008b4e <USBD_Init>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a12c:	f7f6 fca6 	bl	8000a7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800a130:	490f      	ldr	r1, [pc, #60]	@ (800a170 <MX_USB_DEVICE_Init+0x58>)
 800a132:	480e      	ldr	r0, [pc, #56]	@ (800a16c <MX_USB_DEVICE_Init+0x54>)
 800a134:	f7fe fd3b 	bl	8008bae <USBD_RegisterClass>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a13e:	f7f6 fc9d 	bl	8000a7c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800a142:	490c      	ldr	r1, [pc, #48]	@ (800a174 <MX_USB_DEVICE_Init+0x5c>)
 800a144:	4809      	ldr	r0, [pc, #36]	@ (800a16c <MX_USB_DEVICE_Init+0x54>)
 800a146:	f7fc ffb9 	bl	80070bc <USBD_MSC_RegisterStorage>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a150:	f7f6 fc94 	bl	8000a7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a154:	4805      	ldr	r0, [pc, #20]	@ (800a16c <MX_USB_DEVICE_Init+0x54>)
 800a156:	f7fe fd60 	bl	8008c1a <USBD_Start>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a160:	f7f6 fc8c 	bl	8000a7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a164:	bf00      	nop
 800a166:	bd80      	pop	{r7, pc}
 800a168:	2000008c 	.word	0x2000008c
 800a16c:	20000350 	.word	0x20000350
 800a170:	2000000c 	.word	0x2000000c
 800a174:	200000dc 	.word	0x200000dc

0800a178 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	6039      	str	r1, [r7, #0]
 800a182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2212      	movs	r2, #18
 800a188:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a18a:	4b03      	ldr	r3, [pc, #12]	@ (800a198 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	200000a8 	.word	0x200000a8

0800a19c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2204      	movs	r2, #4
 800a1ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1ae:	4b03      	ldr	r3, [pc, #12]	@ (800a1bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	200000bc 	.word	0x200000bc

0800a1c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d105      	bne.n	800a1de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	4907      	ldr	r1, [pc, #28]	@ (800a1f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1d6:	4808      	ldr	r0, [pc, #32]	@ (800a1f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1d8:	f7ff fece 	bl	8009f78 <USBD_GetString>
 800a1dc:	e004      	b.n	800a1e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	4904      	ldr	r1, [pc, #16]	@ (800a1f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1e2:	4805      	ldr	r0, [pc, #20]	@ (800a1f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1e4:	f7ff fec8 	bl	8009f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	@ (800a1f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	2000062c 	.word	0x2000062c
 800a1f8:	0800bc68 	.word	0x0800bc68

0800a1fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	4904      	ldr	r1, [pc, #16]	@ (800a21c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a20c:	4804      	ldr	r0, [pc, #16]	@ (800a220 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a20e:	f7ff feb3 	bl	8009f78 <USBD_GetString>
  return USBD_StrDesc;
 800a212:	4b02      	ldr	r3, [pc, #8]	@ (800a21c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	2000062c 	.word	0x2000062c
 800a220:	0800bc70 	.word	0x0800bc70

0800a224 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	6039      	str	r1, [r7, #0]
 800a22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	221a      	movs	r2, #26
 800a234:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a236:	f000 f843 	bl	800a2c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a23a:	4b02      	ldr	r3, [pc, #8]	@ (800a244 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	200000c0 	.word	0x200000c0

0800a248 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4907      	ldr	r1, [pc, #28]	@ (800a27c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a25e:	4808      	ldr	r0, [pc, #32]	@ (800a280 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a260:	f7ff fe8a 	bl	8009f78 <USBD_GetString>
 800a264:	e004      	b.n	800a270 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4904      	ldr	r1, [pc, #16]	@ (800a27c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a26a:	4805      	ldr	r0, [pc, #20]	@ (800a280 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a26c:	f7ff fe84 	bl	8009f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	@ (800a27c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	2000062c 	.word	0x2000062c
 800a280:	0800bc7c 	.word	0x0800bc7c

0800a284 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d105      	bne.n	800a2a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4907      	ldr	r1, [pc, #28]	@ (800a2b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a29a:	4808      	ldr	r0, [pc, #32]	@ (800a2bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a29c:	f7ff fe6c 	bl	8009f78 <USBD_GetString>
 800a2a0:	e004      	b.n	800a2ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4904      	ldr	r1, [pc, #16]	@ (800a2b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2a6:	4805      	ldr	r0, [pc, #20]	@ (800a2bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2a8:	f7ff fe66 	bl	8009f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2ac:	4b02      	ldr	r3, [pc, #8]	@ (800a2b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	2000062c 	.word	0x2000062c
 800a2bc:	0800bc88 	.word	0x0800bc88

0800a2c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a304 <Get_SerialNum+0x44>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a308 <Get_SerialNum+0x48>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a30c <Get_SerialNum+0x4c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4413      	add	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d009      	beq.n	800a2fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2e6:	2208      	movs	r2, #8
 800a2e8:	4909      	ldr	r1, [pc, #36]	@ (800a310 <Get_SerialNum+0x50>)
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 f814 	bl	800a318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	4908      	ldr	r1, [pc, #32]	@ (800a314 <Get_SerialNum+0x54>)
 800a2f4:	68b8      	ldr	r0, [r7, #8]
 800a2f6:	f000 f80f 	bl	800a318 <IntToUnicode>
  }
}
 800a2fa:	bf00      	nop
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	1fff7a10 	.word	0x1fff7a10
 800a308:	1fff7a14 	.word	0x1fff7a14
 800a30c:	1fff7a18 	.word	0x1fff7a18
 800a310:	200000c2 	.word	0x200000c2
 800a314:	200000d2 	.word	0x200000d2

0800a318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]
 800a32e:	e027      	b.n	800a380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	0f1b      	lsrs	r3, r3, #28
 800a334:	2b09      	cmp	r3, #9
 800a336:	d80b      	bhi.n	800a350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	0f1b      	lsrs	r3, r3, #28
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4619      	mov	r1, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	440b      	add	r3, r1
 800a348:	3230      	adds	r2, #48	@ 0x30
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	e00a      	b.n	800a366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	0f1b      	lsrs	r3, r3, #28
 800a354:	b2da      	uxtb	r2, r3
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	4619      	mov	r1, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	440b      	add	r3, r1
 800a360:	3237      	adds	r2, #55	@ 0x37
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	3301      	adds	r3, #1
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	4413      	add	r3, r2
 800a376:	2200      	movs	r2, #0
 800a378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	3301      	adds	r3, #1
 800a37e:	75fb      	strb	r3, [r7, #23]
 800a380:	7dfa      	ldrb	r2, [r7, #23]
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	429a      	cmp	r2, r3
 800a386:	d3d3      	bcc.n	800a330 <IntToUnicode+0x18>
  }
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	4603      	mov	r3, r0
 800a39e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800a3a0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b085      	sub	sp, #20
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
 800a3ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f04f 72a0 	mov.w	r2, #20971520	@ 0x1400000
 800a3c2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3ca:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800a3cc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800a3e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800a3fc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a40a:	b590      	push	{r4, r7, lr}
 800a40c:	b087      	sub	sp, #28
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	461a      	mov	r2, r3
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
 800a41a:	4613      	mov	r3, r2
 800a41c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

    //uint32_t r;

    for (int i = 0; i < STORAGE_BLK_SIZ / 4; ++i) {
 800a41e:	2300      	movs	r3, #0
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	e012      	b.n	800a44a <STORAGE_Read_FS+0x40>
        //HAL_RNG_GenerateRandomNumber(&hrng, &r);
        //((uint32_t *)buf)[i] = r;
        ((uint32_t *)buf)[i] = (uint32_t)( ((random() & 0xffff) << 16) | ( random() & 0xffff) );
 800a424:	f000 fb94 	bl	800ab50 <random>
 800a428:	4603      	mov	r3, r0
 800a42a:	041c      	lsls	r4, r3, #16
 800a42c:	f000 fb90 	bl	800ab50 <random>
 800a430:	4603      	mov	r3, r0
 800a432:	b29b      	uxth	r3, r3
 800a434:	ea44 0103 	orr.w	r1, r4, r3
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	4413      	add	r3, r2
 800a440:	460a      	mov	r2, r1
 800a442:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STORAGE_BLK_SIZ / 4; ++i) {
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	3301      	adds	r3, #1
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a44e:	dde9      	ble.n	800a424 <STORAGE_Read_FS+0x1a>
    }

    return (USBD_OK);
 800a450:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800a452:	4618      	mov	r0, r3
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	bd90      	pop	{r4, r7, pc}

0800a45a <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	461a      	mov	r2, r3
 800a466:	4603      	mov	r3, r0
 800a468:	73fb      	strb	r3, [r7, #15]
 800a46a:	4613      	mov	r3, r2
 800a46c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800a46e:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800a480:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a482:	4618      	mov	r0, r3
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08a      	sub	sp, #40	@ 0x28
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a494:	f107 0314 	add.w	r3, r7, #20
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	605a      	str	r2, [r3, #4]
 800a49e:	609a      	str	r2, [r3, #8]
 800a4a0:	60da      	str	r2, [r3, #12]
 800a4a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4ac:	d13a      	bne.n	800a524 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	613b      	str	r3, [r7, #16]
 800a4b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a4b8:	f043 0301 	orr.w	r3, r3, #1
 800a4bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4be:	4b1b      	ldr	r3, [pc, #108]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	613b      	str	r3, [r7, #16]
 800a4c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a4ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a4ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4dc:	230a      	movs	r3, #10
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4e0:	f107 0314 	add.w	r3, r7, #20
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4812      	ldr	r0, [pc, #72]	@ (800a530 <HAL_PCD_MspInit+0xa4>)
 800a4e8:	f7f7 fe4a 	bl	8002180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f0:	4a0e      	ldr	r2, [pc, #56]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f6:	6353      	str	r3, [r2, #52]	@ 0x34
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a4fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a500:	4a0a      	ldr	r2, [pc, #40]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a506:	6453      	str	r3, [r2, #68]	@ 0x44
 800a508:	4b08      	ldr	r3, [pc, #32]	@ (800a52c <HAL_PCD_MspInit+0xa0>)
 800a50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a50c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	2043      	movs	r0, #67	@ 0x43
 800a51a:	f7f7 fa8a 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a51e:	2043      	movs	r0, #67	@ 0x43
 800a520:	f7f7 faa3 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a524:	bf00      	nop
 800a526:	3728      	adds	r7, #40	@ 0x28
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	40023800 	.word	0x40023800
 800a530:	40020000 	.word	0x40020000

0800a534 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f7fe fbb2 	bl	8008cb4 <USBD_LL_SetupStage>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	4613      	mov	r3, r2
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	4619      	mov	r1, r3
 800a582:	f7fe fbec 	bl	8008d5e <USBD_LL_DataOutStage>
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	3320      	adds	r3, #32
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	f7fe fc85 	bl	8008ec4 <USBD_LL_DataInStage>
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe fdbf 	bl	8009154 <USBD_LL_SOF>
}
 800a5d6:	bf00      	nop
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	79db      	ldrb	r3, [r3, #7]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
 800a5f6:	e008      	b.n	800a60a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	79db      	ldrb	r3, [r3, #7]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d102      	bne.n	800a606 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
 800a604:	e001      	b.n	800a60a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a606:	f7f6 fa39 	bl	8000a7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a610:	7bfa      	ldrb	r2, [r7, #15]
 800a612:	4611      	mov	r1, r2
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe fd59 	bl	80090cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe fd01 	bl	8009028 <USBD_LL_Reset>
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe fd54 	bl	80090ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7adb      	ldrb	r3, [r3, #11]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a664:	4b04      	ldr	r3, [pc, #16]	@ (800a678 <HAL_PCD_SuspendCallback+0x48>)
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	4a03      	ldr	r2, [pc, #12]	@ (800a678 <HAL_PCD_SuspendCallback+0x48>)
 800a66a:	f043 0306 	orr.w	r3, r3, #6
 800a66e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	e000ed00 	.word	0xe000ed00

0800a67c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe fd4a 	bl	8009124 <USBD_LL_Resume>
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6aa:	78fa      	ldrb	r2, [r7, #3]
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fda2 	bl	80091f8 <USBD_LL_IsoOUTIncomplete>
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ce:	78fa      	ldrb	r2, [r7, #3]
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fd5e 	bl	8009194 <USBD_LL_IsoINIncomplete>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fdb4 	bl	800925c <USBD_LL_DevConnected>
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fdb1 	bl	8009272 <USBD_LL_DevDisconnected>
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d13c      	bne.n	800a7a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a728:	4a20      	ldr	r2, [pc, #128]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1e      	ldr	r2, [pc, #120]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a734:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a738:	4b1c      	ldr	r3, [pc, #112]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a73a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a73e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a740:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a742:	2204      	movs	r2, #4
 800a744:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a746:	4b19      	ldr	r3, [pc, #100]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a748:	2202      	movs	r2, #2
 800a74a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a74c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a74e:	2200      	movs	r2, #0
 800a750:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a752:	4b16      	ldr	r3, [pc, #88]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a754:	2202      	movs	r2, #2
 800a756:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a758:	4b14      	ldr	r3, [pc, #80]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a75e:	4b13      	ldr	r3, [pc, #76]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a760:	2200      	movs	r2, #0
 800a762:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a764:	4b11      	ldr	r3, [pc, #68]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a766:	2200      	movs	r2, #0
 800a768:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a76a:	4b10      	ldr	r3, [pc, #64]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a770:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a772:	2200      	movs	r2, #0
 800a774:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a776:	480d      	ldr	r0, [pc, #52]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a778:	f7f7 fe9e 	bl	80024b8 <HAL_PCD_Init>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a782:	f7f6 f97b 	bl	8000a7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a786:	2180      	movs	r1, #128	@ 0x80
 800a788:	4808      	ldr	r0, [pc, #32]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a78a:	f7f9 f8f8 	bl	800397e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a78e:	2240      	movs	r2, #64	@ 0x40
 800a790:	2100      	movs	r1, #0
 800a792:	4806      	ldr	r0, [pc, #24]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a794:	f7f9 f8ac 	bl	80038f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a798:	2280      	movs	r2, #128	@ 0x80
 800a79a:	2101      	movs	r1, #1
 800a79c:	4803      	ldr	r0, [pc, #12]	@ (800a7ac <USBD_LL_Init+0x94>)
 800a79e:	f7f9 f8a7 	bl	80038f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	2000082c 	.word	0x2000082c

0800a7b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f7 ff85 	bl	80026d6 <HAL_PCD_Start>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f962 	bl	800aa9c <USBD_Get_USB_Status>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	70fb      	strb	r3, [r7, #3]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70bb      	strb	r3, [r7, #2]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a80e:	78bb      	ldrb	r3, [r7, #2]
 800a810:	883a      	ldrh	r2, [r7, #0]
 800a812:	78f9      	ldrb	r1, [r7, #3]
 800a814:	f7f8 fc59 	bl	80030ca <HAL_PCD_EP_Open>
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 f93c 	bl	800aa9c <USBD_Get_USB_Status>
 800a824:	4603      	mov	r3, r0
 800a826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a828:	7bbb      	ldrb	r3, [r7, #14]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	460b      	mov	r3, r1
 800a83c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f7f8 fca4 	bl	800319e <HAL_PCD_EP_Close>
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 f91d 	bl	800aa9c <USBD_Get_USB_Status>
 800a862:	4603      	mov	r3, r0
 800a864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a866:	7bbb      	ldrb	r3, [r7, #14]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7f8 fe46 	bl	8003520 <HAL_PCD_EP_Flush>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 f8fe 	bl	800aa9c <USBD_Get_USB_Status>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8c8:	78fa      	ldrb	r2, [r7, #3]
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7f8 fd3d 	bl	800334c <HAL_PCD_EP_SetStall>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 f8df 	bl	800aa9c <USBD_Get_USB_Status>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a906:	78fa      	ldrb	r2, [r7, #3]
 800a908:	4611      	mov	r1, r2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7f8 fd81 	bl	8003412 <HAL_PCD_EP_ClrStall>
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a914:	7bfb      	ldrb	r3, [r7, #15]
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f8c0 	bl	800aa9c <USBD_Get_USB_Status>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a920:	7bbb      	ldrb	r3, [r7, #14]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a93c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a93e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a942:	2b00      	cmp	r3, #0
 800a944:	da0b      	bge.n	800a95e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	4613      	mov	r3, r2
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	3316      	adds	r3, #22
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	e00b      	b.n	800a976 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a95e:	78fb      	ldrb	r3, [r7, #3]
 800a960:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a964:	68f9      	ldr	r1, [r7, #12]
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	440b      	add	r3, r1
 800a970:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a974:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7f8 fb6e 	bl	8003082 <HAL_PCD_SetAddress>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f875 	bl	800aa9c <USBD_Get_USB_Status>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a9de:	7af9      	ldrb	r1, [r7, #11]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	f7f8 fc78 	bl	80032d8 <HAL_PCD_EP_Transmit>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ec:	7dfb      	ldrb	r3, [r7, #23]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f854 	bl	800aa9c <USBD_Get_USB_Status>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b086      	sub	sp, #24
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa20:	7af9      	ldrb	r1, [r7, #11]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	f7f8 fc04 	bl	8003232 <HAL_PCD_EP_Receive>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f833 	bl	800aa9c <USBD_Get_USB_Status>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa56:	78fa      	ldrb	r2, [r7, #3]
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f8 fc24 	bl	80032a8 <HAL_PCD_EP_GetRxCount>
 800aa60:	4603      	mov	r3, r0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa74:	4b03      	ldr	r3, [pc, #12]	@ (800aa84 <USBD_static_malloc+0x18>)
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000d10 	.word	0x20000d10

0800aa88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]

}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d817      	bhi.n	800aae0 <USBD_Get_USB_Status+0x44>
 800aab0:	a201      	add	r2, pc, #4	@ (adr r2, 800aab8 <USBD_Get_USB_Status+0x1c>)
 800aab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab6:	bf00      	nop
 800aab8:	0800aac9 	.word	0x0800aac9
 800aabc:	0800aacf 	.word	0x0800aacf
 800aac0:	0800aad5 	.word	0x0800aad5
 800aac4:	0800aadb 	.word	0x0800aadb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
    break;
 800aacc:	e00b      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aace:	2303      	movs	r3, #3
 800aad0:	73fb      	strb	r3, [r7, #15]
    break;
 800aad2:	e008      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aad4:	2301      	movs	r3, #1
 800aad6:	73fb      	strb	r3, [r7, #15]
    break;
 800aad8:	e005      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aada:	2303      	movs	r3, #3
 800aadc:	73fb      	strb	r3, [r7, #15]
    break;
 800aade:	e002      	b.n	800aae6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aae0:	2303      	movs	r3, #3
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	bf00      	nop
  }
  return usb_status;
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <srandom>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4b10      	ldr	r3, [pc, #64]	@ (800ab38 <srandom+0x44>)
 800aaf8:	681d      	ldr	r5, [r3, #0]
 800aafa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aafc:	4604      	mov	r4, r0
 800aafe:	b9b3      	cbnz	r3, 800ab2e <srandom+0x3a>
 800ab00:	2018      	movs	r0, #24
 800ab02:	f000 fb51 	bl	800b1a8 <malloc>
 800ab06:	4602      	mov	r2, r0
 800ab08:	6328      	str	r0, [r5, #48]	@ 0x30
 800ab0a:	b920      	cbnz	r0, 800ab16 <srandom+0x22>
 800ab0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ab3c <srandom+0x48>)
 800ab0e:	480c      	ldr	r0, [pc, #48]	@ (800ab40 <srandom+0x4c>)
 800ab10:	2140      	movs	r1, #64	@ 0x40
 800ab12:	f000 fae1 	bl	800b0d8 <__assert_func>
 800ab16:	490b      	ldr	r1, [pc, #44]	@ (800ab44 <srandom+0x50>)
 800ab18:	4b0b      	ldr	r3, [pc, #44]	@ (800ab48 <srandom+0x54>)
 800ab1a:	e9c0 1300 	strd	r1, r3, [r0]
 800ab1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab4c <srandom+0x58>)
 800ab20:	6083      	str	r3, [r0, #8]
 800ab22:	230b      	movs	r3, #11
 800ab24:	8183      	strh	r3, [r0, #12]
 800ab26:	2100      	movs	r1, #0
 800ab28:	2001      	movs	r0, #1
 800ab2a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ab2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ab30:	2200      	movs	r2, #0
 800ab32:	611c      	str	r4, [r3, #16]
 800ab34:	615a      	str	r2, [r3, #20]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	20000108 	.word	0x20000108
 800ab3c:	0800bcdc 	.word	0x0800bcdc
 800ab40:	0800bcf3 	.word	0x0800bcf3
 800ab44:	abcd330e 	.word	0xabcd330e
 800ab48:	e66d1234 	.word	0xe66d1234
 800ab4c:	0005deec 	.word	0x0005deec

0800ab50 <random>:
 800ab50:	4b16      	ldr	r3, [pc, #88]	@ (800abac <random+0x5c>)
 800ab52:	b510      	push	{r4, lr}
 800ab54:	681c      	ldr	r4, [r3, #0]
 800ab56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab58:	b9b3      	cbnz	r3, 800ab88 <random+0x38>
 800ab5a:	2018      	movs	r0, #24
 800ab5c:	f000 fb24 	bl	800b1a8 <malloc>
 800ab60:	4602      	mov	r2, r0
 800ab62:	6320      	str	r0, [r4, #48]	@ 0x30
 800ab64:	b920      	cbnz	r0, 800ab70 <random+0x20>
 800ab66:	4b12      	ldr	r3, [pc, #72]	@ (800abb0 <random+0x60>)
 800ab68:	4812      	ldr	r0, [pc, #72]	@ (800abb4 <random+0x64>)
 800ab6a:	214c      	movs	r1, #76	@ 0x4c
 800ab6c:	f000 fab4 	bl	800b0d8 <__assert_func>
 800ab70:	4911      	ldr	r1, [pc, #68]	@ (800abb8 <random+0x68>)
 800ab72:	4b12      	ldr	r3, [pc, #72]	@ (800abbc <random+0x6c>)
 800ab74:	e9c0 1300 	strd	r1, r3, [r0]
 800ab78:	4b11      	ldr	r3, [pc, #68]	@ (800abc0 <random+0x70>)
 800ab7a:	6083      	str	r3, [r0, #8]
 800ab7c:	230b      	movs	r3, #11
 800ab7e:	8183      	strh	r3, [r0, #12]
 800ab80:	2100      	movs	r1, #0
 800ab82:	2001      	movs	r0, #1
 800ab84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ab88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab8a:	480e      	ldr	r0, [pc, #56]	@ (800abc4 <random+0x74>)
 800ab8c:	690b      	ldr	r3, [r1, #16]
 800ab8e:	694c      	ldr	r4, [r1, #20]
 800ab90:	4a0d      	ldr	r2, [pc, #52]	@ (800abc8 <random+0x78>)
 800ab92:	4358      	muls	r0, r3
 800ab94:	fb02 0004 	mla	r0, r2, r4, r0
 800ab98:	fba3 3202 	umull	r3, r2, r3, r2
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	eb40 0002 	adc.w	r0, r0, r2
 800aba2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800aba6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800abaa:	bd10      	pop	{r4, pc}
 800abac:	20000108 	.word	0x20000108
 800abb0:	0800bcdc 	.word	0x0800bcdc
 800abb4:	0800bcf3 	.word	0x0800bcf3
 800abb8:	abcd330e 	.word	0xabcd330e
 800abbc:	e66d1234 	.word	0xe66d1234
 800abc0:	0005deec 	.word	0x0005deec
 800abc4:	5851f42d 	.word	0x5851f42d
 800abc8:	4c957f2d 	.word	0x4c957f2d

0800abcc <std>:
 800abcc:	2300      	movs	r3, #0
 800abce:	b510      	push	{r4, lr}
 800abd0:	4604      	mov	r4, r0
 800abd2:	e9c0 3300 	strd	r3, r3, [r0]
 800abd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abda:	6083      	str	r3, [r0, #8]
 800abdc:	8181      	strh	r1, [r0, #12]
 800abde:	6643      	str	r3, [r0, #100]	@ 0x64
 800abe0:	81c2      	strh	r2, [r0, #14]
 800abe2:	6183      	str	r3, [r0, #24]
 800abe4:	4619      	mov	r1, r3
 800abe6:	2208      	movs	r2, #8
 800abe8:	305c      	adds	r0, #92	@ 0x5c
 800abea:	f000 f9f9 	bl	800afe0 <memset>
 800abee:	4b0d      	ldr	r3, [pc, #52]	@ (800ac24 <std+0x58>)
 800abf0:	6263      	str	r3, [r4, #36]	@ 0x24
 800abf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <std+0x5c>)
 800abf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <std+0x60>)
 800abf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ac30 <std+0x64>)
 800abfc:	6323      	str	r3, [r4, #48]	@ 0x30
 800abfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ac34 <std+0x68>)
 800ac00:	6224      	str	r4, [r4, #32]
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d006      	beq.n	800ac14 <std+0x48>
 800ac06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac0a:	4294      	cmp	r4, r2
 800ac0c:	d002      	beq.n	800ac14 <std+0x48>
 800ac0e:	33d0      	adds	r3, #208	@ 0xd0
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d105      	bne.n	800ac20 <std+0x54>
 800ac14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f000 ba58 	b.w	800b0d0 <__retarget_lock_init_recursive>
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	bf00      	nop
 800ac24:	0800ae31 	.word	0x0800ae31
 800ac28:	0800ae53 	.word	0x0800ae53
 800ac2c:	0800ae8b 	.word	0x0800ae8b
 800ac30:	0800aeaf 	.word	0x0800aeaf
 800ac34:	20000f88 	.word	0x20000f88

0800ac38 <stdio_exit_handler>:
 800ac38:	4a02      	ldr	r2, [pc, #8]	@ (800ac44 <stdio_exit_handler+0xc>)
 800ac3a:	4903      	ldr	r1, [pc, #12]	@ (800ac48 <stdio_exit_handler+0x10>)
 800ac3c:	4803      	ldr	r0, [pc, #12]	@ (800ac4c <stdio_exit_handler+0x14>)
 800ac3e:	f000 b869 	b.w	800ad14 <_fwalk_sglue>
 800ac42:	bf00      	nop
 800ac44:	200000fc 	.word	0x200000fc
 800ac48:	0800b9bd 	.word	0x0800b9bd
 800ac4c:	2000010c 	.word	0x2000010c

0800ac50 <cleanup_stdio>:
 800ac50:	6841      	ldr	r1, [r0, #4]
 800ac52:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <cleanup_stdio+0x34>)
 800ac54:	4299      	cmp	r1, r3
 800ac56:	b510      	push	{r4, lr}
 800ac58:	4604      	mov	r4, r0
 800ac5a:	d001      	beq.n	800ac60 <cleanup_stdio+0x10>
 800ac5c:	f000 feae 	bl	800b9bc <_fflush_r>
 800ac60:	68a1      	ldr	r1, [r4, #8]
 800ac62:	4b09      	ldr	r3, [pc, #36]	@ (800ac88 <cleanup_stdio+0x38>)
 800ac64:	4299      	cmp	r1, r3
 800ac66:	d002      	beq.n	800ac6e <cleanup_stdio+0x1e>
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fea7 	bl	800b9bc <_fflush_r>
 800ac6e:	68e1      	ldr	r1, [r4, #12]
 800ac70:	4b06      	ldr	r3, [pc, #24]	@ (800ac8c <cleanup_stdio+0x3c>)
 800ac72:	4299      	cmp	r1, r3
 800ac74:	d004      	beq.n	800ac80 <cleanup_stdio+0x30>
 800ac76:	4620      	mov	r0, r4
 800ac78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac7c:	f000 be9e 	b.w	800b9bc <_fflush_r>
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	bf00      	nop
 800ac84:	20000f88 	.word	0x20000f88
 800ac88:	20000ff0 	.word	0x20000ff0
 800ac8c:	20001058 	.word	0x20001058

0800ac90 <global_stdio_init.part.0>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <global_stdio_init.part.0+0x30>)
 800ac94:	4c0b      	ldr	r4, [pc, #44]	@ (800acc4 <global_stdio_init.part.0+0x34>)
 800ac96:	4a0c      	ldr	r2, [pc, #48]	@ (800acc8 <global_stdio_init.part.0+0x38>)
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2104      	movs	r1, #4
 800aca0:	f7ff ff94 	bl	800abcc <std>
 800aca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aca8:	2201      	movs	r2, #1
 800acaa:	2109      	movs	r1, #9
 800acac:	f7ff ff8e 	bl	800abcc <std>
 800acb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acb4:	2202      	movs	r2, #2
 800acb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acba:	2112      	movs	r1, #18
 800acbc:	f7ff bf86 	b.w	800abcc <std>
 800acc0:	200010c0 	.word	0x200010c0
 800acc4:	20000f88 	.word	0x20000f88
 800acc8:	0800ac39 	.word	0x0800ac39

0800accc <__sfp_lock_acquire>:
 800accc:	4801      	ldr	r0, [pc, #4]	@ (800acd4 <__sfp_lock_acquire+0x8>)
 800acce:	f000 ba00 	b.w	800b0d2 <__retarget_lock_acquire_recursive>
 800acd2:	bf00      	nop
 800acd4:	200010c9 	.word	0x200010c9

0800acd8 <__sfp_lock_release>:
 800acd8:	4801      	ldr	r0, [pc, #4]	@ (800ace0 <__sfp_lock_release+0x8>)
 800acda:	f000 b9fb 	b.w	800b0d4 <__retarget_lock_release_recursive>
 800acde:	bf00      	nop
 800ace0:	200010c9 	.word	0x200010c9

0800ace4 <__sinit>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4604      	mov	r4, r0
 800ace8:	f7ff fff0 	bl	800accc <__sfp_lock_acquire>
 800acec:	6a23      	ldr	r3, [r4, #32]
 800acee:	b11b      	cbz	r3, 800acf8 <__sinit+0x14>
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f7ff bff0 	b.w	800acd8 <__sfp_lock_release>
 800acf8:	4b04      	ldr	r3, [pc, #16]	@ (800ad0c <__sinit+0x28>)
 800acfa:	6223      	str	r3, [r4, #32]
 800acfc:	4b04      	ldr	r3, [pc, #16]	@ (800ad10 <__sinit+0x2c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1f5      	bne.n	800acf0 <__sinit+0xc>
 800ad04:	f7ff ffc4 	bl	800ac90 <global_stdio_init.part.0>
 800ad08:	e7f2      	b.n	800acf0 <__sinit+0xc>
 800ad0a:	bf00      	nop
 800ad0c:	0800ac51 	.word	0x0800ac51
 800ad10:	200010c0 	.word	0x200010c0

0800ad14 <_fwalk_sglue>:
 800ad14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad18:	4607      	mov	r7, r0
 800ad1a:	4688      	mov	r8, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	2600      	movs	r6, #0
 800ad20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad24:	f1b9 0901 	subs.w	r9, r9, #1
 800ad28:	d505      	bpl.n	800ad36 <_fwalk_sglue+0x22>
 800ad2a:	6824      	ldr	r4, [r4, #0]
 800ad2c:	2c00      	cmp	r4, #0
 800ad2e:	d1f7      	bne.n	800ad20 <_fwalk_sglue+0xc>
 800ad30:	4630      	mov	r0, r6
 800ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d907      	bls.n	800ad4c <_fwalk_sglue+0x38>
 800ad3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad40:	3301      	adds	r3, #1
 800ad42:	d003      	beq.n	800ad4c <_fwalk_sglue+0x38>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4638      	mov	r0, r7
 800ad48:	47c0      	blx	r8
 800ad4a:	4306      	orrs	r6, r0
 800ad4c:	3568      	adds	r5, #104	@ 0x68
 800ad4e:	e7e9      	b.n	800ad24 <_fwalk_sglue+0x10>

0800ad50 <iprintf>:
 800ad50:	b40f      	push	{r0, r1, r2, r3}
 800ad52:	b507      	push	{r0, r1, r2, lr}
 800ad54:	4906      	ldr	r1, [pc, #24]	@ (800ad70 <iprintf+0x20>)
 800ad56:	ab04      	add	r3, sp, #16
 800ad58:	6808      	ldr	r0, [r1, #0]
 800ad5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad5e:	6881      	ldr	r1, [r0, #8]
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	f000 fb01 	bl	800b368 <_vfiprintf_r>
 800ad66:	b003      	add	sp, #12
 800ad68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad6c:	b004      	add	sp, #16
 800ad6e:	4770      	bx	lr
 800ad70:	20000108 	.word	0x20000108

0800ad74 <_puts_r>:
 800ad74:	6a03      	ldr	r3, [r0, #32]
 800ad76:	b570      	push	{r4, r5, r6, lr}
 800ad78:	6884      	ldr	r4, [r0, #8]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	b90b      	cbnz	r3, 800ad84 <_puts_r+0x10>
 800ad80:	f7ff ffb0 	bl	800ace4 <__sinit>
 800ad84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad86:	07db      	lsls	r3, r3, #31
 800ad88:	d405      	bmi.n	800ad96 <_puts_r+0x22>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	0598      	lsls	r0, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_puts_r+0x22>
 800ad90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad92:	f000 f99e 	bl	800b0d2 <__retarget_lock_acquire_recursive>
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	0719      	lsls	r1, r3, #28
 800ad9a:	d502      	bpl.n	800ada2 <_puts_r+0x2e>
 800ad9c:	6923      	ldr	r3, [r4, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d135      	bne.n	800ae0e <_puts_r+0x9a>
 800ada2:	4621      	mov	r1, r4
 800ada4:	4628      	mov	r0, r5
 800ada6:	f000 f8c5 	bl	800af34 <__swsetup_r>
 800adaa:	b380      	cbz	r0, 800ae0e <_puts_r+0x9a>
 800adac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800adb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adb2:	07da      	lsls	r2, r3, #31
 800adb4:	d405      	bmi.n	800adc2 <_puts_r+0x4e>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	059b      	lsls	r3, r3, #22
 800adba:	d402      	bmi.n	800adc2 <_puts_r+0x4e>
 800adbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adbe:	f000 f989 	bl	800b0d4 <__retarget_lock_release_recursive>
 800adc2:	4628      	mov	r0, r5
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da04      	bge.n	800add4 <_puts_r+0x60>
 800adca:	69a2      	ldr	r2, [r4, #24]
 800adcc:	429a      	cmp	r2, r3
 800adce:	dc17      	bgt.n	800ae00 <_puts_r+0x8c>
 800add0:	290a      	cmp	r1, #10
 800add2:	d015      	beq.n	800ae00 <_puts_r+0x8c>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	6022      	str	r2, [r4, #0]
 800adda:	7019      	strb	r1, [r3, #0]
 800addc:	68a3      	ldr	r3, [r4, #8]
 800adde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60a3      	str	r3, [r4, #8]
 800ade6:	2900      	cmp	r1, #0
 800ade8:	d1ed      	bne.n	800adc6 <_puts_r+0x52>
 800adea:	2b00      	cmp	r3, #0
 800adec:	da11      	bge.n	800ae12 <_puts_r+0x9e>
 800adee:	4622      	mov	r2, r4
 800adf0:	210a      	movs	r1, #10
 800adf2:	4628      	mov	r0, r5
 800adf4:	f000 f85f 	bl	800aeb6 <__swbuf_r>
 800adf8:	3001      	adds	r0, #1
 800adfa:	d0d7      	beq.n	800adac <_puts_r+0x38>
 800adfc:	250a      	movs	r5, #10
 800adfe:	e7d7      	b.n	800adb0 <_puts_r+0x3c>
 800ae00:	4622      	mov	r2, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 f857 	bl	800aeb6 <__swbuf_r>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d1e7      	bne.n	800addc <_puts_r+0x68>
 800ae0c:	e7ce      	b.n	800adac <_puts_r+0x38>
 800ae0e:	3e01      	subs	r6, #1
 800ae10:	e7e4      	b.n	800addc <_puts_r+0x68>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	6022      	str	r2, [r4, #0]
 800ae18:	220a      	movs	r2, #10
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	e7ee      	b.n	800adfc <_puts_r+0x88>
	...

0800ae20 <puts>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	@ (800ae2c <puts+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f7ff bfa5 	b.w	800ad74 <_puts_r>
 800ae2a:	bf00      	nop
 800ae2c:	20000108 	.word	0x20000108

0800ae30 <__sread>:
 800ae30:	b510      	push	{r4, lr}
 800ae32:	460c      	mov	r4, r1
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	f000 f8fc 	bl	800b034 <_read_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	bfab      	itete	ge
 800ae40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae42:	89a3      	ldrhlt	r3, [r4, #12]
 800ae44:	181b      	addge	r3, r3, r0
 800ae46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae4a:	bfac      	ite	ge
 800ae4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae4e:	81a3      	strhlt	r3, [r4, #12]
 800ae50:	bd10      	pop	{r4, pc}

0800ae52 <__swrite>:
 800ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	461f      	mov	r7, r3
 800ae58:	898b      	ldrh	r3, [r1, #12]
 800ae5a:	05db      	lsls	r3, r3, #23
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	4616      	mov	r6, r2
 800ae62:	d505      	bpl.n	800ae70 <__swrite+0x1e>
 800ae64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae68:	2302      	movs	r3, #2
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f000 f8d0 	bl	800b010 <_lseek_r>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	463b      	mov	r3, r7
 800ae80:	4628      	mov	r0, r5
 800ae82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae86:	f000 b8e7 	b.w	800b058 <_write_r>

0800ae8a <__sseek>:
 800ae8a:	b510      	push	{r4, lr}
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae92:	f000 f8bd 	bl	800b010 <_lseek_r>
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	bf15      	itete	ne
 800ae9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aea6:	81a3      	strheq	r3, [r4, #12]
 800aea8:	bf18      	it	ne
 800aeaa:	81a3      	strhne	r3, [r4, #12]
 800aeac:	bd10      	pop	{r4, pc}

0800aeae <__sclose>:
 800aeae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb2:	f000 b89d 	b.w	800aff0 <_close_r>

0800aeb6 <__swbuf_r>:
 800aeb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb8:	460e      	mov	r6, r1
 800aeba:	4614      	mov	r4, r2
 800aebc:	4605      	mov	r5, r0
 800aebe:	b118      	cbz	r0, 800aec8 <__swbuf_r+0x12>
 800aec0:	6a03      	ldr	r3, [r0, #32]
 800aec2:	b90b      	cbnz	r3, 800aec8 <__swbuf_r+0x12>
 800aec4:	f7ff ff0e 	bl	800ace4 <__sinit>
 800aec8:	69a3      	ldr	r3, [r4, #24]
 800aeca:	60a3      	str	r3, [r4, #8]
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	071a      	lsls	r2, r3, #28
 800aed0:	d501      	bpl.n	800aed6 <__swbuf_r+0x20>
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	b943      	cbnz	r3, 800aee8 <__swbuf_r+0x32>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4628      	mov	r0, r5
 800aeda:	f000 f82b 	bl	800af34 <__swsetup_r>
 800aede:	b118      	cbz	r0, 800aee8 <__swbuf_r+0x32>
 800aee0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aee4:	4638      	mov	r0, r7
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	6922      	ldr	r2, [r4, #16]
 800aeec:	1a98      	subs	r0, r3, r2
 800aeee:	6963      	ldr	r3, [r4, #20]
 800aef0:	b2f6      	uxtb	r6, r6
 800aef2:	4283      	cmp	r3, r0
 800aef4:	4637      	mov	r7, r6
 800aef6:	dc05      	bgt.n	800af04 <__swbuf_r+0x4e>
 800aef8:	4621      	mov	r1, r4
 800aefa:	4628      	mov	r0, r5
 800aefc:	f000 fd5e 	bl	800b9bc <_fflush_r>
 800af00:	2800      	cmp	r0, #0
 800af02:	d1ed      	bne.n	800aee0 <__swbuf_r+0x2a>
 800af04:	68a3      	ldr	r3, [r4, #8]
 800af06:	3b01      	subs	r3, #1
 800af08:	60a3      	str	r3, [r4, #8]
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	6022      	str	r2, [r4, #0]
 800af10:	701e      	strb	r6, [r3, #0]
 800af12:	6962      	ldr	r2, [r4, #20]
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	429a      	cmp	r2, r3
 800af18:	d004      	beq.n	800af24 <__swbuf_r+0x6e>
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	07db      	lsls	r3, r3, #31
 800af1e:	d5e1      	bpl.n	800aee4 <__swbuf_r+0x2e>
 800af20:	2e0a      	cmp	r6, #10
 800af22:	d1df      	bne.n	800aee4 <__swbuf_r+0x2e>
 800af24:	4621      	mov	r1, r4
 800af26:	4628      	mov	r0, r5
 800af28:	f000 fd48 	bl	800b9bc <_fflush_r>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d0d9      	beq.n	800aee4 <__swbuf_r+0x2e>
 800af30:	e7d6      	b.n	800aee0 <__swbuf_r+0x2a>
	...

0800af34 <__swsetup_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4b29      	ldr	r3, [pc, #164]	@ (800afdc <__swsetup_r+0xa8>)
 800af38:	4605      	mov	r5, r0
 800af3a:	6818      	ldr	r0, [r3, #0]
 800af3c:	460c      	mov	r4, r1
 800af3e:	b118      	cbz	r0, 800af48 <__swsetup_r+0x14>
 800af40:	6a03      	ldr	r3, [r0, #32]
 800af42:	b90b      	cbnz	r3, 800af48 <__swsetup_r+0x14>
 800af44:	f7ff fece 	bl	800ace4 <__sinit>
 800af48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4c:	0719      	lsls	r1, r3, #28
 800af4e:	d422      	bmi.n	800af96 <__swsetup_r+0x62>
 800af50:	06da      	lsls	r2, r3, #27
 800af52:	d407      	bmi.n	800af64 <__swsetup_r+0x30>
 800af54:	2209      	movs	r2, #9
 800af56:	602a      	str	r2, [r5, #0]
 800af58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af62:	e033      	b.n	800afcc <__swsetup_r+0x98>
 800af64:	0758      	lsls	r0, r3, #29
 800af66:	d512      	bpl.n	800af8e <__swsetup_r+0x5a>
 800af68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af6a:	b141      	cbz	r1, 800af7e <__swsetup_r+0x4a>
 800af6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af70:	4299      	cmp	r1, r3
 800af72:	d002      	beq.n	800af7a <__swsetup_r+0x46>
 800af74:	4628      	mov	r0, r5
 800af76:	f000 f8cd 	bl	800b114 <_free_r>
 800af7a:	2300      	movs	r3, #0
 800af7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	2300      	movs	r3, #0
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f043 0308 	orr.w	r3, r3, #8
 800af94:	81a3      	strh	r3, [r4, #12]
 800af96:	6923      	ldr	r3, [r4, #16]
 800af98:	b94b      	cbnz	r3, 800afae <__swsetup_r+0x7a>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afa4:	d003      	beq.n	800afae <__swsetup_r+0x7a>
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 fd67 	bl	800ba7c <__smakebuf_r>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	f013 0201 	ands.w	r2, r3, #1
 800afb6:	d00a      	beq.n	800afce <__swsetup_r+0x9a>
 800afb8:	2200      	movs	r2, #0
 800afba:	60a2      	str	r2, [r4, #8]
 800afbc:	6962      	ldr	r2, [r4, #20]
 800afbe:	4252      	negs	r2, r2
 800afc0:	61a2      	str	r2, [r4, #24]
 800afc2:	6922      	ldr	r2, [r4, #16]
 800afc4:	b942      	cbnz	r2, 800afd8 <__swsetup_r+0xa4>
 800afc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afca:	d1c5      	bne.n	800af58 <__swsetup_r+0x24>
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	0799      	lsls	r1, r3, #30
 800afd0:	bf58      	it	pl
 800afd2:	6962      	ldrpl	r2, [r4, #20]
 800afd4:	60a2      	str	r2, [r4, #8]
 800afd6:	e7f4      	b.n	800afc2 <__swsetup_r+0x8e>
 800afd8:	2000      	movs	r0, #0
 800afda:	e7f7      	b.n	800afcc <__swsetup_r+0x98>
 800afdc:	20000108 	.word	0x20000108

0800afe0 <memset>:
 800afe0:	4402      	add	r2, r0
 800afe2:	4603      	mov	r3, r0
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d100      	bne.n	800afea <memset+0xa>
 800afe8:	4770      	bx	lr
 800afea:	f803 1b01 	strb.w	r1, [r3], #1
 800afee:	e7f9      	b.n	800afe4 <memset+0x4>

0800aff0 <_close_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d06      	ldr	r5, [pc, #24]	@ (800b00c <_close_r+0x1c>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	f7f5 ff04 	bl	8000e08 <_close>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_close_r+0x1a>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_close_r+0x1a>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	200010c4 	.word	0x200010c4

0800b010 <_lseek_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	@ (800b030 <_lseek_r+0x20>)
 800b014:	4604      	mov	r4, r0
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	602a      	str	r2, [r5, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f7f5 ff19 	bl	8000e56 <_lseek>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_lseek_r+0x1e>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_lseek_r+0x1e>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200010c4 	.word	0x200010c4

0800b034 <_read_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	@ (800b054 <_read_r+0x20>)
 800b038:	4604      	mov	r4, r0
 800b03a:	4608      	mov	r0, r1
 800b03c:	4611      	mov	r1, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	602a      	str	r2, [r5, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f7f5 fec3 	bl	8000dce <_read>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_read_r+0x1e>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_read_r+0x1e>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	200010c4 	.word	0x200010c4

0800b058 <_write_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d07      	ldr	r5, [pc, #28]	@ (800b078 <_write_r+0x20>)
 800b05c:	4604      	mov	r4, r0
 800b05e:	4608      	mov	r0, r1
 800b060:	4611      	mov	r1, r2
 800b062:	2200      	movs	r2, #0
 800b064:	602a      	str	r2, [r5, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	f7f5 fa7a 	bl	8000560 <_write>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_write_r+0x1e>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_write_r+0x1e>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	200010c4 	.word	0x200010c4

0800b07c <__errno>:
 800b07c:	4b01      	ldr	r3, [pc, #4]	@ (800b084 <__errno+0x8>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20000108 	.word	0x20000108

0800b088 <__libc_init_array>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	4d0d      	ldr	r5, [pc, #52]	@ (800b0c0 <__libc_init_array+0x38>)
 800b08c:	4c0d      	ldr	r4, [pc, #52]	@ (800b0c4 <__libc_init_array+0x3c>)
 800b08e:	1b64      	subs	r4, r4, r5
 800b090:	10a4      	asrs	r4, r4, #2
 800b092:	2600      	movs	r6, #0
 800b094:	42a6      	cmp	r6, r4
 800b096:	d109      	bne.n	800b0ac <__libc_init_array+0x24>
 800b098:	4d0b      	ldr	r5, [pc, #44]	@ (800b0c8 <__libc_init_array+0x40>)
 800b09a:	4c0c      	ldr	r4, [pc, #48]	@ (800b0cc <__libc_init_array+0x44>)
 800b09c:	f000 fda8 	bl	800bbf0 <_init>
 800b0a0:	1b64      	subs	r4, r4, r5
 800b0a2:	10a4      	asrs	r4, r4, #2
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	42a6      	cmp	r6, r4
 800b0a8:	d105      	bne.n	800b0b6 <__libc_init_array+0x2e>
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b0:	4798      	blx	r3
 800b0b2:	3601      	adds	r6, #1
 800b0b4:	e7ee      	b.n	800b094 <__libc_init_array+0xc>
 800b0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ba:	4798      	blx	r3
 800b0bc:	3601      	adds	r6, #1
 800b0be:	e7f2      	b.n	800b0a6 <__libc_init_array+0x1e>
 800b0c0:	0800bdc4 	.word	0x0800bdc4
 800b0c4:	0800bdc4 	.word	0x0800bdc4
 800b0c8:	0800bdc4 	.word	0x0800bdc4
 800b0cc:	0800bdc8 	.word	0x0800bdc8

0800b0d0 <__retarget_lock_init_recursive>:
 800b0d0:	4770      	bx	lr

0800b0d2 <__retarget_lock_acquire_recursive>:
 800b0d2:	4770      	bx	lr

0800b0d4 <__retarget_lock_release_recursive>:
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__assert_func>:
 800b0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0da:	4614      	mov	r4, r2
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4b09      	ldr	r3, [pc, #36]	@ (800b104 <__assert_func+0x2c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	68d8      	ldr	r0, [r3, #12]
 800b0e6:	b954      	cbnz	r4, 800b0fe <__assert_func+0x26>
 800b0e8:	4b07      	ldr	r3, [pc, #28]	@ (800b108 <__assert_func+0x30>)
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0f0:	9100      	str	r1, [sp, #0]
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	4905      	ldr	r1, [pc, #20]	@ (800b10c <__assert_func+0x34>)
 800b0f6:	f000 fc89 	bl	800ba0c <fiprintf>
 800b0fa:	f000 fd2d 	bl	800bb58 <abort>
 800b0fe:	4b04      	ldr	r3, [pc, #16]	@ (800b110 <__assert_func+0x38>)
 800b100:	e7f4      	b.n	800b0ec <__assert_func+0x14>
 800b102:	bf00      	nop
 800b104:	20000108 	.word	0x20000108
 800b108:	0800bd88 	.word	0x0800bd88
 800b10c:	0800bd5a 	.word	0x0800bd5a
 800b110:	0800bd4d 	.word	0x0800bd4d

0800b114 <_free_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4605      	mov	r5, r0
 800b118:	2900      	cmp	r1, #0
 800b11a:	d041      	beq.n	800b1a0 <_free_r+0x8c>
 800b11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b120:	1f0c      	subs	r4, r1, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	bfb8      	it	lt
 800b126:	18e4      	addlt	r4, r4, r3
 800b128:	f000 f8e8 	bl	800b2fc <__malloc_lock>
 800b12c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a4 <_free_r+0x90>)
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	b933      	cbnz	r3, 800b140 <_free_r+0x2c>
 800b132:	6063      	str	r3, [r4, #4]
 800b134:	6014      	str	r4, [r2, #0]
 800b136:	4628      	mov	r0, r5
 800b138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b13c:	f000 b8e4 	b.w	800b308 <__malloc_unlock>
 800b140:	42a3      	cmp	r3, r4
 800b142:	d908      	bls.n	800b156 <_free_r+0x42>
 800b144:	6820      	ldr	r0, [r4, #0]
 800b146:	1821      	adds	r1, r4, r0
 800b148:	428b      	cmp	r3, r1
 800b14a:	bf01      	itttt	eq
 800b14c:	6819      	ldreq	r1, [r3, #0]
 800b14e:	685b      	ldreq	r3, [r3, #4]
 800b150:	1809      	addeq	r1, r1, r0
 800b152:	6021      	streq	r1, [r4, #0]
 800b154:	e7ed      	b.n	800b132 <_free_r+0x1e>
 800b156:	461a      	mov	r2, r3
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	b10b      	cbz	r3, 800b160 <_free_r+0x4c>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d9fa      	bls.n	800b156 <_free_r+0x42>
 800b160:	6811      	ldr	r1, [r2, #0]
 800b162:	1850      	adds	r0, r2, r1
 800b164:	42a0      	cmp	r0, r4
 800b166:	d10b      	bne.n	800b180 <_free_r+0x6c>
 800b168:	6820      	ldr	r0, [r4, #0]
 800b16a:	4401      	add	r1, r0
 800b16c:	1850      	adds	r0, r2, r1
 800b16e:	4283      	cmp	r3, r0
 800b170:	6011      	str	r1, [r2, #0]
 800b172:	d1e0      	bne.n	800b136 <_free_r+0x22>
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	6053      	str	r3, [r2, #4]
 800b17a:	4408      	add	r0, r1
 800b17c:	6010      	str	r0, [r2, #0]
 800b17e:	e7da      	b.n	800b136 <_free_r+0x22>
 800b180:	d902      	bls.n	800b188 <_free_r+0x74>
 800b182:	230c      	movs	r3, #12
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	e7d6      	b.n	800b136 <_free_r+0x22>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	1821      	adds	r1, r4, r0
 800b18c:	428b      	cmp	r3, r1
 800b18e:	bf04      	itt	eq
 800b190:	6819      	ldreq	r1, [r3, #0]
 800b192:	685b      	ldreq	r3, [r3, #4]
 800b194:	6063      	str	r3, [r4, #4]
 800b196:	bf04      	itt	eq
 800b198:	1809      	addeq	r1, r1, r0
 800b19a:	6021      	streq	r1, [r4, #0]
 800b19c:	6054      	str	r4, [r2, #4]
 800b19e:	e7ca      	b.n	800b136 <_free_r+0x22>
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200010d0 	.word	0x200010d0

0800b1a8 <malloc>:
 800b1a8:	4b02      	ldr	r3, [pc, #8]	@ (800b1b4 <malloc+0xc>)
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	f000 b825 	b.w	800b1fc <_malloc_r>
 800b1b2:	bf00      	nop
 800b1b4:	20000108 	.word	0x20000108

0800b1b8 <sbrk_aligned>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	4e0f      	ldr	r6, [pc, #60]	@ (800b1f8 <sbrk_aligned+0x40>)
 800b1bc:	460c      	mov	r4, r1
 800b1be:	6831      	ldr	r1, [r6, #0]
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	b911      	cbnz	r1, 800b1ca <sbrk_aligned+0x12>
 800b1c4:	f000 fcb8 	bl	800bb38 <_sbrk_r>
 800b1c8:	6030      	str	r0, [r6, #0]
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f000 fcb3 	bl	800bb38 <_sbrk_r>
 800b1d2:	1c43      	adds	r3, r0, #1
 800b1d4:	d103      	bne.n	800b1de <sbrk_aligned+0x26>
 800b1d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b1da:	4620      	mov	r0, r4
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	1cc4      	adds	r4, r0, #3
 800b1e0:	f024 0403 	bic.w	r4, r4, #3
 800b1e4:	42a0      	cmp	r0, r4
 800b1e6:	d0f8      	beq.n	800b1da <sbrk_aligned+0x22>
 800b1e8:	1a21      	subs	r1, r4, r0
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 fca4 	bl	800bb38 <_sbrk_r>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d1f2      	bne.n	800b1da <sbrk_aligned+0x22>
 800b1f4:	e7ef      	b.n	800b1d6 <sbrk_aligned+0x1e>
 800b1f6:	bf00      	nop
 800b1f8:	200010cc 	.word	0x200010cc

0800b1fc <_malloc_r>:
 800b1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b200:	1ccd      	adds	r5, r1, #3
 800b202:	f025 0503 	bic.w	r5, r5, #3
 800b206:	3508      	adds	r5, #8
 800b208:	2d0c      	cmp	r5, #12
 800b20a:	bf38      	it	cc
 800b20c:	250c      	movcc	r5, #12
 800b20e:	2d00      	cmp	r5, #0
 800b210:	4606      	mov	r6, r0
 800b212:	db01      	blt.n	800b218 <_malloc_r+0x1c>
 800b214:	42a9      	cmp	r1, r5
 800b216:	d904      	bls.n	800b222 <_malloc_r+0x26>
 800b218:	230c      	movs	r3, #12
 800b21a:	6033      	str	r3, [r6, #0]
 800b21c:	2000      	movs	r0, #0
 800b21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b222:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2f8 <_malloc_r+0xfc>
 800b226:	f000 f869 	bl	800b2fc <__malloc_lock>
 800b22a:	f8d8 3000 	ldr.w	r3, [r8]
 800b22e:	461c      	mov	r4, r3
 800b230:	bb44      	cbnz	r4, 800b284 <_malloc_r+0x88>
 800b232:	4629      	mov	r1, r5
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff ffbf 	bl	800b1b8 <sbrk_aligned>
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	4604      	mov	r4, r0
 800b23e:	d158      	bne.n	800b2f2 <_malloc_r+0xf6>
 800b240:	f8d8 4000 	ldr.w	r4, [r8]
 800b244:	4627      	mov	r7, r4
 800b246:	2f00      	cmp	r7, #0
 800b248:	d143      	bne.n	800b2d2 <_malloc_r+0xd6>
 800b24a:	2c00      	cmp	r4, #0
 800b24c:	d04b      	beq.n	800b2e6 <_malloc_r+0xea>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	4639      	mov	r1, r7
 800b252:	4630      	mov	r0, r6
 800b254:	eb04 0903 	add.w	r9, r4, r3
 800b258:	f000 fc6e 	bl	800bb38 <_sbrk_r>
 800b25c:	4581      	cmp	r9, r0
 800b25e:	d142      	bne.n	800b2e6 <_malloc_r+0xea>
 800b260:	6821      	ldr	r1, [r4, #0]
 800b262:	1a6d      	subs	r5, r5, r1
 800b264:	4629      	mov	r1, r5
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ffa6 	bl	800b1b8 <sbrk_aligned>
 800b26c:	3001      	adds	r0, #1
 800b26e:	d03a      	beq.n	800b2e6 <_malloc_r+0xea>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	442b      	add	r3, r5
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	f8d8 3000 	ldr.w	r3, [r8]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	bb62      	cbnz	r2, 800b2d8 <_malloc_r+0xdc>
 800b27e:	f8c8 7000 	str.w	r7, [r8]
 800b282:	e00f      	b.n	800b2a4 <_malloc_r+0xa8>
 800b284:	6822      	ldr	r2, [r4, #0]
 800b286:	1b52      	subs	r2, r2, r5
 800b288:	d420      	bmi.n	800b2cc <_malloc_r+0xd0>
 800b28a:	2a0b      	cmp	r2, #11
 800b28c:	d917      	bls.n	800b2be <_malloc_r+0xc2>
 800b28e:	1961      	adds	r1, r4, r5
 800b290:	42a3      	cmp	r3, r4
 800b292:	6025      	str	r5, [r4, #0]
 800b294:	bf18      	it	ne
 800b296:	6059      	strne	r1, [r3, #4]
 800b298:	6863      	ldr	r3, [r4, #4]
 800b29a:	bf08      	it	eq
 800b29c:	f8c8 1000 	streq.w	r1, [r8]
 800b2a0:	5162      	str	r2, [r4, r5]
 800b2a2:	604b      	str	r3, [r1, #4]
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f000 f82f 	bl	800b308 <__malloc_unlock>
 800b2aa:	f104 000b 	add.w	r0, r4, #11
 800b2ae:	1d23      	adds	r3, r4, #4
 800b2b0:	f020 0007 	bic.w	r0, r0, #7
 800b2b4:	1ac2      	subs	r2, r0, r3
 800b2b6:	bf1c      	itt	ne
 800b2b8:	1a1b      	subne	r3, r3, r0
 800b2ba:	50a3      	strne	r3, [r4, r2]
 800b2bc:	e7af      	b.n	800b21e <_malloc_r+0x22>
 800b2be:	6862      	ldr	r2, [r4, #4]
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	bf0c      	ite	eq
 800b2c4:	f8c8 2000 	streq.w	r2, [r8]
 800b2c8:	605a      	strne	r2, [r3, #4]
 800b2ca:	e7eb      	b.n	800b2a4 <_malloc_r+0xa8>
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	6864      	ldr	r4, [r4, #4]
 800b2d0:	e7ae      	b.n	800b230 <_malloc_r+0x34>
 800b2d2:	463c      	mov	r4, r7
 800b2d4:	687f      	ldr	r7, [r7, #4]
 800b2d6:	e7b6      	b.n	800b246 <_malloc_r+0x4a>
 800b2d8:	461a      	mov	r2, r3
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	d1fb      	bne.n	800b2d8 <_malloc_r+0xdc>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	6053      	str	r3, [r2, #4]
 800b2e4:	e7de      	b.n	800b2a4 <_malloc_r+0xa8>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	6033      	str	r3, [r6, #0]
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f000 f80c 	bl	800b308 <__malloc_unlock>
 800b2f0:	e794      	b.n	800b21c <_malloc_r+0x20>
 800b2f2:	6005      	str	r5, [r0, #0]
 800b2f4:	e7d6      	b.n	800b2a4 <_malloc_r+0xa8>
 800b2f6:	bf00      	nop
 800b2f8:	200010d0 	.word	0x200010d0

0800b2fc <__malloc_lock>:
 800b2fc:	4801      	ldr	r0, [pc, #4]	@ (800b304 <__malloc_lock+0x8>)
 800b2fe:	f7ff bee8 	b.w	800b0d2 <__retarget_lock_acquire_recursive>
 800b302:	bf00      	nop
 800b304:	200010c8 	.word	0x200010c8

0800b308 <__malloc_unlock>:
 800b308:	4801      	ldr	r0, [pc, #4]	@ (800b310 <__malloc_unlock+0x8>)
 800b30a:	f7ff bee3 	b.w	800b0d4 <__retarget_lock_release_recursive>
 800b30e:	bf00      	nop
 800b310:	200010c8 	.word	0x200010c8

0800b314 <__sfputc_r>:
 800b314:	6893      	ldr	r3, [r2, #8]
 800b316:	3b01      	subs	r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	b410      	push	{r4}
 800b31c:	6093      	str	r3, [r2, #8]
 800b31e:	da08      	bge.n	800b332 <__sfputc_r+0x1e>
 800b320:	6994      	ldr	r4, [r2, #24]
 800b322:	42a3      	cmp	r3, r4
 800b324:	db01      	blt.n	800b32a <__sfputc_r+0x16>
 800b326:	290a      	cmp	r1, #10
 800b328:	d103      	bne.n	800b332 <__sfputc_r+0x1e>
 800b32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b32e:	f7ff bdc2 	b.w	800aeb6 <__swbuf_r>
 800b332:	6813      	ldr	r3, [r2, #0]
 800b334:	1c58      	adds	r0, r3, #1
 800b336:	6010      	str	r0, [r2, #0]
 800b338:	7019      	strb	r1, [r3, #0]
 800b33a:	4608      	mov	r0, r1
 800b33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <__sfputs_r>:
 800b342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b344:	4606      	mov	r6, r0
 800b346:	460f      	mov	r7, r1
 800b348:	4614      	mov	r4, r2
 800b34a:	18d5      	adds	r5, r2, r3
 800b34c:	42ac      	cmp	r4, r5
 800b34e:	d101      	bne.n	800b354 <__sfputs_r+0x12>
 800b350:	2000      	movs	r0, #0
 800b352:	e007      	b.n	800b364 <__sfputs_r+0x22>
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	463a      	mov	r2, r7
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7ff ffda 	bl	800b314 <__sfputc_r>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d1f3      	bne.n	800b34c <__sfputs_r+0xa>
 800b364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b368 <_vfiprintf_r>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	460d      	mov	r5, r1
 800b36e:	b09d      	sub	sp, #116	@ 0x74
 800b370:	4614      	mov	r4, r2
 800b372:	4698      	mov	r8, r3
 800b374:	4606      	mov	r6, r0
 800b376:	b118      	cbz	r0, 800b380 <_vfiprintf_r+0x18>
 800b378:	6a03      	ldr	r3, [r0, #32]
 800b37a:	b90b      	cbnz	r3, 800b380 <_vfiprintf_r+0x18>
 800b37c:	f7ff fcb2 	bl	800ace4 <__sinit>
 800b380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	d405      	bmi.n	800b392 <_vfiprintf_r+0x2a>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	059a      	lsls	r2, r3, #22
 800b38a:	d402      	bmi.n	800b392 <_vfiprintf_r+0x2a>
 800b38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b38e:	f7ff fea0 	bl	800b0d2 <__retarget_lock_acquire_recursive>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	071b      	lsls	r3, r3, #28
 800b396:	d501      	bpl.n	800b39c <_vfiprintf_r+0x34>
 800b398:	692b      	ldr	r3, [r5, #16]
 800b39a:	b99b      	cbnz	r3, 800b3c4 <_vfiprintf_r+0x5c>
 800b39c:	4629      	mov	r1, r5
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f7ff fdc8 	bl	800af34 <__swsetup_r>
 800b3a4:	b170      	cbz	r0, 800b3c4 <_vfiprintf_r+0x5c>
 800b3a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3a8:	07dc      	lsls	r4, r3, #31
 800b3aa:	d504      	bpl.n	800b3b6 <_vfiprintf_r+0x4e>
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3b0:	b01d      	add	sp, #116	@ 0x74
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	0598      	lsls	r0, r3, #22
 800b3ba:	d4f7      	bmi.n	800b3ac <_vfiprintf_r+0x44>
 800b3bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3be:	f7ff fe89 	bl	800b0d4 <__retarget_lock_release_recursive>
 800b3c2:	e7f3      	b.n	800b3ac <_vfiprintf_r+0x44>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c8:	2320      	movs	r3, #32
 800b3ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3d2:	2330      	movs	r3, #48	@ 0x30
 800b3d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b584 <_vfiprintf_r+0x21c>
 800b3d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3dc:	f04f 0901 	mov.w	r9, #1
 800b3e0:	4623      	mov	r3, r4
 800b3e2:	469a      	mov	sl, r3
 800b3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e8:	b10a      	cbz	r2, 800b3ee <_vfiprintf_r+0x86>
 800b3ea:	2a25      	cmp	r2, #37	@ 0x25
 800b3ec:	d1f9      	bne.n	800b3e2 <_vfiprintf_r+0x7a>
 800b3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f2:	d00b      	beq.n	800b40c <_vfiprintf_r+0xa4>
 800b3f4:	465b      	mov	r3, fp
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7ff ffa1 	bl	800b342 <__sfputs_r>
 800b400:	3001      	adds	r0, #1
 800b402:	f000 80a7 	beq.w	800b554 <_vfiprintf_r+0x1ec>
 800b406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b408:	445a      	add	r2, fp
 800b40a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b40c:	f89a 3000 	ldrb.w	r3, [sl]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 809f 	beq.w	800b554 <_vfiprintf_r+0x1ec>
 800b416:	2300      	movs	r3, #0
 800b418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b420:	f10a 0a01 	add.w	sl, sl, #1
 800b424:	9304      	str	r3, [sp, #16]
 800b426:	9307      	str	r3, [sp, #28]
 800b428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b42c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b42e:	4654      	mov	r4, sl
 800b430:	2205      	movs	r2, #5
 800b432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b436:	4853      	ldr	r0, [pc, #332]	@ (800b584 <_vfiprintf_r+0x21c>)
 800b438:	f7f4 feca 	bl	80001d0 <memchr>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	b9d8      	cbnz	r0, 800b478 <_vfiprintf_r+0x110>
 800b440:	06d1      	lsls	r1, r2, #27
 800b442:	bf44      	itt	mi
 800b444:	2320      	movmi	r3, #32
 800b446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b44a:	0713      	lsls	r3, r2, #28
 800b44c:	bf44      	itt	mi
 800b44e:	232b      	movmi	r3, #43	@ 0x2b
 800b450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b454:	f89a 3000 	ldrb.w	r3, [sl]
 800b458:	2b2a      	cmp	r3, #42	@ 0x2a
 800b45a:	d015      	beq.n	800b488 <_vfiprintf_r+0x120>
 800b45c:	9a07      	ldr	r2, [sp, #28]
 800b45e:	4654      	mov	r4, sl
 800b460:	2000      	movs	r0, #0
 800b462:	f04f 0c0a 	mov.w	ip, #10
 800b466:	4621      	mov	r1, r4
 800b468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b46c:	3b30      	subs	r3, #48	@ 0x30
 800b46e:	2b09      	cmp	r3, #9
 800b470:	d94b      	bls.n	800b50a <_vfiprintf_r+0x1a2>
 800b472:	b1b0      	cbz	r0, 800b4a2 <_vfiprintf_r+0x13a>
 800b474:	9207      	str	r2, [sp, #28]
 800b476:	e014      	b.n	800b4a2 <_vfiprintf_r+0x13a>
 800b478:	eba0 0308 	sub.w	r3, r0, r8
 800b47c:	fa09 f303 	lsl.w	r3, r9, r3
 800b480:	4313      	orrs	r3, r2
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	46a2      	mov	sl, r4
 800b486:	e7d2      	b.n	800b42e <_vfiprintf_r+0xc6>
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	1d19      	adds	r1, r3, #4
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	9103      	str	r1, [sp, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	bfbb      	ittet	lt
 800b494:	425b      	neglt	r3, r3
 800b496:	f042 0202 	orrlt.w	r2, r2, #2
 800b49a:	9307      	strge	r3, [sp, #28]
 800b49c:	9307      	strlt	r3, [sp, #28]
 800b49e:	bfb8      	it	lt
 800b4a0:	9204      	strlt	r2, [sp, #16]
 800b4a2:	7823      	ldrb	r3, [r4, #0]
 800b4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4a6:	d10a      	bne.n	800b4be <_vfiprintf_r+0x156>
 800b4a8:	7863      	ldrb	r3, [r4, #1]
 800b4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ac:	d132      	bne.n	800b514 <_vfiprintf_r+0x1ac>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	1d1a      	adds	r2, r3, #4
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	9203      	str	r2, [sp, #12]
 800b4b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4ba:	3402      	adds	r4, #2
 800b4bc:	9305      	str	r3, [sp, #20]
 800b4be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b594 <_vfiprintf_r+0x22c>
 800b4c2:	7821      	ldrb	r1, [r4, #0]
 800b4c4:	2203      	movs	r2, #3
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	f7f4 fe82 	bl	80001d0 <memchr>
 800b4cc:	b138      	cbz	r0, 800b4de <_vfiprintf_r+0x176>
 800b4ce:	9b04      	ldr	r3, [sp, #16]
 800b4d0:	eba0 000a 	sub.w	r0, r0, sl
 800b4d4:	2240      	movs	r2, #64	@ 0x40
 800b4d6:	4082      	lsls	r2, r0
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	3401      	adds	r4, #1
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e2:	4829      	ldr	r0, [pc, #164]	@ (800b588 <_vfiprintf_r+0x220>)
 800b4e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4e8:	2206      	movs	r2, #6
 800b4ea:	f7f4 fe71 	bl	80001d0 <memchr>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d03f      	beq.n	800b572 <_vfiprintf_r+0x20a>
 800b4f2:	4b26      	ldr	r3, [pc, #152]	@ (800b58c <_vfiprintf_r+0x224>)
 800b4f4:	bb1b      	cbnz	r3, 800b53e <_vfiprintf_r+0x1d6>
 800b4f6:	9b03      	ldr	r3, [sp, #12]
 800b4f8:	3307      	adds	r3, #7
 800b4fa:	f023 0307 	bic.w	r3, r3, #7
 800b4fe:	3308      	adds	r3, #8
 800b500:	9303      	str	r3, [sp, #12]
 800b502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b504:	443b      	add	r3, r7
 800b506:	9309      	str	r3, [sp, #36]	@ 0x24
 800b508:	e76a      	b.n	800b3e0 <_vfiprintf_r+0x78>
 800b50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b50e:	460c      	mov	r4, r1
 800b510:	2001      	movs	r0, #1
 800b512:	e7a8      	b.n	800b466 <_vfiprintf_r+0xfe>
 800b514:	2300      	movs	r3, #0
 800b516:	3401      	adds	r4, #1
 800b518:	9305      	str	r3, [sp, #20]
 800b51a:	4619      	mov	r1, r3
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	4620      	mov	r0, r4
 800b522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b526:	3a30      	subs	r2, #48	@ 0x30
 800b528:	2a09      	cmp	r2, #9
 800b52a:	d903      	bls.n	800b534 <_vfiprintf_r+0x1cc>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d0c6      	beq.n	800b4be <_vfiprintf_r+0x156>
 800b530:	9105      	str	r1, [sp, #20]
 800b532:	e7c4      	b.n	800b4be <_vfiprintf_r+0x156>
 800b534:	fb0c 2101 	mla	r1, ip, r1, r2
 800b538:	4604      	mov	r4, r0
 800b53a:	2301      	movs	r3, #1
 800b53c:	e7f0      	b.n	800b520 <_vfiprintf_r+0x1b8>
 800b53e:	ab03      	add	r3, sp, #12
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	462a      	mov	r2, r5
 800b544:	4b12      	ldr	r3, [pc, #72]	@ (800b590 <_vfiprintf_r+0x228>)
 800b546:	a904      	add	r1, sp, #16
 800b548:	4630      	mov	r0, r6
 800b54a:	f3af 8000 	nop.w
 800b54e:	4607      	mov	r7, r0
 800b550:	1c78      	adds	r0, r7, #1
 800b552:	d1d6      	bne.n	800b502 <_vfiprintf_r+0x19a>
 800b554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b556:	07d9      	lsls	r1, r3, #31
 800b558:	d405      	bmi.n	800b566 <_vfiprintf_r+0x1fe>
 800b55a:	89ab      	ldrh	r3, [r5, #12]
 800b55c:	059a      	lsls	r2, r3, #22
 800b55e:	d402      	bmi.n	800b566 <_vfiprintf_r+0x1fe>
 800b560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b562:	f7ff fdb7 	bl	800b0d4 <__retarget_lock_release_recursive>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	065b      	lsls	r3, r3, #25
 800b56a:	f53f af1f 	bmi.w	800b3ac <_vfiprintf_r+0x44>
 800b56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b570:	e71e      	b.n	800b3b0 <_vfiprintf_r+0x48>
 800b572:	ab03      	add	r3, sp, #12
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	462a      	mov	r2, r5
 800b578:	4b05      	ldr	r3, [pc, #20]	@ (800b590 <_vfiprintf_r+0x228>)
 800b57a:	a904      	add	r1, sp, #16
 800b57c:	4630      	mov	r0, r6
 800b57e:	f000 f879 	bl	800b674 <_printf_i>
 800b582:	e7e4      	b.n	800b54e <_vfiprintf_r+0x1e6>
 800b584:	0800bd89 	.word	0x0800bd89
 800b588:	0800bd93 	.word	0x0800bd93
 800b58c:	00000000 	.word	0x00000000
 800b590:	0800b343 	.word	0x0800b343
 800b594:	0800bd8f 	.word	0x0800bd8f

0800b598 <_printf_common>:
 800b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	4616      	mov	r6, r2
 800b59e:	4698      	mov	r8, r3
 800b5a0:	688a      	ldr	r2, [r1, #8]
 800b5a2:	690b      	ldr	r3, [r1, #16]
 800b5a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	bfb8      	it	lt
 800b5ac:	4613      	movlt	r3, r2
 800b5ae:	6033      	str	r3, [r6, #0]
 800b5b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	b10a      	cbz	r2, 800b5be <_printf_common+0x26>
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	6033      	str	r3, [r6, #0]
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	0699      	lsls	r1, r3, #26
 800b5c2:	bf42      	ittt	mi
 800b5c4:	6833      	ldrmi	r3, [r6, #0]
 800b5c6:	3302      	addmi	r3, #2
 800b5c8:	6033      	strmi	r3, [r6, #0]
 800b5ca:	6825      	ldr	r5, [r4, #0]
 800b5cc:	f015 0506 	ands.w	r5, r5, #6
 800b5d0:	d106      	bne.n	800b5e0 <_printf_common+0x48>
 800b5d2:	f104 0a19 	add.w	sl, r4, #25
 800b5d6:	68e3      	ldr	r3, [r4, #12]
 800b5d8:	6832      	ldr	r2, [r6, #0]
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	42ab      	cmp	r3, r5
 800b5de:	dc26      	bgt.n	800b62e <_printf_common+0x96>
 800b5e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5e4:	6822      	ldr	r2, [r4, #0]
 800b5e6:	3b00      	subs	r3, #0
 800b5e8:	bf18      	it	ne
 800b5ea:	2301      	movne	r3, #1
 800b5ec:	0692      	lsls	r2, r2, #26
 800b5ee:	d42b      	bmi.n	800b648 <_printf_common+0xb0>
 800b5f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	47c8      	blx	r9
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d01e      	beq.n	800b63c <_printf_common+0xa4>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	6922      	ldr	r2, [r4, #16]
 800b602:	f003 0306 	and.w	r3, r3, #6
 800b606:	2b04      	cmp	r3, #4
 800b608:	bf02      	ittt	eq
 800b60a:	68e5      	ldreq	r5, [r4, #12]
 800b60c:	6833      	ldreq	r3, [r6, #0]
 800b60e:	1aed      	subeq	r5, r5, r3
 800b610:	68a3      	ldr	r3, [r4, #8]
 800b612:	bf0c      	ite	eq
 800b614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b618:	2500      	movne	r5, #0
 800b61a:	4293      	cmp	r3, r2
 800b61c:	bfc4      	itt	gt
 800b61e:	1a9b      	subgt	r3, r3, r2
 800b620:	18ed      	addgt	r5, r5, r3
 800b622:	2600      	movs	r6, #0
 800b624:	341a      	adds	r4, #26
 800b626:	42b5      	cmp	r5, r6
 800b628:	d11a      	bne.n	800b660 <_printf_common+0xc8>
 800b62a:	2000      	movs	r0, #0
 800b62c:	e008      	b.n	800b640 <_printf_common+0xa8>
 800b62e:	2301      	movs	r3, #1
 800b630:	4652      	mov	r2, sl
 800b632:	4641      	mov	r1, r8
 800b634:	4638      	mov	r0, r7
 800b636:	47c8      	blx	r9
 800b638:	3001      	adds	r0, #1
 800b63a:	d103      	bne.n	800b644 <_printf_common+0xac>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b644:	3501      	adds	r5, #1
 800b646:	e7c6      	b.n	800b5d6 <_printf_common+0x3e>
 800b648:	18e1      	adds	r1, r4, r3
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	2030      	movs	r0, #48	@ 0x30
 800b64e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b652:	4422      	add	r2, r4
 800b654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b65c:	3302      	adds	r3, #2
 800b65e:	e7c7      	b.n	800b5f0 <_printf_common+0x58>
 800b660:	2301      	movs	r3, #1
 800b662:	4622      	mov	r2, r4
 800b664:	4641      	mov	r1, r8
 800b666:	4638      	mov	r0, r7
 800b668:	47c8      	blx	r9
 800b66a:	3001      	adds	r0, #1
 800b66c:	d0e6      	beq.n	800b63c <_printf_common+0xa4>
 800b66e:	3601      	adds	r6, #1
 800b670:	e7d9      	b.n	800b626 <_printf_common+0x8e>
	...

0800b674 <_printf_i>:
 800b674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b678:	7e0f      	ldrb	r7, [r1, #24]
 800b67a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b67c:	2f78      	cmp	r7, #120	@ 0x78
 800b67e:	4691      	mov	r9, r2
 800b680:	4680      	mov	r8, r0
 800b682:	460c      	mov	r4, r1
 800b684:	469a      	mov	sl, r3
 800b686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b68a:	d807      	bhi.n	800b69c <_printf_i+0x28>
 800b68c:	2f62      	cmp	r7, #98	@ 0x62
 800b68e:	d80a      	bhi.n	800b6a6 <_printf_i+0x32>
 800b690:	2f00      	cmp	r7, #0
 800b692:	f000 80d2 	beq.w	800b83a <_printf_i+0x1c6>
 800b696:	2f58      	cmp	r7, #88	@ 0x58
 800b698:	f000 80b9 	beq.w	800b80e <_printf_i+0x19a>
 800b69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6a4:	e03a      	b.n	800b71c <_printf_i+0xa8>
 800b6a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6aa:	2b15      	cmp	r3, #21
 800b6ac:	d8f6      	bhi.n	800b69c <_printf_i+0x28>
 800b6ae:	a101      	add	r1, pc, #4	@ (adr r1, 800b6b4 <_printf_i+0x40>)
 800b6b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6b4:	0800b70d 	.word	0x0800b70d
 800b6b8:	0800b721 	.word	0x0800b721
 800b6bc:	0800b69d 	.word	0x0800b69d
 800b6c0:	0800b69d 	.word	0x0800b69d
 800b6c4:	0800b69d 	.word	0x0800b69d
 800b6c8:	0800b69d 	.word	0x0800b69d
 800b6cc:	0800b721 	.word	0x0800b721
 800b6d0:	0800b69d 	.word	0x0800b69d
 800b6d4:	0800b69d 	.word	0x0800b69d
 800b6d8:	0800b69d 	.word	0x0800b69d
 800b6dc:	0800b69d 	.word	0x0800b69d
 800b6e0:	0800b821 	.word	0x0800b821
 800b6e4:	0800b74b 	.word	0x0800b74b
 800b6e8:	0800b7db 	.word	0x0800b7db
 800b6ec:	0800b69d 	.word	0x0800b69d
 800b6f0:	0800b69d 	.word	0x0800b69d
 800b6f4:	0800b843 	.word	0x0800b843
 800b6f8:	0800b69d 	.word	0x0800b69d
 800b6fc:	0800b74b 	.word	0x0800b74b
 800b700:	0800b69d 	.word	0x0800b69d
 800b704:	0800b69d 	.word	0x0800b69d
 800b708:	0800b7e3 	.word	0x0800b7e3
 800b70c:	6833      	ldr	r3, [r6, #0]
 800b70e:	1d1a      	adds	r2, r3, #4
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6032      	str	r2, [r6, #0]
 800b714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b71c:	2301      	movs	r3, #1
 800b71e:	e09d      	b.n	800b85c <_printf_i+0x1e8>
 800b720:	6833      	ldr	r3, [r6, #0]
 800b722:	6820      	ldr	r0, [r4, #0]
 800b724:	1d19      	adds	r1, r3, #4
 800b726:	6031      	str	r1, [r6, #0]
 800b728:	0606      	lsls	r6, r0, #24
 800b72a:	d501      	bpl.n	800b730 <_printf_i+0xbc>
 800b72c:	681d      	ldr	r5, [r3, #0]
 800b72e:	e003      	b.n	800b738 <_printf_i+0xc4>
 800b730:	0645      	lsls	r5, r0, #25
 800b732:	d5fb      	bpl.n	800b72c <_printf_i+0xb8>
 800b734:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b738:	2d00      	cmp	r5, #0
 800b73a:	da03      	bge.n	800b744 <_printf_i+0xd0>
 800b73c:	232d      	movs	r3, #45	@ 0x2d
 800b73e:	426d      	negs	r5, r5
 800b740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b744:	4859      	ldr	r0, [pc, #356]	@ (800b8ac <_printf_i+0x238>)
 800b746:	230a      	movs	r3, #10
 800b748:	e011      	b.n	800b76e <_printf_i+0xfa>
 800b74a:	6821      	ldr	r1, [r4, #0]
 800b74c:	6833      	ldr	r3, [r6, #0]
 800b74e:	0608      	lsls	r0, r1, #24
 800b750:	f853 5b04 	ldr.w	r5, [r3], #4
 800b754:	d402      	bmi.n	800b75c <_printf_i+0xe8>
 800b756:	0649      	lsls	r1, r1, #25
 800b758:	bf48      	it	mi
 800b75a:	b2ad      	uxthmi	r5, r5
 800b75c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b75e:	4853      	ldr	r0, [pc, #332]	@ (800b8ac <_printf_i+0x238>)
 800b760:	6033      	str	r3, [r6, #0]
 800b762:	bf14      	ite	ne
 800b764:	230a      	movne	r3, #10
 800b766:	2308      	moveq	r3, #8
 800b768:	2100      	movs	r1, #0
 800b76a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b76e:	6866      	ldr	r6, [r4, #4]
 800b770:	60a6      	str	r6, [r4, #8]
 800b772:	2e00      	cmp	r6, #0
 800b774:	bfa2      	ittt	ge
 800b776:	6821      	ldrge	r1, [r4, #0]
 800b778:	f021 0104 	bicge.w	r1, r1, #4
 800b77c:	6021      	strge	r1, [r4, #0]
 800b77e:	b90d      	cbnz	r5, 800b784 <_printf_i+0x110>
 800b780:	2e00      	cmp	r6, #0
 800b782:	d04b      	beq.n	800b81c <_printf_i+0x1a8>
 800b784:	4616      	mov	r6, r2
 800b786:	fbb5 f1f3 	udiv	r1, r5, r3
 800b78a:	fb03 5711 	mls	r7, r3, r1, r5
 800b78e:	5dc7      	ldrb	r7, [r0, r7]
 800b790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b794:	462f      	mov	r7, r5
 800b796:	42bb      	cmp	r3, r7
 800b798:	460d      	mov	r5, r1
 800b79a:	d9f4      	bls.n	800b786 <_printf_i+0x112>
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d10b      	bne.n	800b7b8 <_printf_i+0x144>
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	07df      	lsls	r7, r3, #31
 800b7a4:	d508      	bpl.n	800b7b8 <_printf_i+0x144>
 800b7a6:	6923      	ldr	r3, [r4, #16]
 800b7a8:	6861      	ldr	r1, [r4, #4]
 800b7aa:	4299      	cmp	r1, r3
 800b7ac:	bfde      	ittt	le
 800b7ae:	2330      	movle	r3, #48	@ 0x30
 800b7b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b7b8:	1b92      	subs	r2, r2, r6
 800b7ba:	6122      	str	r2, [r4, #16]
 800b7bc:	f8cd a000 	str.w	sl, [sp]
 800b7c0:	464b      	mov	r3, r9
 800b7c2:	aa03      	add	r2, sp, #12
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	f7ff fee6 	bl	800b598 <_printf_common>
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	d14a      	bne.n	800b866 <_printf_i+0x1f2>
 800b7d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7d4:	b004      	add	sp, #16
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	f043 0320 	orr.w	r3, r3, #32
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	4833      	ldr	r0, [pc, #204]	@ (800b8b0 <_printf_i+0x23c>)
 800b7e4:	2778      	movs	r7, #120	@ 0x78
 800b7e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	6831      	ldr	r1, [r6, #0]
 800b7ee:	061f      	lsls	r7, r3, #24
 800b7f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7f4:	d402      	bmi.n	800b7fc <_printf_i+0x188>
 800b7f6:	065f      	lsls	r7, r3, #25
 800b7f8:	bf48      	it	mi
 800b7fa:	b2ad      	uxthmi	r5, r5
 800b7fc:	6031      	str	r1, [r6, #0]
 800b7fe:	07d9      	lsls	r1, r3, #31
 800b800:	bf44      	itt	mi
 800b802:	f043 0320 	orrmi.w	r3, r3, #32
 800b806:	6023      	strmi	r3, [r4, #0]
 800b808:	b11d      	cbz	r5, 800b812 <_printf_i+0x19e>
 800b80a:	2310      	movs	r3, #16
 800b80c:	e7ac      	b.n	800b768 <_printf_i+0xf4>
 800b80e:	4827      	ldr	r0, [pc, #156]	@ (800b8ac <_printf_i+0x238>)
 800b810:	e7e9      	b.n	800b7e6 <_printf_i+0x172>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	f023 0320 	bic.w	r3, r3, #32
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	e7f6      	b.n	800b80a <_printf_i+0x196>
 800b81c:	4616      	mov	r6, r2
 800b81e:	e7bd      	b.n	800b79c <_printf_i+0x128>
 800b820:	6833      	ldr	r3, [r6, #0]
 800b822:	6825      	ldr	r5, [r4, #0]
 800b824:	6961      	ldr	r1, [r4, #20]
 800b826:	1d18      	adds	r0, r3, #4
 800b828:	6030      	str	r0, [r6, #0]
 800b82a:	062e      	lsls	r6, r5, #24
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	d501      	bpl.n	800b834 <_printf_i+0x1c0>
 800b830:	6019      	str	r1, [r3, #0]
 800b832:	e002      	b.n	800b83a <_printf_i+0x1c6>
 800b834:	0668      	lsls	r0, r5, #25
 800b836:	d5fb      	bpl.n	800b830 <_printf_i+0x1bc>
 800b838:	8019      	strh	r1, [r3, #0]
 800b83a:	2300      	movs	r3, #0
 800b83c:	6123      	str	r3, [r4, #16]
 800b83e:	4616      	mov	r6, r2
 800b840:	e7bc      	b.n	800b7bc <_printf_i+0x148>
 800b842:	6833      	ldr	r3, [r6, #0]
 800b844:	1d1a      	adds	r2, r3, #4
 800b846:	6032      	str	r2, [r6, #0]
 800b848:	681e      	ldr	r6, [r3, #0]
 800b84a:	6862      	ldr	r2, [r4, #4]
 800b84c:	2100      	movs	r1, #0
 800b84e:	4630      	mov	r0, r6
 800b850:	f7f4 fcbe 	bl	80001d0 <memchr>
 800b854:	b108      	cbz	r0, 800b85a <_printf_i+0x1e6>
 800b856:	1b80      	subs	r0, r0, r6
 800b858:	6060      	str	r0, [r4, #4]
 800b85a:	6863      	ldr	r3, [r4, #4]
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	2300      	movs	r3, #0
 800b860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b864:	e7aa      	b.n	800b7bc <_printf_i+0x148>
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	4632      	mov	r2, r6
 800b86a:	4649      	mov	r1, r9
 800b86c:	4640      	mov	r0, r8
 800b86e:	47d0      	blx	sl
 800b870:	3001      	adds	r0, #1
 800b872:	d0ad      	beq.n	800b7d0 <_printf_i+0x15c>
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	079b      	lsls	r3, r3, #30
 800b878:	d413      	bmi.n	800b8a2 <_printf_i+0x22e>
 800b87a:	68e0      	ldr	r0, [r4, #12]
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	4298      	cmp	r0, r3
 800b880:	bfb8      	it	lt
 800b882:	4618      	movlt	r0, r3
 800b884:	e7a6      	b.n	800b7d4 <_printf_i+0x160>
 800b886:	2301      	movs	r3, #1
 800b888:	4632      	mov	r2, r6
 800b88a:	4649      	mov	r1, r9
 800b88c:	4640      	mov	r0, r8
 800b88e:	47d0      	blx	sl
 800b890:	3001      	adds	r0, #1
 800b892:	d09d      	beq.n	800b7d0 <_printf_i+0x15c>
 800b894:	3501      	adds	r5, #1
 800b896:	68e3      	ldr	r3, [r4, #12]
 800b898:	9903      	ldr	r1, [sp, #12]
 800b89a:	1a5b      	subs	r3, r3, r1
 800b89c:	42ab      	cmp	r3, r5
 800b89e:	dcf2      	bgt.n	800b886 <_printf_i+0x212>
 800b8a0:	e7eb      	b.n	800b87a <_printf_i+0x206>
 800b8a2:	2500      	movs	r5, #0
 800b8a4:	f104 0619 	add.w	r6, r4, #25
 800b8a8:	e7f5      	b.n	800b896 <_printf_i+0x222>
 800b8aa:	bf00      	nop
 800b8ac:	0800bd9a 	.word	0x0800bd9a
 800b8b0:	0800bdab 	.word	0x0800bdab

0800b8b4 <__sflush_r>:
 800b8b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	0716      	lsls	r6, r2, #28
 800b8be:	4605      	mov	r5, r0
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	d454      	bmi.n	800b96e <__sflush_r+0xba>
 800b8c4:	684b      	ldr	r3, [r1, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	dc02      	bgt.n	800b8d0 <__sflush_r+0x1c>
 800b8ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	dd48      	ble.n	800b962 <__sflush_r+0xae>
 800b8d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8d2:	2e00      	cmp	r6, #0
 800b8d4:	d045      	beq.n	800b962 <__sflush_r+0xae>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8dc:	682f      	ldr	r7, [r5, #0]
 800b8de:	6a21      	ldr	r1, [r4, #32]
 800b8e0:	602b      	str	r3, [r5, #0]
 800b8e2:	d030      	beq.n	800b946 <__sflush_r+0x92>
 800b8e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	0759      	lsls	r1, r3, #29
 800b8ea:	d505      	bpl.n	800b8f8 <__sflush_r+0x44>
 800b8ec:	6863      	ldr	r3, [r4, #4]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8f2:	b10b      	cbz	r3, 800b8f8 <__sflush_r+0x44>
 800b8f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8fc:	6a21      	ldr	r1, [r4, #32]
 800b8fe:	4628      	mov	r0, r5
 800b900:	47b0      	blx	r6
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	d106      	bne.n	800b916 <__sflush_r+0x62>
 800b908:	6829      	ldr	r1, [r5, #0]
 800b90a:	291d      	cmp	r1, #29
 800b90c:	d82b      	bhi.n	800b966 <__sflush_r+0xb2>
 800b90e:	4a2a      	ldr	r2, [pc, #168]	@ (800b9b8 <__sflush_r+0x104>)
 800b910:	410a      	asrs	r2, r1
 800b912:	07d6      	lsls	r6, r2, #31
 800b914:	d427      	bmi.n	800b966 <__sflush_r+0xb2>
 800b916:	2200      	movs	r2, #0
 800b918:	6062      	str	r2, [r4, #4]
 800b91a:	04d9      	lsls	r1, r3, #19
 800b91c:	6922      	ldr	r2, [r4, #16]
 800b91e:	6022      	str	r2, [r4, #0]
 800b920:	d504      	bpl.n	800b92c <__sflush_r+0x78>
 800b922:	1c42      	adds	r2, r0, #1
 800b924:	d101      	bne.n	800b92a <__sflush_r+0x76>
 800b926:	682b      	ldr	r3, [r5, #0]
 800b928:	b903      	cbnz	r3, 800b92c <__sflush_r+0x78>
 800b92a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b92e:	602f      	str	r7, [r5, #0]
 800b930:	b1b9      	cbz	r1, 800b962 <__sflush_r+0xae>
 800b932:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b936:	4299      	cmp	r1, r3
 800b938:	d002      	beq.n	800b940 <__sflush_r+0x8c>
 800b93a:	4628      	mov	r0, r5
 800b93c:	f7ff fbea 	bl	800b114 <_free_r>
 800b940:	2300      	movs	r3, #0
 800b942:	6363      	str	r3, [r4, #52]	@ 0x34
 800b944:	e00d      	b.n	800b962 <__sflush_r+0xae>
 800b946:	2301      	movs	r3, #1
 800b948:	4628      	mov	r0, r5
 800b94a:	47b0      	blx	r6
 800b94c:	4602      	mov	r2, r0
 800b94e:	1c50      	adds	r0, r2, #1
 800b950:	d1c9      	bne.n	800b8e6 <__sflush_r+0x32>
 800b952:	682b      	ldr	r3, [r5, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d0c6      	beq.n	800b8e6 <__sflush_r+0x32>
 800b958:	2b1d      	cmp	r3, #29
 800b95a:	d001      	beq.n	800b960 <__sflush_r+0xac>
 800b95c:	2b16      	cmp	r3, #22
 800b95e:	d11e      	bne.n	800b99e <__sflush_r+0xea>
 800b960:	602f      	str	r7, [r5, #0]
 800b962:	2000      	movs	r0, #0
 800b964:	e022      	b.n	800b9ac <__sflush_r+0xf8>
 800b966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b96a:	b21b      	sxth	r3, r3
 800b96c:	e01b      	b.n	800b9a6 <__sflush_r+0xf2>
 800b96e:	690f      	ldr	r7, [r1, #16]
 800b970:	2f00      	cmp	r7, #0
 800b972:	d0f6      	beq.n	800b962 <__sflush_r+0xae>
 800b974:	0793      	lsls	r3, r2, #30
 800b976:	680e      	ldr	r6, [r1, #0]
 800b978:	bf08      	it	eq
 800b97a:	694b      	ldreq	r3, [r1, #20]
 800b97c:	600f      	str	r7, [r1, #0]
 800b97e:	bf18      	it	ne
 800b980:	2300      	movne	r3, #0
 800b982:	eba6 0807 	sub.w	r8, r6, r7
 800b986:	608b      	str	r3, [r1, #8]
 800b988:	f1b8 0f00 	cmp.w	r8, #0
 800b98c:	dde9      	ble.n	800b962 <__sflush_r+0xae>
 800b98e:	6a21      	ldr	r1, [r4, #32]
 800b990:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b992:	4643      	mov	r3, r8
 800b994:	463a      	mov	r2, r7
 800b996:	4628      	mov	r0, r5
 800b998:	47b0      	blx	r6
 800b99a:	2800      	cmp	r0, #0
 800b99c:	dc08      	bgt.n	800b9b0 <__sflush_r+0xfc>
 800b99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a6:	81a3      	strh	r3, [r4, #12]
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	4407      	add	r7, r0
 800b9b2:	eba8 0800 	sub.w	r8, r8, r0
 800b9b6:	e7e7      	b.n	800b988 <__sflush_r+0xd4>
 800b9b8:	dfbffffe 	.word	0xdfbffffe

0800b9bc <_fflush_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	690b      	ldr	r3, [r1, #16]
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	b913      	cbnz	r3, 800b9cc <_fflush_r+0x10>
 800b9c6:	2500      	movs	r5, #0
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	b118      	cbz	r0, 800b9d6 <_fflush_r+0x1a>
 800b9ce:	6a03      	ldr	r3, [r0, #32]
 800b9d0:	b90b      	cbnz	r3, 800b9d6 <_fflush_r+0x1a>
 800b9d2:	f7ff f987 	bl	800ace4 <__sinit>
 800b9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0f3      	beq.n	800b9c6 <_fflush_r+0xa>
 800b9de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9e0:	07d0      	lsls	r0, r2, #31
 800b9e2:	d404      	bmi.n	800b9ee <_fflush_r+0x32>
 800b9e4:	0599      	lsls	r1, r3, #22
 800b9e6:	d402      	bmi.n	800b9ee <_fflush_r+0x32>
 800b9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ea:	f7ff fb72 	bl	800b0d2 <__retarget_lock_acquire_recursive>
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	f7ff ff5f 	bl	800b8b4 <__sflush_r>
 800b9f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9f8:	07da      	lsls	r2, r3, #31
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	d4e4      	bmi.n	800b9c8 <_fflush_r+0xc>
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	059b      	lsls	r3, r3, #22
 800ba02:	d4e1      	bmi.n	800b9c8 <_fflush_r+0xc>
 800ba04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba06:	f7ff fb65 	bl	800b0d4 <__retarget_lock_release_recursive>
 800ba0a:	e7dd      	b.n	800b9c8 <_fflush_r+0xc>

0800ba0c <fiprintf>:
 800ba0c:	b40e      	push	{r1, r2, r3}
 800ba0e:	b503      	push	{r0, r1, lr}
 800ba10:	4601      	mov	r1, r0
 800ba12:	ab03      	add	r3, sp, #12
 800ba14:	4805      	ldr	r0, [pc, #20]	@ (800ba2c <fiprintf+0x20>)
 800ba16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba1a:	6800      	ldr	r0, [r0, #0]
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	f7ff fca3 	bl	800b368 <_vfiprintf_r>
 800ba22:	b002      	add	sp, #8
 800ba24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba28:	b003      	add	sp, #12
 800ba2a:	4770      	bx	lr
 800ba2c:	20000108 	.word	0x20000108

0800ba30 <__swhatbuf_r>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	460c      	mov	r4, r1
 800ba34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	b096      	sub	sp, #88	@ 0x58
 800ba3c:	4615      	mov	r5, r2
 800ba3e:	461e      	mov	r6, r3
 800ba40:	da0d      	bge.n	800ba5e <__swhatbuf_r+0x2e>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba48:	f04f 0100 	mov.w	r1, #0
 800ba4c:	bf14      	ite	ne
 800ba4e:	2340      	movne	r3, #64	@ 0x40
 800ba50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba54:	2000      	movs	r0, #0
 800ba56:	6031      	str	r1, [r6, #0]
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	b016      	add	sp, #88	@ 0x58
 800ba5c:	bd70      	pop	{r4, r5, r6, pc}
 800ba5e:	466a      	mov	r2, sp
 800ba60:	f000 f848 	bl	800baf4 <_fstat_r>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	dbec      	blt.n	800ba42 <__swhatbuf_r+0x12>
 800ba68:	9901      	ldr	r1, [sp, #4]
 800ba6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba72:	4259      	negs	r1, r3
 800ba74:	4159      	adcs	r1, r3
 800ba76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba7a:	e7eb      	b.n	800ba54 <__swhatbuf_r+0x24>

0800ba7c <__smakebuf_r>:
 800ba7c:	898b      	ldrh	r3, [r1, #12]
 800ba7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba80:	079d      	lsls	r5, r3, #30
 800ba82:	4606      	mov	r6, r0
 800ba84:	460c      	mov	r4, r1
 800ba86:	d507      	bpl.n	800ba98 <__smakebuf_r+0x1c>
 800ba88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	2301      	movs	r3, #1
 800ba92:	6163      	str	r3, [r4, #20]
 800ba94:	b003      	add	sp, #12
 800ba96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba98:	ab01      	add	r3, sp, #4
 800ba9a:	466a      	mov	r2, sp
 800ba9c:	f7ff ffc8 	bl	800ba30 <__swhatbuf_r>
 800baa0:	9f00      	ldr	r7, [sp, #0]
 800baa2:	4605      	mov	r5, r0
 800baa4:	4639      	mov	r1, r7
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff fba8 	bl	800b1fc <_malloc_r>
 800baac:	b948      	cbnz	r0, 800bac2 <__smakebuf_r+0x46>
 800baae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab2:	059a      	lsls	r2, r3, #22
 800bab4:	d4ee      	bmi.n	800ba94 <__smakebuf_r+0x18>
 800bab6:	f023 0303 	bic.w	r3, r3, #3
 800baba:	f043 0302 	orr.w	r3, r3, #2
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	e7e2      	b.n	800ba88 <__smakebuf_r+0xc>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	6020      	str	r0, [r4, #0]
 800bac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baca:	81a3      	strh	r3, [r4, #12]
 800bacc:	9b01      	ldr	r3, [sp, #4]
 800bace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bad2:	b15b      	cbz	r3, 800baec <__smakebuf_r+0x70>
 800bad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bad8:	4630      	mov	r0, r6
 800bada:	f000 f81d 	bl	800bb18 <_isatty_r>
 800bade:	b128      	cbz	r0, 800baec <__smakebuf_r+0x70>
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	f023 0303 	bic.w	r3, r3, #3
 800bae6:	f043 0301 	orr.w	r3, r3, #1
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	431d      	orrs	r5, r3
 800baf0:	81a5      	strh	r5, [r4, #12]
 800baf2:	e7cf      	b.n	800ba94 <__smakebuf_r+0x18>

0800baf4 <_fstat_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4d07      	ldr	r5, [pc, #28]	@ (800bb14 <_fstat_r+0x20>)
 800baf8:	2300      	movs	r3, #0
 800bafa:	4604      	mov	r4, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	4611      	mov	r1, r2
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	f7f5 f98d 	bl	8000e20 <_fstat>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	d102      	bne.n	800bb10 <_fstat_r+0x1c>
 800bb0a:	682b      	ldr	r3, [r5, #0]
 800bb0c:	b103      	cbz	r3, 800bb10 <_fstat_r+0x1c>
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop
 800bb14:	200010c4 	.word	0x200010c4

0800bb18 <_isatty_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4d06      	ldr	r5, [pc, #24]	@ (800bb34 <_isatty_r+0x1c>)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4604      	mov	r4, r0
 800bb20:	4608      	mov	r0, r1
 800bb22:	602b      	str	r3, [r5, #0]
 800bb24:	f7f5 f98c 	bl	8000e40 <_isatty>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_isatty_r+0x1a>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_isatty_r+0x1a>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	200010c4 	.word	0x200010c4

0800bb38 <_sbrk_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d06      	ldr	r5, [pc, #24]	@ (800bb54 <_sbrk_r+0x1c>)
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	f7f5 f994 	bl	8000e70 <_sbrk>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_sbrk_r+0x1a>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_sbrk_r+0x1a>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	200010c4 	.word	0x200010c4

0800bb58 <abort>:
 800bb58:	b508      	push	{r3, lr}
 800bb5a:	2006      	movs	r0, #6
 800bb5c:	f000 f82c 	bl	800bbb8 <raise>
 800bb60:	2001      	movs	r0, #1
 800bb62:	f7f5 f929 	bl	8000db8 <_exit>

0800bb66 <_raise_r>:
 800bb66:	291f      	cmp	r1, #31
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	d904      	bls.n	800bb7a <_raise_r+0x14>
 800bb70:	2316      	movs	r3, #22
 800bb72:	6003      	str	r3, [r0, #0]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb78:	bd38      	pop	{r3, r4, r5, pc}
 800bb7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb7c:	b112      	cbz	r2, 800bb84 <_raise_r+0x1e>
 800bb7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb82:	b94b      	cbnz	r3, 800bb98 <_raise_r+0x32>
 800bb84:	4628      	mov	r0, r5
 800bb86:	f000 f831 	bl	800bbec <_getpid_r>
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	4628      	mov	r0, r5
 800bb90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb94:	f000 b818 	b.w	800bbc8 <_kill_r>
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d00a      	beq.n	800bbb2 <_raise_r+0x4c>
 800bb9c:	1c59      	adds	r1, r3, #1
 800bb9e:	d103      	bne.n	800bba8 <_raise_r+0x42>
 800bba0:	2316      	movs	r3, #22
 800bba2:	6003      	str	r3, [r0, #0]
 800bba4:	2001      	movs	r0, #1
 800bba6:	e7e7      	b.n	800bb78 <_raise_r+0x12>
 800bba8:	2100      	movs	r1, #0
 800bbaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4798      	blx	r3
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	e7e0      	b.n	800bb78 <_raise_r+0x12>
	...

0800bbb8 <raise>:
 800bbb8:	4b02      	ldr	r3, [pc, #8]	@ (800bbc4 <raise+0xc>)
 800bbba:	4601      	mov	r1, r0
 800bbbc:	6818      	ldr	r0, [r3, #0]
 800bbbe:	f7ff bfd2 	b.w	800bb66 <_raise_r>
 800bbc2:	bf00      	nop
 800bbc4:	20000108 	.word	0x20000108

0800bbc8 <_kill_r>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	4d07      	ldr	r5, [pc, #28]	@ (800bbe8 <_kill_r+0x20>)
 800bbcc:	2300      	movs	r3, #0
 800bbce:	4604      	mov	r4, r0
 800bbd0:	4608      	mov	r0, r1
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	602b      	str	r3, [r5, #0]
 800bbd6:	f7f5 f8df 	bl	8000d98 <_kill>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d102      	bne.n	800bbe4 <_kill_r+0x1c>
 800bbde:	682b      	ldr	r3, [r5, #0]
 800bbe0:	b103      	cbz	r3, 800bbe4 <_kill_r+0x1c>
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	bd38      	pop	{r3, r4, r5, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200010c4 	.word	0x200010c4

0800bbec <_getpid_r>:
 800bbec:	f7f5 b8cc 	b.w	8000d88 <_getpid>

0800bbf0 <_init>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_fini>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	bf00      	nop
 800bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc02:	bc08      	pop	{r3}
 800bc04:	469e      	mov	lr, r3
 800bc06:	4770      	bx	lr
